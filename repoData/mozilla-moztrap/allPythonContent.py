__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# MozTrap documentation build configuration file, created by
# sphinx-quickstart on Thu Jan  5 18:58:30 2012.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinxcontrib.httpdomain']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'MozTrap'
copyright = u'2013, Mozilla'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.4'
# The full version, including alpha/beta/rc tags.
release = '1.4'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'MozTrapdoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'MozTrap.tex', u'MozTrap Documentation',
   u'Mozilla', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'moztrap', u'MozTrap Documentation',
     [u'Mozilla'], 1)
]

########NEW FILE########
__FILENAME__ = ipy_user_conf
"""
Makes IPython import all of your projects models when shell is started.

1. Save as ipy_user_conf.py in project root
2. ./manage.py shell
3. profit

"""

import IPython.ipapi
ip = IPython.ipapi.get()


def main():
    print "\nImported:\n\n"

    imports = [
        "import datetime",
        "from moztrap import model",
        ]

    for imp in imports:
        ip.ex(imp)
        print imp

    print "\n"

main()

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python


"""
Runs a Django management command.

Avoids the double-settings-import and extra sys.path additions of Django's
default manage.py.

"""
import os, sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "moztrap.settings.default")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = middleware
from django.conf import settings
from django.core.exceptions import MiddlewareNotUsed
from django.http import HttpResponse



class AjaxTracebackMiddleware(object):
    def __init__(self):
        if not settings.DEBUG:
            raise MiddlewareNotUsed


    def process_exception(self, request, *args, **kwargs):
        if request.is_ajax():
            import traceback
            return HttpResponse(traceback.format_exc().replace("\n", "<br>\n"))

########NEW FILE########
__FILENAME__ = paths
"""
Utility functions for deployment-related path-munging.

"""

import os
import sys
import site


def add_vendor_lib():
    """
    Adds the vendor library to the front of sys.path.

    """
    base_dir = os.path.dirname(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    vendor_lib = os.path.join(
        base_dir, "requirements", "vendor", "lib", "python")

    orig_sys_path = set(sys.path)

    # Add vendor-lib directory to sys.path (using site.addsitedir so pth
    # files are processed)
    site.addsitedir(vendor_lib)

    # Give vendor lib precedence over global Python environment
    new_sys_path = []
    for item in list(sys.path):
        if item not in orig_sys_path:
            new_sys_path.append(item)
            sys.path.remove(item)
    sys.path[:0] = new_sys_path

########NEW FILE########
__FILENAME__ = vendor_wsgi
"""
Alternative WSGI entry-point that uses requirements/vendor for
dependencies.

"""
import os
import sys

base_dir = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, base_dir)

from moztrap.deploy.paths import add_vendor_lib
add_vendor_lib()

# Set default settings and instantiate application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "moztrap.settings.default")

from django.core.handlers.wsgi import WSGIHandler
application = WSGIHandler()

########NEW FILE########
__FILENAME__ = wsgi
"""WSGI entry-point for MozTrap."""

import os
import sys

base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, base_dir)

# Set default settings and instantiate application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "moztrap.settings.default")

from django.core.handlers.wsgi import WSGIHandler
application = WSGIHandler()

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        pass

    def backwards(self, orm):
        pass

    models = {

    }

    complete_apps = ['attachments']

########NEW FILE########
__FILENAME__ = models
"""
Models for attachments.

"""
from os.path import basename

from django.db import models

from ..mtmodel import MTModel



class Attachment(MTModel):
    """Abstract base class for an attachment."""
    attachment = models.FileField(upload_to="attachments/%Y/%m/%d/")
    name = models.CharField(max_length=250)


    def __unicode__(self):
        """Unicode representation is name of attached file."""
        return self.name


    class Meta:
        abstract = True


    @property
    def url(self):
        """Shortcut property to access file attachment url."""
        return self.attachment.url

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin

from preferences.admin import PreferencesAdmin

from ..mtadmin import MTTabularInline, MTModelAdmin, TeamModelAdmin
from .models import Product, ProductVersion, CorePreferences, ApiKey



class ProductVersionInline(MTTabularInline):
    model = ProductVersion
    extra = 0


class ApiKeyAdmin(MTModelAdmin):
    list_display = ["owner", "active", "key"]
    list_filter = ["active"]



admin.site.register(Product, TeamModelAdmin, inlines=[ProductVersionInline])
admin.site.register(ProductVersion, TeamModelAdmin, list_filter=["product"])
admin.site.register(CorePreferences, PreferencesAdmin)
admin.site.register(ApiKey, ApiKeyAdmin)

########NEW FILE########
__FILENAME__ = api
from tastypie.resources import ModelResource, ALL, ALL_WITH_RELATIONS
from tastypie import fields
from tastypie import http
from tastypie.exceptions import ImmediateHttpResponse

from .models import Product, ProductVersion
from .auth import User
from ..environments.api import EnvironmentResource
from ..mtapi import MTResource, MTAuthorization

import logging
logger = logging.getLogger(__name__)


class ReportResultsAuthorization(MTAuthorization):
    """Authorization that only allows users with execute privileges."""

    @property
    def permission(self):
        """This permission should be checked by is_authorized."""
        return "execution.execute"



class ProductVersionAuthorization(MTAuthorization):
    """A permission of 'core.manage_productversions does not exist,
    use core.manage_products instead."""

    @property
    def permission(self):
        """This permission should be checked by is_authorized."""
        return "core.manage_products"



class ProductVersionResource(MTResource):
    """
    Create, Read, Update and Delete capabilities for Product Version.

    Filterable by version and product fields.
    """
    product = fields.ToOneField(
        "moztrap.model.core.api.ProductResource", "product")

    class Meta(MTResource.Meta):
        queryset = ProductVersion.objects.all()
        fields = ["id", "version", "codename", "product"]
        filtering = {
            "version": ALL,
            "product": ALL_WITH_RELATIONS,
            }
        authorization = ProductVersionAuthorization()
        ordering = ['product__id', 'version', 'id']


    @property
    def model(self):
        """Model class related to this resource."""
        return ProductVersion


    @property
    def read_create_fields(self):
        """product is read-only"""
        return ["product"]


    def obj_update(self, bundle, request=None, **kwargs):
        """Avoid concurrency error caused by the setting of latest_version"""
        bundle = self.check_read_create(bundle)

        try:
            # use grandparent rather than parent
            bundle = super(MTResource, self).obj_update(
                bundle=bundle, request=request, **kwargs)

            # update the cc_version
            bundle.obj.cc_version = self.model.objects.get(
                id=bundle.obj.id).cc_version

            # specify the user
            bundle.obj.save(user=request.user)

        except Exception:  # pragma: no cover
            logger.exception("error updating %s", bundle)  # pragma: no cover
            raise  # pragma: no cover

        return bundle



class ProductResource(MTResource):
    """
    Create, Read, Update and Delete capabilities for Product.

    Filterable by name field.
    """

    productversions = fields.ToManyField(
        ProductVersionResource,
        "versions",
        full=True,
        )

    class Meta(MTResource.Meta):
        queryset = Product.objects.all()
        fields = ["id", "name", "description"]
        filtering = {"name": ALL}
        ordering = ['name', 'id']


    @property
    def model(self):
        """Model class related to this resource."""
        return Product


    def obj_create(self, bundle, request=None, **kwargs):
        """Oversee the creation of product and its required productversion.
        Probably not strictly RESTful.
        """

        pv_required_msg = str("The 'productversions' key must exist, " +
                          "must be a list, and the list must contain " +
                          "at least one entry.")
        # pull the productversions off, they don't exist yet
        try:
            productversions = bundle.data.pop('productversions')
            if not isinstance(productversions, list):
                raise ImmediateHttpResponse(
                    response=http.HttpBadRequest(pv_required_msg))
            if not len(productversions):
                raise ImmediateHttpResponse(
                    response=http.HttpBadRequest(pv_required_msg))

            bundle.data["productversions"] = []
        except KeyError:
            raise ImmediateHttpResponse(
                response=http.HttpBadRequest(pv_required_msg))

        # create the product
        updated_bundle = super(ProductResource, self).obj_create(
            bundle=bundle, request=request, **kwargs)

        # create the productversions
        for pv in productversions:
            ProductVersion.objects.get_or_create(
                product=updated_bundle.obj, **pv)

        return updated_bundle


    def obj_update(self, bundle, request=None, **kwargs):
        """Oversee updating of product.
        If this were RESTful, it would remove all existing versions and add
        the requested versions. But this isn't restful, it just adds the
        version if it doesn't exist already.
        """

        # pull the productversions off, you can't edit them from here
        productversions = bundle.data.pop("productversions", [])
        bundle.data["productversions"] = []

        updated_bundle = super(ProductResource, self).obj_update(
            bundle=bundle, request=request, **kwargs)

        # create the productversions
        for pv in productversions:
            ProductVersion.objects.get_or_create(
                product=updated_bundle.obj, **pv)

        return updated_bundle



class ProductVersionEnvironmentsResource(ModelResource):
    """Return a list of productversions with full environment info."""

    environments = fields.ToManyField(
        EnvironmentResource,
        "environments",
        full=True,
        )

    class Meta:
        queryset = ProductVersion.objects.all()
        list_allowed_methods = ['get']
        fields = ["id", "version", "codename"]



class UserResource(ModelResource):
    """Return a list of usernames"""

    class Meta:
        queryset = User.objects.all()
        list_allowed_methods = ['get']
        fields = ["id", "username"]

########NEW FILE########
__FILENAME__ = auth
"""
Proxy User and Role models.

"""
import base64
import hashlib

from django.db.models import Q

from django.contrib.auth.backends import ModelBackend as DjangoModelBackend
# Permission is imported solely so other places can import it from here
from django.contrib.auth.models import User as BaseUser, Group, Permission

from django_browserid.auth import BrowserIDBackend as BaseBrowserIDBackend
from preferences import preferences
from registration.models import RegistrationProfile
from registration.signals import user_registered


# monkeypatch the User model to ensure unique email addresses
BaseUser._meta.get_field("email")._unique = True


class User(BaseUser):
    """Proxy for contrib.auth User that adds action methods and roles alias."""
    class Meta:
        proxy = True


    def delete(self, user=None):
        """
        Delete this user.

        We ignore the passed-in user since User is not a MTModel and doesn't
        track created_by / modified_by.

        We have to delete registration profiles manually, to avoid
        https://code.djangoproject.com/ticket/16128.

        """
        if (self.is_superuser == True and self.is_active == True and
            User.objects.filter(is_superuser=True).filter(is_active=True).count() == 1):
            return
        # @@@ Django ticket 16128, hopefully fixed in 1.4?
        # RegistrationProfile's FK is to Django's user model, not ours
        RegistrationProfile.objects.filter(user=self).delete()
        super(User, self).delete()


    def activate(self, user=None):
        """Activate this user."""
        self.is_active = True
        self.save(force_update=True)


    def deactivate(self, user=None):
        """Deactivate this user."""
        self.is_active = False
        self.save(force_update=True)


    def save(self, force_insert=False, force_update=False, using=None):
        if (not force_insert and self.is_superuser and not self.is_active and
            User.objects.filter(is_superuser=True).filter(is_active=True).count() == 1):
            from django.shortcuts import get_object_or_404
            user = get_object_or_404(User, pk=self.id)
            # check whether the user is exactly the last `active` superuser or not
            if user.is_active:
                self.is_active = True

        super(User, self).save(force_insert=force_insert,
            force_update=force_update, using=using)


    @property
    def roles(self):
        """Maps our name (roles) to Django name (groups)."""
        return self.groups



Role = Group



class ModelBackend(DjangoModelBackend):
    """Accepts username or email and returns our proxy User model."""
    def authenticate(self, username=None, password=None):
        """Return User for given credentials, or None."""
        candidates = User.objects.filter(Q(username=username) | Q(email=username))
        for user in candidates:
            if user.check_password(password):
                return user
        return None


    def get_user(self, user_id):
        """Return User for given ID, or None."""
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None


class BrowserIDBackend(BaseBrowserIDBackend):
    """BrowserID backend that returns our proxy user."""
    def filter_users_by_email(self, email):
        """Return all users matching the specified email."""
        return User.objects.filter(email=email)

    def get_user(self, user_id):
        """Return User for given ID, or None."""
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None



AUTO_USERNAME_PREFIX = ":auto:"
USERNAME_MAX_LENGTH = User._meta.get_field("username").max_length
DIGEST_LENGTH = USERNAME_MAX_LENGTH - len(AUTO_USERNAME_PREFIX)



def browserid_create_user(email):
    """Create and return a new User for a new BrowserID login."""
    digest = base64.urlsafe_b64encode(hashlib.sha1(email).digest())
    username = AUTO_USERNAME_PREFIX + digest[:DIGEST_LENGTH]

    user = User.objects.create_user(username=username, email=email)
    add_new_user_role(user)

    return user



def add_new_user_role(user, **kwargs):
    role = preferences.CorePreferences.default_new_user_role
    if role is not None:
        # Have to use groups, not roles, because registration doesn't send our
        # proxy User with its signal.
        user.groups.add(role)



user_registered.connect(add_new_user_role)

########NEW FILE########
__FILENAME__ = fixture_gen
"""Sample products fixture generator."""
from django.core.management import call_command

from django.contrib.auth.models import User as BaseUser, Group

from .auth import User, Role

from fixture_generator import fixture_generator

from ..environments.models import Profile

from .models import Product, ProductVersion


@fixture_generator(
    Product, ProductVersion, requires=[
        "environments.sample_environments", "core.sample_users"])
def sample_products():
    admin = User.objects.get(username="admin")

    browserenvs = Profile.objects.get(name="Browser Testing Environments")

    ff = Product.objects.create(name="Firefox", user=admin)
    ff9 = ProductVersion.objects.create(version="9", product=ff, user=admin)
    ff9.environments.add(*browserenvs.environments.all())
    ff10 = ProductVersion.objects.create(version="10", product=ff, user=admin)
    ff10.environments.add(*browserenvs.environments.all())

    webenvs = Profile.objects.get(name="Website Testing Environments")

    cc = Product.objects.create(name="MozTrap", user=admin)
    cc6 = ProductVersion.objects.create(version="0.6", product=cc, user=admin)
    cc6.environments.add(*webenvs.environments.all())
    cc7 = ProductVersion.objects.create(version="0.7", product=cc, user=admin)
    cc7.environments.add(*webenvs.environments.all())
    cc8 = ProductVersion.objects.create(
        version="0.8", product=cc, codename="Django DB", user=admin)
    cc8.environments.add(*webenvs.environments.all())


# have to pass fixture-generator the real concrete models
@fixture_generator(Group, BaseUser)
def sample_users():
    call_command("create_default_roles", verbosity=0)

    tester_role = Role.objects.get(name="Tester")
    creator_role = Role.objects.get(name="Test Creator")
    manager_role = Role.objects.get(name="Test Manager")
    admin_role = Role.objects.get(name="Admin")

    # create and delete one user so we avoid using id=1 in the fixture; would
    # overwrite the default superuser that may have been created on syncdb.
    User.objects.create(username="delete")
    User._base_manager.all().delete()

    tester = User(username="tester", email="tester@example.com")
    creator = User(username="creator", email="creator@example.com")
    manager = User(username="manager", email="manager@example.com")
    admin = User(username="admin", email="admin@example.com")

    for user in [tester, creator, manager, admin]:
        user.set_password("testpw")
        user.save()

    tester.roles.add(tester_role)
    creator.roles.add(creator_role)
    manager.roles.add(manager_role)
    admin.roles.add(admin_role)

########NEW FILE########
__FILENAME__ = create_default_roles
"""
Management command to create default roles, if they don't exist.

"""
from django.core.management.base import NoArgsCommand

from moztrap.model.core.auth import Role, Permission



ROLES = {}

# Testers have read-only permissions, aside from running tests.
ROLES["Tester"] = [
    "execution.execute",
    ]

# Test Creators can create new test cases and add/remove them from suites.
ROLES["Test Creator"] = [
    "library.create_cases",
    "library.manage_suite_cases",
    ] + ROLES["Tester"]

# Test Managers can fully manage cases, suites, runs, environments, etc.
ROLES["Test Manager"] = [
    "core.manage_products",
    "library.manage_cases",
    "library.manage_suites",
    "tags.manage_tags",
    "execution.manage_runs",
    "execution.review_results",
    "environments.manage_environments",
    ] + ROLES["Test Creator"]

# Admins can also manage users and products
ROLES["Admin"] = [
    "core.manage_users",
    ] + ROLES["Test Manager"]



class Command(NoArgsCommand):
    help = ("Create default user roles (unless they already exist).")

    def handle_noargs(self, **options):
        verbosity = int(options.get('verbosity', 1))

        for role_name, perms in ROLES.iteritems():
            role, created = Role.objects.get_or_create(name=role_name)
            if not created:
                if verbosity:
                    print("Role %r already exists; skipping." % role_name)
                continue  # pragma: no cover http://bugs.python.org/issue2506

            if verbosity:
                print("Role %r created." % role_name)

            for perm_label in perms:
                app_label, codename = perm_label.split(".")
                try:
                    perm = Permission.objects.get(
                        content_type__app_label=app_label,
                        codename=codename)
                except Permission.DoesNotExist:
                    if verbosity:
                        print("  Permission %r unknown; skipping." % perm_label)
                    continue  # pragma: no cover http://bugs.python.org/issue2506

                role.permissions.add(perm)

                if verbosity:
                    print("  Permission %r added." % perm_label)

########NEW FILE########
__FILENAME__ = generate_fixture
"""
Patch database setup for fixture generation so it runs South migrations.

"""
from fixture_generator.management.commands import generate_fixture
from south.management.commands import patch_for_test_db_setup


class Command(generate_fixture.Command):
    def handle(self, *args, **kwargs):
        patch_for_test_db_setup()
        super(Command, self).handle(*args, **kwargs)

########NEW FILE########
__FILENAME__ = import
"""
Import Suite and Case data for a given Product Version.

The "suites" or "cases" sections are optional.
The data must be in JSON format and structured like this::

    {
        "suites": [
            {
                "name": "suite1 name",
                "description": "suite description"
            }
        ]
        "cases": [
            {
                "name": "case title",
                "description": "case description",
                "tags": ["tag1", "tag2", "tag3"],
                "suites": ["suite1 name", "suite2 name", "suite3 name"],
                "created_by": "cdawson@mozilla.com"
                "steps": [
                    {
                        "instruction": "insruction text",
                        "expected": "expected text"
                    }
                ]
            }
        ]
    }

"""

from django.core.management.base import BaseCommand, CommandError

from optparse import make_option
import json
import os.path

from moztrap.model.core.models import Product, ProductVersion
from moztrap.model.library.importer import Importer



class Command(BaseCommand):
    args = "<product_name> <product_version> <filename>"
    help = (
        "Imports the cases from a JSON file into "
        "the specified Product Version")

    option_list = BaseCommand.option_list + (
        make_option(
            "-f",
            "--force_dupes",
            action='store_true',
            dest="force_dupes",
            default=False,
            help="Force importing cases, even if the case name is a"
            " duplicate"),

        )

    def handle(self, *args, **options):
        if not len(args) == 3:
            raise CommandError("Usage: {0}".format(self.args))

        force_dupes = options.get("force_dupes")

        try:
            product = Product.objects.get(name=args[0])
        except Product.DoesNotExist:
            raise CommandError('Product "{0}" does not exist'.format(args[0]))

        try:
            product_version = ProductVersion.objects.get(
                product=product, version=args[1])
        except ProductVersion.DoesNotExist:
            raise CommandError(
                'Version "{0}" of product "{1}" does not exist'.format(
                    args[1], args[0])
                )

        try:
            files = []
            # if this is a directory, import all files in it
            if os.path.isdir(args[2]):
                for file in os.listdir(args[2]):
                    if not file.startswith("."):
                        files.append("{0}/{1}".format(args[2], file))
            else:
                files.append(args[2])

            results_for_files = None
            for file in files:
                with open(file) as fh:

                    # try to import this as JSON
                    try:
                        case_data = json.load(fh)   # pragma: no branch
                    except ValueError as e:
                        raise CommandError(
                            "Could not parse JSON: {0}: {1}".format(
                                str(e),
                                fh,
                                ))

                    # @@@: support importing as CSV.  Rather than returning an
                    # error above, just try CSV import instead.

                    result = Importer().import_data(
                        product_version, case_data, force_dupes=force_dupes)

                    # append this result to those for any of the other files.
                    if not results_for_files:
                        results_for_files = result
                    else:
                        results_for_files.append(result)  # pragma: no branch

            if results_for_files:
                result_list = results_for_files.get_as_list()
                result_list.append("")
                self.stdout.write("\n".join(result_list))
            else:
                self.stdout.write("No files found to import.\n")


        except IOError as (errno, strerror):
            raise CommandError(
                'Could not open "{0}", I/O error {1}: {2}'.format(
                    args[2], errno, strerror)
                )

########NEW FILE########
__FILENAME__ = test
import sys

from django.core.management.commands.test import Command as TestCommand

from south.management.commands import patch_for_test_db_setup



class Command(TestCommand):
    help = (
        "Runs the test modules, cases, or methods specified "
        "by dotted path on the command line, or does test "
        "discovery if no arguments are given."
        )
    args = "[dotted-path ...]"

    requires_model_validation = False

    def handle(self, *test_labels, **options):
        patch_for_test_db_setup()

        from django.conf import settings
        from django.test.utils import get_runner

        verbosity = int(options.get('verbosity', 1))
        interactive = options.get('interactive', True)
        failfast = options.get('failfast', False)
        TestRunner = get_runner(settings)

        test_runner = TestRunner(verbosity=verbosity, interactive=interactive, failfast=failfast)
        failures = test_runner.run_tests(test_labels)

        sys.exit(bool(failures))

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Product'
        db.create_table('core_product', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 46, 29, 286097))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 46, 29, 286402))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('has_team', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('core', ['Product'])

        # Adding M2M table for field own_team on 'Product'
        db.create_table('core_product_own_team', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('product', models.ForeignKey(orm['core.product'], null=False)),
            ('user', models.ForeignKey(orm['auth.user'], null=False))
        ))
        db.create_unique('core_product_own_team', ['product_id', 'user_id'])

        # Adding model 'ProductVersion'
        db.create_table('core_productversion', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 46, 29, 282003))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 46, 29, 282207))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('has_team', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('product', self.gf('django.db.models.fields.related.ForeignKey')(related_name='versions', to=orm['core.Product'])),
            ('version', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('codename', self.gf('django.db.models.fields.CharField')(max_length=100, blank=True)),
            ('order', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('latest', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('core', ['ProductVersion'])

        # Adding unique constraint on 'ProductVersion', fields ['product', 'version']
        db.create_unique('core_productversion', ['product_id', 'version'])

        # Adding M2M table for field own_team on 'ProductVersion'
        db.create_table('core_productversion_own_team', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('productversion', models.ForeignKey(orm['core.productversion'], null=False)),
            ('user', models.ForeignKey(orm['auth.user'], null=False))
        ))
        db.create_unique('core_productversion_own_team', ['productversion_id', 'user_id'])

        # Adding M2M table for field environments on 'ProductVersion'
        db.create_table('core_productversion_environments', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('productversion', models.ForeignKey(orm['core.productversion'], null=False)),
            ('environment', models.ForeignKey(orm['environments.environment'], null=False))
        ))
        db.create_unique('core_productversion_environments', ['productversion_id', 'environment_id'])


    def backwards(self, orm):

        # Removing unique constraint on 'ProductVersion', fields ['product', 'version']
        db.delete_unique('core_productversion', ['product_id', 'version'])

        # Deleting model 'Product'
        db.delete_table('core_product')

        # Removing M2M table for field own_team on 'Product'
        db.delete_table('core_product_own_team')

        # Deleting model 'ProductVersion'
        db.delete_table('core_productversion')

        # Removing M2M table for field own_team on 'ProductVersion'
        db.delete_table('core_productversion_own_team')

        # Removing M2M table for field environments on 'ProductVersion'
        db.delete_table('core_productversion_environments')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'object_name': 'Product'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 295683)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 295875)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['order']", 'unique_together': "[('product', 'version')]", 'object_name': 'ProductVersion'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 291549)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 291734)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'object_name': 'Category'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 294942)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 295122)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 293717)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 293898)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 298586)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['environments.Element']", 'symmetrical': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 298764)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 297841)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 46, 29, 298023)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0002_auto__del_unique_productversion_product_version
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Removing unique constraint on 'ProductVersion', fields ['product', 'version']
        db.delete_unique('core_productversion', ['product_id', 'version'])


    def backwards(self, orm):

        # Adding unique constraint on 'ProductVersion', fields ['product', 'version']
        db.create_unique('core_productversion', ['product_id', 'version'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'object_name': 'Product'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 428752)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 428998)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 433434)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 433635)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'object_name': 'Category'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 436032)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 436218)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 437253)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 437616)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 431712)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['environments.Element']", 'symmetrical': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 431905)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 434970)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 21, 56, 6, 435235)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_productversion_cc_version__add_field_product
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'ProductVersion.cc_version'
        db.add_column('core_productversion', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'Product.cc_version'
        db.add_column('core_product', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)


    def backwards(self, orm):

        # Deleting field 'ProductVersion.cc_version'
        db.delete_column('core_productversion', 'cc_version')

        # Deleting field 'Product.cc_version'
        db.delete_column('core_product', 'cc_version')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 558711)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 558895)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 559819)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 560004)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.user': {
            'Meta': {'object_name': 'User', 'db_table': "'auth_user'", '_ormbases': ['auth.User'], 'proxy': 'True'}
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 562776)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 562967)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 561818)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 562003)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 555711)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 555910)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 557817)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 0, 59, 558002)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0004_fix_dupe_emails
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models


class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        dupe_emails = set()
        for email_data in orm["auth.User"].objects.values("email").distinct().annotate(
                num=models.Count("id")):
            if email_data["num"] > 1:
                dupe_emails.add(email_data["email"])

        for email in dupe_emails:
            i = 0
            for user in orm["auth.User"].objects.filter(email=email).order_by("id"):
                if i:
                    user.email = email + u"-dupe-" + unicode(i)
                    user.save()
                i += 1


    def backwards(self, orm):
        "Write your backwards methods here."


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 28, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['core']
    symmetrical = True

########NEW FILE########
__FILENAME__ = 0005_add_manage_products_permission_for_test_managers
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import DataMigration
from django.core.exceptions import ObjectDoesNotExist
from django.db import models


class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        try:
            role = orm["auth.Group"].objects.get(name="Test Manager")
            perm = orm["auth.Permission"].objects.get(codename="manage_products")
        except ObjectDoesNotExist:
            pass
        else:
            role.permissions.add(perm)


    def backwards(self, orm):
        "Write your backwards methods here."


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['core']
    symmetrical = True

########NEW FILE########
__FILENAME__ = 0006_auto__add_apikey
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'ApiKey'
        db.create_table('core_apikey', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 5, 9, 0, 0))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 5, 9, 0, 0))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('cc_version', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')(related_name='api_keys', to=orm['auth.User'])),
            ('key', self.gf('django.db.models.fields.CharField')(unique=True, max_length=36)),
            ('active', self.gf('django.db.models.fields.BooleanField')(default=True, db_index=True)),
        ))
        db.send_create_signal('core', ['ApiKey'])

    def backwards(self, orm):
        # Deleting model 'ApiKey'
        db.delete_table('core_apikey')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.apikey': {
            'Meta': {'object_name': 'ApiKey'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '36'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'api_keys'", 'to': "orm['auth.User']"})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 9, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0007_auto__chg_field_productversion_modified_by__chg_field_productversion_c
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        pass

    def backwards(self, orm):
        pass

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.apikey': {
            'Meta': {'object_name': 'ApiKey'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '36'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'api_keys'", 'to': "orm['auth.User']"})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0008_auto__add_index_productversion_created_on__add_index_product_name__add
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding index on 'ProductVersion', fields ['created_on']
        db.create_index('core_productversion', ['created_on'])

        # Adding index on 'Product', fields ['name']
        db.create_index('core_product', ['name'])

        # Adding index on 'Product', fields ['created_on']
        db.create_index('core_product', ['created_on'])

        # Adding index on 'ApiKey', fields ['created_on']
        db.create_index('core_apikey', ['created_on'])


    def backwards(self, orm):
        # Removing index on 'ApiKey', fields ['created_on']
        db.delete_index('core_apikey', ['created_on'])

        # Removing index on 'Product', fields ['created_on']
        db.delete_index('core_product', ['created_on'])

        # Removing index on 'Product', fields ['name']
        db.delete_index('core_product', ['name'])

        # Removing index on 'ProductVersion', fields ['created_on']
        db.delete_index('core_productversion', ['created_on'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.apikey': {
            'Meta': {'object_name': 'ApiKey'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '36'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'api_keys'", 'to': "orm['auth.User']"})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['core']
########NEW FILE########
__FILENAME__ = 0009_auto__add_index_productversion_modified_on__add_index_product_modified
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding index on 'ProductVersion', fields ['modified_on']
        db.create_index('core_productversion', ['modified_on'])

        # Adding index on 'Product', fields ['modified_on']
        db.create_index('core_product', ['modified_on'])

        # Adding index on 'ApiKey', fields ['modified_on']
        db.create_index('core_apikey', ['modified_on'])


    def backwards(self, orm):
        # Removing index on 'ApiKey', fields ['modified_on']
        db.delete_index('core_apikey', ['modified_on'])

        # Removing index on 'Product', fields ['modified_on']
        db.delete_index('core_product', ['modified_on'])

        # Removing index on 'ProductVersion', fields ['modified_on']
        db.delete_index('core_productversion', ['modified_on'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.apikey': {
            'Meta': {'object_name': 'ApiKey'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '36'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'api_keys'", 'to': "orm['auth.User']"})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['core']
########NEW FILE########
__FILENAME__ = models
"""
Core MozTrap models (Product).

"""
import uuid

from django.core.exceptions import ValidationError
from django.db import models

from pkg_resources import parse_version
from preferences.models import Preferences

from ..environments.models import HasEnvironmentsModel
from ..mtmodel import MTModel, MTManager, TeamModel
from .auth import Role, User



class Product(MTModel, TeamModel):
    name = models.CharField(db_index=True, max_length=100)
    description = models.TextField(blank=True)


    def __unicode__(self):
        return self.name


    class Meta:
        permissions = [
            ("manage_products", "Can add/edit/delete products."),
            ("manage_users", "Can add/edit/delete user accounts."),
            ]
        ordering = ["name"]


    def clone(self, *args, **kwargs):
        """
        Clone Product, with team.

        """
        kwargs.setdefault("cascade", ["team"])
        overrides = kwargs.setdefault("overrides", {})
        overrides.setdefault("name", "Cloned: {0}".format(self.name))
        return super(Product, self).clone(*args, **kwargs)


    def reorder_versions(self, update_instance=None):
        """
        Reorder versions of this product, saving new order in db.

        If an ``update_instance`` is given, update it with new order and
        ``latest`` flag.

        """
        ordered = sorted(self.versions.all(), key=by_version)
        for i, version in enumerate(ordered, 1):
            version.order = i
            version.latest = (i == len(ordered))
            version.save(force_update=True, skip_reorder=True, notrack=True)
            if version == update_instance:
                update_instance.order = version.order
                update_instance.latest = version.latest
                update_instance.cc_version += 1
        # now we have to update latest caseversions too, @@@ too slow?
        for case in self.cases.all():
            case.set_latest_version()



class ProductVersion(MTModel, TeamModel, HasEnvironmentsModel):
    product = models.ForeignKey(Product, related_name="versions")
    version = models.CharField(max_length=100)
    codename = models.CharField(max_length=100, blank=True)
    order = models.IntegerField(default=0, editable=False)
    # denormalized for querying
    latest = models.BooleanField(default=False, editable=False)


    @property
    def name(self):
        """A ProductVersion's name is its product name and version."""
        return u"%s %s" % (self.product, self.version)


    def __unicode__(self):
        """A ProductVersion's unicode representation is its name."""
        return self.name


    class Meta:
        ordering = ["product", "order"]


    def save(self, *args, **kwargs):
        """Save productversion, updating latest version."""
        skip_reorder = kwargs.pop("skip_reorder", False)
        super(ProductVersion, self).save(*args, **kwargs)
        if not skip_reorder:
            self.product.reorder_versions(update_instance=self)


    def delete(self, *args, **kwargs):
        """Delete productversion, updating latest version."""
        super(ProductVersion, self).delete(*args, **kwargs)
        self.product.reorder_versions()


    def undelete(self, *args, **kwargs):
        """Undelete productversion, updating latest version."""
        super(ProductVersion, self).undelete(*args, **kwargs)
        self.product.reorder_versions()


    def clean(self):
        """
        Validate uniqueness of product/version combo.

        Can't use actual unique constraint due to soft-deletion; if we don't
        include deleted-on in the constraint, deleted objects can cause
        integrity errors; if we include deleted-on in the constraint it
        nullifies the constraint entirely, since NULL != NULL in SQL.

        """
        try:
            dupes = ProductVersion.objects.filter(
                product=self.product, version=self.version)
        except Product.DoesNotExist:
            # product is not set or is invalid; dupes are not an issue.
            return
        if self.pk is not None:
            dupes = dupes.exclude(pk=self.pk)
        if dupes.exists():
            raise ValidationError(
                "Product version '{0}' for '{1}' already exists.".format(
                    self.version, self.product)
                )


    @property
    def parent(self):
        return self.product


    @classmethod
    def cascade_envs_to(cls, objs, adding):
        Run = cls.runs.related.model
        CaseVersion = cls.caseversions.related.model

        runs = Run.objects.filter(productversion__in=objs)
        caseversions = CaseVersion.objects.filter(productversion__in=objs)

        if adding:
            runs = runs.filter(status=Run.STATUS.draft)
            caseversions = caseversions.filter(envs_narrowed=False)

        return {Run: runs, CaseVersion: caseversions}


    def clone(self, *args, **kwargs):
        """
        Clone ProductVersion, with ".next" version and "Cloned:" codename.

        """
        overrides = kwargs.setdefault("overrides", {})
        overrides["version"] = "%s.next" % self.version
        overrides["codename"] = "Cloned: %s" % self.codename
        kwargs.setdefault("cascade", ["environments", "team"])
        return super(ProductVersion, self).clone(*args, **kwargs)



def by_version(productversion):
    """
    Given a ProductVersion, return a version tuple that will order correctly.

    Uses pkg_resources' ``parse_version`` function.

    This function is intended to be passed to the ``key`` argument of the
    ``sorted`` builtin.

    """
    return parse_version(productversion.version)



class CorePreferences(Preferences):
    __module__ = "preferences.models"

    default_new_user_role = models.ForeignKey(Role, blank=True, null=True)

    class Meta:
        verbose_name_plural = "core preferences"



class ApiKeyManager(MTManager):
    use_for_related_fields = True

    def active(self):
        return self.get_query_set().filter(active=True)



class ApiKey(MTModel):
    owner = models.ForeignKey(User, related_name="api_keys")
    key = models.CharField(max_length=36, unique=True)
    active = models.BooleanField(default=True, db_index=True)

    objects = ApiKeyManager()


    def __unicode__(self):
        return self.key


    @classmethod
    def generate(cls, owner, user=None):
        """
        Generate, save and return a new API key.

        ``owner`` is the owner of the new key, ``user`` is the creating user.

        """
        if user is None:
            user = owner

        return cls.objects.create(
            owner=owner, user=user, key=unicode(uuid.uuid4()))

########NEW FILE########
__FILENAME__ = admin
"""
Admin config for environment models.

"""
from django.contrib import admin

from ..mtadmin import MTModelAdmin, MTTabularInline
from . import models



class ElementInline(MTTabularInline):
    model = models.Element
    extra = 0



# not MTTabularInline because auto-generated through model is not MTModel
class EnvironmentElementInline(admin.TabularInline):
    model = models.Environment.elements.through
    extra = 0



admin.site.register(models.Profile, MTModelAdmin)
admin.site.register(models.Category, MTModelAdmin, inlines=[ElementInline])
admin.site.register(models.Element, MTModelAdmin)
admin.site.register(
    models.Environment, MTModelAdmin,
    inlines=[EnvironmentElementInline], exclude=["elements"])

########NEW FILE########
__FILENAME__ = api
from tastypie import fields
from tastypie import http
from tastypie.resources import ModelResource, ALL, ALL_WITH_RELATIONS
from tastypie.exceptions import ImmediateHttpResponse
from ..mtapi import MTResource, MTAuthorization

from .models import Profile, Environment, Element, Category

import logging
logger = logging.getLogger(__name__)


class EnvironmentAuthorization(MTAuthorization):
    """Atypically named permission."""

    @property
    def permission(self):
        """This permission should be checked by is_authorized."""
        return "environments.manage_environments"



class ProfileResource(MTResource):
    """Create, Read, Update, and Delete capabilities for Profile."""

    class Meta(MTResource.Meta):
        queryset = Profile.objects.all()
        fields = ["id", "name"]
        authorization = EnvironmentAuthorization()
        ordering = ["id", "name"]
        filtering = {
            "name": ALL,
        }

    @property
    def model(self):
        """Model class related to this resource."""
        return Profile



class CategoryResource(MTResource):
    """Create, Read, Update and Delete capabilities for Category."""

    elements = fields.ToManyField(
        "moztrap.model.environments.api.ElementResource",
        "elements",
        full=True,
        readonly=True
    )

    class Meta(MTResource.Meta):
        queryset = Category.objects.all()
        fields = ["id", "name"]
        authorization = EnvironmentAuthorization()
        ordering = ["id", "name"]
        filtering = {
            "name": ALL,
        }


    @property
    def model(self):
        """Model class related to this resource."""
        return Category



class ElementResource(MTResource):
    """Create, Read, Update and Delete capabilities for Element."""

    category = fields.ForeignKey(CategoryResource, "category")

    class Meta(MTResource.Meta):
        queryset = Element.objects.all()
        fields = ["id", "name", "category"]
        authorization = EnvironmentAuthorization()
        filtering = {
            "category": ALL_WITH_RELATIONS,
            "name": ALL,
        }
        ordering = ["id", "name"]


    @property
    def model(self):
        """Model class related to this resource."""
        return Element


    @property
    def read_create_fields(self):
        """List of fields that are required for create
        but read-only for update."""
        return ["category"]



class EnvironmentResource(MTResource):
    """Create, Read and Delete capabilities for environments"""

    elements = fields.ToManyField(ElementResource, "elements")
    # an environment is not required to be associated with a profile
    profile = fields.ForeignKey(ProfileResource, "profile", null=True)

    class Meta(MTResource.Meta):
        queryset = Environment.objects.all()
        list_allowed_methods = ['get', 'post', 'patch']
        detail_allowed_methods = ['get', 'put', 'delete']
        fields = ["id", "profile", "elements"]
        filtering = {
            "elements": ALL,
            "profile": ALL_WITH_RELATIONS,
        }
        ordering = ["id", "profile"]


    @property
    def model(self):
        """Model class related to this resource."""
        return Environment


    def hydrate_m2m(self, bundle):
        """Validate the elements,
        which should each belong to separate categories."""

        bundle = super(EnvironmentResource, self).hydrate_m2m(bundle)
        elem_categories = [elem.data['category'] for elem in
                           bundle.data['elements']]
        if len(set(elem_categories)) != len(bundle.data['elements']):
            error_msg = "Elements must each belong to a different Category."
            logger.error(error_msg)
            raise ImmediateHttpResponse(
                response=http.HttpBadRequest(error_msg))
        return bundle


    def patch_list(self, request, **kwargs):
        """
        Since there is no RESTful way to do what we want to do, and since
        ``PATCH`` is poorly defined with regards to RESTfulness, we are
        overloading ``PATCH`` to take a single request that performs
        combinatorics and creates multiple objects.
        """
        import itertools
        from django.db import transaction
        from tastypie.utils import dict_strip_unicode_keys

        deserialized = self.deserialize(
            request,
            request.raw_post_data,
            format=request.META.get('CONTENT_TYPE', 'application/json'))

        # verify input
        categories = deserialized.pop('categories', [])
        if not categories or not isinstance(categories, list):
            error_msg = "PATCH request must contain categories list."
            logger.error(error_msg)
            raise ImmediateHttpResponse(
                response=http.HttpBadRequest(error_msg))


        # do the combinatorics
        elem_lists = []
        for cat in categories:
            # do some type validation / variation
            if isinstance(cat, basestring):
                # simple case of create all the combinations
                cat = Category.objects.filter(id=self._id_from_uri(cat))
                elem_list = Element.objects.filter(category=cat)
            elif isinstance(cat, dict):
                # we must be working with at least one partial category
                category = Category.objects.filter(
                    id=self._id_from_uri(cat['category']))
                elem_list = Element.objects.filter(category=category)
                if 'exclude' in cat:
                    # exclude some element(s) from the combinations
                    exclude_uris = cat['exclude']
                    exclude_ids = [int(
                        self._id_from_uri(x)) for x in exclude_uris]
                    elem_list = [elem for elem in elem_list
                                 if elem.id not in exclude_ids]
                elif 'include' in cat:
                    # include only a few elements in the combinations
                    include_uris = cat['include']
                    include_ids = [int(
                        self._id_from_uri(x)) for x in include_uris]
                    elem_list = [elem for elem in elem_list
                                 if elem.id in include_ids]
                else:
                    # don't worry about this,
                    # it'll act like a list of categories
                    pass  # pragma: no cover
            else:
                error_msg = "categories list must contain resource uris or hashes."
                logger.error(error_msg)
                raise ImmediateHttpResponse(
                    response=http.HttpBadRequest(error_msg))

            # save off the elements from this category that will be used
            elem_lists.append(elem_list)

        # create all the combinations of elements from categories
        combinatorics = itertools.product(*elem_lists)

        # do the creation
        with transaction.commit_on_success():
            for combo in combinatorics:
                deserialized['elements'] = combo
                bundle = self.build_bundle(
                    data=dict_strip_unicode_keys(deserialized))
                bundle.request.META['REQUEST_METHOD'] = 'PATCH'
                self.is_valid(bundle, request)
                self.obj_create(bundle, request=request)

        # don't try to reply with data, the request doesn't
        # really match the results.
        return http.HttpAccepted()

########NEW FILE########
__FILENAME__ = fixture_gen
"""Sample environments fixture generator."""
import itertools

from fixture_generator import fixture_generator

from ..core.auth import User
from .models import Profile, Environment, Element, Category


@fixture_generator(
    Profile, Category, Element, Environment, requires=["core.sample_users"])
def sample_environments():
    admin = User.objects.get(username="admin")

    webenvs = Profile.objects.create(
        name="Website Testing Environments", user=admin)
    browserenvs = Profile.objects.create(
        name="Browser Testing Environments", user=admin)

    browser = Category.objects.create(name="Browser", user=admin)
    browsers = {}
    for name in ["Firefox", "Safari", "Chrome", "Internet Explorer"]:
        browsers[name] = Element.objects.create(
            name=name, category=browser, user=admin)

    language = Category.objects.create(name="Language", user=admin)
    languages = {}
    for name in ["English", "Spanish", "Mandarin", "French", "German"]:
        languages[name] = Element.objects.create(
            name=name, category=language, user=admin)

    os = Category.objects.create(name="Operating System", user=admin)
    oses = {}
    for name in ["Windows", "Linux", "OS X"]:
        oses[name] = Element.objects.create(name=name, category=os, user=admin)

    for elements in itertools.product(
            browsers.values(), languages.values(), oses.values()):
        if (browsers["Internet Explorer"] in elements and
                oses["Windows"] not in elements):
            continue
        if browsers["Safari"] in elements and oses["Linux"] in elements:
            continue
        env = Environment.objects.create(profile=webenvs, user=admin)
        env.elements.add(*elements)

    for elements in itertools.product(languages.values(), oses.values()):
        env = Environment.objects.create(profile=browserenvs, user=admin)
        env.elements.add(*elements)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Profile'
        db.create_table('environments_profile', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 49, 29, 891503))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 49, 29, 891690))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
        ))
        db.send_create_signal('environments', ['Profile'])

        # Adding model 'Category'
        db.create_table('environments_category', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 49, 29, 888196))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 49, 29, 888402))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
        ))
        db.send_create_signal('environments', ['Category'])

        # Adding model 'Element'
        db.create_table('environments_element', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 49, 29, 892619))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 49, 29, 892803))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('category', self.gf('django.db.models.fields.related.ForeignKey')(related_name='elements', to=orm['environments.Category'])),
        ))
        db.send_create_signal('environments', ['Element'])

        # Adding model 'Environment'
        db.create_table('environments_environment', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 49, 29, 888992))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 49, 29, 889185))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('profile', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='environments', null=True, to=orm['environments.Profile'])),
        ))
        db.send_create_signal('environments', ['Environment'])

        # Adding M2M table for field elements on 'Environment'
        db.create_table('environments_environment_elements', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('environment', models.ForeignKey(orm['environments.environment'], null=False)),
            ('element', models.ForeignKey(orm['environments.element'], null=False))
        ))
        db.create_unique('environments_environment_elements', ['environment_id', 'element_id'])


    def backwards(self, orm):

        # Deleting model 'Profile'
        db.delete_table('environments_profile')

        # Deleting model 'Category'
        db.delete_table('environments_category')

        # Deleting model 'Element'
        db.delete_table('environments_element')

        # Deleting model 'Environment'
        db.delete_table('environments_environment')

        # Removing M2M table for field elements on 'Environment'
        db.delete_table('environments_environment_elements')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'object_name': 'Category'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 49, 29, 895443)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 49, 29, 895629)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 49, 29, 899731)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 49, 29, 899913)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 49, 29, 896273)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['environments.Element']", 'symmetrical': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 49, 29, 896455)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 49, 29, 898606)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 49, 29, 898789)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['environments']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_profile_cc_version__add_field_element_cc_version__add_
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'Profile.cc_version'
        db.add_column('environments_profile', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'Element.cc_version'
        db.add_column('environments_element', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'Category.cc_version'
        db.add_column('environments_category', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'Environment.cc_version'
        db.add_column('environments_environment', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)


    def backwards(self, orm):

        # Deleting field 'Profile.cc_version'
        db.delete_column('environments_profile', 'cc_version')

        # Deleting field 'Element.cc_version'
        db.delete_column('environments_element', 'cc_version')

        # Deleting field 'Category.cc_version'
        db.delete_column('environments_category', 'cc_version')

        # Deleting field 'Environment.cc_version'
        db.delete_column('environments_environment', 'cc_version')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.user': {
            'Meta': {'object_name': 'User', 'db_table': "'auth_user'", '_ormbases': ['auth.User'], 'proxy': 'True'}
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 22, 888237)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 22, 888432)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 22, 893066)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 22, 893246)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 22, 889087)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 22, 889269)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 22, 891117)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 22, 891299)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['environments']

########NEW FILE########
__FILENAME__ = 0003_auto__chg_field_profile_modified_by__chg_field_profile_created_by__chg
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        pass

    def backwards(self, orm):
        pass

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['environments']

########NEW FILE########
__FILENAME__ = 0004_auto__add_index_profile_created_on__add_index_element_name__add_index_
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding index on 'Profile', fields ['created_on']
        db.create_index('environments_profile', ['created_on'])

        # Adding index on 'Element', fields ['name']
        db.create_index('environments_element', ['name'])

        # Adding index on 'Element', fields ['created_on']
        db.create_index('environments_element', ['created_on'])

        # Adding index on 'Category', fields ['name']
        db.create_index('environments_category', ['name'])

        # Adding index on 'Category', fields ['created_on']
        db.create_index('environments_category', ['created_on'])

        # Adding index on 'Environment', fields ['created_on']
        db.create_index('environments_environment', ['created_on'])


    def backwards(self, orm):
        # Removing index on 'Environment', fields ['created_on']
        db.delete_index('environments_environment', ['created_on'])

        # Removing index on 'Category', fields ['created_on']
        db.delete_index('environments_category', ['created_on'])

        # Removing index on 'Category', fields ['name']
        db.delete_index('environments_category', ['name'])

        # Removing index on 'Element', fields ['created_on']
        db.delete_index('environments_element', ['created_on'])

        # Removing index on 'Element', fields ['name']
        db.delete_index('environments_element', ['name'])

        # Removing index on 'Profile', fields ['created_on']
        db.delete_index('environments_profile', ['created_on'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['environments']
########NEW FILE########
__FILENAME__ = 0005_auto__add_index_profile_modified_on__add_index_element_modified_on__ad
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding index on 'Profile', fields ['modified_on']
        db.create_index('environments_profile', ['modified_on'])

        # Adding index on 'Element', fields ['modified_on']
        db.create_index('environments_element', ['modified_on'])

        # Adding index on 'Category', fields ['modified_on']
        db.create_index('environments_category', ['modified_on'])

        # Adding index on 'Environment', fields ['modified_on']
        db.create_index('environments_environment', ['modified_on'])


    def backwards(self, orm):
        # Removing index on 'Environment', fields ['modified_on']
        db.delete_index('environments_environment', ['modified_on'])

        # Removing index on 'Category', fields ['modified_on']
        db.delete_index('environments_category', ['modified_on'])

        # Removing index on 'Element', fields ['modified_on']
        db.delete_index('environments_element', ['modified_on'])

        # Removing index on 'Profile', fields ['modified_on']
        db.delete_index('environments_profile', ['modified_on'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['environments']
########NEW FILE########
__FILENAME__ = models
"""
Models for environments.

"""
import itertools
from collections import defaultdict

from django.db import models

from ..mtmodel import MTModel



class Profile(MTModel):
    """
    A set of Environments for a type of product.

    For instance, a "browser testing" Profile might be a set of
    environments relevant to testing browsers.

    """
    name = models.CharField(max_length=200)


    def __unicode__(self):
        """Return unicode representation."""
        return self.name


    @classmethod
    def generate(cls, name, *elements, **kwargs):
        """
        Create profile of environments as Cartesian product of given elements.

        Elements are split by category, and then an environment is generated
        for each combination of one element from each category.

        """
        by_category = defaultdict(list)
        for element in elements:
            by_category[element.category].append(element)

        new = cls.objects.create(name=name, **kwargs)

        for element_list in itertools.product(*by_category.values()):
            e = Environment.objects.create(profile=new)
            e.elements.add(*element_list)

        return new


    def clone(self, *args, **kwargs):
        """Clone profile, with environments."""
        kwargs.setdefault("cascade", ["environments"])
        overrides = kwargs.setdefault("overrides", {})
        overrides.setdefault("name", "Cloned: {0}".format(self.name))
        return super(Profile, self).clone(*args, **kwargs)


    def categories(self):
        """Return an iterable of categories that are part of this profile."""
        return Category.objects.filter(
            elements__environments__profile=self).distinct().order_by("name")



class Category(MTModel):
    """
    A category of parallel environment elements.

    For instance, the category "Operating System" could include "Linux", "OS
    X", "Windows"...

    """
    name = models.CharField(db_index=True, max_length=200)


    def __unicode__(self):
        """Return unicode representation."""
        return self.name


    class Meta:
        ordering = ["name"]
        verbose_name_plural = "categories"


    # @@@ there should be some way to annotate this onto a queryset efficiently
    @property
    def deletable(self):
        """Return True if this category can be deleted, otherwise False."""
        return not Environment.objects.filter(elements__category=self).exists()


    # @@@ this protection should apply to queryset.delete as well
    def delete(self, *args, **kwargs):
        """Delete this category, or raise ProtectedError if its in use."""
        if not self.deletable:
            raise models.ProtectedError(
                "Category '{0}' is in use and cannot be deleted.".format(
                    self.name),
                list(Environment.objects.filter(elements__category=self).all())
                )
        return super(Category, self).delete(*args, **kwargs)



class Element(MTModel):
    """
    An individual environment factor (e.g. "OS X" or "English").

    """
    name = models.CharField(db_index=True, max_length=200)
    category = models.ForeignKey(Category, related_name="elements")


    def __unicode__(self):
        """Return unicode representation."""
        return self.name


    class Meta:
        ordering = ["name"]


    # @@@ there should be some way to annotate this onto a queryset efficiently
    @property
    def deletable(self):
        """Return True if this element can be deleted, otherwise False."""
        return not self.environments.exists()


    # @@@ this protection should apply to queryset.delete as well
    def delete(self, *args, **kwargs):
        """Delete this element, or raise ProtectedError if its in use."""
        if not self.deletable:
            raise models.ProtectedError(
                "Element '{0}' is in use and cannot be deleted.".format(
                    self.name),
                list(self.environments.all())
                )
        return super(Element, self).delete(*args, **kwargs)



class Environment(MTModel):
    """
    A collection of elements representing a testing environment.

    For instance, an Environment for testing a web application might include
    the elements "Firefox 10", "English", "Windows 7".

    An Environment containing multiple elements from the same category
    (e.g. both "Linux" and "OS X") means that either of those elements matches
    this environment: in other words, the test can be run on either Linux or OS
    X, it doesn't matter for the purposes of this test.

    """
    profile = models.ForeignKey(
        Profile, blank=True, null=True, related_name="environments")

    elements = models.ManyToManyField(Element, related_name="environments")


    def __unicode__(self):
        """Return unicode representation."""
        return u", ".join(unicode(e) for e in self.ordered_elements())


    class Meta:
        permissions = [
            (
                "manage_environments",
                "Can add/edit/delete environments, profiles, etc."
                )
            ]


    def ordered_elements(self):
        """All elements in category name order."""
        return iter(self.elements.order_by("category__name"))


    def clone(self, *args, **kwargs):
        """Clone environment, including element relationships."""
        kwargs.setdefault("cascade", ["elements"])
        return super(Environment, self).clone(*args, **kwargs)


    # @@@ there should be some way to annotate this onto a queryset efficiently
    @property
    def deletable(self):
        """Return True if this environment can be deleted, otherwise False."""
        from moztrap.model import ProductVersion
        return not ProductVersion.objects.filter(environments=self).exists()


    # @@@ this protection should apply to queryset.delete as well
    def delete(self, *args, **kwargs):
        """Delete this environment, or raise ProtectedError if its in use."""
        if not self.deletable:
            from moztrap.model import ProductVersion
            raise models.ProtectedError(
                "Environment '{0}' is in use and cannot be deleted.".format(
                    str(self)),
                list(ProductVersion.objects.filter(environments=self).all())
                )
        return super(Environment, self).delete(*args, **kwargs)


    def remove_from_profile(self, user=None):
        """Remove environment from its profile and delete it if not in use."""
        if self.deletable:
            self.delete(user=user)
        else:
            self.profile = None
            self.save(force_update=True, user=user)



class HasEnvironmentsModel(models.Model):
    """
    Base for models that inherit/cascade environments to/from parents/children.

    Subclasses should implement ``parent`` property and ``cascade_envs_to``
    classmethod.

    """
    environments = models.ManyToManyField(Environment, related_name="%(class)s")


    class Meta:
        abstract = True


    def save(self, *args, **kwargs):
        """Save instance; new instances get parent environments."""
        adding = False
        if self.id is None:
            adding = True

        ret = super(HasEnvironmentsModel, self).save(*args, **kwargs)

        if adding and isinstance(self.parent, HasEnvironmentsModel):
            self.environments.add(*self.parent.environments.all())

        return ret


    @property
    def parent(self):
        """
        The model instance to inherit environments from.

        """
        return None


    @classmethod
    def cascade_envs_to(cls, objs, adding):
        """
        Return model instances to cascade env profile changes to.

        Return value should be a dictionary mapping model classes to iterables
        of model instances to cascade to.

        ``objs`` arg is list of objs`` of this class to cascade from;
        ``adding`` arg is True if cascading for an addition of envs to the
        profile, False if cascading a removal.

        """
        return {}


    @classmethod
    def _remove_envs(cls, objs, envs):
        """Remove one or environments from one or more objects of this class."""
        for model, instances in cls.cascade_envs_to(objs, adding=False).items():
            model._remove_envs(instances, envs)
        m2m_reverse_name = cls.environments.field.related_query_name()
        cls.environments.through._base_manager.filter(
            **{
                "{0}__in".format(m2m_reverse_name): objs,
                "environment__in": envs
                }
              ).delete()


    def remove_envs(self, *envs):
        """Remove one or more environments from this object's profile."""
        self._remove_envs([self], envs)


    def add_envs(self, *envs):
        """Add one or more environments to this object's profile."""
        # @@@ optimize this to reduce queries once we have bulk insert in 1.4
        self.environments.add(*envs)
        for model, instances in self.cascade_envs_to(
                [self], adding=True).items():
            for instance in instances:
                instance.add_envs(*envs)

########NEW FILE########
__FILENAME__ = admin
"""
Admin config for execution models.

"""
from django.contrib import admin

from ..mtadmin import (
    MTModelAdmin, TeamModelAdmin, MTTabularInline, MTStackedInline)
from . import models



class RunCaseVersionInline(MTTabularInline):
    model = models.RunCaseVersion
    extra = 0



class RunSuiteInline(MTTabularInline):
    model = models.RunSuite
    extra = 0



class ResultInline(MTStackedInline):
    model = models.Result
    extra = 0
    fieldsets = [(None, {"fields": [
                    "runcaseversion",
                    ("tester", "environment"),
                    ("status"),
                    "comment",
                    ("review", "reviewed_by"),
                    "exists",
                    ]})]



class StepResultInline(MTTabularInline):
    model = models.StepResult
    extra = 0



class RunAdmin(TeamModelAdmin):
    filter_horizontal = ["environments"]
    fieldsets = [(None, {"fields": [
                    "name",
                    ("productversion", "status"),
                    "description",
                    ("start", "end"),
                    "environments",
                    ]})]
    inlines = [RunSuiteInline, RunCaseVersionInline]



class ResultAdmin(MTModelAdmin):
    fieldsets = [(None, {"fields": [
                    "runcaseversion",
                    ("tester", "environment"),
                    ("status"),
                    "comment",
                    ("review", "reviewed_by"),
                    ]})]
    inlines = [StepResultInline]




admin.site.register(models.Run, RunAdmin)
admin.site.register(
    models.RunCaseVersion, MTModelAdmin, inlines=[ResultInline])
admin.site.register(models.Result, ResultAdmin)

########NEW FILE########
__FILENAME__ = api
from django.db.models import Count
from tastypie.resources import ModelResource, ALL_WITH_RELATIONS
from tastypie import http, fields
from tastypie.exceptions import ImmediateHttpResponse
from tastypie.bundle import Bundle

import json

from django.core.exceptions import ValidationError, ObjectDoesNotExist
from django.http import HttpResponse

from .models import Run, RunCaseVersion, RunSuite, Result
from ..mtapi import MTResource, MTApiKeyAuthentication, MTAuthorization
from ..core.api import (ProductVersionResource, ProductResource,
                        ReportResultsAuthorization, UserResource)
from ..environments.api import EnvironmentResource
from ..environments.models import Environment
from ..library.api import (CaseVersionResource, BaseSelectionResource,
                           SuiteResource)
from ..library.models import CaseVersion, Suite

from ...view.lists.filters import filter_url

import logging
logger = logging.getLogger(__name__)


class RunSuiteAuthorization(MTAuthorization):
    """Atypically named permission."""

    @property
    def permission(self):
        """This permission should be checked by is_authorized."""
        return "execution.manage_runs"


class RunCaseVersionResource(ModelResource):
    """
    RunCaseVersion represents the connection between a run and a caseversion.

    It is possible to return a result for each runcaseversion.  So the result
    will sit as a peer to the caseversion under the runcaseversion.

    """

    run = fields.ToOneField(
        "moztrap.model.execution.api.RunResource",
        "run",
        related_name="runcaseversion")
    caseversion = fields.ToOneField(CaseVersionResource, "caseversion", full=True)

    class Meta:
        queryset = RunCaseVersion.objects.all()
        list_allowed_methods = ['get']
        filtering = {
            "run": ALL_WITH_RELATIONS,
            "caseversion": ALL_WITH_RELATIONS,
            }
        fields = ["id", "run"]



class RunResource(ModelResource):
    """
    Fetch the test runs for the specified product and version.

    It is also possible to create a new testrun, when posted.

    """

    productversion = fields.ForeignKey(ProductVersionResource, "productversion")
    environments = fields.ToManyField(
        EnvironmentResource,
        "environments",
        full=False,
        )
    runcaseversions = fields.ToManyField(
        RunCaseVersionResource,
        "runcaseversions",
        )

    class Meta:
        queryset = Run.objects.all()
        list_allowed_methods = ["get", "post"]
        fields = [
            "id",
            "name",
            "description",
            "status",
            "productversion",
            "environments",
            "runcaseversions",
            ]
        filtering = {
            "productversion": ALL_WITH_RELATIONS,
            "status": "exact",
        }
        authentication = MTApiKeyAuthentication()
        authorization = ReportResultsAuthorization()
        always_return_data = True


    def dehydrate(self, bundle):
        """Add some convenience fields to the return JSON."""

        pv = bundle.obj.productversion
        bundle.data["productversion_name"] = pv.version
        bundle.data["product_name"] = pv.product.name

        return bundle


    def dispatch_detail(self, request, **kwargs):
        """For details, we want the full info on environments for the run """

        self.fields["environments"].full = True
        return super(RunResource, self).dispatch_detail(request, **kwargs)


    def dispatch_list(self, request, **kwargs):
        """For list, we don't want the full info on environments """

        self.fields["environments"].full = False
        return super(RunResource, self).dispatch_list(request, **kwargs)


    def create_response(self, request, data,
                        response_class=HttpResponse, **response_kwargs):
        """On posting a run, return a url to the MozTrap UI for that new run."""

        resp = super(RunResource, self).create_response(
            request,
            data,
            response_class=response_class,
            **response_kwargs
            )

        if isinstance(data, Bundle):
            # data will be a bundle if we are creating a new Run.  And in that
            # case we want to add a URI to viewing this new run result in the UI
            full_url = filter_url(
                "results_runcaseversions",
                Run.objects.get(pk=data.data["id"]),
                )

            new_content = json.loads(resp.content)
            new_content["ui_uri"] = full_url
            new_content["resource_uri"] = data.data["resource_uri"]

            resp.content = json.dumps(new_content)
            # need to set the content type to application/json
            resp._headers["content-type"] = ("Content-Type", "application/json; charset=utf-8")
        return resp


    def obj_create(self, bundle, request=None, **kwargs):
        """Set the created_by field for the run to the request's user"""

        bundle = super(RunResource, self).obj_create(bundle=bundle, request=request, **kwargs)
        bundle.obj.created_by = request.user
        bundle.obj.save()
        return bundle


    def hydrate_runcaseversions(self, bundle):
        """
        Handle the runcaseversion creation during a POST of a new Run.

        Tastypie handles the creation of the run itself.  But we handle the
        RunCaseVersions and Results because we have special handler methods for
        setting the statuses which we want to keep DRY.

        """

        try:
            run = bundle.obj
            run.save()

            # walk results

            for data in bundle.data["runcaseversions"]:

                status = data.pop("status")

                # find caseversion for case
                cv = CaseVersion.objects.get(
                    productversion=run.productversion,
                    case=data.pop("case"),
                    )

                # create runcaseversion for this run to caseversion
                rcv, created = RunCaseVersion.objects.get_or_create(
                    run=run,
                    caseversion=cv,
                    )


                data["user"] = bundle.request.user
                data["environment"] = Environment.objects.get(
                    pk=data["environment"])

                # create result via methods on runcaseversion
                rcv.get_result_method(status)(**data)

            bundle.data["runcaseversions"] = []
            return bundle

        except KeyError as e:
            raise ValidationError(
                "bad result object data missing key: {0}".format(e))

        except ObjectDoesNotExist as e:
            raise ValidationError(e)



class ResultResource(ModelResource):
    """
    Endpoint for submitting results for a set of runcaseversions.

    This endpoint is write only.  The submitted result objects should
    be formed like this::

        {
            "objects": [
                {
                    "case": "1",
                    "environment": "23",
                    "run_id": "1",
                    "status": "passed"
                },
                {
                    "case": "14",
                    "comment": "why u no make sense??",
                    "environment": "23",
                    "run_id": "1",
                    "status": "invalidated"
                },
                {
                    "bug": "http://www.deathvalleydogs.com",
                    "case": "326",
                    "comment": "why u no pass?",
                    "environment": "23",
                    "run_id": "1",
                    "status": "failed",
                    "stepnumber": 1
                }
            ]
        }

    """

    class Meta:
        queryset = Result.objects.all()
        resource_name = "result"
        list_allowed_methods = ["patch"]

        authentication = MTApiKeyAuthentication()
        authorization = ReportResultsAuthorization()


    def obj_create(self, bundle, request=None, **kwargs):
        """
        Manually create the proper results objects.

        This is necessary because we have special handler methods in
        RunCaseVersion for setting the statuses which we want to keep DRY.

        """

        data = bundle.data.copy()

        try:
            status = data.pop("status")
            case = data.pop("case")
            env = Environment.objects.get(pk=data.get("environment"))
            run = data.pop("run_id")

        except KeyError as e:
            raise ValidationError(
                "bad result object data missing key: {0}".format(e))

        except Environment.DoesNotExist as e:
            raise ValidationError(
                "Specified environment does not exist: {0}".format(e))


        data["environment"] = env

        try:
            rcv = RunCaseVersion.objects.get(
                run__id=run,
                caseversion__case__id=case,
                environments=env,
                )

        except RunCaseVersion.DoesNotExist as e:
            raise ValidationError(
                "RunCaseVersion not found for run: {0}, case: {1}, environment: {2}:\nError {3}".format(
                        str(run), str(case), str(env), e))

        data["user"] = request.user

        bundle.obj = rcv.get_result_method(status)(**data)
        return bundle



class RunSuiteResource(MTResource):
    """
    Create, Read, Update and Delete capabilities for RunSuite.

    Filterable by suite and run fields.
    """

    run = fields.ForeignKey(RunResource, 'run')
    suite = fields.ForeignKey(SuiteResource, 'suite')

    class Meta(MTResource.Meta):
        queryset = RunSuite.objects.all()
        fields = ["suite", "run", "order", "id"]
        filtering = {
            "suite": ALL_WITH_RELATIONS,
            "run": ALL_WITH_RELATIONS
        }
        authorization = RunSuiteAuthorization()

    @property
    def model(self):
        return RunSuite


    @property
    def read_create_fields(self):
        """run and suite are read-only"""
        return ["suite", "run"]


    def hydrate_suite(self, bundle):
        """suite is read-only on PUT
        suite.product must match run.productversion.product on CREATE
        """

        # CREATE
        if bundle.request.META['REQUEST_METHOD'] == 'POST':
            suite_id = self._id_from_uri(bundle.data['suite'])
            suite = Suite.objects.get(id=suite_id)
            run_id = self._id_from_uri(bundle.data['run'])
            run = Run.objects.get(id=run_id)
            if suite.product.id != run.productversion.product.id:
                error_message = str(
                    "suite's product must match run's product."
                )
                logger.error(
                    "\n".join([error_message, "suite prod: %s, run prod: %s"]),
                    suite.product.id, run.productversion.product.id)
                raise ImmediateHttpResponse(
                    response=http.HttpBadRequest(error_message))

        return bundle



class SuiteSelectionResource(BaseSelectionResource):
    """
    Specialty end-point for an AJAX call from the multi-select widget
    for selecting suites.
    """

    product = fields.ForeignKey(ProductResource, "product")
    runs = fields.ToManyField(RunResource, "runs")
    created_by = fields.ForeignKey(
        UserResource, "created_by", full=True, null=True)

    class Meta:
        queryset = Suite.objects.all().select_related(
            "created_by",
            ).annotate(case_count=Count("cases"))

        list_allowed_methods = ['get']
        fields = ["id", "name", "created_by"]
        filtering = {
            "product": ALL_WITH_RELATIONS,
            "runs": ALL_WITH_RELATIONS,
            "created_by": ALL_WITH_RELATIONS,
            }
        ordering = ["runs"]


    def dehydrate(self, bundle):
        """Add some convenience fields to the return JSON."""

        suite = bundle.obj
        bundle.data["suite_id"] = unicode(suite.id)
        bundle.data["case_count"] = suite.case_count
        bundle.data["filter_cases"] = filter_url("manage_cases", suite)

        return bundle

########NEW FILE########
__FILENAME__ = fixture_gen
"""Sample runs fixture generator."""
from fixture_generator import fixture_generator

from ..core.auth import User
from ..core.models import ProductVersion
from ..library.models import Suite

from .models import Run, RunSuite, RunCaseVersion


@fixture_generator(
    Run, RunSuite, RunCaseVersion, requires=[
        "library.sample_suites", "core.sample_users", "core.sample_products"])
def sample_runs():
    manager = User.objects.get(username="manager")

    accounts = Suite.objects.get(name="Accounts")

    cc8 = ProductVersion.objects.get(product=accounts.product, version="0.8")

    alpha = Run.objects.create(productversion=cc8, name="Alpha 1", user=manager)

    RunSuite.objects.create(run=alpha, suite=accounts)

    alpha.activate(user=manager)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    depends_on = [
        ("core", "0001_initial"),
        ("environments", "0001_initial"),
        ("library", "0001_initial"),
        ]

    def forwards(self, orm):

        # Adding model 'Run'
        db.create_table('execution_run', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 282739))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 282921))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('has_team', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('status', self.gf('django.db.models.fields.CharField')(default='draft', max_length=30, db_index=True)),
            ('productversion', self.gf('django.db.models.fields.related.ForeignKey')(related_name='runs', to=orm['core.ProductVersion'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('start', self.gf('django.db.models.fields.DateField')(default=datetime.date.today)),
            ('end', self.gf('django.db.models.fields.DateField')(null=True, blank=True)),
        ))
        db.send_create_signal('execution', ['Run'])

        # Adding M2M table for field own_team on 'Run'
        db.create_table('execution_run_own_team', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('run', models.ForeignKey(orm['execution.run'], null=False)),
            ('user', models.ForeignKey(orm['auth.user'], null=False))
        ))
        db.create_unique('execution_run_own_team', ['run_id', 'user_id'])

        # Adding M2M table for field environments on 'Run'
        db.create_table('execution_run_environments', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('run', models.ForeignKey(orm['execution.run'], null=False)),
            ('environment', models.ForeignKey(orm['environments.environment'], null=False))
        ))
        db.create_unique('execution_run_environments', ['run_id', 'environment_id'])

        # Adding model 'RunCaseVersion'
        db.create_table('execution_runcaseversion', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 275226))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 275406))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('run', self.gf('django.db.models.fields.related.ForeignKey')(related_name='runcaseversions', to=orm['execution.Run'])),
            ('caseversion', self.gf('django.db.models.fields.related.ForeignKey')(related_name='runcaseversions', to=orm['library.CaseVersion'])),
            ('order', self.gf('django.db.models.fields.IntegerField')(default=0, db_index=True)),
        ))
        db.send_create_signal('execution', ['RunCaseVersion'])

        # Adding M2M table for field environments on 'RunCaseVersion'
        db.create_table('execution_runcaseversion_environments', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('runcaseversion', models.ForeignKey(orm['execution.runcaseversion'], null=False)),
            ('environment', models.ForeignKey(orm['environments.environment'], null=False))
        ))
        db.create_unique('execution_runcaseversion_environments', ['runcaseversion_id', 'environment_id'])

        # Adding model 'RunSuite'
        db.create_table('execution_runsuite', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 285466))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 285646))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('run', self.gf('django.db.models.fields.related.ForeignKey')(related_name='runsuites', to=orm['execution.Run'])),
            ('suite', self.gf('django.db.models.fields.related.ForeignKey')(related_name='runsuites', to=orm['library.Suite'])),
            ('order', self.gf('django.db.models.fields.IntegerField')(default=0, db_index=True)),
        ))
        db.send_create_signal('execution', ['RunSuite'])

        # Adding model 'Result'
        db.create_table('execution_result', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 286632))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 286903))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('tester', self.gf('django.db.models.fields.related.ForeignKey')(related_name='results', to=orm['auth.User'])),
            ('runcaseversion', self.gf('django.db.models.fields.related.ForeignKey')(related_name='results', to=orm['execution.RunCaseVersion'])),
            ('environment', self.gf('django.db.models.fields.related.ForeignKey')(related_name='results', to=orm['environments.Environment'])),
            ('status', self.gf('django.db.models.fields.CharField')(default='assigned', max_length=50, db_index=True)),
            ('started', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 287631))),
            ('completed', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('comment', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('review', self.gf('django.db.models.fields.CharField')(default='pending', max_length=50, db_index=True)),
            ('reviewed_on', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('reviewed_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='reviews', null=True, to=orm['auth.User'])),
        ))
        db.send_create_signal('execution', ['Result'])

        # Adding model 'StepResult'
        db.create_table('execution_stepresult', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 274151))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 50, 42, 274353))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('result', self.gf('django.db.models.fields.related.ForeignKey')(related_name='stepresults', to=orm['execution.Result'])),
            ('step', self.gf('django.db.models.fields.related.ForeignKey')(related_name='stepresults', to=orm['library.CaseStep'])),
            ('status', self.gf('django.db.models.fields.CharField')(default='passed', max_length=50, db_index=True)),
            ('bug_url', self.gf('django.db.models.fields.URLField')(max_length=200, blank=True)),
        ))
        db.send_create_signal('execution', ['StepResult'])


    def backwards(self, orm):

        # Deleting model 'Run'
        db.delete_table('execution_run')

        # Removing M2M table for field own_team on 'Run'
        db.delete_table('execution_run_own_team')

        # Removing M2M table for field environments on 'Run'
        db.delete_table('execution_run_environments')

        # Deleting model 'RunCaseVersion'
        db.delete_table('execution_runcaseversion')

        # Removing M2M table for field environments on 'RunCaseVersion'
        db.delete_table('execution_runcaseversion_environments')

        # Deleting model 'RunSuite'
        db.delete_table('execution_runsuite')

        # Deleting model 'Result'
        db.delete_table('execution_result')

        # Deleting model 'StepResult'
        db.delete_table('execution_stepresult')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'object_name': 'Product'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 315433)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 315634)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['order']", 'unique_together': "[('product', 'version')]", 'object_name': 'ProductVersion'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 309053)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 309376)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'object_name': 'Category'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 306238)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 306421)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 321687)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 321888)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 307522)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['environments.Element']", 'symmetrical': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 307815)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 305456)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 305638)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'completed': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 317594)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 317794)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'reviewed_on': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'started': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 318760)'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 313570)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 313780)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 304268)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 304499)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 316534)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 316737)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 303039)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 303256)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 311356)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 311585)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'unique_together': "[('caseversion', 'number')]", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 326292)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 326496)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'unique_together': "[('productversion', 'case')]", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 324643)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 324849)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['tags.Tag']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 312283)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 312489)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'unique_together': "[['suite', 'case']]", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 320515)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 320819)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 319497)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 50, 42, 319695)'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_runcaseversion_cc_version__add_field_run_cc_version__a
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'RunCaseVersion.cc_version'
        db.add_column('execution_runcaseversion', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'Run.cc_version'
        db.add_column('execution_run', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'Result.cc_version'
        db.add_column('execution_result', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'StepResult.cc_version'
        db.add_column('execution_stepresult', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'RunSuite.cc_version'
        db.add_column('execution_runsuite', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)


    def backwards(self, orm):

        # Deleting field 'RunCaseVersion.cc_version'
        db.delete_column('execution_runcaseversion', 'cc_version')

        # Deleting field 'Run.cc_version'
        db.delete_column('execution_run', 'cc_version')

        # Deleting field 'Result.cc_version'
        db.delete_column('execution_result', 'cc_version')

        # Deleting field 'StepResult.cc_version'
        db.delete_column('execution_stepresult', 'cc_version')

        # Deleting field 'RunSuite.cc_version'
        db.delete_column('execution_runsuite', 'cc_version')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 496365)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 496575)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 485617)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 485816)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.user': {
            'Meta': {'object_name': 'User', 'db_table': "'auth_user'", '_ormbases': ['auth.User'], 'proxy': 'True'}
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 491988)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 492195)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 475116)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 475325)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 490959)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 491167)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 488330)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 488519)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'completed': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 489193)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 489387)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'reviewed_on': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'started': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 490234)'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 481521)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 481717)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 472837)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 473041)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 474056)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 474247)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 494052)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 494259)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 484697)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 484889)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 480256)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 480519)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 476095)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 476303)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 487117)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 487308)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 478818)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 479034)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 492982)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 17, 493191)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']

########NEW FILE########
__FILENAME__ = 0003_auto
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding M2M table for field suites on 'RunCaseVersion'
        db.create_table('execution_runcaseversion_suites', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('runcaseversion', models.ForeignKey(orm['execution.runcaseversion'], null=False)),
            ('suite', models.ForeignKey(orm['library.suite'], null=False))
        ))
        db.create_unique('execution_runcaseversion_suites', ['runcaseversion_id', 'suite_id'])

    def backwards(self, orm):
        # Removing M2M table for field suites on 'RunCaseVersion'
        db.delete_table('execution_runcaseversion_suites')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'completed': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'reviewed_on': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'started': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversions'", 'symmetrical': 'False', 'to': "orm['library.Suite']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 21, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']

########NEW FILE########
__FILENAME__ = 0004_auto__chg_field_result_started
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'Result.started'
        db.alter_column('execution_result', 'started', self.gf('django.db.models.fields.DateTimeField')(null=True))

    def backwards(self, orm):

        # Changing field 'Result.started'
        db.alter_column('execution_result', 'started', self.gf('django.db.models.fields.DateTimeField')())
    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'completed': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'reviewed_on': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversions'", 'symmetrical': 'False', 'to': "orm['library.Suite']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 3, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']

########NEW FILE########
__FILENAME__ = 0005_auto__add_field_result_is_latest
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Result.is_latest'
        db.add_column('execution_result', 'is_latest',
                      self.gf('django.db.models.fields.BooleanField')(default=True),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Result.is_latest'
        db.delete_column('execution_result', 'is_latest')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'completed': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_latest': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'reviewed_on': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversions'", 'symmetrical': 'False', 'to': "orm['library.Suite']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 11, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']

########NEW FILE########
__FILENAME__ = 0006_auto__del_field_result_started__del_field_result_completed
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'Result.started'
        db.delete_column('execution_result', 'started')

        # Deleting field 'Result.completed'
        db.delete_column('execution_result', 'completed')

    def backwards(self, orm):
        # Adding field 'Result.started'
        db.add_column('execution_result', 'started',
                      self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True),
                      keep_default=False)

        # Adding field 'Result.completed'
        db.add_column('execution_result', 'completed',
                      self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True),
                      keep_default=False)

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_latest': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'reviewed_on': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversions'", 'symmetrical': 'False', 'to': "orm['library.Suite']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 16, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']

########NEW FILE########
__FILENAME__ = 0007_auto__del_field_result_reviewed_on
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'Result.reviewed_on'
        db.delete_column('execution_result', 'reviewed_on')

    def backwards(self, orm):
        # Adding field 'Result.reviewed_on'
        db.add_column('execution_result', 'reviewed_on',
                      self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True),
                      keep_default=False)

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_latest': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversions'", 'symmetrical': 'False', 'to': "orm['library.Suite']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 5, 17, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']

########NEW FILE########
__FILENAME__ = 0008_auto__chg_field_runcaseversion_modified_by__chg_field_runcaseversion_d
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        pass

    def backwards(self, orm):
        pass


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_latest': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversions'", 'symmetrical': 'False', 'to': "orm['library.Suite']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']

########NEW FILE########
__FILENAME__ = 0009_auto__add_field_run_build__add_field_run_is_series__add_field_run_seri
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Run.build'
        db.add_column('execution_run', 'build',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True, null=True),
                      keep_default=False)

        # Adding field 'Run.is_series'
        db.add_column('execution_run', 'is_series',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)

        # Adding field 'Run.series'
        db.add_column('execution_run', 'series',
                      self.gf('django.db.models.fields.related.ForeignKey')(to=orm['execution.Run'], null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Run.build'
        db.delete_column('execution_run', 'build')

        # Deleting field 'Run.is_series'
        db.delete_column('execution_run', 'is_series')

        # Deleting field 'Run.series'
        db.delete_column('execution_run', 'series_id')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_latest': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'build': ('django.db.models.fields.TextField', [], {'blank': 'True', 'null': 'True'}),
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_series': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'series': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['execution.Run']", 'null': 'True', 'blank': 'True'}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversions'", 'symmetrical': 'False', 'to': "orm['library.Suite']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']

########NEW FILE########
__FILENAME__ = 0010_auto
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Removing M2M table for field suites on 'RunCaseVersion'
        db.delete_table('execution_runcaseversion_suites')


    def backwards(self, orm):
        # Adding M2M table for field suites on 'RunCaseVersion'
        db.create_table('execution_runcaseversion_suites', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('runcaseversion', models.ForeignKey(orm['execution.runcaseversion'], null=False)),
            ('suite', models.ForeignKey(orm['library.suite'], null=False))
        ))
        db.create_unique('execution_runcaseversion_suites', ['runcaseversion_id', 'suite_id'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_latest': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'build': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_series': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'series': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['execution.Run']", 'null': 'True', 'blank': 'True'}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 22, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']

########NEW FILE########
__FILENAME__ = 0011_auto__add_index_runcaseversion_created_on__add_index_run_created_on__a
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding index on 'RunCaseVersion', fields ['created_on']
        db.create_index('execution_runcaseversion', ['created_on'])

        # Adding index on 'Run', fields ['created_on']
        db.create_index('execution_run', ['created_on'])

        # Adding index on 'Result', fields ['created_on']
        db.create_index('execution_result', ['created_on'])

        # Adding index on 'StepResult', fields ['created_on']
        db.create_index('execution_stepresult', ['created_on'])

        # Adding index on 'RunSuite', fields ['created_on']
        db.create_index('execution_runsuite', ['created_on'])


    def backwards(self, orm):
        # Removing index on 'RunSuite', fields ['created_on']
        db.delete_index('execution_runsuite', ['created_on'])

        # Removing index on 'StepResult', fields ['created_on']
        db.delete_index('execution_stepresult', ['created_on'])

        # Removing index on 'Result', fields ['created_on']
        db.delete_index('execution_result', ['created_on'])

        # Removing index on 'Run', fields ['created_on']
        db.delete_index('execution_run', ['created_on'])

        # Removing index on 'RunCaseVersion', fields ['created_on']
        db.delete_index('execution_runcaseversion', ['created_on'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_latest': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'build': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_series': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'series': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['execution.Run']", 'null': 'True', 'blank': 'True'}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']
########NEW FILE########
__FILENAME__ = 0012_auto__add_index_runcaseversion_modified_on__add_index_run_modified_on_
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding index on 'RunCaseVersion', fields ['modified_on']
        db.create_index('execution_runcaseversion', ['modified_on'])

        # Adding index on 'Run', fields ['modified_on']
        db.create_index('execution_run', ['modified_on'])

        # Adding index on 'Result', fields ['modified_on']
        db.create_index('execution_result', ['modified_on'])

        # Adding index on 'StepResult', fields ['modified_on']
        db.create_index('execution_stepresult', ['modified_on'])

        # Adding index on 'StepResult', fields ['bug_url']
        db.create_index('execution_stepresult', ['bug_url'])

        # Adding index on 'RunSuite', fields ['modified_on']
        db.create_index('execution_runsuite', ['modified_on'])


    def backwards(self, orm):
        # Removing index on 'RunSuite', fields ['modified_on']
        db.delete_index('execution_runsuite', ['modified_on'])

        # Removing index on 'StepResult', fields ['bug_url']
        db.delete_index('execution_stepresult', ['bug_url'])

        # Removing index on 'StepResult', fields ['modified_on']
        db.delete_index('execution_stepresult', ['modified_on'])

        # Removing index on 'Result', fields ['modified_on']
        db.delete_index('execution_result', ['modified_on'])

        # Removing index on 'Run', fields ['modified_on']
        db.delete_index('execution_run', ['modified_on'])

        # Removing index on 'RunCaseVersion', fields ['modified_on']
        db.delete_index('execution_runcaseversion', ['modified_on'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'execution.result': {
            'Meta': {'object_name': 'Result'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environment': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_latest': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'review': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '50', 'db_index': 'True'}),
            'reviewed_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'reviews'", 'null': 'True', 'to': "orm['auth.User']"}),
            'runcaseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['execution.RunCaseVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'assigned'", 'max_length': '50', 'db_index': 'True'}),
            'tester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'results'", 'to': "orm['auth.User']"})
        },
        'execution.run': {
            'Meta': {'object_name': 'Run'},
            'build': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'caseversions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunCaseVersion']", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'run'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_series': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runs'", 'to': "orm['core.ProductVersion']"}),
            'series': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['execution.Run']", 'null': 'True', 'blank': 'True'}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'suites': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runs'", 'symmetrical': 'False', 'through': "orm['execution.RunSuite']", 'to': "orm['library.Suite']"})
        },
        'execution.runcaseversion': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunCaseVersion'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'runcaseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runcaseversions'", 'to': "orm['execution.Run']"})
        },
        'execution.runsuite': {
            'Meta': {'ordering': "['order']", 'object_name': 'RunSuite'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'run': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['execution.Run']"}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'runsuites'", 'to': "orm['library.Suite']"})
        },
        'execution.stepresult': {
            'Meta': {'object_name': 'StepResult'},
            'bug_url': ('django.db.models.fields.URLField', [], {'db_index': 'True', 'max_length': '200', 'blank': 'True'}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'result': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['execution.Result']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'passed'", 'max_length': '50', 'db_index': 'True'}),
            'step': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stepresults'", 'to': "orm['library.CaseStep']"})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['execution']
########NEW FILE########
__FILENAME__ = models
"""
Models for test execution (runs, results).

"""
import datetime

from django.core.exceptions import ValidationError, ObjectDoesNotExist
from django.db import connection, transaction, models
from django.db.models import Q, Count, Max

from model_utils import Choices

from ..mtmodel import MTModel, TeamModel, DraftStatusModel
from ..core.auth import User
from ..core.models import ProductVersion
from ..environments.models import Environment, HasEnvironmentsModel
from ..library.models import CaseVersion, Suite, CaseStep



class Run(MTModel, TeamModel, DraftStatusModel, HasEnvironmentsModel):
    """A test run."""
    productversion = models.ForeignKey(ProductVersion, related_name="runs")
    name = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    start = models.DateField(default=datetime.date.today)
    end = models.DateField(blank=True, null=True)
    build = models.TextField(null=True, blank=True)
    is_series = models.BooleanField(default=False)
    series = models.ForeignKey("self", null=True, blank=True)

    caseversions = models.ManyToManyField(
        CaseVersion, through="RunCaseVersion", related_name="runs")
    suites = models.ManyToManyField(
        Suite, through="RunSuite", related_name="runs")


    def __unicode__(self):
        """Return unicode representation."""
        return self.name


    def clean(self):
        """Validate instance field values."""
        if self.end is not None and self.start > self.end:
            raise ValidationError("Start date must be prior to end date.")


    class Meta:
        permissions = [("manage_runs", "Can add/edit/delete test runs.")]


    @property
    def parent(self):
        return self.productversion


    @classmethod
    def cascade_envs_to(cls, objs, adding):
        if adding:
            return {}
        return {RunCaseVersion: RunCaseVersion.objects.filter(run__in=objs)}


    def clone(self, *args, **kwargs):
        """Clone this Run with default cascade behavior."""
        kwargs.setdefault(
            "cascade", ["runsuites", "environments", "team"])
        overrides = kwargs.setdefault("overrides", {})
        overrides["status"] = self.STATUS.draft
        overrides.setdefault("name", "Cloned: {0}".format(self.name))
        return super(Run, self).clone(*args, **kwargs)


    def clone_for_series(self, *args, **kwargs):
        """Clone this Run to create a new series item."""
        build = kwargs.pop("build", None)
        kwargs.setdefault(
            "cascade", ["runsuites", "environments", "team"])
        overrides = kwargs.setdefault("overrides", {})
        overrides.setdefault("name", "{0} - Build: {1}".format(
            self.name, build))
        overrides["status"] = self.STATUS.draft
        overrides.setdefault("is_series", False)
        overrides.setdefault("build", build)
        overrides.setdefault("series", self)
        overrides.setdefault(
            "start",
            datetime.date.today().strftime("%Y-%m-%d"),
            )
        return super(Run, self).clone(*args, **kwargs)


    def activate(self, *args, **kwargs):
        """Make run active, locking in runcaseversions for all suites."""
        if self.status == self.STATUS.draft:
            self.update_case_versions()
        super(Run, self).activate(*args, **kwargs)


    def refresh(self, *args, **kwargs):
        """Update all the runcaseversions while the run is active."""
        if self.status == self.STATUS.active:
            self.update_case_versions()


    def update_case_versions(self):
        """
        Update the runcaseversions with any changes to suites.

        This can happen while the run is still active.
        """
        # we don't need all the runcaseversions for a series.  It is the
        # series member runs that will use them.  So only lock the caseversions
        # if this is NOT a series.
        if not self.is_series:
            self._lock_case_versions()


    @transaction.commit_on_success
    def _lock_case_versions(self):
        """
        Select caseversions from suites, create runcaseversions.

        WARNING: Testing this code in the PyCharm debugger will give an
        incorrect number of queries, because for the debugger to show all the
        information it wants, it must do queries itself.  When testing with
        assertNumQueries, don't use the PyCharm debugger.

        """

        # get the list of environments for this run
        run_env_ids = self.environments.values_list("id", flat=True)

        # make a list of cvs in order by RunSuite, then SuiteCase.
        # This list is built from the run / suite / env combination and has
        # no knowledge of any possibly existing runcaseversions yet.
        if len(run_env_ids):
            cursor = connection.cursor()
            sql = """SELECT DISTINCT cv.id as id
                FROM execution_run as r
                    INNER JOIN execution_runsuite as rs
                        ON rs.run_id = r.id
                    INNER JOIN library_suitecase as sc
                        ON rs.suite_id = sc.suite_id
                    INNER JOIN library_suite as s
                        ON sc.suite_id = s.id
                    INNER JOIN library_caseversion as cv
                        ON cv.case_id = sc.case_id
                        AND cv.productversion_id = r.productversion_id
                    INNER JOIN library_caseversion_environments as cve
                        ON cv.id = cve.caseversion_id
                WHERE cv.status = 'active'
                    AND cv.deleted_on IS NULL
                    AND s.status = 'active'
                    AND rs.run_id = {0}
                    AND cve.environment_id IN ({1})
                ORDER BY rs.order, sc.order
                """.format(self.id, ",".join(map(str, run_env_ids)))
            cursor.execute(sql)

            cv_list = [x[0] for x in cursor.fetchall()]

            # @@@ do we need to check for duplicates?
            # use itertools.unique_everseen
            #if len(set(cv_list)) != len(cv_list):
            #    cv_list = itertools.unique_everseen(cv_list)

        else:
            cv_list = []

        # delete rcvs that we won't be needing anymore
        self._delete_runcaseversions(cv_list)

        # audit for duplicate rcvs for the same cv.id
        dups = self.runcaseversions.values("caseversion_id").annotate(
            num_records=Count("caseversion")).filter(num_records__gt=1)
        if len(dups) > 0:
            for dup in dups:
                # get the runcaseversions, and sort descending by the id
                # of the results.  So the first one is the one with the latest
                # result.  We keep that one and delete the rest.
                rcv_to_save = self.runcaseversions.annotate(
                    latest_result=Max("results__id")).filter(
                        caseversion=dup["caseversion_id"]).order_by(
                            "-latest_result")[0]
                self.runcaseversions.filter(
                    caseversion=dup["caseversion_id"]).exclude(
                        id=rcv_to_save.id).delete()

        # remaining rcvs should be ones we want to keep, and we need to inject
        # those ids into the insert/update list for bulk_insert.  So create
        # a dict mapping cv_id: rcv_id.  If one exists, its order field will
        # be updated in the build_update cmd.
        existing_rcv_map = {}
        for map_item in self.runcaseversions.values("id", "caseversion_id"):
            existing_rcv_map[map_item["caseversion_id"]] = map_item["id"]

        # build the list of rcvs that we DO need.  Be sure to include the ids
        # for rcvs that already exist so that we will just be updating the
        # order and not replacing it.  We will use a special manager that does
        # an update on insert error.

        # runcaseversion objects we will use to bulk create
        rcv_to_update = []
        rcv_proxies_to_create = []

        order = 1
        for cv in cv_list:
            if cv in existing_rcv_map:
                # we will just update the order value
                rcv_to_update.append({"caseversion_id": cv, "order": order})
            else:
                # we need to create a new one
                kwargs = {
                    "run_id": self.id,
                    "caseversion_id": cv,
                    "order": order
                    }
                rcv_proxies_to_create.append(RunCaseVersion(**kwargs))
            order += 1

        # update existing rcvs
        for rcv in rcv_to_update:
            self.runcaseversions.filter(
                caseversion=rcv["caseversion_id"]).update(order=rcv["order"])

        # insert these rcvs in bulk
        self._bulk_insert_new_runcaseversions(rcv_proxies_to_create)

        self._bulk_update_runcaseversion_environments_for_lock()

        self._lock_caseversions_complete()


    def _delete_runcaseversions(self, cv_list):
        """Hook to delete runcaseversions we know we don't need anymore."""
        self.runcaseversions.exclude(caseversion__in=cv_list).delete(
            permanent=True)


    def _bulk_insert_new_runcaseversions(self, rcv_proxies):
        """Hook to bulk-insert runcaseversions we know we DO need."""
        self.runcaseversions.bulk_create(rcv_proxies)


    def _bulk_update_runcaseversion_environments_for_lock(self):
        """
        update runcaseversion_environment records with latest state.

        Approach:
          do another raw sql query to get all existing_rcv_envs for this run
          existing_rcv_envs - needed_rcv_envs = list to delete (no longer needed)
          needed_rcv_envs - existing_rcv_envs = list to create
        build a list of RunCaseVersion_environment objects
        and use bulk_create.

        """

        # re-query all the rcvs (including newly created) for this run
        final_rcvs = RunCaseVersion.objects.filter(run=self).select_related(
            "caseversion").prefetch_related("caseversion__environments")

        final_rcv_ids = [x.id for x in final_rcvs]

        # runcaseversion_environments that were there prior to our changes
        prev_rcv_envs_set = set(RunCaseVersion.environments.through.objects.filter(
            runcaseversion_id__in=final_rcv_ids).values_list(
                "runcaseversion_id", "environment_id"))

        # runcaseversion_environment objects we will use to bulk create
        # loop through all cvs and fetch the env intersection with this run
        needed_rcv_envs_tuples = []
        run_env_ids = set(
            self.environments.values_list("id", flat=True))
        for rcv in final_rcvs:
            case_env_ids = set([x.id for x in rcv.caseversion.environments.all()])
            for env in run_env_ids.intersection(case_env_ids):
                needed_rcv_envs_tuples.append((rcv.id, env))
        needed_rcv_envs_set = set(needed_rcv_envs_tuples)

        # get the set of rcv_envs we need to delete because they don't belong
        # to the needed set.
        delete_rcv_envs = prev_rcv_envs_set - needed_rcv_envs_set
        if len(delete_rcv_envs):
            delquery = Q()
            for combo in delete_rcv_envs:
                delquery = delquery | Q(
                    **{"runcaseversion_id": combo[0],
                       "environment_id": combo[1]})
            RunCaseVersion.environments.through.objects.filter(delquery).delete()

        # get the set of rcv_envs we need to create that don't already exist
        needed_rcv_envs_set = needed_rcv_envs_set - prev_rcv_envs_set

        # build all the objects to pass to bulk_create
        needed_rcv_envs = [RunCaseVersion.environments.through(
            runcaseversion_id=needed[0],
            environment_id=needed[1]) for needed in needed_rcv_envs_set]

        RunCaseVersion.environments.through.objects.bulk_create(needed_rcv_envs)


    def _lock_caseversions_complete(self):
        """Hook for doing any post-processing after doing the rcv lock."""
        pass


    def result_summary(self):
        """Return a dict summarizing status of results."""
        return result_summary(Result.objects.filter(runcaseversion__run=self))


    def completion(self):
        """
        Return fraction of case/env combos that have a completed result.

        Have to specify deleted_on=None for the through, because the
        default manager doesn't go through our MT model manager.
        """
        total = RunCaseVersion.environments.through.objects.filter(
            runcaseversion__run=self,
            runcaseversion__deleted_on=None,
            ).count()
        skipped = Result.objects.filter(
            runcaseversion__run=self,
            is_latest=True,
            status=Result.STATUS.skipped).count()
        completed = Result.objects.filter(
            status__in=Result.COMPLETED_STATES,
            is_latest=True,
            runcaseversion__run=self).values(
            "runcaseversion", "environment").distinct().count()

        try:
            return float(completed) / (total - skipped)
        except ZeroDivisionError:
            return 0


    def completion_single_env(self, env_id):
        """Return fraction of cases that have a completed result for an env."""
        total = RunCaseVersion.objects.filter(
            environments=env_id,
            run=self).count()
        skipped = Result.objects.filter(
            runcaseversion__run=self,
            environment=env_id,
            is_latest=True,
            status=Result.STATUS.skipped).count()
        completed = Result.objects.filter(
            status__in=Result.COMPLETED_STATES,
            is_latest=True,
            environment=env_id,
            runcaseversion__run=self).values(
            "runcaseversion", "environment").distinct().count()

        try:
            return float(completed) / (total - skipped)
        except ZeroDivisionError:
            return 0.0



def _environment_intersection(run, caseversion):
    """Intersection of run/caseversion environment IDs."""
    run_env_ids = set(
        run.environments.values_list("id", flat=True))
    case_env_ids = set(
        caseversion.environments.values_list("id", flat=True))
    return run_env_ids.intersection(case_env_ids)



class RunCaseVersion(HasEnvironmentsModel, MTModel):
    """
    An ordered association between a Run and a CaseVersion.

    RunCaseVersion objects are created to lock in the specific case-versions in
    a run when the run is activated.

    """

    run = models.ForeignKey(Run, related_name="runcaseversions")
    caseversion = models.ForeignKey(CaseVersion, related_name="runcaseversions")
    order = models.IntegerField(default=0, db_index=True)


    def __unicode__(self):
        """Return unicode representation."""
        return "Case '%s' included in run '%s'" % (self.caseversion, self.run)


    def bug_urls(self):
        """Returns set of bug URLs associated with this run/caseversion."""
        return set(
            StepResult.objects.filter(
                result__runcaseversion=self).exclude(
                bug_url="").values_list("bug_url", flat=True).distinct()
            )


    class Meta:
        ordering = ["order"]
        permissions = [
            ("execute", "Can run tests and report results."),
            ]


    def save(self, *args, **kwargs):
        """
        Save instance; new instances get intersection of run/case environments.

        """
        adding = False
        if self.id is None:
            adding = True
        inherit_envs = kwargs.pop("inherit_envs", True)

        ret = super(RunCaseVersion, self).save(*args, **kwargs)

        if adding and inherit_envs:
            self.environments.add(
                *_environment_intersection(self.run, self.caseversion))

        return ret


    def result_summary(self):
        """Return a dict summarizing status of results."""
        return result_summary(self.results.values())


    def completion(self):
        """Return fraction of environments that have a completed result."""
        total = self.environments.count()
        skipped = self.results.filter(
            is_latest=True,
            status=Result.STATUS.skipped).count()
        completed = self.results.filter(
            is_latest=True,
            status__in=Result.COMPLETED_STATES).values(
            "environment").distinct().count()

        try:
            return float(completed) / (total - skipped)
        except ZeroDivisionError:
            return 0


    def testers(self):
        """Return list of testers with assigned / executed results."""
        return User.objects.filter(
            pk__in=self.results.values_list("tester", flat=True).distinct())


    def start(self, environment=None, user=None):
        """Mark this result started."""
        # if we are restarted a case that was skipped, we want to restart
        # for ALL envs, not just this one.
        envs = [environment]
        try:
            latest = self.results.get(
                is_latest=True,
                tester=user,
                environment=environment,
                )
            if latest.status == Result.STATUS.skipped:
                envs = self.environments.all()
        except ObjectDoesNotExist:
            pass

        for env in envs:
            Result.objects.create(
                runcaseversion=self,
                tester=user,
                environment=env,
                status=Result.STATUS.started,
                user=user
                )


    def get_result_method(self, status):
        """Find the appropriate result generator for the given status."""
        status_methods = {
            "passed": self.result_pass,
            "failed": self.result_fail,
            "invalidated": self.result_invalid,
            "blocked": self.result_block,
            "skipped": self.result_skip,
            }

        return status_methods[status]



    def result_pass(self, environment=None, user=None):
        """Create a passed result for this case."""
        Result.objects.create(
            runcaseversion=self,
            tester=user,
            environment=environment,
            status=Result.STATUS.passed,
            user=user
        )


    def result_skip(self, environment=None, user=None):
        """
        Create a skipped result for this case.

        If no environment is specified, then skip for all envs.
        """
        envs = self.environments.all()

        for env in envs:
            Result.objects.create(
                runcaseversion=self,
                tester=user,
                environment=env,
                status=Result.STATUS.skipped,
                user=user
            )


    def result_invalid(self, environment=None, comment="", user=None):
        """Create an invalidated result for this case."""
        Result.objects.create(
            runcaseversion=self,
            tester=user,
            environment=environment,
            status=Result.STATUS.invalidated,
            comment=comment,
            user=user,
        )


    def result_block(self, environment=None, comment="", user=None):
        """Create an invalidated result for this case."""
        Result.objects.create(
            runcaseversion=self,
            tester=user,
            environment=environment,
            status=Result.STATUS.blocked,
            comment=comment,
            user=user,
        )


    def result_fail(self, environment=None, comment="", stepnumber=None, bug="", user=None):
        """Create a failed result for this case."""
        result = Result.objects.create(
            runcaseversion=self,
            tester=user,
            environment=environment,
            status=Result.STATUS.failed,
            comment=comment,
            user=user,
            )
        if stepnumber is not None:
            try:
                step = self.caseversion.steps.get(
                    number=stepnumber)
            except CaseStep.DoesNotExist:
                pass
            else:
                stepresult = StepResult(result=result, step=step)
                stepresult.status = StepResult.STATUS.failed
                stepresult.bug_url = bug
                stepresult.save(user=user)
        self.save(force_update=True, user=user)



class RunSuite(MTModel):
    """
    An ordered association between a Run and a Suite.

    The only direct impact of RunSuite instances is that they determine which
    RunCaseVersions (and in what order) are created when the run is activated.

    """
    run = models.ForeignKey(Run, related_name="runsuites")
    suite = models.ForeignKey(Suite, related_name="runsuites")
    order = models.IntegerField(default=0, db_index=True)


    def __unicode__(self):
        """Return unicode representation."""
        return "Suite '%s' included in run '%s'" % (self.suite, self.run)


    class Meta:
        ordering = ["order"]



class Result(MTModel):
    """A result of a User running a RunCaseVersion in an Environment."""
    STATUS = Choices("assigned", "started", "passed", "failed", "invalidated",
                     "blocked", "skipped")
    REVIEW = Choices("pending", "reviewed")

    ALL_STATES = STATUS._full
    PENDING_STATES = [STATUS.assigned, STATUS.started]
    COMPLETED_STATES = [STATUS.passed, STATUS.failed, STATUS.invalidated,
                        STATUS.blocked]
    FAILED_STATES = [STATUS.failed, STATUS.blocked]

    tester = models.ForeignKey(User, related_name="results")
    runcaseversion = models.ForeignKey(
        RunCaseVersion, related_name="results")
    environment = models.ForeignKey(Environment, related_name="results")
    status = models.CharField(
        max_length=50, db_index=True, choices=STATUS, default=STATUS.assigned)
    comment = models.TextField(blank=True)
    is_latest = models.BooleanField(default=True)

    review = models.CharField(
        max_length=50, db_index=True, choices=REVIEW, default=REVIEW.pending)
    reviewed_by = models.ForeignKey(
        User, related_name="reviews", blank=True, null=True)


    def __unicode__(self):
        """Return unicode representation."""
        return "%s, run by %s in %s: %s" % (
            self.runcaseversion, self.tester, self.environment, self.status)


    class Meta:
        permissions = [("review_results", "Can review/edit test results.")]


    def bug_urls(self):
        """Returns set of bug URLs associated with this result."""
        return set(
            self.stepresults.exclude(
                bug_url="").values_list("bug_url", flat=True).distinct()
            )


    def save(self, *args, **kwargs):
        if self.pk is None:
            self.set_latest()
        super(Result, self).save(*args, **kwargs)


    def set_latest(self):
        """
        Set this result to latest, and unset all others with this env/user/rcv

        """

        Result.objects.filter(
            tester=self.tester,
            runcaseversion=self.runcaseversion,
            environment=self.environment,
            is_latest=True,
            ).exclude(pk=self.pk).update(is_latest=False)

        self.is_latest = True



class StepResult(MTModel):
    """A result of a particular step in a test case."""
    STATUS = Choices("passed", "failed", "invalidated", "skipped", "blocked")

    result = models.ForeignKey(Result, related_name="stepresults")
    step = models.ForeignKey(CaseStep, related_name="stepresults")
    status = models.CharField(
        max_length=50, db_index=True, choices=STATUS, default=STATUS.passed)
    bug_url = models.URLField(db_index=True, blank=True)


    def __unicode__(self):
        """Return unicode representation."""
        return "%s (%s: %s)" % (self.result, self.step, self.status)



def result_summary(results):
    """
    Given a queryset of results, return a dict summarizing their states.

    """
    states = Result.COMPLETED_STATES

    result_ids = results.filter(is_latest=True).values_list("id", flat=True)

    if not result_ids:
        return dict((s, 0) for s in states)

    cols = ["COUNT(CASE WHEN status=%s THEN 1 ELSE NULL END)"] * len(states)
    sql = "SELECT {0} FROM {1} WHERE id IN ({2})".format(
        ",".join(cols), Result._meta.db_table, ",".join(map(str, result_ids))
        )

    cursor = connection.cursor()
    cursor.execute(sql, states)

    return dict(zip(states, cursor.fetchone()))

########NEW FILE########
__FILENAME__ = admin
"""
Admin config for library models.

"""
from django.contrib import admin

from ..mtadmin import MTModelAdmin, MTTabularInline, MTStackedInline
from . import models



class CaseVersionInline(MTStackedInline):
    model = models.CaseVersion
    extra = 0
    fieldsets = [
        (
            None, {
                "fields": [
                    "productversion",
                    ("name", "status"),
                    "exists",
                    "description",
                    ]
                }
            )
        ]



class CaseAttachmentInline(MTTabularInline):
    model = models.CaseAttachment
    extra = 0



class CaseStepInline(MTTabularInline):
    model = models.CaseStep
    extra = 0



class CaseTagInline(admin.TabularInline):
    model = models.CaseVersion.tags.through
    extra = 0


class SuiteCaseInline(MTTabularInline):
    model = models.SuiteCase
    extra = 0



class CaseVersionAdmin(MTModelAdmin):
    list_display = ["__unicode__", "productversion", "deleted_on"]
    list_filter = ["productversion"]
    inlines = [CaseStepInline, CaseAttachmentInline, CaseTagInline]
    filter_horizontal = ["environments"]
    fieldsets = [
        (
            None, {
                "fields": [
                    "productversion",
                    ("case", "name", "status"),
                    "description",
                    "environments",
                    ]
                }
            )
        ]



class CaseAdmin(MTModelAdmin):
    list_display = ["__unicode__", "product", "deleted_on"]
    list_filter = ["product", "deleted_on"]



admin.site.register(models.Suite, MTModelAdmin)
admin.site.register(
    models.Case, CaseAdmin, inlines=[CaseVersionInline, SuiteCaseInline])
admin.site.register(models.CaseVersion, CaseVersionAdmin)

########NEW FILE########
__FILENAME__ = api
from tastypie import http, fields
from tastypie.exceptions import ImmediateHttpResponse
from tastypie.resources import ModelResource, ALL, ALL_WITH_RELATIONS

from ..core.api import (ProductVersionResource, ProductResource,
                        UserResource)
from .models import CaseVersion, Case, Suite, CaseStep, SuiteCase
from ...model.core.models import ProductVersion
from ..mtapi import MTResource, MTAuthorization
from ..environments.api import EnvironmentResource
from ..tags.api import TagResource

import logging
logger = logging.getLogger(__name__)


class SuiteCaseAuthorization(MTAuthorization):
    """Atypically named permission."""

    @property
    def permission(self):
        """This permission should be checked by is_authorized."""
        return "library.manage_suite_cases"



class CaseVersionAuthorization(MTAuthorization):
    """A permission of 'library.manage_caseversions does not exist,
    use library.manage_cases instead."""

    @property
    def permission(self):
        """This permission should be checked by is_authorized."""
        return "library.manage_cases"



class SuiteResource(MTResource):
    """
    Create, Read, Update and Delete capabilities for Suite.

    Filterable by name and product fields.
    """

    product = fields.ToOneField(ProductResource, "product")

    class Meta(MTResource.Meta):
        queryset = Suite.objects.all()
        fields = ["name", "product", "description", "status", "id"]
        filtering = {
            "name": ALL,
            "product": ALL_WITH_RELATIONS,
            }
        ordering = ['name', 'product__id', 'id']


    @property
    def model(self):
        """Model class related to this resource."""
        return Suite


    @property
    def read_create_fields(self):
        """List of fields that are required for create but read-only for update."""
        return ["product"]


class CaseResource(MTResource):
    """
    Create, Read, Update and Delete capabilities for Case.

    Filterable by suites and product fields.
    """

    suites = fields.ToManyField(
        SuiteResource,
        "suites",
        readonly=True,
        null=True,
        )
    product = fields.ForeignKey(ProductResource, "product")

    class Meta(MTResource.Meta):
        queryset = Case.objects.all()
        fields = ["id", "suites", "product", "idprefix"]
        filtering = {
            "suites": ALL_WITH_RELATIONS,
            "product": ALL_WITH_RELATIONS,
            }

    @property
    def model(self):
        """Model class related to this resource."""
        return Case


    @property
    def read_create_fields(self):
        """List of fields that are required for create but read-only for update."""
        return ["product"]



class CaseStepResource(MTResource):
    """
    Create, Read, Update and Delete capabilities for CaseSteps.

    Filterable by caseversion field.
    """

    caseversion = fields.ForeignKey(
        "moztrap.model.library.api.CaseVersionResource", "caseversion")

    class Meta(MTResource.Meta):
        queryset = CaseStep.objects.all()
        fields = ["id", "caseversion", "instruction", "expected", "number"]
        filtering = {
            "caseversion": ALL_WITH_RELATIONS,
        }
        ordering = ["number", "id"]
        authorization = CaseVersionAuthorization()

    @property
    def model(self):
        """Model class related to this resource."""
        return CaseStep


    @property
    def read_create_fields(self):
        """caseversion is read-only"""
        return ["caseversion"]



class SuiteCaseResource(MTResource):
    """
    Create, Read, Update and Delete capabilities for SuiteCase.

    Filterable by suite and case fields.
    """

    case = fields.ForeignKey(CaseResource, 'case')
    suite = fields.ForeignKey(SuiteResource, 'suite')

    class Meta(MTResource.Meta):
        queryset = SuiteCase.objects.all()
        fields = ["suite", "case", "order", "id"]
        filtering = {
            "suite": ALL_WITH_RELATIONS,
            "case": ALL_WITH_RELATIONS
        }
        authorization = SuiteCaseAuthorization()

    @property
    def model(self):
        return SuiteCase


    @property
    def read_create_fields(self):
        """case and suite are read-only"""
        return ["suite", "case"]


    def hydrate_case(self, bundle):
        """case is read-only on PUT
        case.product must match suite.product on CREATE
        """

        # CREATE
        if bundle.request.META['REQUEST_METHOD'] == 'POST':
            case_id = self._id_from_uri(bundle.data['case'])
            case = Case.objects.get(id=case_id)
            suite_id = self._id_from_uri(bundle.data['suite'])
            suite = Suite.objects.get(id=suite_id)
            if case.product.id != suite.product.id:
                error_message = str(
                    "case's product must match suite's product."
                )
                logger.error(
                    "\n".join([error_message, "case prod: %s, suite prod: %s"]),
                    case.product.id, suite.product.id)
                raise ImmediateHttpResponse(
                    response=http.HttpBadRequest(error_message))

        return bundle



class CaseVersionResource(MTResource):
    """
    Create, Read, Update and Delete capabilities for CaseVersions.

    Filterable by environments, productversion, case, and tags fields.
    """

    case = fields.ForeignKey(CaseResource, "case")
    steps = fields.ToManyField(
        CaseStepResource, "steps", full=True, readonly=True)
    environments = fields.ToManyField(
        EnvironmentResource, "environments", full=True, readonly=True)
    productversion = fields.ForeignKey(
        ProductVersionResource, "productversion")
    tags = fields.ToManyField(TagResource, "tags", full=True, readonly=True)
    #@@@ attachments


    class Meta(MTResource.Meta):
        queryset = CaseVersion.objects.all()
        fields = ["id", "name", "description", "case", "status"]
        filtering = {
            "environments": ALL,
            "productversion": ALL_WITH_RELATIONS,
            "case": ALL_WITH_RELATIONS,
            "tags": ALL_WITH_RELATIONS,
            "latest": ALL,
            }
        authorization = CaseVersionAuthorization()

    @property
    def model(self):
        """Model class related to this resource."""
        return CaseVersion


    @property
    def read_create_fields(self):
        """List of fields that are required for create but read-only for update."""
        return ["case", "productversion"]


    def obj_update(self, bundle, request=None, **kwargs):
        """Set the modified_by field for the object to the request's user,
        avoid ConcurrencyError by updating cc_version."""
        # this try/except logging is more helpful than 500 / 404 errors on the
        # client side
        bundle = self.check_read_create(bundle)
        try:
            bundle = super(MTResource, self).obj_update(
                bundle=bundle, request=request, **kwargs)
            # avoid ConcurrencyError
            bundle.obj.cc_version = self.model.objects.get(
                id=bundle.obj.id).cc_version
            bundle.obj.save(user=request.user)
            return bundle
        except Exception:  # pragma: no cover
            logger.exception("error updating %s", bundle)  # pragma: no cover
            raise  # pragma: no cover

    def hydrate_productversion(self, bundle):
        """case.product must match productversion.product on CREATE"""

        # create
        if bundle.request.META['REQUEST_METHOD'] == 'POST':
            pv_id = self._id_from_uri(bundle.data['productversion'])
            pv = ProductVersion.objects.get(id=pv_id)
            case_id = self._id_from_uri(bundle.data['case'])
            case = Case.objects.get(id=case_id)
            if not case.product.id == pv.product.id:
                message = str("productversion must match case's product")
                logger.error("\n".join([message,
                    "productversion product id: %s case product id: %s"], ),
                    pv.product.id,
                    case.product.id)
                raise ImmediateHttpResponse(
                    response=http.HttpBadRequest(message))

        return bundle



class BaseSelectionResource(ModelResource):
    """Adds filtering by negation for use with multi-select widget"""
    #@@@ move this to mtapi.py when that code is merged in.

    def apply_filters(self,
        request, applicable_filters, applicable_excludes={}):
        """Apply included and excluded filters to query."""
        return self.get_object_list(request).filter(
            **applicable_filters).exclude(**applicable_excludes)


    def obj_get_list(self, request=None, **kwargs):
        """Return the list with included and excluded filters, if they exist."""
        filters = {}

        if hasattr(request, 'GET'):  # pragma: no cover
            # Grab a mutable copy.
            filters = request.GET.copy()

        # Update with the provided kwargs.
        filters.update(kwargs)

        # Splitting out filtering and excluding items
        new_filters = {}
        excludes = {}
        for key, value in filters.items():
            # If the given key is filtered by ``not equal`` token, exclude it
            if key.endswith('__ne'):
                key = key[:-4]  # Stripping out trailing ``__ne``
                excludes[key] = value
            else:
                new_filters[key] = value

        filters = new_filters

        # Building filters
        applicable_filters = self.build_filters(filters=filters)
        applicable_excludes = self.build_filters(filters=excludes)

        base_object_list = self.apply_filters(
            request, applicable_filters, applicable_excludes)
        return self.apply_authorization_limits(request, base_object_list)



class CaseSelectionResource(BaseSelectionResource):
    """
    Specialty end-point for an AJAX call in the Suite form multi-select widget
    for selecting cases.
    """

    case = fields.ForeignKey(CaseResource, "case")
    productversion = fields.ForeignKey(
        ProductVersionResource, "productversion")
    tags = fields.ToManyField(TagResource, "tags", full=True)
    created_by = fields.ForeignKey(
        UserResource,
        "created_by",
        full=True,
        null=True,
        )

    class Meta:
        queryset = CaseVersion.objects.filter(latest=True).select_related(
            "case",
            "productversion",
            "created_by",
            ).prefetch_related(
                "tags",
                "tags__product",
                )
        list_allowed_methods = ['get']
        fields = ["id", "name", "created_by"]
        filtering = {
            "productversion": ALL_WITH_RELATIONS,
            "tags": ALL_WITH_RELATIONS,
            "case": ALL_WITH_RELATIONS,
            "created_by": ALL_WITH_RELATIONS
            }
        ordering = ["case"]


    def dehydrate(self, bundle):
        """Add some convenience fields to the return JSON."""

        case = bundle.obj.case
        bundle.data["case_id"] = unicode(case.id)
        bundle.data["product_id"] = unicode(case.product_id)
        bundle.data["product"] = {"id": unicode(case.product_id)}
        bundle.data["priority"] = unicode(case.priority)

        return bundle



class CaseVersionSelectionResource(BaseSelectionResource):
    """
    Specialty end-point for an AJAX call in the Tag form multi-select widget
    for selecting caseversions.
    """

    case = fields.ForeignKey(CaseResource, "case")
    productversion = fields.ForeignKey(
        ProductVersionResource, "productversion", full=True)
    tags = fields.ToManyField(TagResource, "tags", full=True)
    created_by = fields.ForeignKey(
        UserResource,
        "created_by",
        full=True,
        null=True,
        )

    class Meta:
        queryset = CaseVersion.objects.all().select_related(
            "case",
            "productversion",
            "created_by",
            ).prefetch_related(
                "tags",
                )
        list_allowed_methods = ['get']
        fields = ["id", "name", "latest", "created_by_id"]
        filtering = {
            "productversion": ALL_WITH_RELATIONS,
            "tags": ALL_WITH_RELATIONS,
            "case": ALL_WITH_RELATIONS,
            "created_by": ALL_WITH_RELATIONS
            }
        ordering = ["name"]


    def dehydrate(self, bundle):
        """Add some convenience fields to the return JSON."""

        case = bundle.obj.case
        bundle.data["case_id"] = unicode(case.id)
        bundle.data["product_id"] = unicode(case.product_id)
        bundle.data["product"] = {"id": unicode(case.product_id)}
        bundle.data["productversion_name"] = bundle.obj.productversion.name
        bundle.data["priority"] = unicode(case.priority)

        return bundle

########NEW FILE########
__FILENAME__ = bulk
"""
Parser for text format for bulk test case entry.

"""


class ParsingError(Exception):
    pass



class BulkParser(object):
    """
    Parser for text format for bulk test case entry.

    Parses this format::

        Test that I can log in
        When I click the login button
        Then I am logged in

    Instantiate a ``BulkParser`` and call its ``parse`` method::

        parser = BulkParser()
        data = parser.parse(text)

    Returned data will be a list of dictionaries containing test case data,
    and/or possibly an "error" key containing an error message encountered in
    parsing.

    """
    def parse(self, text):
        """Parse given text and return list of data dictionaries."""
        data = []
        state = self.begin

        lines = text.splitlines()
        error = False

        for line in lines:
            line = line.strip()
            if line:
                try:
                    state = state(line.lower(), line, data)
                except ParsingError as e:
                    data = data or [{}]
                    data[-1]["error"] = str(e)
                    error = True
                    break

        if not error and not state.expect_end:
            if not data:
                data.append({})
            data[-1]["error"] = (
                "Unexpected end of input, looking for %s"
                % " or ".join(repr(k.title()) for k in state.keys)
                )

        for item in data:
            if "description" in item:
                item["description"] = "\n".join(item["description"])
            for step in item.get("steps", []):
                step["instruction"] = "\n".join(step["instruction"])
                if "expected" in step:
                    step["expected"] = "\n".join(step["expected"])

        return data


    def begin(self, lc, orig, data):
        """The start state."""
        if lc.startswith("test that "):
            if len(orig) > 200:
                data.append({})
                raise ParsingError("Title should have at most 200 chracters, '%s...'" % orig[0:50])
            data.append({"name": orig})
            return self.description
        raise ParsingError("Expected 'Test that ...', not '%s'" % orig)
    begin.keys = ["Test that "]
    begin.expect_end = False


    def description(self, lc, orig, data):
        """Expecting to encounter description line(s)."""
        if lc.startswith("when ") or lc.startswith("and when "):
            data[-1].setdefault("description", [])
            data[-1]["steps"] = [{"instruction": [orig]}]
            return self.instruction
        data[-1].setdefault("description", []).append(orig)
        return self.description
    description.keys = ["when ", "and when "]
    description.expect_end = False


    def instruction(self, lc, orig, data):
        """Expecting to encounter a step instruction."""
        if lc.startswith("when ") or lc.startswith("and when ") or lc.startswith("test that "):
            return self.expectedresult(lc, orig, data)
        if lc.startswith("then "):
            data[-1]["steps"][-1]["expected"] = [orig]
            return self.expectedresult
        data[-1]["steps"][-1]["instruction"].append(orig)
        return self.instruction
    instruction.keys = ["then "]
    instruction.expect_end = True


    def expectedresult(self, lc, orig, data):
        """Expecting to encounter a step result."""
        if lc == "and":
            self._orig_and = orig
            return self.after_and
        if lc.startswith("test that "):
            if len(orig) > 200:
                data.append({})
                raise ParsingError("Title should have at most 200 chracters, '%s...'" % orig[0:50])
            data.append({"name": orig})
            return self.description
        if lc.startswith("when ") or lc.startswith("and when "):
            data[-1]["steps"].append({"instruction": [orig]})
            return self.instruction
        data[-1]["steps"][-1]["expected"].append(orig)
        return self.expectedresult
    expectedresult.keys = ["test that ", "when "]
    expectedresult.expect_end = True


    def after_and(self, lc, orig, data):
        """Expecting either a new step instruction, or continued result."""
        if lc.startswith("when "):
            data[-1]["steps"].append({"instruction": [orig]})
            return self.instruction
        data[-1]["steps"][-1]["expected"].extend([self._orig_and, orig])
        return self.expectedresult
    after_and.keys = ["when "]
    after_and.expect_end = False

########NEW FILE########
__FILENAME__ = fixture_gen
"""Sample cases and suites fixture generator."""
from fixture_generator import fixture_generator

from ..core.auth import User
from ..core.models import Product
from ..tags.models import Tag

from .models import (
    Case, CaseVersion, Suite, SuiteCase, CaseStep, CaseAttachment)


@fixture_generator(
    Case, CaseVersion, CaseStep, CaseAttachment,
    requires=["core.sample_products", "tags.sample_tags", "core.sample_users"])
def sample_cases():
    manager = User.objects.get(username="manager")
    creator = User.objects.get(username="creator")

    mt = Product.objects.get(name="MozTrap")
    mt6 = mt.versions.get(version="0.6")
    mt7 = mt.versions.get(version="0.7")
    mt8 = mt.versions.get(version="0.8")

    registration = Tag.objects.get(name="registration")

    login = Case.objects.create(product=mt, user=manager, priority=1)
    login_data = {
        "name": "Can log in.",
        "case": login,
        "description": "A user can log in to the app.",
        "status": CaseVersion.STATUS.active,
        "user": manager,
        }
    login_steps = [
        {
            "instruction": "Click the login link in the upper right.",
            "expected": "See a form with username and password fields.",
            },
        {
            "instruction": "Fill in a valid username and password, submit.",
            "expected": "See a welcome message in the upper right.",
            },
        ]
    for pv in [mt6, mt7, mt8]:
        cv = CaseVersion.objects.create(**dict(login_data, productversion=pv))
        for i, step_data in enumerate(login_steps):
            CaseStep.objects.create(
                **dict(step_data, caseversion=cv, number=i, user=manager))

    register = Case.objects.create(product=mt, user=creator, priority=2)
    register_data = {
        "name": "Can register.",
        "case": register,
        "description": "A new user can register for the app.",
        "status": CaseVersion.STATUS.active,
        "user": creator,
        }
    register_steps = [
        {
            "instruction": "Click the register link in the upper right.",
            "expected": "See a user registration form.",
            },
        {
            "instruction": "Fill in all fields, submit.",
            "expected": "Receive a verification email.",
            },
        ]
    for pv in [mt7, mt8]:
        cv = CaseVersion.objects.create(
            **dict(register_data, productversion=pv))
        if pv is mt8:
            cv.tags.add(registration)
        for i, step_data in enumerate(register_steps, 1):
            CaseStep.objects.create(
                **dict(step_data, caseversion=cv, number=i, user=creator))
        # registration not translated into Mandarin yet?
        for env in cv.environments.all():
            if any([el.name == "Mandarin" for el in env.ordered_elements()]):
                cv.environments.remove(env)

    ff = Product.objects.get(name="Firefox")
    ff9 = ff.versions.get(version="9")
    ff10 = ff.versions.get(version="10")

    key = Tag.objects.get(name="key")

    fast = Case.objects.create(product=ff, user=creator, priority=3)
    fast_data = {
        "name": "It is fast.",
        "case": fast,
        "description": "It's a fast browser.",
        "user": creator,
        }
    for pv in [ff9, ff10]:
        cv = CaseVersion.objects.create(
            **dict(fast_data, productversion=pv))
        cv.tags.add(key)


@fixture_generator(Suite, SuiteCase, requires=["library.sample_cases"])
def sample_suites():
    manager = User.objects.get(username="manager")

    login = Case.objects.distinct().get(versions__name="Can log in.")
    register = Case.objects.distinct().get(versions__name="Can register.")

    accounts = Suite.objects.create(
        product=login.product,
        name="Accounts",
        status=Suite.STATUS.active,
        user=manager,
        )

    SuiteCase.objects.create(
        case=register, suite=accounts, order=1, user=manager)
    SuiteCase.objects.create(
        case=login, suite=accounts, order=2, user=manager)

########NEW FILE########
__FILENAME__ = importer
"""Importer for suites and cases from a dictionary."""

import json

from django.db import transaction

from ..core.auth import User
from ..tags.models import Tag
from .models import Case, CaseVersion, CaseStep, Suite, SuiteCase



class Importer(object):
    """
    Importer for Suites and Cases.

    The "suites" or "cases" sections are optional.
    The object should be structured like this::

        {
            "suites": [
                {
                    "name": "suite1 name",
                    "description": "suite description"
                },
            ],
            "cases": [
                {
                    "name": "case title",
                    "description": "case description",
                    "tags": ["tag1", "tag2", "tag3"],
                    "suites": ["suite1 name", "suite2 name", "suite3 name"],
                    "created_by": "cdawson@mozilla.com"
                    "steps": [
                        {
                            "instruction": "instruction text",
                            "expected": "expected text"
                        },
                    ]
                }
            ]
        }

    Instantiate an ``Importer`` and call its ``import_data`` method::

        importer = Importer()
        import_result = importer.import_data(productversion, case_data)

    Returned value will be an ``ImportResult`` object with the following
    attributes:

    * cases: the number of cases imported
    * suites: the number of suites imported
    * warnings: list of warnings about the imported items, if any.

    """

    @transaction.commit_on_success
    def import_data(self, productversion, case_data, force_dupes=False):
        """
        Import the top-level dictionary of cases and suites.

        Return an object that has the number of imported and skipped items.

        Keyword arguments:

        * productversion -- The ProductVersion model object for which case_data
          will be imported
        * case_data -- a dictionary of cases and/or suites to be imported
        * force_dupes -- if True, will import cases with duplicate names.  If
          False, they will be skipped.

        """

        # the result object used to keep track of import status
        result = ImportResult()

        # importer for suites.
        suite_importer = None
        if "suites" in case_data:
            suite_importer = SuiteImporter(productversion.product)
            suite_importer.add_dicts(case_data["suites"])


        # no reason why the data couldn't include ONLY suites.  So function
        # gracefully if no cases.
        if "cases" in case_data:
            case_importer = CaseImporter(productversion, suite_importer)
            result.append(case_importer.import_cases(
                case_data["cases"],
                force_dupes=force_dupes))

        # now create the suites and add cases to them
        if suite_importer:
            result.append(suite_importer.import_suites())

        return result



class CaseImporter(object):
    """Imports cases and links to or creates associated tags, suites."""

    def __init__(self, productversion, suite_importer=None):
        """
        Construct a CaseImporter

        Keyword arguments:

        * productversion -- ProductVersion.  This is the productversion
          to which these cases apply.
        * suite_importer -- A SuiteImporter class to handle any suites listed
          for each case.  If None, or default, this class will create
          an empty one.

        Also create a TagImporter for importing tags and a UserCache to
        speed the lookup of User objects to match emails for case ownership.

        """

        self.productversion = productversion
        self.suite_importer = (
            suite_importer or SuiteImporter(productversion.product)
            )

        # the object responsible for importing tags
        self.tag_importer = TagImporter(self.productversion.product)

        # cache of user emails
        self.user_cache = UserCache()

    def import_cases(self, case_dict_list, force_dupes=False):
        """
        Import the test cases in the data.

        This may include suites and tags that each case belongs to.  If a case
        has no name, it will be skipped.  If a case has no steps, it will
        be imported, but a warning will be given.  All fields are optional
        with the exception of a name.

        Case data should be in this format::

            [
                {
                    "name": "case title",
                    "description": "case description",
                    "tags": ["tag1", "tag2", "tag3"],
                    "suites": ["suite1 name", "suite2 name", "suite3 name"],
                    "created_by": "cdawson@mozilla.com"
                    "steps": [
                        {
                            "instruction": "insruction text",
                            "expected": "expected text"
                        },
                    ]
                }
            ]


        """

        result = ImportResult()

        for new_case in case_dict_list:

            if not "name" in new_case:
                result.warn(
                    ImportResult.SKIP_CASE_NO_NAME,
                    new_case,
                    )
                continue

            # Don't re-import if we have the same case name and Product Version
            if not force_dupes and CaseVersion.objects.filter(
                name=new_case["name"],
                productversion=self.productversion,
                ).exists():

                result.warn(
                    ImportResult.SKIP_CASE_NAME_CONFLICT,
                    new_case,
                    )

                continue

            user = None
            if "created_by" in new_case:
                try:
                    email = new_case["created_by"]
                    user = self.user_cache.get_user(email)

                except User.DoesNotExist:
                    result.warn(
                        ImportResult.WARN_USER_NOT_FOUND,
                        email,
                        )

            # the case looks good so far, but there may be a problem with
            # one of the steps.  So, create a savepoint in case something
            # is inherently wrong with this case, we can roll back to skip
            # it, and still import the rest of the cases.
            sid = transaction.savepoint()

            # create the top-level case object which holds the versions
            case = Case.objects.create(
                product=self.productversion.product,
                idprefix=new_case.get("idprefix", ""),
                )

            # create the case version which holds the details
            caseversion = CaseVersion.objects.create(
                productversion=self.productversion,
                case=case,
                name=new_case["name"],
                description=new_case.get("description", ""),
                user=user,
                )

            # add the steps to this case version
            if "steps" in new_case:
                try:
                    self.import_steps(caseversion, new_case["steps"])
                except ValueError as e:
                    result.warn(
                        e.args[0],
                        new_case,
                        )

                    transaction.savepoint_rollback(sid)
                    continue
            else:
                result.warn(
                    ImportResult.WARN_NO_STEPS,
                    caseversion,
                    )

            if "tags" in new_case:
                self.tag_importer.add_names(caseversion, new_case["tags"])

            if "suites" in new_case:
                self.suite_importer.add_names(case, new_case["suites"])

            # case has been created, increment our count for reporting
            result.num_cases += 1

            # this case went ok.  We'll save it as complete in the overall
            # transaction.
            transaction.savepoint_commit(sid)

            # now create the tags and add case versions to them
            self.tag_importer.import_tags()

            # now create the suites and add cases to them
            result.append(self.suite_importer.import_suites())

        return result


    def import_steps(self, caseversion, step_data):
        """
        Add the steps to this case version.

        Keyword arguments:

        * caseversion -- the CaseVersion object that step_data applies to
        * step_data -- a dictionary containing the steps for the case

        Instruction is a required field for a step, but expected is optional.

        """

        for step_num, new_step in enumerate(step_data):
            try:
                casestep = CaseStep.objects.create(
                    caseversion=caseversion,
                    number=step_num + 1,
                    instruction=new_step["instruction"],
                    expected=new_step.get("expected", ""),
                    )
            except KeyError:
                raise ValueError(ImportResult.SKIP_STEP_NO_INSTRUCTION)



class UserCache(object):
    """
    Cache of emails to User objects.

    If an email was searched for, but no matching User object was found,
    then cache None so we don't keep looking for it.

    """

    def __init__(self):
        """Create a UserCache with an internal dictionary cache."""

        self.cache = {}


    def get_user(self, email):
        """
        Return the user object that matches the email in the case, if any.

        Keyword arguments:

        * email -- a string containing an email address
        * result -- an ImportResult object to post results to

        If the email is already in the cache, then return that user.
        If this method had already searched for the user and not found it,
        then it will thrown an exception once.  In that case, it will save
        the user of None in the cache and subsequent calls for that user
        will return None.

        """

        if email in self.cache:
            return self.cache[email]

        else:
            try:
                user = User.objects.get(email=email)
                self.cache[email] = user

            except User.DoesNotExist as e:
                self.cache[email] = None
                raise e

        return self.cache[email]



class TagImporter(object):
    """
    Imports suites based on lists and dicts of suites used to build it.

    """

    def __init__(self, product):
        """Store the Product, and create the internal map."""

        self.product = product
        self.map = {}


    def add_names(self, caseversion, tag_names):
        """
        Add a simple list of tag names.

        Keyword arguments:

        * caseversion -- the CaseVersion object that tag_names applies to
        * tag_names -- a list of strings containing the names of the tags
          to be applied to the caseversion (and created if necessary)

        """

        for tag_name in tag_names:
            caseversions = self.map.setdefault(tag_name, [])
            caseversions.append(caseversion)


    def import_tags(self):
        """
        Import all added tags.

        Check for existing tags to prevent creating a global tag with the same
        name as a product tag, and vice versa.

        Use or create tags in this order of priority:

            * use existing product tag
            * use existing global tag
            * create new product tag

        """

        for tag_name, caseversions in self.map.items():
            existing_tags = Tag.objects.filter(
                name=tag_name,
                product__in=[None, self.product],
                ).order_by("-product")

            # If there is a product tag, it will be sorted to first.
            # If not, then the only item will be the global one, so
            # use that.
            if list(existing_tags):
                tag = existing_tags[0]

            else:
                tag = Tag.objects.create(
                    name=tag_name,
                    product=self.product,
                    )

            tag.caseversions.add(*caseversions)

        # we have imported these items.  clear them out now.
        self.map.clear()



class SuiteImporter(object):
    """
    Imports suites based on lists and dicts of suites used to build it.

    The internal dict looks like this::

        {
            "suitename": {
                "description": "foo",
                "cases": [case1, case2]
            }
        }

    """

    def __init__(self, product):
        """
        Construct a SuiteImporter

        Store the Product, and create the internal map.  Also create a
        result object to keep track of any issues with adding and importing
        as we go.

        """

        self.product = product
        self.map = {}
        self.result = ImportResult()


    def add_names(self, case, suite_names):
        """
        Add a simple list of Suite names.

        Keyword arguments:

        * case -- the Case object that suite_names applies to
        * suite_names -- a list of strings.  These are the names of the
          suites to be applied to this case.  Suites will be created if
          they do not yet exist.

        """

        for suite_name in suite_names:
            suite = self.map.setdefault(suite_name, {})
            cases = suite.setdefault("cases", [])
            cases.append(case)


    def add_dicts(self, suite_dicts):
        """
        Add a list of suite dictionaries.

        Keyword arguments:

        * suite_dicts -- a list of dictionaries that represent suites
          to be imported

        The list should look like this::

            [
                {
                    "name": "suite1 name"
                    "description": "suite description",
                },
                {
                    "name": "suite2 name"
                    "description": "suite description",
                },
            ]

        Suites without names will be skipped.

        """

        for suite_dict in suite_dicts:
            try:
                suite = self.map.setdefault(suite_dict["name"], {})
                suite.setdefault(
                    "description",
                    suite_dict.get("description", ""),
                    )

            except KeyError:
                self.result.warn(
                    ImportResult.SKIP_SUITE_NO_NAME,
                    suite_dict,
                    )


    def import_suites(self):
        """Import all mapped suites."""

        for suite_name, suite_data in self.map.items():

            suite, created = Suite.objects.get_or_create(
                name=suite_name,
                product=self.product,
                defaults={"description": suite_data.get("description", "")},
                )

            if created:
                self.result.num_suites += 1

            # now add any cases the suite may have specified
            if "cases" in suite_data:
                for case in suite_data["cases"]:
                    SuiteCase.objects.create(case=case, suite=suite)

        # we have imported (or warned on) these items, so reset map.
        self.map.clear()

        return self.result



class ImportResult(object):
    """
    Results of the import process.

    This may be for a small part of the process, or the process as a whole.
    ImportResults can be merged with the append() method.

    """

    SKIP_SUITE_NO_NAME = "Skipped: Name field required for Suite"
    SKIP_CASE_NO_NAME = "Skipped: Name field required for Case"
    SKIP_STEP_NO_INSTRUCTION = "Skipped: Instruction field required for Step"
    SKIP_CASE_NAME_CONFLICT = ("Skipped: Case with this name already exists "
        "for this product")
    WARN_NO_STEPS = "Warning: Case has no steps"
    WARN_USER_NOT_FOUND = "Warning: user with this email does not exist."

    def __init__(self):
        """
        Construct an ImportResult to keep track of import status.

        num_cases -- number of cases imported
        num_suites -- number of suites imported
        warnings -- general warnings, and skipped items

        """

        # the total number of test cases that were imported
        self.num_cases = 0
        self.num_suites = 0
        self.warnings = []


    def warn(self, reason, item):
        """
        Add a warning to the result.

        Keyword arguments:

        * reason -- The string constant that describes the warning
        * item -- The object (dict or model object) that the warning is about.

        """

        self.warnings.append({"reason": reason, "item": item})


    def append(self, result):
        """Append the results object into this results object."""

        self.num_cases += result.num_cases
        self.num_suites += result.num_suites
        self.warnings.extend(result.warnings)


    def get_as_list(self):
        """
        Return a list of the statuses from the import.

        List items will look like::

            Warning: Case has no steps: case title3
            Skipped: Instruction field required for Step: {u'suites': ...
            Skipped: Name field required for Case: {u'suites': ...
            Imported 3 cases
            Imported 4 suites

        """

        result_list = [
            "{0}: {1}".format(x["reason"], json.dumps(x["item"], indent=4))
            for x in self.warnings
            ]

        result_list.append("Imported {0} cases".format(self.num_cases))
        result_list.append("Imported {0} suites".format(self.num_suites))
        return result_list

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    depends_on = [
        ("core", "0001_initial"),
        ("environments", "0001_initial"),
        ("tags", "0001_initial"),
        ]

    def forwards(self, orm):

        # Adding model 'Case'
        db.create_table('library_case', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 468255))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 468439))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('product', self.gf('django.db.models.fields.related.ForeignKey')(related_name='cases', to=orm['core.Product'])),
        ))
        db.send_create_signal('library', ['Case'])

        # Adding model 'CaseVersion'
        db.create_table('library_caseversion', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 462095))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 462381))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('status', self.gf('django.db.models.fields.CharField')(default='draft', max_length=30, db_index=True)),
            ('productversion', self.gf('django.db.models.fields.related.ForeignKey')(related_name='caseversions', to=orm['core.ProductVersion'])),
            ('case', self.gf('django.db.models.fields.related.ForeignKey')(related_name='versions', to=orm['library.Case'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('latest', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('envs_narrowed', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('library', ['CaseVersion'])

        # Adding unique constraint on 'CaseVersion', fields ['productversion', 'case']
        db.create_unique('library_caseversion', ['productversion_id', 'case_id'])

        # Adding M2M table for field environments on 'CaseVersion'
        db.create_table('library_caseversion_environments', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('caseversion', models.ForeignKey(orm['library.caseversion'], null=False)),
            ('environment', models.ForeignKey(orm['environments.environment'], null=False))
        ))
        db.create_unique('library_caseversion_environments', ['caseversion_id', 'environment_id'])

        # Adding M2M table for field tags on 'CaseVersion'
        db.create_table('library_caseversion_tags', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('caseversion', models.ForeignKey(orm['library.caseversion'], null=False)),
            ('tag', models.ForeignKey(orm['tags.tag'], null=False))
        ))
        db.create_unique('library_caseversion_tags', ['caseversion_id', 'tag_id'])

        # Adding model 'CaseAttachment'
        db.create_table('library_caseattachment', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 472479))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 472660))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('attachment', self.gf('django.db.models.fields.files.FileField')(max_length=100)),
            ('caseversion', self.gf('django.db.models.fields.related.ForeignKey')(related_name='attachments', to=orm['library.CaseVersion'])),
        ))
        db.send_create_signal('library', ['CaseAttachment'])

        # Adding model 'CaseStep'
        db.create_table('library_casestep', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 467216))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 467400))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('caseversion', self.gf('django.db.models.fields.related.ForeignKey')(related_name='steps', to=orm['library.CaseVersion'])),
            ('number', self.gf('django.db.models.fields.IntegerField')()),
            ('instruction', self.gf('django.db.models.fields.TextField')()),
            ('expected', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('library', ['CaseStep'])

        # Adding unique constraint on 'CaseStep', fields ['caseversion', 'number']
        db.create_unique('library_casestep', ['caseversion_id', 'number'])

        # Adding model 'Suite'
        db.create_table('library_suite', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 469040))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 469222))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('status', self.gf('django.db.models.fields.CharField')(default='draft', max_length=30, db_index=True)),
            ('product', self.gf('django.db.models.fields.related.ForeignKey')(related_name='suites', to=orm['core.Product'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('library', ['Suite'])

        # Adding model 'SuiteCase'
        db.create_table('library_suitecase', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 464668))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 52, 10, 464857))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('suite', self.gf('django.db.models.fields.related.ForeignKey')(related_name='suitecases', to=orm['library.Suite'])),
            ('case', self.gf('django.db.models.fields.related.ForeignKey')(related_name='suitecases', to=orm['library.Case'])),
            ('order', self.gf('django.db.models.fields.IntegerField')(default=0, db_index=True)),
        ))
        db.send_create_signal('library', ['SuiteCase'])

        # Adding unique constraint on 'SuiteCase', fields ['suite', 'case']
        db.create_unique('library_suitecase', ['suite_id', 'case_id'])


    def backwards(self, orm):

        # Removing unique constraint on 'SuiteCase', fields ['suite', 'case']
        db.delete_unique('library_suitecase', ['suite_id', 'case_id'])

        # Removing unique constraint on 'CaseStep', fields ['caseversion', 'number']
        db.delete_unique('library_casestep', ['caseversion_id', 'number'])

        # Removing unique constraint on 'CaseVersion', fields ['productversion', 'case']
        db.delete_unique('library_caseversion', ['productversion_id', 'case_id'])

        # Deleting model 'Case'
        db.delete_table('library_case')

        # Deleting model 'CaseVersion'
        db.delete_table('library_caseversion')

        # Removing M2M table for field environments on 'CaseVersion'
        db.delete_table('library_caseversion_environments')

        # Removing M2M table for field tags on 'CaseVersion'
        db.delete_table('library_caseversion_tags')

        # Deleting model 'CaseAttachment'
        db.delete_table('library_caseattachment')

        # Deleting model 'CaseStep'
        db.delete_table('library_casestep')

        # Deleting model 'Suite'
        db.delete_table('library_suite')

        # Deleting model 'SuiteCase'
        db.delete_table('library_suitecase')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'object_name': 'Product'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 479863)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 480062)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['order']", 'unique_together': "[('product', 'version')]", 'object_name': 'ProductVersion'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 485231)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 485432)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'object_name': 'Category'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 490682)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 490883)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 491510)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 491710)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 483136)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['environments.Element']", 'symmetrical': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 483359)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 480885)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 481067)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 487854)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 488058)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.caseattachment': {
            'Meta': {'object_name': 'CaseAttachment'},
            'attachment': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'attachments'", 'to': "orm['library.CaseVersion']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 492445)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 492644)'})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'unique_together': "[('caseversion', 'number')]", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 486735)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 486938)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'unique_together': "[('productversion', 'case')]", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 481635)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 481815)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['tags.Tag']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 488717)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 488917)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'unique_together': "[['suite', 'case']]", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 484163)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 484365)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 493404)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 52, 10, 493608)'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['library']

########NEW FILE########
__FILENAME__ = 0002_auto__del_unique_suitecase_case_suite__del_unique_caseversion_case_pro
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Removing unique constraint on 'CaseStep', fields ['caseversion', 'number']
        db.delete_unique('library_casestep', ['caseversion_id', 'number'])

        # Removing unique constraint on 'CaseVersion', fields ['case', 'productversion']
        db.delete_unique('library_caseversion', ['case_id', 'productversion_id'])

        # Removing unique constraint on 'SuiteCase', fields ['case', 'suite']
        db.delete_unique('library_suitecase', ['case_id', 'suite_id'])


    def backwards(self, orm):

        # Adding unique constraint on 'SuiteCase', fields ['case', 'suite']
        db.create_unique('library_suitecase', ['case_id', 'suite_id'])

        # Adding unique constraint on 'CaseVersion', fields ['case', 'productversion']
        db.create_unique('library_caseversion', ['case_id', 'productversion_id'])

        # Adding unique constraint on 'CaseStep', fields ['caseversion', 'number']
        db.create_unique('library_casestep', ['caseversion_id', 'number'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'object_name': 'Product'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 571453)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 571641)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 569302)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 569491)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'object_name': 'Category'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 575347)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 575551)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 580000)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 580199)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 572458)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['environments.Element']", 'symmetrical': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 572638)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 579139)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 579360)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 570673)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 570856)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.caseattachment': {
            'Meta': {'object_name': 'CaseAttachment'},
            'attachment': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'attachments'", 'to': "orm['library.CaseVersion']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 564457)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 564680)'})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 565387)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 565583)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 573738)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 573925)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['tags.Tag']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 566422)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 566606)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 576178)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 576378)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 568081)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 31, 22, 30, 11, 568264)'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['library']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_suite_cc_version__add_field_suitecase_cc_version__add_
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'Suite.cc_version'
        db.add_column('library_suite', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'SuiteCase.cc_version'
        db.add_column('library_suitecase', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'CaseVersion.cc_version'
        db.add_column('library_caseversion', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'CaseAttachment.cc_version'
        db.add_column('library_caseattachment', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'Case.cc_version'
        db.add_column('library_case', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'CaseStep.cc_version'
        db.add_column('library_casestep', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)


    def backwards(self, orm):

        # Deleting field 'Suite.cc_version'
        db.delete_column('library_suite', 'cc_version')

        # Deleting field 'SuiteCase.cc_version'
        db.delete_column('library_suitecase', 'cc_version')

        # Deleting field 'CaseVersion.cc_version'
        db.delete_column('library_caseversion', 'cc_version')

        # Deleting field 'CaseAttachment.cc_version'
        db.delete_column('library_caseattachment', 'cc_version')

        # Deleting field 'Case.cc_version'
        db.delete_column('library_case', 'cc_version')

        # Deleting field 'CaseStep.cc_version'
        db.delete_column('library_casestep', 'cc_version')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 190426)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 190624)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 185878)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 186074)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.user': {
            'Meta': {'object_name': 'User', 'db_table': "'auth_user'", '_ormbases': ['auth.User'], 'proxy': 'True'}
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 196774)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 196972)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 189436)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 189627)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 200292)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 200493)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 197684)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 197880)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 192679)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 192871)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.caseattachment': {
            'Meta': {'object_name': 'CaseAttachment'},
            'attachment': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'attachments'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 187537)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 187745)'})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 191525)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 191712)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 198592)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 198795)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 194131)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 194340)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 195643)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 195852)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 188495)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 12, 188686)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['library']

########NEW FILE########
__FILENAME__ = 0004_auto__add_field_caseattachment_name
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'CaseAttachment.name'
        db.add_column('library_caseattachment', 'name',
                      self.gf('django.db.models.fields.CharField')(default='name unknown', max_length=250),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'CaseAttachment.name'
        db.delete_column('library_caseattachment', 'name')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.caseattachment': {
            'Meta': {'object_name': 'CaseAttachment'},
            'attachment': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'attachments'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'draft'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 29, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['library']

########NEW FILE########
__FILENAME__ = 0005_auto__add_field_case_idprefix
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Case.idprefix'
        db.add_column('library_case', 'idprefix',
                      self.gf('django.db.models.fields.CharField')(default='', max_length=25, blank=True),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Case.idprefix'
        db.delete_column('library_case', 'idprefix')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.caseattachment': {
            'Meta': {'object_name': 'CaseAttachment'},
            'attachment': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'attachments'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 6, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['library']

########NEW FILE########
__FILENAME__ = 0006_auto__chg_field_suite_modified_by__chg_field_suite_created_by__chg_fie
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        pass

    def backwards(self, orm):
        pass


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.caseattachment': {
            'Meta': {'object_name': 'CaseAttachment'},
            'attachment': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'attachments'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['library']

########NEW FILE########
__FILENAME__ = 0007_auto__chg_field_caseversion_name
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'CaseVersion.name'
        db.alter_column('library_caseversion', 'name', self.gf('django.db.models.fields.CharField')(max_length=255))

    def backwards(self, orm):

        # Changing field 'CaseVersion.name'
        db.alter_column('library_caseversion', 'name', self.gf('django.db.models.fields.CharField')(max_length=200))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.caseattachment': {
            'Meta': {'object_name': 'CaseAttachment'},
            'attachment': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'attachments'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 11, 26, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['library']

########NEW FILE########
__FILENAME__ = 0008_auto__add_field_case_priority
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Case.priority'
        db.add_column('library_case', 'priority',
                      self.gf('django.db.models.fields.IntegerField')(null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Case.priority'
        db.delete_column('library_case', 'priority')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.caseattachment': {
            'Meta': {'object_name': 'CaseAttachment'},
            'attachment': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'attachments'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 6, 24, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['library']
########NEW FILE########
__FILENAME__ = 0009_auto__add_index_suite_name__add_index_suite_created_on__add_index_suit
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding index on 'Suite', fields ['name']
        db.create_index('library_suite', ['name'])

        # Adding index on 'Suite', fields ['created_on']
        db.create_index('library_suite', ['created_on'])

        # Adding index on 'SuiteCase', fields ['created_on']
        db.create_index('library_suitecase', ['created_on'])

        # Adding index on 'CaseVersion', fields ['created_on']
        db.create_index('library_caseversion', ['created_on'])

        # Adding index on 'CaseAttachment', fields ['created_on']
        db.create_index('library_caseattachment', ['created_on'])

        # Adding index on 'Case', fields ['created_on']
        db.create_index('library_case', ['created_on'])

        # Adding index on 'CaseStep', fields ['created_on']
        db.create_index('library_casestep', ['created_on'])


    def backwards(self, orm):
        # Removing index on 'CaseStep', fields ['created_on']
        db.delete_index('library_casestep', ['created_on'])

        # Removing index on 'Case', fields ['created_on']
        db.delete_index('library_case', ['created_on'])

        # Removing index on 'CaseAttachment', fields ['created_on']
        db.delete_index('library_caseattachment', ['created_on'])

        # Removing index on 'CaseVersion', fields ['created_on']
        db.delete_index('library_caseversion', ['created_on'])

        # Removing index on 'SuiteCase', fields ['created_on']
        db.delete_index('library_suitecase', ['created_on'])

        # Removing index on 'Suite', fields ['created_on']
        db.delete_index('library_suite', ['created_on'])

        # Removing index on 'Suite', fields ['name']
        db.delete_index('library_suite', ['name'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.caseattachment': {
            'Meta': {'object_name': 'CaseAttachment'},
            'attachment': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'attachments'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 4, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['library']
########NEW FILE########
__FILENAME__ = 0010_auto__add_index_suite_modified_on__add_index_suitecase_modified_on__ad
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding index on 'Suite', fields ['modified_on']
        db.create_index('library_suite', ['modified_on'])

        # Adding index on 'SuiteCase', fields ['modified_on']
        db.create_index('library_suitecase', ['modified_on'])

        # Adding index on 'CaseVersion', fields ['modified_on']
        db.create_index('library_caseversion', ['modified_on'])

        # Adding index on 'CaseAttachment', fields ['modified_on']
        db.create_index('library_caseattachment', ['modified_on'])

        # Adding index on 'Case', fields ['modified_on']
        db.create_index('library_case', ['modified_on'])

        # Adding index on 'CaseStep', fields ['modified_on']
        db.create_index('library_casestep', ['modified_on'])


    def backwards(self, orm):
        # Removing index on 'CaseStep', fields ['modified_on']
        db.delete_index('library_casestep', ['modified_on'])

        # Removing index on 'Case', fields ['modified_on']
        db.delete_index('library_case', ['modified_on'])

        # Removing index on 'CaseAttachment', fields ['modified_on']
        db.delete_index('library_caseattachment', ['modified_on'])

        # Removing index on 'CaseVersion', fields ['modified_on']
        db.delete_index('library_caseversion', ['modified_on'])

        # Removing index on 'SuiteCase', fields ['modified_on']
        db.delete_index('library_suitecase', ['modified_on'])

        # Removing index on 'Suite', fields ['modified_on']
        db.delete_index('library_suite', ['modified_on'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.productversion': {
            'Meta': {'ordering': "['product', 'order']", 'object_name': 'ProductVersion'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'productversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['core.Product']"}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'environments.category': {
            'Meta': {'ordering': "['name']", 'object_name': 'Category'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.element': {
            'Meta': {'ordering': "['name']", 'object_name': 'Element'},
            'category': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'elements'", 'to': "orm['environments.Category']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'})
        },
        'environments.environment': {
            'Meta': {'object_name': 'Environment'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'elements': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'environments'", 'symmetrical': 'False', 'to': "orm['environments.Element']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'environments'", 'null': 'True', 'to': "orm['environments.Profile']"})
        },
        'environments.profile': {
            'Meta': {'object_name': 'Profile'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'library.case': {
            'Meta': {'object_name': 'Case'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'idprefix': ('django.db.models.fields.CharField', [], {'max_length': '25', 'blank': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'cases'", 'to': "orm['core.Product']"})
        },
        'library.caseattachment': {
            'Meta': {'object_name': 'CaseAttachment'},
            'attachment': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'attachments'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'library.casestep': {
            'Meta': {'ordering': "['caseversion', 'number']", 'object_name': 'CaseStep'},
            'caseversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['library.CaseVersion']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'expected': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'instruction': ('django.db.models.fields.TextField', [], {}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'number': ('django.db.models.fields.IntegerField', [], {})
        },
        'library.caseversion': {
            'Meta': {'ordering': "['case', 'productversion__order']", 'object_name': 'CaseVersion'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'versions'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'environments': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'caseversion'", 'symmetrical': 'False', 'to': "orm['environments.Environment']"}),
            'envs_narrowed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latest': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'productversion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'caseversions'", 'to': "orm['core.ProductVersion']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'caseversions'", 'blank': 'True', 'to': "orm['tags.Tag']"})
        },
        'library.suite': {
            'Meta': {'object_name': 'Suite'},
            'cases': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'suites'", 'symmetrical': 'False', 'through': "orm['library.SuiteCase']", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_index': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suites'", 'to': "orm['core.Product']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'active'", 'max_length': '30', 'db_index': 'True'})
        },
        'library.suitecase': {
            'Meta': {'ordering': "['order']", 'object_name': 'SuiteCase'},
            'case': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Case']"}),
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'order': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suite': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suitecases'", 'to': "orm['library.Suite']"})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['library']
########NEW FILE########
__FILENAME__ = models
"""
Models for test-case library (cases, suites).

"""
from django.core.exceptions import ValidationError
from django.db import models
from django.db.models import Max

from ..attachments.models import Attachment
from ..mtmodel import MTModel, DraftStatusModel
from ..core.models import Product, ProductVersion
from ..environments.models import HasEnvironmentsModel
from ..tags.models import Tag



class Case(MTModel):
    """A test case for a given product."""
    product = models.ForeignKey(Product, related_name="cases")
    idprefix = models.CharField(max_length=25, blank=True)
    priority = models.IntegerField(blank=True, null=True)


    def __unicode__(self):
        return "case #%s" % (self.id,)


    def clone(self, *args, **kwargs):
        """Clone this Case with default cascade behavior: latest versions."""
        kwargs.setdefault("cascade", ["versions"])
        return super(Case, self).clone(*args, **kwargs)


    def set_latest_version(self, update_instance=None):
        """
        Mark latest version of this case in DB, marking all others non-latest.

        If ``update_instance`` is provided, its ``latest`` flag is updated
        appropriately.

        """
        try:
            latest_version = self.versions.order_by("-productversion__order")[0]
        except IndexError:
            pass
        else:
            self.versions.exclude(pk=latest_version.pk).update(
                latest=False, notrack=True)
            self.versions.filter(pk=latest_version.pk).update(
                latest=True, notrack=True)
            if update_instance is not None:
                update_instance.cc_version += 1
                if update_instance == latest_version:
                    update_instance.latest = True
                else:
                    update_instance.latest = False


    def all_versions(self):
        """
        Return list of (productversion, caseversion) tuples for this case.

        Includes all product versions; caseversion may be None if this case has
        no version for that product version.

        """
        caseversions_by_pv = dict(
            (cv.productversion, cv) for cv in self.versions.all())
        return(
            [
                (pv, caseversions_by_pv.get(pv, None))
                for pv in self.product.versions.all()
                ]
            )


    def latest_version(self):
        """Return latest version of this case."""
        return self.versions.get(latest=True)



    class Meta:
        permissions = [
            ("create_cases", "Can create new test cases."),
            ("manage_cases", "Can add/edit/delete test cases."),
            ]



class CaseVersion(MTModel, DraftStatusModel, HasEnvironmentsModel):
    """A version of a test case."""
    DEFAULT_STATUS = DraftStatusModel.STATUS.active

    productversion = models.ForeignKey(
        ProductVersion, related_name="caseversions")
    case = models.ForeignKey(Case, related_name="versions")
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)

    # denormalized for queries
    latest = models.BooleanField(default=False, editable=False)

    tags = models.ManyToManyField(Tag, blank=True, related_name="caseversions")
    # True if this case's envs have been narrowed from the product version.
    envs_narrowed = models.BooleanField(default=False)


    def __unicode__(self):
        return self.name


    class Meta:
        ordering = ["case", "productversion__order"]


    def save(self, *args, **kwargs):
        """Save CaseVersion, updating latest version."""
        skip_set_latest = kwargs.pop("skip_set_latest", False)
        skip_sync_name = kwargs.pop("skip_sync_name", False)
        super(CaseVersion, self).save(*args, **kwargs)
        if not skip_set_latest:
            self.case.set_latest_version(update_instance=self)

        # keep the name in sync for all caseversions
        if not skip_sync_name:
            for cv in self.case.versions.all():
                if not cv == self:
                    cv.name = self.name
                    cv.save(
                        skip_sync_name=True,
                        skip_set_latest=True,
                        )



    def delete(self, *args, **kwargs):
        """Delete CaseVersion, updating latest version."""
        super(CaseVersion, self).delete(*args, **kwargs)
        if not self.case.versions.count():
            # we just deleted the last version for this case, so delete
            # the case as well
            self.case.delete(*args, **kwargs)
        else:
            self.case.set_latest_version()


    def undelete(self, *args, **kwargs):
        """Undelete CaseVersion, updating latest version."""
        super(CaseVersion, self).undelete(*args, **kwargs)
        self.case.set_latest_version()


    def clean(self):
        """
        Validate uniqueness of product/version combo.

        Can't use actual unique constraint due to soft-deletion; if we don't
        include deleted-on in the constraint, deleted objects can cause
        integrity errors; if we include deleted-on in the constraint it
        nullifies the constraint entirely, since NULL != NULL in SQL.

        """
        try:
            dupes = CaseVersion.objects.filter(
                productversion=self.productversion, case=self.case)
        except (Case.DoesNotExist, ProductVersion.DoesNotExist):
            return
        if self.pk is not None:
            dupes = dupes.exclude(pk=self.pk)
        if dupes.exists():
            raise ValidationError(
                "A version of this test case for '{0}' already exists.".format(
                    self.productversion)
                )


    def clone(self, *args, **kwargs):
        """
        Clone this CaseVersion, cascading steps, attachments, tags.  Cloned
        CaseVersions take on the status of their source CaseVersion.

        Only one CaseVersion can exist for a given case/productversion
        combination; thus if neither a new case nor a new productversion is
        provided in the ``overrides`` dictionary, a new Case will implicitly be
        cloned and the cloned CaseVersion will be assigned to that new case.

        """
        kwargs.setdefault(
            "cascade", ["steps", "attachments", "tags", "environments"])
        overrides = kwargs.setdefault("overrides", {})
        overrides.setdefault("name", u"Cloned: {0}".format(self.name))
        if "productversion" not in overrides and "case" not in overrides:
            overrides["case"] = self.case.clone(cascade=[])
            suitecases = SuiteCase.objects.filter(case=self.case)
            for suitecase in suitecases:
                suite = suitecase.suite
                order = SuiteCase.objects.filter(
                    suite=suite,
                    ).aggregate(Max("order"))["order__max"] or 0
                SuiteCase.objects.create(
                    case=overrides["case"],
                    suite=suite,
                    user=kwargs["user"],
                    order=order + 1,
                    )
        return super(CaseVersion, self).clone(*args, **kwargs)


    @property
    def parent(self):
        return self.productversion


    def remove_envs(self, *envs):
        """
        Remove one or more environments from this caseversion's profile.

        Also sets ``envs_narrowed`` flag.

        """
        super(CaseVersion, self).remove_envs(*envs)
        self.envs_narrowed = True
        self.save()


    @classmethod
    def cascade_envs_to(cls, objs, adding):
        RunCaseVersion = cls.runcaseversions.related.model
        if adding:
            return {}
        return {
            RunCaseVersion: RunCaseVersion.objects.filter(caseversion__in=objs)
            }


    def bug_urls(self):
        """Returns set of bug URLs associated with this caseversion."""
        Result = self.runcaseversions.model.results.related.model
        StepResult = Result.stepresults.related.model
        return set(
            StepResult.objects.only(
                "bug_url",
                "deleted_on",
                "result_id",
                ).filter(
                    result__runcaseversion__caseversion=self).exclude(
                        bug_url="").values_list("bug_url", flat=True).distinct()
            )



class CaseAttachment(Attachment):
    caseversion = models.ForeignKey(CaseVersion, related_name="attachments")



class CaseStep(MTModel):
    """A step of a test case."""
    caseversion = models.ForeignKey(CaseVersion, related_name="steps")
    number = models.IntegerField()
    instruction = models.TextField()
    expected = models.TextField(blank=True)


    def __unicode__(self):
        return u"step #%s" % (self.number,)


    def clean(self):
        """
        Validate uniqueness of caseversion/number combo.

        Can't use actual unique constraint due to soft-deletion; if we don't
        include deleted-on in the constraint, deleted objects can cause
        integrity errors; if we include deleted-on in the constraint it
        nullifies the constraint entirely, since NULL != NULL in SQL.

        """
        try:
            dupes = CaseStep.objects.filter(
                caseversion=self.caseversion, number=self.number)
        except CaseVersion.DoesNotExist:
            return
        if self.pk is not None:
            dupes = dupes.exclude(pk=self.pk)
        if dupes.exists():
            raise ValidationError(
                "Test case '{0}' already has a step number '{1}'.".format(
                    self.caseversion, self.number)
                )


    class Meta:
        ordering = ["caseversion", "number"]



class Suite(MTModel, DraftStatusModel):
    """An ordered suite of test cases."""
    DEFAULT_STATUS = DraftStatusModel.STATUS.active

    product = models.ForeignKey(Product, related_name="suites")
    name = models.CharField(db_index=True, max_length=200)
    description = models.TextField(blank=True)

    cases = models.ManyToManyField(
        Case, through="SuiteCase", related_name="suites")


    def __unicode__(self):
        return self.name


    def clone(self, *args, **kwargs):
        """Clone this Suite with default cascade behavior."""
        kwargs.setdefault("cascade", ["suitecases"])
        overrides = kwargs.setdefault("overrides", {})
        overrides["status"] = self.STATUS.draft
        overrides.setdefault("name", "Cloned: {0}".format(self.name))
        return super(Suite, self).clone(*args, **kwargs)


    class Meta:
        permissions = [("manage_suites", "Can add/edit/delete test suites.")]



class SuiteCase(MTModel):
    """Association between a test case and a suite."""
    suite = models.ForeignKey(Suite, related_name="suitecases")
    case = models.ForeignKey(Case, related_name="suitecases")
    # order of test cases in the suite
    order = models.IntegerField(default=0, db_index=True)


    class Meta:
        ordering = ["order"]
        permissions = [
            ("manage_suite_cases", "Can add/remove cases from suites.")]


    def clean(self):
        """
        Validate uniqueness of suite/case combo.

        Can't use actual unique constraint due to soft-deletion; if we don't
        include deleted-on in the constraint, deleted objects can cause
        integrity errors; if we include deleted-on in the constraint it
        nullifies the constraint entirely, since NULL != NULL in SQL.

        """
        try:
            dupes = SuiteCase.objects.filter(
                suite=self.suite, case=self.case)
        except (Suite.DoesNotExist, Case.DoesNotExist):
            return
        if self.pk is not None:
            dupes = dupes.exclude(pk=self.pk)
        if dupes.exists():
            raise ValidationError(
                "'{0}' is already in suite '{1}'".format(
                    self.case, self.suite)
                )

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'CorePreferences'
        db.create_table('preferences_corepreferences', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('default_new_user_role', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.Group'], null=True, blank=True)),
        ))
        db.send_create_signal('preferences', ['CorePreferences'])

    def backwards(self, orm):
        # Deleting model 'CorePreferences'
        db.delete_table('preferences_corepreferences')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'preferences.corepreferences': {
            'Meta': {'object_name': 'CorePreferences'},
            'default_new_user_role': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.Group']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        }
    }

    complete_apps = ['preferences']

########NEW FILE########
__FILENAME__ = mtadmin
"""
MT ModelAdmin and InlineModelAdmin for use with MTModel.

"""
from itertools import chain
from functools import partial

from django.conf import settings
from django.forms.models import BaseInlineFormSet
from django.shortcuts import redirect
from django.views.decorators.cache import never_cache

from django.contrib import admin, messages
from django.contrib.admin import actions
from django.contrib.admin.util import flatten_fieldsets
from django.contrib.auth import REDIRECT_FIELD_NAME
from django.contrib.auth.views import redirect_to_login

from moztrap.view.utils.mtforms import MTModelForm



class MTAdminSite(admin.AdminSite):
    """MozTrap admin site class."""
    @never_cache
    def login(self, request, extra_context=None):
        """Displays the login form for the given HttpRequest."""
        if request.user.is_authenticated():
            messages.warning(
                request,
                "Your account does not have permissions to access that page. "
                "Please log in with a different account, or visit a different "
                "page. "
                )
        return redirect_to_login(
            request.get_full_path(),
            settings.LOGIN_URL,
            REDIRECT_FIELD_NAME,
            )


    @never_cache
    def logout(self, request, extra_context=None):
        """
        Make admin 'logout' a no-op.

        We replace the link with a "back to MozTrap" link.

        The default AdminSite.logout implementation exposes us to logout CSRF.

        """
        return redirect("home")


site = MTAdminSite()



class MTModelAdmin(admin.ModelAdmin):
    list_display = ["__unicode__", "deleted_on"]
    readonly_fields = [
        "created_on",
        "created_by",
        "modified_on",
        "modified_by",
        "deleted_on",
        "deleted_by",
        "cc_version",
        ]
    actions = ["delete", "undelete", "delete_selected"]


    def delete(self, request, queryset):
        """Admin action to soft-delete objects."""
        queryset.delete(user=request.user)
    delete.short_description = (
        u"Delete selected %(verbose_name_plural)s")


    def undelete(self, request, queryset):
        """Admin action to undelete objects."""
        queryset.undelete(user=request.user)
    undelete.short_description = (
        u"Undelete selected %(verbose_name_plural)s")


    def delete_selected(self, request, queryset):
        """Bypass soft delete and really delete selected instances."""
        queryset.delete = partial(queryset.delete, permanent=True)
        return actions.delete_selected(self, request, queryset)
    delete_selected.short_description = (
        u"PERMANENTLY delete selected %(verbose_name_plural)s")


    def save_model(self, request, obj, form, change):
        """Given a model instance save it to the database."""
        obj.save(user=request.user)


    def save_formset(self, request, form, formset, change):
        """Given an inline formset save it to the database."""
        if isinstance(formset, MTInlineFormSet):
            formset.save(user=request.user)
        else:
            formset.save()


    def delete_model(self, request, obj):
        """Given a model instance delete it from the database."""
        obj.delete(user=request.user)


    def get_fieldsets(self, *args, **kwargs):
        """
        Get fieldsets for the add/change form.

        Adds separate fieldsets at the end for metadata fields
        (creation/modification/deletion tracking), and removes these from
        default all-fields fieldset, if present.

        """
        meta_fields = [
            ("cc_version",),
            ("created_on", "created_by"),
            ("modified_on", "modified_by"),
            ]

        delete_fields = [
            ("deleted_on", "deleted_by"),
            ]

        fieldsets = super(MTModelAdmin, self).get_fieldsets(
            *args, **kwargs)[:]

        if not self.declared_fieldsets:
            metadata_fields = set(
                chain.from_iterable(chain(meta_fields, delete_fields)))

            fieldsets[0][1]["fields"] = [
                field for field in fieldsets[0][1]["fields"]
                if field not in metadata_fields
                ]

        fieldsets.extend([
                ("Deletion", {"fields": delete_fields}),
                ("Meta", {"fields": meta_fields, "classes": ["collapse"]})
                ])

        return fieldsets


class TeamModelAdmin(MTModelAdmin):
    def get_fieldsets(self, *args, **kwargs):
        """
        Get fieldsets for the add/change form.

        Adds separate fieldset at the end for Team fields, and removes these
        from default all-fields fieldset, if present.

        """
        team_fields = [("has_team", "own_team")]

        fieldsets = super(TeamModelAdmin, self).get_fieldsets(
            *args, **kwargs)[:]

        if not self.declared_fieldsets:
            metadata_fields = set(chain.from_iterable(team_fields))

            fieldsets[0][1]["fields"] = [
                field for field in fieldsets[0][1]["fields"]
                if field not in metadata_fields
                ]

        # Place Team fieldset right before Deletion and Meta
        fieldsets.insert(-2, ("Team", {"fields": team_fields}))

        return fieldsets


    def get_form(self, *args, **kwargs):
        """
        Get form for use in admin add/change view.

        Ensures that team fields are included in form, even when fieldsets are
        explicitly specified and don't include the team fieldset (because it is
        automatically added by ``get_fieldsets``).

        """
        if self.declared_fieldsets:
            kwargs["fields"] = flatten_fieldsets(
                self.declared_fieldsets) + ["has_team", "own_team"]

        return super(TeamModelAdmin, self).get_form(*args, **kwargs)



class MTInlineFormSet(BaseInlineFormSet):
    def save(self, *args, **kwargs):
        """Save model instances for each form in the formset."""
        # stash the user for use by ``save_new`` and ``save_existing``
        self.user = kwargs.pop("user", None)
        return super(MTInlineFormSet, self).save(*args, **kwargs)


    def save_new(self, form, commit=True):
        """Saves and returns a new model instance for the given form."""
        form.save = partial(form.save, user=self.user)
        return super(MTInlineFormSet, self).save_new(form, commit)


    def save_existing(self, form, instance, commit=True):
        """Saves and returns an existing model instance for the given form."""
        form.save = partial(form.save, user=self.user)
        return super(MTInlineFormSet, self).save_existing(
            form, instance, commit)


    def _existing_object(self, pk):
        """Retrieve an existing inline object by pk."""
        obj = super(MTInlineFormSet, self)._existing_object(pk)
        if hasattr(self, "user"):
            obj.delete = partial(obj.delete, user=self.user)
        return obj



class MTInlineModelAdmin(object):
    formset = MTInlineFormSet
    form = MTModelForm
    # metadata fields are too much cruft for an inline
    exclude = [
        "created_on",
        "created_by",
        "modified_on",
        "modified_by",
        "deleted_on",
        "deleted_by",
        ]

    readonly_fields = ["exists"]


    def exists(self, obj):
        return obj.deleted_on is None
    exists.boolean = True



class MTTabularInline(MTInlineModelAdmin, admin.TabularInline):
    pass



class MTStackedInline(MTInlineModelAdmin, admin.StackedInline):
    pass

########NEW FILE########
__FILENAME__ = mtapi
from tastypie import http
from tastypie.authentication import ApiKeyAuthentication
from tastypie.authorization import  Authorization
from tastypie.exceptions import ImmediateHttpResponse
from tastypie.resources import ModelResource

from .core.models import ApiKey

import logging
logger = logging.getLogger("moztrap.model.mtapi")


class MTApiKeyAuthentication(ApiKeyAuthentication):
    """Authentication that requires our custom api key implementation."""

    def get_key(self, user, api_key):
        try:
            ApiKey.objects.get(owner=user, key=api_key, active=True)
            logger.debug("api key is authorized")
        except Exception as e:
            logger.debug("api key is NOT authorized\n%s" % e)
            return self._unauthorized()

        return True


    def is_authenticated(self, request, **kwargs):
        """
        Finds the user and checks their API key. GET requests are always
        allowed.

        This overrides Tastypie's default impl, because we use a User
        proxy class, which Tastypie doesn't find

        Should return either ``True`` if allowed, ``False`` if not or an
        ``HttpResponse`` if you need something custom.
        """
        if request.method == "GET":
            return True

        from .core.auth import User

        username = request.GET.get("username") or request.POST.get("username")
        api_key = request.GET.get("api_key") or request.POST.get("api_key")

        if not username or not api_key:
            if not username:  # pragma: no cover
                logger.debug("no username")  # pragma: no cover
            elif not api_key:  # pragma: no cover
                logger.debug("no api key")  # pragma: no cover
            return self._unauthorized()

        try:
            user = User.objects.get(username=username)
        except (User.DoesNotExist, User.MultipleObjectsReturned):
            logger.debug("user retrieval error")
            return self._unauthorized()

        request.user = user
        return self.get_key(user, api_key)



class MTAuthorization(Authorization):
    """Authorization that allows any user to GET but only users with permissions
    to modify."""

    @property
    def permission(self):
        """This permission should be checked by is_authorized."""
        klass = self.resource_meta.object_class
        permission = "%s.manage_%ss" % (klass._meta.app_label,
            klass._meta.module_name)
        logger.debug("desired permission %s" % permission)
        return permission

    def is_authorized(self, request, object=None):

        if request.method == "GET":
            logger.debug("GET always allowed")
            return True
        elif request.user.has_perm(self.permission):
            logger.debug("user has permissions")
            return True
        else:
            logger.debug("user does not have permissions")
            return False



class MTResource(ModelResource):
    """Implement the common code needed for CRUD API interfaces.

    Child classes must implement the following abstract methods:

    - model (property)

    """

    class Meta:
        list_allowed_methods = ["get", "post"]
        detail_allowed_methods = ["get", "put", "delete"]
        authentication = MTApiKeyAuthentication()
        authorization = MTAuthorization()
        always_return_data = True
        ordering = ['id']

    @property
    def model(self):
        """Model class related to this resource."""
        raise NotImplementedError  # pragma: no cover


    @property
    def read_create_fields(self):
        """List of fields that are required for create but read-only for update."""
        return []


    def check_read_create(self, bundle):
        """Verify that request isn't trying to change a read-create field."""

        obj = self.get_via_uri(bundle.request.path)
        for fk in self.read_create_fields:

            if fk not in bundle.data:
                continue

            new_fk_id = self._id_from_uri(bundle.data[fk])
            old_fk_id = str(getattr(obj, fk).id)
            if new_fk_id != old_fk_id:
                error_message = str(
                    "%s of an existing %s " % (fk, self._meta.resource_name) +
                    "may not be changed.")
                logger.error(
                    "\n".join([error_message, "old: %s, new: %s"]),
                    old_fk_id, new_fk_id)
                raise ImmediateHttpResponse(
                    response=http.HttpBadRequest(error_message))

        return bundle


    def obj_create(self, bundle, request=None, **kwargs):
        """Set the created_by field for the object to the request's user"""
        # this try/except logging is more helpful than 500 / 404 errors on
        # the client side
        try:
            bundle = super(MTResource, self).obj_create(
                bundle=bundle, request=request, **kwargs)
            bundle.obj.created_by = request.user
            bundle.obj.save(user=request.user)
            return bundle
        except Exception:  # pragma: no cover
            logger.exception("error creating %s", bundle)  # pragma: no cover
            raise  # pragma: no cover


    def obj_update(self, bundle, request=None, **kwargs):
        """Set the modified_by field for the object to the request's user"""
        # this try/except logging is more helpful than 500 / 404 errors on the
        # client side
        bundle = self.check_read_create(bundle)
        try:
            bundle = super(MTResource, self).obj_update(
                bundle=bundle, request=request, **kwargs)
            bundle.obj.save(user=request.user)
            return bundle
        except Exception:  # pragma: no cover
            logger.exception("error updating %s", bundle)  # pragma: no cover
            raise  # pragma: no cover


    def obj_delete(self, request=None, **kwargs):
        """Delete the object.
        The DELETE request may include permanent=True/False in its params
        parameter (ie, along with the user's credentials). Default is False.
        """
        # this try/except logging is more helpful than 500 / 404 errors on
        # the client side
        try:
            permanent = request._request.dicts[1].get("permanent", False)
            # pull the id out of the request's path
            obj_id = self._id_from_uri(request.path)
            obj = self.model.objects.get(id=obj_id)
            obj.delete(user=request.user, permanent=permanent)
        except Exception:  # pragma: no cover
            logger.exception("error deleting %s", request.path)  # pragma: no cover
            raise  # pragma: no cover


    def delete_detail(self, request, **kwargs):
        """Avoid the following error:
        WSGIWarning: Content-Type header found in a 204 response, which not
        return content.
        """
        res = super(MTResource, self).delete_detail(request, **kwargs)
        del(res._headers["content-type"])
        return res


    def save_related(self, bundle):
        """keep it from throwing a ConcurrencyError on obj_update"""
        super(MTResource, self).save_related(bundle)
        if bundle.request.META['REQUEST_METHOD'] == 'PUT':
            bundle.obj.cc_version = self.model.objects.get(
                id=bundle.obj.id).cc_version

    def _id_from_uri(self, uri):
        return uri.split('/')[-2]

########NEW FILE########
__FILENAME__ = mtmodel
"""
Common model behavior for all MozTrap models.

Soft-deletion (including cascade) and tracking of user and timestamp for model
creation, modification, and soft-deletion.

"""
import datetime

from django.db import models, router
from django.db.models.deletion import Collector
from django.db.models.query import QuerySet
from django.db.models.signals import class_prepared

from model_utils import Choices

from .core.auth import User



class ConcurrencyError(Exception):
    pass



def utcnow():
    return datetime.datetime.utcnow()



class SoftDeleteCollector(Collector):
    """
    A variant of Django's default delete-cascade collector that implements soft
    delete.

    """
    def collect(self, objs, *args, **kwargs):
        """
        Collect ``objs`` and dependent objects.

        We override in order to store "root" objects for undelete.

        """
        if kwargs.get("source", None) is None:
            self.root_objs = objs
        super(SoftDeleteCollector, self).collect(objs, *args, **kwargs)


    def delete(self, user=None):
        """
        Soft-delete all collected instances.

        """
        now = utcnow()
        for model, instances in self.data.iteritems():
            pk_list = [obj.pk for obj in instances]
            model._base_manager.filter(
                pk__in=pk_list, deleted_on__isnull=True).update(
                deleted_by=user, deleted_on=now)


    def undelete(self, user=None):
        """
        Undelete all collected instances that were deleted.

        """
        # timestamps on which root obj(s) were deleted; only cascade items also
        # deleted in one of these same cascade batches should be undeleted.
        deletion_times = set([o.deleted_on for o in self.root_objs])
        for model, instances in self.data.iteritems():
            pk_list = [obj.pk for obj in instances]
            model._base_manager.filter(
                pk__in=pk_list, deleted_on__in=deletion_times).update(
                deleted_by=None, deleted_on=None)



class MTQuerySet(QuerySet):
    """
    Implements modification tracking and soft deletes on bulk update/delete.

    """
    def create(self, *args, **kwargs):
        """
        Creates, saves, and returns a new object with the given kwargs.
        """
        user = kwargs.pop("user", None)
        kwargs["created_by"] = user
        kwargs["modified_by"] = user
        return super(MTQuerySet, self).create(*args, **kwargs)


    def update(self, *args, **kwargs):
        """
        Update all objects in this queryset with modifications in ``kwargs``.

        """
        if not kwargs.pop("notrack", False):
            kwargs["modified_by"] = kwargs.pop("user", None)
            kwargs["modified_on"] = utcnow()
        # increment the concurrency control version for all updated objects
        kwargs["cc_version"] = models.F("cc_version") + 1
        return super(MTQuerySet, self).update(*args, **kwargs)


    def delete(self, user=None, permanent=False):
        """
        Soft-delete all objects in this queryset, unless permanent=True.

        """
        if permanent:
            return super(MTQuerySet, self).delete()
        collector = SoftDeleteCollector(using=self.db)
        collector.collect(self)
        collector.delete(user)


    def undelete(self, user=None):
        """
        Undelete all objects in this queryset.

        """
        collector = SoftDeleteCollector(using=self.db)
        collector.collect(self)
        collector.undelete(user)



class MTManager(models.Manager):
    """
    Manager using ``MTQuerySet`` and optionally hiding deleted objects.

    By making show_deleted an instantiation argument, and defaulting it to
    False, we can achieve something a bit subtle: the instantiated default
    manager on a MTModel shows all objects, including deleted one (meaning the
    admin will show deleted objects, so they can be undeleted). But
    related-object managers (which subclass the default manager class) will
    still hide deleted objects.

    """
    def __init__(self, *args, **kwargs):
        """Instantiate a MTManager, pulling out the ``show_deleted`` arg."""
        self._show_deleted = kwargs.pop("show_deleted", False)
        super(MTManager, self).__init__(*args, **kwargs)


    def get_query_set(self):
        """Return a ``MTQuerySet`` for all queries."""
        qs = MTQuerySet(self.model, using=self.db)
        if not self._show_deleted:
            qs = qs.filter(deleted_on__isnull=True)
        return qs



class MTModel(models.Model):
    """
    Common base abstract model for all MozTrap models.

    Tracks user and timestamp for creation, modification, and (soft) deletion.

    """
    created_on = models.DateTimeField(db_index=True, default=utcnow)
    created_by = models.ForeignKey(
        User, blank=True, null=True, related_name="+", on_delete=models.SET_NULL)

    modified_on = models.DateTimeField(db_index=True, default=utcnow)
    modified_by = models.ForeignKey(
        User, blank=True, null=True, related_name="+", on_delete=models.SET_NULL)
    deleted_on = models.DateTimeField(db_index=True, blank=True, null=True)
    deleted_by = models.ForeignKey(
        User, blank=True, null=True, related_name="+", on_delete=models.SET_NULL)

    # for optimistic concurrency control
    cc_version = models.IntegerField(default=0)



    # default manager returns all objects, so admin can see all
    everything = MTManager(show_deleted=True)
    # ...but "objects", for use in most code, returns only not-deleted
    objects = MTManager(show_deleted=False)


    def save(self, *args, **kwargs):
        """
        Save this instance.

        Records modified timestamp and user, and raises ConcurrencyError if an
        out-of-date version is being saved.

        """
        if not kwargs.pop("notrack", False):
            user = kwargs.pop("user", None)
            now = utcnow()
            if self.pk is None and user is not None:
                self.created_by = user
            # .create() won't pass in user, but presets modified_by
            if not (self.pk is None and self.modified_by is not None):
                self.modified_by = user
            self.modified_on = now

        # MTModels always have an auto-PK and we don't set PKs explicitly, so
        # we can assume that a set PK means this should be an update.
        if kwargs.get("force_update") or self.id is not None:
            non_pks = [f for f in self._meta.local_fields if not f.primary_key]
            # This isn't a race condition because the save will only take
            # effect if previous_version is actually up to date.
            previous_version = self.cc_version
            self.cc_version += 1
            values = [(f, None, f.pre_save(self, False)) for f in non_pks]
            rows = self.__class__.objects.filter(
                id=self.id, cc_version=previous_version)._update(values)
            if not rows:
                raise ConcurrencyError(
                    "No {0} row with id {1} and version {2} updated.".format(
                        self.__class__, self.id, previous_version)
                    )
        else:
            return super(MTModel, self).save(*args, **kwargs)


    def clone(self, cascade=None, overrides=None, user=None):
        """
        Clone this instance and return the new, cloned instance.

        ``overrides`` should be a dictionary of override values for fields on
        the cloned instance.

        M2M or reverse FK relations listed in ``cascade`` iterable will be
        cascade-cloned. By default, if not listed in ``cascade``, m2m/reverse
        FKs will effectively be cleared (as the remote object will still be
        pointing to the original instance, not the cloned one.)

        If ``cascade`` is a dictionary, keys are m2m/reverse-FK accessor names,
        and values are a callable that takes the queryset of all related
        objects and returns those that should be cloned.

        """
        if cascade is None:
            cascade = {}
        else:
            try:
                cascade.iteritems
            except AttributeError:
                cascade = dict((i, lambda qs: qs) for i in cascade)

        if overrides is None:
            overrides = {}

        overrides["created_on"] = utcnow()
        overrides["created_by"] = user
        overrides["modified_by"] = user

        clone = self.__class__()

        for field in self._meta.fields:
            if field.primary_key:
                continue
            val = overrides.get(field.name, getattr(self, field.name))
            setattr(clone, field.name, val)

        clone.save(force_insert=True)

        for name, filter_func in cascade.items():
            mgr = getattr(self, name)
            if mgr.__class__.__name__ == "ManyRelatedManager":  # M2M
                clone_mgr = getattr(clone, name)
                existing = set(clone_mgr.all())
                new = set(filter_func(mgr.all()))
                clone_mgr.add(*new.difference(existing))
                clone_mgr.remove(*existing.difference(new))
            elif mgr.__class__.__name__ == "RelatedManager":  # reverse FK
                reverse_name = getattr(self.__class__, name).related.field.name
                for obj in filter_func(mgr.all()):
                    obj.clone(overrides={reverse_name: clone})
            else:
                raise ValueError(
                    "Cannot cascade-clone '{0}'; "
                    "not a many-to-many or reverse foreignkey.".format(name))

        return clone


    def delete(self, user=None, permanent=False):
        """
        (Soft) delete this instance, unless permanent=True.

        """
        if permanent:
            return super(MTModel, self).delete()
        self._collector.delete(user)


    def undelete(self, user=None):
        """
        Undelete this instance.

        """
        self._collector.undelete(user)


    @property
    def _collector(self):
        """Returns populated delete-cascade collector."""
        db = router.db_for_write(self.__class__, instance=self)
        collector = SoftDeleteCollector(using=db)
        collector.collect([self])
        return collector


    class Meta:
        abstract = True



class NotDeletedCount(models.Count):
    """A Count on a related field that only counts not-deleted objects."""
    def add_to_query(self, query, alias, col, source, is_summary):
        """
        Add the aggregate to the nominated query.

        Expects col to be a tuple (which means this can only be used to count
        related fields), and transforms it into a NotDeletedCountColumn.

        """
        try:
            table, field = col
        except ValueError:
            table, field = None, col
        col = NotDeletedCountColumn(table, field)
        return super(NotDeletedCount, self).add_to_query(
            query, alias, col, source, is_summary)



class NotDeletedCountColumn(object):
    """An object with an as_sql method that counts only not-deleted objects."""
    def __init__(self, table, field):
        """Initialize the column with a table and field name."""
        self.table = table
        self.field = field


    def as_sql(self, qn, connection):
        """Return CASE statement to select only not-deleted objects."""
        field = qn(self.field)
        deleted_on = qn("deleted_on")
        if self.table is not None:
            table = qn(self.table)
            field = "{0}.{1}".format(table, field)
            deleted_on = "{0}.{1}".format(table, deleted_on)
        return "CASE WHEN {0} IS NULL THEN {1} ELSE NULL END".format(
            deleted_on, field)



class TeamModel(models.Model):
    """
    Model which may have its own team or inherit team from parent.

    If ``has_team`` is True, ``own_team`` is this instance's team. If False,
    the parent's team is used instead.

    If a ``TeamModel`` does not implement a ``parent`` property that returns
    its "parent" for purposes of team inheritance, it will be considered to be
    the top of the inheritance chain and won't inherit a team.

    """
    has_team = models.BooleanField(default=False)
    own_team = models.ManyToManyField(User, blank=True)


    @property
    def team(self):
        if self.has_team or self.parent is None:
            return self.own_team
        return self.parent.team


    def add_to_team(self, *users):
        """Add given users to this object's team (not to parent team)."""
        self.own_team.add(*users)
        self.__class__.objects.filter(pk=self.pk).update(has_team=True)
        self.has_team = True
        self.cc_version += 1


    @property
    def parent(self):
        return None


    class Meta:
        abstract = True



class DraftStatusModel(models.Model):
    """
    Model which has a status that can be draft, active, or disabled.

    Also provides ``activate`` and ``deactivate`` model methods.

    """
    STATUS = Choices("draft", "active", "disabled")
    DEFAULT_STATUS = STATUS.draft


    status = models.CharField(
        max_length=30, db_index=True, choices=STATUS, default=DEFAULT_STATUS)


    def activate(self, user=None):
        """Activate this object."""
        self.status = self.STATUS.active
        self.save(force_update=True, user=user)


    def draft(self, user=None):
        """Reset this object to draft status."""
        self.status = self.STATUS.draft
        self.save(force_update=True, user=user)


    def deactivate(self, user=None):
        """Deactivate this object."""
        self.status = self.STATUS.disabled
        self.save(force_update=True, user=user)


    class Meta:
        abstract = True



def set_default_status(sender, **kwargs):
    """Set the default status on a DraftStatusModel subclass."""
    if issubclass(sender, DraftStatusModel):
        sender._meta.get_field("status").default = sender.DEFAULT_STATUS


class_prepared.connect(set_default_status)

########NEW FILE########
__FILENAME__ = admin
"""
Admin config for tags.

"""
from django.contrib import admin

from ..mtadmin import MTModelAdmin
from . import models



admin.site.register(models.Tag, MTModelAdmin)

########NEW FILE########
__FILENAME__ = api
from tastypie import fields
from tastypie import http
from tastypie.resources import ALL, ALL_WITH_RELATIONS
from tastypie.exceptions import ImmediateHttpResponse

from .models import Tag
from ..mtapi import MTResource
from ..core.api import ProductResource

import logging
logger = logging.getLogger(__name__)



class TagResource(MTResource):


    product = fields.ToOneField(
        ProductResource,
        "product",
        full=False,
        null=True,
        )

    #@@@ additional relationship caseversions needs to be handled

    class Meta(MTResource.Meta):
        queryset = Tag.objects.all().select_related("product")
        fields = ["id", "name", "description", "product"]
        filtering = {
            "name": ALL,
            "product": ALL_WITH_RELATIONS,
            }
        ordering = ['name', 'product__id', 'id']

    @property
    def model(self):
        """Model class related to this resource."""
        return Tag


    # do not put read_create_fields here, as product is a special
    # case that may be changed some times but not others

    def obj_update(self, bundle, request=None, **kwargs):
        """Lots of rules for modifying product for tags."""
        tag = self.get_via_uri(bundle.request.path, request)
        caseversions = tag.caseversions.all()
        err_msg = str("Tag's Product may not be changed unless " +
                  "the tag is not in use, the product is being " +
                  "set to None, or the product matches the existing cases.")

        # if we're even thinking about changing the product
        if 'product' in bundle.data.keys():
            logger.debug('thinking about product')
            # if tag is in use
            if caseversions:
                logger.debug('tag in use')
                desired_product = bundle.data['product']
                products = set(
                    [cv.productversion.product for cv in caseversions]
                    )
                # if it is *changing* the product
                if desired_product != tag.product:
                    logger.debug('changing product')
                    # if changing from global to product-specific
                    if not desired_product == None:
                        logger.debug('changing from global to product-specific')
                        # if existing caseversions represent more than one
                        # product
                        desired_product_id = self._id_from_uri(desired_product)
                        if len(products) > 1:
                            logger.exception(err_msg)
                            raise ImmediateHttpResponse(
                                response=http.HttpBadRequest(err_msg))
                        # or if cases' product is not requested product
                        elif str(list(products)[0].id) != desired_product_id:
                            logger.exception(err_msg)
                            raise ImmediateHttpResponse(
                                response=http.HttpBadRequest(err_msg))
        # code from here through the last else is optional,
        # but nice if tracking down coverage problems
                         # requested product matches the single product used by
                         # all of the caseversions
                        else:
                            logger.debug(
                                "product matches caseversions' product")
                    else:  # changing from product-specific to global
                        logger.debug("changing from product-specific to global")
                else:
                    logger.debug("not changing product")
            else:
                logger.debug("tag not in use")
        else:
            logger.debug("not thinking about product")

        return super(TagResource, self).obj_update(
            bundle=bundle, request=request, **kwargs)

########NEW FILE########
__FILENAME__ = fixture_gen
"""Sample cases and suites fixture generator."""
from fixture_generator import fixture_generator

from ..core.auth import User
from ..core.models import Product

from .models import Tag


@fixture_generator(Tag, requires=["core.sample_products", "core.sample_users"])
def sample_tags():
    admin = User.objects.get(username="admin")
    manager = User.objects.get(username="manager")

    cc = Product.objects.get(name="MozTrap")

    Tag.objects.create(name="registration", product=cc, user=manager)

    Tag.objects.create(name="key", user=admin)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    depends_on = [
        ("core", "0001_initial"),
        ]

    def forwards(self, orm):

        # Adding model 'Tag'
        db.create_table('tags_tag', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 53, 13, 423086))),
            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2012, 1, 24, 0, 53, 13, 423296))),
            ('modified_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('deleted_on', self.gf('django.db.models.fields.DateTimeField')(db_index=True, null=True, blank=True)),
            ('deleted_by', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='+', null=True, to=orm['auth.User'])),
            ('name', self.gf('django.db.models.fields.CharField')(unique=True, max_length=100)),
            ('product', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['core.Product'], null=True, blank=True)),
        ))
        db.send_create_signal('tags', ['Tag'])


    def backwards(self, orm):

        # Deleting model 'Tag'
        db.delete_table('tags_tag')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'object_name': 'Product'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 53, 13, 429863)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 53, 13, 430049)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 53, 13, 427828)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 1, 24, 0, 53, 13, 428034)'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['tags']

########NEW FILE########
__FILENAME__ = 0002_auto__del_unique_tag_name
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Removing unique constraint on 'Tag', fields ['name']
        db.delete_unique('tags_tag', ['name'])


    def backwards(self, orm):

        # Adding unique constraint on 'Tag', fields ['name']
        db.create_unique('tags_tag', ['name'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 13, 20, 17, 4, 532722)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 13, 20, 17, 4, 532905)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'object_name': 'User', 'db_table': "'auth_user'", '_ormbases': ['auth.User'], 'proxy': 'True'}
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 13, 20, 17, 4, 528743)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 13, 20, 17, 4, 528941)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['tags']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_tag_cc_version
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'Tag.cc_version'
        db.add_column('tags_tag', 'cc_version', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)


    def backwards(self, orm):

        # Deleting field 'Tag.cc_version'
        db.delete_column('tags_tag', 'cc_version')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 7, 25507)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 7, 25691)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'object_name': 'User', 'db_table': "'auth_user'", '_ormbases': ['auth.User'], 'proxy': 'True'}
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 7, 21630)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 2, 25, 0, 1, 7, 21881)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['tags']

########NEW FILE########
__FILENAME__ = 0004_auto__chg_field_tag_modified_by__chg_field_tag_created_by__chg_field_t
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        pass

    def backwards(self, orm):
        pass

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 10, 18, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['tags']

########NEW FILE########
__FILENAME__ = 0005_auto__add_field_tag_description
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Tag.description'
        db.add_column('tags_tag', 'description',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Tag.description'
        db.delete_column('tags_tag', 'description')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 12, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 12, 17, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 12, 17, 0, 0)'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 12, 17, 0, 0)'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['tags']

########NEW FILE########
__FILENAME__ = 0006_auto__add_index_tag_name__add_index_tag_created_on__add_index_tag_modi
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding index on 'Tag', fields ['name']
        db.create_index('tags_tag', ['name'])

        # Adding index on 'Tag', fields ['created_on']
        db.create_index('tags_tag', ['created_on'])

        # Adding index on 'Tag', fields ['modified_on']
        db.create_index('tags_tag', ['modified_on'])


    def backwards(self, orm):
        # Removing index on 'Tag', fields ['modified_on']
        db.delete_index('tags_tag', ['modified_on'])

        # Removing index on 'Tag', fields ['created_on']
        db.delete_index('tags_tag', ['created_on'])

        # Removing index on 'Tag', fields ['name']
        db.delete_index('tags_tag', ['name'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'unique': 'True', 'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.product': {
            'Meta': {'ordering': "['name']", 'object_name': 'Product'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'has_team': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'own_team': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'tags.tag': {
            'Meta': {'object_name': 'Tag'},
            'cc_version': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'deleted_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'deleted_on': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_by': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'+'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']"}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 9, 6, 0, 0)', 'db_index': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'db_index': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Product']", 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['tags']
########NEW FILE########
__FILENAME__ = models
"""
Models for tags.

"""
from django.db import models

from ..mtmodel import MTModel
from ..core.models import Product



class Tag(MTModel):
    """A tag."""
    name = models.CharField(db_index=True, max_length=100)
    description = models.TextField(blank=True)

    # tags may be product-specific or global (in which case this FK is null)
    product = models.ForeignKey(Product, blank=True, null=True)

    # a tag may be considered a user-story
    # is_user_story = models.BooleanField(default=False)

    def __unicode__(self):
        """Unicode representation is name."""
        return self.name


    def clone(self, *args, **kwargs):
        """Clone tag; sets name prefix by default."""
        overrides = kwargs.setdefault("overrides", {})
        overrides.setdefault("name", "Cloned: {0}".format(self.name))
        return super(Tag, self).clone(*args, **kwargs)


    class Meta:
        permissions = [("manage_tags", "Can add/edit/delete tags.")]

########NEW FILE########
__FILENAME__ = base
"""
Default Django settings for MozTrap project.

"""
from os.path import dirname, join, abspath
from os import environ
import django.template

django.template.add_to_builtins('django.templatetags.future')

BASE_PATH = dirname(dirname(dirname(abspath(__file__))))

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = [
    ("Some One", "someone@mozilla.com"),
]

MANAGERS = ADMINS

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "moztrap",
        "USER": environ.get("USER", ""),
        "PASSWORD": "",
        "OPTIONS": {
            "init_command": "SET default_storage_engine=InnoDB",
            },
        "STORAGE_ENGINE": "InnoDB"
        }
    }

# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = None

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = "en-us"

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = False

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale
USE_L10N = False

# Absolute path to the directory that holds static files.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = join(BASE_PATH, "collected-assets")

# URL that handles the static files served from STATIC_ROOT.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = "/static/"

MEDIA_ROOT = join(BASE_PATH, "media")

MEDIA_URL = "/media/"

# A list of locations of additional static files
STATICFILES_DIRS = [join(BASE_PATH, "static")]

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
]

# Make this unique, and don"t share it with anybody.
SECRET_KEY = "override this"

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = [
    "django.template.loaders.filesystem.Loader",
    "django.template.loaders.app_directories.Loader",
]

TEMPLATE_CONTEXT_PROCESSORS = [
    "django.core.context_processors.request",
    "django.core.context_processors.media",
    "django.core.context_processors.static",
    "django.contrib.auth.context_processors.auth",
    "django.contrib.messages.context_processors.messages",
    "session_csrf.context_processor",
    "moztrap.view.users.context_processors.browserid",
]

MIDDLEWARE_CLASSES = [
    "django.middleware.common.CommonMiddleware",
    "djangosecure.middleware.SecurityMiddleware",
    "django.middleware.transaction.TransactionMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "session_csrf.CsrfMiddleware",
    "moztrap.view.users.middleware.SetUsernameMiddleware",
]

ROOT_URLCONF = "moztrap.view.urls"

TEMPLATE_DIRS = [
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don"t forget to use absolute paths, not relative paths.
    join(BASE_PATH, "templates"),
]

FIXTURE_DIRS = [
    join(BASE_PATH, "fixtures"),
    ]

DATE_FORMAT = "Y-m-d"

INSTALLED_APPS = [
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "django.contrib.admin",
    "django.contrib.humanize",
    "django_browserid",
    "south",
    "preferences",
    "moztrap.model.core",
    "moztrap.model.library",
    "moztrap.model.environments",
    "moztrap.model.execution",
    "moztrap.model.attachments",
    "moztrap.model.tags",
    "moztrap.view",
    "moztrap.view.lists",
    "moztrap.view.markup",
    "moztrap.view.manage",
    "moztrap.view.owa",
    "moztrap.view.results",
    "moztrap.view.runtests",
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

AUTHENTICATION_BACKENDS = [
    "moztrap.model.core.auth.ModelBackend",
    "moztrap.model.core.auth.BrowserIDBackend",
    ]

SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler"
        }
    },
    "loggers": {
        "django.request": {
            "handlers": ["mail_admins"],
            "level": "ERROR",
            "propagate": True,
        },
    }
}

INSTALLED_APPS += ["registration"]

ACCOUNT_ACTIVATION_DAYS = 1

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
DEFAULT_FROM_EMAIL = "do-not-reply@example.com"

INSTALLED_APPS += ["django_sha2"]

INSTALLED_APPS += ["compressor"]
COMPRESS_CSS_FILTERS = ["compressor.filters.css_default.CssAbsoluteFilter",
                        "compressor.filters.cssmin.CSSMinFilter"]

INSTALLED_APPS += ["floppyforms"]

INSTALLED_APPS += ["djangosecure"]
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 8 * 60 * 60  # 8 hours
SECURE_FRAME_DENY = True

MINIMUM_PASSWORD_CHARS = 8
PASSWORD_REQUIRE_ALPHA_NUMERIC = True
FORBIDDEN_PASSWORDS = [
    "password",
    "password1",
    "pass",
    "123",
    "test"
    ]  # @@@ get full list from InfraSec

ALLOW_ANONYMOUS_ACCESS = False

INSTALLED_APPS += ["icanhaz"]
ICANHAZ_DIRS = [join(BASE_PATH, "jstemplates")]

INSTALLED_APPS += ["html5accordion"]

INSTALLED_APPS += ["messages_ui"]
MIDDLEWARE_CLASSES.insert(
    MIDDLEWARE_CLASSES.index(
        "django.contrib.messages.middleware.MessageMiddleware"
        ) + 1,
    "messages_ui.middleware.AjaxMessagesMiddleware")

INSTALLED_APPS += ["ajax_loading_overlay"]

LOGIN_URL = "/users/login/"
LOGIN_REDIRECT_URL = "/"

TEST_RUNNER = "tests.runner.DiscoveryDjangoTestSuiteRunner"
TEST_DISCOVERY_ROOT = join(BASE_PATH, "tests")

SOUTH_MIGRATION_MODULES = {
    "preferences": "moztrap.model.migrations.preferences",
    }

SITE_URL = "http://localhost:8000"
BROWSERID_CREATE_USER = "moztrap.model.core.auth.browserid_create_user"

USE_BROWSERID = True

########NEW FILE########
__FILENAME__ = default
from .base import *

try:
    from .local import *
except ImportError:
    pass

CACHES["default"]["VERSION"] = 1

if DEBUG:
    MIDDLEWARE_CLASSES.insert(
        0, "moztrap.debug.middleware.AjaxTracebackMiddleware")

try:
    HMAC_KEYS
except NameError:
    HMAC_KEYS = {"default": SECRET_KEY}

# LOGGING["handlers"]["null"] = {
#     'level': 'DEBUG',
#     'class': 'django.utils.log.NullHandler',
#     }
#
# LOGGING["root"] = {"handlers": ["null"]}

########NEW FILE########
__FILENAME__ = local.sample
"""
Settings overrides for a particular deployment of this app. The defaults should
be suitable for local development; other settings below are likely to need
adjustment for a staging or production deployment.

Copy local.sample.py to local.py and modify as needed.

"""

# Database settings.
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         "NAME": "moztrap",
#         "USER": environ.get("USER", ""),
#         "HOST": "", # empty string == localhost
#         "PASSWORD": "",
#         "STORAGE_ENGINE": "InnoDB",
#         "OPTIONS": {
#                 "init_command": "SET default_storage_engine=InnoDB",
#             },
#         }
#     }

#DEBUG = False
#TEMPLATE_DEBUG = False

# This must be changed to the correct live deployment URL.
#SITE_URL = "http://localhost:8000"

# Uncomment this to use username/password logins instead of BrowserID/Persona.
#USE_BROWSERID = False

# This email address will get emailed on 500 server errors.
#ADMINS = [
#    ("Some One", "someone@mozilla.com"),
#]

# These must be uncommented and pointed to a functioning SMTP server or users
# will not be able to register.
#EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
#EMAIL_HOST = "localhost"
#EMAIL_HOST_USER = ""
#EMAIL_HOST_PASSWORD = ""
#EMAIL_PORT = 25
#EMAIL_USE_TLS = False
# Account activation and password reset emails will come from this address
#DEFAULT_FROM_EMAIL = "do-not-reply@example.com"

# Uncomment these if the app is served over HTTPS (required for any
# production deployment to avoid session hijacking):
#SESSION_COOKIE_SECURE = True
# http://en.wikipedia.org/wiki/Strict_Transport_Security
#SECURE_HSTS_SECONDS = 86400

# A unique (and secret) key for this deployment.
#SECRET_KEY = "replace this with some random characters"

# A dictionary of shared keys for use in password hashing. Must not be empty.
# The keys in this dictionary are arbitrary string identifiers, the value is
# the HMAC shared key (which can be any random string). The shared key used for
# hashing new passwords will be the one associated with whichever identifier
# evaluates as lexicographically "last"; thus using dates in YYYY-MM-DD format
# as the identifier is natural. Any shared key found in this dictionary is
# available for use when checking passwords; thus if you remove any shared key
# from this dictionary (or change its identifier), any passwords hashed with
# that key will no longer be usable.
#HMAC_KEYS = {
#    "2011-12-13": "replace this with some random characters"
#}

# Absolute path to directory where static assets will be collected by the
# "collectstatic" management command, and can be served by front-end webserver.
# Defaults to absolute filesystem path to "collected-assets/" directory.
#STATIC_ROOT = ""

# Base URL where files in STATIC_ROOT are deployed. Defaults to "/static/".
#STATIC_URL = ""

# Absolute path to directory where user-uploaded files (attachments) will be
# stored. Defaults to absolute filesystem path to "media/" directory.
#MEDIA_ROOT = ""

# Base URL where user-uploaded files will be served. In production mode,
# MozTrap will not serve these files; the front-end webserver must be
# configured to serve the files at ``MEDIA_ROOT`` at this URL. Defaults to
# "/media/".
#MEDIA_URL = ""

# If user-uploaded files should not be stored on the local filesystem, set this
# to the dotted path to a custom Django file storage backend, such as the
# Amazon S3 backend included in django-storages
# (http://code.welldev.org/django-storages/). See the Django file storage
# backend documentation: https://docs.djangoproject.com/en/dev/topics/files/
#DEFAULT_FILE_STORAGE = ""

# Causes CSS/JS to be served in a single combined, minified file, with a name
# based on contents hash (thus can be safely far-futures-expired). With the
# below two settings uncommented, run "python manage.py collectstatic" followed
# by "python manage.py compress": the contents of ``STATIC_ROOT`` can then be
# deployed into production.
#COMPRESS_ENABLED = True
#COMPRESS_OFFLINE = True

# Uncomment this (and modify LOCATION appropriately) to use memcached rather
# than local-memory cache. This (or some other out-of-process cache backend) is
# required if running MozTrap under a multi-process webserver such as
# Apache/mod_wsgi. See http://docs.djangoproject.com/en/dev/topics/cache/ for
# more configuration options. For faster caching, install pylibmc in place of
# python-memcached and replace MemcachedCache with PyLibMCCache.
#CACHES = {
#    "default": {
#        "BACKEND": "django.core.cache.backends.memcached.MemcachedCache",
#        "LOCATION": "127.0.0.1:11211",
#        "KEY_PREFIX": "", # add a global key prefix here if necessary
#    }
#}

# if DEBUG:
    # LOGGING["handlers"]["console"] = {
    #     "level": "DEBUG",
    #     "class": "logging.StreamHandler",
    #     }

    # LOGGING["root"] = {"handlers": ["console"]}

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import patterns, url, include

from tastypie.api import Api

from moztrap.model.core import api as core
from moztrap.model.environments import api as environments
from moztrap.model.execution import api as execution
from moztrap.model.library import api as library
from moztrap.model.tags import api as tags
from moztrap.model import API_VERSION


v1_api = Api(api_name=API_VERSION)

v1_api.register(execution.RunResource())
v1_api.register(execution.RunCaseVersionResource())
v1_api.register(execution.RunSuiteResource())
v1_api.register(execution.ResultResource())
v1_api.register(execution.SuiteSelectionResource())
v1_api.register(library.CaseResource())
v1_api.register(library.CaseVersionResource())
v1_api.register(library.CaseStepResource())
v1_api.register(library.SuiteResource())
v1_api.register(library.CaseSelectionResource())
v1_api.register(library.SuiteCaseResource())
v1_api.register(library.CaseVersionSelectionResource())
v1_api.register(environments.ProfileResource())
v1_api.register(environments.EnvironmentResource())
v1_api.register(environments.ElementResource())
v1_api.register(environments.CategoryResource())
v1_api.register(core.UserResource())
v1_api.register(core.ProductResource())
v1_api.register(core.ProductVersionResource())
v1_api.register(core.ProductVersionEnvironmentsResource())
v1_api.register(tags.TagResource())

urlpatterns = patterns(
    "moztrap.view.api",
    url(r"", include(v1_api.urls)),
)

########NEW FILE########
__FILENAME__ = filters
"""
List filtering options.

"""
from model_utils import Choices
from moztrap import model

from .lists import filters
from .lists import cases



class ProductFilterSet(filters.FilterSet):
    """FilterSet for Products."""
    filters = [
        filters.KeywordFilter("name"),
        filters.ModelFilter(
            "creator",
            lookup="created_by",
            queryset=model.User.objects.all().order_by("username")),
        ]



class ProductVersionFilterSet(filters.FilterSet):
    """FilterSet for Product versions."""
    filters = [
        filters.ModelFilter(
            "product",
            queryset=model.Product.objects.all().order_by("name")
            ),
        filters.KeywordFilter("version"),
        filters.KeywordFilter("codename"),
        filters.ModelFilter(
            "creator",
            lookup="created_by",
            queryset=model.User.objects.all().order_by("username")),
        filters.ModelFilter(
            "environment element",
            lookup="environments__elements",
            key="envelement",
            queryset=model.Element.objects.all().order_by("name"),
            switchable=True),
        ]



class RunFilterSet(filters.FilterSet):
    """FilterSet for runs."""
    filters = [
        filters.ChoicesFilter("status", choices=sorted(model.Run.STATUS)),
        filters.ModelFilter(
            "product",
            lookup="productversion__product",
            queryset=model.Product.objects.all().order_by("name")),
        filters.ModelFilter(
            "productversion",
            queryset=model.ProductVersion.objects.all().order_by(
                "product__name", "version").select_related()),
        filters.KeywordFilter("name"),
        filters.KeywordFilter("description"),
        filters.ModelFilter(
            "suite",
            lookup="suites",
            queryset=model.Suite.objects.all().order_by("name"),
            switchable=True),
        filters.KeywordExactFilter(
            "case id", lookup="suites__cases__id", key="case", coerce=int),
        filters.ModelFilter(
            "creator",
            lookup="created_by",
            queryset=model.User.objects.all().order_by("username"),
            ),
        filters.ModelFilter(
            "environment element",
            lookup="environments__elements",
            key="envelement",
            queryset=model.Element.objects.all().order_by("name"),
            switchable=True),
        filters.ChoicesFilter(
            "is Series",
            lookup="is_series",
            key="is_series",
            choices=[(1, "series"), (0, "individual")],
            coerce=int,
            ),
        filters.ModelFilter(
            "members of series",
            lookup="series",
            queryset=model.Run.objects.filter(is_series=True).order_by("name")
            ),
        filters.KeywordExactFilter("build"),
        ]



class RunCaseVersionFilterSet(filters.FilterSet):
    """FilterSet for RunCaseVersions."""
    filters = [
        filters.ChoicesFilter(
            "status",
            lookup="caseversion__status",
            choices=sorted(model.CaseVersion.STATUS)),
        filters.ChoicesFilter(
            "result status",
            key="resultstatus",
            lookup="results__status",
            extra_filters={"results__is_latest": True},
            choices=sorted(Choices(*model.Result.COMPLETED_STATES)),
            ),
        filters.KeywordExactFilter(
            "id", lookup="caseversion__case__id", coerce=int),
        filters.KeywordFilter("name", lookup="caseversion__name"),
        filters.KeywordFilter("description", lookup="caseversion__description"),
        filters.ChoicesFilter(
            "priority",
            lookup="caseversion__case__priority",
            choices=Choices(1, 2, 3, 4),
            coerce=int,
            ),
        filters.ModelFilter(
            "tag",
            lookup="caseversion__tags",
            queryset=model.Tag.objects.all().order_by("name"),
            switchable=True
            ),
        filters.ModelFilter(
            "product",
            lookup="caseversion__case__product",
            queryset=model.Product.objects.all().order_by("name"),
            ),
        filters.ModelFilter(
            "run",
            queryset=model.Run.objects.all().order_by("name"),
            ),
        filters.ModelFilter(
            "product version",
            lookup="run__productversion",
            key="productversion",
            queryset=model.ProductVersion.objects.all().order_by(
                "product__name", "version")),
        filters.KeywordFilter(
            "instruction", lookup="caseversion__steps__instruction"),
        filters.KeywordFilter(
            "expected result",
            lookup="caseversion__steps__expected",
            key="expected"),
        filters.ModelFilter(
            "creator",
            lookup="caseversion__created_by",
            queryset=model.User.objects.all().order_by("username")),
        filters.ModelFilter(
            "environment element",
            lookup="environments__elements",
            key="envelement",
            queryset=model.Element.objects.all().order_by("name"),
            switchable=True),
        filters.ModelFilter(
            "suite",
            lookup="caseversion__case__suites",
            queryset=model.Suite.objects.all().order_by("name"),
            switchable=True),
        filters.ModelFilter(
            "tester",
            lookup="results__tester",
            queryset=model.User.objects.all().order_by("username"),
            ),
        ]



class RunTestsRunCaseVersionFilterSet(filters.FilterSet):
    """FilterSet for RunCaseVersions while running tests."""
    filters = [
        filters.KeywordExactFilter(
            "id", lookup="caseversion__case__id", coerce=int),
        filters.KeywordFilter("name", lookup="caseversion__name"),
        filters.KeywordFilter("description", lookup="caseversion__description"),
        filters.ChoicesFilter(
            "priority",
            lookup="caseversion__case__priority",
            choices=Choices(1, 2, 3, 4),
            coerce=int,
            ),
        filters.ModelFilter(
            "tag",
            lookup="caseversion__tags",
            queryset=model.Tag.objects.all().order_by("name"),
            switchable=True),
        filters.KeywordFilter(
            "instruction", lookup="caseversion__steps__instruction"),
        filters.KeywordFilter(
            "expected result",
            lookup="caseversion__steps__expected",
            key="expected"),
        filters.ModelFilter(
            "creator",
            lookup="caseversion__created_by",
            queryset=model.User.objects.all().order_by("username")),
        filters.ModelFilter(
            "suite",
            lookup="caseversion__case__suites",
            queryset=model.Suite.objects.all().order_by("name"),
            switchable=True),
        ]



class ResultFilterSet(filters.FilterSet):
    """FilterSet for results."""
    filters = [
        filters.ChoicesFilter("status", choices=sorted(model.Result.STATUS)),
        filters.ModelFilter(
            "tester",
            queryset=model.User.objects.all().order_by("username"),
            ),
        filters.KeywordFilter("comment"),
        filters.ModelFilter(
            "environment element",
            lookup="environment__elements",
            key="envelement",
            queryset=model.Element.objects.all().order_by("name"),
            switchable=True),
        ]



class SuiteFilterSet(filters.FilterSet):
    """FilterSet for suites."""
    filters = [
        filters.ChoicesFilter("status", choices=sorted(model.Suite.STATUS)),
        filters.ModelFilter(
            "product",
            queryset=model.Product.objects.all().order_by("name"),
            ),
        filters.ModelFilter(
            "product version",
            lookup="product__versions",
            key="productversion",
            queryset=model.ProductVersion.objects.all().order_by(
                "product__name", "version"),
            ),
        filters.ModelFilter(
            "run",
            lookup="runs",
            queryset=model.Run.objects.all().order_by("name"),
            switchable=True
            ),
        filters.KeywordFilter("name"),
        filters.KeywordFilter("description"),
        filters.KeywordExactFilter(
            "case id", lookup="cases__id", key="case", coerce=int),
        filters.ModelFilter(
            "creator",
            lookup="created_by",
            queryset=model.User.objects.all().order_by("username")),
        ]



class CaseVersionFilterSet(filters.FilterSet):
    """FilterSet for CaseVersions."""

    filters = [
        filters.ChoicesFilter(
            "status",
            choices=sorted(model.CaseVersion.STATUS),
            ),
        cases.PrefixIDFilter("id"),
        filters.ChoicesFilter(
            "priority",
            lookup="case__priority",
            choices=Choices(1, 2, 3, 4),
            coerce=int,
            ),
        filters.KeywordFilter("name"),
        filters.KeywordFilter("description"),
        filters.ModelFilter(
            "tag",
            lookup="tags",
            queryset=model.Tag.objects.all().order_by("name"),
            switchable=True
            ),
        filters.ModelFilter(
            "product",
            lookup="case__product",
            queryset=model.Product.objects.all().order_by("name")),
        filters.ModelFilter(
            "product version",
            lookup="productversion",
            key="productversion",
            queryset=model.ProductVersion.objects.all().order_by(
                "product__name", "version").select_related()),
        filters.KeywordFilter("instruction", lookup="steps__instruction"),
        filters.KeywordFilter(
            "expected result",
            lookup="steps__expected",
            key="expected"),
        filters.ModelFilter(
            "creator",
            lookup="created_by",
            queryset=model.User.objects.all().order_by("username")),
        filters.ModelFilter(
            "environment element",
            lookup="environments__elements",
            key="envelement",
            queryset=model.Element.objects.all().order_by("name"),
            switchable=True),
        filters.ModelFilter(
            "suite",
            lookup="case__suites",
            queryset=model.Suite.objects.all().order_by("name"),
            switchable=True),
        ]



class TagFilterSet(filters.FilterSet):
    """FilterSet for Tags."""
    filters = [
        filters.KeywordFilter("name"),
        filters.ModelFilter(
            "product",
            queryset=model.Product.objects.all().order_by("name"),
            ),
        filters.ModelFilter(
            "product version",
            lookup="product__versions",
            key="productversion",
            queryset=model.ProductVersion.objects.select_related(
                "product").order_by(
                    "product__name", "version"),
            ),
        filters.ModelFilter(
            "creator",
            lookup="created_by",
            queryset=model.User.objects.all().order_by("username"),
            ),
        ]



class ProfileFilterSet(filters.FilterSet):
    """FilterSet for environment Profiles."""
    filters = [
        filters.KeywordFilter("name"),
        filters.ModelFilter(
            "environment element",
            lookup="environments__elements",
            key="envelement",
            queryset=model.Element.objects.all().order_by("name")),
        filters.ModelFilter(
            "creator",
            lookup="created_by",
            queryset=model.User.objects.all().order_by("username"),
            ),
        ]



class EnvironmentFilterSet(filters.FilterSet):
    """FilterSet for Environments."""
    filters = [
        filters.ModelFilter(
            "environment element",
            lookup="elements",
            key="envelement",
            queryset=model.Element.objects.all().order_by("name"),
            switchable=True
            ),
        ]

########NEW FILE########
__FILENAME__ = actions
"""
Actions-handling for manage list pages.

"""
from functools import wraps

from django.http import HttpResponseForbidden
from django.shortcuts import redirect



def actions(model, allowed_actions, permission=None, fall_through=False):
    """
    View decorator for handling single-model actions on manage list pages.

    Handles any POST keys named "action-method", where "method" must be in
    ``allowed_actions``. The value of the key should be an ID of a ``model``,
    and "method" will be called on it, with any errors handled.

    By default, any "POST" request will be redirected back to the same URL
    (unless it's an AJAX request, in which case it sets the request method to
    GET and clears POST data, which has a similar effect without actually doing
    a redirect). If ``fall_through`` is set to True, the redirect/method-switch
    will only occur if an action was found in the POST data (allowing this
    decorator to be used with views that also do normal non-actions form
    handling.)

    """
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            if request.method == "POST":
                action_taken = False
                action_data = get_action(request.POST)
                if action_data:
                    action, obj_id = action_data
                    if action in allowed_actions:
                        if permission and not request.user.has_perm(permission):
                            return HttpResponseForbidden(
                                "You do not have permission for this action.")
                        try:
                            obj = model._base_manager.get(pk=obj_id)
                        except model.DoesNotExist:
                            pass
                        else:
                            getattr(obj, action)(user=request.user)
                            action_taken = True
                if action_taken or not fall_through:
                    if request.is_ajax():
                        request.method = "GET"
                        request.POST = {}
                    else:
                        return redirect(request.get_full_path())
            return view_func(request, *args, **kwargs)

        return _wrapped_view

    return decorator



def get_action(post_data):
    """
    Given a request.POST including e.g. {"action-delete": "3"}, return
    ("delete", "3"). Doesn't care about the value, just looks for POST keys
    beginning with "action-". Returns None if no action found.

    If multiple actions are found, returns only the first.

    """
    actions = [
        (k[len("action-"):], v) for k, v in post_data.iteritems()
        if k.startswith("action-")
        ]
    if actions:
        return actions[0]
    return None

########NEW FILE########
__FILENAME__ = cases
from filters import KeywordFilter
from django.db.models import Q


class PrefixIDFilter(KeywordFilter):
    """
    A string and an int, separated by a delimiter.
    Values are split by the right-most occurrence of delimiter and ANDed
    across prefix and ID.  Must match exactly the prefix or the ID, or both, if
    both are provided.

    if more than one of these filters is used, they are ORed with each other.
    """
    is_default_and = False


    def __init__(self, name, delimiter="-"):
        self.prefixlookup = "case__idprefix"
        self.delimiter = delimiter
        super(PrefixIDFilter, self).__init__(name, lookup="case__id",
            switchable=False)


    def filter(self, queryset, values):

        query_filters = Q()

        for value in values:

            # split the prefix from the id
            try:
                prefix, sep, caseid = value.rpartition(self.delimiter)
            except AttributeError:
                prefix = None
                caseid = value


            # if there is a prefix of abc-xyz, then we don't want to
            # try searching in the int field for xyz, presume it's all
            # the prefix, as the suffix MUST always be numeric.
            # also, if the user put the delimiter at the end, strip it off
            if not isinstance(caseid, int) and not caseid.isdecimal():
                prefix = value.rstrip(self.delimiter)
                caseid = None

            kwargs = {}

            if prefix:
                kwargs["{0}__exact".format(self.prefixlookup)] = prefix
            if caseid:
                kwargs["{0}__exact".format(self.lookup)] = caseid

            query_filters = query_filters | Q(**kwargs)

        if values:
            return queryset.filter(query_filters).distinct()

        return queryset

########NEW FILE########
__FILENAME__ = decorators
"""
Decorators for list views.

"""
from .actions import actions
from .filters import filter
from .finder import finder
from .sort import sort

########NEW FILE########
__FILENAME__ = filters
"""
Utilities for filtering querysets in a view.

"""

from collections import namedtuple
from functools import wraps
import json
import urlparse
import operator

from django.core.urlresolvers import reverse, resolve
from django.utils.datastructures import MultiValueDict
from django.db.models import Q



def filter_url(path_or_view, obj):
    """
    Return URL for ``path_or_view`` filtered by ``obj``.

    ``path_or_view`` should be a URL path, a view function, or a url pattern
    name resolvable without arguments, and ``obj`` should be an instance of a
    model for which there is a ``ModelFilter`` applied to that view.

    For instance, ``filter_url("manage_cases", product)`` would return the URL
    for viewing the manage list of cases, filtered by ``product``.

    """
    if callable(path_or_view):
        view_func = path_or_view
        path = reverse(view_func)
    else:
        if path_or_view.startswith("/"):
            path = path_or_view
        else:
            path = reverse(path_or_view)

        view_func = resolve(path).func

    params = view_func.filterset.params_for(obj)

    return "{0}?{1}".format(
        path,
        "&".join(["{0}={1}".format(k, v) for k, v in params.items()])
        )



def filter(ctx_name, filters=None, filterset_class=None):
    """
    View decorator that handles filtering of a queryset.

    Expects to find the queryset in the TemplateResponse context under the name
    ``ctx_name``. Optional ``filters`` argument should be an iterable of Filter
    instances, and ``filterset_class`` is an optional FilterSet subclass to
    use.

    """
    if filters is None:
        filters = []
    if filterset_class is None:
        filterset_class = FilterSet
    filterset = filterset_class(filters)

    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            response = view_func(request, *args, **kwargs)
            try:
                ctx = response.context_data
            except AttributeError:
                return response
            bfs = filterset.bind(request.GET, request.COOKIES)
            ctx[ctx_name] = bfs.filter(ctx[ctx_name])
            ctx["filters"] = bfs
            return response

        # annotate wrapped view with filterset
        # for introspection by e.g. filter_url
        _wrapped_view.filterset = filterset

        return _wrapped_view

    return decorator



class BoundFilterSet(object):
    """A FilterSet plus actual filtering data."""
    def __init__(self, filterset, data=None):
        """
        Initialize a BoundFilterSet.

        ``filterset`` is the FilterSet instance that provides the filters;
        ``data`` is a dictionary mapping filter keys to lists of values.

        """
        self.data = data or {}
        self.filterset = filterset
        self.filters = self.filterset.filters
        self.boundfilters = [BoundFilter(f, self.data) for f in self.filters]


    def __iter__(self):
        """Iteration yields BoundFilters."""
        for f in self.boundfilters:
            yield f


    def __len__(self):
        """Length is number of member filters."""
        return len(self.boundfilters)


    def filter(self, queryset):
        """Return ``queryset`` filtered by current values of our filters."""
        for boundfilter in self.boundfilters:
            queryset = boundfilter.filter(queryset)
        return queryset



class PinnedFilters(object):
    """An object to manage pinned filters saved as cookies in the session."""

    def __init__(self, COOKIES):
        self.cookie_prefix = "moztrap-filter-"
        self.cookies = {}
        if COOKIES:
            for k in COOKIES.keys():
                if k.startswith(self.cookie_prefix):
                    filter_key = k[len(self.cookie_prefix):]
                    pinned_filters = json.loads(
                        urlparse.unquote(COOKIES.get(k)))
                    self.cookies[filter_key] = pinned_filters


    def extend_filters(self, filters):
        # pinned filters are stored in session cookies.  Add them to the list
        # of other filters in the querystring.
        for k, v in self.cookies.items():
            filters.setdefault(k, []).extend(v)
        return filters


    def fill_form_querystring(self, GET):
        # pinned filters are stored in session cookies.  Fill in, if not
        # already set.  Don't want to overwrite or add to existing values
        # and only if there's a single matching cookie value
        new_filters = GET.copy()
        for k, v in self.cookies.items():
            if not k in new_filters and len(v) == 1:
                new_filters[k] = v[0]
        return new_filters



class FilterSet(object):
    """A set of possible filters on a queryset."""
    # subclasses can have preset filters
    filters = []

    bound_class = BoundFilterSet


    def __init__(self, filters=None, prefix="filter-"):
        """
        Initialize a FilterSet.

        ``filters`` is an optional iterable of additional Filter instances.

        """
        if filters:
            self.filters = self.filters[:]
            self.filters.extend(filters)
        self.prefix = prefix


    def bind(self, GET=None, COOKIES=None):
        """
        Return BoundFilterSet (or subclass) for given filter data.

         ``GET`` is a MultiValueDict that may contain filtering keys; usually
        request.GET from the current request. Keys not beginning with
        ``self.prefix``` will be ignored.

        """
        GET = GET or MultiValueDict()

        query_filters = dict(
            (k[len(self.prefix):], GET.getlist(k)) for k in GET.keys()
            if k.startswith(self.prefix)
            )

        # pinned filters are stored in session cookies.  Add them to the list
        # of other filters in the querystring.
        if COOKIES:
            PinnedFilters(COOKIES).extend_filters(query_filters)

        return self.bound_class(
            self,
            query_filters,
            )


    def __iter__(self):
        """Iteration yields filters."""
        return iter(self.filters)


    def params_for(self, obj):
        """
        Return dict; querystring parameters to filter for ``obj``.

        Only useful if filterset contains a ModelFilter for ``obj``'s class,
        otherwise will return empty dict.

        """
        for flt in self.filters:
            qs = getattr(flt, "queryset", None)
            if qs is not None:
                if isinstance(obj, qs.model):
                    return {"{0}{1}".format(self.prefix, flt.key): obj.pk}

        return {}



FilterOption = namedtuple("FilterOption", ["value", "label", "selected"])



class BoundFilter(object):
    """A Filter plus specific filtering values from the request."""
    def __init__(self, flt, data):
        """``flt`` is a Filter instance, ``data`` is a dict of filter data."""
        self._filter = flt
        self.data = data

        # list of valid selected option values
        self.values = self._filter.values(self.data)

        value_set = set(self.values)
        self.options = [
            FilterOption(
                value=val, label=label, selected=(val in value_set))
            for val, label in self._filter.options(self.values)]


    def filter(self, queryset):
        """Return filtered queryset."""
        return self._filter.filter(queryset, self.values)


    @property
    def cls(self):
        """Pass-through to Filter cls."""
        return self._filter.cls


    @property
    def switchable(self):
        """Pass-through to Filter switchable."""
        return self._filter.switchable


    @property
    def toggle(self):
        """Pass-through to Filter toggle."""
        return self._filter.toggle


    @property
    def is_default_and(self):
        """Pass-through to Filter is_default_and."""
        return self._filter.is_default_and


    @property
    def name(self):
        """Pass-through to Filter name."""
        return self._filter.name


    @property
    def key(self):
        """Pass-through to Filter key."""
        return self._filter.key


    def __iter__(self):
        """Yields FilterOption objects when iterated."""
        return iter(self.options)


    def __len__(self):
        return len(self.options)



class Filter(object):
    """Encapsulates the filtering possibilities for a single field."""
    # A filter-type class; for use in CSS styling of the filter input
    cls = ""
    # Default filtering logic; True for "AND", False for "OR"
    is_default_and = False
    # switch OR(AND) to AND(OR) filtering
    toggle = False


    def __init__(self, name, lookup=None, key=None, coerce=None,
        extra_filters=None, switchable=False):
        """
        Instantiate the Filter.

        ``name`` is the public name of the filter, ``lookup`` is the field used
        for filtering a queryset, and ``key`` is the key under which data for
        this filter is found in the provided filter data. Both ``lookup`` and
        ``key`` default to ``name`` if not provided. ``coerce`` is a
        one-argument function to coerce values to the correct type for this
        filter; it may raise ValueError or TypeError.
        ``extra_filters`` is a dict containing any extra filters that should be
        attached to this filter.  For example, you might want to add
        ``is_latest`` to a ``result status`` filter.

        """
        self.name = name
        self.lookup = name if lookup is None else lookup
        self.key = name if key is None else key
        self.extra_filters = {} if extra_filters is None else extra_filters
        self._coerce_func = coerce
        self.switchable = switchable


    def filter(self, queryset, values):
        """Given queryset and selected values, return filtered queryset."""
        if values:
            if self.toggle:
                for value in values:
                    queryset = queryset.filter(**{"{0}__in".format(self.lookup): [value]})
                queryset = queryset.filter(**self.extra_filters)
            else:
                filters = {"{0}__in".format(self.lookup): values}
                filters.update(self.extra_filters)
                queryset = queryset.filter(**filters)

            return queryset.distinct()

        return queryset


    def options(self, values):
        """Given list of selected values, return options to display."""
        return []


    def values(self, data):
        """Given data dict, return list of selected values."""
        if self.switchable:
            self.toggle = True if data.get(self.key+'-switch', None) else False
        return [v for v in map(self.coerce, data.get(self.key, []))]


    def coerce(self, value):
        """
        Coerce a string value to the value type of this Filter's options.

        For instance, a related-field-lookup filter might have integer object
        IDs as option values, and would coerce all incoming filter values to
        integers.

        Should return None if a value cannot be coerced.

        """
        if self._coerce_func is None:
            return value
        try:
            return self._coerce_func(value)
        except (ValueError, TypeError):
            return None



class BaseChoicesFilter(Filter):
    """A Filter with a fixed set of choices."""
    def get_choices(self):
        """Return this filter's choices, a list of (value, label) tuples."""
        return []


    def options(self, values):
        """Given list of selected values, return options to display."""
        return self.get_choices()


    def values(self, data):
        """Given data dict, return list of selected values."""
        choice_values = set([k for k, v in self.get_choices()])
        return [
            v for v in
            super(BaseChoicesFilter, self).values(data)
            if v is not None and v in choice_values
            ]



class ChoicesFilter(BaseChoicesFilter):
    """A filter whose choices are passed in at instantiation."""
    def __init__(self, *args, **kwargs):
        """Looks for ``choices`` kwarg."""
        choices = kwargs.pop("choices")
        super(ChoicesFilter, self).__init__(*args, **kwargs)
        self._choices = choices


    def get_choices(self):
        """Return the passed-in choices."""
        return self._choices



class ModelFilter(BaseChoicesFilter):
    """
    A Filter whose choices are from a provided iterable of model instances.

    By default, assumes the model has a numeric primary key; if not an
    alternative ``coerce`` function should be provided at instantiation.

    """


    def __init__(self, *args, **kwargs):
        """
        Looks for ``queryset`` and ``label`` keyword arguments.

        ``queryset`` should contain the model instances that are the options
        available for this filter; ``label`` is an optional one-argument
        callable that returns the display label for each object, given the
        object.

        """
        self.queryset = kwargs.pop("queryset")
        self.label_func = kwargs.pop("label", lambda o: unicode(o))
        self._opts = None
        kwargs.setdefault("coerce", int)
        super(ModelFilter, self).__init__(*args, **kwargs)


    def options(self, values):
        """Given list of selected values, return options to display."""
        return self._opts


    def get_choices(self):
        """Get the options for this filter."""
        # always clone to get new data; filter instances are persistent
        self._opts = [(obj.pk, self.label_func(obj)) for obj in self.queryset.all()]
        return self._opts



class KeywordExactFilter(Filter):
    """Allows user to input arbitrary filter values; no pre-set options list."""
    cls = "keyword"


    def __init__(self, *args, **kwargs):
        if kwargs.get("switchable") is None:
            kwargs.setdefault("switchable", True)
        super(KeywordExactFilter, self).__init__(*args, **kwargs)


    def options(self, values):
        """Options displayed are always the current filter values."""
        return [(v, v) for v in values]



class KeywordFilter(KeywordExactFilter):
    """Values are ANDed in a 'contains' search of the field"""
    is_default_and = True


    def filter(self, queryset, values):
        """Values are ANDed in a 'contains' search of the field text."""
        if values:
            filters = Q()
            op_func = operator.__or__ if self.toggle else operator.__and__

            for value in values:
                filters = op_func(filters, Q(**{"{0}__icontains".format(self.lookup): value}))

            return queryset.filter(filters).distinct()

        return queryset

########NEW FILE########
__FILENAME__ = finder
"""
Finder; a multi-column hierarchical object navigator.

"""
from functools import wraps
import posixpath

from django.db import models
from django.shortcuts import render

from .filters import filter_url



def finder(finder_cls):
    """
    View decorator that takes care of everything needed to render a finder on
    the rendered page.

    """
    def decorator(view_func):
        finder = finder_cls()

        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            if request.is_ajax() and request.GET.get("finder"):
                col_name = request.GET["col"]
                return render(
                    request,
                    finder.column_template(col_name),
                    {
                        "colname": col_name,
                        "finder": {
                            "finder": finder,
                            col_name: finder.objects(
                                col_name, request.GET["id"])
                            },
                        }
                    )
            response = view_func(request, *args, **kwargs)
            try:
                ctx = response.context_data
            except AttributeError:
                return response
            top_col = finder.columns[0]
            finder_ctx = ctx.setdefault("finder", {})
            finder_ctx.update(
                {
                    "finder": finder,
                    top_col.name: finder.objects(top_col.name)
                    }
                )
            return response

        return _wrapped_view

    return decorator



class Finder(object):
    """A multi-column hierarchical object navigator."""
    # The template directory under which templates for this finder live.
    template_base = ""
    # A list of Column instances for this finder.
    columns = []


    def __init__(self):
        """Initialize a Finder."""
        self.columns_by_name = dict((c.name, c) for c in self.columns)
        self.parent_columns = dict(
            zip([c.name for c in self.columns[1:]], self.columns[:-1])
            )
        self.child_columns = dict(
            zip([c.name for c in self.columns[:-1]], self.columns[1:])
            )
        self.columns_by_model = dict((c.model, c) for c in self.columns)


    def column_template(self, column_name):
        """Returns template name for rendering objects in given column."""
        col = self._get_column_by_name(column_name)
        return posixpath.join(self.template_base, col.template_name)


    def goto_url(self, obj):
        """Given an object, return its "Goto" url, or None."""
        try:
            col = self.columns_by_model[obj.__class__]
        except KeyError:
            return None

        return col.goto_url(obj)


    def child_column_for_obj(self, obj):
        """Given an object, return name of its child column, or None."""
        try:
            col = self.columns_by_model[obj.__class__]
            return self.child_columns[col.name].name
        except KeyError:
            return None


    def child_query_url(self, obj):
        """Given an object, return URL for ajax query to fetch child objects."""
        child_col = self.child_column_for_obj(obj)
        if child_col is not None:
            return "?finder=1&col=%s&id=%s" % (child_col, obj.id)
        return None


    def objects(self, column_name, parent=None):
        """
        Given a column name, return the list of objects.

        If a parent is given and there is a parent column, filter the list by
        that parent.

        """
        col = self._get_column_by_name(column_name)
        ret = col.objects()
        if parent is not None:
            try:
                parent_col = self.parent_columns[col.name]
            except KeyError:
                raise ValueError(
                    "Column {0} has no parent.".format(column_name))

            opts = col.model._meta

            attr = None
            for field in [
                    f for f in opts.fields if isinstance(f, models.ForeignKey)
                    ] + opts.many_to_many:
                if field.rel.to is parent_col.model:
                    attr = field.name
                    break

            if attr is None:
                try:
                    attr = [
                        r.get_accessor_name()
                        for r in opts.get_all_related_many_to_many_objects()
                        if r.model is parent_col.model
                        ][0]
                except IndexError:
                    raise ValueError(
                        "Cannot find relationship from {0} to {1}".format(
                            col.model, parent_col.model))

            ret = ret.filter(**{attr: parent})
        return ret


    def _get_column_by_name(self, column_name):
        try:
            return self.columns_by_name[column_name]
        except KeyError:
            raise ValueError("Column %r does not exist." % column_name)




class Column(object):
    def __init__(self, name, template_name, queryset, goto=None):
        self.name = name
        self.template_name = template_name
        self.model = queryset.model
        self.queryset = queryset
        self.goto = goto


    def objects(self):
        """Return objects to display in this column."""
        return self.queryset.all()


    def goto_url(self, obj):
        """Given an object, return its "Goto" url, or None."""
        if self.goto:
            return filter_url(self.goto, obj)

        return None

########NEW FILE########
__FILENAME__ = pagination
"""
List pagination utilities.

"""
import math
from django.db.utils import DatabaseError
from ..utils.querystring import update_querystring



PAGESIZES = [10, 20, 50, 100]
DEFAULT_PAGESIZE = 20



def from_request(request):
    """
    Given a request, return tuple (pagesize, pagenumber).

    """
    default_pagesize = positive_integer(
        request.COOKIES.get("moztrap-pagesize", DEFAULT_PAGESIZE),
        DEFAULT_PAGESIZE)
    pagesize = positive_integer(
        request.GET.get("pagesize", default_pagesize), default_pagesize)
    pagenumber = positive_integer(
        request.GET.get("pagenumber", 1), 1)
    return pagesize, pagenumber



def pagesize_url(url, pagesize):
    return update_querystring(url, pagesize=pagesize, pagenumber=1)



def pagenumber_url(url, pagenumber):
    return update_querystring(url, pagenumber=pagenumber)



class Pager(object):
    """Handles pagination given queryset, page size, and page number."""
    def __init__(self, queryset, pagesize, pagenumber):
        """Initialize a ``Pager`` with queryset, page size, and page number."""
        self._queryset = queryset
        self._sliced_qs = None
        self._cached_total = None
        self.pagesize = pagesize
        self.pagenumber = pagenumber


    def sizes(self):
        """
        Returns an ordered list of pagesize links to display.

        Includes all default page sizes, plus the current page size.

        """
        return sorted(set(PAGESIZES + [self.pagesize]))


    def pages(self):
        """Returns an iterable of valid page numbers."""
        return xrange(1, self.num_pages + 1)


    def display_pages(self):
        """
        Returns an iterable of page numbers to display.

        Elides some ranges of page numbers with None in long lists.

        """
        MIN_SKIP = 3  # don't bother eliding just one or two pages
        FROM_CURRENT = 2  # always show two to either side of current page
        FROM_END = 2  # always show two from each end

        skip = []
        ret = []
        for p in self.pages():
            if (abs(p - self.pagenumber) > FROM_CURRENT and
                p > FROM_END and (self.num_pages - p) > (FROM_END - 1)):
                skip.append(p)
                continue
            if len(skip) < MIN_SKIP:
                ret.extend(skip)
            else:
                ret.append(None)
            ret.append(p)
            skip = []
        return ret


    @property
    def total(self):
        """The total number of objects."""
        if self._cached_total is None:
            # @@@ Django 1.5 should not require the .values part and could be
            # changed to just:
            #     self._cached_total = self._queryset.count()
            # Bug 18248
            try:
                self._cached_total = self._queryset.count()
            except DatabaseError:
                self._cached_total = self._queryset.values("id").count()

        return self._cached_total


    @property
    def objects(self):
        """
        The iterable of objects on the current page.

        Lazily slices the queryset and caches the sliced queryset for
        subsequent access.

        """
        if self._sliced_qs is None:
            if not self.high:
                self._sliced_qs = self._queryset.empty()
            else:
                self._sliced_qs = self._queryset[self.low - 1:self.high]
        return self._sliced_qs


    @property
    def num_pages(self):
        """The total number of pages."""
        return max(1, int(math.ceil(float(self.total) / self.pagesize)))


    @property
    def low(self):
        """Ordinal of the first object on the current page."""
        return self._constrain((self.pagesize * (self.pagenumber - 1)) + 1)


    @property
    def high(self):
        """Ordinal of the last object on the current page."""
        return self._constrain(self.pagesize * self.pagenumber)


    def _constrain(self, num):
        """Return given ``num`` constrained to between 0 and self.total."""
        return min(self.total, max(0, num))


    @property
    def prev(self):
        """Page number of the previous page; None if no previous page."""
        prev = self.pagenumber - 1
        if prev < 1:
            return None
        return prev


    @property
    def next(self):
        """Page number of the next page; None if there is no next page."""
        next = self.pagenumber + 1
        if next > self.num_pages:
            return None
        return next



def positive_integer(val, default):
    """Attempt to coerce ``val`` to a positive integer, with fallback."""
    try:
        val = int(val)
    except (AttributeError, TypeError, ValueError):
        val = default

    if val < 1:
        val = 1

    return val

########NEW FILE########
__FILENAME__ = sort
"""
Utilities for views that sort list of objects.

"""
from functools import wraps

from django.core.exceptions import FieldError

from ..utils.querystring import update_querystring



DIRECTIONS = set(["asc", "desc"])
DEFAULT = "asc"



def sort(ctx_name, defaultfield=None, defaultdirection=DEFAULT):
    """Sort queryset found in TemplateResponse context under ``ctx_name``."""
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            response = view_func(request, *args, **kwargs)
            try:
                ctx = response.context_data
            except AttributeError:
                return response
            ctx["sort"] = Sort(request, defaultfield, defaultdirection)
            try:
                sortqs = ctx[ctx_name].order_by(*ctx["sort"].order_by)
                str(sortqs.query)  # hack to force evaluation of sort arguments
            except FieldError:
                pass
            else:
                ctx[ctx_name] = sortqs
            return response

        return _wrapped_view

    return decorator



class Sort(object):
    def __init__(self, request, defaultfield=None, defaultdirection=DEFAULT):
        """
        Accepts request, looks for GET keys "sortfield" and "sortdirection".

        A "field" can actually be multiple field names concatenated with
        commas, in which case all of those fields will be sorted on, in
        descending priority order.

        """
        self.url_path = request.get_full_path()
        self.field = request.GET.get("sortfield", defaultfield)
        self.direction = request.GET.get("sortdirection", defaultdirection)
        if self.field is None:
            self.field = "created_on"
            self.direction = "desc"


    def url(self, field):
        """
        Return a url for switching the sort to the given field name.

        """
        direction = DEFAULT
        if field == self.field:
            direction = DIRECTIONS.difference([self.direction]).pop()
        return update_querystring(
            self.url_path, sortfield=field, sortdirection=direction)


    def dir(self, field):
        """
        Return the current sort direction for the given field.

        asc, desc, or empty string if this isn't the field sorted on currently.

        """
        if field == self.field:
            return self.direction
        return ""


    @property
    def order_by(self):
        """Return the ``order_by`` tuple appropriate for this sort."""
        fields = self.field.split(",")
        if self.direction == "desc":
            return tuple(["-" + f for f in fields])
        return tuple(fields)

########NEW FILE########
__FILENAME__ = filters
"""
Template tags and filters for the finder.

"""

import json

from django.template import Library
from django import template

from .. import filters



register = Library()



@register.filter
def filter_url(view, obj):
    """Template filter to get filtered url."""
    return filters.filter_url(view, obj)

########NEW FILE########
__FILENAME__ = finder
"""
Template tags and filters for the finder.

"""
from django.template import Library



register = Library()



@register.filter
def child_query_url(finder, obj):
    """Return Ajax query URL for children of given object."""
    return finder.child_query_url(obj)


@register.filter
def sub_name(finder, obj):
    """Return name of child column of this object."""
    return finder.child_column_for_obj(obj)


@register.filter
def goto_url(finder, obj):
    """Return "goto" url for this object."""
    return finder.goto_url(obj)

########NEW FILE########
__FILENAME__ = pagination
"""
Template tags for pagination.

"""
from django.template import Library

from classytags.core import Tag, Options
from classytags.arguments import Argument

from .. import pagination



register = Library()



class Paginate(Tag):
    """Paginate the given queryset, placing a Pager in the template context."""
    name = "paginate"
    options = Options(
        Argument("queryset"),
        "as",
        Argument("varname", resolve=False),
        )


    def render_tag(self, context, queryset, varname):
        """Place Pager for given ``queryset`` in context as ``varname``."""
        request = context["request"]
        pagesize, pagenum = pagination.from_request(request)
        context[varname] = pagination.Pager(queryset, pagesize, pagenum)
        return u""


register.tag(Paginate)



@register.filter
def pagenumber_url(request, pagenumber):
    """Return current full URL with pagenumber replaced."""
    return pagination.pagenumber_url(request.get_full_path(), pagenumber)



@register.filter
def pagesize_url(request, pagesize):
    """Return current full URL with pagesize replaced."""
    return pagination.pagesize_url(request.get_full_path(), pagesize)


@register.filter
def pagenumber(request):
    """Return pagenumber of given request."""
    return pagination.from_request(request)[1]


@register.filter
def pagesize(request):
    """Return pagesize of given request."""
    return pagination.from_request(request)[0]

########NEW FILE########
__FILENAME__ = sort
"""
Template tags/filters for sorting.

"""
from django.template import Library



register = Library()



@register.filter
def url(sort, field):
    return sort.url(field)



@register.filter
def dir(sort, field):
    return sort.dir(field)

########NEW FILE########
__FILENAME__ = forms
"""
Management forms for cases.

"""
from django.core.urlresolvers import reverse
from django.forms.models import inlineformset_factory, BaseInlineFormSet
from django.db.models import Max
import floppyforms as forms

from .... import model
from model_utils import Choices

from ...utils import mtforms


class BaseCaseForm(mtforms.NonFieldErrorsClassFormMixin, forms.Form):
    """
    Base form for all test case/version forms.

    Provides self.user, tags and status fields, and non-field-errors-class
    mixin.

    """
    status = forms.CharField(
        widget=forms.Select(choices=model.CaseVersion.STATUS),
        initial=model.CaseVersion._meta.get_field("status").default,
        )
    add_tags = forms.CharField(
        widget=mtforms.AutocompleteInput(
            url=lambda: reverse("manage_tags_autocomplete")),
        required=False)
    idprefix = forms.CharField(max_length=200, required=False)
    priority = mtforms.MTChoiceField(
        choices=Choices("------", 1, 2, 3, 4),
        required=False
        )


    def __init__(self, *args, **kwargs):
        """Initialize form; pull out user from kwargs, set up data-allow-new."""
        self.user = kwargs.pop("user", None)

        super(BaseCaseForm, self).__init__(*args, **kwargs)

        self.fields["add_tags"].widget.attrs["data-allow-new"] = (
            "true"
            if (self.user and self.user.has_perm("tags.manage_tags"))
            else "false"
            )


    def clean(self):
        """Can't create new tags without appropriate permissions."""
        if (self.data.get("tag-newtag") and
                not (self.user and self.user.has_perm("tags.manage_tags"))):
            raise forms.ValidationError(
                "You do not have permission to create new tags.")
        return self.cleaned_data


    def save_new_tags(self, product=None):
        """Save new tags and add them to the list of tags to assign."""
        tags = self.cleaned_data.setdefault("tags", set())
        tags.update([int(tid) for tid in self.data.getlist("tag-tag")])

        new_tags = self.data.getlist("tag-newtag")

        for name in new_tags:
            # @@@ should pass in user here, need MTQuerySet.get_or_create
            t, created = model.Tag.objects.get_or_create(
                name=name, product=product)
            tags.add(t.id)


    def save_tags(self, caseversion):
        """Update set of tags assigned to ``caseversion``."""
        tags = self.cleaned_data.get("tags", set())

        current_tags = set([t.id for t in caseversion.tags.all()])
        caseversion.tags.add(*tags.difference(current_tags))
        caseversion.tags.remove(*current_tags.difference(tags))



class BaseCaseVersionForm(forms.Form):
    """Base form class for AddCaseForm and EditCaseVersionForm."""
    name = forms.CharField(max_length=200)
    description = forms.CharField(required=False, widget=mtforms.BareTextarea)

    add_attachment = forms.FileField(required=False)


    def __init__(self, *args, **kwargs):
        """Initialize BaseCaseVersionForm, including StepFormSet."""
        super(BaseCaseVersionForm, self).__init__(*args, **kwargs)

        self.steps_formset = StepFormSet(
            data=self.data or None,
            instance=getattr(self, "instance", None),
            )


    def is_valid(self):
        """The form and the steps formset must both be valid."""
        return self.steps_formset.is_valid() and super(
            BaseCaseVersionForm, self).is_valid()


    def save_attachments(self, caseversion):
        # @@@ convert into a modelmultiplechoicefield widget?
        delete_ids = set(self.data.getlist("remove-attachment"))
        caseversion.attachments.filter(id__in=delete_ids).delete()

        if self.files:  # if no files, it's a plain dict, has no getlist
            for uf in self.files.getlist("add_attachment"):
                model.CaseAttachment.objects.create(
                    attachment=uf,
                    name=uf.name,
                    caseversion=caseversion,
                    user=self.user,
                    )


class BaseAddCaseForm(forms.Form):
    """Base form for adding cases."""
    product = mtforms.MTModelChoiceField(
        model.Product.objects.all(),
        choice_attrs=lambda p: {"data-product-id": p.id},
        )
    productversion = mtforms.MTModelChoiceField(
        queryset=model.ProductVersion.objects.all(),
        choice_attrs=mtforms.product_id_attrs,
        label_from_instance=lambda pv: pv.version,
        )
    and_later_versions = forms.BooleanField(initial=True, required=False)


    def __init__(self, *args, **kwargs):
        """Initialize form; possibly add suite field."""
        super(BaseAddCaseForm, self).__init__(*args, **kwargs)

        if self.user and self.user.has_perm("library.manage_suite_cases"):
            self.fields["suite"] = mtforms.MTModelChoiceField(
                model.Suite.objects.all(),
                choice_attrs=mtforms.product_id_attrs,
                required=False)


    def clean(self):
        """Verify that products all match up."""
        productversion = self.cleaned_data.get("productversion")
        suite = self.cleaned_data.get("suite")
        product = self.cleaned_data.get("product")
        if product and productversion and productversion.product != product:
            raise forms.ValidationError(
                "Must select a version of the correct product.")
        if product and suite and suite.product != product:
            raise forms.ValidationError(
                "Must select a suite for the correct product.")
        return self.cleaned_data



class AddCaseForm(BaseAddCaseForm, BaseCaseVersionForm, BaseCaseForm):
    """Form for adding a new single case and some number of versions."""
    def clean(self):
        """
        Call clean methods from parent classes explicitly.

        Can't use super() as forms.Form.clean doesn't.

        """
        # we should get cleaned-data from return value of these, but we know
        # they don't modify self.cleaned_data
        BaseCaseForm.clean(self)
        BaseAddCaseForm.clean(self)
        return self.cleaned_data


    def save(self):
        """Create new case and all called-for versions."""
        assert self.is_valid()

        version_kwargs = self.cleaned_data.copy()
        product = version_kwargs.pop("product")
        idprefix = version_kwargs.pop("idprefix")
        priority = version_kwargs.pop("priority")

        # ensure priority is an int, if not, store "None"
        try:
            int(priority)
        except ValueError:
            priority = None

        self.save_new_tags(product)

        case = model.Case.objects.create(
            product=product,
            user=self.user,
            idprefix=idprefix,
            priority=priority,
            )

        version_kwargs["case"] = case
        version_kwargs["user"] = self.user

        del version_kwargs["add_tags"]
        del version_kwargs["add_attachment"]

        suite = version_kwargs.pop("suite", None)
        if suite:
            order = model.SuiteCase.objects.filter(
                suite=suite,
                ).aggregate(Max("order"))["order__max"] or 0
            model.SuiteCase.objects.create(
                case=case,
                suite=suite,
                user=self.user,
                order=order + 1,
                )

        productversions = [version_kwargs.pop("productversion")]
        if version_kwargs.pop("and_later_versions"):
            productversions.extend(product.versions.filter(
                    order__gt=productversions[0].order))

        for productversion in productversions:
            this_version_kwargs = version_kwargs.copy()
            this_version_kwargs["productversion"] = productversion
            caseversion = model.CaseVersion.objects.create(
                **this_version_kwargs)
            steps_formset = StepFormSet(
                data=self.data, instance=caseversion)
            steps_formset.save(user=self.user)
            self.save_tags(caseversion)
            self.save_attachments(caseversion)

        return case



class AddBulkCaseForm(BaseAddCaseForm, BaseCaseForm):
    """Form for adding test cases in bulk."""
    cases = forms.CharField(widget=mtforms.BareTextarea)


    def clean_cases(self):
        """Validate the bulk cases text."""
        data = model.BulkParser().parse(self.cleaned_data["cases"])

        for d in data:
            if "error" in d:
                raise forms.ValidationError(d["error"])

        return data



    def clean(self):
        """
        Call clean methods from parent classes explicitly.

        Can't use super() as forms.Form.clean doesn't.

        """
        # we should get cleaned-data from return value of these, but we know
        # they don't modify self.cleaned_data
        BaseCaseForm.clean(self)
        BaseAddCaseForm.clean(self)

        return self.cleaned_data


    def save(self):
        """Create and return the new case(s) and version(s)."""
        assert self.is_valid()

        product = self.cleaned_data["product"]
        idprefix = self.cleaned_data["idprefix"]
        priority = self.cleaned_data["priority"]

        # ensure priority is an int, if not, store "None"
        try:
            int(priority)
        except ValueError:
            priority = None

        self.save_new_tags(product)

        productversions = [self.cleaned_data["productversion"]]
        if self.cleaned_data.get("and_later_versions"):
            productversions.extend(product.versions.filter(
                    order__gt=productversions[0].order))

        suite = self.cleaned_data.get("suite")

        cases = []

        order = 0
        if suite:
            order = model.SuiteCase.objects.filter(
                suite=suite,
                ).aggregate(Max("order"))["order__max"] or 0

        for case_data in self.cleaned_data["cases"]:
            case = model.Case.objects.create(
                product=product,
                user=self.user,
                idprefix=idprefix,
                priority=priority,
                )

            version_kwargs = case_data.copy()
            steps_data = version_kwargs.pop("steps")

            version_kwargs["case"] = case
            version_kwargs["status"] = self.cleaned_data["status"]
            version_kwargs["user"] = self.user

            if suite:
                order += 1
                model.SuiteCase.objects.create(
                    case=case,
                    suite=suite,
                    user=self.user,
                    order=order,
                    )

            for productversion in productversions:
                this_version_kwargs = version_kwargs.copy()
                this_version_kwargs["productversion"] = productversion
                caseversion = model.CaseVersion.objects.create(
                    **this_version_kwargs)
                for i, step_kwargs in enumerate(steps_data, 1):
                    model.CaseStep.objects.create(
                        user=self.user,
                        caseversion=caseversion,
                        number=i,
                        **step_kwargs)
                self.save_tags(caseversion)

            cases.append(case)

        return cases



class EditCaseVersionForm(mtforms.SaveIfValidMixin,
                          BaseCaseVersionForm,
                          BaseCaseForm,
                          ):
    """Form for editing a case version."""
    cc_version = forms.IntegerField(widget=forms.HiddenInput)


    def __init__(self, *args, **kwargs):
        """Initialize EditCaseVersionForm, pulling instance from kwargs."""
        self.instance = kwargs.pop("instance", None)

        initial = kwargs.setdefault("initial", {})
        initial["name"] = self.instance.name
        initial["description"] = self.instance.description
        initial["status"] = self.instance.status
        initial["cc_version"] = self.instance.cc_version

        initial["idprefix"] = self.instance.case.idprefix
        initial["priority"] = self.instance.case.priority

        super(EditCaseVersionForm, self).__init__(*args, **kwargs)


    def save(self, user=None):
        """Save the edited caseversion."""
        user = user or self.user
        assert self.is_valid()

        version_kwargs = self.cleaned_data.copy()
        del version_kwargs["add_tags"]
        del version_kwargs["add_attachment"]

        idprefix = version_kwargs.pop("idprefix")
        priority = version_kwargs.pop("priority")

        for k, v in version_kwargs.items():
            setattr(self.instance, k, v)

        if self.instance.case.idprefix != idprefix:
            self.instance.case.idprefix = idprefix
            self.instance.case.save(force_update=True)

        if self.instance.case.priority != priority:
            try:
                int(priority)
            except ValueError:
                priority = None
            self.instance.case.priority = priority
            self.instance.case.save(force_update=True)

        self.instance.save(force_update=True)

        self.save_new_tags(self.instance.case.product)
        self.save_tags(self.instance)
        self.save_attachments(self.instance)
        self.steps_formset.save(user=user)

        return self.instance



class StepForm(mtforms.NonFieldErrorsClassFormMixin, forms.ModelForm):
    class Meta:
        model = model.CaseStep
        widgets = {
            "instruction": mtforms.BareTextarea,
            "expected": mtforms.BareTextarea,
            }
        fields = ["caseversion", "instruction", "expected"]



class BaseStepFormSet(BaseInlineFormSet):
    """Step formset that assigns sequential numbers to steps."""
    def __init__(self, *args, **kwargs):
        if kwargs.get("instance") is not None:
            self.extra = 0
        super(BaseStepFormSet, self).__init__(*args, **kwargs)


    def save(self, user=None):
        """Save all forms in this formset."""
        assert self.is_valid()

        to_delete = set([o.pk for o in self.get_queryset()])

        steps = []
        existing = []
        new = []
        for i, form in enumerate(self.forms, 1):
            step = form.save(commit=False)
            step.number = i
            steps.append(step)
            if step.pk:
                to_delete.remove(step.pk)
                existing.append(step)
            else:
                new.append(step)

        # first delete any existing steps that weren't in the incoming data,
        # then update existing steps on a first pass, then save new steps. This
        # dance is so we never fall afoul of the number-unique constraint (and
        # MySQL's inability to defer constraint checks)
        self.model._base_manager.filter(pk__in=to_delete).delete()

        for step in existing:
            step.save(user=user, force_update=True)

        for step in new:
            step.save(user=user, force_insert=True)

        return steps


    def initial_form_count(self):
        """
        Consider all forms 'extra' when bound so ModelFormSet won't look up PK.

        We don't know that the extra forms are at the end, they could be in any
        order, so Django's "i < self.initial_form_count()" checks are
        inherently broken.

        """
        if self.is_bound:
            return 0
        return super(BaseStepFormSet, self).initial_form_count()


    def _construct_form(self, i, **kwargs):
        """Set empty_permitted and instance for all forms."""
        kwargs["empty_permitted"] = False

        if self.is_bound:
            pk_key = "{0}-id".format(self.add_prefix(i))
            try:
                pk = int(self.data.get(pk_key))
            except (ValueError, TypeError):
                pk = None
            if pk:
                kwargs["instance"] = self._existing_object(pk)
            if kwargs.get("instance") is None:
                self.data[pk_key] = ""

        return super(BaseStepFormSet, self)._construct_form(i, **kwargs)





StepFormSet = inlineformset_factory(
    model.CaseVersion,
    model.CaseStep,
    form=StepForm,
    formset=BaseStepFormSet,
    can_order=False,    # we don't use Django's implementation of
    can_delete=False,   # formset deletion or ordering
    extra=1)

########NEW FILE########
__FILENAME__ = views
"""
Manage views for cases.

"""
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect
from django.shortcuts import redirect, get_object_or_404
from django.template.response import TemplateResponse
from django.views.decorators.cache import never_cache
from django.views.decorators.http import require_POST

from django.contrib import messages

from moztrap import model

from moztrap.view.filters import CaseVersionFilterSet
from moztrap.view.lists import decorators as lists
from moztrap.view.lists.filters import PinnedFilters
from moztrap.view.users.decorators import permission_required
from moztrap.view.utils.ajax import ajax
from moztrap.view.utils.auth import login_maybe_required

from ..finders import ManageFinder

from . import forms



@never_cache
@login_maybe_required
@lists.actions(
    model.CaseVersion,
    ["delete"],
    permission="library.manage_cases",
    fall_through=True)
@lists.actions(
    model.CaseVersion,
    ["clone", "activate", "draft", "deactivate"],
    permission="library.manage_cases")
@lists.finder(ManageFinder)
@lists.filter("caseversions", filterset_class=CaseVersionFilterSet)
@lists.sort("caseversions")
@ajax("manage/case/list/_cases_list.html")
def cases_list(request):
    """List caseversions."""
    return TemplateResponse(
        request,
        "manage/case/cases.html",
        {
            "caseversions": model.CaseVersion.objects.select_related(
                "case",
                "productversion",
                "productversion__product",
                ).prefetch_related(
                    "tags",
                    ),
            }
        )



@never_cache
@login_maybe_required
def case_details(request, caseversion_id):
    """Get details snippet for a caseversion."""
    caseversion = get_object_or_404(model.CaseVersion, pk=caseversion_id)
    return TemplateResponse(
        request,
        "manage/case/list/_case_details.html",
        {
            "caseversion": caseversion
            }
        )



@login_maybe_required
def case_id_redirect(request, case_id):
    """Given case ID redirect to latest version in manage list."""
    cv = get_object_or_404(
        model.CaseVersion.objects.all(), case=case_id, latest=True)
    return HttpResponseRedirect(
        "{0}?filter-id={1}#caseversion-id-{2}".format(
            reverse("manage_cases"), cv.case.id, cv.id))



@never_cache
@permission_required("library.create_cases")
def case_add(request):
    """Add a single case."""
    if request.method == "POST":
        form = forms.AddCaseForm(request.POST, request.FILES, user=request.user)
        if form.is_valid():
            case = form.save()
            messages.success(
                request, u"Test case '{0}' added.".format(
                    case.versions.all()[0].name)
                )
            return redirect("manage_cases")
    else:
        pf = PinnedFilters(request.COOKIES)
        form = forms.AddCaseForm(
            user=request.user,
            initial=pf.fill_form_querystring(request.GET).dict(),
            )
    return TemplateResponse(
        request,
        "manage/case/add_case.html",
        {
            "form": form
            }
        )



@never_cache
@permission_required("library.create_cases")
def case_add_bulk(request):
    """Add cases in bulk."""
    if request.method == "POST":
        form = forms.AddBulkCaseForm(
            request.POST, request.FILES, user=request.user)
        if form.is_valid():
            cases = form.save()
            messages.success(
                request, u"Added {0} test case{1}.".format(
                    len(cases), "" if len(cases) == 1 else "s")
                )
            return redirect("manage_cases")
    else:
        pf = PinnedFilters(request.COOKIES)
        form = forms.AddBulkCaseForm(user=request.user, initial=pf.fill_form_querystring(request.GET))
    return TemplateResponse(
        request,
        "manage/case/add_case_bulk.html",
        {
            "form": form
            }
        )



@never_cache
@permission_required("library.manage_cases")
def caseversion_edit(request, caseversion_id):
    """Edit a caseversion."""
    caseversion = get_object_or_404(model.CaseVersion, pk=caseversion_id)
    if request.method == "POST":
        form = forms.EditCaseVersionForm(
            request.POST,
            request.FILES,
            instance=caseversion,
            user=request.user)
        cv = form.save_if_valid()
        if cv is not None:
            messages.success(request, u"Saved '{0}'.".format(cv.name))
            pre_page = request.GET.get('from', "manage_cases")
            return redirect(pre_page)
    else:
        form = forms.EditCaseVersionForm(
            instance=caseversion, user=request.user)
    return TemplateResponse(
        request,
        "manage/case/edit_case.html",
        {
            "form": form,
            "caseversion": caseversion,
            }
        )


@require_POST
@permission_required("library.manage_cases")
def caseversion_clone(request, caseversion_id):
    """Clone caseversion for productversion, and redirect to edit new clone."""
    try:
        productversion = model.ProductVersion.objects.get(
            pk=request.POST["productversion"])
    except (model.ProductVersion.DoesNotExist, KeyError):
        return redirect(
            "manage_caseversion_edit", caseversion_id=caseversion_id)

    caseversion = get_object_or_404(model.CaseVersion, pk=caseversion_id)

    # if it exists already, just redirect to edit it
    try:
        target = model.CaseVersion.objects.get(
            case=caseversion.case, productversion=productversion)
    except model.CaseVersion.DoesNotExist:
        target = caseversion.clone(
            overrides={
                "productversion": productversion,
                "name": caseversion.name
                },
            user=request.user
            )
        messages.success(
            request,
            u"Created new version of '{0}' for {1}.".format(
                caseversion.name, productversion)
            )

    return redirect("manage_caseversion_edit", caseversion_id=target.id)

########NEW FILE########
__FILENAME__ = decorators
"""
Decorator for ajaxily editing/adding environment categories and elements.

@@@ This needs a rewrite, but the UI it supports needs a rethink first.

"""
from functools import wraps
import json

from django.core.exceptions import ObjectDoesNotExist
from django.http import HttpResponse
from django.template import RequestContext
from django.template.loader import render_to_string

from django.contrib import messages

from moztrap import model



ACTION_TYPES = {
    "category": (
        model.Category,
        "manage/environment/element_select/_category_list_item.html",
        ),
    "element": (
        model.Element,
        "manage/environment/element_select/_element_list_item.html",
        ),
    }



def category_element_ajax_add_edit(view_func):
    @wraps(view_func)
    def _wrapped_view(request, *args, **kwargs):
        if request.is_ajax() and request.method == "POST":
            data = {}

            if "action-delete" in request.POST:
                try:
                    obj_type, obj_id = request.POST["action-delete"].split("-")
                    model_class, template_name = ACTION_TYPES[obj_type]
                    obj = model_class.objects.get(pk=obj_id)
                except (KeyError, ValueError, ObjectDoesNotExist):
                    data["no_replace"] = True
                else:
                    obj.delete(user=request.user)
                    data["html"] = ""
            elif "new-category-name" in request.POST:
                template_name = ACTION_TYPES["category"][1]
                new_category_name = request.POST.get("new-category-name")
                if not new_category_name:
                    messages.error(
                        request, "Please enter a category name.")
                    data["no_replace"] = True
                else:
                    if "category-id" in request.POST:
                        cat = model.Category.objects.get(
                            pk=request.POST.get("category-id")
                            )
                        cat.name = new_category_name
                        cat.save()
                    else:
                        cat = model.Category.objects.create(
                            name=new_category_name
                            )
                    # @@@ this ought to be only elements that were included in
                    # the original widget queryset, but we don't have access to
                    # that here. soon this whole editing-on-the-form thing will
                    # go away anyway.
                    cat.choice_elements = cat.elements.order_by("name")
                    data["html"] = render_to_string(
                        template_name,
                        {
                            "category": cat,
                            "selected_element_ids": set(
                                map(int, request.POST.getlist("elements"))),
                            "name": "elements"  # @@@ duplicated form field name
                            },
                        RequestContext(request)
                        )
            elif "new-element-name" in request.POST:
                template_name = ACTION_TYPES["element"][1]
                preview_template_name = (
                    "manage/environment/element_select/"
                    "_element_preview_list_item.html")
                new_element_name = request.POST.get("new-element-name")

                if not new_element_name:
                    messages.error(
                        request, "Please enter an element name.")
                    data["no_replace"] = True
                else:
                    if "element-id" in request.POST:
                        e = model.Element.objects.get(
                            pk=request.POST.get("element-id"),
                            )
                        e.name = new_element_name
                        e.save()
                    else:
                        e = model.Element.objects.create(
                            name=new_element_name,
                            category_id=request.POST.get("category-id")
                            )

                    data["elem"] = render_to_string(
                        template_name,
                        {
                            "element": e,
                            "name": "elements"  # @@@ duplicated form field name
                            },
                        RequestContext(request))

                    data["preview"] = render_to_string(
                        preview_template_name,
                        {"element": e},
                        RequestContext(request))

            return HttpResponse(
                json.dumps(data), content_type="application/json")

        return view_func(request, *args, **kwargs)

    return _wrapped_view

########NEW FILE########
__FILENAME__ = forms
"""
Manage forms for environments.

"""
import floppyforms as forms

from .... import model

from ...utils import mtforms




class ProfileForm(mtforms.NonFieldErrorsClassFormMixin, mtforms.MTModelForm):
    """Base form for profiles."""
    class Meta:
        model = model.Profile
        fields = ["name"]
        widgets = {
            "name": forms.TextInput,
            }



class EditProfileForm(ProfileForm):
    """Form for editing a profile."""
    # @@@ unused currently
    pass



class EnvironmentElementSelectMultiple(mtforms.MTSelectMultiple):
    """A widget for selecting multiple environment elements."""
    template_name = "manage/environment/element_select/_element_select.html"


    def get_context(self, *args, **kwargs):
        """Add category list, with elements for each category, to context."""
        ctx = super(EnvironmentElementSelectMultiple, self).get_context(
            *args, **kwargs)
        # maps category to list of available elements
        available = {}
        for c in ctx["choices"]:
            element = c[1].obj
            available.setdefault(element.category, []).append(element)
        # ensure we also include empty categories
        categories = list(model.Category.objects.order_by("name"))
        for category in categories:
            # annotate with elements available in this widget
            category.choice_elements = available.get(category, [])
        ctx["categories"] = categories
        ctx["selected_element_ids"] = set(map(int, ctx["value"]))
        return ctx



class AddProfileForm(ProfileForm):
    """Form for adding a profile."""
    elements = mtforms.MTModelMultipleChoiceField(
        queryset=model.Element.objects.order_by(
            "category", "name").select_related(),
        widget=EnvironmentElementSelectMultiple,
        error_messages={"required": "Please select at least one element."})


    def save(self, user=None):
        """Create and return the new profile."""
        return model.Profile.generate(
            self.cleaned_data["name"],
            *self.cleaned_data["elements"],
            **{"user": user or self.user}
            )



class PopulateProductVersionEnvsForm(mtforms.NonFieldErrorsClassFormMixin,
                                     forms.Form,
                                     ):
    """Form for populating the envs of a productversion."""
    source = forms.ChoiceField(
        label="Populate with environments from", choices=[])


    def __init__(self, *args, **kwargs):
        """Initialize form; takes productversion kwarg, sets source choices."""
        self.productversion = kwargs.pop("productversion")

        super(PopulateProductVersionEnvsForm, self).__init__(*args, **kwargs)

        choices = []
        self.choice_map = {}
        for pv in self.productversion.product.versions.exclude(
                pk=self.productversion.pk):
            key = "productversion-{0}".format(pv.pk)
            choices.append((key, unicode(pv)))
            self.choice_map[key] = pv

        for profile in model.Profile.objects.all():
            key = "profile-{0}".format(profile.pk)
            choices.append((key, unicode(profile)))
            self.choice_map[key] = profile

        self.fields["source"].choices = choices


    def save(self):
        """Save envs from selected source to productversion."""
        source = self.choice_map[self.cleaned_data["source"]]

        self.productversion.add_envs(*source.environments.all())

        return self.productversion

########NEW FILE########
__FILENAME__ = views
"""
Manage views for environments.

"""
import json

from django.http import HttpResponse, Http404
from django.shortcuts import redirect, get_object_or_404
from django.template.response import TemplateResponse
from django.views.decorators.cache import never_cache

from django.contrib.auth.decorators import login_required
from django.contrib.auth.views import redirect_to_login
from django.contrib import messages

from moztrap import model

from moztrap.view.filters import ProfileFilterSet, EnvironmentFilterSet
from moztrap.view.lists import decorators as lists
from moztrap.view.users.decorators import permission_required
from moztrap.view.utils.ajax import ajax
from moztrap.view.utils.auth import login_maybe_required

from . import forms
from .decorators import category_element_ajax_add_edit



@never_cache
@login_maybe_required
@lists.actions(
    model.Profile,
    ["delete", "clone"],
    permission="environments.manage_environments")
@lists.filter("profiles", filterset_class=ProfileFilterSet)
@lists.sort("profiles")
@ajax("manage/environment/profile_list/_profiles_list.html")
def profiles_list(request):
    """List profiles."""
    return TemplateResponse(
        request,
        "manage/environment/profiles.html",
        {
            "profiles": model.Profile.objects.all(),
            }
        )



@never_cache
@login_maybe_required
def profile_details(request, profile_id):
    """Get details snippet for a profile."""
    profile = get_object_or_404(model.Profile, pk=profile_id)
    return TemplateResponse(
        request,
        "manage/environment/profile_list/_profile_details.html",
        {
            "profile": profile
            }
        )



@never_cache
@permission_required("environments.manage_environments")
@category_element_ajax_add_edit
def profile_add(request):
    """Add an environment profile."""
    if request.method == "POST":
        form = forms.AddProfileForm(request.POST, user=request.user)
        profile = form.save_if_valid()
        if profile is not None:
            messages.success(
                request, u"Profile '{0}' added.".format(
                    profile.name)
                )
            return redirect("manage_profiles")
    else:
        form = forms.AddProfileForm(user=request.user)
    return TemplateResponse(
        request,
        "manage/environment/add_profile.html",
        {
            "form": form
            }
        )



@never_cache
@permission_required("environments.manage_environments")
@lists.filter("environments", filterset_class=EnvironmentFilterSet)
@lists.actions(
    model.Environment,
    ["remove_from_profile"],
    permission="environments.manage_environments",
    fall_through=True)
@ajax("manage/environment/edit_profile/_envs_list.html")
def profile_edit(request, profile_id):
    profile = get_object_or_404(model.Profile, pk=profile_id)

    # @@@ should use a form, and support both ajax and non
    if request.is_ajax() and request.method == "POST":
        if "save-profile-name" in request.POST:
            new_name = request.POST.get("profile-name")
            data = {}
            if not new_name:
                messages.error(request, "Please enter a profile name.")
                data["success"] = False
            else:
                profile.name = new_name
                profile.save(user=request.user)
                messages.success(request, "Profile name saved!")
                data["success"] = True

            return HttpResponse(
                json.dumps(data),
                content_type="application/json")

        elif "add-environment" in request.POST:
            element_ids = request.POST.getlist("element-element")
            if not element_ids:
                messages.error(
                    request, "Please select some environment elements.")
            else:
                env = model.Environment.objects.create(
                    profile=profile, user=request.user)
                env.elements.add(*element_ids)

    return TemplateResponse(
        request,
        "manage/environment/edit_profile.html",
        {
            "profile": profile,
            "environments": profile.environments.all(),
            }
        )



@never_cache
@permission_required("core.manage_products")
@lists.filter("environments", filterset_class=EnvironmentFilterSet)
@ajax("manage/environment/productversion/_envs_list.html")
def productversion_environments_edit(request, productversion_id):
    productversion = get_object_or_404(
        model.ProductVersion, pk=productversion_id)

    # @@@ should use a form for all, and support both ajax and non
    form = None
    if request.is_ajax() and request.method == "POST":
        if "add-environment" in request.POST:
            element_ids = request.POST.getlist("element-element")
            if not element_ids:
                messages.error(
                    request, "Please select some environment elements.")
            else:
                env = model.Environment.objects.create(user=request.user)
                env.elements.add(*element_ids)
                productversion.add_envs(env)
        elif "action-remove" in request.POST:
            env_id = request.POST.get("action-remove")
            productversion.remove_envs(env_id)
        elif "populate" in request.POST:
            form = forms.PopulateProductVersionEnvsForm(
                request.POST, productversion=productversion)
            if form.is_valid():
                form.save()
                messages.success(request, "Populated environments.")
            else:
                messages.warning(
                    request,
                    "Unable to populate environments. "
                    "Please select a different source.",
                    )

    if form is None and not productversion.environments.exists():
        form = forms.PopulateProductVersionEnvsForm(
            productversion=productversion)

    return TemplateResponse(
        request,
        "manage/environment/productversion.html",
        {
            "productversion": productversion,
            "environments": productversion.environments.all(),
            "populate_form": form,
            }
        )



@never_cache
@login_required
def element_autocomplete(request):
    text = request.GET.get("text")
    elements = []
    if text is not None:
        elements = model.Element.objects.filter(
            name__icontains=text)
    suggestions = []
    for e in elements:
        start = e.name.lower().index(text.lower())
        pre = e.name[:start]
        post = e.name[start + len(text):]
        suggestions.append({
                "preText": pre,
                "typedText": text,
                "postText": post,
                "id": e.id,
                "name": e.name,
                "type": "element",
                })
    return HttpResponse(
        json.dumps(
            {
                "suggestions": suggestions
                }
            ),
        content_type="application/json",
        )



@never_cache
@login_required
@ajax("manage/environment/narrow/_envs_list.html")
def narrow_environments(request, object_type, object_id):
    if object_type == "run":
        model_class = model.Run
        redirect_to = "manage_runs"
        perm = "execution.manage_runs"
    elif object_type == "caseversion":
        model_class = model.CaseVersion
        redirect_to = "manage_cases"
        perm = "library.manage_cases"
    else:
        raise Http404

    if not request.user.has_perm(perm):
        return redirect_to_login(request.path)

    obj = get_object_or_404(model_class, pk=object_id)

    current_env_ids = set(obj.environments.values_list("id", flat=True))

    if request.method == "POST":
        env_ids = set(map(int, request.POST.getlist("environments")))

        remove = current_env_ids.difference(env_ids)
        add = env_ids.difference(current_env_ids)

        obj.add_envs(*add)
        obj.remove_envs(*remove)

        messages.success(request, u"Saved environments for '{0}'".format(obj))

        return redirect(redirect_to)

    return TemplateResponse(
        request,
        "manage/environment/narrowing.html",
        {
            "environments": obj.productversion.environments.all(),
            "selected_env_ids": current_env_ids,
            "filters": EnvironmentFilterSet().bind(),  # for JS filtering
            "obj": obj,
            })

########NEW FILE########
__FILENAME__ = finders
"""
Finder for management pages.

"""
from ... import model
from ..lists import finder



class ManageFinder(finder.Finder):
    template_base = "manage/finder"

    columns = [
        finder.Column(
            "products",
            "_products.html",
            model.Product.objects.order_by("name"),
            "manage_productversions",
            ),
        finder.Column(
            "productversions",
            "_productversions.html",
            model.ProductVersion.objects.all(),
            "manage_runs",
            ),
        finder.Column(
            "runs",
            "_runs.html",
            model.Run.objects.order_by("start"),
            "manage_suites",
            ),
        finder.Column(
            "suites",
            "_suites.html",
            model.Suite.objects.order_by("name"),
            "manage_cases",
            ),
        ]

########NEW FILE########
__FILENAME__ = forms
"""
Management forms for products.

"""
import floppyforms as forms

from .... import model

from ...utils import mtforms




class ProductForm(mtforms.NonFieldErrorsClassFormMixin, mtforms.MTModelForm):
    """Base form for products."""
    class Meta:
        model = model.Product
        fields = ["name", "description"]
        widgets = {
            "name": forms.TextInput,
            "description": mtforms.BareTextarea,
            }



class EditProductForm(ProductForm):
    """Form for editing a product."""
    pass



class AddProductForm(ProductForm):
    """Form for adding a product."""
    version = forms.CharField(required=True)
    profile = forms.ModelChoiceField(
        queryset=model.Profile.objects.all(),
        required=False,
        widget=forms.Select)


    def save(self, user=None):
        """Save and return the new Product; also save initial version."""
        user = user or self.user

        product = super(AddProductForm, self).save(user=user)

        version = model.ProductVersion.objects.create(
            product=product,
            version=self.cleaned_data["version"],
            user=user)

        profile = self.cleaned_data.get("profile")
        if profile is not None:
            version.environments.add(*profile.environments.all())

        return product

########NEW FILE########
__FILENAME__ = views
"""
Manage views for products.

"""
from django.shortcuts import get_object_or_404, redirect
from django.template.response import TemplateResponse
from django.views.decorators.cache import never_cache

from django.contrib import messages

from moztrap import model

from moztrap.view.filters import ProductFilterSet
from moztrap.view.lists import decorators as lists
from moztrap.view.users.decorators import permission_required
from moztrap.view.utils.ajax import ajax
from moztrap.view.utils.auth import login_maybe_required

from ..finders import ManageFinder

from . import forms



@never_cache
@login_maybe_required
@lists.actions(
    model.Product,
    ["delete", "clone"],
    permission="core.manage_products")
@lists.finder(ManageFinder)
@lists.filter("products", filterset_class=ProductFilterSet)
@lists.sort("products")
@ajax("manage/product/list/_products_list.html")
def products_list(request):
    """List products."""
    return TemplateResponse(
        request,
        "manage/product/products.html",
        {
            "products": model.Product.objects.all(),
            }
        )



@never_cache
@login_maybe_required
def product_details(request, product_id):
    """Get details snippet for a product."""
    product = get_object_or_404(model.Product, pk=product_id)
    return TemplateResponse(
        request,
        "manage/product/list/_product_details.html",
        {
            "product": product
            }
        )



@never_cache
@permission_required("core.manage_products")
def product_add(request):
    """Add a product."""
    if request.method == "POST":
        form = forms.AddProductForm(request.POST, user=request.user)
        product = form.save_if_valid()
        if product is not None:
            messages.success(
                request, u"Product '{0}' added.".format(
                    product.name)
                )
            return redirect("manage_products")
    else:
        form = forms.AddProductForm(user=request.user)
    return TemplateResponse(
        request,
        "manage/product/add_product.html",
        {
            "form": form
            }
        )



@never_cache
@permission_required("core.manage_products")
def product_edit(request, product_id):
    """Edit a product."""
    product = get_object_or_404(model.Product, pk=product_id)
    if request.method == "POST":
        form = forms.EditProductForm(
            request.POST, instance=product, user=request.user)
        saved_product = form.save_if_valid()
        if saved_product is not None:
            messages.success(request, u"Saved '{0}'.".format(saved_product.name))
            pre_page = request.GET.get('from', "manage_products")
            return redirect(pre_page)
    else:
        form = forms.EditProductForm(instance=product, user=request.user)
    return TemplateResponse(
        request,
        "manage/product/edit_product.html",
        {
            "form": form,
            "product": product,
            }
        )

########NEW FILE########
__FILENAME__ = forms
"""
Management forms for product versions.

"""
import floppyforms as forms

from .... import model

from ...utils import mtforms




class BaseProductVersionForm(mtforms.NonFieldErrorsClassFormMixin,
                             mtforms.MTModelForm):
    """Base Form for productversions."""

    class Meta:
        model = model.ProductVersion
        fields = ["version", "codename"]
        widgets = {
            "version": forms.TextInput,
            "codename": forms.TextInput,
            }



class EditProductVersionForm(BaseProductVersionForm):
    """Form for editing productversions."""

    fill_from = mtforms.MTModelChoiceField(  # pragma: no cover
        required=False,
        queryset=model.ProductVersion.objects.all(),
        choice_attrs=mtforms.product_id_attrs,
        label_from_instance=lambda pv: pv.version,
        )


    class Meta:
        model = model.ProductVersion
        fields = ["version", "codename"]
        widgets = {
            "version": forms.TextInput,
            "codename": forms.TextInput,
            }


    def __init__(self, *args, **kwargs):
        super(EditProductVersionForm, self).__init__(*args, **kwargs)
        self.fields["fill_from"].queryset = self.instance.product.versions.exclude(
            pk=self.instance.pk)


    def save(self, user=None):
        """Save and return product version; copy envs."""
        pv = super(EditProductVersionForm, self).save(user=user)

        fill_from = self.cleaned_data.get("fill_from")
        if fill_from:
            # get the cases we already have in this version
            existing = pv.caseversions.all().values_list("case_id", flat=True)
            for cv in fill_from.caseversions.exclude(case_id__in=existing):
                cv.clone(overrides={"productversion": pv, "name": cv.name})

        return pv



class AddProductVersionForm(BaseProductVersionForm):
    """Form for adding a productversion."""
    product = mtforms.MTModelChoiceField(
        queryset=model.Product.objects.all(),
        choice_attrs=lambda p: {"data-product-id": p.id})
    clone_from = mtforms.MTModelChoiceField(  # pragma: no cover
        required=False,
        queryset=model.ProductVersion.objects.all(),
        choice_attrs=mtforms.product_id_attrs,
        label_from_instance=lambda pv: pv.version,
        )


    class Meta(EditProductVersionForm.Meta):
        fields = ["product", "version", "codename"]
        widgets = EditProductVersionForm.Meta.widgets.copy()


    def save(self, user=None):
        """Save and return product version; copy envs."""
        pv = super(AddProductVersionForm, self).save(user=user)

        clone_from = self.cleaned_data.get("clone_from")
        if clone_from:
            pv.environments.add(*clone_from.environments.all())
            for cv in clone_from.caseversions.all():
                cv.clone(overrides={"productversion": pv, "name": cv.name})

        return pv

########NEW FILE########
__FILENAME__ = views
"""
Manage views for productversions.

"""
from django.shortcuts import get_object_or_404, redirect
from django.template.response import TemplateResponse
from django.views.decorators.cache import never_cache

from django.contrib import messages

from moztrap import model

from moztrap.view.filters import ProductVersionFilterSet
from moztrap.view.lists import decorators as lists
from moztrap.view.lists.filters import PinnedFilters
from moztrap.view.users.decorators import permission_required
from moztrap.view.utils.ajax import ajax
from moztrap.view.utils.auth import login_maybe_required

from ..finders import ManageFinder

from . import forms



@never_cache
@login_maybe_required
@lists.actions(
    model.ProductVersion,
    ["delete", "clone"],
    permission="core.manage_products")
@lists.finder(ManageFinder)
@lists.filter("productversions", filterset_class=ProductVersionFilterSet)
@lists.sort("productversions")
@ajax("manage/productversion/list/_productversions_list.html")
def productversions_list(request):
    """List productversions."""
    return TemplateResponse(
        request,
        "manage/productversion/productversions.html",
        {
            "productversions": model.ProductVersion.objects.select_related(
                "product"),
            }
        )



@never_cache
@login_maybe_required
def productversion_details(request, productversion_id):
    """Get details snippet for a productversion."""
    productversion = get_object_or_404(
        model.ProductVersion, pk=productversion_id)
    return TemplateResponse(
        request,
        "manage/productversion/list/_productversion_details.html",
        {
            "productversion": productversion
            }
        )



@never_cache
@permission_required("core.manage_products")
def productversion_add(request):
    """Add a product version."""
    if request.method == "POST":
        form = forms.AddProductVersionForm(request.POST, user=request.user)
        productversion = form.save_if_valid()
        if productversion is not None:
            messages.success(
                request, u"Product version '{0}' added.".format(
                    productversion.name)
                )
            return redirect("manage_productversions")
    else:
        pf = PinnedFilters(request.COOKIES)
        form = forms.AddProductVersionForm(
            user=request.user,
            initial=pf.fill_form_querystring(request.GET).dict(),
            )
    return TemplateResponse(
        request,
        "manage/productversion/add_productversion.html",
        {
            "form": form
            }
        )



@never_cache
@permission_required("core.manage_products")
def productversion_edit(request, productversion_id):
    """Edit a productversion."""
    productversion = get_object_or_404(
        model.ProductVersion, pk=productversion_id)
    if request.method == "POST":
        form = forms.EditProductVersionForm(
            request.POST, instance=productversion, user=request.user)
        pv = form.save_if_valid()
        if pv is not None:
            messages.success(request, u"Saved '{0}'.".format(pv.name))
            pre_page = request.GET.get('from', "manage_productversions")
            return redirect(pre_page)
    else:
        form = forms.EditProductVersionForm(
            instance=productversion, user=request.user)
    return TemplateResponse(
        request,
        "manage/productversion/edit_productversion.html",
        {
            "form": form,
            "productversion": productversion,
            }
        )

########NEW FILE########
__FILENAME__ = forms
"""
Management forms for runs.

"""
import floppyforms as forms

from django.core.exceptions import ValidationError

from moztrap import model
from moztrap.view.lists import filters
from moztrap.view.utils import mtforms




class RunForm(mtforms.NonFieldErrorsClassFormMixin, mtforms.MTModelForm):
    """Base form for adding/editing runs."""
    suites = mtforms.MTMultipleChoiceField(
        required=False,
        widget=mtforms.FilteredSelectMultiple(
            choice_template="manage/run/suite_select/_suite_select_item.html",
            listordering_template=(
                "manage/run/suite_select/_suite_select_listordering.html"),
            filters=[
                filters.KeywordFilter("name"),
                filters.ModelFilter(
                    "author", queryset=model.User.objects.all()),
                ],
            )
        )
    productversion = mtforms.MTModelChoiceField(
        queryset=model.ProductVersion.objects.all(),
        choice_attrs=mtforms.product_id_attrs,
        )
    build = forms.CharField(max_length=200, required=False)
    is_series = forms.BooleanField(required=False)


    class Meta:
        model = model.Run
        fields = [
            "productversion",
            "name",
            "description",
            "is_series",
            "build",
            "start",
            "end",
            "is_series",
            ]
        widgets = {
            "name": forms.TextInput,
            "description": mtforms.BareTextarea,
            "build": forms.TextInput,
            "is_series": forms.CheckboxInput,
            "start": forms.DateInput,
            "end": forms.DateInput,
            }


    def clean_suites(self):
        """
        Make sure all the ids for the suites are valid and populate
        self.cleaned_data with the real objects.

        If these are not ids, then they are read-only strings of the title
        and therefore don't need to be validated.  So first verify they're
        all ints.
        """

        try:
            suites = dict((unicode(x.id), x) for x in
                model.Suite.objects.filter(pk__in=self.cleaned_data["suites"]))
            try:
                return [suites[x] for x in self.cleaned_data["suites"]]

            except KeyError as e:
                raise ValidationError("Not a valid suite for this run.")

        except ValueError:
            # some of the values weren't ints, and therefore this is
            # from the read-only list of suites.  so return None so that we
            # don't try to remove and re-add them.
            if "suites" in self.changed_data:  # pragma: no cover
                self.changed_data.remove("suites")
            return None


    def clean_build(self):
        """If this is a series, then null out the build field."""
        if self.cleaned_data["is_series"]:
            return None


    def save(self, user=None):
        """Save and return run, with suite associations."""
        user = user or self.user
        run = super(RunForm, self).save(user=user)

        if "suites" in self.changed_data:
            # if this is empty, then don't make any changes, because
            # either there are no suites, or this came from the read
            # only suite list.
            run.runsuites.all().delete(permanent=True)
            for i, suite in enumerate(self.cleaned_data["suites"]):
                model.RunSuite.objects.create(
                    run=run, suite=suite, order=i, user=user)

        return run



class AddRunForm(RunForm):
    """Form for adding a run."""
    def __init__(self, *args, **kwargs):
        """Initialize AddRunForm; default to being a series."""
        super(AddRunForm, self).__init__(*args, **kwargs)

        isf = self.fields["is_series"]
        isf.initial = True



class EditRunForm(RunForm):
    """Form for editing a run."""
    def __init__(self, *args, **kwargs):
        """Initialize EditRunForm; no changing product version of active run."""
        super(EditRunForm, self).__init__(*args, **kwargs)

        pvf = self.fields["productversion"]
        sf = self.fields["suites"]
        isf = self.fields["is_series"]
        self.initial["suites"] = list(
            self.instance.suites.values_list(
                "name", flat=True).order_by("runsuites__order"))
        if self.instance.status == model.Run.STATUS.active:
            # can't change the product version of an active run.
            pvf.queryset = pvf.queryset.filter(
                pk=self.instance.productversion_id)
            pvf.readonly = True
            # can't change being a series in an active run
            isf.readonly = True
            # can't change suites of an active run either
            sf.readonly = True
        else:
            # regardless, can't switch to different product entirely
            pvf.queryset = pvf.queryset.filter(
                product=self.instance.productversion.product_id)

            # ajax populates available and included suites on page load

########NEW FILE########
__FILENAME__ = views
"""
Manage views for runs.

"""
from django.shortcuts import get_object_or_404, redirect
from django.template.response import TemplateResponse
from django.views.decorators.cache import never_cache

from django.contrib import messages

from moztrap import model
from moztrap.model.mtmodel import NotDeletedCount

from moztrap.view.filters import RunFilterSet
from moztrap.view.lists import decorators as lists
from moztrap.view.lists.filters import PinnedFilters
from moztrap.view.users.decorators import permission_required
from moztrap.view.utils.ajax import ajax
from moztrap.view.utils.auth import login_maybe_required

from ..finders import ManageFinder

from . import forms



@never_cache
@login_maybe_required
@lists.actions(
    model.Run,
    ["delete", "clone", "activate", "draft", "deactivate", "refresh"],
    permission="execution.manage_runs")
@lists.finder(ManageFinder)
@lists.filter("runs", filterset_class=RunFilterSet)
@lists.sort("runs")
@ajax("manage/run/list/_runs_list.html")
def runs_list(request):
    """List runs."""
    return TemplateResponse(
        request,
        "manage/run/runs.html",
        {
            "runs": model.Run.objects.select_related().annotate(
                suite_count=NotDeletedCount("suites", distinct=True)),
            }
        )



@never_cache
@login_maybe_required
def run_details(request, run_id):
    """Get details snippet for a run."""
    run = get_object_or_404(
        model.Run, pk=run_id)
    return TemplateResponse(
        request,
        "manage/run/list/_run_details.html",
        {
            "run": run
            }
        )



@never_cache
@permission_required("execution.manage_runs")
def run_add(request):
    """Add a run."""
    if request.method == "POST":
        form = forms.AddRunForm(request.POST, user=request.user)
        run = form.save_if_valid()
        if run is not None:
            messages.success(
                request, u"Run '{0}' added.".format(
                    run.name)
                )
            return redirect("manage_runs")
    else:
        pf = PinnedFilters(request.COOKIES)
        form = forms.AddRunForm(
            user=request.user,
            initial=pf.fill_form_querystring(request.GET).dict(),
            )
    return TemplateResponse(
        request,
        "manage/run/add_run.html",
        {
            "form": form
            }
        )



@never_cache
@permission_required("execution.manage_runs")
def run_edit(request, run_id):
    """Edit a run."""
    run = get_object_or_404(
        model.Run, pk=run_id)
    if request.method == "POST":
        form = forms.EditRunForm(
            request.POST, instance=run, user=request.user)
        saved_run = form.save_if_valid()
        if saved_run is not None:
            messages.success(request, u"Saved '{0}'.".format(saved_run.name))
            pre_page = request.GET.get('from', "manage_runs")
            return redirect(pre_page)
    else:
        form = forms.EditRunForm(
            instance=run, user=request.user)
    return TemplateResponse(
        request,
        "manage/run/edit_run.html",
        {
            "form": form,
            "run": run,
            }
        )

########NEW FILE########
__FILENAME__ = forms
"""
Management forms for suites.

"""
from django.core.exceptions import ValidationError
import floppyforms as forms
from model_utils import Choices

from moztrap import model
from moztrap.view.lists import filters
from moztrap.view.utils import mtforms



class SuiteForm(mtforms.NonFieldErrorsClassFormMixin, mtforms.MTModelForm):
    """Base form for adding/editing suites."""
    cases = mtforms.MTMultipleChoiceField(
        required=False,
        widget=mtforms.FilteredSelectMultiple(
            choice_template="manage/multi_select/case_select/_case_select_item.html",
            listordering_template=(
                "manage/multi_select/case_select/_case_select_listordering.html"),
            filters=[
                filters.KeywordFilter("name"),
                filters.ModelFilter(
                    "tag", lookup="tags", queryset=model.Tag.objects.all()),
                filters.ModelFilter(
                    "author", queryset=model.User.objects.all()),
                filters.ChoicesFilter(
                    "priority",
                    choices=Choices(1, 2, 3, 4)
                    )
                ],
            )
        )
    product = mtforms.MTModelChoiceField(
        queryset=model.Product.objects.all(),
        choice_attrs=lambda p: {"data-product-id": p.id})

    class Meta:
        model = model.Suite
        fields = ["product", "name", "description", "status"]
        widgets = {
            "name": forms.TextInput,
            "description": mtforms.BareTextarea,
            "status": forms.Select,
            }


    def clean_cases(self):
        """
        Make sure all the ids for the cases are valid and populate
        self.cleaned_data with the real objects.
        """
        # fetch the case objects in one query, but loses order.
        cases = dict((unicode(x.id), x) for x in
            model.Case.objects.filter(pk__in=self.cleaned_data["cases"]))

        # put them back in order and remove dups, if any
        try:
            # remove dups, if there are any.
            clean_cases = []
            for case_id in self.cleaned_data["cases"]:
                case = cases[case_id]
                if case not in clean_cases:
                    clean_cases.append(case)

            # if number is different, then add this to changed data
            if (("cases" in self.initial and self.initial["cases"] != self.cleaned_data["cases"]) or
                len(self.cleaned_data["cases"]) is not len(clean_cases)):
                    self.changed_data.append("cases")

            return clean_cases
        except KeyError as e:
            raise ValidationError("Not a valid case for this suite.")


    def save(self, user=None):
        """Save the suite and case associations."""
        user = user or self.user
        suite = super(SuiteForm, self).save(user=user)

        if "cases" in self.changed_data:
            suite.suitecases.all().delete(permanent=True)
            for i, case in enumerate(self.cleaned_data["cases"]):
                model.SuiteCase.objects.create(
                    suite=suite, case=case, order=i, user=user)

        return suite



class AddSuiteForm(SuiteForm):
    """Form for adding a suite."""
    pass



class EditSuiteForm(SuiteForm):
    """Form for editing a suite."""
    def __init__(self, *args, **kwargs):
        """Initialize EditSuiteForm; no changing product."""
        super(EditSuiteForm, self).__init__(*args, **kwargs)

        self.initial["cases"] = list(
            self.instance.cases.values_list(
                "id",
                flat=True,
                ).order_by("suitecases__order"))

        # for suites with cases in them, product is readonly and case options
        # are filtered to that product
        if self.instance.cases.exists():
            pf = self.fields["product"]
            pf.queryset = pf.queryset.filter(pk=self.instance.product_id)
            pf.readonly = True

            # ajax populates available and included cases on page load

########NEW FILE########
__FILENAME__ = views
"""
Manage views for suites.

"""
from django.shortcuts import get_object_or_404, redirect
from django.template.response import TemplateResponse
from django.views.decorators.cache import never_cache

from django.contrib import messages

from moztrap import model
from moztrap.model.mtmodel import NotDeletedCount
from moztrap.view.filters import SuiteFilterSet
from moztrap.view.lists import decorators as lists
from moztrap.view.lists.filters import PinnedFilters
from moztrap.view.users.decorators import permission_required
from moztrap.view.utils.ajax import ajax
from moztrap.view.utils.auth import login_maybe_required

from ..finders import ManageFinder

from . import forms



@never_cache
@login_maybe_required
@lists.actions(
    model.Suite,
    ["delete", "clone", "activate", "draft", "deactivate"],
    permission="library.manage_suites")
@lists.finder(ManageFinder)
@lists.filter("suites", filterset_class=SuiteFilterSet)
@lists.sort("suites")
@ajax("manage/suite/list/_suites_list.html")
def suites_list(request):
    """List suites."""
    return TemplateResponse(
        request,
        "manage/suite/suites.html",
        {
            "suites": model.Suite.objects.select_related().annotate(
                case_count=NotDeletedCount("cases", distinct=True)),
            }
        )



@never_cache
@login_maybe_required
def suite_details(request, suite_id):
    """Get details snippet for a suite."""
    suite = get_object_or_404(
        model.Suite, pk=suite_id)
    return TemplateResponse(
        request,
        "manage/suite/list/_suite_details.html",
        {
            "suite": suite
            }
        )



@never_cache
@permission_required("library.manage_suites")
def suite_add(request):
    """Add a suite."""
    if request.method == "POST":
        form = forms.AddSuiteForm(request.POST, user=request.user)
        suite = form.save_if_valid()
        if suite is not None:
            messages.success(
                request, u"Suite '{0}' added.".format(
                    suite.name)
                )
            return redirect("manage_suites")
    else:
        pf = PinnedFilters(request.COOKIES)
        # Note: inital takes a dict, NOT a QueryDict.  It won't work correctly
        # with a QueryDict.
        form = forms.AddSuiteForm(
            user=request.user,
            initial=pf.fill_form_querystring(request.GET).dict(),
            )
    return TemplateResponse(
        request,
        "manage/suite/add_suite.html",
        {
            "form": form
            }
        )



@never_cache
@permission_required("library.manage_suites")
def suite_edit(request, suite_id):
    """Edit a suite."""
    suite = get_object_or_404(model.Suite, pk=suite_id)
    if request.method == "POST":
        form = forms.EditSuiteForm(
            request.POST, instance=suite, user=request.user)
        saved_suite = form.save_if_valid()
        if saved_suite is not None:
            messages.success(request, u"Saved '{0}'.".format(saved_suite.name))
            pre_page = request.GET.get('from', "manage_suites")
            return redirect(pre_page)
    else:
        form = forms.EditSuiteForm(
            instance=suite, user=request.user)
    return TemplateResponse(
        request,
        "manage/suite/edit_suite.html",
        {
            "form": form,
            "suite": suite,
            }
        )

########NEW FILE########
__FILENAME__ = forms
"""
Management forms for tags.

"""
from django.core.exceptions import ValidationError
import floppyforms as forms

from .... import model
from model_utils import Choices

from ...utils import mtforms
from ...lists import filters




class TagForm(mtforms.NonFieldErrorsClassFormMixin, mtforms.MTModelForm):
    """Base form for tags."""

    caseversions = mtforms.MTMultipleChoiceField(
        required=False,
        widget=mtforms.FilteredSelectMultiple(
            listordering_template=(
                "manage/tag/caseversion_select/_caseversion_select_listordering.html"),
            filters=[
                filters.KeywordFilter("name"),
                filters.ModelFilter(
                    "product version",
                    key="productversion",
                    lookup="productversion",
                    queryset=model.ProductVersion.objects.all(),
                    ),
                filters.ModelFilter(
                    "tag", lookup="tags", queryset=model.Tag.objects.all()),
                filters.ModelFilter(
                    "author", queryset=model.User.objects.all()),
                filters.ChoicesFilter(
                    "priority",
                    choices=Choices(1, 2, 3, 4)
                    )
                ],
            )
    )
    product = mtforms.MTModelChoiceField(
        queryset=model.Product.objects.all(),
        choice_attrs=lambda p: {"data-product-id": p.id},
        required=False)

    class Meta:
        model = model.Tag
        fields = ["name", "product", "description"]
        widgets = {
            "name": forms.TextInput,
            "product": forms.Select,
            "description": mtforms.BareTextarea,
            }


    def clean_caseversions(self):
        """
        Make sure all the ids for the cases are valid and populate
        self.cleaned_data with the real objects.
        """
        caseversions = dict((unicode(x.id), x) for x in
            model.CaseVersion.objects.filter(
                pk__in=self.cleaned_data["caseversions"]))
        try:
            return [caseversions[x] for x in self.cleaned_data["caseversions"]]
        except KeyError as e:
            raise ValidationError("Not a valid caseversion for this tag.")


    def save(self, user=None):
        """Save the tag and case associations."""
        user = user or self.user
        tag = super(TagForm, self).save(user=user)

        # it's possible the user submitted the form before the ajax loaded
        # the included and available cases.  So ``caseversions`` would not
        # show in the changed_data.  If that's the case, we prevent updating
        # the list of cases.
        if "caseversions" in self.changed_data:
            TagCV = tag.caseversions.through

            # @@@ used to be delete() instead of clear.  May be remove?
            # why is delete() ok for cases of suites?  must be some special checking
            # for that.
            tag.caseversions.clear()
            tcv_list = [TagCV(tag=tag, caseversion=cv)
                for cv in self.cleaned_data["caseversions"]]

            TagCV.objects.bulk_create(tcv_list)

        return tag



class EditTagForm(TagForm):
    """Form for editing a tag."""
    def __init__(self, *args, **kwargs):
        """Initialize form; restrict tag product choices."""
        super(EditTagForm, self).__init__(*args, **kwargs)

        # get all the cases this tag is applied to, if the cases belong to
        # a single product, this tag can be set to global or to that product.
        # if it's applied to cases from multiple products, then it must
        # remain global.
        products_tagged = model.Product.objects.filter(
            cases__versions__tags=self.instance).distinct()
        count = products_tagged.count()

        pf = self.fields["product"]
        self.initial["caseversions"] = list(
            self.instance.caseversions.values_list(
                "name", flat=True))

        if count > 1:
            # ro - no options
            # - no product set, cases applied from multiple products
            pf.queryset = model.Product.objects.none()
            pf.readonly = True
        elif count == 1:
            # rw - that product or none
            # - no product set, cases applied from single product
            # - product set, cases applied
            pf.queryset = products_tagged

        # else:
        # rw - all product options
        # - no product set, no cases applied
        # - product set, no cases applied


class AddTagForm(TagForm):
    """Form for adding a tag."""
    pass

########NEW FILE########
__FILENAME__ = views
"""
Manage views for tags.

"""
import json

from django.db.models import Q
from django.http import HttpResponse
from django.shortcuts import get_object_or_404, redirect
from django.template.response import TemplateResponse
from django.views.decorators.cache import never_cache

from django.contrib import messages

from moztrap import model

from moztrap.view.filters import TagFilterSet
from moztrap.view.lists import decorators as lists
from moztrap.view.lists.filters import PinnedFilters
from moztrap.view.users.decorators import permission_required
from moztrap.view.utils.ajax import ajax
from moztrap.view.utils.auth import login_maybe_required

from ..finders import ManageFinder

from . import forms



@never_cache
@login_maybe_required
@lists.actions(
    model.Tag,
    ["delete", "clone"],
    permission="tags.manage_tags")
@lists.finder(ManageFinder)
@lists.filter("tags", filterset_class=TagFilterSet)
@lists.sort("tags")
@ajax("manage/tag/list/_tags_list.html")
def tags_list(request):
    """List tags."""
    return TemplateResponse(
        request,
        "manage/tag/tags.html",
        {
            "tags": model.Tag.objects.select_related("product", "created_by"),
            }
        )



@never_cache
@login_maybe_required
def tag_details(request, tag_id):
    """Get details snippet for a tag."""
    tag = get_object_or_404(
        model.Tag, pk=tag_id)
    return TemplateResponse(
        request,
        "manage/tag/list/_tag_details.html",
        {
            "tag": tag
        }
    )



@never_cache
@permission_required("tags.manage_tags")
def tag_add(request):
    """Add a tag."""
    if request.method == "POST":
        form = forms.AddTagForm(request.POST, user=request.user)
        tag = form.save_if_valid()
        if tag is not None:
            messages.success(
                request, u"Tag '{0}' added.".format(
                    tag.name)
                )
            return redirect("manage_tags")
    else:
        pf = PinnedFilters(request.COOKIES)
        form = forms.AddTagForm(
            user=request.user,
            initial=pf.fill_form_querystring(request.GET).dict(),
            )
    return TemplateResponse(
        request,
        "manage/tag/add_tag.html",
        {
            "form": form,
            "hide_multiselect": 1,
            }
        )



@never_cache
@permission_required("tags.manage_tags")
def tag_edit(request, tag_id):
    """Edit a tag."""
    tag = get_object_or_404(model.Tag, pk=tag_id)
    if request.method == "POST":
        form = forms.EditTagForm(
            request.POST, instance=tag, user=request.user)
        saved_tag = form.save_if_valid()
        if saved_tag is not None:
            messages.success(request, u"Saved '{0}'.".format(saved_tag.name))
            pre_page = request.GET.get('from', "manage_tags")
            return redirect(pre_page)
    else:
        form = forms.EditTagForm(instance=tag, user=request.user)
    return TemplateResponse(
        request,
        "manage/tag/edit_tag.html",
        {
            "form": form,
            "tag": tag,
            "hide_multiselect": (tag.product is None),
            }
        )



@never_cache
@login_maybe_required
def tag_autocomplete(request):
    """Return autocomplete list of existing tags in JSON format."""
    text = request.GET.get("text")
    product_id = request.GET.get("product-id")
    if text is not None:
        tags = model.Tag.objects.filter(name__icontains=text)
        if product_id is not None:
            tags = tags.filter(Q(product=product_id) | Q(product=None))
    else:
        tags = []
    suggestions = []
    for tag in tags:
        # can't just use split due to case; we match "text" insensitively, but
        # want pre and post to be case-accurate
        start = tag.name.lower().index(text.lower())
        pre = tag.name[:start]
        post = tag.name[start + len(text):]
        suggestions.append({
                "preText": pre,
                "typedText": text,
                "postText": post,
                "id": tag.id,
                "product-id": tag.product.id if tag.product else None,
                "name": tag.name,
                "type": "tag",
                })
    return HttpResponse(
        json.dumps(
            {
                "suggestions": suggestions
                }
            ),
        content_type="application/json",
        )

########NEW FILE########
__FILENAME__ = urls
"""
URLconf for management pages.

"""
from django.conf.urls.defaults import patterns, url



urlpatterns = patterns(
    "moztrap.view.manage",

    url(r"^$", "views.home", name="manage"),

    # user ------------------------------------------------------------------
    # manage
    url(r"^users/$",
        "users.views.users_list",
        name="manage_users"),

    # add
    url(r"^user/add/$",
        "users.views.user_add",
        name="manage_user_add"),

    # edit
    url(r"^user/(?P<user_id>\d+)/$",
        "users.views.user_edit",
        name="manage_user_edit"),

    # product ---------------------------------------------------------------
    # manage
    url(r"^products/$",
        "products.views.products_list",
        name="manage_products"),

    # ajax details
    url(r"^products/_detail/(?P<product_id>\d+)/$",
        "products.views.product_details",
        name="manage_product_details"),

    # add
    url(r"^product/add/$",
        "products.views.product_add",
        name="manage_product_add"),

    # edit
    url(r"^product/(?P<product_id>\d+)/$",
        "products.views.product_edit",
        name="manage_product_edit"),

    # productversion ---------------------------------------------------------
    # manage
    url(r"^productversions/$",
        "productversions.views.productversions_list",
        name="manage_productversions"),

    # ajax details
    url(r"^productversions/_detail/(?P<productversion_id>\d+)/$",
        "productversions.views.productversion_details",
        name="manage_productversion_details"),

    # add
    url(r"^productversion/add/$",
        "productversions.views.productversion_add",
        name="manage_productversion_add"),

    # edit
    url(r"^productversion/(?P<productversion_id>\d+)/$",
        "productversions.views.productversion_edit",
        name="manage_productversion_edit"),

    # run --------------------------------------------------------------------
    # manage
    url(r"^runs/$",
        "runs.views.runs_list",
        name="manage_runs"),

    # ajax details
    url(r"^runs/_detail/(?P<run_id>\d+)/$",
        "runs.views.run_details",
        name="manage_run_details"),

    # add
    url(r"^run/add/$",
        "runs.views.run_add",
        name="manage_run_add"),

    # edit
    url(r"^run/(?P<run_id>\d+)/$",
        "runs.views.run_edit",
        name="manage_run_edit"),

    # suite ------------------------------------------------------------------
    # manage
    url(r"^suites/$",
        "suites.views.suites_list",
        name="manage_suites"),

    # ajax details
    url(r"^suites/_detail/(?P<suite_id>\d+)/$",
        "suites.views.suite_details",
        name="manage_suite_details"),

    # add
    url(r"^suite/add/$",
        "suites.views.suite_add",
        name="manage_suite_add"),

    # edit
    url(r"^suite/(?P<suite_id>\d+)/$",
        "suites.views.suite_edit",
        name="manage_suite_edit"),

    # testcase ---------------------------------------------------------------
    # manage
    url(r"^cases/$",
        "cases.views.cases_list",
        name="manage_cases"),

    # ajax details
    url(r"^cases/_detail/(?P<caseversion_id>\d+)/$",
        "cases.views.case_details",
        name="manage_case_details"),

    # case id redirect
    url(r"^case/(?P<case_id>\d+)/$",
        "cases.views.case_id_redirect",
        name="manage_case"),

    # add
    url(r"^case/add/$",
        "cases.views.case_add",
        name="manage_case_add"),

    # add bulk
    url(r"^case/add/bulk/$",
        "cases.views.case_add_bulk",
        name="manage_case_add_bulk"),

    # edit
    url(r"^caseversion/(?P<caseversion_id>\d+)/$",
        "cases.views.caseversion_edit",
        name="manage_caseversion_edit"),

    # new version
    url(r"^caseversion/(?P<caseversion_id>\d+)/clone/$",
        "cases.views.caseversion_clone",
        name="manage_caseversion_clone"),

    # tags -------------------------------------------------------------------
    # manage
    url(r"^tags/$",
        "tags.views.tags_list",
        name="manage_tags"),

    # ajax details
    url(r"^tags/_detail/(?P<tag_id>\d+)/$",
        "tags.views.tag_details",
        name="manage_tag_details"),

    # add
    url(r"^tag/add/$",
        "tags.views.tag_add",
        name="manage_tag_add"),

    # edit
    url(r"^tag/(?P<tag_id>\d+)/$",
        "tags.views.tag_edit",
        name="manage_tag_edit"),

    # autocomplete
    url(r"^tags/_autocomplete/",
        "tags.views.tag_autocomplete",
        name="manage_tags_autocomplete"),

    # environments -----------------------------------------------------------
    # manage
    url(r"^profiles/$",
        "environments.views.profiles_list",
        name="manage_profiles"),

    # ajax details
    url(r"^profiles/_detail/(?P<profile_id>\d+)/$",
        "environments.views.profile_details",
        name="manage_profile_details"),

    # add
    url(r"^profile/add/$",
        "environments.views.profile_add",
        name="manage_profile_add"),

    # edit
    url(r"^profile/(?P<profile_id>\d+)/$",
        "environments.views.profile_edit",
        name="manage_profile_edit"),

    # edit productversion environments
    url(r"^productversion/(?P<productversion_id>\d+)/environments/$",
        "environments.views.productversion_environments_edit",
        name="manage_productversion_environments"),

    # narrow run or caseversion environments
    url(r"^(?P<object_type>run|caseversion)/(?P<object_id>\d+)/environments/$",
        "environments.views.narrow_environments",
        name="manage_narrow_environments"),

    # autocomplete
    url(r"^elements/_autocomplete/$",
        "environments.views.element_autocomplete",
        name="manage_environment_autocomplete_elements")
)

########NEW FILE########
__FILENAME__ = filters
"""
Filtering for users.

"""
from moztrap import model
from moztrap.view.lists import filters



class UserFilterSet(filters.FilterSet):
    """FilterSet for Users."""
    filters = [
        filters.ChoicesFilter(
            "active",
            lookup="is_active",
            choices=[(1, "active"), (0, "disabled")],
            coerce=int,
            ),
        filters.KeywordFilter("username"),
        filters.KeywordFilter("email"),
        filters.ModelFilter(
            "role", lookup="groups", queryset=model.Role.objects.all())
        ]

########NEW FILE########
__FILENAME__ = forms
"""
Management forms for users.

"""
import floppyforms as forms

from .... import model

from ...utils import mtforms




class UserForm(mtforms.NonFieldErrorsClassFormMixin, forms.ModelForm):
    """Base form for users."""
    class Meta:
        model = model.User
        fields = ["username", "email", "is_active", "groups"]
        widgets = {
            "username": forms.TextInput,
            "email": forms.TextInput,
            "is_active": forms.CheckboxInput,
            "groups": forms.SelectMultiple,
            }


    def __init__(self, *args, **kwargs):
        """Initialize user form; labels "groups" field as "roles"."""
        super(UserForm, self).__init__(*args, **kwargs)

        self.fields["groups"].label = "roles"



class EditUserForm(UserForm):
    """Form for editing a user."""
    pass



class AddUserForm(UserForm):
    """Form for adding a user."""
    pass

########NEW FILE########
__FILENAME__ = views
"""
Manage views for users.

"""
from django.shortcuts import get_object_or_404, redirect
from django.template.response import TemplateResponse
from django.views.decorators.cache import never_cache

from django.contrib import messages

from moztrap import model

from moztrap.view.lists import decorators as lists
from moztrap.view.users.decorators import permission_required
from moztrap.view.utils.ajax import ajax

from ..finders import ManageFinder

from .filters import UserFilterSet
from . import forms



@never_cache
@permission_required("core.manage_users")
@lists.actions(
    model.User,
    ["delete", "activate", "deactivate"],
    permission="core.manage_users")
@lists.finder(ManageFinder)
@lists.filter("users", filterset_class=UserFilterSet)
@lists.sort("users")
@ajax("manage/user/list/_users_list.html")
def users_list(request):
    """List users."""
    return TemplateResponse(
        request,
        "manage/user/users.html",
        {
            "users": model.User.objects.all(),
            }
        )



@never_cache
@permission_required("core.manage_users")
def user_add(request):
    """Add a user."""
    if request.method == "POST":
        form = forms.AddUserForm(request.POST)
        if form.is_valid():
            user = form.save()
            messages.success(
                request, u"User '{0}' added.".format(
                    user.username)
                )
            return redirect("manage_users")
    else:
        form = forms.AddUserForm()
    return TemplateResponse(
        request,
        "manage/user/add_user.html",
        {
            "form": form
            }
        )



@never_cache
@permission_required("core.manage_users")
def user_edit(request, user_id):
    """Edit a user."""
    user = get_object_or_404(model.User, pk=user_id)
    if request.method == "POST":
        form = forms.EditUserForm(
            request.POST, instance=user)
        if form.is_valid():
            u = form.save()
            messages.success(request, u"Saved '{0}'.".format(u.username))
            pre_page = request.GET.get('from', "manage_users")
            return redirect(pre_page)
    else:
        form = forms.EditUserForm(instance=user)
    return TemplateResponse(
        request,
        "manage/user/edit_user.html",
        {
            "form": form,
            "subject": user,
            }
        )

########NEW FILE########
__FILENAME__ = views
"""
Home management view.

"""
from django.core.urlresolvers import reverse
from django.shortcuts import redirect

from moztrap.view.utils.auth import login_maybe_required



@login_maybe_required
def home(request):
    """Manage home redirects to list of test runs, with finder open."""
    return redirect(reverse("manage_runs") + "?openfinder=1")

########NEW FILE########
__FILENAME__ = markup
"""
Markup-related template tags and filters.

"""
from django import template
from django.utils.encoding import force_unicode
from django.utils.safestring import mark_safe

import markdown2



register = template.Library()



@register.filter
def markdown(text):
    return mark_safe(
        force_unicode(
            markdown2.markdown(text, safe_mode="escape")))
markdown.is_safe = True

########NEW FILE########
__FILENAME__ = owa
"""
Open Web App template tags and filters.

"""
from django import template
from django.core.urlresolvers import reverse



register = template.Library()



@register.filter
def owa_manifest_url(request):
    """Return the full absolute url for the open web app manifest."""
    return request.build_absolute_uri(reverse("owa_manifest"))

########NEW FILE########
__FILENAME__ = urls
"""
URLconf for open web apps

"""
from django.conf.urls.defaults import patterns, url



urlpatterns = patterns(
    "moztrap.view.owa.views",

    # open web apps ----------------------------------------------------------
    url("^manifest.webapp", "manifest", name="owa_manifest"),

)

########NEW FILE########
__FILENAME__ = views
"""
Open Web Apps view.

"""
import json

from django.conf import settings
from django.http import HttpResponse
from django.template.response import TemplateResponse




def manifest(request):
    manifest = {"name": "MozTrap",
                "description": "A Test Case and Results management System.",
                "launch_path": "/",
                "icons": {
                    "126": settings.STATIC_URL + "images/126x126.png"
                 },
                 "developer": {
                    "name": "Mozilla QA",
                    "url": "http://quality.mozilla.org"
                 }
             }
    return HttpResponse(
        json.dumps(manifest),
        content_type="application/x-web-app-manifest+json",
        )

########NEW FILE########
__FILENAME__ = finders
"""
Finder for results pages.

"""
from django.core.urlresolvers import reverse

from ... import model
from ..lists import finder



class CaseColumn(finder.Column):
    """Finder column for case results; goto is to case-results-list."""
    def goto_url(self, obj):
        """Given an object, return its "Goto" url, or None."""
        if self.goto:
            return reverse(self.goto, kwargs={"rcv_id": obj.id})

        return None



class ResultsFinder(finder.Finder):
    template_base = "results/finder"

    columns = [
        finder.Column(
            "products",
            "_products.html",
            model.Product.objects.order_by("name"),
            ),
        finder.Column(
            "productversions",
            "_productversions.html",
            model.ProductVersion.objects.all(),
            "results_runs",
            ),
        finder.Column(
            "runs",
            "_runs.html",
            model.Run.objects.order_by("start"),
            "results_runcaseversions",
            ),
        CaseColumn(
            "cases",
            "_cases.html",
            model.RunCaseVersion.objects.order_by("caseversion__name"),
            "results_results",
            ),
        ]

########NEW FILE########
__FILENAME__ = views
"""
Results views for runcaseversions.

"""
from django.shortcuts import get_object_or_404
from django.template.response import TemplateResponse

from moztrap.view.utils.auth import login_maybe_required

from moztrap import model

from moztrap.view.filters import ResultFilterSet
from moztrap.view.lists import decorators as lists
from moztrap.view.utils.ajax import ajax

from ..finders import ResultsFinder



@login_maybe_required
@lists.finder(ResultsFinder)
@lists.filter("results", filterset_class=ResultFilterSet)
@lists.sort("results")
@ajax("results/result/list/_results_list.html")
def results_list(request, rcv_id):
    """List results for a given runcaseversion."""
    rcv = get_object_or_404(model.RunCaseVersion, pk=rcv_id)
    return TemplateResponse(
        request,
        "results/result/results.html",
        {
            "results": model.Result.objects.filter(
                runcaseversion=rcv).select_related(),
            "runcaseversion": rcv,
            }
        )

########NEW FILE########
__FILENAME__ = views
"""
Results views for runcaseversions.

"""
from django.shortcuts import get_object_or_404
from django.template.response import TemplateResponse

from moztrap.view.utils.auth import login_maybe_required

from moztrap import model

from moztrap.view.filters import RunCaseVersionFilterSet
from moztrap.view.lists import decorators as lists
from moztrap.view.utils.ajax import ajax

from ..finders import ResultsFinder



@login_maybe_required
@lists.finder(ResultsFinder)
@lists.filter("runcaseversions", filterset_class=RunCaseVersionFilterSet)
@lists.sort("runcaseversions")
@ajax("results/case/list/_cases_list.html")
def runcaseversions_list(request):
    """List runcaseversions."""
    return TemplateResponse(
        request,
        "results/case/cases.html",
        {
            "runcaseversions": model.RunCaseVersion.objects.only(
                "caseversion__name",
                "caseversion__case__priority",
                "run__name",
                "run__productversion",
                "run__productversion__version",
                "run__productversion__product__name",
                ).select_related(
                    "results",
                    "run",
                    "run__productversion",
                    "run__productversion__product",
                    "caseversion__case__priority",
                    )
            }
        )



@login_maybe_required
def runcaseversion_details(request, rcv_id):
    """Get details snippet for a runcaseversion."""
    runcaseversion = get_object_or_404(
        model.RunCaseVersion, pk=rcv_id)
    return TemplateResponse(
        request,
        "results/case/list/_case_details.html",
        {
            "runcaseversion": runcaseversion
            }
        )

########NEW FILE########
__FILENAME__ = views
"""
Results views for runs.

"""
from django.shortcuts import get_object_or_404
from django.template.response import TemplateResponse

from moztrap.view.utils.auth import login_maybe_required

from moztrap import model

from moztrap.view.filters import RunFilterSet
from moztrap.view.lists import decorators as lists
from moztrap.view.utils.ajax import ajax

from ..finders import ResultsFinder



@login_maybe_required
@lists.finder(ResultsFinder)
@lists.filter("runs", filterset_class=RunFilterSet)
@lists.sort("runs", "start", "desc")
@ajax("results/run/list/_runs_list.html")
def runs_list(request):
    """List runs."""
    return TemplateResponse(
        request,
        "results/run/runs.html",
        {
            "runs": model.Run.objects.filter(is_series=False).only(
                "name",
                "start",
                "end",
                "productversion",
                "productversion__version",
                "productversion__product__name",
                ).select_related(
                    "productversion",
                    "productversion__product",
                    )
            }
        )



@login_maybe_required
def run_details(request, run_id):
    """Get details snippet for a run."""
    run = get_object_or_404(
        model.Run.objects.prefetch_related(
            "environments",
            "environments__elements"), pk=run_id)
    return TemplateResponse(
        request,
        "results/run/list/_run_details.html",
        {
            "run": run
            }
        )

########NEW FILE########
__FILENAME__ = results
"""
Results-viewing template tags and filters.

"""
import math

from django import template



register = template.Library()



@register.filter
def percentage(val):
    """
    Convert a real number between 0 and 1 to a percentage from 0 to 100.

    Rounds up when under 0.5/50% and down when over. This ensures that the
    endpoints are special; we never call anything "0%" or "100%" unless it
    really is exactly that.

    """
    val = val * 100
    if val > 50:
        val = math.floor(val)
    else:
        val = math.ceil(val)
    return int(val)

########NEW FILE########
__FILENAME__ = urls
"""
URLconf for browse-results pages.

"""
from django.conf.urls.defaults import patterns, url



urlpatterns = patterns(
    "moztrap.view.results",

    url("^$", "views.home", name="results"),

    # runs ------------------------------------------------------------------

    # list
    url(r"^runs/$",
        "runs.views.runs_list",
        name="results_runs"),

    # ajax detail
    url(r"^runs/_detail/(?P<run_id>\d+)/$",
        "runs.views.run_details",
        name="results_run_details"),

    # runcaseversions --------------------------------------------------------

    # list
    url(r"^cases/$",
        "runcaseversions.views.runcaseversions_list",
        name="results_runcaseversions"),

    # ajax detail
    url(r"^cases/_detail/(?P<rcv_id>\d+)/$",
        "runcaseversions.views.runcaseversion_details",
        name="results_runcaseversion_details"),

    # results ----------------------------------------------------------------

    # list
    url(r"^case/(?P<rcv_id>\d+)/$",
        "results.views.results_list",
        name="results_results")
)

########NEW FILE########
__FILENAME__ = views
"""
Home results view.

"""
from django.core.urlresolvers import reverse
from django.shortcuts import redirect

from moztrap.view.utils.auth import login_maybe_required



@login_maybe_required
def home(request):
    """Results home redirects to list of active test runs, with finder open."""
    return redirect(
        reverse("results_runs") + "?openfinder=1&filter-status=active")

########NEW FILE########
__FILENAME__ = finders
"""
Finder for running tests.

"""
from django.core.urlresolvers import reverse

from ... import model
from ..lists import finder



class RunTestsFinder(finder.Finder):
    template_base = "runtests/finder"

    columns = [
        finder.Column(
            "products",
            "_products.html",
            model.Product.objects.order_by("name"),
            ),
        finder.Column(
            "productversions",
            "_productversions.html",
            model.ProductVersion.objects.all(),
            ),
        finder.Column(
            "runs",
            "_runs.html",
            model.Run.objects.filter(
                status=model.Run.STATUS.active,
                # only show stand-alone runs or runs that are a series.
                # don't show runs that are individual members of a series.
                # to run a member of a series, run the series, then specify
                # the build id that has an existing series member for it.
                # Having the series members here would be noisy and confusing.
                series=None,
                ),
            ),
        ]


    def child_query_url(self, obj):
        if isinstance(obj, model.Run):
            return reverse("runtests_environment", kwargs={"run_id": obj.id})
        return super(RunTestsFinder, self).child_query_url(obj)

########NEW FILE########
__FILENAME__ = forms
"""
Forms for test execution.

"""
import json
from django.core.exceptions import ValidationError, ObjectDoesNotExist

import floppyforms as forms

from ... import model


class EnvironmentSelectionForm(forms.Form):
    """Form for selecting an environment."""
    def __init__(self, *args, **kwargs):
        """Accepts ``environments`` queryset and ``current`` env id."""
        environments = kwargs.pop("environments", [])
        current = kwargs.pop("current", None)

        super(EnvironmentSelectionForm, self).__init__(*args, **kwargs)

        # list of categories, ordered by name
        self.categories = []

        # maps category to set of elements
        self.elements_by_category = {}

        # maps environment ID to list of element IDs, ordered by category
        self.elementids_by_envid = {}

        # elements in current environment
        current_elements = []

        env_element_through_model = model.Environment.elements.through
        env_element_relationships = env_element_through_model.objects.filter(
            environment__in=environments).select_related()

        # first construct the ordered list of categories (and current elements)
        cat_set = set()
        for ee in env_element_relationships:
            cat_set.add(ee.element.category)
            if ee.environment.id == current:
                current_elements.append(ee.element)
        self.categories = sorted(cat_set, key=lambda c: c.name)

        num_categories = len(self.categories)

        # populate elements by category and environment
        for ee in env_element_relationships:
            byenv = self.elementids_by_envid.setdefault(
                ee.environment.id, [None] * num_categories)
            category_index = self.categories.index(ee.element.category)
            byenv[category_index] = ee.element.id

            bycat = self.elements_by_category.setdefault(
                ee.element.category, set())
            bycat.add(ee.element)

        # construct choice-field for each env type
        for category in self.categories:
            self.fields["category_{0}".format(category.id)] = forms.ChoiceField(
                choices=[("", "---------")] + [
                    (e.id, e.name) for e in sorted(
                        self.elements_by_category[category],
                        key=lambda e: e.name)
                    ],
                label=category.name,
                required=False)

        # set initial data based on current user environment
        for element in current_elements:
            field_name = "category_{0}".format(element.category.id)
            self.initial[field_name] = element.id


    def clean(self):
        """Validate that selected elements form valid environment."""
        # only act on category_ items.  There may be other fields
        # like "build" in here if a run series is being executed.
        selected_element_ids = set(
            [int(eid) for k, eid in self.cleaned_data.iteritems()
                if k.find("category_") == 0 and eid])
        matches = [
            envid for envid, element_ids in self.elementids_by_envid.items()
            if set([e for e in element_ids if e]).issubset(selected_element_ids)
            ]
        if not matches:
            raise forms.ValidationError(
                "The selected environment is not valid for this test run. "
                "Please select a different combination.")

        self.cleaned_data["environment"] = matches[0]

        return self.cleaned_data


    def save(self):
        """Return selected environment ID."""
        return self.cleaned_data["environment"]


    def valid_environments_json(self):
        """Return lists of element IDs representing valid envs, as JSON."""
        return json.dumps(self.elementids_by_envid.values())


class EnvironmentBuildSelectionForm(EnvironmentSelectionForm):
    """
    Form to select your environment and specify a build.

    This is if the user is running a Run that is a series.  If so, then it
    prompts for a build number::

        1. If the clone of this run with that build number already exists,
            Then execute that run with the specified env.
        2. If it does not exist, then clone this run, set the build field
            and execute it with the env specified.

    """
    build = forms.CharField(max_length=200, required=False)
    fields = ["build"]

    def __init__(self, *args, **kwargs):
        self.run = kwargs.pop("run", None)
        self.build = kwargs.pop("build", None)
        self.user = kwargs.pop("user", None)
        super(EnvironmentBuildSelectionForm, self).__init__(*args, **kwargs)


    def clean_build(self):
        """
        Check that the build value is set.
        """
        if not self.cleaned_data["build"]:
            raise ValidationError("You must specify a build to test.")

        return self.cleaned_data["build"]


    def save(self):
        """Find the run with this build, or create a new one."""
        try:
            this_run = model.Run.objects.get(
                series=self.run,
                build=self.cleaned_data["build"],
                )
        except ObjectDoesNotExist:
            this_run = self.run.clone_for_series(
                build=self.cleaned_data["build"],
                user=self.user,
                )
            this_run.activate()
        # now we need to return this new run as the one to be executed.
        return super(EnvironmentBuildSelectionForm, self).save(), this_run.id

########NEW FILE########
__FILENAME__ = execution
"""Template tags/filters for running tests."""
from django import template

from classytags.core import Tag, Options
from classytags.arguments import Argument

from .... import model



register = template.Library()


class ResultFor(Tag):
    """
    Places Result for this runcaseversion/user/env in context.

    If no relevant Result exists, returns *unsaved* default Result for use in
    template (result will be saved when case is started.)

    """
    name = "result_for"
    options = Options(
        Argument("runcaseversion"),
        Argument("user"),
        Argument("environment"),
        "as",
        Argument("varname", resolve=False),
        )


    def render_tag(self, context, runcaseversion, user, environment, varname):
        """Get/construct Result and place it in context under ``varname``"""
        result_kwargs = dict(
            environment=environment,
            tester=user,
            runcaseversion=runcaseversion,
            is_latest=True,
            )
        try:
            result = model.Result.objects.get(**result_kwargs)
        except model.Result.DoesNotExist:
            result = model.Result(**result_kwargs)
        except model.Result.MultipleObjectsReturned:
            # find the latest one and set it to latest, which will set all
            # others to is_latest=False
            result = model.Result.objects.filter(**result_kwargs).order_by(
                "-modified_on")[0]
            result.set_latest()
            result.save()

        context[varname] = result
        return u""


register.tag(ResultFor)



class OtherResultFor(Tag):
    """
    Places Result for this runcaseversion/env in context for other users.

    """
    name = "other_result_for"
    options = Options(
        Argument("runcaseversion"),
        Argument("user"),
        Argument("environment"),
        "as",
        Argument("varname", resolve=False)
        )


    def render_tag(self, context, runcaseversion, user, environment, varname):
        """Get/construct Result and place it in context under ``varname``"""

        # check for any completed result states from other users for this
        # same case/env combo.
        include_kwargs = dict(
            environment=environment,
            runcaseversion=runcaseversion,
            is_latest=True,
            status__in=(model.Result.COMPLETED_STATES +
                [model.Result.STATUS.skipped]),
            )
        exclude_kwargs = dict(
            tester=user,
            )

        try:
            result = model.Result.objects.only(
                "id",
                "status",
                "tester",
                "comment",
                ).filter(
                    **include_kwargs).exclude(**exclude_kwargs).order_by(
                    "-modified_on")[0]
        except IndexError:
            result = None


        context[varname] = result
        return u""


register.tag(OtherResultFor)



class StepResultFor(Tag):
    """
    Places StepResult for this result/casestep in context.

    If no relevant StepResult exists, returns *unsaved* default StepResult for
    use in template.

    """
    name = "stepresult_for"
    options = Options(
        Argument("result"),
        Argument("casestep"),
        "as",
        Argument("varname", resolve=False),
        )


    def render_tag(self, context, result, casestep, varname):
        """Get/construct StepResult and place it in context under ``varname``"""
        stepresult_kwargs = dict(
            result=result,
            step=casestep,
            )
        try:
            stepresult = model.StepResult.objects.get(**stepresult_kwargs)
        except model.StepResult.DoesNotExist:
            stepresult = model.StepResult(**stepresult_kwargs)

        context[varname] = stepresult
        return u""


register.tag(StepResultFor)



class CompletionFor(Tag):
    """
    Places completion percentage in context.

    """
    name = "completion_for"
    options = Options(
        Argument("run"),
        Argument("environment"),
        "as",
        Argument("varname", resolve=False),
        )


    def render_tag(self, context, run, environment, varname):
        """
        Get/construct completion percentage
        and place it in context under ``varname``
        """
        completion = run.completion_single_env(environment)
        context[varname] = completion
        # context[varname] = "{0}and{1}".format(run, environment)
        # context[varname] = "foo"
        return u""


register.tag(CompletionFor)


class SuitesFor(Tag):
    """Return suite intersection of case and run."""

    name = "suites_for"
    options = Options(
        Argument("run"),
        Argument("runcaseversion"),
        "as",
        Argument("varname", resolve=False),
        )


    def render_tag(self, context, run, runcaseversion, varname):
        """Get/construct Suite list and place it in context under ``varname``"""
        result = model.Suite.objects.filter(cases=runcaseversion.caseversion.case, runs=run)

        context[varname] = result
        return u""


register.tag(SuitesFor)

########NEW FILE########
__FILENAME__ = urls
"""
URLconf for running tests

"""
from django.conf.urls.defaults import patterns, url



urlpatterns = patterns(
    "moztrap.view.runtests.views",

    url(r"^$", "select", name="runtests"),
    url(r"^environment/(?P<run_id>\d+)/$",
        "set_environment",
        name="runtests_environment"),
    url(r"^run/(?P<run_id>\d+)/env/(?P<env_id>\d+)/$",
        "run",
        name="runtests_run"),

)

########NEW FILE########
__FILENAME__ = views
"""
Views for test execution.

"""
import json
from django.db.models import Max

from django.http import HttpResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.template.response import TemplateResponse
from django.views.decorators.cache import never_cache

from django.contrib import messages

from ... import model

from ..filters import RunTestsRunCaseVersionFilterSet
from ..lists import decorators as lists
from ..users.decorators import permission_required
from ..utils.ajax import ajax

from .finders import RunTestsFinder
from .forms import EnvironmentSelectionForm, EnvironmentBuildSelectionForm




@never_cache
@permission_required("execution.execute")
@lists.finder(RunTestsFinder)
def select(request):
    """Select an active test run to execute tests from."""
    return TemplateResponse(
        request,
        "runtests/select.html",
        {}
        )



@never_cache
@permission_required("execution.execute")
@ajax("runtests/_environment_form.html")
def set_environment(request, run_id):
    """Select valid environment for given run and save it in session."""
    run = get_object_or_404(model.Run, pk=run_id)

    try:
        current = int(request.GET.get("environment", None))
    except (TypeError, ValueError):
        current = None
    try:
        build = int(request.GET.get("build", None))
    except (TypeError, ValueError):
        build = None

    form_kwargs = {
        "current": current,
        "environments": run.environments.all().select_related()
        }

    # the run could be an individual, or a series.
    # if it's a series, we need to use the right form
    # that will prompt them for a build number.
    # if a run for this series exists with that build number
    # already, then use that id, otherwise clone this run,
    # set it active and
    # create a new one with the build id set.
    if run.is_series:
        form_kwargs["run"] = run
        form_kwargs["build"] = build
        form_kwargs["user"] = request.user
        form_class = EnvironmentBuildSelectionForm
    else:
        form_class = EnvironmentSelectionForm

    if request.method == "POST":
        # user responding to this form with their selections
        # they may or may not be valid
        form = form_class(request.POST, **form_kwargs)

        if form.is_valid():
            result = form.save()

            # @@@ Carl: seems like there may be a better pattern for this than
            # what I'm doing here.  Any ideas?
            try:
                # If a runid WAS returned, then that would be the new run
                # created for the build of the runseries.
                envid, runid = result
            except TypeError:
                # if no runid was returned, then this is not a runseries, and
                # we should just use the run id from this run.
                envid = result
                runid = run_id
            return redirect("runtests_run", run_id=runid, env_id=envid)
    else:
        # run just specified, prompt user for env and possibly build
        form = form_class(**form_kwargs)

    return TemplateResponse(
        request,
        "runtests/environment.html",
        {
            "envform": form,
            "run": run,
            }
        )



# maps valid action names to default parameters
ACTIONS = {
    "start": {},
    "result_pass": {},
    "result_invalid": {"comment": ""},
    "result_skip": {},
    "result_block": {"comment": ""},
    "result_fail": {"stepnumber": None, "comment": "", "bug": ""},
    "start": {},
    }



@never_cache
@permission_required("execution.execute")
@lists.finder(RunTestsFinder)
@lists.filter("runcaseversions", filterset_class=RunTestsRunCaseVersionFilterSet)
@lists.sort("runcaseversions", defaultfield="order")
@ajax("runtests/list/_runtest_list.html")
def run(request, run_id, env_id):
    run = get_object_or_404(model.Run.objects.select_related("product"), pk=run_id)

    if not run.status == model.Run.STATUS.active:
        messages.info(
            request,
            "That test run is currently not open for testing. "
            "Please select a different test run.")
        return redirect("runtests")

    # if the environment specified in the URL doesn't exist for this run,
    # then ask the user to specify one that does.
    try:
        environment = run.environments.get(pk=env_id)
    except model.Environment.DoesNotExist:
        return redirect("runtests_environment", run_id=run_id)

    if request.method == "POST":
        # Based on this action, create a new Result object with the values we
        # get from the post.

        prefix = "action-"
        while True:
            rcv = None

            try:
                action, rcv_id = [
                    (k[len(prefix):], int(v)) for k, v in request.POST.items()
                    if k.startswith(prefix)
                    ][0]
            except IndexError:
                break

            try:
                defaults = ACTIONS[action].copy()
            except KeyError:
                messages.error(
                    request, "{0} is not a valid action.".format(action))
                break

            try:
                rcv = run.runcaseversions.get(pk=rcv_id)
            except model.RunCaseVersion.DoesNotExist:
                messages.error(
                    request,
                    "{0} is not a valid run/caseversion ID.".format(rcv_id))
                break

            # take the values out of the POST so we can pass them in to the
            # method call on the Result object
            for argname in defaults.keys():
                try:
                    defaults[argname] = request.POST[argname]
                except KeyError:
                    pass

            # put the values specific to this run
            defaults.update({
                "environment": environment,
                "user": request.user,
                })

            getattr(rcv, action)(**defaults)
            break

        if request.is_ajax():
            # if we don't know the runcaseversion id, we return an empty
            # response.
            if rcv is None:
                return HttpResponse(
                    json.dumps({"html": "", "no_replace": True}),
                    content_type="application/json",
                    )
            # by not returning a TemplateResponse, we skip the sort and finder
            # decorators, which aren't applicable to a single case.
            return render(
                request,
                "runtests/list/_runtest_list_item.html",
                {
                    "environment": environment,
                    "runcaseversion": rcv,
                    "run": run
                    }
                )
        else:
            return redirect(request.get_full_path())

    envform = EnvironmentSelectionForm(
        current=environment.id, environments=run.environments.all())

    current_result_select = (
        "SELECT status from execution_result as r "
        "WHERE r.runcaseversion_id = execution_runcaseversion.id "
        "AND r.environment_id = {0} "
        "AND r.status not in ({1}) "
        "AND r.is_latest = 1 "
        "ORDER BY r.created_on DESC LIMIT 1".format(
            environment.id,
            ", ".join(
                ["'{0}'".format(x) for x in model.Result.PENDING_STATES]
                )))

    return TemplateResponse(
        request,
        "runtests/run.html",
        {
            "environment": environment,
            "product": run.productversion.product,
            "productversion": run.productversion,
            "run": run,
            "envform": envform,
            "runcaseversions": run.runcaseversions.select_related(
                "caseversion__case",
                ).prefetch_related(
                    "caseversion__tags",
                    "caseversion__attachments",
                    "caseversion__steps",
                    ).filter(
                        environments=environment,
                        ).extra(select={
                            "current_result": current_result_select}),
            "finder": {
                # finder decorator populates top column (products), we
                # prepopulate the other two columns
                "productversions": model.ProductVersion.objects.filter(
                    product=run.productversion.product),
                "runs": model.Run.objects.order_by("name").filter(
                    productversion=run.productversion,
                    status=model.Run.STATUS.active),
                },
            }
        )

########NEW FILE########
__FILENAME__ = filterset
import json

from django import template

register = template.Library()


@register.tag
def filterset_to_json(parser, token):
    tokens = token.split_contents()
    var_name = tokens[1]
    options = {}
    if len(tokens) >= 3 and tokens[2] == "with":
        for option in tokens[3:]:
            try:
                key, value = option.split("=")
                if value.isdigit():
                    value = int(value)
                else:
                    value = value[1:-1]
            except ValueError:
                key, value = option, None
            options[key] = value
    return FiltersetToJSONNode(var_name, **options)


class FiltersetToJSONNode(template.Node):
    """Convert a form filterset to a big JSON string"""

    def __init__(self, filterset, **options):
        self.filterset = template.Variable(filterset)
        self.options = options

    def render(self, context):
        filterset = self.filterset.resolve(context)
        fields = []
        for field in filterset:
            field_struct = {
                "name": field.name,
                "options": [],
            }
            # additional keys potentially assigned to the fields
            for key in ("key", "cls", "switchable", "is_default_and"):
                if hasattr(field, key):
                    field_struct[key] = getattr(field, key)
            for option in field:
                field_struct["options"].append([
                    option.label,
                    option.selected,
                    option.value
                ])

            fields.append(field_struct)
        data = {
            "options": self.options,
            "fields": fields,
        }
        return json.dumps(data)

########NEW FILE########
__FILENAME__ = mtforms
"""
Form-rendering tags and filters.

"""
from django import forms
from django import template
from django.template.loader import render_to_string



register = template.Library()



@register.filter
def placeholder(boundfield, value):
    """Set placeholder attribute for given boundfield."""
    boundfield.field.widget.attrs["placeholder"] = value
    return boundfield



@register.filter
def label(boundfield, contents=None):
    """Render label tag for given boundfield, optionally with given contents."""
    label_text = contents or boundfield.label
    id_ = boundfield.field.widget.attrs.get('id') or boundfield.auto_id

    return render_to_string(
        "forms/_label.html",
        {
            "label_text": label_text,
            "id": id_,
            "field": boundfield,
            })



@register.filter
def label_text(boundfield):
    """Return the default label text for the given boundfield."""
    return boundfield.label


@register.filter
def value_text(boundfield):
    """Return the value for given boundfield as human-readable text."""
    val = boundfield.value()
    # If choices is set, use the display label
    return unicode(dict(getattr(boundfield.field, "choices", [])).get(val, val))


@register.filter
def values_text(boundfield):
    """Return the values for given multiple-select as human-readable text."""
    val = boundfield.value()
    # If choices is set, use the display label
    choice_dict = dict(getattr(boundfield.field, "choices", []))
    if val:
        return [unicode(choice_dict.get(v, v)) for v in val]
    else:
        return []


@register.filter
def classes(boundfield, classes):
    """Append given classes to the widget attrs of given boundfield."""
    attrs = boundfield.field.widget.attrs
    attrs["class"] = " ".join(
        [c for c in [attrs.get("class", None), classes] if c])
    return boundfield


@register.filter
def optional(boundfield):
    """Return True if given boundfield is optional, else False."""
    return not boundfield.field.required


@register.filter
def attr(boundfield, attrval):
    """
    Given "attr:val" arg, set attr to val on the field's widget.

    If given arg has no colon, set it as a no-value attribute (only works with
    floppyforms widgets).

    """
    try:
        attr, val = attrval.split(":", 1)
    except ValueError:
        attr, val = attrval, False

    boundfield.field.widget.attrs[attr] = val
    return boundfield


@register.filter
def is_checkbox(boundfield):
    """Return True if this field's widget is a CheckboxInput."""
    return isinstance(
        boundfield.field.widget, forms.CheckboxInput)


@register.filter
def is_readonly(boundfield):
    """Return True if this field has a True readonly attribute."""
    return getattr(boundfield.field, "readonly", False)



@register.filter
def is_multiple(boundfield):
    """Return True if this field has multiple values."""
    return isinstance(boundfield.field.widget, forms.SelectMultiple)

########NEW FILE########
__FILENAME__ = permissions
"""
Permission-related tags and filters.

"""
from django import template



register = template.Library()



@register.filter
def has_perm(user, perm):
    """Return True if the user has the given permission, false otherwise."""
    return user.has_perm(perm)

########NEW FILE########
__FILENAME__ = site
"""Template tags/filters for site-level pages."""
from django import template
from django.conf import settings


register = template.Library()


@register.simple_tag
def settings_value(name):
    """Return the requested setting value and place it in context under ``varname``"""
    return getattr(settings, name, "")

########NEW FILE########
__FILENAME__ = urls
"""
Template tags/filters related to URL-handling.

"""
from django.conf import settings
from django.template import Library



register = Library()



@register.filter
def is_url(val):
    """Return True if ``val`` appears to be a URL, False otherwise."""
    return "://" in val



@register.simple_tag
def protocol():
    """
    Return 'https' or 'http', depending on the configuration.

    Keys off the ``SESSION_COOKIE_SECURE`` setting, which should be set to True
    for HTTPS deployments.

    """
    return "https" if settings.SESSION_COOKIE_SECURE else "http"

########NEW FILE########
__FILENAME__ = urls
"""
MozTrap root URLconf.

"""
from django.conf.urls.defaults import patterns, url, include
from django.conf.urls.static import static
from django.conf import settings

from django.contrib import admin

from moztrap.model import mtadmin



admin.site = mtadmin.MTAdminSite()
admin.autodiscover()

import session_csrf
session_csrf.monkeypatch()



urlpatterns = patterns(
    "",
    url(r"^$", "moztrap.view.views.home", name="home"),

    # runtests ---------------------------------------------------------------
    url(r"^runtests/", include("moztrap.view.runtests.urls")),

    # users ------------------------------------------------------------------
    url(r"^users/", include("moztrap.view.users.urls")),

    # manage -----------------------------------------------------------------
    url(r"^manage/", include("moztrap.view.manage.urls")),

    # results ----------------------------------------------------------------
    url(r"^results/", include("moztrap.view.results.urls")),

    # admin ------------------------------------------------------------------
    url(r"^admin/", include(admin.site.urls)),

    # browserid --------------------------------------------------------------
    url(r"^browserid/", include("moztrap.view.users.browserid_urls")),

    # api --------------------------------------------------------------------
    url(r"^api/", include("moztrap.view.api.urls")),

    # open web apps-----------------------------------------------------------
    url("^owa/", include("moztrap.view.owa.urls")),

    ) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

########NEW FILE########
__FILENAME__ = browserid_urls
from django.conf.urls.defaults import patterns, url

from .views import Verify


urlpatterns = patterns(
    "",
    url("^browserid/verify/", Verify.as_view(), name="browserid_verify"),
)

########NEW FILE########
__FILENAME__ = context_processors
"""
Auth-related context processors.

"""
from django.conf import settings



def browserid(request):
    return {"USE_BROWSERID": settings.USE_BROWSERID}

########NEW FILE########
__FILENAME__ = decorators
"""
Auth-related decorators.

"""
from functools import wraps

from django.conf import settings
from django.shortcuts import redirect
from django.utils.decorators import available_attrs

from django.contrib.auth import REDIRECT_FIELD_NAME
from django.contrib.auth.views import redirect_to_login




def permission_required(perm):
    """
    View decorator to check user permissions and redirect as needed.

    If user is logged in but has insufficient permissions, redirects to the
    home page.

    If user is not logged in, redirects to login.

    """
    def decorator(view_func):
        @wraps(view_func, assigned=available_attrs(view_func))
        def _wrapped_view(request, *args, **kwargs):
            if request.user.has_perm(perm):
                return view_func(request, *args, **kwargs)
            if request.user.is_authenticated():
                return redirect("/")
            return redirect_to_login(
                request.get_full_path(),
                settings.LOGIN_URL,
                REDIRECT_FIELD_NAME,
                )
        return _wrapped_view
    return decorator

########NEW FILE########
__FILENAME__ = forms
"""
Account-related forms.

"""
import operator
import random

from django.conf import settings

from django.contrib.auth import forms as auth_forms

import floppyforms as forms
from registration import forms as registration_forms

from moztrap import model



def check_password(pw):
    """
    Enforce password strength rules.

    Returns the password if it passes, otherwises raises ``ValidationError``.

    """
    if len(pw) < settings.MINIMUM_PASSWORD_CHARS:
        raise forms.ValidationError(
            "Your password must be a minimum of {0} characters.".format(
                settings.MINIMUM_PASSWORD_CHARS)
            )
    if (settings.PASSWORD_REQUIRE_ALPHA_NUMERIC and
        not (any(c.isdigit() for c in pw) and any(c.isalpha() for c in pw))
        ):
        raise forms.ValidationError(
            "Your password must contain both letters and numbers.")
    if pw in settings.FORBIDDEN_PASSWORDS:
        raise forms.ValidationError(
            "That password is too easily guessed; please choose a different one.")
    return pw


class SetPasswordFormMixin(object):
    """
    Mixin class for password-changing forms.

    Enforces password strength rules, sets label for password confirmation
    field.

    """
    def __init__(self, *args, **kwargs):
        """After form initialization, change label for new_password2 field."""
        super(SetPasswordFormMixin, self).__init__(*args, **kwargs)

        self.fields["new_password2"].label = "New password (again)"


    def clean_new_password1(self):
        """Enforce minimum password strength rules."""
        return check_password(self.cleaned_data["new_password1"])



class SetPasswordForm(SetPasswordFormMixin, auth_forms.SetPasswordForm):
    pass



class ChangePasswordForm(SetPasswordFormMixin, auth_forms.PasswordChangeForm):
    pass



class RegistrationForm(registration_forms.RegistrationForm):
    """A registration form that enforces our password rules."""
    def clean_password1(self):
        """Enforce minimum password strength rules."""
        return check_password(self.cleaned_data["password1"])


    def clean_email(self):
        """
        Validate that the email is not already in use.

        """
        try:
            model.User.objects.get(email=self.cleaned_data["email"])
        except model.User.DoesNotExist:
            return self.cleaned_data["email"]
        raise forms.ValidationError(u"A user with that email already exists.")



class PasswordResetForm(auth_forms.PasswordResetForm):
    """A password reset form that doesn't reveal valid users."""
    def clean_email(self):
        """No validation that the email address exists."""
        return self.cleaned_data["email"]


    def save(self, *args, **kwargs):
        """Fetch the affected users here before sending reset emails."""
        email = self.cleaned_data["email"]
        # super's save expects self.users_cache to be set.
        self.users_cache = model.User.objects.filter(
            email__iexact=email, is_active=True)

        return super(PasswordResetForm, self).save(*args, **kwargs)



class SetUsernameForm(forms.ModelForm):
    """A form for a user with an auto-username to pick one."""
    username = forms.RegexField(
        regex=r'^[\w.@+-]+$',
        max_length=30,
        label="Username",
        error_messages={
            "invalid": (
                "This value must contain only letters, "
                "numbers and underscores."
                )
            },
        )

    class Meta:
        model = model.User
        fields = ["username"]


    def __init__(self, *args, **kwargs):
        """Clear the initial value of the username field."""
        super(SetUsernameForm, self).__init__(*args, **kwargs)

        self.initial["username"] = ""



OPERATORS = {
    "plus": operator.add,
    "minus": operator.sub,
    "times": operator.mul,
    }

CAPTCHA_SESSION_KEY = "auth_captcha_answer"



class CaptchaAuthenticationForm(auth_forms.AuthenticationForm):
    """
    Login form with a simple math captcha.

    For use when there have been too many failed login attempts from a
    particular IP address or for a particular username. Simply locking users
    out in this case creates a potential Denial of Service vulnerability; a
    captcha allows a human to still log in but makes life more difficult for
    the brute-force attacker.

    Expected answer to captcha is stored in the session; this avoids replay
    attacks and the need to trust client input, at the cost of somewhat higher
    likelihood of spurious failure, e.g. if the user opens up captcha login
    forms in two tabs and then tries to use the first one.

    """
    def __init__(self, *args, **kwargs):
        """Initialize form, including captcha question and expected answer."""
        super(CaptchaAuthenticationForm, self).__init__(*args, **kwargs)

        # get previous expected answer before generating new one
        self.captcha_answer = self.request.session.get(CAPTCHA_SESSION_KEY)

        # only add the captcha field if this request hit the rate limit
        if getattr(self.request, "limited", False):
            a, b = random.randint(1, 9), random.randint(1, 9)
            # avoid negative answers
            if b > a:
                a, b = b, a
            opname, op = random.choice(OPERATORS.items())

            # store the expected answer in the session
            self.request.session[CAPTCHA_SESSION_KEY] = op(a, b)

            self.fields["captcha"] = forms.IntegerField(
                widget=forms.TextInput,
                required=False,
                label=u"What is {0} {1} {2}?".format(a, opname, b),
                )


    def clean_captcha(self):
        """
        Fail form validation if captcha answer is not the expected answer.

        If no expected captcha answer was previously generated (this is the
        request on which they hit the rate limit for the first time) and no
        captcha answer was provided in the POST data, we don't fail them -- if
        they've got the right username and password on the login attempt that
        first hits the rate limit, their login should succeed.

        """
        answer = self.cleaned_data.get("captcha")
        if answer != self.captcha_answer:
            raise forms.ValidationError(
                "Sorry, that's not the answer we were looking for.")

########NEW FILE########
__FILENAME__ = middleware
"""
Authentication-related middleware.

"""
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect

from moztrap.model.core.auth import AUTO_USERNAME_PREFIX

from . import views



class SetUsernameMiddleware(object):
    """Requires users to set their username before using the site."""
    def process_view(self, request, view_func, view_args, view_kwargs):
        """Redirect users with auto-set username to set their username."""
        if (view_func not in (views.set_username, views.logout) and
                request.user.username.startswith(AUTO_USERNAME_PREFIX)):
            return HttpResponseRedirect(reverse("auth_set_username") + "?next=" + request.path)

########NEW FILE########
__FILENAME__ = urls
"""
Account-related URLs.

"""
from django.conf.urls.defaults import patterns, url
from django.views.generic import TemplateView



urlpatterns = patterns(
    "moztrap.view.users.views",

    # auth -------------------------------------------------------------------

    url(r"^login/", "login", name="auth_login"),
    url(r"^logout/", "logout", name="auth_logout"),
    url(r"^password/change/$", "password_change", name="auth_password_change"),
    url(r"^password/reset/$", "password_reset", name="auth_password_reset"),
    url(r"^reset/(?P<uidb36>[0-9A-Za-z]{1,13})-(?P<token>[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$",
        "password_reset_confirm",
        name="auth_password_reset_confirm"),
    url(r"^set_name/$", "set_username", name="auth_set_username"),
    url(r"^(?P<user_id>\d+)/apikey/$", "create_apikey", name="auth_create_apikey"),

    # registration -----------------------------------------------------------

    # Activation keys get matched by \w+ instead of the more specific
    # [a-fA-F0-9]{40} because a bad activation key should still get to the view;
    # that way it can return a sensible "invalid key" message instead of a
    # confusing 404.
    url(r"^activate/(?P<activation_key>\w+)/$",
        "activate",
        name="registration_activate"),
    url(r"^register/$",
        "register",
        name="registration_register"),
    url(r"^register/closed/$",
        TemplateView.as_view(template_name="users/registration_closed.html"),
        name="registration_disallowed"),
    )

########NEW FILE########
__FILENAME__ = views
"""
Account-related views.

"""
from functools import partial

from django.conf import settings
from django.core.urlresolvers import reverse, resolve
from django.http import Http404
from django.shortcuts import redirect, render, get_object_or_404
from django.views.decorators.http import require_POST

from django.contrib.auth import REDIRECT_FIELD_NAME, views as auth_views
from django.contrib.auth.decorators import login_required
from django.contrib import messages

from django_browserid.views import Verify as BaseVerify
from ratelimit.decorators import ratelimit
from registration import views as registration_views
from session_csrf import anonymous_csrf

from moztrap import model
from . import forms



class Verify(BaseVerify):
    """BrowserID verification view."""
    def login_failure(self):
        """Handle a failed login."""
        messages.error(
            self.request,
            "Unable to sign in with that email address; "
            "have you registered an account?"
            )
        return redirect(
            "{0}?{1}={2}".format(
                settings.LOGIN_URL,
                REDIRECT_FIELD_NAME,
                self.request.REQUEST.get(REDIRECT_FIELD_NAME, "/"),
                )
            )


@anonymous_csrf
@ratelimit(field="username", method="POST", rate="5/m")
def login(request):
    # only allow ``next`` redirects to locations within moztrap.
    if "next" in request.GET:
        try:
            resolve(request.GET["next"])
        except Http404:
            q = request.GET.copy()
            q.update({"next": "/"})
            request.GET = q
    kwargs = {
        "template_name": "users/login.html",
        "authentication_form": forms.CaptchaAuthenticationForm,
        }
    if settings.USE_BROWSERID:
        kwargs["template_name"] = "users/browserid_login.html"
    # the contrib.auth login view doesn't pass request into the bound form,
    # but CaptchaAuthenticationForm needs it, so we ensure it's passed in
    if request.method == "POST":
        kwargs["authentication_form"] = partial(
            kwargs["authentication_form"], request)
    return auth_views.login(request, **kwargs)



@require_POST
def logout(request):
    return auth_views.logout_then_login(request)



def password_change(request):
    response = auth_views.password_change(
        request,
        template_name="users/password_change_form.html",
        password_change_form=forms.ChangePasswordForm,
        post_change_redirect=reverse("home")
        )

    if response.status_code == 302:
        messages.success(request, "Password changed.")

    return response



@anonymous_csrf
def password_reset(request):
    response = auth_views.password_reset(
        request,
        password_reset_form=forms.PasswordResetForm,
        template_name="users/password_reset_form.html",
        email_template_name="registration/password_reset_email.txt",
        subject_template_name="registration/password_reset_subject.txt",
        post_reset_redirect=reverse("home")
        )

    if response.status_code == 302:
        messages.success(
            request,
            u"Password reset email sent; check your email."
            u"If you don't receive an email, verify that you are entering the "
            u"email address you signed up with, and try again."
            )

    return response



@anonymous_csrf
def password_reset_confirm(request, uidb36, token):
    response = auth_views.password_reset_confirm(
        request,
        uidb36=uidb36,
        token=token,
        template_name="users/password_reset_confirm.html",
        set_password_form=forms.SetPasswordForm,
        post_reset_redirect=reverse("home")
        )

    if response.status_code == 302:
        messages.success(request, "Password changed.")

    return response



def activate(request, activation_key):
    response = registration_views.activate(
        request,
        activation_key=activation_key,
        backend="registration.backends.default.DefaultBackend",
        template_name="users/activate.html",
        success_url=reverse("home"),
        )

    if response.status_code == 302:
        messages.success(request, "Account activated; now you can login.")

    return response



@anonymous_csrf
def register(request):
    response = registration_views.register(
        request,
        backend="registration.backends.default.DefaultBackend",
        form_class=forms.RegistrationForm,
        template_name="users/registration_form.html",
        success_url=reverse("home"),
        )

    if response.status_code == 302:
        messages.success(
            request, "Check your email for an account activation link.")

    return response



@login_required
def set_username(request):
    # only allow next redirects to places within moztrap.
    next = request.REQUEST.get("next", "/")
    try:
        resolve(next)
    except Http404:
        next = "/"

    if request.method == "POST":
        form = forms.SetUsernameForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            return redirect(next)
    else:
        form = forms.SetUsernameForm(instance=request.user)

    return render(
        request, "users/set_username_form.html", {"form": form, "next": next})



@require_POST
@login_required
def create_apikey(request, user_id):
    """Generate an API key for the given user; redirect to their edit page."""
    user = get_object_or_404(model.User, pk=user_id)
    model.ApiKey.generate(owner=user, user=request.user)

    return redirect("manage_user_edit", user_id=user_id)

########NEW FILE########
__FILENAME__ = ajax
"""
Ajax view decorators.

"""
from functools import wraps


def ajax(template_name):
    """Swaps in an alternative template name for any ajax TemplateResponse."""
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            response = view_func(request, *args, **kwargs)
            if request.is_ajax() and hasattr(response, "template_name"):
                response.template_name = template_name
            return response

        return _wrapped_view

    return decorator

########NEW FILE########
__FILENAME__ = auth
"""
Authentication view decorators.

"""
from django.conf import settings

from django.contrib.auth.decorators import login_required



def login_maybe_required(viewfunc):
    """no-op if settings.ALLOW_ANONYMOUS_ACCESS, else login_required"""
    if settings.ALLOW_ANONYMOUS_ACCESS:
        return viewfunc
    return login_required(viewfunc)

########NEW FILE########
__FILENAME__ = mtforms
"""
Core form widgets, mixins, and fields for MozTrap.

"""
from functools import partial

from django import forms
from django.forms.forms import NON_FIELD_ERRORS
from django.forms.models import ModelChoiceIterator
from django.forms.util import ErrorList
from django.utils.datastructures import MultiValueDict
from django.utils.encoding import force_unicode, StrAndUnicode
from django.utils.html import conditional_escape
from django.utils.safestring import mark_safe

import floppyforms

from moztrap import model
from ..lists import filters



class NonFieldErrorList(ErrorList):
    """A custom ErrorList for non-field errors with "nonfield" HTML class."""
    def as_ul(self):
        if not self:
            return u''
        return mark_safe(u'<ul class="errorlist nonfield">%s</ul>'
                % ''.join([u'<li>%s</li>' % conditional_escape(force_unicode(e)) for e in self]))



class NonFieldErrorsClassFormMixin(object):
    """A Form mixin that uses NonFieldErrorList for non-field errors."""
    def _clean_form(self):
        try:
            self.cleaned_data = self.clean()
        except forms.ValidationError, e:
            self._errors[NON_FIELD_ERRORS] = NonFieldErrorList(e.messages)


    def non_field_errors(self):
        return self.errors.get(NON_FIELD_ERRORS, NonFieldErrorList())



class BareTextarea(floppyforms.Textarea):
    """A Textarea with no rows or cols attributes."""
    def __init__(self, *args, **kwargs):
        super(BareTextarea, self).__init__(*args, **kwargs)
        self.attrs = {}



class SaveIfValidMixin(object):
    """
    Form mixin class providing optimistic-locking-aware save_if_valid method.

    Can be mixed in to any form class with a ``save`` method (that accepts a
    user), a ``self.instance`` attribute, and a ``cc_version`` field.

    """
    def save_if_valid(self, user=None):
        """
        Save and return the instance if the form is valid, None if not valid.

        If the form is otherwise valid but the save fails due to another
        concurrent save getting there first, return None and add an explanatory
        error to self.errors.

        """
        if not self.is_valid():
            return None

        try:
            instance = self.save(user=user)
        except model.ConcurrencyError:
            self._errors[NON_FIELD_ERRORS] = self.error_class(
                [
                    # The link here takes advantage of the fact that an empty
                    # href links to the current page; if they reload a fresh
                    # copy of the current page (an edit form), it will show the
                    # other user's changes.
                    mark_safe(
                        u"Another user saved changes to this object in the "
                        u'meantime. Please <a href="">review their changes</a> '
                        u"and save yours again if they still apply."
                        )
                    ]
                )
            self.data = self.data.copy()
            self.data["cc_version"] = self.instance.cc_version
            return None

        return instance



class MTModelFormMetaclass(forms.models.ModelFormMetaclass):
    def __new__(cls, name, bases, attrs):
        """Construct a MTModelForm subclass; ensure it has cc_version field."""
        meta = attrs.get("Meta")
        if meta:
            fields = getattr(meta, "fields", None)
            if fields is not None and "cc_version" not in fields:
                fields.append("cc_version")
        return super(MTModelFormMetaclass, cls).__new__(cls, name, bases, attrs)



class MTModelForm(SaveIfValidMixin, floppyforms.ModelForm):
    """
    A ModelForm for MTModels.

    Knows about the current user and passes it to model save. Knows about
    optimistic locking, and implements ``save_if_valid`` to allow views to
    correctly handle concurrency errors.

    """
    __metaclass__ = MTModelFormMetaclass


    def __init__(self, *args, **kwargs):
        """Initialize ModelForm. Pull out user kwarg, hide cc_version field."""
        self.user = kwargs.pop("user", None)
        super(MTModelForm, self).__init__(*args, **kwargs)
        self.fields["cc_version"].widget = floppyforms.HiddenInput()


    def save(self, commit=True, user=None):
        """
        Save and return this form's instance.

        If committing, pass user into save(). Can supply user here as well.

        This method can raise ``ConcurrencyError``; calling code not prepared
        to catch and handle ``ConcurrencyError`` should use ``save_if_valid``
        instead.

        """
        assert self.is_valid()

        instance = super(MTModelForm, self).save(commit=False)

        user = user or self.user

        if commit:
            instance.save(user=user)
            self.save_m2m()
        else:
            instance.save = partial(instance.save, user=user)

        return instance



class MTSelect(floppyforms.Select):
    """
    A Select widget for use with ``MTModelChoiceField``.

    Rendered by a template that expects each choice option's label to have an
    ``attrs`` attribute: a dictionary of arbitrary attributes to be assigned to
    the <option> element.

    """
    template_name = "forms/widgets/_select_with_option_attrs.html"



class MTSelectMultiple(floppyforms.SelectMultiple):
    """
    A SelectMultiple widget for use with ``MTModelChoiceField``.

    Rendered by a template that expects each choice option's label to have an
    ``attrs`` attribute: a dictionary of arbitrary attributes to be assigned to
    the <option> element.

    """
    template_name = "forms/widgets/_select_with_option_attrs.html"



class FilteredSelectMultiple(MTSelectMultiple):
    """
    A SelectMultiple widget that provides nice UI for filtering options.

    """
    template_name = (
        "forms/widgets/filtered_select_multiple/_filtered_select_multiple.html")
    listordering_template_name = (
        "forms/widgets/filtered_select_multiple/"
        "_filtered_select_multiple_listordering.html")


    def __init__(self, *args, **kwargs):
        self.filters = kwargs.pop("filters", [])

        choice_template_name = kwargs.pop("choice_template", None)
        if choice_template_name is not None:
            self.choice_template_name = choice_template_name

        listordering_template_name = kwargs.pop("listordering_template", None)
        if listordering_template_name is not None:
            self.listordering_template_name = listordering_template_name

        super(FilteredSelectMultiple, self).__init__(*args, **kwargs)


    def get_context_data(self):
        ctx = super(FilteredSelectMultiple, self).get_context_data()
        ctx["filters"] = filters.FilterSet(self.filters).bind(MultiValueDict())
        try:
            ctx["choice_template"] = self.choice_template_name
        except AttributeError:
            pass
        ctx["listordering_template"] = self.listordering_template_name
        return ctx



class MTModelChoiceIterator(ModelChoiceIterator):
    """
    ModelChoiceIterator for use with ``MTModelChoiceField````.

    Returns a ``SmartLabel`` for each choice, with attrs based on the
    ``choice_attrs`` method of the field.

    """
    def choice(self, obj):
        """Return the choice tuple for the given object."""
        return (
            self.field.prepare_value(obj),
            SmartLabel(
                obj, self.field.label_from_instance, self.field.choice_attrs
                )
            )



class SmartLabel(StrAndUnicode):
    """
    A select-widget option label with smarts: also stores option attributes.

    Allows us to squeeze more data into the "label" half of the label-value
    pair of a multiple-select choice. Behaves like a simple text label if
    coerced to unicode, but also has "attrs" and "obj" attributes to access
    attributes for the choice/option, and the object itself. Useful for
    advanced multi-select widgets.

    """
    def __init__(self, obj, label_from_instance, choice_attrs):
        self.obj = obj
        self.label_from_instance = label_from_instance
        self.choice_attrs = choice_attrs


    def __unicode__(self):
        return self.label_from_instance(self.obj)


    @property
    def attrs(self):
        return self.choice_attrs(self.obj)



def product_id_attrs(obj):
    """A ``choice_attrs`` function to label each item with its product ID."""
    return {"data-product-id": obj.product.id}



class MTModelChoiceField(forms.ModelChoiceField):
    """
    A ModelChoiceField where each choice object's label is a ``SmartLabel``.

    Accepts additional optional keyword arguments ``label_from_instance`` and
    ``choice_attrs``: each should be a one-argument callable that takes a model
    instance and returns suitable label text and a dictionary of choice
    attributes, respectively.

    """
    widget = MTSelect


    def __init__(self, *args, **kwargs):
        """Create field, checking for label_from_instance and choice_attrs."""
        self.custom_label_from_instance = kwargs.pop(
            "label_from_instance", None)

        self.custom_choice_attrs = kwargs.pop("choice_attrs", None)

        super(MTModelChoiceField, self).__init__(*args, **kwargs)


    def label_from_instance(self, obj):
        """Use custom label_from_instance method if provided."""
        if self.custom_label_from_instance is not None:
            return self.custom_label_from_instance(obj)
        return super(MTModelChoiceField, self).label_from_instance(obj)


    def _get_choices(self):
        """Use MTModelChoiceIterator."""
        if hasattr(self, "_choices"):
            return self._choices

        return MTModelChoiceIterator(self)


    choices = property(_get_choices, forms.ChoiceField._set_choices)


    def choice_attrs(self, obj):
        """Get choice attributes for a model instance."""
        if self.custom_choice_attrs is not None:
            return self.custom_choice_attrs(obj)
        return {}



class MTChoiceField(forms.ChoiceField):

    widget = MTSelect

    def valid_value(self, value):
        """
        Skip validation of values.

        The available choices are loaded on the client side, so we have
        nothing to check.

        """
        return True



class MTMultipleChoiceField(forms.MultipleChoiceField,
                                 MTChoiceField):
    widget = MTSelectMultiple



class MTModelMultipleChoiceField(forms.ModelMultipleChoiceField,
                                 MTModelChoiceField):
    widget = MTSelectMultiple



class AutocompleteInput(floppyforms.TextInput):
    """A text input  with a data-autocomplete-url attribute and ul.suggest."""
    template_name = "forms/widgets/_autocomplete_input.html"


    def __init__(self, *args, **kwargs):
        self.url = kwargs.pop("url")
        super(AutocompleteInput, self).__init__(*args, **kwargs)


    def render(self, name, value, attrs=None, extra_context={}):
        attrs = attrs or {}
        attrs["data-autocomplete-url"] = (
            self.url() if callable(self.url) else self.url)
        attrs["autocomplete"] = "off"
        return super(AutocompleteInput, self).render(
            name, value, attrs, extra_context)

########NEW FILE########
__FILENAME__ = querystring
"""
Utilities for dealing with URLs and querystrings.

"""
import urllib
import urlparse


def update_querystring(url, **kwargs):
    """
    Updates the querystring of ``url`` with keys/values in ``kwargs``,
    replacing any existing values for those querystring keys, and removing any
    keys set to None in ``kwargs``. Any values that are lists will be converted
    to multiple querystring keys.

    """
    parts = list(urlparse.urlparse(url))
    queryargs = urlparse.parse_qs(parts[4], keep_blank_values=False)
    for k, v in kwargs.iteritems():
        if v is None:
            del queryargs[k]
        else:
            queryargs[k] = v

    # make sure all the values (such as filter params) are encoded to utf-8
    # in case they have non-ascii characters in them.
    for k, v in queryargs.items():
        if isinstance(v, list):
            queryargs[k] = [x.encode("utf-8") for x in v]

    parts[4] = urllib.urlencode(queryargs, doseq=True)
    return urlparse.urlunparse(parts)

########NEW FILE########
__FILENAME__ = views
"""
MozTrap home view.

"""
from django.shortcuts import redirect

from .utils.auth import login_maybe_required



@login_maybe_required
def home(request):
    """Home view; redirects to run-tests or results depending on permissions."""
    if request.user.has_perm("execution.execute"):
        return redirect("runtests")
    return redirect("results_runs")

########NEW FILE########
__FILENAME__ = update
"""
Deployment for moztrap

Requires commander (https://github.com/oremj/commander) which is installed on
the systems that need it.
"""

import os
import sys

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from commander.deploy import task, hostgroups

import commander_settings as settings

@task
def update_code(ctx, tag):
    with ctx.lcd(settings.SRC_DIR):
        ctx.local("git fetch")
        ctx.local("git pull origin %s" % tag)
        ctx.local("git submodule sync")
        ctx.local("git submodule update --init --recursive")
        ctx.local("find . -type f -name '.gitignore' -or -name '*.pyc' -delete")
        ctx.local("git rev-parse HEAD > media/revision.txt")

@task
def update_assets(ctx):
    with ctx.lcd(settings.SRC_DIR):
        ctx.local("LANG=en_US.UTF-8 python2.6 vendor-manage.py collectstatic --noinput")
        ctx.local("LANG=en_US.UTF-8 python2.6 vendor-manage.py compress")

@task
def database(ctx):
    with ctx.lcd(settings.SRC_DIR):
        ctx.local("python2.6 vendor-manage.py syncdb --migrate")

@task
def checkin_changes(ctx):
    ctx.local(settings.DEPLOY_SCRIPT)


@hostgroups(settings.WEB_HOSTGROUP, remote_kwargs={'ssh_key': settings.SSH_KEY})
def deploy_app(ctx):
    ctx.remote(settings.REMOTE_UPDATE_SCRIPT)
    ctx.remote("/bin/touch %s" % settings.REMOTE_WSGI)


@task
def pre_update(ctx, ref=settings.UPDATE_REF):
    update_code(ref)


@task
def update(ctx):
    update_assets()
    database()


@task
def deploy(ctx):
    pre_update()
    update()
    checkin_changes()
    deploy_app()
########NEW FILE########
__FILENAME__ = admin
"""
Utility base TestCase for testing admin views.

"""
from django.core.urlresolvers import reverse

from .view.base import WebTest



class AdminTestCase(WebTest):
    model_name = None
    app_label = None


    def setUp(self):
        """Set-up for all admin test cases."""
        self.user = self.F.UserFactory.create(
            is_staff=True, is_superuser=True)


    @property
    def changelist_url(self):
        """The changelist URL for this model."""
        return reverse(
            'admin:%s_%s_changelist' % (self.app_label, self.model_name)
            )


    @property
    def add_url(self):
        """The add URL for the given object."""
        return reverse(
            'admin:%s_%s_add' % (self.app_label, self.model_name)
            )


    def change_url(self, obj):
        """The change URL for the given object."""
        return reverse(
            'admin:%s_%s_change' % (self.app_label, self.model_name),
            args=[obj.id]
            )


    def delete_url(self, obj):
        """The delete URL for the given object."""
        return reverse(
            'admin:%s_%s_delete' % (self.app_label, self.model_name),
            args=[obj.id]
            )


    def get(self, url):
        """Make GET request to given URL and return response."""
        return self.app.get(url, user=self.user)


    def post(self, url, data):
        """Make POST request to given URL with ``data``, return response."""
        return self.app.post(url, data, user=self.user)

########NEW FILE########
__FILENAME__ = base
"""
Utility base TestCase classes for testing APIs.

"""
from django.core.urlresolvers import reverse

from tests.case.view import WebTest
from django_webtest import DjangoTestApp
from moztrap.model import API_VERSION
import urllib
import json



class ApiTestCase(WebTest):
    """A test-case for API tests."""
    def get_resource_url(self, url_name, resource_name, params={}):
        """Get a given type of URL for a given resource."""
        kwargs = {
            "resource_name": resource_name,
            "api_name": API_VERSION,
            }
        kwargs.update(params)
        return reverse(url_name, kwargs=kwargs)


    def get_list_url(self, resource_name):
        """Get the list URL for the given resource."""
        return self.get_resource_url("api_dispatch_list", resource_name)


    def get_detail_url(self, resource_name, id):
        """Get the detail URL for the given resource and ID."""
        return self.get_resource_url(
            "api_dispatch_detail",
            resource_name,
            {"pk": id},
            )


    def patch(self, url, payload="", params={}, status=202):
        """Submit a PATCH request and return the response."""
        params.setdefault("format", "json")
        url = "{0}?{1}".format(url, urllib.urlencode(params))
        json_data = json.dumps(payload)
        return self.app.patch(
            url,
            json_data,
            headers={"content-type": "application/json"},
            status=status,
            )


    def post(self, url, payload="", params={}, status=201):
        """Submit a POST request and return the response."""
        params.setdefault("format", "json")
        url = "{0}?{1}".format(url, urllib.urlencode(params))
        json_data = json.dumps(payload)
        return self.app.post(
            url,
            json_data,
            headers={"content-type": "application/json"},
            status=status,
            )

    def put(self, url, data={}, params={}, status=202):
        """Submit a PUT request and return the response."""
        params.setdefault("format", "json")
        url = "{0}?{1}".format(url, urllib.urlencode(params))
        json_data = json.dumps(data)
        return self.app.put(
            url,
            json_data,
            headers={"content-type": "application/json"},
            status=status,
            )

    def get(self, url, params={}, status=200):
        """Submit a GET request and return the response."""
        params.setdefault("format", "json")
        return self.app.get(url, params=params, status=status)


    def delete(self, resource_name, id, params={}, status=200):
        url = self.get_detail_url(resource_name, id)
        url = "{0}?{1}".format(url, urllib.urlencode(params))
        return self.app.delete(url, status=status)


    def get_list(self, params={}, status=200):
        """GET the list URL for this testcase's resource, return response."""
        return self.get(
            self.get_list_url(self.resource_name),
            params=params,
            status=status,
            )


    def get_detail(self, id, params={}, status=200):
        """GET the detail URL for this testcase's resource, return response."""
        return self.get(
            self.get_detail_url(self.resource_name, id),
            params=params,
            status=status,
            )


    def renew_app(self):
        """
        Add support for PATCH method via our custom TestApp subclass.

        This overrides django_webtest/__init.py___.WebTest to renew with our
        custom DjangoAPITestApp, rather than the DjangoTestApp.
        DjangoAPITestApp adds support for the http PATCH method, which is not
        supported in DjangoTestApp.

        """
        self.app = DjangoAPITestApp(extra_environ=self.extra_environ)



class DjangoAPITestApp(DjangoTestApp):
    """A ``DjangoTestApp`` subclass that adds a .patch() method."""

    def patch(self, url, params='', headers=None, extra_environ=None,
             status=None, upload_files=None, expect_errors=False,
             content_type=None):
        """
        Do a PATCH request.  Very like the ``.get()`` method.
        ``params`` are put in the body of the request.

        ``upload_files`` is for file uploads.  It should be a list of
        ``[(fieldname, filename, file_content)]``.  You can also use
        just ``[(fieldname, filename)]`` and the file content will be
        read from disk.

        Returns a ``webob.Response`` object.

        Note: this method is basically copied from the superclass .post()
        method, but using 'PATCH' instead.

        """
        return self._gen_request('PATCH', url, params=params, headers=headers,
                                 extra_environ=extra_environ, status=status,
                                 upload_files=upload_files,
                                 expect_errors=expect_errors,
                                 content_type=content_type)

########NEW FILE########
__FILENAME__ = crud
import time
import urllib
from datetime import datetime
from mock import patch

from django.utils import unittest

from tests.case.api import ApiTestCase

import logging
mozlogger = logging.getLogger('moztrap.test')


class ApiCrudCases(ApiTestCase):
    """Re-usable test cases for Create, Read, Update, and Delete.

    Child classes must implement the following abstract methods:
      - factory(self)                           (property)
      - resource_name(self)                     (property)
      - permission(self)                        (property)
      - new_object_data(self)                   (property)
      - backend_object(self, id)                (method)
      - backend_data(self, backend_object)      (method)

    If any of these properties / methods are called on a child class without
    having implemented them, a NotImplementedError will be thrown.

    The following methods have default behavior, but may be extended:
     - manipulate_edit_data                     (method)
     - read_create_fields                       (property)

    Child classes are may extend setUp() to provide required fixtures.

    The test methods provided by this class are:
      - test_create()
      - test_create_fails_with_wrong_perms()
      - test_read_list()
      - test_read_detail()
      - test_update_detail()
      - test_change_fk_should_error()
      - test_update_without_fk()
      - test_update_list_forbidden()
      - test_update_fails_without_creds()
      - test_delete_detail_permanent()
      - test_delete_detail_soft()
      - test_delete_list_forbidden()
      - test_delete_fails_with_wrong_perms()

    Child classes may override these methods if necessary.
    """


    @property
    def factory(self):
        """The factory to use to create fixtures of the object under test.
        Example: self.F.SuiteFactory()
        """
        raise NotImplementedError


    @property
    def is_abstract_class(self):
        """This is used to keep the tests from running them on the abstract
        class.

        It is needed because the django test collector matches path names to
        /test*.py/, which all matches .py files in the tests/ directory.
        The test framework will run the tests for ApiCrudCases, but all of them
        will return without doing anything or asserting on anything.
        """
        if self.__class__.__name__ == "ApiCrudCases":
            return True
        return False


    @property
    def resource_name(self):
        """String defining the resource name.
        Example: "suite"
        """
        raise NotImplementedError


    @property
    def permission(self):
        """String defining the permission required for
        Create, Update, and Delete.
        Example: "library.manage_suites"
        """
        raise NotImplementedError


    @property
    def wrong_permissions(self):
        """String defining permissions that will NOT work for this object.
        This method will only need to be overwritten in ProductResourceTest.
        """
        if self.__class__.__name__ == "ProductResource":
            raise NotImplementedError
        else:
            return "core.manage_products"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        raise NotImplementedError


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        raise NotImplementedError


    def backend_data(self, backend_object):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        raise NotImplementedError


    def clean_backend_data(self, backend_obj):
        """Returns backend_data, minus any keys not generated by
        new_object_data.
        Use this for comparing to input fields of a POST or PUT.

        Should be extended for objects that have one-to-many foriegn keys.
        """
        data = self.backend_data(backend_obj)
        data.pop("id")
        data.pop("resource_uri")
        return data


    def backend_meta_data(self, backend_obj):
        """Query's the database for the object's current values for:
          - created_on
          - created_by
          - modified_on
          - modified_by
          - deleted_on
          - deleted_by

        Returns a dictionary of these keys and their values.
        Used to verify that the CRUD methods are updating these
        values.
        """
        actual = {}
        try:
            actual["created_by"] = backend_obj.created_by.username
        except AttributeError:
            actual["created_by"] = None
        try:
            actual["modified_by"] = backend_obj.modified_by.username
        except AttributeError:
            actual["modified_by"] = None
        try:
            actual["deleted_by"] = backend_obj.deleted_by.username
        except AttributeError:
            actual["deleted_by"] = None

        actual["created_on"] = backend_obj.created_on
        actual["modified_on"] = backend_obj.modified_on
        actual["deleted_on"] = backend_obj.deleted_on

        return actual


    def manipulate_edit_data(self, fixture, fields):
        """replace the data for the foreign keys with the current values."""

        for fk in self.read_create_fields:
            fields[fk] = unicode(
                self.get_detail_url(fk, str(getattr(fixture, fk).id)))

        return fields


    @property
    def read_create_fields(self):
        """List of fields that are required for create but read-only for update."""
        return []


    @property
    def datetime(self):
        """May be used to provide mostly-unique strings"""
        return datetime.utcnow().isoformat()


    def setUp(self):
        """Set-up for all CRUD test cases.
        Sets the follwing attributes on self:
          - user
          - apikey
          - credentials

        self.credentials can be sent in the params parameter of POST, PUT, and
        DELETE messages, but should not be required for GET messages.

        Also mocks datetime.utcnow() with datetime in self.utcnow.
        """
        if self.is_abstract_class:
            return

        # credentials
        self.user = self.F.UserFactory.create(permissions=[self.permission])
        self.apikey = self.F.ApiKeyFactory.create(owner=self.user)
        self.credentials = {
            "username": self.user.username,
            "api_key": self.apikey.key}

        # mocking
        self.utcnow = datetime(2011, 12, 13, 22, 39)
        patcher = patch("moztrap.model.mtmodel.datetime")
        self.mock_utcnow = patcher.start().datetime.utcnow
        self.mock_utcnow.return_value = self.utcnow
        self.addCleanup(patcher.stop)


    def _id_from_uri(self, uri):
        return uri.split('/')[-2]


    # test cases

    def test_create(self):
        """Creates an object using the API.
        Verifies that the fields sent in the message have been set in
        the database.
        Verifies that the created_on and created_by have been set in
        the database.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_create')

        # get data for creation
        fields = self.new_object_data

        # do the create
        res = self.post(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            )

        # make sure response included detail uri
        object_id = self._id_from_uri(res.headers["location"])
        self.assertIsNotNone(object_id)

        # get data from backend
        backend_obj = self.backend_object(object_id)
        created_object_data = self.clean_backend_data(backend_obj)

        # compare backend data to desired data
        self.maxDiff = None
        mozlogger.debug("actual: %s", created_object_data)
        mozlogger.debug("expected: %s", fields)
        self.assertEqual(created_object_data, fields)

        # make sure meta data is correct
        created_obj_meta_data = self.backend_meta_data(backend_obj)
        self.assertEqual(
            created_obj_meta_data["created_by"], self.user.username)
        self.assertEqual(created_obj_meta_data["created_on"], self.utcnow)
        self.assertEqual(
            created_obj_meta_data["modified_by"], self.user.username)
        self.assertEqual(created_obj_meta_data["modified_on"], self.utcnow)


    def test_create_fails_with_wrong_perms(self):
        """Attempts to create an object using a user who has the wrong perms.
        Verifies that the POST message gets a 401 response.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_create_fails_with_wrong_perms')

        # get data for creation
        fields = self.new_object_data

        # get user with wrong permissions
        user = self.F.UserFactory.create(permissions=[self.wrong_permissions])
        apikey = self.F.ApiKeyFactory.create(owner=self.user)
        credentials = {"username": user.username, "api_key": apikey.key}

        res = self.post(
            self.get_list_url(self.resource_name),
            params=credentials,
            payload=fields,
            status=401,
            )


    def test_read_list(self):
        """Performs a GET on the list without credentials.
        Verifies that the meta data returned by the API is correct.
        Verifies that the objects returned by the API have the correct data.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_read_list')

        # create fixture
        fixture1 = self.factory
        fixture2 = self.factory

        # fetch list (ordered so assert won't flake)
        res = self.get_list(params={'order_by': 'id'})  # no creds

        act = res.json

        act_meta = act["meta"]
        exp_meta = {
            u"limit": 20,
            u"next": None,
            u"offset": 0,
            u"previous": None,
            u"total_count": 2,
            }

        self.assertEquals(act_meta, exp_meta)

        act_objects = act["objects"]
        exp_objects = [
            self.backend_data(fixture1),
            self.backend_data(fixture2)
            ]

        self.maxDiff = None
        self.assertEqual(exp_objects, act_objects)


    def _test_filter_list_by(self, key, value, expected_number_of_results):
        """Performs a get on the list with the supplied filter.
        Validates that the results meet the criteria.

        ::example::

        self._test_filter_list_by(u'name', u'foo', 1)
        self._test_filter_list_by(u'product', u'', 3)
        """

        res = self.get_list(params={key: value, u'limit': 100})
        objects = res.json["objects"]

        # validate
        self.assertEqual(len(objects), expected_number_of_results)
        for obj in objects:
            if value:
                # can't use assertEqual here because for foriegn keys,
                # the filter must be an id
                # but the value in the response is an uri
                self.assertTrue(str(value) in obj[key])
            else:
                # case for value being None
                self.assertEqual(value, obj[key])


    def test_read_detail(self):
        """Performs a GET on the object detail without credentials.
        Verifies that the object returned by the API has the correct data.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_read_detail')

        # create fixture
        fixture1 = self.factory

        # fetch detail
        res = self.get_detail(fixture1.id)  # no creds

        actual = res.json

        expected = self.backend_data(fixture1)

        self.maxDiff = None
        self.assertEqual(expected, actual)


    def test_update_detail(self):
        """Performs a PUT on the object detail.
        Verifies that the values in the database entry for the object has
        been updated.
        Verifies that the object's modified_on and modified_by have been
        updated.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_update_detail')

        # create fixture
        fixture1 = self.factory
        # change modified on to 2 hours earlier than utcnow
        fixture1.modified_on = datetime(2011, 12, 13, 20, 39)
        meta_before = self.backend_meta_data(fixture1)
        obj_id = str(fixture1.id)
        fields = self.new_object_data

        # make read-only fields unchanging
        fields = self.manipulate_edit_data(fixture1, fields)

        # do put
        res = self.put(
            self.get_detail_url(self.resource_name, obj_id),
            params=self.credentials,
            data=fields
            )

        # make sure object has been updated in the database
        fixture1 = self.refresh(fixture1)
        backend_data = self.clean_backend_data(fixture1)

        self.maxDiff = None
        self.assertEqual(fields, backend_data)

        # make sure 'modified' meta data has been updated
        meta_after = self.backend_meta_data(fixture1)
        self.assertEqual(meta_after["modified_by"], self.user.username)
        self.assertEqual(meta_after["modified_on"], self.utcnow)
        self.assertNotEqual(
            meta_before['modified_on'], meta_after['modified_on'])


    def test_change_fk_should_error(self):
        """Trying to change a read-only foreign key should result in a 400 error."""

        if self.is_abstract_class:
            return

        for fk in self.read_create_fields:
            mozlogger.info('test_change_fk_should_error %s' % fk)

            # create fixture
            fixture1 = self.factory
            obj_id = str(fixture1.id)
            fields = self.new_object_data

            # make sure only the fk under test is inappropriate
            if len(self.read_create_fields) > 1:
                fk_value = fields[fk]
                fields = self.manipulate_edit_data(fixture1, fields)
                fields[fk] = fk_value

            # do put
            res = self.put(
                self.get_detail_url(self.resource_name, obj_id),
                params=self.credentials,
                data=fields,
                status=400,
            )

            assert res.text == str(
                "%s of an existing %s " % (fk, self.resource_name) +
                "may not be changed.")



    def test_update_without_fk(self):
        """fk's cannot be changed, so they are not required on edit."""

        if self.is_abstract_class:
            return

        # fixtures
        fixture1 = self.factory

        for fk in self.read_create_fields:
            mozlogger.info('test_update_without_fk {0}'.format(fk))

            fields = self.backend_data(fixture1)
            fields = self.manipulate_edit_data(fixture1, fields)
            fields.pop(fk)

            # do put
            res = self.put(
                self.get_detail_url(self.resource_name, fixture1.id),
                params=self.credentials,
                data=fields,
            )


    def test_update_list_forbidden(self):
        """Attempts to PUT to the list uri.
        Verifies that the request is rejected with a 405 error.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_update_list_forbidden')

        # create fixturs
        fixture1 = self.factory
        fixture2 = self.factory

        backend_obj1 = self.backend_object(fixture1.id)
        backend_obj2 = self.backend_object(fixture2.id)
        fields1 = self.backend_data(backend_obj1)
        fields2 = self.backend_data(backend_obj2)
        fields1.update(self.new_object_data)
        fields2.update(self.new_object_data)
        data = [fields1, fields2]

        # do put
        res = self.put(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            data=data,
            status=405
            )


    def test_update_fails_without_creds(self):
        """Attempts to PUT to the object detail uri without credentials.
        Verifies that the request is denied with a 401 error.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_update_fails_without_creds')

        # create fixture
        fixture1 = self.factory
        backend_obj = self.backend_object(fixture1.id)
        obj_id = str(fixture1.id)
        fields = self.backend_data(backend_obj)
        fields.update(self.new_object_data)

        # do put
        res = self.put(
            self.get_detail_url(self.resource_name, obj_id),
            data=fields,
            status=401,
            )


    def test_delete_detail_permanent(self):
        """Tests that an object can be deleted permanently.
        Verifies that the object no longer appears in the database after
        the delete.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_delete_detail_permanent')

        # create fixture
        fixture1 = self.factory
        obj_id = str(fixture1.id)

        # check meta data before
        meta_before_delete = self.backend_meta_data(
            self.backend_object(obj_id))
        self.assertIsNone(meta_before_delete["deleted_on"])
        self.assertIsNone(meta_before_delete["deleted_by"])

        # do delete
        params = self.credentials
        params.update({"permanent": True})
        self.delete(self.resource_name, obj_id, params=params, status=204)

        from django.core.exceptions import ObjectDoesNotExist

        with self.assertRaises(ObjectDoesNotExist):
            meta_after_delete = self.backend_meta_data(
                self.backend_object(obj_id))


    def test_delete_detail_soft(self):
        """Tests that an object can be 'soft' deleted.
        Verifies that the object still exists in the database.
        Verifies that the object's deleted_by and deleted_on properties have
        been set.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_delete_detail_soft')

        # create fixture
        fixture1 = self.factory
        obj_id = str(fixture1.id)
        backend_obj = self.backend_object(obj_id)
        # set created_on to 2 hours earlier than utcnow
        backend_obj.created_on = datetime(2011, 12, 13, 20, 39)

        # check meta data before
        meta_before_delete = self.backend_meta_data(backend_obj)
        self.assertIsNone(meta_before_delete["deleted_on"])
        self.assertIsNone(meta_before_delete["deleted_by"])

        # do delete
        self.delete(
            self.resource_name,
            obj_id,
            params=self.credentials,
            status=204)

        # check meta data after
        meta_after_delete = self.backend_meta_data(
            self.backend_object(obj_id))
        self.assertEqual(meta_after_delete["deleted_on"], self.utcnow)
        self.assertEqual(meta_after_delete["deleted_by"], self.user.username)
        self.assertNotEqual(
            meta_before_delete["deleted_on"], meta_after_delete["deleted_on"])


    def test_delete_list_forbidden(self):
        """Attempts to send a DELETE message to the list uri.
        Verifies that the message recieves a 405 error.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_delete_list_forbidden')

        url = self.get_list_url(self.resource_name)
        url = "{0}?{1}".format(url, urllib.urlencode(self.credentials))
        self.app.delete(url, status=405)


    def test_delete_fails_with_wrong_perms(self):
        """Attempts to send a DELETE message with the wrong credentials.
        Verifies that the message recieves a 401 error.
        Verifies that object still exists.
        Verifies that delete meta data has not been set on object.
        """
        if self.is_abstract_class:
            return
        mozlogger.info('test_delete_fails_with_wrong_perms')

        # create fixture
        fixture1 = self.factory
        obj_id = str(fixture1.id)

        # get user with wrong permissions
        user = self.F.UserFactory.create(permissions=[self.wrong_permissions])
        apikey = self.F.ApiKeyFactory.create(owner=user)
        credentials = {"username": user.username, "api_key": apikey.key}

        # do delete
        self.delete(self.resource_name, obj_id, params=credentials, status=401)

        # make sure object is still found
        backend_obj = self.backend_object(obj_id)

        # and delete meta data has not been set
        meta_after_delete = self.backend_meta_data(backend_obj)
        self.assertIsNone(meta_after_delete["deleted_on"])
        self.assertIsNone(meta_after_delete["deleted_by"])

########NEW FILE########
__FILENAME__ = base
"""
Utility base TestCase classes for MozTrap.

"""
from django import test as django_test
from django.utils import unittest

import mock



class DBMixin(object):
    """Mixin for MozTrap test case classes that need the database."""
    @property
    def model(self):
        """The data model."""
        from moztrap import model
        return model


    @property
    def F(self):
        """The model factories."""
        from tests import factories
        return factories


    def refresh(self, obj):
        """
        Return the given object as it currently exists in the database.

        """
        return obj.__class__._base_manager.get(pk=obj.pk)




class DBTestCase(DBMixin, django_test.TestCase):
    """Base test case class for MozTrap tests that need the database."""
    pass



class TransactionTestCase(DBMixin, django_test.TransactionTestCase):
    """Base test case class for tests testing transactional behavior."""
    pass



cursor_wrapper = mock.Mock()
cursor_wrapper.side_effect = RuntimeError("No touching the database!")


class TestCase(unittest.TestCase):
    """This test case will blow up if the database is accessed."""

    @mock.patch("django.db.backends.util.CursorWrapper", cursor_wrapper)
    def run(self, *args, **kwargs):
        return super(TestCase, self).run(*args, **kwargs)

########NEW FILE########
__FILENAME__ = base
"""
Utility base TestCase classes for testing views.

"""
from django.conf import settings
from django.core.urlresolvers import reverse

from BeautifulSoup import BeautifulSoup
import django_webtest
import django_webtest.backends

from moztrap import model

from ...utils import Url
from ..base import DBMixin



class WebtestUserBackend(django_webtest.backends.WebtestUserBackend):
    """A version of WebtestUserBackend that returns our proxy User model."""
    def authenticate(self, django_webtest_user):
        """
        The username passed as ``remote_user`` is considered trusted.  This
        method simply returns the ``User`` object with the given username,
        creating a new ``User`` object if ``create_unknown_user`` is ``True``.

        Returns None if ``create_unknown_user`` is ``False`` and a ``User``
        object with the given username is not found in the database.
        """
        if not django_webtest_user:
            return
        user = None
        username = self.clean_username(django_webtest_user)

        # Note that this could be accomplished in one try-except clause, but
        # instead we use get_or_create when creating unknown users since it has
        # built-in safeguards for multiple threads.
        if self.create_unknown_user:
            user, created = model.User.objects.get_or_create(username=username)
            if created:
                user = self.configure_user(user)
        else:
            try:
                user = model.User.objects.get(username=username)
            except model.User.DoesNotExist:
                pass
        return user


    def get_user(self, user_id):
        """Return instances of our User model."""
        try:
            return model.User.objects.get(pk=user_id)
        except model.User.DoesNotExist:
            return None




class WebTest(DBMixin, django_webtest.WebTest):
    """Fix WebTest so it works with django-session-csrf, mixin db utilities."""
    def _setup_auth_backend(self):
        """Use our subclass of the remote user backend."""
        backend_name = 'tests.case.view.base.WebtestUserBackend'
        settings.AUTHENTICATION_BACKENDS.insert(0, backend_name)


    def _setup_auth_middleware(self):
        """
        Monkeypatch remote-user-auth middleware into MIDDLEWARE_CLASSES.

        Places remote-user-auth middleware before session-csrf middleware, so
        session-csrf sees the authenticated user.

        """
        auth_middleware = "django_webtest.middleware.WebtestUserMiddleware"
        session_csrf_middleware = "session_csrf.CsrfMiddleware"
        index = settings.MIDDLEWARE_CLASSES.index(session_csrf_middleware)
        settings.MIDDLEWARE_CLASSES.insert(index, auth_middleware)



class ViewTestCase(WebTest):
    """Add some utility assertions and methods."""
    # subclasses should provide a url property
    url = None


    def assertRedirects(self, response, path, status_code=302):
        """An assertRedirects that works with WebTest."""
        self.assertEqual(response.status_int, status_code)

        self.assertEqual(
            Url(response.headers["Location"]),
            Url("http://localhost:80" + path)
            )


    def assertElement(self, html, element, *args, **kwargs):
        """
        Assert that an element is in an HTML snippet some number of times.

        ``html`` is either an HTML string or a BeautifulSoup object.

        ``element`` is the HTML tag name; extra arguments and keyword arguments
        are passed on to BeautifulSoup as attribute selectors.

        ``count`` keyword arg specifies the number of elements matching the
        spec that are expected to be found; defaults to 1.

        """
        count = kwargs.pop("count", 1)
        if isinstance(html, basestring):
            html = BeautifulSoup(html)
        actual = len(html.findAll(element, *args, **kwargs))
        self.assertEqual(
            actual,
            count,
            "Element {0}({1}, {2}) is present {3} times, not {4}. "
            "Full HTML: {5}".format(
                element, args, kwargs, actual, count, html)
            )


    def get(self, **kwargs):
        """Shortcut for getting url; supports `ajax` boolean kwarg."""
        if kwargs.pop("ajax", False):
            kwargs.setdefault("headers", {}).setdefault(
                "X-Requested-With", "XMLHttpRequest")
        return self.app.get(self.url, **kwargs)



class AuthenticatedViewTestCase(ViewTestCase):
    """Base test case for authenticated views."""
    def setUp(self):
        """Set-up for authenticated view test cases; create a user."""
        self.user = self.F.UserFactory.create()


    def get(self, **kwargs):
        """Shortcut for getting url, authenticated."""
        kwargs.setdefault("user", self.user)
        return super(AuthenticatedViewTestCase, self).get(**kwargs)


    def post(self, data, **kwargs):
        """Shortcut for posting to url, authenticated."""
        kwargs.setdefault("user", self.user)
        return self.app.post(self.url, data, **kwargs)


    def add_perm(self, codename):
        """Add named permission to user."""
        perm = self.model.Permission.objects.get(codename=codename)
        self.user.user_permissions.add(perm)


    def test_login_required(self):
        """Requires login."""
        res = self.app.get(self.url, status=302)

        self.assertRedirects(res, reverse("auth_login") + "?next=" + self.url)



class FormViewTestCase(AuthenticatedViewTestCase):
    """Base class for testing any authenticated view with a form."""
    # subclasses should override
    form_id = None


    def get_form(self, *args, **kwargs):
        """Get the manage list form; passes args/kwargs on to self.get()."""
        return self.get(*args, **kwargs).forms[self.form_id]



class ListViewTestCase(AuthenticatedViewTestCase):
    """Base class for testing list views."""
    # subclasses should specify these:
    factory = None       # factory for creating objects in this list
    name_attr = "name"   # char attribute that should appear in list


    def soup(self, response):
        """
        Given an HTML or JSON response, return a BeautifulSoup object.

        If the response is JSON, looks for the "html" key.

        """
        if "html" in response.content_type:
            html = response.html
        elif "json" in response.content_type:
            html = BeautifulSoup(response.json["html"])
        else:
            self.fail(
                "Response content-type {0} is neither JSON nor HTML.".format(
                    response.content_type)
                )

        return html


    def assertInList(self, response, name, count=1):
        """Assert that item ``name`` is in the list ``count`` times."""
        soup = self.soup(response)
        itemlist = soup.find(True, "itemlist")
        if itemlist is None:
            self.fail("itemlist not found in: {0}".format(soup))
        self.assertElement(
            itemlist,
            "h3",
            title=name,
            count=count
            )


    def assertIdInList(self, response, id, count=1):
        """Assert that article's ``id`` is in the list ``count`` times."""
        soup = self.soup(response)
        itemlist = soup.find(True, "itemlist")
        if itemlist is None:
            self.fail("itemlist not found in: {0}".format(soup))
        self.assertElement(
            itemlist,
            "article",
            id=id,
            count=count
        )


    def assertNotInList(self, response, name):
        """Assert that item ``name`` is not in the list."""
        self.assertInList(response, name, 0)


    def assertIdNotInList(self, response, id):
        """Assert that item ``name`` is not in the list."""
        self.assertIdInList(response, id, 0)


    def assertOrderInList(self, response, *names):
        """Assert that ``names`` appear in list in given order."""
        soup = self.soup(response)

        all_names = [el.text for el in soup.findAll("h3", title=True)]

        indices = []

        for name in names:
            try:
                indices.append((all_names.index(name), name))
            except ValueError:
                self.fail("{0} does not appear in list.".format(name))

        actual_order = sorted(indices, key=lambda t: t[0])

        self.assertEqual(
            [t[1] for t in actual_order],
            [t[1] for t in indices],
            )


    def test_list(self):
        """Displays a list of objects."""
        self.factory(**{self.name_attr: "Foo Bar"})

        res = self.get()

        self.assertInList(res, "Foo Bar")



class ListFinderTests(object):
    """Extra tests for manage lists with finder."""
    def test_finder(self):
        """Finder is present in context with list of products."""
        p = self.F.ProductFactory.create(name="Foo Product")

        res = self.get()

        res.mustcontain("Foo Product")
        res.mustcontain(
            "data-sub-url="
            '"?finder=1&amp;col=productversions&amp;id={0}"'.format(p.id))


    def test_finder_ajax(self):
        """Finder intercepts its ajax requests to return child obj lists."""
        pv = self.F.ProductVersionFactory.create(version="1.0.1")

        res = self.get(
            params={
                "finder": "1",
                "col": "productversions",
                "id": str(pv.product.id)
                },
            headers={"X-Requested-With": "XMLHttpRequest"},
            )

        self.assertIn("1.0.1", res.json["html"])
        self.assertIn(
            'data-sub-url="?finder=1&amp;col=runs&amp;id={0}"'.format(pv.id),
            res.json["html"]
            )



class NoCacheTest(object):
    """Test that a given view marks it's responses as uncacheable."""
    def test_never_cache(self):
        res = self.get()

        self.assertEqual(res.headers["Cache-Control"], "max-age=0")

########NEW FILE########
__FILENAME__ = manage
"""
Utility base TestCase classes for testing manage views.

"""
from datetime import datetime

from . import base



class ListViewTestCase(base.FormViewTestCase, base.ListViewTestCase):
    """Base class for testing manage list views."""
    # subclasses should specify these:
    perm = None          # required management permission codename


    def assertActionRequiresPermission(self, action, permission=None):
        """Assert that the given list action requires the given permission."""
        if permission is None:
            permission = self.perm

        o = self.factory.create()

        form = self.get_form()

        name = "action-{0}".format(action)

        # action button not shown to the user
        self.assertTrue(name not in form.fields)

        # ...but if they cleverly submit it anyway they get a 403...
        res = self.post(
            {
                name: str(o.id),
                "csrfmiddlewaretoken":
                    form.fields.get("csrfmiddlewaretoken")[0].value
                },
            status=403,
            )

        # ...with a message about permissions.
        res.mustcontain("permission")


    def test_delete(self):
        """Can delete objects from list."""
        self.add_perm(self.perm)

        o = self.factory.create()

        self.get_form().submit(
            name="action-delete",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"}
            )

        self.assertTrue(bool(self.refresh(o).deleted_on))


    def test_delete_requires_permission(self):
        """Deleting requires appropriate permission."""
        self.assertActionRequiresPermission("delete")


    def test_create_link(self):
        """With proper perm, create link is there."""
        self.add_perm(self.perm)
        res = self.get()

        self.assertElement(res.html, "a", "create")


    def test_create_link_requires_perms(self):
        """Without proper perm, create link is not there."""
        res = self.get()

        self.assertElement(res.html, "a", "create", count=0)



class MTModelListTests(object):
    """Additional manage list view tests for MTModels."""
    def test_clone(self):
        """Can clone objects in list."""
        self.add_perm(self.perm)

        self.factory.create()

        res = self.get_form().submit(
            name="action-clone",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            )

        self.assertElement(
            res.json["html"], "h3", "title", count=2)


    def test_clone_requires_permission(self):
        """Cloning requires appropriate permission."""
        self.assertActionRequiresPermission("clone")


    def test_filter_by_creator(self):
        """Can filter by creator."""
        self.factory.create(name="Foo 1", user=self.user)
        self.factory.create(name="Foo 2")

        res = self.get(params={"filter-creator": self.user.id})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_default_sort_by_last_created(self):
        """Default sort is by latest created first."""
        self.factory.create(
            name="Foo 1", created_on=datetime(2012, 1, 21))
        self.factory.create(
            name="Foo 2", created_on=datetime(2012, 1, 22))

        res = self.get()

        self.assertOrderInList(res, "Foo 2", "Foo 1")



class StatusListTests(object):
    """Extra tests for manage lists with activated/deactivate actions."""
    def test_activate(self):
        """Can activate objects in list."""
        self.add_perm(self.perm)

        s = self.factory.create(status="draft")

        self.get_form().submit(
            name="action-activate",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            )

        self.assertEqual(self.refresh(s).status, "active")


    def test_activate_requires_permission(self):
        """Activating requires appropriate permission."""
        self.assertActionRequiresPermission("activate", self.perm)


    def test_draft(self):
        """Can make-draft objects in list."""
        self.add_perm(self.perm)

        s = self.factory.create(status="active")

        self.get_form().submit(
            name="action-draft",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            )

        self.assertEqual(self.refresh(s).status, "draft")


    def test_draft_requires_permission(self):
        """Resetting to draft requires appropriate permission."""
        self.assertActionRequiresPermission("draft", self.perm)


    def test_deactivate(self):
        """Can deactivate objects in list."""
        self.add_perm(self.perm)

        s = self.factory.create(status="active")

        self.get_form().submit(
            name="action-deactivate",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            )

        self.assertEqual(self.refresh(s).status, "disabled")


    def test_deactivate_requires_permission(self):
        """Deactivating requires appropriate permission."""
        self.assertActionRequiresPermission("deactivate", self.perm)

########NEW FILE########
__FILENAME__ = test_middleware
from django.core.exceptions import MiddlewareNotUsed

from django.test.utils import override_settings
from mock import patch, Mock

from tests import case



class AjaxTracebackMiddlewareTest(case.TestCase):
    @property
    def middleware(self):
        from moztrap.debug.middleware import AjaxTracebackMiddleware
        return AjaxTracebackMiddleware


    @override_settings(DEBUG=True)
    def test_used_in_DEBUG(self):
        self.middleware()


    @override_settings(DEBUG=False)
    def test_not_used_when_DEBUG_off(self):
        with self.assertRaises(MiddlewareNotUsed):
            self.middleware()


    @override_settings(DEBUG=True)
    def test_process_exception(self):
        """
        process_exception ajax response: traceback with <br>s inserted.

        """
        m = self.middleware()

        request = Mock()
        request.is_ajax.return_value = True

        with patch("traceback.format_exc") as format_exc:
            format_exc.return_value = "some\ntraceback"
            response = m.process_exception(request)

        self.assertEqual(response.content, "some<br>\ntraceback")


    @override_settings(DEBUG=True)
    def test_process_exception_non_ajax(self):
        """
        process_exception does nothing for non-ajax requests.

        """
        m = self.middleware()

        request = Mock()
        request.is_ajax.return_value = False

        self.assertIs(m.process_exception(request), None)

########NEW FILE########
__FILENAME__ = test_paths
"""
Tests for deployment path-munging functions.

"""
import os.path

from mock import patch

from tests import case



class AddVendorLibTest(case.TestCase):
    """
    Tests for the ``add_vendor_lib`` function.

    """
    def add_vendor_lib(self):
        """Import and call the function."""
        from moztrap.deploy.paths import add_vendor_lib
        add_vendor_lib()


    def setUp(self):
        """
        Patch sys.path and site.addsitedir so function has no global impact.

        """
        patcher = patch("moztrap.deploy.paths.sys.path", ["/some/path"])
        self.sys_path = patcher.start()
        self.addCleanup(patcher.stop)

        patcher = patch("moztrap.deploy.paths.site.addsitedir")
        self.addsitedir = patcher.start()
        self.addCleanup(patcher.stop)


    def test_calls_addsitedir(self):
        """Calls site.addsitedir on vendor lib dir."""
        vendor_lib = os.path.abspath(
            os.path.join(
                os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
                "requirements", "vendor", "lib", "python"))

        self.add_vendor_lib()

        self.addsitedir.assert_called_with(vendor_lib)


    def test_moves_new_paths_to_front(self):
        """Paths added are moved to front of sys.path."""
        # mock addsitedir as simply adding given path to end of sys.path
        self.addsitedir.side_effect = lambda p: self.sys_path.append(p)

        self.add_vendor_lib()

        # but add_vendor_lib moves it to the beginning
        self.assertEqual(self.sys_path[-1], "/some/path")

########NEW FILE########
__FILENAME__ = factories
"""
Model factories.

"""
import itertools

from django.core.files.uploadedfile import SimpleUploadedFile

import factory

from moztrap import model



class EnvironmentsFactoryMixin(object):
    """
    Mixin for Factory subclasses for models with m2m to environments.

    Allows additional ``environments`` kwarg (to ``create`` only, as m2ms can't
    be populated on an unsaved object) with list of environments, or dictionary
    in the format expected by ``EnvironmentFactory.create_full_set``

    """
    @classmethod
    def create(cls, **kwargs):
        envs = kwargs.pop("environments", None)
        obj = super(EnvironmentsFactoryMixin, cls).create(**kwargs)
        if envs is not None:
            if isinstance(envs, dict):
                envs = EnvironmentFactory.create_full_set(envs)
            obj.environments.clear()
            obj.environments.add(*envs)
        return obj



class TeamFactoryMixin(object):
    """
    Mixin for Factory subclasses for models with a team.

    Allows additional ``team`` kwarg (to ``create`` only, as m2ms can't
    be populated on an unsaved object) with list of usernames or users.

    """
    @classmethod
    def create(cls, **kwargs):
        """Create method that allows specifying team."""
        team = kwargs.pop("team", None)
        obj = super(TeamFactoryMixin, cls).create(**kwargs)
        if team is not None:
            users = []
            for user_or_name in team:
                if isinstance(user_or_name, model.User):
                    user = user_or_name
                else:
                    user = UserFactory.create(username=user_or_name)
                users.append(user)
            obj.add_to_team(*users)
        return obj



class UserFactory(factory.Factory):
    FACTORY_FOR = model.User

    username = factory.Sequence(lambda n: "test{0}".format(n))
    email = factory.Sequence(lambda n: "test{0}@example.com".format(n))


    @classmethod
    def create(cls, **kwargs):
        """Create method that allows specifying permissions."""
        permissions = kwargs.pop("permissions", None)
        obj = super(UserFactory, cls).create(**kwargs)
        if permissions is not None:
            perms = []
            for perm_or_name in permissions:
                if isinstance(perm_or_name, model.Permission):
                    perm = perm_or_name
                else:
                    app_label, codename = perm_or_name.split(".", 1)
                    perm = model.Permission.objects.get(
                        content_type__app_label=app_label, codename=codename)
                perms.append(perm)
            obj.user_permissions.add(*perms)
        return obj


    @classmethod
    def _prepare(cls, create, **kwargs):
        """Special handling for ``set_password`` method."""
        password = kwargs.pop("password", None)
        user = super(UserFactory, cls)._prepare(create, **kwargs)
        if password:
            user.set_password(password)
            if create:
                user.save()
        return user



class RoleFactory(factory.Factory):
    FACTORY_FOR = model.Role

    name = factory.Sequence(lambda n: "test{0}".format(n))



class ApiKeyFactory(factory.Factory):
    FACTORY_FOR = model.ApiKey

    owner = factory.SubFactory(UserFactory)
    key = factory.Sequence(lambda n: "Test-ApiKey-{0}".format(n))



class ProductFactory(TeamFactoryMixin, factory.Factory):
    FACTORY_FOR = model.Product

    name = "Test Product"



class ProductVersionFactory(TeamFactoryMixin,
                            EnvironmentsFactoryMixin,
                            factory.Factory):
    FACTORY_FOR = model.ProductVersion

    version = "1.0"
    product = factory.SubFactory(ProductFactory)


    @classmethod
    def create(cls, **kwargs):
        """Handle name kwarg that is concatenated product name / version."""
        name = kwargs.pop("name", None)
        if name:
            if ("version" in kwargs or
                "product" in kwargs or
                "product__name" in kwargs):
                raise ValueError(
                    "Can't provide both name and version/product/product__name")
            else:
                kwargs["product__name"], kwargs["version"] = name.rsplit(" ", 1)
        return super(ProductVersionFactory, cls).create(**kwargs)



class SuiteFactory(factory.Factory):
    FACTORY_FOR = model.Suite

    name = "Test Suite"
    product = factory.SubFactory(ProductFactory)



class CaseFactory(factory.Factory):
    FACTORY_FOR = model.Case

    product = factory.SubFactory(ProductFactory)



class SuiteCaseFactory(factory.Factory):
    FACTORY_FOR = model.SuiteCase

    suite = factory.SubFactory(SuiteFactory)
    case = factory.SubFactory(
        CaseFactory,
        product=factory.LazyContainerAttribute(
            lambda obj, containers: containers[0].suite.product))
    order = 0


class CaseVersionFactory(EnvironmentsFactoryMixin, factory.Factory):
    FACTORY_FOR = model.CaseVersion

    name = "Test Case Version"
    productversion = factory.SubFactory(ProductVersionFactory)
    case = factory.SubFactory(
        CaseFactory,
        product=factory.LazyContainerAttribute(
            lambda obj, containers: containers[0].productversion.product))



class CaseAttachmentFactory(factory.Factory):
    FACTORY_FOR = model.CaseAttachment

    name = "somefile.txt"
    caseversion = factory.SubFactory(CaseVersionFactory)


    @classmethod
    def _prepare(cls, create, **kwargs):
        """Special handling for attachment so we can set name and contents."""
        attachment = kwargs.pop("attachment", None)
        attachment_name = kwargs.get("name", "somefile.txt")
        attachment_content = kwargs.pop("content", "some content")
        if attachment is None:
            attachment = SimpleUploadedFile(attachment_name, attachment_content)
        obj = super(CaseAttachmentFactory, cls)._prepare(create, **kwargs)
        obj.attachment = attachment
        if create:
            obj.save()
        return obj



class CaseStepFactory(factory.Factory):
    FACTORY_FOR = model.CaseStep

    instruction = "Test step instruction"
    caseversion = factory.SubFactory(CaseVersionFactory)


    @factory.lazy_attribute
    def number(obj):
        try:
            return obj.caseversion.steps.order_by("-number")[0].number + 1
        except IndexError:
            return 1



class ProfileFactory(factory.Factory):
    FACTORY_FOR = model.Profile

    name = "Test Profile"



class CategoryFactory(factory.Factory):
    FACTORY_FOR = model.Category

    name = "Test Category"



class ElementFactory(factory.Factory):
    FACTORY_FOR = model.Element

    name = "Test Element"
    category = factory.SubFactory(CategoryFactory)



class EnvironmentFactory(factory.Factory):
    FACTORY_FOR = model.Environment

    profile = factory.SubFactory(ProfileFactory)


    @classmethod
    def create_set(cls, category_names, *envs):
        """
        Create a set of environments given category and element names.

        Given a list of category names, and some number of same-length lists of
        element names, create and return a list of environments made up of the
        given elements. For instance::

          create_environments(
              ["OS", "Browser"],
              ["Windows", "Internet Explorer"],
              ["Windows", "Firefox"],
              ["Linux", "Firefox"]
              )

        """
        categories = [
            CategoryFactory.create(name=name) for name in category_names]

        environments = []

        for element_names in envs:
            elements = [
                ElementFactory.create(name=name, category=categories[i])
                for i, name in enumerate(element_names)
                ]

            env = cls.create()
            env.elements.add(*elements)

            environments.append(env)

        return environments


    @classmethod
    def create_full_set(cls, categories, profile=None):
        """
        Create all possible environment combinations from given categories.

        Given a dictionary mapping category names to lists of element names in
        that category, create and return list of environments constituting all
        possible combinations of one element from each category.

        """
        element_lists = []

        for category_name, element_names in categories.items():
            category = CategoryFactory.create(name=category_name)
            element_lists.append(
                [
                    ElementFactory.create(category=category, name=element_name)
                    for element_name in element_names
                    ]
                )

        environments = []

        env_kwargs = {}
        if profile:
            env_kwargs["profile"] = profile

        for elements in itertools.product(*element_lists):
            env = cls.create(**env_kwargs)
            env.elements.add(*elements)
            environments.append(env)

        return environments



class RunFactory(TeamFactoryMixin, EnvironmentsFactoryMixin, factory.Factory):
    FACTORY_FOR = model.Run

    name = "Test Run"
    productversion = factory.SubFactory(ProductVersionFactory)



class RunCaseVersionFactory(EnvironmentsFactoryMixin, factory.Factory):
    FACTORY_FOR = model.RunCaseVersion

    run = factory.SubFactory(RunFactory)
    caseversion = factory.SubFactory(
        CaseVersionFactory,
        productversion=factory.LazyContainerAttribute(
            lambda obj, containers: containers[0].run.productversion))



class RunSuiteFactory(factory.Factory):
    FACTORY_FOR = model.RunSuite

    run = factory.SubFactory(RunFactory)
    suite = factory.SubFactory(
        SuiteFactory,
        product=factory.LazyContainerAttribute(
            lambda obj, containers: containers[0].run.productversion.product))
    order = 0


class ResultFactory(factory.Factory):
    FACTORY_FOR = model.Result

    tester = factory.SubFactory(UserFactory)
    runcaseversion = factory.SubFactory(RunCaseVersionFactory)
    environment = factory.SubFactory(EnvironmentFactory)



class StepResultFactory(factory.Factory):
    FACTORY_FOR = model.StepResult

    result = factory.SubFactory(ResultFactory)
    step = factory.SubFactory(CaseStepFactory)



class TagFactory(factory.Factory):
    FACTORY_FOR = model.Tag

    name = "Test Tag"

########NEW FILE########
__FILENAME__ = test_apikey
"""
Tests for ApiKey admin.

"""
from tests import case



class ApiKeyAdminTest(case.admin.AdminTestCase):
    app_label = "core"
    model_name = "apikey"


    def test_changelist(self):
        """ApiKey changelist page loads without error, contains key."""
        self.F.ApiKeyFactory.create(key="Test API Key")

        self.get(self.changelist_url).mustcontain("Test API Key")


    def test_change_page(self):
        """ApiKey change page loads without error, contains key."""
        k = self.F.ApiKeyFactory.create(key="Test API Key")

        self.get(self.change_url(k)).mustcontain("Test API Key")

########NEW FILE########
__FILENAME__ = test_product
"""
Tests for Product admin.

"""
from tests import case



class ProductAdminTest(case.admin.AdminTestCase):
    app_label = "core"
    model_name = "product"


    def test_changelist(self):
        """Product changelist page loads without error, contains name."""
        self.F.ProductFactory.create(name="Firefox")

        self.get(self.changelist_url).mustcontain("Firefox")


    def test_change_page(self):
        """Product change page loads without error, contains name."""
        p = self.F.ProductFactory.create(name="Firefox")

        self.get(self.change_url(p)).mustcontain("Firefox")


    def test_change_tracks_user(self):
        """Making a change via the admin tracks modified-by user."""
        p = self.F.ProductFactory.create(name="Firefox")
        url = self.change_url(p)
        form = self.get(url).forms[0]
        form["name"] = "Fennec"

        res = form.submit()
        self.assertEqual(res.status_int, 302)

        self.assertEqual(self.refresh(p).modified_by, self.user)


    def test_delete_tracks_user(self):
        """Deletion via the admin tracks deleted-by user."""
        p = self.F.ProductFactory.create(name="Firefox")
        url = self.delete_url(p)
        form = self.get(url).forms[0]

        res = form.submit()
        self.assertEqual(res.status_int, 302)

        self.assertEqual(self.refresh(p).deleted_by, self.user)


    def test_bulk_delete_tracks_user(self):
        """Deletion via bulk-action tracks deleted-by user."""
        p = self.F.ProductFactory.create(name="Firefox")
        form = self.get(self.changelist_url).forms["changelist-form"]
        form["action"] = "delete"
        form["_selected_action"] = str(p.id)
        form.submit("index", 0)

        self.assertEqual(self.refresh(p).deleted_by, self.user)


    def test_bulk_undelete(self):
        """Bulk undelete action works."""
        p = self.F.ProductFactory.create(name="Firefox")
        p.delete()
        form = self.get(self.changelist_url).forms["changelist-form"]
        form["action"] = "undelete"
        form["_selected_action"] = str(p.id)
        form.submit("index", 0)

        self.assertEqual(self.refresh(p).deleted_on, None)


    def test_hard_delete(self):
        """Hard deletion via bulk-action really deletes."""
        p = self.F.ProductFactory.create(name="Firefox")
        form = self.get(self.changelist_url).forms["changelist-form"]
        form["action"] = "delete_selected"
        form["_selected_action"] = str(p.id)
        form.submit("index", 0).forms[0].submit()

        self.assertEqual(p.__class__.objects.count(), 0)

########NEW FILE########
__FILENAME__ = test_productversion
"""
Tests for ProductVersion admin.

"""
from tests import case



class ProductVersionAdminTest(case.admin.AdminTestCase):
    app_label = "core"
    model_name = "productversion"


    def test_changelist(self):
        """ProductVersion changelist page loads without error, contains name."""
        self.F.ProductVersionFactory.create(
            product__name="Foo", version="1.0")

        self.get(self.changelist_url).mustcontain("Foo 1.0")


    def test_change_page(self):
        """ProductVersion change page loads without error, contains name."""
        pv = self.F.ProductVersionFactory.create(
            product__name="Foo", version="1.0")

        self.get(self.change_url(pv)).mustcontain("Foo 1.0")

########NEW FILE########
__FILENAME__ = test_productversion_env_resource
"""
Tests for ProductVersionEnvironmentsResource api.

"""

from tests import case



class ProductVersionEnvironmentsResourceTest(case.api.ApiTestCase):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.ProductVersionFactory


    @property
    def resource_name(self):
        return "productversionenvironments"


    def test_productversionenvironments_list(self):
        """Get a list of existing productversions with full environment data"""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"]})
        element = envs[0].elements.get()
        category = element.category

        pv = self.F.ProductVersionFactory.create(
            version="3.2",
            codename="enigma",
            environments=envs,
            )

        res = self.get_list()

        act_meta = res.json["meta"]
        exp_meta = {
            "limit": 20,
            "next": None,
            "offset": 0,
            "previous": None,
            "total_count": 1,
            }

        self.assertEquals(act_meta, exp_meta)

        act_objects = res.json["objects"]
        exp_objects = []

        exp_objects.append({
            u"codename": unicode(pv.codename),
            u'environments': [{
                u'elements': [
                    unicode(self.get_detail_url(
                        "element",
                        element.id,
                        )),
                    ],
                u'id': unicode(envs[0].id),
                u'profile': unicode(self.get_detail_url(
                    "profile",
                    envs[0].profile.id
                )),
                u'resource_uri': unicode(self.get_detail_url(
                    "environment",
                    envs[0].id,
                    )),
                }],
            u"id": unicode(pv.id),
            u"resource_uri": unicode(self.get_detail_url(
                "productversionenvironments",
                pv.id,
                )),
            u"version": u"3.2",
            })

        self.maxDiff = None
        self.assertEqual(exp_objects, act_objects)

########NEW FILE########
__FILENAME__ = test_productversion_resource
"""
Tests for ProductVersionResource api.

"""

from tests.case.api.crud import ApiCrudCases



class ProductVersionResourceTest(ApiCrudCases):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.ProductVersionFactory()


    @property
    def resource_name(self):
        return "productversion"


    @property
    def permission(self):
        """String defining the permission required for
        Create, Update, and Delete."""
        return "core.manage_products"


    @property
    def wrong_permissions(self):
        """String defining permissions that will NOT work for this object."""
        return "library.manage_suites"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        self.product_fixture = self.F.ProductFactory.create()
        fields = {
            u"product": unicode(
                self.get_detail_url('product', str(self.product_fixture.id))),
            u"version": unicode(self.datetime),
            u"codename": unicode(
                "amazing test %s %s" % (self.datetime, self.resource_name)),
        }
        return fields


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.ProductVersion.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        return {
            u"id": unicode(backend_obj.id),
            u"product": unicode(
                self.get_detail_url('product', str(backend_obj.product.id))),
            u"version": unicode(backend_obj.version),
            u"codename": unicode(backend_obj.codename),
            u"resource_uri": unicode(
                self.get_detail_url(self.resource_name, str(backend_obj.id))),
            }


    @property
    def read_create_fields(self):
        """product is read-only"""
        return ["product"]

    # additional test cases, if any

########NEW FILE########
__FILENAME__ = test_product_resource
"""
Tests for ProductResource api.

"""

from tests.case.api.crud import ApiCrudCases



class ProductResourceTest(ApiCrudCases):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.ProductFactory()


    @property
    def resource_name(self):
        return "product"


    @property
    def permission(self):
        """String defining the permission required for
        Create, Update, and Delete."""
        return "core.manage_products"


    @property
    def wrong_permissions(self):
        """String defining permissions that will NOT work for this object."""
        return "library.manage_suites"


    def clean_backend_data(self, backend_obj):
        """Returns backend_data, minus any keys not generated by
        new_object_data.

        Should be extended for objects that have one-to-many foriegn keys.
        """
        data = super(ProductResourceTest, self).clean_backend_data(backend_obj)

        # remove id, product, and resource_uri keys from productversions
        productversions = data.pop("productversions")
        data[u"productversions"] = []
        for pv in productversions:
            pv.pop("product")
            pv.pop("id")
            pv.pop("resource_uri")
            data[u"productversions"].append(pv)

        return data

    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        self.product_fixture = self.F.ProductFactory.create()
        fields = {
            u"name": unicode(
                "test_%s_%s" % (self.datetime, self.resource_name)),
            u"description": unicode(
                "test %s %s" % (self.datetime, self.resource_name)),
            u"productversions": [{
                u"version": unicode(self.datetime),
                u"codename": unicode(
                    "amazing test %s %s" % (self.datetime, self.resource_name)),
                }]
        }
        return fields


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.Product.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        product_uri = self.get_detail_url(
            self.resource_name, str(backend_obj.id))
        actual = {}
        actual[u"id"] = unicode(str(backend_obj.id))
        actual[u"name"] = unicode(backend_obj.name)
        actual[u"description"] = unicode(backend_obj.description)
        actual[u"resource_uri"] = unicode(product_uri)
        actual[u"productversions"] = []
        actual[u"productversions"] = [{
                u"id": unicode(pv.id),
                u"product": unicode(product_uri),
                u"version": unicode(pv.version),
                u"codename": unicode(pv.codename),
                u"resource_uri": unicode(self.get_detail_url(
                    'productversion', str(pv.id))),
            } for pv in backend_obj.versions.all()]

        return actual


    # additional test cases, if any

    @property
    def _pv_required_msg(self):
        return str("The 'productversions' key must exist, must be a list, " +
                   "and the list must contain at least one entry.")

    def test_create_must_contain_productversion(self):
        """If productversions does not exist, there will be a 500 error."""

        # get data for creation
        fields = self.new_object_data

        # mangle the data
        pvs = fields.pop("productversions")

        # do the create
        res = self.post(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            status=400,
            )
        assert res.text == self._pv_required_msg


    def test_productversion_for_create_must_be_list(self):
        """If productversions is not a list, there will be a 500 error."""

        # get data for creation
        fields = self.new_object_data

        # mangle the data
        pvs = fields.pop("productversions")
        fields["productversions"] = pvs[0]

        # do the create
        res = self.post(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            status=400,
            )
        assert res.text == self._pv_required_msg


    def test_productversion_list_for_create_must_not_be_empty(self):
        """If the productversions list does not contain an item, there will be a 500 error."""

        # get data for creation
        fields = self.new_object_data

        # mangle the data
        fields["productversions"] = []

        # do the create
        res = self.post(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            status=400,
            )
        assert res.text == self._pv_required_msg

########NEW FILE########
__FILENAME__ = test_create_default_roles
"""
Tests for management command to create default roles.

"""
from cStringIO import StringIO

from django.core.management import call_command

from mock import patch

from tests import case




class CreateDefaultRolesTest(case.DBTestCase):
    """Tests for create_default_roles management command."""
    def call_command(self, **kwargs):
        """Runs the management command under test and returns stdout output."""
        with patch("sys.stdout", StringIO()) as stdout:
            call_command("create_default_roles", **kwargs)

        stdout.seek(0)
        return stdout.read()


    def assertRoles(self, *groups):
        """Assert that the given set of group names, and only those, exist."""

        self.assertEqual(
            set([g.name for g in self.model.Role.objects.all()]),
            set(groups)
            )


    def test_creates_roles(self):
        """Command creates expected roles."""
        self.call_command()

        self.assertRoles("Tester", "Test Creator", "Test Manager", "Admin")


    def test_skips_existing_roles(self):
        """Command skips roles that already exist."""
        self.model.Role.objects.create(name="Tester")

        output = self.call_command()

        self.assertIn("Role 'Tester' already exists; skipping.", output)

        self.assertRoles("Tester", "Test Creator", "Test Manager", "Admin")


    def test_unknown_permission(self):
        """Gracefully skips unknown permission."""
        with patch(
            "moztrap.model.core.management.commands.create_default_roles.ROLES",
            {"Foo": ["foo.foo"]}):
            output = self.call_command()

        self.assertIn("Permission 'foo.foo' unknown; skipping.", output)

        self.assertRoles("Foo")


    def test_normal_output(self):
        """Test output when all roles are created."""
        output = self.call_command()

        expected = """Role 'Test Creator' created.
  Permission 'library.create_cases' added.
  Permission 'library.manage_suite_cases' added.
  Permission 'execution.execute' added.
Role 'Admin' created.
  Permission 'core.manage_users' added.
  Permission 'core.manage_products' added.
  Permission 'library.manage_cases' added.
  Permission 'library.manage_suites' added.
  Permission 'tags.manage_tags' added.
  Permission 'execution.manage_runs' added.
  Permission 'execution.review_results' added.
  Permission 'environments.manage_environments' added.
  Permission 'library.create_cases' added.
  Permission 'library.manage_suite_cases' added.
  Permission 'execution.execute' added.
Role 'Test Manager' created.
  Permission 'core.manage_products' added.
  Permission 'library.manage_cases' added.
  Permission 'library.manage_suites' added.
  Permission 'tags.manage_tags' added.
  Permission 'execution.manage_runs' added.
  Permission 'execution.review_results' added.
  Permission 'environments.manage_environments' added.
  Permission 'library.create_cases' added.
  Permission 'library.manage_suite_cases' added.
  Permission 'execution.execute' added.
Role 'Tester' created.
  Permission 'execution.execute' added.
"""

        self.assertEqual(output, expected)


    def test_creates_all_quietly(self):
        """Test output when verbosity=0."""
        output = self.call_command(verbosity=0)

        self.assertEqual(output, "")


    def test_skips_existing_roles_quietly(self):
        """Command skips roles with no output when verbosity 0."""
        self.model.Role.objects.create(name="Tester")

        output = self.call_command(verbosity=0)

        self.assertEqual(output, "")


    def test_skips_unknown_permission_quietly(self):
        """Skips unknown permission silently with verbosity 0."""
        with patch(
            "moztrap.model.core.management.commands.create_default_roles.ROLES",
            {"Foo": ["foo.foo"]}):
            output = self.call_command(verbosity=0)

        self.assertEqual(output, "")

########NEW FILE########
__FILENAME__ = test_import
"""
Tests for management command to import cases.

"""
from contextlib import contextmanager
from cStringIO import StringIO
import json
import os
from tempfile import mkstemp, mkdtemp

from django.core.management import call_command

from mock import patch

from tests import case




class ImportCasesTest(case.DBTestCase):
    """Tests for import_cases management command."""

    def call_command(self, *args, **kwargs):
        """
        Runs the management command and returns (stdout, stderr) output.

        Also patch ``sys.exit`` so a ``CommandError`` doesn't cause an exit.

        """
        with patch("sys.stdout", StringIO()) as stdout:
            with patch("sys.stderr", StringIO()) as stderr:
                with patch("sys.exit"):
                    call_command("import", *args, **kwargs)

        stdout.seek(0)
        stderr.seek(0)
        return (stdout.read(), stderr.read())


    @contextmanager
    def tempfile(self, contents, dir=None):
        """
        Write given contents to a temporary file, yielding its path.

        Used as a context manager; automatically deletes the temporary file
        when context manager exits.

        """
        (fd, path) = mkstemp(dir=dir)
        fh = os.fdopen(fd, "w")
        fh.write(contents)
        fh.close()

        try:
            yield path
        finally:
            os.remove(path)


    def test_no_args(self):
        """Command shows usage."""
        output = self.call_command()

        self.assertEqual(
            output,
            (
                "",
                "Error: Usage: <product_name> <product_version> <filename>\n",
                )
            )


    def test_bad_product(self):
        """Error if given non-existent product name."""
        output = self.call_command("Foo", "1.0", "file.json")

        self.assertEqual(
            output,
            (
                "",
                'Error: Product "Foo" does not exist\n',
                )
            )


    def test_bad_productversion(self):
        """Error if given non-existent product version."""
        self.F.ProductFactory.create(name="Foo")

        output = self.call_command("Foo", "1.0", "file.json")

        self.assertEqual(
            output,
            (
                "",
                'Error: Version "1.0" of product "Foo" does not exist\n',
                )
            )


    def test_bad_file(self):
        """Error if given nonexistent file."""
        self.F.ProductVersionFactory.create(product__name="Foo", version="1.0")

        output = self.call_command("Foo", "1.0", "does/not/exist.json")

        self.assertEqual(
            output,
            (
                "",
                (
                    'Error: Could not open "does/not/exist.json", '
                    "I/O error 2: No such file or directory\n"
                    ),
                )
            )


    def test_bad_json(self):
        """Error if file contains malformed JSON."""
        self.F.ProductVersionFactory.create(product__name="Foo", version="1.0")

        with self.tempfile("{") as path:
            output = self.call_command("Foo", "1.0", path)

        self.assertIn("Error: Could not parse JSON: Expecting", output[1])


    def test_success_single_file(self):
        """Successful import prints summary data and creates objects."""
        self.F.ProductVersionFactory.create(product__name="Foo", version="1.0")

        data = {
            "cases": [{"name": "Foo", "steps": [{"instruction": "do this"}]}]}

        with self.tempfile(json.dumps(data)) as path:
            output = self.call_command("Foo", "1.0", path)

        self.assertEqual(output, ("Imported 1 cases\nImported 0 suites\n", ""))
        self.assertEqual(self.model.CaseVersion.objects.get().name, "Foo")


    def test_success_single_file_with_dupes(self):
        """Successful import prints summary data and creates objects."""
        self.F.ProductVersionFactory.create(product__name="Foo", version="1.0")

        data = {
            "cases": [
                {"name": "Foo", "steps": [{"instruction": "do this"}]},
                {"name": "Foo", "steps": [{"instruction": "do this"}]},
                ]}

        with self.tempfile(json.dumps(data)) as path:
            output = self.call_command("Foo", "1.0", path, force_dupes=True)

        self.assertEqual(("Imported 2 cases\nImported 0 suites\n", ""), output)
        self.assertEqual(
            set(self.model.CaseVersion.objects.values_list("name", flat=True)),
            set(["Foo", "Foo"]))


    def test_success_single_file_skip_dupes(self):
        """Successful import of one case, second dupe is skipped."""
        self.F.ProductVersionFactory.create(product__name="Foo", version="1.0")

        data = {
            "cases": [
                {"name": "Foo", "steps": [{"instruction": "do this"}]},
                {"name": "Foo", "steps": [{"instruction": "do this"}]},
                ]}

        with self.tempfile(json.dumps(data)) as path:
            output = self.call_command("Foo", "1.0", path)

        self.assertEqual(
            "Skipped: Case with this name already exists for this product",
            output[0][:60],
            )
        self.assertEqual("", output[1])
        self.assertEqual(
            set(self.model.CaseVersion.objects.values_list("name", flat=True)),
            set(["Foo"]))


    def test_success_multiple_files(self):
        """Successful import prints summary data and creates objects."""
        self.F.ProductVersionFactory.create(product__name="Foo", version="1.0")

        data1 = {
            "cases": [{"name": "Foo", "steps": [{"instruction": "do this"}]}]}
        data2 = {
            "cases": [{"name": "Foo2", "steps": [{"instruction": "do this"}]}]}

        dir = mkdtemp()
        with self.tempfile(json.dumps(data1), dir=dir) as filepath:
            # create another file in that same directory
            with open("{0}/{1}".format(dir, "file2"), "w") as fh:
                fh.write(json.dumps(data2))
                fh.close()

            output = self.call_command("Foo", "1.0", dir)

        self.assertEqual(output, ("Imported 2 cases\nImported 0 suites\n", ""))
        self.assertEqual(
            set(self.model.CaseVersion.objects.values_list("name", flat=True)),
            set(["Foo", "Foo2"]))


    def test_skip_hidden_files(self):
        """Don't attempt to import hidden files in a directory."""
        self.F.ProductVersionFactory.create(product__name="Foo", version="1.0")

        data1 = {
            "cases": [{"name": "Foo", "steps": [{"instruction": "do this"}]}]}
        data2 = {
            "cases": [{"name": "Foo2", "steps": [{"instruction": "do this2"}]}]}

        dir = mkdtemp()
        with self.tempfile(json.dumps(data1), dir=dir) as filepath:
            # create another file in that same directory
            with open("{0}/{1}".format(dir, ".file2"), "w") as fh:
                fh.write(json.dumps(data2))
                fh.close()

            output = self.call_command("Foo", "1.0", dir)

        self.assertEqual(output, ("Imported 1 cases\nImported 0 suites\n", ""))
        self.assertEqual(self.model.CaseVersion.objects.get().name, "Foo")


    def test_no_files_in_dir(self):
        """Don't attempt to import hidden files in a directory."""
        self.F.ProductVersionFactory.create(product__name="Foo", version="1.0")

        dir = mkdtemp()
        output = self.call_command("Foo", "1.0", dir)

        self.assertEqual(output, ("No files found to import.\n", ""))
        self.assertEqual(self.model.CaseVersion.objects.count(), 0)

########NEW FILE########
__FILENAME__ = test_apikey
"""
Tests for ApiKey model.

"""
from mock import patch

from tests import case



class ApiKeyTest(case.DBTestCase):
    """Tests for ApiKey model."""
    def test_unicode(self):
        """Unicode representation is the key."""
        k = self.F.ApiKeyFactory.build(key="12345")

        self.assertEqual(unicode(k), u"12345")


    def test_active(self):
        """Manager has method to return active keys only."""
        self.F.ApiKeyFactory.create(active=False)
        k = self.F.ApiKeyFactory.create(active=True)

        self.assertEqual(list(self.model.ApiKey.objects.active()), [k])


    def test_generate(self):
        """Generate classmethod generates an API key from a UUID."""
        u1 = self.F.UserFactory.create()
        u2 = self.F.UserFactory.create()

        with patch("moztrap.model.core.models.uuid") as mockuuid:
            mockuuid.uuid4.return_value = "foo"

            k = self.model.ApiKey.generate(owner=u1, user=u2)

        self.assertEqual(k.key, "foo")
        self.assertEqual(k.owner, u1)
        self.assertEqual(k.created_by, u2)


    def test_generate_default_creator(self):
        """Generate classmethod can just take a single user."""
        u1 = self.F.UserFactory.create()

        k = self.model.ApiKey.generate(u1)

        self.assertEqual(k.owner, u1)
        self.assertEqual(k.created_by, u1)

########NEW FILE########
__FILENAME__ = test_product
"""
Tests for Product model.

"""
from tests import case



class ProductTest(case.DBTestCase):
    """Tests for Product model."""
    def test_unicode(self):
        """Unicode representation is name of Product"""
        p = self.F.ProductFactory.build(name="Firefox")

        self.assertEqual(unicode(p), u"Firefox")


    def test_clone_no_cases(self):
        """Cloning a Product does not clone test cases."""
        c = self.F.CaseFactory()

        new = c.product.clone()

        self.assertEqual(len(new.cases.all()), 0)


    def test_clone_no_suites(self):
        """Cloning a Product does not clone test suites."""
        s = self.F.SuiteFactory()

        new = s.product.clone()

        self.assertEqual(len(new.cases.all()), 0)


    def test_clone_team(self):
        """Cloning a ProductVersion clones its team."""
        p = self.F.ProductFactory(team=["One", "Two"])

        new = p.clone()

        self.assertEqual(len(new.team.all()), 2)


    def test_reorder_versions(self):
        """reorder_versions method reorders versions correctly."""
        p = self.F.ProductFactory()
        v2 = self.F.ProductVersionFactory(product=p, version="1.2")
        v1 = self.F.ProductVersionFactory(product=p, version="1.1")

        p.reorder_versions()

        self.assertEqual(self.refresh(v1).order, 1)
        self.assertEqual(self.refresh(v2).order, 2)

########NEW FILE########
__FILENAME__ = test_productversion
"""
Tests for ProductVersion model.

"""
from datetime import datetime

from django.core.exceptions import ValidationError

from mock import patch

from tests import case



class ProductVersionTest(case.DBTestCase):
    """Tests for ProductVersion model."""
    def test_unicode(self):
        """Unicode representation is product name and version."""
        pv = self.F.ProductVersionFactory(
            product__name="Some Product", version="1.0")

        self.assertEqual(unicode(pv), u"Some Product 1.0")


    def test_name(self):
        """Productversion name is product name and version."""
        pv = self.F.ProductVersionFactory(
            product__name="Some Product", version="1.0")

        self.assertEqual(pv.name, u"Some Product 1.0")


    def test_parent(self):
        """A ProductVersion's ``parent`` property returns its Product."""
        pv = self.F.ProductVersionFactory()

        self.assertIs(pv.parent, pv.product)


    def test_own_team(self):
        """If ``has_team`` is True, ProductVersion's team is its own."""
        pv = self.F.ProductVersionFactory.create(has_team=True)
        u = self.F.UserFactory.create()
        pv.own_team.add(u)

        self.assertEqual(list(pv.team.all()), [u])


    def test_inherit_team(self):
        """If ``has_team`` is False, ProductVersion's team is its parent's."""
        pv = self.F.ProductVersionFactory.create(has_team=False)
        u = self.F.UserFactory.create()
        pv.product.team.add(u)

        self.assertEqual(list(pv.team.all()), [u])


    def test_clone(self):
        """Cloning PV adds ".next" to version, "Cloned:" to codename."""
        c = self.F.ProductVersionFactory.create(
            version="1.0", codename="Foo")

        new = c.clone()

        self.assertNotEqual(new, c)
        self.assertIsInstance(new, type(c))
        self.assertEqual(new.version, "1.0.next")
        self.assertEqual(new.codename, "Cloned: Foo")


    def test_clone_no_runs(self):
        """Cloning a ProductVersion does not clone runs."""
        run = self.F.RunFactory.create()

        new = run.productversion.clone()

        self.assertEqual(len(new.runs.all()), 0)


    def test_clone_no_cases(self):
        """Cloning a ProductVersion does not clone test case versions."""
        cv = self.F.CaseVersionFactory()

        new = cv.productversion.clone()

        self.assertEqual(len(new.caseversions.all()), 0)


    def test_clone_environments(self):
        """Cloning a ProductVersion clones its environments."""
        pv = self.F.ProductVersionFactory(environments={"OS": ["OS X", "Linux"]})

        new = pv.clone()

        self.assertEqual(len(new.environments.all()), 2)


    def test_clone_team(self):
        """Cloning a ProductVersion clones its team."""
        pv = self.F.ProductVersionFactory(team=["One", "Two"])

        new = pv.clone()

        self.assertEqual(len(new.team.all()), 2)


    def test_adding_new_version_reorders(self):
        """Adding a new product version reorders the versions."""
        p = self.F.ProductFactory.create()
        self.F.ProductVersionFactory.create(version="2.11", product=p)
        self.F.ProductVersionFactory.create(version="2.9", product=p)
        self.F.ProductVersionFactory.create(version="2.10", product=p)

        self.assertEqual(
            [(v.version, v.latest) for v in p.versions.all()],
            [("2.9", False), ("2.10", False), ("2.11", True)]
            )


    def test_editing_a_version_reorders(self):
        """Editing a product version reorders the versions."""
        # @@@ what about bulk update of product versions?
        p = self.F.ProductFactory.create()
        self.F.ProductVersionFactory.create(version="2.11", product=p)
        self.F.ProductVersionFactory.create(version="2.9", product=p)
        pv = self.F.ProductVersionFactory.create(version="2.12", product=p)

        pv.version = "2.10"
        pv.save()

        self.assertEqual(
            [(v.version, v.latest) for v in p.versions.all()],
            [("2.9", False), ("2.10", False), ("2.11", True)]
            )


    def test_deleting_a_version_reorders(self):
        """Deleting a product version reorders the versions."""
        # @@@ what about bulk deletion of product versions?
        p = self.F.ProductFactory.create()
        self.F.ProductVersionFactory.create(version="2.10", product=p)
        self.F.ProductVersionFactory.create(version="2.9", product=p)

        self.F.ProductVersionFactory.create(version="2.11", product=p).delete()

        self.assertEqual(
            [(v.version, v.latest) for v in p.versions.all()],
            [("2.9", False), ("2.10", True)]
            )


    def test_undeleting_a_version_reorders(self):
        """Undeleting a product version reorders the versions."""
        p = self.F.ProductFactory.create()
        self.F.ProductVersionFactory.create(version="2.10", product=p)
        self.F.ProductVersionFactory.create(version="2.9", product=p)
        pv = self.F.ProductVersionFactory.create(version="2.11", product=p)

        pv.delete()
        self.refresh(pv).undelete()

        self.assertEqual(
            [(v.version, v.latest) for v in p.versions.all()],
            [("2.9", False), ("2.10", False), ("2.11", True)]
            )


    @patch("moztrap.model.mtmodel.datetime")
    def test_reorder_versions_does_not_change_modified_on(self, mock_dt):
        """Updating latest product version does not change modified_on."""
        mock_dt.datetime.utcnow.return_value = datetime(2012, 1, 30)
        pv = self.F.ProductVersionFactory.create()

        mock_dt.datetime.utcnow.return_value = datetime(2012, 1, 31)
        pv.product.reorder_versions()

        self.assertEqual(
            self.refresh(pv).modified_on, datetime(2012, 1, 30))
        self.assertEqual(
            self.refresh(pv.product).modified_on, datetime(2012, 1, 30))


    def test_reorder_versions_does_not_change_modified_by(self):
        """Updating latest product version does not change modified_by."""
        u = self.F.UserFactory.create()
        p = self.F.ProductFactory.create(user=u)
        pv = self.F.ProductVersionFactory.create(product=p, user=u)

        pv.product.reorder_versions()

        self.assertEqual(self.refresh(pv).modified_by, u)
        self.assertEqual(self.refresh(p).modified_by, u)


    def test_instance_being_saved_is_updated(self):
        """Version being saved gets correct order after reorder."""
        p = self.F.ProductFactory.create()
        self.F.ProductVersionFactory.create(version="2.9", product=p)
        pv = self.F.ProductVersionFactory.create(version="2.10", product=p)

        self.assertEqual(pv.order, 2)
        self.assertEqual(pv.latest, True)


    def test_unique_constraint(self):
        """Can't have two versions of same product with same version number."""
        pv = self.F.ProductVersionFactory.create()

        new = self.F.ProductVersionFactory.build(
            product=pv.product, version=pv.version)

        with self.assertRaises(ValidationError):
            new.full_clean()


    def test_unique_constraint_with_unset_product(self):
        """Unique-check doesn't blow up if product is unset."""
        new = self.model.ProductVersion()

        with self.assertRaises(ValidationError):
            new.full_clean()


    def test_unique_constraint_doesnt_prevent_edit(self):
        """Unique constraint still allows saving an edited existing object."""
        pv = self.F.ProductVersionFactory.create()

        pv.codename = "new codename"

        pv.full_clean()


    def test_unique_constraint_ignores_deleted(self):
        """Deleted version doesn't prevent new with same product, version."""
        pv = self.F.ProductVersionFactory.create()
        pv.delete()

        self.F.ProductVersionFactory.create(version=pv.version, product=pv.product)



class SortByVersionTest(case.DBTestCase):
    """
    Tests ``by_version`` sorting key func for ProductVersions.

    """
    def assertOrder(self, *versions):
        """Assert that ``by_version`` orders given versions as listed."""
        from moztrap.model.core.models import by_version
        objs = [
            self.F.ProductVersionFactory(version=v) for v in reversed(versions)
            ]
        candidate = [o.version for o in sorted(objs, key=by_version)]

        self.assertEqual(candidate, list(versions))


    def test_numeral_padding(self):
        """Numerals are padded so as to compare numerically."""
        self.assertOrder("2", "11")


    def test_lexicographic(self):
        """Lexicographic ordering."""
        self.assertOrder("aa", "ab")


    def test_mixed_numeral_padding(self):
        """Numerals are padded even when mixed with letters."""
        self.assertOrder("1.1.a2", "1.1.a11")


    def test_pre_release(self):
        """Alpha strings prior to "final" are pre-release versions."""
        self.assertOrder("1.1a", "1.1")

########NEW FILE########
__FILENAME__ = test_user
"""
Tests for User proxy model.

"""
from tests import case



class UserTest(case.DBTestCase):
    """Tests for User proxy model."""

########NEW FILE########
__FILENAME__ = test_auth
"""
Tests for auth proxy models.

"""
from tests import case



class UserTest(case.DBTestCase):
    """Tests for User proxy model."""
    def test_can_delete_user_with_registration_profile(self):
        """Can delete a user with a registration profile; refs Django #16128."""
        u = self.F.UserFactory.create()
        self.model.RegistrationProfile.objects.create(
            user=u, activation_key="foo")

        u.delete()

        with self.assertRaises(self.model.User.DoesNotExist):
            self.refresh(u)


    def test_can_pass_user_to_delete(self):
        """Can pass user to User.delete() even though its not a MTModel."""
        u = self.F.UserFactory.create()

        u.delete(user=u)

        with self.assertRaises(self.model.User.DoesNotExist):
            self.refresh(u)


    def test_cannot_delete_last_superuser(self):
        """Cannot delete the last active superuser"""
        su = self.F.UserFactory.create(is_active=True, is_superuser=True)

        su.delete()

        self.assertTrue(self.refresh(su).is_active)


    def test_activate(self):
        """Can activate a user."""
        u = self.F.UserFactory.create(is_active=False)

        u.activate(user=u)

        self.assertTrue(self.refresh(u).is_active)


    def test_deactivate(self):
        """Can deactivate a user."""
        u = self.F.UserFactory.create(is_active=True)

        u.deactivate(user=u)

        self.assertFalse(self.refresh(u).is_active)


    def test_cannot_deactivate_last_superuser(self):
        """Cannot deactivate the last active superuser."""
        su1 = self.F.UserFactory.create(is_active=True, is_superuser=True)
        su2 = self.F.UserFactory.create(is_active=False, is_superuser=True)

        su2.is_active = False;
        su2.save();

        self.assertFalse(self.refresh(su2).is_active)

        su1.is_active = False;
        su1.save();

        self.assertTrue(self.refresh(su1).is_active)


    def test_roles(self):
        """Can assign roles."""
        u = self.F.UserFactory.create()
        r = self.F.RoleFactory.create()
        u.roles.add(r)

        self.assertEqual(set(u.roles.all()), set([r]))



class ModelBackendTest(case.DBTestCase):
    """Tests for our custom ModelBackend."""
    @property
    def backend(self):
        """An instance of the backend class under test."""
        from moztrap.model.core.auth import ModelBackend
        return ModelBackend()


    def test_authenticate(self):
        """Can authenticate a user with username and password."""
        u = self.F.UserFactory.create(username="foo", password="sekrit")

        res = self.backend.authenticate(username="foo", password="sekrit")

        self.assertEqual(res, u)


    def test_authenticate_bad_username(self):
        """Cannot authenticate a user with bad username."""
        res = self.backend.authenticate(username="food", password="sekrit")

        self.assertIsNone(res)


    def test_authenticate_bad_password(self):
        """Cannot authenticate a user with bad password."""
        self.F.UserFactory.create(username="foo", password="sekrit")

        res = self.backend.authenticate(username="foo", password="wrong")

        self.assertIsNone(res)


    def test_get_user(self):
        """Can get a user with correct user_id."""
        u = self.F.UserFactory.create()

        res = self.backend.get_user(u.id)

        self.assertEqual(res, u)


    def test_get_user_bad_id(self):
        """Cannot get a user with bad user_id."""
        res = self.backend.get_user(-1)

        self.assertIsNone(res)



class BrowserIDBackendTest(case.DBTestCase):
    """Tests for our custom BrowserIDBackend."""
    @property
    def backend(self):
        """An instance of the backend class under test."""
        from moztrap.model.core.auth import BrowserIDBackend
        return BrowserIDBackend()


    def test_get_user(self):
        """Can get a user with correct user_id."""
        u = self.F.UserFactory.create()

        res = self.backend.get_user(u.id)

        self.assertEqual(res, u)


    def test_get_user_bad_id(self):
        """Cannot get a user with bad user_id."""
        res = self.backend.get_user(-1)

        self.assertIsNone(res)

########NEW FILE########
__FILENAME__ = test_category
"""
Tests for Category admin.

"""
from tests import case



class CategoryAdminTest(case.admin.AdminTestCase):
    app_label = "environments"
    model_name = "category"


    def test_changelist(self):
        """Category changelist page loads without error, contains name."""
        self.F.CategoryFactory.create(name="Operating System")

        self.get(self.changelist_url).mustcontain("Operating System")


    def test_change_page(self):
        """Category change page loads without error, contains name."""
        s = self.F.CategoryFactory.create(name="Operating System")

        self.get(self.change_url(s)).mustcontain("Operating System")


    def test_change_page_element(self):
        """Category change page includes Element inline."""
        e = self.F.ElementFactory.create(name="Linux")

        self.get(self.change_url(e.category)).mustcontain("Linux")

########NEW FILE########
__FILENAME__ = test_element
"""
Tests for Element admin.

"""
from tests import case



class ElementAdminTest(case.admin.AdminTestCase):
    app_label = "environments"
    model_name = "element"


    def test_changelist(self):
        """Element changelist page loads without error, contains name."""
        self.F.ElementFactory.create(name="Linux")

        self.get(self.changelist_url).mustcontain("Linux")


    def test_change_page(self):
        """Element change page loads without error, contains name."""
        e = self.F.ElementFactory.create(name="Linux")

        self.get(self.change_url(e)).mustcontain("Linux")

########NEW FILE########
__FILENAME__ = test_environment
"""
Tests for Environment admin.

"""
from mock import patch

from tests import case



class EnvironmentAdminTest(case.admin.AdminTestCase):
    app_label = "environments"
    model_name = "environment"


    def test_changelist(self):
        """Environment changelist page loads without error, contains name."""
        self.F.EnvironmentFactory.create_full_set({"OS": ["Linux"]})

        self.get(self.changelist_url).mustcontain("Linux")


    def test_change_page(self):
        """Environment change page loads without error, contains name."""
        e = self.F.EnvironmentFactory.create_full_set({"OS": ["Linux"]})[0]

        self.get(self.change_url(e)).mustcontain("Linux")


    def test_change_page_element(self):
        """Environment change page includes Element-m2m inline."""
        e = self.F.EnvironmentFactory.create_full_set({"OS": ["Linux"]})[0]

        self.get(self.change_url(e)).mustcontain("Linux")


    def test_add_element_m2m_with_environment(self):
        """Can add elements when creating a new Environment"""
        profile = self.F.ProfileFactory.create()
        element = self.F.ElementFactory.create(name="Linux")

        # patching extra avoids need for JS to add element-m2m
        with patch(
            "moztrap.model.environments.admin.EnvironmentElementInline.extra", 1):

            form = self.get(self.add_url).forms[0]
            form["profile"] = str(profile.id)
            form["Environment_elements-0-element"] = str(element.id)
            res = form.submit()

        self.assertEqual(res.status_int, 302)

        self.assertEqual(
            profile.environments.get(
                ).elements.get().name, "Linux")

########NEW FILE########
__FILENAME__ = test_profile
"""
Tests for Profile admin.

"""
from tests import case



class ProfileAdminTest(case.admin.AdminTestCase):
    app_label = "environments"
    model_name = "profile"


    def test_changelist(self):
        """Profile changelist page loads without error, contains name."""
        self.F.ProfileFactory.create(name="Browser Environments")

        self.get(self.changelist_url).mustcontain("Browser Environments")


    def test_change_page(self):
        """Profile change page loads without error, contains name."""
        s = self.F.ProfileFactory.create(name="Browser Environments")

        self.get(self.change_url(s)).mustcontain("Browser Environments")

########NEW FILE########
__FILENAME__ = test_category_resource
"""
Tests for EnvironmentResource api.

"""

from tests.case.api.crud import ApiCrudCases



class CategoryResourceTest(ApiCrudCases):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.CategoryFactory()


    @property
    def resource_name(self):
        """The resource name for this object."""
        return "category"


    @property
    def permission(self):
        """The permissions needed to modify this object type."""
        return "environments.manage_environments"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        modifiers = (self.datetime, self.resource_name)

        return {
            u"name": u"category %s %s" % modifiers,
            u"elements": [],
        }


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.Category.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        return {
            u"id": unicode(str(backend_obj.id)),
            u"name": unicode(backend_obj.name),
            u"resource_uri": unicode(
                self.get_detail_url(self.resource_name, str(backend_obj.id))),
            u"elements": [{
                              u"name": unicode(elem.name),
                              u"id": unicode(elem.id),
                              u"resource_uri": unicode(self.get_detail_url(
                                  "element", str(elem.id)
                              )),
                            } for elem in backend_obj.elements.all()]
            }

########NEW FILE########
__FILENAME__ = test_element_resource
"""
Tests for ElementResource api.

"""

from tests.case.api.crud import ApiCrudCases



class ElementResourceTest(ApiCrudCases):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.ElementFactory()


    @property
    def resource_name(self):
        return "element"


    @property
    def permission(self):
        """The permissions needed to modify this object type."""
        return "environments.manage_environments"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        modifiers = (self.datetime, self.resource_name)
        self.category_fixture = self.F.CategoryFactory()

        return {
            u"name": u"element %s %s" % modifiers,
            u"category": unicode(
                self.get_detail_url("category", str(self.category_fixture.id))),
            }


    @property
    def read_create_fields(self):
        """category is read-only."""
        return ["category"]


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.Element.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        return {
            u"id": unicode(str(backend_obj.id)),
            u"name": unicode(backend_obj.name),
            u"category": unicode(
                self.get_detail_url("category", str(backend_obj.category.id))
            ),
            u"resource_uri": unicode(
                self.get_detail_url(self.resource_name, str(backend_obj.id))),
        }

########NEW FILE########
__FILENAME__ = test_environment_resource
"""
Tests for EnvironmentResource api.

"""

from tests.case.api.crud import ApiCrudCases

import logging
logger = logging.getLogger("moztrap.test")


class EnvironmentResourceTest(ApiCrudCases):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.EnvironmentFactory()


    @property
    def resource_name(self):
        return "environment"


    @property
    def permission(self):
        """The permissions needed to modify this object type."""
        return "environments.manage_environments"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """

        self.profile_fixture = self.F.ProfileFactory()
        self.category_fixture1 = self.F.CategoryFactory(name="A")
        self.category_fixture2 = self.F.CategoryFactory(name="B")
        self.category_fixture3 = self.F.CategoryFactory(name="C")
        self.element_fixture1 = self.F.ElementFactory(category=self.category_fixture1, name="A 2")
        self.element_fixture2 = self.F.ElementFactory(category=self.category_fixture2, name="B 2")
        self.element_fixture3 = self.F.ElementFactory(category=self.category_fixture3, name="C 2")
        self.element_fixture_list = [
            self.element_fixture1, self.element_fixture2, self.element_fixture3]

        return {
            u"profile": unicode(
                self.get_detail_url("profile", str(self.profile_fixture.id))),
            u"elements": [unicode(
                self.get_detail_url(
                    "element", str(elem.id))
                ) for elem in self.element_fixture_list],
            }


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.Environment.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        return {
            u"id": unicode(str(backend_obj.id)),
            u"profile": unicode(self.get_detail_url("profile", str(backend_obj.profile.id))),
            u"elements": [unicode(
                self.get_detail_url("element", str(elem.id))
            ) for elem in backend_obj.elements.all()],
            u"resource_uri": unicode(
                self.get_detail_url(self.resource_name, str(backend_obj.id))),
        }


    def test_elements_must_be_from_different_categories(self):
        """A post with two elements from the same category should error."""
        logger.info("test_elements_must_be_from_different_categories")

        # get data for creation & munge it
        fields = self.new_object_data
        self.element_fixture2.category = self.element_fixture1.category
        self.element_fixture2.save()

        # do the create
        res = self.post(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            status=400,
            )

        error_msg = "Elements must each belong to a different Category."
        self.assertEqual(res.text, error_msg)


    def test_basic_combinatorics_patch(self):
        """A Patch request with profile and categories should do combinatorics
        on the categories and create environments."""
        logger.info("test_basic_combinatorics_patch")

        fields = self.new_object_data

        # create more elements for each category
        for x in range(2):
            self.F.ElementFactory(category=self.category_fixture1, name="A %s" % x)
            self.F.ElementFactory(category=self.category_fixture2, name="B %s" % x)
            self.F.ElementFactory(category=self.category_fixture3, name="C %s" % x)

        # modify fields to send categories rather than elements
        fields.pop('elements')
        fields['categories'] = [
            unicode(self.get_detail_url(
                "category", str(self.category_fixture1.id))),
            unicode(self.get_detail_url(
                "category", str(self.category_fixture2.id))),
            unicode(self.get_detail_url(
                "category", str(self.category_fixture3.id))),
        ]

        # do the create
        res = self.patch(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            )

        # check that it made the right number of environments
        self._test_filter_list_by(u'profile', self.profile_fixture.id, 27)


    def test_patch_without_categories_error(self):
        """'categories' must be provided in PATCH."""
        logger.info("test_patch_without_categories_error")

        fields = self.new_object_data

        # do the create
        res = self.patch(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            status=400,
            )

        error_msg = "PATCH request must contain categories list."
        self.assertEqual(res.text, error_msg)


    def test_patch_categories_not_list_error(self):
        """'categories' must be a list in PATCH."""
        logger.info("test_patch_categories_not_list_error")

        fields = self.new_object_data
        fields.pop("elements")
        fields[u'categories'] = unicode(
            self.get_detail_url("category", str(self.category_fixture1.id)))

        # do the create
        res = self.patch(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            status=400,
            )

        error_msg = "PATCH request must contain categories list."
        self.assertEqual(res.text, error_msg)


    def test_patch_categories_list_not_string_or_hash_error(self):
        """'categories' must be a list in PATCH."""
        logger.info("test_patch_categories_list_not_string_or_hash_error")

        fields = self.new_object_data
        fields.pop("elements")
        fields[u'categories'] = [1, 2, 3]

        # do the create
        res = self.patch(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            status=400,
            )

        error_msg = "categories list must contain resource uris or hashes."
        self.assertEqual(res.text, error_msg)


    def test_patch_with_exclude(self):
        """Combinatorics excluding some elements."""
        logger.info("test_patch_with_exclude")

        fields = self.new_object_data

        # create more elements for each category
        for x in range(2):
            self.F.ElementFactory(category=self.category_fixture1, name="A %s" % x)
            self.F.ElementFactory(category=self.category_fixture2, name="B %s" % x)
            self.F.ElementFactory(category=self.category_fixture3, name="C %s" % x)

        # modify fields to send categories rather than elements
        fields.pop('elements')
        fields['categories'] = [
            {
                u'category': unicode(self.get_detail_url(
                    "category", str(self.category_fixture1.id))),
                u'exclude': [unicode(self.get_detail_url(
                    "element", str(self.element_fixture1.id))), ],
            },
            {
                u'category': unicode(self.get_detail_url(
                    "category", str(self.category_fixture2.id))),
                u'exclude': [unicode(self.get_detail_url(
                    "element", str(self.element_fixture2.id))), ],
            },
            {
                u'category': unicode(self.get_detail_url(
                    "category", str(self.category_fixture3.id))),
                u'exclude': [unicode(self.get_detail_url(
                    "element", str(self.element_fixture3.id))), ],
            }, ]

        # do the create
        res = self.patch(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            )

        # check that it made the right number of environments
        self._test_filter_list_by(u'profile', self.profile_fixture.id, 8)


    def test_patch_with_include(self):
        """Combinatorics including some elements."""
        logger.info("test_patch_with_include")

        fields = self.new_object_data

        # create more elements for each category
        for x in range(2):
            self.F.ElementFactory(category=self.category_fixture1, name="A %s" % x)
            self.F.ElementFactory(category=self.category_fixture2, name="B %s" % x)
            self.F.ElementFactory(category=self.category_fixture3, name="C %s" % x)

        # modify fields to send categories rather than elements
        fields.pop('elements')
        fields['categories'] = [
            {
                u'category': unicode(self.get_detail_url(
                    "category", str(self.category_fixture1.id))),
                u'include': [unicode(self.get_detail_url(
                    "element", str(self.element_fixture1.id))), ],
                },
            {
                u'category': unicode(self.get_detail_url(
                    "category", str(self.category_fixture2.id))),
                u'include': [unicode(self.get_detail_url(
                    "element", str(self.element_fixture2.id))), ],
                },
            {
                u'category': unicode(self.get_detail_url(
                    "category", str(self.category_fixture3.id))),
                u'include': [unicode(self.get_detail_url(
                    "element", str(self.element_fixture3.id))), ],
                }, ]

        # do the create
        res = self.patch(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            )

        # check that it made the right number of environments
        self._test_filter_list_by(u'profile', self.profile_fixture.id, 1)


    def test_patch_no_include_no_exclude(self):
        """Sending hashes without include or exclude should do the same as
        sending regular uri strings."""
        logger.info("test_patch_no_include_no_exclude")

        fields = self.new_object_data

        # create more elements for each category
        for x in range(2):
            self.F.ElementFactory(category=self.category_fixture1, name="A %s" % x)
            self.F.ElementFactory(category=self.category_fixture2, name="B %s" % x)
            self.F.ElementFactory(category=self.category_fixture3, name="C %s" % x)

        # modify fields to send categories rather than elements
        fields.pop('elements')
        fields['categories'] = [
            {
                u'category': unicode(self.get_detail_url(
                    "category", str(self.category_fixture1.id))),
                },
            {
                u'category': unicode(self.get_detail_url(
                    "category", str(self.category_fixture2.id))),
                },
            {
                u'category': unicode(self.get_detail_url(
                    "category", str(self.category_fixture3.id))),
                }, ]

        # do the create
        res = self.patch(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            )

        # check that it made the right number of environments
        self._test_filter_list_by(u'profile', self.profile_fixture.id, 27)

########NEW FILE########
__FILENAME__ = test_profile_resource
"""
Tests for ProfileResource api.

"""

from tests.case.api.crud import ApiCrudCases

import logging
mozlogger = logging.getLogger('moztrap.test')


class ProfileResourceTest(ApiCrudCases):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.ProfileFactory()


    @property
    def resource_name(self):
        """The resource name for this object."""
        return "profile"


    @property
    def permission(self):
        """The permissions needed to modify this object type."""
        return "environments.manage_environments"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        modifiers = (self.datetime, self.resource_name)

        return {
            u"name": u"profile %s %s" % modifiers,
        }


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.Profile.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        return {
            u"id": unicode(str(backend_obj.id)),
            u"name": unicode(backend_obj.name),
            u"resource_uri": unicode(
                self.get_detail_url(self.resource_name, str(backend_obj.id))),
            }

########NEW FILE########
__FILENAME__ = test_category
"""
Tests for Category model.

"""
from tests import case



class CategoryTest(case.DBTestCase):
    """Tests for Category model."""
    def test_unicode(self):
        """Unicode representation is name of category."""
        c = self.F.CategoryFactory(name="Operating System")

        self.assertEqual(unicode(c), u"Operating System")


    def test_delete_prevention(self):
        """Deleting category used in an environment raises ProtectedError."""
        el = self.F.ElementFactory.create(name="Debian")
        env = self.F.EnvironmentFactory.create()
        env.elements.add(el)

        with self.assertRaises(self.model.ProtectedError):
            el.category.delete()


    def test_delete_prevention_ignores_deleted_envs(self):
        """Can delete category included only in a deleted environment."""
        el = self.F.ElementFactory.create(name="Debian")
        env = self.F.EnvironmentFactory.create()
        env.elements.add(el)

        env.delete()

        el.category.delete()

        self.assertFalse(self.refresh(el.category).deleted_on is None)


    def test_deletable(self):
        """deletable property is False if category is included in an env."""
        el = self.F.ElementFactory.create(name="Debian")
        env = self.F.EnvironmentFactory.create()
        env.elements.add(el)

        self.assertFalse(el.category.deletable)


    def test_deletable_ignores_deleted_envs(self):
        """deletable property is True if category is in deleted environment."""
        el = self.F.ElementFactory.create(name="Debian")
        env = self.F.EnvironmentFactory.create()
        env.elements.add(el)

        env.delete()

        self.assertTrue(el.category.deletable)

########NEW FILE########
__FILENAME__ = test_element
"""
Tests for Element model.

"""
from tests import case



class ElementTest(case.DBTestCase):
    """Tests for Element model."""
    def test_unicode(self):
        """Unicode representation is name of element."""
        e = self.F.ElementFactory.build(name="Windows 7")

        self.assertEqual(unicode(e), u"Windows 7")


    def test_delete_prevention(self):
        """Deleting element included in an environment raises ProtectedError."""
        el = self.F.ElementFactory.create(name="Debian")
        env = self.F.EnvironmentFactory.create()
        env.elements.add(el)

        with self.assertRaises(self.model.ProtectedError):
            el.delete()


    def test_delete_prevention_ignores_deleted_envs(self):
        """Can delete element included only in a deleted environment."""
        el = self.F.ElementFactory.create(name="Debian")
        env = self.F.EnvironmentFactory.create()
        env.elements.add(el)

        env.delete()

        el.delete()

        self.assertFalse(self.refresh(el).deleted_on is None)


    def test_deletable(self):
        """deletable property is False if element is included in an env."""
        el = self.F.ElementFactory.create(name="Debian")
        env = self.F.EnvironmentFactory.create()
        env.elements.add(el)

        self.assertFalse(el.deletable)


    def test_deletable_ignores_deleted_envs(self):
        """deletable property is True if element is in a deleted environment."""
        el = self.F.ElementFactory.create(name="Debian")
        env = self.F.EnvironmentFactory.create()
        env.elements.add(el)

        env.delete()

        self.assertTrue(el.deletable)

########NEW FILE########
__FILENAME__ = test_environment
"""
Tests for Environment model.

"""
from tests import case



class EnvironmentTest(case.DBTestCase):
    def test_unicode(self):
        """Unicode representation is concatenated element names."""
        e = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X"], "Language": ["English"]})[0]

        self.assertEqual(unicode(e), u"English, OS X")


    def test_ordered_elements(self):
        """ordered_elements yields elements in category name order."""
        e = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X"], "Language": ["English"]})[0]

        self.assertEqual(
            [el.name for el in e.ordered_elements()], [u"English", u"OS X"])


    def test_clone(self):
        """Cloning an environment clones element relationships."""
        e = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X"], "Language": ["English"]})[0]

        new = e.clone()

        self.assertEqual(set(new.elements.all()), set(e.elements.all()))


    def test_delete_prevention(self):
        """Deleting env used in a productversion raises ProtectedError."""
        env = self.F.EnvironmentFactory.create()
        self.F.ProductVersionFactory.create(environments=[env])

        with self.assertRaises(self.model.ProtectedError):
            env.delete()


    def test_delete_prevention_ignores_deleted_product_versions(self):
        """Can delete env used only by a deleted product version."""
        env = self.F.EnvironmentFactory.create()
        pv = self.F.ProductVersionFactory.create(environments=[env])

        pv.delete()

        env.delete()

        self.assertFalse(self.refresh(env).deleted_on is None)


    def test_deletable(self):
        """deletable property is False if env is used by a ProductVersion."""
        env = self.F.EnvironmentFactory.create()
        self.F.ProductVersionFactory.create(environments=[env])

        self.assertFalse(env.deletable)


    def test_deletable_ignores_deleted_envs(self):
        """deletable property is True if env used by deleted ProductVersion."""
        env = self.F.EnvironmentFactory.create()
        pv = self.F.ProductVersionFactory.create(environments=[env])

        pv.delete()

        self.assertTrue(env.deletable)


    def test_remove_from_profile_not_in_use(self):
        """If an environment is not in use, remove_from_profile deletes it."""
        el = self.F.ElementFactory.create()
        p = self.model.Profile.generate("Foo", el)
        env = p.environments.get()
        u = self.F.UserFactory()

        env.remove_from_profile(user=u)

        self.assertEqual(self.refresh(env).deleted_by, u)


    def test_remove_from_profile_in_use(self):
        """If an env is in use, remove_from_profile unsets its profile FK."""
        el = self.F.ElementFactory.create()
        p = self.model.Profile.generate("Foo", el)
        env = p.environments.get()
        u = self.F.UserFactory()
        self.F.ProductVersionFactory.create(environments=[env])

        env.remove_from_profile(user=u)

        env = self.refresh(env)
        self.assertEqual(env.profile, None)
        self.assertEqual(env.modified_by, u)

########NEW FILE########
__FILENAME__ = test_hasenvironmentsmodel
"""
Tests for ``HasEnvironmentsModel``.

"""
from tests import case



class HasEnvironmentsModelTest(case.TestCase):
    """Tests for HasEnvironmentsModel base class."""
    @property
    def model_class(self):
        """The abstract model class under test."""
        from moztrap.model.environments.models import HasEnvironmentsModel
        return HasEnvironmentsModel


    def test_parent(self):
        """parent property is None in base class."""
        t = self.model_class()
        self.assertIsNone(t.parent)


    def test_cascade_envs_to(self):
        """cascade_envs_to returns empty dict in base class."""
        self.assertEqual(self.model_class.cascade_envs_to([], True), {})

########NEW FILE########
__FILENAME__ = test_profile
"""
Tests for Profile model.

"""
from tests import case



class ProfileTest(case.DBTestCase):
    def test_unicode(self):
        """Unicode representation is name."""
        p = self.F.ProfileFactory(name="Browser Testing Environments")

        self.assertEqual(unicode(p), u"Browser Testing Environments")


    def test_generate(self):
        """Auto-generating cartesian product of given elements."""
        os = self.F.CategoryFactory(name="Operating System")
        browser = self.F.CategoryFactory(name="Browser")
        windows = self.F.ElementFactory(name="Windows", category=os)
        linux = self.F.ElementFactory(name="Linux", category=os)
        firefox = self.F.ElementFactory(name="Firefox", category=browser)
        chrome = self.F.ElementFactory(name="Chrome", category=browser)

        u = self.F.UserFactory.create()

        p = self.model.Profile.generate(
            "New Profile", windows, linux, firefox, chrome, user=u)

        self.assertEqual(p.name, "New Profile")
        self.assertEqual(p.created_by, u)
        self.assertEqual(
            set([unicode(e) for e in p.environments.all()]),
            set(
                [
                    "Firefox, Linux",
                    "Firefox, Windows",
                    "Chrome, Linux",
                    "Chrome, Windows",
                    ]
                )
            )


    def test_clone(self):
        """Cloning a profile prefixes name with 'Cloned'."""
        p = self.F.ProfileFactory.create(name="Foo")

        new = p.clone()

        self.assertEqual(new.name, "Cloned: Foo")


    def test_clone_environments(self):
        """Cloning a profile clones member environments."""
        p = self.F.ProfileFactory.create()
        env = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Windows"]}, profile=p)[0]

        new = p.clone()

        self.assertEqual(new.environments.count(), 1)
        self.assertNotEqual(new.environments.get(), env)


    def test_categories(self):
        """Categories method returns categories involved in the profile."""
        p = self.F.ProfileFactory.create()
        self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Windows", "OS X"], "Browser": ["Firefox", "Chrome"]},
            profile=p)

        self.assertEqual(
            [c.name for c in p.categories()], ["Browser", "OS"])

########NEW FILE########
__FILENAME__ = test_result
"""
Tests for Result admin.

"""
from tests import case



class ResultAdminTest(case.admin.AdminTestCase):
    app_label = "execution"
    model_name = "result"


    def test_changelist(self):
        """Result changelist page loads without error, contains name."""
        self.F.ResultFactory.create(tester__username="sometester")

        self.get(self.changelist_url).mustcontain("sometester")


    def test_change_page(self):
        """Result change page loads without error, contains name."""
        r = self.F.ResultFactory.create(tester__username="sometester")

        self.get(self.change_url(r)).mustcontain("sometester")


    def test_change_page_stepresult(self):
        """Result change page includes StepResult inline."""
        sr = self.F.StepResultFactory.create(
            status="failed", result__status="started")

        self.get(self.change_url(sr.result)).mustcontain("failed")

########NEW FILE########
__FILENAME__ = test_run
"""
Tests for Run admin.

"""
from tests import case



class RunAdminTest(case.admin.AdminTestCase):
    app_label = "execution"
    model_name = "run"


    def test_changelist(self):
        """Run changelist page loads without error, contains name."""
        self.F.RunFactory.create(name="Some Run")

        self.get(self.changelist_url).mustcontain("Some Run")


    def test_change_page(self):
        """Run change page loads without error, contains name."""
        r = self.F.RunFactory.create(name="Some Run")

        self.get(self.change_url(r)).mustcontain("Some Run")


    def test_change_page_suite(self):
        """Run change page includes RunSuite inline."""
        rs = self.F.RunSuiteFactory.create(
            run__name="Some Run", suite__name="A Suite")

        self.get(self.change_url(rs.run)).mustcontain("A Suite")


    def test_change_page_caseversion(self):
        """Run change page includes RunCaseVersion inline."""
        rcv = self.F.RunCaseVersionFactory.create(
            run__name="Some Run", caseversion__name="A Test Case Version")

        self.get(self.change_url(rcv.run)).mustcontain("A Test Case Version")

########NEW FILE########
__FILENAME__ = test_runcaseversion
"""
Tests for RunCaseVersion admin.

"""
from tests import case



class RunCaseVersionAdminTest(case.admin.AdminTestCase):
    app_label = "execution"
    model_name = "runcaseversion"


    def test_changelist(self):
        """RunCaseVersion changelist page loads without error, contains name."""
        self.F.RunCaseVersionFactory.create(run__name="Some Run")

        self.get(self.changelist_url).mustcontain("Some Run")


    def test_change_page(self):
        """RunCaseVersion change page loads without error, contains name."""
        rcv = self.F.RunCaseVersionFactory.create(run__name="Some Run")

        self.get(self.change_url(rcv)).mustcontain("Some Run")


    def test_change_page_suite(self):
        """RunCaseVersion change page includes Result inline."""
        r = self.F.ResultFactory.create(tester__username="sometester")

        self.get(self.change_url(r.runcaseversion)).mustcontain("sometester")

########NEW FILE########
__FILENAME__ = test_result
"""
Tests for ResultResource api.

This is a write-only resource via ``patch``.  So no read for lists, etc.
This works by providing results for an existing test run.

"""

from tests import case



class ResultResourceTest(case.api.ApiTestCase):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.RunCaseVersionFactory


    @property
    def resource_name(self):
        return "result"


    def test_submit_results_for_run(self):
        """Submit results for an existing test run."""
        user = self.F.UserFactory.create(
            username="foo",
            permissions=["execution.execute"],
            )
        apikey = self.F.ApiKeyFactory.create(owner=user)
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        r1 = self.F.RunFactory.create(name="RunA", productversion=pv)

        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            name="PassCase",
            )
        c_i = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            name="InvalidCase",
            )
        c_f = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            name="FailCase",
            )
        c_b = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            name="BlockCase",
            )
        c_s = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            name="SkipCase",
            )
        self.F.CaseStepFactory(caseversion=c_f)

        self.factory.create(caseversion=c_p, run=r1, environments=envs)
        self.factory.create(caseversion=c_i, run=r1, environments=envs)
        self.factory.create(caseversion=c_f, run=r1, environments=envs)
        self.factory.create(caseversion=c_b, run=r1, environments=envs)
        self.factory.create(caseversion=c_s, run=r1, environments=envs)

        # submit results for these cases
        params = {"username": user.username, "api_key": apikey.key}
        payload = {
            "objects": [
                    {
                    "case": c_p.case.id,
                    "environment": envs[0].id,
                    "run_id": r1.id,
                    "status": "passed"
                },
                    {
                    "case": c_s.case.id,
                    "environment": envs[0].id,
                    "run_id": r1.id,
                    "status": "skipped"
                },
                    {
                    "case": c_i.case.id,
                    "comment": "why u no make sense??",
                    "environment": envs[0].id,
                    "run_id": r1.id,
                    "status": "invalidated"
                },
                    {
                    "case": c_b.case.id,
                    "comment": "why u no run??",
                    "environment": envs[0].id,
                    "run_id": r1.id,
                    "status": "blocked"
                },
                    {
                    "bug": "http://www.deathvalleydogs.com",
                    "case": c_f.case.id,
                    "comment": "why u no pass?",
                    "environment": envs[0].id,
                    "run_id": r1.id,
                    "status": "failed",
                    "stepnumber": 1
                }
            ]
        }


        res = self.patch(
            self.get_list_url(self.resource_name),
            params=params,
            payload=payload,
            )

#        assert False, res.text

        # verify pass results
        result = self.model.Result.objects.get(runcaseversion__caseversion=c_p)
        self.assertEqual(result.status, "passed")
        self.assertEqual(result.environment, envs[0])

        # verify fail results
        result = self.model.Result.objects.get(runcaseversion__caseversion=c_f)
        self.assertEqual(result.status, "failed")
        self.assertEqual(result.comment, "why u no pass?")
        self.assertEqual(set(result.bug_urls()), set(["http://www.deathvalleydogs.com"]))
        self.assertEqual(result.environment, envs[0])

        # verify invalid results
        result = self.model.Result.objects.get(runcaseversion__caseversion=c_i)
        self.assertEqual(result.status, "invalidated")
        self.assertEqual(result.environment, envs[0])
        self.assertEqual(result.comment, "why u no make sense??")


    def test_submit_results_for_run_no_status(self):
        """Submit results for an existing test run without a status."""
        user = self.F.UserFactory.create(
            username="foo",
            permissions=["execution.execute"],
            )
        apikey = self.F.ApiKeyFactory.create(owner=user)
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        r1 = self.F.RunFactory.create(name="RunA", productversion=pv)

        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            name="PassCase",
            )

        self.factory.create(caseversion=c_p, run=r1)

        # submit results for these cases
        params = {"username": user.username, "api_key": apikey.key}
        payload = {
            "objects": [
                    {
                    "case": c_p.case.id,
                    "environment": envs[0].id,
                    "run_id": r1.id,
                }
            ]
        }

        res = self.patch(
            self.get_list_url(self.resource_name),
            params=params,
            payload=payload,
            status=400,
            )


    def test_submit_results_for_run_bad_env_id(self):
        """Submit results for an existing test run with a bad env id."""
        user = self.F.UserFactory.create(
            username="foo",
            permissions=["execution.execute"],
            )
        apikey = self.F.ApiKeyFactory.create(owner=user)
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        r1 = self.F.RunFactory.create(name="RunA", productversion=pv)

        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            name="PassCase",
            )

        self.factory.create(caseversion=c_p, run=r1)

        # submit results for these cases
        params = {"username": user.username, "api_key": apikey.key}
        payload = {
            "objects": [
                    {
                    "case": c_p.case.id,
                    "environment": envs[0].id + 1,
                    "run_id": r1.id,
                    "status": "passed",
                    }
            ]
        }

        res = self.patch(
            self.get_list_url(self.resource_name),
            params=params,
            payload=payload,
            status=400,
            )


    def test_submit_results_for_run_no_runcaseversion(self):
        """Submit results for an existing test run when a runcaseversion doesn't exist."""
        user = self.F.UserFactory.create(
            username="foo",
            permissions=["execution.execute"],
            )
        apikey = self.F.ApiKeyFactory.create(owner=user)
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        r1 = self.F.RunFactory.create(name="RunA", productversion=pv)

        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            name="PassCase",
            )

        # submit results for these cases
        params = {"username": user.username, "api_key": apikey.key}
        payload = {
            "objects": [
                    {
                    "case": c_p.case.id,
                    "environment": envs[0].id,
                    "run_id": r1.id,
                    "status": "passed"
                },
            ]
        }

        res = self.patch(
            self.get_list_url(self.resource_name),
            params=params,
            payload=payload,
            status=400,
            )


    def test_submit_results_for_run_no_authentication(self):
        """Submit results for an existing test run by non-user."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        r1 = self.F.RunFactory.create(name="RunA", productversion=pv)

        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            name="PassCase",
            )

        self.factory.create(caseversion=c_p, run=r1)

        # submit results for these cases
        payload = {
            "objects": [
                    {
                    "case": c_p.case.id,
                    "environment": envs[0].id,
                    "run_id": r1.id,
                    "status": "passed"
                }
            ]
        }

        res = self.patch(
            self.get_list_url(self.resource_name),
            payload=payload,
            status=401,
            )


    def test_submit_results_for_run_no_authorization(self):
        """Submit results for an existing test run by user without perms."""
        user = self.F.UserFactory.create(
            username="foo",
            )
        apikey = self.F.ApiKeyFactory.create(owner=user)
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        r1 = self.F.RunFactory.create(name="RunA", productversion=pv)

        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            name="PassCase",
            )

        self.factory.create(caseversion=c_p, run=r1)

        # submit results for these cases
        params = {"username": user.username, "api_key": apikey.key}
        payload = {
            "objects": [
                    {
                    "case": c_p.case.id,
                    "environment": envs[0].id,
                    "run_id": r1.id,
                    "status": "passed"
                }
            ]
        }

        res = self.patch(
            self.get_list_url(self.resource_name),
            payload=payload,
            params=params,
            status=401,
            )

########NEW FILE########
__FILENAME__ = test_run
"""
Tests for RunResource api.

"""

from tests import case



class RunResourceTest(case.api.ApiTestCase):

    @property
    def factory(self):
        """The model factory for Runs."""
        return self.F.RunFactory


    @property
    def resource_name(self):
        return "run"


    @property
    def auth_params(self):
        user = self.F.UserFactory.create(
            username="foo",
            permissions=["execution.execute"],
            )
        apikey = self.F.ApiKeyFactory.create(owner=user)
        return {"username": user.username, "api_key": apikey.key}


    def test_run_list(self):
        """Get a list of existing test runs"""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        r1 = self.factory.create(
            name="Foo",
            description="this",
            environments=envs,
            )
        pv = r1.productversion
        r2 = self.factory.create(
            name="Bar",
            description="that",
            productversion=pv,
            environments=envs,
            )

        res = self.get_list(params=self.auth_params)

        exp_meta = {
            "limit": 20,
            "next": None,
            "offset": 0,
            "previous": None,
            "total_count": 2,
            }

        self.assertEquals(res.json["meta"], exp_meta)

        act_objects = res.json["objects"]
        # make the envs a set, for comparison.
        for ao in act_objects:
            ao["environments"] = set(ao["environments"])

        exp_objects = []
        for exp_run in [r1, r2]:
            exp_objects.append({
                u"description": unicode(exp_run.description),
                u'environments': set([
                    unicode(self.get_detail_url("environment", envs[0].id)),
                    unicode(self.get_detail_url("environment", envs[1].id)),
                    ]),
                u"id": unicode(exp_run.id),
                u"name": unicode(exp_run.name),
                u"product_name": unicode(pv.product.name),
                u"productversion": u"/api/v1/productversion/{0}/".format(pv.id),
                u"productversion_name": unicode(pv.version),
                u"resource_uri": u"/api/v1/run/{0}/".format(exp_run.id),
                u"runcaseversions": [],
                u"status": u"draft",
                })

        self.maxDiff = None
        self.assertEqual(exp_objects, act_objects)


    def test_run_by_id_shows_env_detail(self):
        """Get a single test run, by id shows expanded detail for environments"""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"]})
        r = self.factory(name="Floo", environments=envs)

        res = self.get_detail(r.id, params=self.auth_params)

        exp_objects = {
            u'elements': [
                 unicode(self.get_detail_url(
                     "element",
                     envs[0].elements.get().id),
                 )],
            u'id': unicode(envs[0].id),
            u'profile': unicode(self.get_detail_url(
                "profile", envs[0].profile.id
            )),
            u'resource_uri': unicode(self.get_detail_url(
                "environment",
                envs[0].id),
                ),
            }

        self.assertEqual(unicode(r.name), res.json["name"], res.json)
        self.assertEqual(res.json["environments"][0], exp_objects)


    def test_submit_new_run_with_results(self):
        """Submit a new test run with results."""

        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )
        c_i = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )
        c_f = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )
        c_b = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )
        c_s = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )
        self.F.CaseStepFactory(caseversion=c_f)

        # submit results for these cases
        payload = {
            "description": "a description",
            "environments": [
                self.get_detail_url("environment", envs[0].id),
                ],
            "name": "atari autorun.sys",
            "productversion": self.get_detail_url("productversion", pv.id),
            "runcaseversions": [
                    {"case": unicode(c_i.case.id),
                     "comment": "what the hellfire?",
                     "environment": unicode(envs[0].id),
                     "status": "invalidated",
                     },
                    {"case": unicode(c_b.case.id),
                     "comment": "no can do",
                     "environment": unicode(envs[0].id),
                     "status": "blocked",
                     },
                    {"case": unicode(c_p.case.id),
                     "environment": unicode(envs[0].id),
                     "status": "passed"
                    },
                    {"case": unicode(c_s.case.id),
                     "environment": unicode(envs[0].id),
                     "status": "skipped"
                    },
                    {"bug": "http://www.deathvalleydogs.com",
                     "case": unicode(c_f.case.id),
                     "comment": "dang thing...",
                     "environment": unicode(envs[0].id),
                     "status": "failed",
                     "stepnumber": 1
                },
            ],
            "status": "active"
        }

        res = self.post(
            self.get_list_url(self.resource_name),
            payload=payload,
            params=self.auth_params,
            )

        # verify run
        run = self.model.Run.objects.get()
        self.assertEqual("atari autorun.sys", run.name)

        # verify returned content
        self.assertEqual(
            res.json["ui_uri"],
            u"/results/cases/?filter-run={0}".format(run.id),
            )

        # verify runcaseversions
        for cv in [c_f, c_p, c_i]:
            rcv = self.model.RunCaseVersion.objects.get(caseversion__id=cv.id)
            self.assertEqual(rcv.run.id, run.id)

        # verify pass results
        result = self.model.Result.objects.get(runcaseversion__caseversion=c_p)
        self.assertEqual(result.status, "passed")
        self.assertEqual(result.environment, envs[0])

        # verify fail results
        result = self.model.Result.objects.get(runcaseversion__caseversion=c_f)
        self.assertEqual(result.status, "failed")
        self.assertEqual(result.comment, "dang thing...")

        self.assertEqual(set(result.bug_urls()), set(["http://www.deathvalleydogs.com"]))
        self.assertEqual(result.environment, envs[0])

        # verify invalid results
        result = self.model.Result.objects.get(runcaseversion__caseversion=c_i)
        self.assertEqual(result.status, "invalidated")
        self.assertEqual(result.environment, envs[0])
        self.assertEqual(result.comment, "what the hellfire?")


    def test_submit_new_run_bad_case_id(self):
        """Submit a new test run for a case that doesn't exist."""

        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)

        # submit results for these cases
        payload = {
            "description": "a description",
            "environments": [
                self.get_detail_url("environment", envs[0].id),
                ],
            "name": "atari autorun.sys",
            "productversion": self.get_detail_url("productversion", pv.id),
            "runcaseversions": [
                    {"case": unicode(2),
                     "environment": unicode(envs[0].id),
                     "status": "passed"
                },
            ],
            "status": "active"
        }

        self.post(
            self.get_list_url(self.resource_name),
            payload=payload,
            params=self.auth_params,
            status=400,
            )


    def test_submit_new_run_bad_env_id(self):
        """Submit a new test run with results."""

        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )

        # submit results for these cases
        payload = {
            "description": "a description",
            "environments": [
                self.get_detail_url("environment", envs[0].id),
                ],
            "name": "atari autorun.sys",
            "productversion": self.get_detail_url("productversion", pv.id),
            "runcaseversions": [
                {"case": unicode(c_p.case.id),
                     "environment": unicode(envs[0].id + 1),
                     "status": "passed"
                     },
            ],
            "status": "active"
        }

        self.post(
            self.get_list_url(self.resource_name),
            payload=payload,
            params=self.auth_params,
            status=400,
            )


    def test_submit_new_run_with_missing_status_field(self):
        """
        Submit a new test run with bad results data.

        No status in the runcaseversion.
        """

        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )

        # submit results for these cases
        payload = {
            "description": "a description",
            "environments": [
                self.get_detail_url("environment", envs[0].id),
                ],
            "name": "atari autorun.sys",
            "productversion": self.get_detail_url("productversion", pv.id),
            "runcaseversions": [
                {"case": unicode(c_p.case.id),
                 "environment": unicode(envs[0].id),
                },
            ],
            "status": "active"
        }

        self.post(
            self.get_list_url(self.resource_name),
            payload=payload,
            params=self.auth_params,
            status=400,
            )


    def test_run_no_authentication(self):
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )

        # submit results for these cases
        payload = {
            "description": "a description",
            "environments": [
                self.get_detail_url("environment", envs[0].id),
                ],
            "name": "atari autorun.sys",
            "productversion": self.get_detail_url("productversion", pv.id),
            "runcaseversions": [
                    {"case": unicode(c_p.case.id),
                     "environment": unicode(envs[0].id),
                     "status": "passed"
                },
            ],
            "status": "active"
        }

        self.post(
            self.get_list_url(self.resource_name),
            payload=payload,
            status=401,
            )


    def test_run_bad_api_key(self):
        user = self.F.UserFactory.create(
            username="foo",
            permissions=["execution.execute"],
            )
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )

        # submit results for these cases
        params = {"username": user.username, "api_key": "abc123"}
        payload = {
            "description": "a description",
            "environments": [
                self.get_detail_url("environment", envs[0].id),
                ],
            "name": "atari autorun.sys",
            "productversion": self.get_detail_url("productversion", pv.id),
            "runcaseversions": [
                    {"case": unicode(c_p.case.id),
                     "environment": unicode(envs[0].id),
                     "status": "passed"
                },
            ],
            "status": "active"
        }

        self.post(
            self.get_list_url(self.resource_name),
            payload=payload,
            params=params,
            status=401,
            )


    def test_submit_run_no_authorization(self):
        user = self.F.UserFactory.create(
            username="foo",
            )
        apikey = self.F.ApiKeyFactory.create(owner=user)

        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )

        # submit results for these cases
        params = {"username": user.username, "api_key": apikey.key}
        payload = {
            "description": "a description",
            "environments": [
                self.get_detail_url("environment", envs[0].id),
                ],
            "name": "atari autorun.sys",
            "productversion": self.get_detail_url("productversion", pv.id),
            "runcaseversions": [
                {"case": unicode(c_p.case.id),
                 "environment": unicode(envs[0].id),
                 "status": "passed"
                 },
            ],
            "status": "active"
        }

        self.post(
            self.get_list_url(self.resource_name),
            payload=payload,
            params=params,
            status=401,
            )


    def test_submit_run_no_user(self):

        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        c_p = self.F.CaseVersionFactory.create(
            case__product=pv.product,
            productversion=pv,
            )

        # submit results for these cases
        params = {"username": "foo", "api_key": "abc123"}
        payload = {
            "description": "a description",
            "environments": [
                self.get_detail_url("environment", envs[0].id),
                ],
            "name": "atari autorun.sys",
            "productversion": self.get_detail_url("productversion", pv.id),
            "runcaseversions": [
                    {"case": unicode(c_p.case.id),
                     "environment": unicode(envs[0].id),
                     "status": "passed"
                },
            ],
            "status": "active"
        }

        self.post(
            self.get_list_url(self.resource_name),
            payload=payload,
            params=params,
            status=401,
            )

########NEW FILE########
__FILENAME__ = test_runcaseversion
"""
Tests for RunCaseVersionResource api.

"""

from tests import case



class RunCaseVersionResourceTest(case.api.ApiTestCase):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.RunCaseVersionFactory


    @property
    def resource_name(self):
        return "runcaseversion"


    def test_runcaseversion_list(self):
        """Get a list of existing runcaseversions"""
        r1 = self.F.RunFactory.create(name="RunA")

        c1 = self.F.CaseVersionFactory.create(name="Case1", description="ab")
        c2 = self.F.CaseVersionFactory.create(name="Case2", description="cd")

        rcv1 = self.factory.create(caseversion=c1, run=r1)
        rcv2 = self.factory.create(caseversion=c2, run=r1)

        res = self.get_list()
        self.assertEqual(res.status_int, 200)

        act = res.json

        act_meta = act["meta"]
        exp_meta = {
            "limit": 20,
            "next": None,
            "offset": 0,
            "previous": None,
            "total_count": 2,
            }

        self.assertEquals(act_meta, exp_meta)

        act_objects = act["objects"]
        exp_objects = []
        for rcv in [rcv1, rcv2]:
            cv = rcv.caseversion

            exp_objects.append({
                u"caseversion": {
                    u"case": unicode(self.get_detail_url("case", cv.case.id)),
                    u"description": unicode(cv.description),
                    u'environments': [],
                    u"id": unicode(cv.id),
                    u"name": unicode(cv.name),
                    u"productversion": unicode(self.get_detail_url(
                        "productversion",
                        cv.productversion.id)),
                    u"resource_uri": unicode(self.get_detail_url(
                        "caseversion",
                        cv.id,
                        )),
                    u'steps': [],
                    u'tags': [],
                    u'status': unicode(cv.status),
                    },
                u"id": unicode(rcv.id),
                u"run": unicode(self.get_detail_url("run", rcv.run.id)),
                u"resource_uri": unicode(self.get_detail_url(
                    "runcaseversion",
                    rcv.id,
                    )),
                })

        self.maxDiff = None
        self.assertEqual(exp_objects, act_objects)

########NEW FILE########
__FILENAME__ = test_runsuite_resource
"""
Tests for RunRunResource api.

"""
from tests.case.api.crud import ApiCrudCases

import logging
mozlogger = logging.getLogger('moztrap.test')


class RunSuiteResourceTest(ApiCrudCases):
    """Please see the test suites implemented in tests.suite.api.ApiCrudSuites.

    The following abstract methods must be implemented:
      - factory(self)                           (property)
      - resource_name(self)                     (property)
      - permission(self)                        (property)
      - new_object_data(self)                   (property)
      - backend_object(self, id)                (method)
      - backend_data(self, backend_object)      (method)
      - backend_meta_data(self, backend_object) (method)

    """

    # implementations for abstract methods and properties

    @property
    def factory(self):
        """The factory to use to create fixtures of the object under test.
        """
        return self.F.RunSuiteFactory()


    @property
    def resource_name(self):
        """String defining the resource name.
        """
        return "runsuite"


    @property
    def permission(self):
        """String defining the permission required for
        Create, Update, and Delete.
        """
        return "execution.manage_runs"


    def order_generator(self):
        """give an incrementing number for order."""
        self.__dict__.setdefault("order", 0)
        self.order += 1
        return self.order


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        self.productversion_fixture = self.F.ProductVersionFactory.create()
        self.suite_fixture = self.F.SuiteFactory.create(
            product=self.productversion_fixture.product)
        self.run_fixture = self.F.RunFactory.create(
            productversion=self.productversion_fixture)

        fields = {
            u"suite": unicode(
                self.get_detail_url("suite", str(self.suite_fixture.id))),
            u"run": unicode(
                self.get_detail_url("run", str(self.run_fixture.id))
            ),
            u"order": self.order_generator(),
            }
        return fields


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.RunSuite.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        return {
            u"id": unicode(str(backend_obj.id)),
            u"resource_uri": unicode(
                self.get_detail_url(self.resource_name, str(backend_obj.id))),
            u"suite": unicode(
                self.get_detail_url("suite", str(backend_obj.suite.id))),
            u"run": unicode(
                self.get_detail_url("run", str(backend_obj.run.id))),
            u"order": backend_obj.order,
            }


    @property
    def read_create_fields(self):
        """List of fields that are required for create but read-only for update."""
        return ["run", "suite"]

    # overrides from crud.py

    # additional test suites, if any

    # validation suites

    def test_create_mismatched_product_error(self):
        """error if run.product does not match suite.product"""

        mozlogger.info("test_create_mismatched_product_error")

        fields = self.new_object_data
        product = self.F.ProductFactory()
        self.suite_fixture.product = product
        self.suite_fixture.save()

        # do post
        res = self.post(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            status=400,
            )

        error_message = str(
            "suite's product must match run's product."
        )
        self.assertEqual(res.text, error_message)

########NEW FILE########
__FILENAME__ = test_result
"""
Tests for Result model.

"""
from tests import case



class ResultTest(case.DBTestCase):
    """Tests for Result."""
    def test_unicode(self):
        env = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X"], "Language": ["English"]})[0]

        r = self.F.ResultFactory(
            status="started",
            runcaseversion__run__name="FF10",
            runcaseversion__caseversion__name="Open URL",
            tester__username="tester",
            environment=env,
            )

        self.assertEqual(
            unicode(r),
            u"Case 'Open URL' included in run 'FF10', "
            "run by tester in English, OS X: started")


    def test_bug_urls(self):
        """Result.bug_urls aggregates bug urls from step results, sans dupes."""
        r = self.F.ResultFactory()
        self.F.StepResultFactory.create(result=r)
        self.F.StepResultFactory.create(
            result=r, bug_url="http://www.example.com/bug1")
        self.F.StepResultFactory.create(
            result=r, bug_url="http://www.example.com/bug1")
        self.F.StepResultFactory.create(
            result=r, bug_url="http://www.example.com/bug2")

        self.assertEqual(
            r.bug_urls(),
            set(["http://www.example.com/bug1", "http://www.example.com/bug2"])
            )


    def test_save_old_result_doesnt_become_latest(self):
        """Saving an older result doesn't mark it as latest."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.result_pass(envs[0], user=u)
        r1 = rcv.results.get(is_latest=True)

        rcv.result_fail(envs[0], user=u)
        r2 = rcv.results.get(is_latest=True)

        r1 = self.refresh(r1)
        r1.comment = "this is it"
        r1.save()

        r1 = self.refresh(r1)
        r2 = self.refresh(r2)

        self.assertEqual(r2.status, "failed")
        self.assertEqual(r2.is_latest, True)
        self.assertEqual(r1.is_latest, False)

########NEW FILE########
__FILENAME__ = test_run
"""
Tests for Run model.

"""
import datetime
from mock import patch

from django.core.exceptions import ValidationError

from moztrap.model.execution.models import Run

from tests import case



class RunTest(case.DBTestCase):
    def test_unicode(self):
        r = self.F.RunFactory(name="Firefox 10 final run")

        self.assertEqual(unicode(r), u"Firefox 10 final run")


    def test_invalid_dates(self):
        """Run validates that start date is not after end date."""
        today = datetime.date(2011, 12, 13)
        r = self.F.RunFactory(
            start=today,
            end=today - datetime.timedelta(days=1))

        with self.assertRaises(ValidationError):
            r.full_clean()


    def test_valid_dates(self):
        """Run validation allows start date before or same as end date."""
        today = datetime.date(2011, 12, 13)
        r = self.F.RunFactory(
            start=today,
            end=today + datetime.timedelta(days=1))

        r.full_clean()


    def test_parent(self):
        """A Run's ``parent`` property returns its ProductVersion."""
        r = self.F.RunFactory()

        self.assertIs(r.parent, r.productversion)


    def test_own_team(self):
        """If ``has_team`` is True, Run's team is its own."""
        r = self.F.RunFactory.create(has_team=True)
        u = self.F.UserFactory.create()
        r.own_team.add(u)

        self.assertEqual(list(r.team.all()), [u])


    def test_inherit_team(self):
        """If ``has_team`` is False, Run's team is its parent's."""
        r = self.F.RunFactory.create(has_team=False)
        u = self.F.UserFactory.create()
        r.productversion.team.add(u)

        self.assertEqual(list(r.team.all()), [u])


    def test_clone(self):
        """Cloning a run returns a new, distinct Run with "Cloned: " name."""
        r = self.F.RunFactory.create(name="A Run")

        new = r.clone()

        self.assertNotEqual(new, r)
        self.assertIsInstance(new, type(r))
        self.assertEqual(new.name, "Cloned: A Run")


    def test_clone_sets_draft(self):
        """Clone of active run is still draft."""
        r = self.F.RunFactory.create(status="active")

        new = r.clone()

        self.assertEqual(new.status, "draft")


    def test_clone_for_series(self):
        """Clone of active run series makes a new run that is ready to run."""
        r = self.F.RunFactory.create(status="active", is_series=True)

        new = r.clone_for_series(build="ABERCIE")

        self.assertEqual(new.status, "draft")
        self.assertEqual(new.name, "Test Run - Build: ABERCIE")
        self.assertEqual(new.is_series, False)
        self.assertEqual(new.series, r)
        self.assertEqual(new.build, "ABERCIE")


    def test_default_draft(self):
        """New run defaults to draft state."""
        r = self.F.RunFactory.create()

        self.assertEqual(r.status, "draft")


    def test_clone_included_suite(self):
        """Cloning a run clones member RunSuites."""
        rs = self.F.RunSuiteFactory.create()

        new = rs.run.clone()

        self.assertNotEqual(new.runsuites.get(), rs)


    def test_clone_no_run_caseversions(self):
        """Cloning a run does not clone member RunCaseVersions."""
        rcv = self.F.RunCaseVersionFactory.create()

        new = rcv.run.clone()

        self.assertEqual(new.runcaseversions.count(), 0)


    def test_clone_environments(self):
        """Cloning a Run clones its environments."""
        r = self.F.RunFactory(environments={"OS": ["OS X", "Linux"]})

        new = r.clone()

        self.assertEqual(len(new.environments.all()), 2)


    def test_clone_environments_narrowed(self):
        """Cloning a Run clones its environments exactly, even if narrowed."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory(environments=envs)
        r = self.F.RunFactory(productversion=pv, environments=envs[1:])

        self.assertEqual(len(r.environments.all()), 1)

        new = r.clone()

        self.assertEqual(len(new.environments.all()), 1)


    def test_clone_team(self):
        """Cloning a Run clones its team."""
        r = self.F.RunFactory(team=["One", "Two"])

        new = r.clone()

        self.assertEqual(len(new.team.all()), 2)


    def test_gets_productversion_envs(self):
        """A new test run inherits the environments of its product version."""
        pv = self.F.ProductVersionFactory.create(
            environments={"OS": ["Windows", "Linux"]})

        r = self.F.RunFactory.create(productversion=pv)

        self.assertEqual(set(r.environments.all()), set(pv.environments.all()))


    def test_inherits_env_removal(self):
        """Removing an env from a productversion cascades to run."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        run = self.F.RunFactory.create(productversion=pv)

        pv.remove_envs(envs[0])

        self.assertEqual(set(run.environments.all()), set(envs[1:]))


    def test_draft_run_inherits_env_addition(self):
        """Adding an env to a productversion cascades to a draft run."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs[1:])
        run = self.F.RunFactory.create(productversion=pv, status="draft")

        pv.add_envs(envs[0])

        self.assertEqual(set(run.environments.all()), set(envs))


    def test_active_run_does_not_inherit_env_addition(self):
        """Adding env to a productversion does not cascade to an active run."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs[1:])
        run = self.F.RunFactory.create(productversion=pv, status="active")

        pv.add_envs(envs[0])

        self.assertEqual(set(run.environments.all()), set(envs[1:]))


    def test_result_summary(self):
        """``result_summary`` returns dict summarizing result states."""
        r = self.F.RunFactory()
        rcv1 = self.F.RunCaseVersionFactory(run=r)
        rcv2 = self.F.RunCaseVersionFactory(run=r)

        self.F.ResultFactory(runcaseversion=rcv1, status="assigned")
        self.F.ResultFactory(runcaseversion=rcv2, status="started")
        self.F.ResultFactory(runcaseversion=rcv1, status="passed")
        self.F.ResultFactory(runcaseversion=rcv2, status="failed")
        self.F.ResultFactory(runcaseversion=rcv1, status="failed")
        self.F.ResultFactory(runcaseversion=rcv1, status="blocked")
        self.F.ResultFactory(runcaseversion=rcv2, status="invalidated")
        self.F.ResultFactory(runcaseversion=rcv1, status="invalidated")
        self.F.ResultFactory(runcaseversion=rcv2, status="invalidated")

        self.assertEqual(
            r.result_summary(),
            {
                "passed": 1,
                "failed": 2,
                "blocked": 1,
                "invalidated": 3
                }
            )


    def test_result_summary_specific(self):
        """``result_summary`` doesn't return results from other runs."""
        r = self.F.RunFactory()
        rcv = self.F.RunCaseVersionFactory(run=r)
        self.F.ResultFactory(runcaseversion=rcv, status="passed")

        r2 = self.F.RunFactory()

        self.assertEqual(
            r2.result_summary(),
            {
                "passed": 0,
                "failed": 0,
                "blocked": 0,
                "invalidated": 0
                }
            )


    def test_completion_percentage(self):
        """``completion`` returns fraction of case/env combos completed."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Windows", "Linux"]})
        pv = self.F.ProductVersionFactory(environments=envs)
        run = self.F.RunFactory(productversion=pv)
        rcv1 = self.F.RunCaseVersionFactory(
            run=run, caseversion__productversion=pv)
        rcv2 = self.F.RunCaseVersionFactory(
            run=run, caseversion__productversion=pv)

        self.F.ResultFactory(
            runcaseversion=rcv1, environment=envs[0], status="passed")
        self.F.ResultFactory(
            runcaseversion=rcv1, environment=envs[0], status="failed")
        self.F.ResultFactory(
            runcaseversion=rcv2, environment=envs[1], status="started")

        self.assertEqual(run.completion(), 0.25)


    def test_completion_percentage_empty(self):
        """If no runcaseversions, ``completion`` returns zero."""
        run = self.F.RunFactory()

        self.assertEqual(run.completion(), 0)





class RunActivationTest(case.DBTestCase):
    """Tests for activating runs and locking-in runcaseversions."""

    def setUp(self):
        """Set up envs, product and product versions used by all tests."""
        self.envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"], "Browser": ["Firefox", "Chrome"]})
        self.p = self.F.ProductFactory.create()
        self.pv8 = self.F.ProductVersionFactory.create(
            product=self.p, version="8.0", environments=self.envs)
        self.pv9 = self.F.ProductVersionFactory.create(
            product=self.p, version="9.0", environments=self.envs)


    def assertCaseVersions(self, run, caseversions):
        """Assert that ``run`` has (only) ``caseversions`` in it (any order)."""
        self.assertEqual(
            set([rcv.caseversion.id for rcv in run.runcaseversions.all()]),
            set([cv.id for cv in caseversions])
            )


    def assertOrderedCaseVersions(self, run, caseversions):
        """Assert that ``run`` has (only) ``caseversions`` in it (in order)."""
        self.assertEqual(
            [rcv.caseversion.id for rcv in run.runcaseversions.all()],
            [cv.id for cv in caseversions]
            )


    def test_productversion(self):
        """Selects test case version for run's product version."""
        tc = self.F.CaseFactory.create(product=self.p)
        tcv1 = self.F.CaseVersionFactory.create(
            case=tc, productversion=self.pv8, status="active")
        self.F.CaseVersionFactory.create(
            case=tc, productversion=self.pv9, status="active")

        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=tc)

        r = self.F.RunFactory.create(productversion=self.pv8)
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        self.assertCaseVersions(r, [tcv1])


    def test_draft_not_included(self):
        """Only active test cases are considered."""
        tc = self.F.CaseFactory.create(product=self.p)
        self.F.CaseVersionFactory.create(
            case=tc, productversion=self.pv8, status="draft")

        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=tc)

        r = self.F.RunFactory.create(productversion=self.pv8)
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        self.assertCaseVersions(r, [])


    def test_soft_deleted_not_included(self):
        """Only active test cases are considered."""
        tc = self.F.CaseFactory.create(product=self.p)
        cv = self.F.CaseVersionFactory.create(
            case=tc, productversion=self.pv8, status="active")

        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=tc)

        r = self.F.RunFactory.create(productversion=self.pv8)
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        cv.delete()
        r.activate()

        self.assertCaseVersions(r, [])


    def test_only_active_suite(self):
        """Only test cases in an active suite are considered."""
        tc = self.F.CaseFactory.create(product=self.p)
        self.F.CaseVersionFactory.create(
            case=tc, productversion=self.pv8, status="active")

        ts = self.F.SuiteFactory.create(product=self.p, status="draft")
        self.F.SuiteCaseFactory.create(suite=ts, case=tc)

        ts1 = self.F.SuiteFactory.create(product=self.p, status="locked")
        self.F.SuiteCaseFactory.create(suite=ts1, case=tc)

        r = self.F.RunFactory.create(productversion=self.pv8)
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        self.assertCaseVersions(r, [])


    def test_wrong_product_version_not_included(self):
        """Only caseversions for correct productversion are considered."""
        tc = self.F.CaseFactory.create(product=self.p)
        self.F.CaseVersionFactory.create(
            case=tc, productversion=self.pv9, status="active")

        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=tc)

        r = self.F.RunFactory.create(productversion=self.pv8)
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        self.assertCaseVersions(r, [])


    def test_no_environments_in_common(self):
        """Caseversion with no env overlap with run will not be included."""
        self.pv8.environments.add(*self.envs)

        tc = self.F.CaseFactory.create(product=self.p)
        tcv1 = self.F.CaseVersionFactory.create(
            case=tc, productversion=self.pv8, status="active")
        tcv1.remove_envs(*self.envs[:2])

        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=tc)

        r = self.F.RunFactory.create(productversion=self.pv8)
        r.remove_envs(*self.envs[2:])
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        self.assertCaseVersions(r, [])


    def test_ordering(self):
        """Suite/case ordering reflected in runcaseversion order."""
        tc1 = self.F.CaseFactory.create(product=self.p)
        tcv1 = self.F.CaseVersionFactory.create(
            case=tc1, productversion=self.pv8, status="active")
        tc2 = self.F.CaseFactory.create(product=self.p)
        tcv2 = self.F.CaseVersionFactory.create(
            case=tc2, productversion=self.pv8, status="active")
        tc3 = self.F.CaseFactory.create(product=self.p)
        tcv3 = self.F.CaseVersionFactory.create(
            case=tc3, productversion=self.pv8, status="active")
        tc4 = self.F.CaseFactory.create(product=self.p)
        tcv4 = self.F.CaseVersionFactory.create(
            case=tc4, productversion=self.pv8, status="active")

        ts1 = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts1, case=tc3, order=1)
        self.F.SuiteCaseFactory.create(suite=ts1, case=tc4, order=2)
        ts2 = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts2, case=tc1, order=1)
        self.F.SuiteCaseFactory.create(suite=ts2, case=tc2, order=2)

        r = self.F.RunFactory.create(productversion=self.pv8)
        self.F.RunSuiteFactory.create(suite=ts2, run=r, order=1)
        self.F.RunSuiteFactory.create(suite=ts1, run=r, order=2)

        r.activate()

        self.assertOrderedCaseVersions(r, [tcv1, tcv2, tcv3, tcv4])


    def test_sets_status_active(self):
        """Sets status of run to active."""
        r = self.F.RunFactory.create(status="draft")

        r.activate()

        self.assertEqual(self.refresh(r).status, "active")


    def test_already_active(self):
        """Has no effect on already-active run."""
        tc = self.F.CaseFactory.create(product=self.p)
        self.F.CaseVersionFactory.create(
            case=tc, productversion=self.pv8, status="active")

        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=tc)

        r = self.F.RunFactory.create(productversion=self.pv8, status="active")
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        self.assertCaseVersions(r, [])


    def test_run_series_no_runcaseversions(self):
        """Run series don't get runcaseversions."""
        tc = self.F.CaseFactory.create(product=self.p)
        self.F.CaseVersionFactory.create(
            case=tc, productversion=self.pv8, status="active")

        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=tc)

        r = self.F.RunFactory.create(
            productversion=self.pv8,
            status="draft",
            is_series=True)
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        self.assertCaseVersions(r, [])


    def test_disabled(self):
        """Sets disabled run to active but does not create runcaseversions."""
        tc = self.F.CaseFactory.create(product=self.p)
        self.F.CaseVersionFactory.create(
            case=tc, productversion=self.pv8, status="active")

        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=tc)

        r = self.F.RunFactory.create(
            productversion=self.pv8, status="disabled")
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        self.assertCaseVersions(r, [])
        self.assertEqual(self.refresh(r).status, "active")


    def test_removes_duplicate_runcaseversions(self):
        """
        Re-activating a run that has duplicate runcaseversions removes them.

        If there is a result for any dupes, it will preserve the one with the
        latest result.

        """
        r = self.F.RunFactory.create(productversion=self.pv8, status="draft")
        cv = self.F.CaseVersionFactory.create(
            productversion=self.pv8,
            status="active",
            name="got a dup",
            )
        rcv1 = self.F.RunCaseVersionFactory.create(
            run=r,
            caseversion=cv,
            )
        # rcv1 will have results
        self.F.ResultFactory.create(runcaseversion=rcv1)
        self.F.ResultFactory.create(runcaseversion=rcv1)

        # rcv2 will be a dup, but will have a later result, so rcv1 will
        # get removed on activation
        rcv2 = self.F.RunCaseVersionFactory.create(
            run=r,
            caseversion=cv,
            )
        self.F.ResultFactory.create(runcaseversion=rcv2)
        rcv3 = self.F.RunCaseVersionFactory.create(
            run=r,
            caseversion__productversion=self.pv8,
            caseversion__status="active",
            caseversion__name="no dup",
            )
        ts = self.F.SuiteFactory.create(product=self.p, status="active")

        # add the cases to the suite
        self.F.SuiteCaseFactory.create(suite=ts, case=rcv1.caseversion.case)
        self.F.SuiteCaseFactory.create(suite=ts, case=rcv3.caseversion.case)

        # add the suite to the run
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        rcv = r.runcaseversions.all()
        self.assertEqual(rcv.count(), 2)
        self.assertEqual(set(rcv), set([rcv2, rcv3]))


    def test_removes_unused_runcaseversions(self):
        """
        Re-activating a run that has had a caseversion removed cleans them up.

        Environments are set to current values; all results are preserved.

        """
        r = self.F.RunFactory.create(productversion=self.pv8, status="draft")
        rcv1 = self.F.RunCaseVersionFactory.create(
            run=r,
            caseversion__productversion=self.pv8,
            caseversion__status="active",
            )
        rcv1.environments.remove(self.envs[1])
        self.F.ResultFactory.create(runcaseversion=rcv1)
        self.F.ResultFactory.create(runcaseversion=rcv1)
        rcv2 = self.F.RunCaseVersionFactory.create(
            run=r,
            caseversion__productversion=self.pv8,
            caseversion__status="active",
            )
        self.F.ResultFactory.create(runcaseversion=rcv2)
        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=rcv1.caseversion.case)
        # rcv2 is NOT in the suite, so should be removed during activate
        self.F.RunSuiteFactory.create(suite=ts, run=r)
        r.environments.remove(self.envs[0])

        r.activate()

        rcv = r.runcaseversions.get()
        self.assertEqual(set(rcv.environments.all()), set(self.envs[1:]))
        self.assertEqual(rcv.results.count(), 2)


    def test_updates_envs_on_previously_included_rcv(self):
        """Re-activating updates envs on previously-included caseversions."""
        r = self.F.RunFactory.create(productversion=self.pv8, status="draft")
        rcv = self.F.RunCaseVersionFactory.create(
            run=r,
            caseversion__productversion=self.pv8,
            caseversion__status="active",
            )
        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=rcv.caseversion.case)
        self.F.RunSuiteFactory.create(suite=ts, run=r)
        rcv.caseversion.environments.remove(self.envs[0])

        r.activate()

        self.assertEqual(set(rcv.environments.all()), set(self.envs[1:]))


    def test_removes_draft_caseversions_and_their_results(self):
        """Re-activating removes caseversions that are now draft."""
        r = self.F.RunFactory.create(productversion=self.pv8, status="draft")
        rcv = self.F.RunCaseVersionFactory.create(
            run=r,
            caseversion__productversion=self.pv8,
            caseversion__status="draft",
            )
        self.F.ResultFactory.create(runcaseversion=rcv)
        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=rcv.caseversion.case)
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        self.assertEqual(r.runcaseversions.count(), 0)
        self.assertEqual(
            self.model.Result.objects.filter(runcaseversion__run=r).count(), 0)
        self.assertEqual(
            self.model.Result.objects.count(), 0)


    def test_removes_no_env_overlap_caseversions(self):
        """Re-activating removes caseversions that now have no env overlap."""
        r = self.F.RunFactory.create(productversion=self.pv8, status="draft")
        rcv = self.F.RunCaseVersionFactory.create(
            run=r,
            caseversion__productversion=self.pv8,
            caseversion__status="draft",
            )
        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=rcv.caseversion.case)
        self.F.RunSuiteFactory.create(suite=ts, run=r)
        rcv.caseversion.environments.remove(self.envs[0])
        r.environments.remove(*self.envs[1:])

        r.activate()

        self.assertEqual(r.runcaseversions.count(), 0)


    def test_query_count_on_activate(self):
        """
        Count number of queries needed for activation of complex run.

        Queries explained:
        ------------------

        Query 1: Get the environment ids from this run

            "SELECT `environments_environment`.`id` FROM
            `environments_environment` INNER JOIN
            `execution_run_environments` ON (`environments_environment`.`id`
             = `execution_run_environments`.`environment_id`) WHERE (
             `environments_environment`.`deleted_on` IS NULL AND
             `execution_run_environments`.`run_id` = 1 )",

        Query 2: Get the caseversion ids that SHOULD be included in this run,
            in order

            "SELECT DISTINCT cv.id as id
            FROM execution_run as r
                INNER JOIN execution_runsuite as rs
                    ON rs.run_id = r.id
                INNER JOIN library_suitecase as sc
                    ON rs.suite_id = sc.suite_id
                INNER JOIN library_suite as s
                    ON sc.suite_id = s.id
                INNER JOIN library_caseversion as cv
                    ON cv.case_id = sc.case_id
                    AND cv.productversion_id = r.productversion_id
                INNER JOIN library_caseversion_environments as cve
                    ON cv.id = cve.caseversion_id
            WHERE cv.status = 'active'
                AND s.status = 'active'
                AND rs.run_id = 1
                AND cve.environment_id IN (1,2,3,4)
            ORDER BY rs.order, sc.order
            ",

        Query 3-6: Get all the runcaseversions that are not in the result of
         Query 2
            to be used for delete. and then delete them.

            "SELECT `execution_runcaseversion`.`id`,
            `execution_runcaseversion`.`created_on`,
            `execution_runcaseversion`.`created_by_id`,
            `execution_runcaseversion`.`modified_on`,
            `execution_runcaseversion`.`modified_by_id`,
            `execution_runcaseversion`.`deleted_on`,
            `execution_runcaseversion`.`deleted_by_id`,
            `execution_runcaseversion`.`cc_version`,
            `execution_runcaseversion`.`run_id`, `execution_runcaseversion`
            .`caseversion_id`, `execution_runcaseversion`.`order` FROM
            `execution_runcaseversion` WHERE (`execution_runcaseversion`
            .`deleted_on` IS NULL AND `execution_runcaseversion`.`run_id` =
            1  AND NOT (`execution_runcaseversion`.`caseversion_id` IN (2,
            3, 4, 5, 6, 7))) ORDER BY `execution_runcaseversion`.`order` ASC",

            "SELECT `execution_result`.`id`, `execution_result`
            .`created_on`, `execution_result`.`created_by_id`,
            `execution_result`.`modified_on`,
            `execution_result`.`modified_by_id`,
            `execution_result`.`deleted_on`, `execution_result`
            .`deleted_by_id`, `execution_result`.`cc_version`,
            `execution_result`.`tester_id`, `execution_result`
            .`runcaseversion_id`, `execution_result`.`environment_id`,
            `execution_result`.`status`, `execution_result`.`comment`,
            `execution_result`.`is_latest`, `execution_result`.`review`,
            `execution_result`.`reviewed_by_id` FROM `execution_result`
            WHERE `execution_result`.`runcaseversion_id` IN (1)",

            "DELETE FROM `execution_runcaseversion_environments` WHERE
            `runcaseversion_id` IN (1)",

            "DELETE FROM `execution_runcaseversion` WHERE `id` IN (1)",

        Query 7: find duplicates in the existing rcvs, if they exist

            SELECT `execution_runcaseversion`.`caseversion_id`,
            COUNT(`execution_runcaseversion`.`caseversion_id`) AS
            `num_records` FROM `execution_runcaseversion` WHERE (
            `execution_runcaseversion`.`deleted_on` IS NULL AND
            `execution_runcaseversion`.`run_id` = 8 ) GROUP BY
            `execution_runcaseversion`.`caseversion_id` HAVING COUNT(
            `execution_runcaseversion`.`caseversion_id`) > 1  ORDER BY
            `execution_runcaseversion`.`order` ASC

        Query 8: Get existing runcaseversions with the caseversion ids so we
         can use
            Them to build the new RunCaseVersion objects we will only be
            updated
            with order in the bulk create.

            "SELECT `execution_runcaseversion`.`id`,
            `execution_runcaseversion`.`caseversion_id` FROM
            `execution_runcaseversion` WHERE (`execution_runcaseversion`
            .`deleted_on` IS NULL AND `execution_runcaseversion`.`run_id` =
            1 ) ORDER BY `execution_runcaseversion`.`order` ASC",

        Query 9: update order on existing rcvs

            "UPDATE `execution_runcaseversion` SET `modified_on` =
            '2013-03-15 01:00:08', `modified_by_id` = NULL, `order` = 4,
            `cc_version` = `execution_runcaseversion`.`cc_version` + 1 WHERE
             (`execution_runcaseversion`.`deleted_on` IS NULL AND
             `execution_runcaseversion`.`run_id` = 8  AND
             `execution_runcaseversion`.`caseversion_id` = 16 )",

        Query 10: bulk insert for RunCaseVersions

            "INSERT INTO `execution_runcaseversion` (`created_on`,
            `created_by_id`, `modified_on`, `modified_by_id`, `deleted_on`,
            `deleted_by_id`, `cc_version`, `run_id`, `caseversion_id`,
            `order`) VALUES ('2013-03-15 01:00:08', NULL,
            '2013-03-15 01:00:08', NULL, NULL, NULL, 0, 8, 13, 1),
            ('2013-03-15 01:00:08', NULL, '2013-03-15 01:00:08', NULL, NULL,
             NULL, 0, 8, 14, 2), ('2013-03-15 01:00:08', NULL,
             '2013-03-15 01:00:08', NULL, NULL, NULL, 0, 8, 15, 3),
             ('2013-03-15 01:00:08', NULL, '2013-03-15 01:00:08', NULL, NULL,
             NULL, 0, 8, 17, 5), ('2013-03-15 01:00:08', NULL,
             '2013-03-15 01:00:08', NULL, NULL, NULL, 0, 8, 18, 6)"

        Query 11: In order to add the runcaseversion_environment records,
            we need to have all the relevant runcaseversions and prefetch the
            environments for the caseversions

            "SELECT `execution_runcaseversion`.`id`,
            `execution_runcaseversion`.`created_on`,
            `execution_runcaseversion`.`created_by_id`,
            `execution_runcaseversion`.`modified_on`,
            `execution_runcaseversion`.`modified_by_id`,
            `execution_runcaseversion`.`deleted_on`,
            `execution_runcaseversion`.`deleted_by_id`,
            `execution_runcaseversion`.`cc_version`,
            `execution_runcaseversion`.`run_id`, `execution_runcaseversion`
            .`caseversion_id`, `execution_runcaseversion`.`order`,
            `library_caseversion`.`id`, `library_caseversion`.`created_on`,
            `library_caseversion`.`created_by_id`, `library_caseversion`
            .`modified_on`, `library_caseversion`.`modified_by_id`,
            `library_caseversion`.`deleted_on`, `library_caseversion`
            .`deleted_by_id`, `library_caseversion`.`cc_version`,
            `library_caseversion`.`status`, `library_caseversion`
            .`productversion_id`, `library_caseversion`.`case_id`,
            `library_caseversion`.`name`, `library_caseversion`
            .`description`, `library_caseversion`.`latest`,
            `library_caseversion`.`envs_narrowed` FROM
            `execution_runcaseversion` INNER JOIN `library_caseversion` ON (
            `execution_runcaseversion`.`caseversion_id` =
            `library_caseversion`.`id`) WHERE (`execution_runcaseversion`
            .`deleted_on` IS NULL AND `execution_runcaseversion`.`run_id` =
            1 ) ORDER BY `execution_runcaseversion`.`order` ASC",

        Query 12: This is the prefetch_related query used with Query 9.  Django
            makes a separate query and links them in-memory.

            "SELECT (`library_caseversion_environments`.`caseversion_id`) AS
             `_prefetch_related_val`, `environments_environment`.`id`,
             `environments_environment`.`created_on`,
             `environments_environment`.`created_by_id`,
             `environments_environment`.`modified_on`,
             `environments_environment`.`modified_by_id`,
             `environments_environment`.`deleted_on`,
             `environments_environment`.`deleted_by_id`,
             `environments_environment`.`cc_version`,
             `environments_environment`.`profile_id` FROM
             `environments_environment` INNER JOIN
             `library_caseversion_environments` ON (
             `environments_environment`.`id` =
             `library_caseversion_environments`.`environment_id`) WHERE (
             `environments_environment`.`deleted_on` IS NULL AND
             `library_caseversion_environments`.`caseversion_id` IN (2, 3,
             4, 5, 6, 7))",

        Query 13: runcaseversion_environments that already existed that
        pertain to
            the runcaseversions that are still relevant.

            "SELECT `execution_runcaseversion_environments`
            .`runcaseversion_id`, `execution_runcaseversion_environments`
            .`environment_id` FROM `execution_runcaseversion_environments`
            WHERE `execution_runcaseversion_environments`
            .`runcaseversion_id` IN (3, 4, 5, 2, 6, 7)",

        Query 14: Get the environments for this run so we can find the
        intersection
            with the caseversions.

            "SELECT `environments_environment`.`id` FROM
            `environments_environment` INNER JOIN
            `execution_run_environments` ON (`environments_environment`.`id`
             = `execution_run_environments`.`environment_id`) WHERE (
             `environments_environment`.`deleted_on` IS NULL AND
             `execution_run_environments`.`run_id` = 1 )",

        Query 15: Find the runcaseversion_environments that are no longer
        relevant.

            "SELECT `execution_runcaseversion_environments`.`id`,
            `execution_runcaseversion_environments`.`runcaseversion_id`,
            `execution_runcaseversion_environments`.`environment_id` FROM
            `execution_runcaseversion_environments`
            WHERE ((`execution_runcaseversion_environments`.`runcaseversion_id`
            = 2  AND `execution_runcaseversion_environments`.`environment_id`
            = 5 ))",

        Query 16: Delete the runcaseversion_environments that pertained to the
            caseversion that are no longer relevant.

            "DELETE FROM `execution_runcaseversion_environments` WHERE `id`
            IN (9)",

        Query 17: Bulk insert of runcaseversion_environment mappings.

            "INSERT INTO `execution_runcaseversion_environments`
            (`runcaseversion_id`, `environment_id`) VALUES (7, 3), (5, 4),
            (3, 1), (3, 3), (6, 4), (7, 4), (5, 2), (6, 1), (4, 4), (3, 2),
            (7, 1), (6, 3), (6, 2), (4, 3), (4, 2), (3, 4), (5, 1), (4, 1),
            (7, 2), (5, 3)",

        Query 18: Update the test run to make it active.

            "UPDATE `execution_run` SET `created_on` = '2012-11-20 00:11:25',
            `created_by_id` = NULL, `modified_on` = '2012-11-20 00:11:25',
            `modified_by_id` = NULL, `deleted_on` = NULL, `deleted_by_id` =
            NULL, `cc_version` = 1, `has_team` = 0, `status` = 'active',
            `productversion_id` = 1, `name` = 'Test Run', `description` = '',
            `start` = '2012-11-19', `end` = NULL, `build` = NULL,
            `is_series` = 0, `series_id` = NULL
            WHERE (`execution_run`.`deleted_on` IS NULL
            AND `execution_run`.`id` = 1
            AND `execution_run`.`cc_version` = 0 )"

        """

        r = self.F.RunFactory.create(productversion=self.pv8)

        # one that should get deleted because it's not in the suite
        old_cv = self.F.CaseVersionFactory.create(
            name="I shouldn't be here",
            productversion=self.pv8,
            status="active",
            )
        self.F.RunCaseVersionFactory(run=r, caseversion=old_cv)

        # test suite add to run
        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        # cases that belong to the suite
        cv_needed = []
        for num in range(6):
            cv = self.F.CaseVersionFactory.create(
                name="casey" + str(num),
                productversion=self.pv8,
                status="active",
                )
            self.F.SuiteCaseFactory.create(suite=ts, case=cv.case)
            cv_needed.append(cv)

        # existing one that we should keep
        existing_rcv = self.F.RunCaseVersionFactory(run=r,
            caseversion=cv_needed[3],
            order=0,
            )
        # existing env that should be removed in removal phase
        old_env = self.F.EnvironmentFactory.create_set(
            ["OS", "Browser"],
            ["Atari", "RS-232"],
            )[0]
        self.F.model.RunCaseVersion.environments.through(
            runcaseversion=existing_rcv,
            environment=old_env,
            ).save()

        from django.conf import settings
        from django.db import connection

        settings.DEBUG = True
        connection.queries = []

        try:
            with self.assertNumQueries(18):
                r.activate()

            # to debug, uncomment these lines:
            # import json
            # r.activate()
            # print(json.dumps([x["sql"] for x in connection.queries], indent=4))
            # print("NumQueries={0}".format(len(connection.queries)))

            selects = [x["sql"] for x in connection.queries if x["sql"].startswith("SELECT")]
            inserts = [x["sql"] for x in connection.queries if x["sql"].startswith("INSERT")]
            updates = [x["sql"] for x in connection.queries if x["sql"].startswith("UPDATE")]
            deletes = [x["sql"] for x in connection.queries if x["sql"].startswith("DELETE")]

            self.assertEqual(len(selects), 11)
            self.assertEqual(len(inserts), 2)
            self.assertEqual(len(updates), 2)
            self.assertEqual(len(deletes), 3)
        except AssertionError as e:
            raise e
        finally:
            settings.DEBUG = False

        self.refresh(r)

        self.assertEqual(r.runcaseversions.count(), 6)
        self.assertEqual(
            self.F.model.RunCaseVersion.environments.through.objects.count(),
            24,
            )
        self.assertEqual(
            self.F.model.RunCaseVersion.objects.filter(
            run=r,
            caseversion=old_cv,
            ).count(), 0)


    def test_run_refresh(self):
        """
        Refresh the runcaseversions while the run remains active

        Very similar to previous test case, but this all happens while the
        run is in active state.  Ensuring that it has the same end-result.

        """
        r = self.F.RunFactory.create(
            productversion=self.pv8)

        r.activate()

        # one that should get deleted because it's no longer in the suite
        old_cv = self.F.CaseVersionFactory.create(
            name="I shouldn't be here",
            productversion=self.pv8,
            status="active",
            )
        self.F.RunCaseVersionFactory(run=r, caseversion=old_cv)

        # test suite add to run
        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        # cases that belong to the suite
        cv_needed = []
        for num in range(6):
            cv = self.F.CaseVersionFactory.create(
                name="casey" + str(num),
                productversion=self.pv8,
                status="active",
                )
            self.F.SuiteCaseFactory.create(suite=ts, case=cv.case)
            cv_needed.append(cv)

        # existing one that we should keep
        existing_rcv = self.F.RunCaseVersionFactory(
            run=r,
            caseversion=cv_needed[3],
            order=0,
            )
        # existing env that should be removed in removal phase
        old_env = self.F.EnvironmentFactory.create_set(
            ["OS", "Browser"],
            ["Atari", "RS-232"],
            )[0]
        self.F.model.RunCaseVersion.environments.through(
            runcaseversion=existing_rcv,
            environment=old_env,
            ).save()

        r.refresh()

        self.refresh(r)

        self.assertEqual(r.runcaseversions.count(), 6)
        self.assertEqual(
            self.F.model.RunCaseVersion.environments.through.objects.count(),
            24,
            )
        self.assertEqual(self.F.model.RunCaseVersion.objects.filter(
                run=r,
                caseversion=old_cv,
                ).count(), 0)


    def test_run_refresh_draft_no_op(self):
        """Refresh the runcaseversions on draft run is no op."""
        r = self.F.RunFactory.create(productversion=self.pv8, status="draft")
        rcv = self.F.RunCaseVersionFactory.create(
            run=r,
            caseversion__productversion=self.pv8,
            caseversion__status="draft",
            )
        self.F.ResultFactory.create(runcaseversion=rcv)
        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=rcv.caseversion.case)
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.refresh()

        self.assertEqual(r.runcaseversions.count(), 1)
        self.assertEqual(
            self.model.Result.objects.filter(runcaseversion__run=r).count(), 1)
        self.assertEqual(
            self.model.Result.objects.count(), 1)



class RefreshTransactionTest(case.TransactionTestCase):
    """Tests for ``Importer`` transactional behavior."""

    def setUp(self):
        """Set up envs, product and product versions used by all tests."""
        self.envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"], "Browser": ["Firefox", "Chrome"]})
        self.p = self.F.ProductFactory.create()
        self.pv8 = self.F.ProductVersionFactory.create(
            product=self.p, version="8.0", environments=self.envs)
        self.pv9 = self.F.ProductVersionFactory.create(
            product=self.p, version="9.0", environments=self.envs)


    def create_run_needing_refresh(self):
        """
        Refresh the runcaseversions while the run remains active

        Very similar to previous test case, but this all happens while the
        run is in active state.  Ensuring that it has the same end-result.

        """
        r = self.F.RunFactory.create(
            productversion=self.pv8)

        r.activate()

        # one that should get deleted because it's no longer in the suite
        deleteme_cv = self.F.CaseVersionFactory.create(
            name="I shouldn't be here",
            productversion=self.pv8,
            status="active",
            )
        # adds runcaseversion.environments (4 of them), too
        self.F.RunCaseVersionFactory(run=r, caseversion=deleteme_cv)

        # add suite to run
        ts = self.F.SuiteFactory.create(product=self.p, status="active")
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        # add 6 cases to suite, needed by the run
        cv_needed = []
        for num in range(6):
            cv = self.F.CaseVersionFactory.create(
                name="casey" + str(num),
                productversion=self.pv8,
                status="active",
                )
            self.F.SuiteCaseFactory.create(suite=ts, case=cv.case)
            cv_needed.append(cv)

        # existing rcv that we should keep, because it's in the suite
        # also adds runcaseversion.environments here (4 more)
        keepme_rcv = self.F.RunCaseVersionFactory(
            run=r,
            caseversion=cv_needed[3],
            order=0,
            )
        # existing env that should be removed in removal phase
        deleteme_env = self.F.EnvironmentFactory.create_set(
            ["OS", "Browser"],
            ["Atari", "RS-232"],
            )[0]
        self.F.model.RunCaseVersion.environments.through(
            runcaseversion=keepme_rcv,
            environment=deleteme_env,
            ).save()

        return {
            "r": r,
            "deleteme_cv": deleteme_cv,
            "ts": ts,
            "cv_needed": cv_needed,
            "existing_rcv": keepme_rcv,
            "old_env": deleteme_env,
            }


    def assert_rolled_back(self, test_data):
        # refetch the run from the db after changes.
        r = test_data["r"]
        self.refresh(r)

        # should still contain the ``deleteme_cv`` and the
        self.assertEqual(r.runcaseversions.count(), 2)
        # 4 for each rcv that remains, plus 1 rogue env we added manually
        self.assertEqual(
            self.F.model.RunCaseVersion.environments.through.objects.count(),
            9,
            )
        self.assertEqual(self.F.model.RunCaseVersion.objects.filter(
            run=r,
            caseversion=test_data["deleteme_cv"],
            ).count(), 1)


    def do_rollback_test(self, new_func):
        """Perform the rollback test with an exception in a new function."""
        test_data = self.create_run_needing_refresh()

        class SurpriseException(RuntimeError):
            pass

        def raise_exception(*args, **kwargs):
            raise SurpriseException("Surprise!")

        new_func.side_effect = raise_exception

        with self.assertRaises(SurpriseException):
            test_data["r"].refresh()

        self.assert_rolled_back(test_data)


    @patch.object(Run, '_delete_runcaseversions')
    def test_exception_in_delete_runcaseversions(self, new_func):
        """
        An unknown exception is thrown:
            * after creating unfresh test data
            * before deleting rcvs
        so the entire transaction is rolled back.
        """
        self.do_rollback_test(new_func)


    @patch.object(Run, '_bulk_insert_new_runcaseversions')
    def test_exception_in_bulk_insert_new_rcv(self, new_func):
        """
        An unknown exception is thrown:
            * after deleting rcvs
            * before bulk insert
        so the entire transaction is rolled back.
        """
        self.do_rollback_test(new_func)


    @patch.object(Run, '_bulk_update_runcaseversion_environments_for_lock')
    def test_exception_in_bulk_update_rcv_envs(self, new_func):
        """
        An unknown exception is thrown:
            * after bulk insert of rcvs
            * before bulk update of envs
        so the entire transaction is rolled back.
        """
        self.do_rollback_test(new_func)


    @patch.object(Run, '_lock_caseversions_complete')
    def test_exception_after_complete(self, new_func):
        """
        An unknown exception is thrown:
            * after bulk update of envs, and everything should be done.
        so the entire transaction is rolled back.
        """
        self.do_rollback_test(new_func)

########NEW FILE########
__FILENAME__ = test_runcaseversion
"""
Tests for RunCaseVersion model.

"""
from tests import case



class RunCaseVersionTest(case.DBTestCase):
    def test_unicode(self):
        c = self.F.RunCaseVersionFactory(
            run__name="FF10", caseversion__name="Open URL")

        self.assertEqual(unicode(c), u"Case 'Open URL' included in run 'FF10'")


    def test_bug_urls(self):
        """bug_urls aggregates bug urls from all results, sans dupes."""
        rcv = self.F.RunCaseVersionFactory.create()
        result1 = self.F.ResultFactory.create(runcaseversion=rcv)
        result2 = self.F.ResultFactory.create(runcaseversion=rcv)
        self.F.StepResultFactory.create(result=result1)
        self.F.StepResultFactory.create(
            result=result1, bug_url="http://www.example.com/bug1")
        self.F.StepResultFactory.create(
            result=result2, bug_url="http://www.example.com/bug1")
        self.F.StepResultFactory.create(
            result=result2, bug_url="http://www.example.com/bug2")

        self.assertEqual(
            rcv.bug_urls(),
            set(["http://www.example.com/bug1", "http://www.example.com/bug2"])
            )


    def test_environment_inheritance(self):
        """RCV gets intersection of run and caseversion environments."""
        envs = self.F.EnvironmentFactory.create_set(
            ["OS", "Browser"],
            ["Linux", "Firefox"],
            ["Linux", "Chrome"],
            ["OS X", "Chrome"],
            )

        rcv = self.F.RunCaseVersionFactory.create(
            run__environments=envs[:2],
            caseversion__environments=envs[1:])

        self.assertEqual(rcv.environments.get(), envs[1])

        # only happens when first created, not on later saves

        rcv.environments.clear()
        rcv.save()

        self.assertEqual(rcv.environments.count(), 0)


    def test_inherits_env_removal_from_run(self):
        """RCV inherits env removal from test run."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X", "Linux"]})
        r = self.F.RunFactory(environments=envs)
        cv = self.F.CaseVersionFactory(environments=envs)
        rcv = self.F.RunCaseVersionFactory(run=r, caseversion=cv)

        r.remove_envs(envs[0])

        self.assertEqual(set(rcv.environments.all()), set(envs[1:]))


    def test_does_not_inherit_env_addition_on_run(self):
        """RCV does not inherit env addition on test run."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X", "Linux"]})
        r = self.F.RunFactory(environments=envs[1:])
        cv = self.F.CaseVersionFactory(environments=envs)
        rcv = self.F.RunCaseVersionFactory(run=r, caseversion=cv)

        r.add_envs(envs[0])

        self.assertEqual(set(rcv.environments.all()), set(envs[1:]))


    def test_inherits_env_removal_from_productversion(self):
        """RCV inherits env removal from product version."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory(environments=envs)
        cv = self.F.CaseVersionFactory(environments=envs)
        rcv = self.F.RunCaseVersionFactory(
            run__productversion=pv, caseversion=cv)

        pv.remove_envs(envs[0])

        self.assertEqual(set(rcv.environments.all()), set(envs[1:]))


    def test_inherits_env_removal_from_caseversion(self):
        """RCV inherits env removal from caseversion."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X", "Linux"]})
        r = self.F.RunFactory(environments=envs)
        cv = self.F.CaseVersionFactory(environments=envs)
        rcv = self.F.RunCaseVersionFactory(run=r, caseversion=cv)

        cv.remove_envs(envs[0])

        self.assertEqual(set(rcv.environments.all()), set(envs[1:]))


    def test_does_not_inherit_env_addition_to_caseversion(self):
        """RCV does not inherit env added to caseversion."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X", "Linux"]})
        r = self.F.RunFactory(environments=envs)
        cv = self.F.CaseVersionFactory(environments=envs[1:])
        rcv = self.F.RunCaseVersionFactory(run=r, caseversion=cv)

        cv.add_envs(envs[0])

        self.assertEqual(set(rcv.environments.all()), set(envs[1:]))


    def test_result_summary(self):
        """``result_summary`` returns dict summarizing result states."""
        rcv = self.F.RunCaseVersionFactory()

        self.F.ResultFactory(runcaseversion=rcv, status="assigned")
        self.F.ResultFactory(runcaseversion=rcv, status="started")
        self.F.ResultFactory(runcaseversion=rcv, status="passed")
        self.F.ResultFactory(runcaseversion=rcv, status="failed")
        self.F.ResultFactory(runcaseversion=rcv, status="failed")
        self.F.ResultFactory(runcaseversion=rcv, status="blocked")
        self.F.ResultFactory(runcaseversion=rcv, status="invalidated")
        self.F.ResultFactory(runcaseversion=rcv, status="invalidated")
        self.F.ResultFactory(runcaseversion=rcv, status="invalidated")

        self.assertEqual(
            rcv.result_summary(),
            {
                "passed": 1,
                "failed": 2,
                "blocked": 1,
                "invalidated": 3,
                }
            )


    def test_result_summary_specific(self):
        """``result_summary`` has results only from one runcaseversion."""
        rcv = self.F.RunCaseVersionFactory()
        self.F.ResultFactory(runcaseversion=rcv, status="passed")

        rcv2 = self.F.RunCaseVersionFactory()

        self.assertEqual(
            rcv2.result_summary(),
            {
                "passed": 0,
                "failed": 0,
                "blocked": 0,
                "invalidated": 0,
                }
            )

    def test_result_summary_empty(self):
        """Empty slots in result summary still contain 0."""
        rcv = self.F.RunCaseVersionFactory()

        self.assertEqual(
            rcv.result_summary(),
            {
                "passed": 0,
                "failed": 0,
                "blocked": 0,
                "invalidated": 0,
                }
            )


    def test_completion_percentage(self):
        """``completion`` returns fraction of envs completed."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Windows", "Linux"]})
        rcv = self.F.RunCaseVersionFactory.create(environments=envs)

        self.F.ResultFactory(
            runcaseversion=rcv, environment=envs[0], status="passed")
        self.F.ResultFactory(
            runcaseversion=rcv, environment=envs[0], status="failed")
        self.F.ResultFactory(
            runcaseversion=rcv, environment=envs[1], status="started")

        self.assertEqual(rcv.completion(), 0.5)


    def test_completion_percentage_empty(self):
        """If no envs, ``completion`` returns zero."""
        rcv = self.F.RunCaseVersionFactory.create()

        self.assertEqual(rcv.completion(), 0)


    def test_testers(self):
        """Testers method returns list of distinct testers of this rcv."""
        t1 = self.F.UserFactory.create()
        t2 = self.F.UserFactory.create()
        rcv = self.F.RunCaseVersionFactory.create()
        self.F.ResultFactory.create(tester=t1, runcaseversion=rcv)
        self.F.ResultFactory.create(tester=t1, runcaseversion=rcv)
        self.F.ResultFactory.create(tester=t2, runcaseversion=rcv)

        self.assertEqual(set(rcv.testers()), set([t1, t2]))


    def test_start(self):
        """Start method creates a result with status started."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.start(environment=envs[0], user=u)

        r = rcv.results.get(environment=envs[0], tester=u, is_latest=True)
        self.assertEqual(r.status, "started")


    def test_start_sets_modified_user(self):
        """Start method can set modified-by user."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.start(environment=envs[0], user=u)

        r = rcv.results.get(environment=envs[0], tester=u, is_latest=True)
        self.assertEqual(r.modified_by, u)


    def test_result_pass(self):
        """result_pass creates result with status passed."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.result_pass(envs[0], user=u)

        r = rcv.results.get(environment=envs[0], tester=u, is_latest=True)
        self.assertEqual(r.status, "passed")


    def test_result_pass_started(self):
        """result_pass creates result with status passed and only 1 latest."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.start(envs[0], user=u)
        rcv.result_pass(envs[0], user=u)

        r = rcv.results.get(environment=envs[0], tester=u, is_latest=True)
        self.assertEqual(r.status, "passed")


    def test_result_invalid(self):
        """result_invalid w/out start."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.result_invalid(environment=envs[0], user=u)

        r = rcv.results.get()
        self.assertEqual(r.status, "invalidated")


    def test_result_invalid_started(self):
        """result_invalid creates result with invalidated and only 1 latest."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.start(environment=envs[0], user=u)
        rcv.result_invalid(environment=envs[0], user=u)

        r = rcv.results.get(is_latest=True)
        self.assertEqual(r.status, "invalidated")


    def test_result_invalid_with_comment(self):
        """result_invalid method can include comment."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.start(environment=envs[0], user=u)
        rcv.result_invalid(
            environment=envs[0],
            user=u,
            comment="and this is why",
            )

        r = rcv.results.get(environment=envs[0], tester=u, is_latest=True)
        self.assertEqual(self.refresh(r).comment, "and this is why")


    def test_result_block(self):
        """result_block w/out start."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.result_block(environment=envs[0], user=u)

        r = rcv.results.get()
        self.assertEqual(r.status, "blocked")


    def test_result_block_started(self):
        """result_block creates result with blocked and only 1 latest."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.start(environment=envs[0], user=u)
        rcv.result_block(environment=envs[0], user=u)

        r = rcv.results.get(is_latest=True)
        self.assertEqual(r.status, "blocked")


    def test_result_block_with_comment(self):
        """result_block method can include comment."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.start(environment=envs[0], user=u)
        rcv.result_block(
            environment=envs[0],
            user=u,
            comment="and this is why",
            )

        r = rcv.results.get(environment=envs[0], tester=u, is_latest=True)
        self.assertEqual(self.refresh(r).comment, "and this is why")


    def test_result_skip(self):
        """
        result_skip w/out start.

        skips all environments.
        """
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English", "Spanish"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()
        for env in envs:
            rcv.environments.add(env)

        rcv.result_skip(environment=envs[0], user=u)

        results = rcv.results.values_list("status", flat=True)
        self.assertEqual(len(results), 2)
        self.assertEqual(set(results), set([u"skipped", u"skipped"]))


    def test_result_skip_started(self):
        """result_skip creates result with skipped and only 1 latest."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English", "Spanish"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()
        for env in envs:
            rcv.environments.add(env)

        rcv.start(environment=envs[0], user=u)
        rcv.result_skip(environment=envs[0], user=u)

        results = rcv.results.filter(is_latest=True).values_list(
            "status", flat=True)
        self.assertEqual(len(results), 2)
        self.assertEqual(set(results), set([u"skipped", u"skipped"]))


    def test_result_skip_restarted(self):
        """restarting skipped restarts all envs."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English", "Spanish"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()
        for env in envs:
            rcv.environments.add(env)

        rcv.start(environment=envs[0], user=u)
        rcv.result_skip(environment=envs[0], user=u)
        rcv.start(environment=envs[0], user=u)

        results = rcv.results.filter(is_latest=True).values_list(
            "status", flat=True)
        self.assertEqual(len(results), 2)
        self.assertEqual(set(results), set([u"started"]))


    def test_result_fail(self):
        """result_fail creates result with status failed."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.result_fail(environment=envs[0], user=u)

        r = rcv.results.get()
        self.assertEqual(r.status, "failed")


    def test_result_fail_started(self):
        """result_fail after start sets status failed and has only 1 latest."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.start(environment=envs[0], user=u)
        rcv.result_fail(environment=envs[0], user=u)

        r = rcv.results.get(is_latest=True)
        self.assertEqual(r.status, "failed")


    def test_result_fail_with_comment(self):
        """result_fail method can include comment."""
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(run=run)
        u = self.F.UserFactory.create()

        rcv.start(environment=envs[0], user=u)
        rcv.result_fail(
            environment=envs[0],
            user=u,
            comment="and this is why",
            )

        r = rcv.results.get(environment=envs[0], tester=u, is_latest=True)

        self.assertEqual(self.refresh(r).comment, "and this is why")


    def test_result_fail_with_stepnumber(self):
        """result_fail method can mark particular failed step."""
        step = self.F.CaseStepFactory.create(number=1)
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(
            run=run,
            caseversion=step.caseversion,
            )
        u = self.F.UserFactory.create()

        rcv.start(environment=envs[0], user=u)
        rcv.result_fail(
            environment=envs[0],
            user=u,
            stepnumber=1,
            )

        r = rcv.results.get(is_latest=True)

        sr = r.stepresults.get()
        self.assertEqual(sr.step, step)
        self.assertEqual(sr.status, "failed")


    def test_result_fail_with_stepnumber_and_existing_stepresult(self):
        """result_fail method will point result to latest step step result."""
        step = self.F.CaseStepFactory.create(number=1)
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(
            run=run,
            caseversion=step.caseversion,
            )
        u = self.F.UserFactory.create()

        rcv.result_pass(environment=envs[0], user=u)

        pass_r = rcv.results.get(is_latest=True)
        sr = self.F.StepResultFactory.create(result=pass_r, step=step, status="passed")

        rcv.result_fail(
            environment=envs[0],
            user=u,
            stepnumber=1,
            )

        fail_r = rcv.results.get(is_latest=True)
        new_sr = fail_r.stepresults.get()
        self.assertNotEqual(new_sr, sr)
        self.assertEqual(new_sr.step, step)
        self.assertEqual(new_sr.status, "failed")


    def test_result_fail_with_stepnumber_and_bug(self):
        """result_fail method can include bug with failed step."""
        step = self.F.CaseStepFactory.create(number=1)
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(
            run=run,
            caseversion=step.caseversion,
            )
        u = self.F.UserFactory.create()

        rcv.result_fail(
            environment=envs[0],
            user=u,
            stepnumber="1",
            bug="http://www.example.com/",
            )

        r = rcv.results.get(is_latest=True)
        sr = r.stepresults.get()
        self.assertEqual(sr.bug_url, "http://www.example.com/")


    def test_result_fail_bad_stepnumber_ignored(self):
        """result_fail method ignores bad stepnumber."""
        step = self.F.CaseStepFactory.create(number=1)
        envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["OS X"], "Language": ["English"]})
        run = self.F.RunFactory.create(environments=envs)
        rcv = self.F.RunCaseVersionFactory.create(
            run=run,
            caseversion=step.caseversion,
            )
        u = self.F.UserFactory.create()

        rcv.result_fail(
            environment=envs[0],
            user=u,
            stepnumber="2",
            )

        r = rcv.results.get(is_latest=True)
        self.assertEqual(r.stepresults.count(), 0)

########NEW FILE########
__FILENAME__ = test_runsuite
"""
Tests for RunSuite model.

"""
from tests import case



class RunSuiteTest(case.DBTestCase):
    def test_unicode(self):
        rs = self.F.RunSuiteFactory(run__name="FF10", suite__name="Speed")

        self.assertEqual(unicode(rs), u"Suite 'Speed' included in run 'FF10'")

########NEW FILE########
__FILENAME__ = test_stepresult
"""
Tests for StepResult model.

"""
from tests import case



class StepResultTest(case.DBTestCase):
    def test_unicode(self):
        env = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X"], "Language": ["English"]})[0]

        step = self.F.CaseStepFactory.create(
            caseversion__name="Open URL")

        sr = self.F.StepResultFactory.create(
            status=self.model.StepResult.STATUS.passed,
            step=step,
            result__status=self.model.Result.STATUS.started,
            result__runcaseversion__run__name="FF10",
            result__runcaseversion__caseversion=step.caseversion,
            result__tester__username="tester",
            result__environment=env,
            )

        self.assertEqual(
            unicode(sr),
            u"Case 'Open URL' included in run 'FF10', "
            "run by tester in English, OS X: started (step #%s: passed)"
            % step.number)

########NEW FILE########
__FILENAME__ = test_case
"""
Tests for Case admin.

"""
from tests import case



class CaseAdminTest(case.admin.AdminTestCase):
    app_label = "library"
    model_name = "case"


    def test_changelist(self):
        """Case changelist page loads without error, contains id."""
        c = self.F.CaseFactory()

        self.get(self.changelist_url).mustcontain(c.id)


    def test_change_page(self):
        """Case change page loads without error, contains id."""
        c = self.F.CaseFactory()

        self.get(self.change_url(c)).mustcontain(c.id)


    def test_change_page_version(self):
        """Case change page includes CaseVersion inline."""
        cv = self.F.CaseVersionFactory(name="Can load a website")

        self.get(self.change_url(cv.case)).mustcontain(
            "Can load a website")

########NEW FILE########
__FILENAME__ = test_caseversion
"""
Tests for CaseVersion admin.

"""
from mock import patch

from tests import case



class CaseVersionAdminTest(case.admin.AdminTestCase):
    app_label = "library"
    model_name = "caseversion"


    def test_changelist(self):
        """CaseVersion changelist page loads without error, contains name."""
        self.F.CaseVersionFactory.create(name="Can load a website")

        self.get(self.changelist_url).mustcontain("Can load a website")


    def test_change_page(self):
        """CaseVersion change page loads without error, contains name."""
        p = self.F.CaseVersionFactory.create(name="Can load a website")

        self.get(self.change_url(p)).mustcontain("Can load a website")


    def test_change_page_step(self):
        """CaseVersion change page includes CaseStep inline."""
        s = self.F.CaseStepFactory.create(instruction="Type a URL in the address bar")

        self.get(self.change_url(s.caseversion)).mustcontain(
            "Type a URL in the address bar")


    def test_change_page_attachment(self):
        """CaseVersion change page includes CaseAttachment inline."""
        a = self.F.CaseAttachmentFactory.create(name="FooBar")

        self.get(self.change_url(a.caseversion)).mustcontain("FooBar")


    def test_change_page_tag(self):
        """CaseVersion change page includes CaseTag inline."""
        t = self.F.TagFactory.create(name="some tag")
        c = self.F.CaseVersionFactory.create()
        c.tags.add(t)

        self.get(self.change_url(c)).mustcontain("some tag")


    def get_envs(self):
        """Returns an Environment."""
        return self.F.EnvironmentFactory.create_set(["OS"], ["Linux"])


    def test_add_step_with_caseversion(self):
        """Can add inline step along with new caseversion."""
        envs = self.get_envs()
        pv = self.F.ProductVersionFactory.create()
        case = self.F.CaseFactory.create(product=pv.product)

        # patching extra avoids need for JS to add step
        with patch("moztrap.model.library.admin.CaseStepInline.extra", 1):
            form = self.get(self.add_url).forms[0]
            form["case"] = str(case.id)
            form["productversion"] = str(pv.id)
            form["name"] = "Some case"
            form["environments"] = [str(envs[0].id)]
            form["steps-0-number"] = "1"
            form["steps-0-instruction"] = "An instruction"
            form["steps-0-expected"] = "A result"
            res = form.submit()
        self.assertEqual(res.status_int, 302)

        self.assertEqual(
            case.versions.get().steps.get().instruction, "An instruction")


    def test_add_step_tracks_user(self):
        """Adding a CaseStep via inline tracks created-by user."""
        cv = self.F.CaseVersionFactory.create()
        cv.environments.add(*self.get_envs())

        # patching extra avoids need for JS to submit new step
        with patch("moztrap.model.library.admin.CaseStepInline.extra", 1):
            form = self.get(self.change_url(cv)).forms[0]
            form["steps-0-number"] = "1"
            form["steps-0-instruction"] = "An instruction"
            form["steps-0-expected"] = "A result"
            res = form.submit()
        self.assertEqual(res.status_int, 302)

        s = cv.steps.get()

        self.assertEqual(s.created_by, self.user)


    def test_change_step_tracks_user(self):
        """Modifying a CaseStep via inline tracks modified-by user."""
        s = self.F.CaseStepFactory.create(
            instruction="Type a URL in the address bar")
        s.caseversion.environments.add(*self.get_envs())

        form = self.get(self.change_url(s.caseversion)).forms[0]
        form["steps-0-instruction"] = "A new instruction"
        res = form.submit()
        self.assertEqual(res.status_int, 302)

        self.assertEqual(self.refresh(s).modified_by, self.user)


    def test_delete_step_tracks_user(self):
        """Deleting a CaseStep via inline tracks modified-by user."""
        s = self.F.CaseStepFactory.create()
        s.caseversion.environments.add(*self.get_envs())

        form = self.get(self.change_url(s.caseversion)).forms[0]
        form["steps-0-DELETE"] = True
        res = form.submit()
        self.assertEqual(res.status_int, 302)

        self.assertEqual(self.refresh(s).deleted_by, self.user)

########NEW FILE########
__FILENAME__ = test_suite
"""
Tests for Suite admin.

"""
from tests import case



class SuiteAdminTest(case.admin.AdminTestCase):
    app_label = "library"
    model_name = "suite"


    def test_changelist(self):
        """Suite changelist page loads without error, contains name."""
        self.F.SuiteFactory.create(name="Performance")

        self.get(self.changelist_url).mustcontain("Performance")


    def test_change_page(self):
        """Suite change page loads without error, contains name."""
        s = self.F.SuiteFactory.create(name="Performance")

        self.get(self.change_url(s)).mustcontain("Performance")

########NEW FILE########
__FILENAME__ = test_casestep_resource
"""
Tests for CaseStepResource api.

"""

from tests.case.api.crud import ApiCrudCases

import logging
mozlogger = logging.getLogger('moztrap.test')


class CaseStepResourceTest(ApiCrudCases):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.CaseStepFactory()


    @property
    def resource_name(self):
        return "casestep"


    @property
    def permission(self):
        """String defining the permission required for
        Create, Update, and Delete.
        """
        return "library.manage_cases"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        modifiers = (self.datetime, self.resource_name)
        self.caseversion_fixture = self.F.CaseVersionFactory.create()

        fields = {
            u"caseversion": unicode(
                self.get_detail_url("caseversion", str(self.caseversion_fixture.id))),
            u"number": 1,
            u"instruction": u"instruction 1 %s" % self.datetime,
            u"expected": u"expected 1 %s" % self.datetime,
        }

        return fields


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.CaseStep.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        actual = {
            u"id": unicode(str(backend_obj.id)),
            u"caseversion": unicode(
                self.get_detail_url("caseversion",
                    str(backend_obj.caseversion.id))),
            u"instruction": unicode(backend_obj.instruction),
            u"expected": unicode(backend_obj.expected),
            u"number": backend_obj.number,
            u"resource_uri": unicode(
                self.get_detail_url(self.resource_name, str(backend_obj.id)))
        }
        return actual


    @property
    def read_create_fields(self):
        """caseversion is read-only"""
        return ["caseversion"]

    # overrides from crud.py

    # additional test cases, if any

    # validation cases

########NEW FILE########
__FILENAME__ = test_caseversion_resource
"""
Tests for CaseVersionResource api.

"""

from tests import case
from tests.case.api.crud import ApiCrudCases

import logging
mozlogger = logging.getLogger('moztrap.test')


class CaseVersionResourceTest(ApiCrudCases):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.CaseVersionFactory()


    @property
    def resource_name(self):
        return "caseversion"


    @property
    def permission(self):
        """String defining the permission required for
        Create, Update, and Delete.
        """
        return "library.manage_cases"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        modifiers = (self.datetime, self.resource_name)
        self.productversion_fixture = self.F.ProductVersionFactory.create()
        self.case_fixture = self.F.CaseFactory.create()
        self.case_fixture.product = self.productversion_fixture.product
        self.case_fixture.save()

        fields = {
            u"case": unicode(self.get_detail_url(
                "case", self.case_fixture.id)),
            u"name": unicode("test_%s_%s" % modifiers),
            u"description": unicode("test %s %s" % modifiers),
            u"productversion": unicode(self.get_detail_url(
                "productversion", self.productversion_fixture.id)),
            u"status": unicode("draft"),
            u"environments": [],
            u"tags": [],
#            u"attachments": [],
            u"steps": [],
        }

        return fields


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.CaseVersion.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        actual = {}
        actual[u"id"] = unicode(str(backend_obj.id))
        actual[u"case"] = unicode(
            self.get_detail_url("case", str(backend_obj.case.id)))
        actual[u"name"] = unicode(backend_obj.name)
        actual[u"description"] = unicode(backend_obj.description)
        actual[u"productversion"] = unicode(
            self.get_detail_url("productversion",
                backend_obj.productversion.id))
        actual[u"status"] = unicode(backend_obj.status)
        actual[u"resource_uri"] = unicode(
            self.get_detail_url(self.resource_name, str(backend_obj.id)))
        actual[u"environments"] = [unicode(
            self.get_detail_url("environment", str(env.id))
                ) for env in backend_obj.environments.all()]
        actual[u"tags"] = [unicode(self.get_detail_url("tag", str(tag.id))
                                  ) for tag in backend_obj.tags.all()]
#        actual[u"attachments"] = [unicode(self.get_detail_url("attachment",
#             str(attch.id))) for attch in backend_obj.attachments.all()]
        actual[u"steps"] = [unicode(
                    self.get_detail_url("casestep", str(step.id)))
             for step in backend_obj.steps.all()]

        return actual


    @property
    def read_create_fields(self):
        """List of fields that are required for create but read-only for update."""
        return ["case", "productversion"]


    # overrides from crud.py

    # additional test cases, if any

    # validation cases

    @property
    def _product_mismatch_message(self):
        return "productversion must match case's product"


    def test_create_mismatched_product(self):
        """productversion.product must match case.product"""

        mozlogger.info("test_create_mismatched_product")

        # fixtures
        pv = self.F.ProductVersionFactory()
        fields = self.new_object_data
        fields['productversion'] = unicode(
            self.get_detail_url("productversion", pv.id))

        # do put
        res = self.post(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            status=400,
        )

        self.assertEqual(res.text, self._product_mismatch_message)



class CaseVersionSelectionResourceTest(case.api.ApiTestCase):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.CaseVersionFactory


    @property
    def resource_name(self):
        return "caseversionselection"

    @property
    def included_param(self):
        return "tags"


    @property
    def available_param(self):
        return "{0}__ne".format(self.included_param)


    def get_exp_obj(self, cv, tags=[]):
        """Return an expected caseselection object with fields filled."""

        exp_tags = []
        for t in tags:
            exp_tag = {
                u"id": unicode(t.id),
                u"name": unicode(t.name),
                u"description": unicode(t.description),
                u"resource_uri": unicode(self.get_detail_url("tag", t.id)),
                u"product": None,
                }
            if t.product:
                exp_tag[u"product"] = unicode(
                    self.get_detail_url("product", str(t.product.id)))
            exp_tags.append(exp_tag)

        return {
            u"case": unicode(
                self.get_detail_url("case", cv.case.id)),
            u"case_id": unicode(cv.case.id),
            u"created_by": None,
            u"id": unicode(cv.id),
            u"latest": True,
            u"name": unicode(cv.name),
            u"priority": unicode(None),
            u"product": {
                u"id": unicode(cv.productversion.product_id)
            },
            u"product_id": unicode(cv.productversion.product_id),
            u"productversion": {
                u"codename": u"",
                u"id": unicode(cv.productversion.id),
                u"product": unicode(self.get_detail_url(
                    "product",
                    cv.productversion.product_id)),
                u"resource_uri": unicode(self.get_detail_url(
                    "productversion",
                    cv.productversion.id)),
                u"version": u"1.0"},
            u"productversion_name": unicode(cv.productversion.name),
            u"resource_uri": unicode(
                self.get_detail_url("caseversionselection", cv.id)),
            u"tags": exp_tags,
            }


    def get_exp_meta(self, count=0):
        """Return an expected meta object with count field filled"""
        return {
            "limit": 20,
            "next": None,
            "offset": 0,
            "previous": None,
            "total_count": count,
            }


    def _do_test(self, for_id, filter_param, exp_objects):
        params = {filter_param: for_id}

        res = self.get_list(params=params)
        self.assertEqual(res.status_int, 200)

        act = res.json

        self.maxDiff = None
        self.assertEquals(act["meta"], self.get_exp_meta(len(exp_objects)))
        self.assertEqual(exp_objects, act["objects"])


    def test_available_for_none_included(self):
        """Get a list of available cases, none included"""

        cv1 = self.factory.create(name="Case1")
        cv2 = self.factory.create(name="Case2")

        self._do_test(
            -1,
            self.available_param,
            [self.get_exp_obj(cv) for cv in [cv1, cv2]],
            )


    def _setup_two_included(self):
        cv1 = self.factory.create(name="Case1", description="ab")
        cv2 = self.factory.create(name="Case2", description="cd")
        tag = self.F.TagFactory.create()
        cv1.tags.add(tag)
        cv2.tags.add(tag)

        return {
            "cv1": cv1,
            "cv2": cv2,
            "t": tag,
            }


    def test_available_for_two_included(self):
        """Get a list of available cases, both included"""

        data = self._setup_two_included()
        self._do_test(
            data["t"].id,
            self.available_param,
            [],
            )


    def test_included_for_two_included(self):
        """Get a list of available cases, both included"""

        data = self._setup_two_included()

        exp_objects = [self.get_exp_obj(cv, tags=[data["t"]]) for cv in [
            data["cv1"], data["cv2"]]]

        self._do_test(
            data["t"].id,
            self.included_param,
            exp_objects=exp_objects,
            )


    def _setup_for_one_included_one_not(self):
        cv1 = self.factory.create(name="Case1", description="ab")
        cv2 = self.factory.create(name="Case2", description="cd")
        tag = self.F.TagFactory.create()
        cv1.tags.add(tag)

        return {
            "cv1": cv1,
            "cv2": cv2,
            "t": tag,
            }


    def test_available_for_one_included_one_not(self):
        """Get a list of available cases, one included"""

        data = self._setup_for_one_included_one_not()
        exp_objects = [self.get_exp_obj(data["cv2"])]

        self._do_test(
            data["t"].id,
            self.available_param,
            exp_objects=exp_objects,
            )


    def test_included_for_one_included_one_not(self):
        """Get a list of included cases, one included"""

        data = self._setup_for_one_included_one_not()
        exp_objects = [self.get_exp_obj(data["cv1"], tags=[data["t"]])]

        self._do_test(
            data["t"].id,
            self.included_param,
            exp_objects=exp_objects,
            )

########NEW FILE########
__FILENAME__ = test_case_resource
"""
Tests for CaseResource api.

"""

from tests.case.api.crud import ApiCrudCases
from tests import case

import logging
mozlogger = logging.getLogger('moztrap.test')



class CaseResourceTest(ApiCrudCases):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.CaseFactory()


    @property
    def resource_name(self):
        return "case"


    @property
    def permission(self):
        """String defining the permission required for
        Create, Update, and Delete.
        """
        return "library.manage_cases"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        shortdatetime = self.datetime.split("-")[-1]
        self.product_fixture = self.F.ProductFactory.create()

        fields = {
            u'product': unicode(
                self.get_detail_url("product", str(self.product_fixture.id))),
            u'idprefix': unicode("%s" % shortdatetime),
            u'suites': [],
        }

        return fields


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.Case.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        actual = {}
        actual[u"resource_uri"] = unicode(
            self.get_detail_url(self.resource_name, str(backend_obj.id)))
        actual[u"id"] = unicode(str(backend_obj.id))
        actual[u"product"] = unicode(
            self.get_detail_url("product", str(backend_obj.product.id)))
        actual[u"idprefix"] = unicode(backend_obj.idprefix)
        actual[u"suites"] = [unicode(
            self.get_detail_url("suite", str(suite.id))
                ) for suite in backend_obj.suites.all()]

        return actual


    @property
    def read_create_fields(self):
        """List of fields that are required for create but read-only for update."""
        return ["product"]

    # overrides from crud.py

    # additional test cases, if any

    # validation cases

    @property
    def _ro_message(self):
        return "product of an existing case may not be changed."



class CaseSelectionResourceTest(case.api.ApiTestCase):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.CaseVersionFactory


    @property
    def resource_name(self):
        return "caseselection"

    @property
    def included_param(self):
        return "case__suites"


    @property
    def available_param(self):
        return "{0}__ne".format(self.included_param)


    def get_exp_obj(self, cv):
        """Return an expected caseselection object with fields filled."""
        return {
            u"case": unicode(
                self.get_detail_url("case", cv.case.id)),
            u"case_id": unicode(cv.case.id),
            u"created_by": None,
            u"id": unicode(cv.id),
            u"name": unicode(cv.name),
            u'priority': unicode(None),
            u"product": {
                u"id": unicode(cv.productversion.product_id)
            },
            u"product_id": unicode(cv.productversion.product_id),
            u"productversion": unicode(
                self.get_detail_url("productversion", cv.productversion.id)),
            u"resource_uri": unicode(
                self.get_detail_url("caseselection", cv.id)),
            u"tags": [],
            }


    def get_exp_meta(self, count=0):
        """Return an expected meta object with count field filled"""
        return {
            "limit": 20,
            "next": None,
            "offset": 0,
            "previous": None,
            "total_count": count,
            }


    def _do_test(self, for_id, filter_param, exp_objects):
        params = {filter_param: for_id}

        res = self.get_list(params=params)
        self.assertEqual(res.status_int, 200)

        act = res.json

        self.maxDiff = None
        self.assertEquals(self.get_exp_meta(len(exp_objects)), act["meta"])
        self.assertEqual(exp_objects, act["objects"])


    def test_available_for_none_included(self):
        """Get a list of available cases, none included"""

        cv1 = self.factory.create(name="Case1", description="ab")
        cv2 = self.factory.create(name="Case2", description="cd")

        self._do_test(
            -1,
            self.available_param,
            [self.get_exp_obj(cv) for cv in [cv1, cv2]],
            )


    def _setup_two_included(self):
        cv1 = self.factory.create(name="Case1", description="ab")
        cv2 = self.factory.create(name="Case2", description="cd")
        suite = self.F.SuiteFactory.create()
        sc1 = self.F.SuiteCaseFactory.create(
            case=cv1.case, suite=suite, order=0)
        sc2 = self.F.SuiteCaseFactory.create(
            case=cv2.case, suite=suite, order=1)

        return {
            "cv1": cv1,
            "cv2": cv2,
            "s": suite,
            "sc1": sc1,
            "sc2": sc2,
            }


    def test_available_for_two_included(self):
        """Get a list of available cases, both included"""

        data = self._setup_two_included()
        self._do_test(
            data["s"].id,
            self.available_param,
            [],
            )


    def test_included_for_two_included(self):
        """Get a list of available cases, both included"""

        data = self._setup_two_included()

        exp_objects = [
            self.get_exp_obj(
                cv,
                ) for cv, sc in [
                    (data["cv1"], data["sc1"]),
                    (data["cv2"], data["sc2"]),
                    ]
                ]

        self._do_test(
            data["s"].id,
            self.included_param,
            exp_objects=exp_objects,
            )


    def _setup_for_one_included_one_not(self):
        cv1 = self.factory.create(name="Case1", description="ab")
        cv2 = self.factory.create(name="Case2", description="cd")
        suite = self.F.SuiteFactory.create()
        sc1 = self.F.SuiteCaseFactory.create(
            case=cv1.case,
            suite=suite,
            )
        return {
            "cv1": cv1,
            "cv2": cv2,
            "s": suite,
            "sc1": sc1,
            }


    def test_available_for_one_included_one_not(self):
        """Get a list of available cases, one included"""

        data = self._setup_for_one_included_one_not()
        exp_objects = [self.get_exp_obj(data["cv2"])]

        self._do_test(
            data["s"].id,
            self.available_param,
            exp_objects=exp_objects,
            )


    def test_included_for_one_included_one_not(self):
        """Get a list of included cases, one included"""

        data = self._setup_for_one_included_one_not()
        exp_objects = [
            self.get_exp_obj(
                cv,
                ) for cv, sc in [(data["cv1"], data["sc1"])]
            ]

        self._do_test(
            data["s"].id,
            self.included_param,
            exp_objects=exp_objects,
            )


    def test_case_without_version(self):
        """Get a list of available cases, skip ones without versions"""

        # create a case with no version
        self.F.CaseFactory()

        data = self._setup_for_one_included_one_not()
        exp_objects = [self.get_exp_obj(data["cv2"])]

        self._do_test(
            data["s"].id,
            self.available_param,
            exp_objects=exp_objects,
            )

########NEW FILE########
__FILENAME__ = test_suitecase_resource
"""
Tests for SuiteCaseResource api.

"""
from tests.case.api.crud import ApiCrudCases

import logging
mozlogger = logging.getLogger('moztrap.test')


class SuiteCaseResourceTest(ApiCrudCases):
    """Please see the test cases implemented in tests.case.api.ApiCrudCases.

    The following abstract methods must be implemented:
      - factory(self)                           (property)
      - resource_name(self)                     (property)
      - permission(self)                        (property)
      - new_object_data(self)                   (property)
      - backend_object(self, id)                (method)
      - backend_data(self, backend_object)      (method)
      - backend_meta_data(self, backend_object) (method)

    """

    # implementations for abstract methods and properties

    @property
    def factory(self):
        """The factory to use to create fixtures of the object under test.
        """
        return self.F.SuiteCaseFactory()


    @property
    def resource_name(self):
        """String defining the resource name.
        """
        return "suitecase"


    @property
    def permission(self):
        """String defining the permission required for
        Create, Update, and Delete.
        """
        return "library.manage_suite_cases"


    def order_generator(self):
        """give an incrementing number for order."""
        self.__dict__.setdefault("order", 0)
        self.order += 1
        return self.order


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        self.product_fixture = self.F.ProductFactory.create()
        self.case_fixture = self.F.CaseFactory.create(
            product=self.product_fixture)
        self.suite_fixture = self.F.SuiteFactory.create(
            product=self.product_fixture)

        fields = {
            u"case": unicode(
                self.get_detail_url("case", str(self.case_fixture.id))),
            u"suite": unicode(
                self.get_detail_url("suite", str(self.suite_fixture.id))
            ),
            u"order": self.order_generator(),
        }
        return fields


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.SuiteCase.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        return {
            u"id": unicode(str(backend_obj.id)),
            u"resource_uri": unicode(
                self.get_detail_url(self.resource_name, str(backend_obj.id))),
            u"case": unicode(
                self.get_detail_url("case", str(backend_obj.case.id))),
            u"suite": unicode(
                self.get_detail_url("suite", str(backend_obj.suite.id))),
            u"order": backend_obj.order,
        }


    @property
    def read_create_fields(self):
        """List of fields that are required for create but read-only for update."""
        return ["suite", "case"]

    # overrides from crud.py

    # additional test cases, if any

    # validation cases

    def test_create_mismatched_product_error(self):
        """error if suite.product does not match case.product"""

        mozlogger.info("test_create_mismatched_product_error")

        fields = self.new_object_data
        product = self.F.ProductFactory()
        self.case_fixture.product = product
        self.case_fixture.save()

        # do post
        res = self.post(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            status=400,
        )

        error_message = str(
            "case's product must match suite's product."
        )
        self.assertEqual(res.text, error_message)

########NEW FILE########
__FILENAME__ = test_suite_resource
"""
Tests for SuiteResource api.

"""
import json

from tests import case
from tests.case.api.crud import ApiCrudCases



class SuiteResourceTest(ApiCrudCases):
    """Please see the test cases implemented in tests.case.api.ApiCrudCases.

    The following abstract methods must be implemented:
      - factory(self)                           (property)
      - resource_name(self)                     (property)
      - permission(self)                        (property)
      - new_object_data(self)                   (property)
      - backend_object(self, id)                (method)
      - backend_data(self, backend_object)      (method)
      - backend_meta_data(self, backend_object) (method)

    """

    # implementations for abstract methods and properties

    @property
    def factory(self):
        """The factory to use to create fixtures of the object under test.
        """
        return self.F.SuiteFactory()


    @property
    def resource_name(self):
        """String defining the resource name.
        """
        return "suite"


    @property
    def permission(self):
        """String defining the permission required for
        Create, Update, and Delete.
        """
        return "library.manage_suites"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        self.product_fixture = self.F.ProductFactory.create()
        modifiers = (self.datetime, self.resource_name)
        fields = {
            u"name": unicode("test_%s_%s" % modifiers),
            u"description": unicode("test %s %s" % modifiers),
            u"product": unicode(self.get_detail_url(
                "product", self.product_fixture.id)),
            u"status": unicode("draft"),
        }
        return fields


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.Suite.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        actual = {}
        actual[u"id"] = unicode(str(backend_obj.id))
        actual[u"name"] = unicode(backend_obj.name)
        actual[u"description"] = unicode(backend_obj.description)
        actual[u"product"] = unicode(
                        self.get_detail_url("product", backend_obj.product.id))
        actual[u"status"] = unicode(backend_obj.status)
        actual[u"resource_uri"] = unicode(
            self.get_detail_url(self.resource_name, str(backend_obj.id)))

        return actual


    @property
    def read_create_fields(self):
        """List of fields that are required for create but read-only for update."""
        return ["product"]

    # additional test cases, if any



class SuiteSelectionResourceTest(case.api.ApiTestCase):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.SuiteFactory


    @property
    def resource_name(self):
        return "suiteselection"


    @property
    def included_param(self):
        return "runs"


    @property
    def available_param(self):
        return "{0}__ne".format(self.included_param)


    def get_exp_obj(self, s, runs=[]):
        """Return an expected suiteselection object with fields filled."""

        return {
            u"case_count": s.cases.count(),
            u"created_by": None,
            u"filter_cases":
                u"/manage/cases/?filter-suite={0}".format(s.id),
            u"id": unicode(s.id),
            u"name": unicode(s.name),
            u"runs": runs,
            u"product": unicode(
                self.get_detail_url("product", s.product.id)),
            u"resource_uri": unicode(
                self.get_detail_url("suiteselection", s.id)),
            u"suite_id": unicode(s.id)
        }


    def get_exp_meta(self, count=0):
        """Return an expected meta object with count field filled"""
        return {
            u"limit": 20,
            u"next": None,
            u"offset": 0,
            u"previous": None,
            u"total_count": count,
            }


    def _do_test(self, for_id, filter_param, exp_objects):
        params = {filter_param: for_id}

        res = self.get_list(params=params)
        self.assertEqual(res.status_int, 200)

        act = res.json

        self.maxDiff = None
        self.assertEquals(act["meta"], self.get_exp_meta(len(exp_objects)))
        self.assertEqual(exp_objects, act["objects"])


    def test_available_for_none_included(self):
        """Get a list of available suites, none selected"""

        s1 = self.factory.create(name="Suite1")
        s2 = self.factory.create(name="Suite2")

        self._do_test(
            -1,
            self.available_param,
            [self.get_exp_obj(s) for s in [s1, s2]],
            )


    def _setup_two_included(self):
        s1 = self.factory.create(name="Suite1")
        s2 = self.factory.create(name="Suite2")
        run = self.F.RunFactory.create()
        runsuite1 = self.F.RunSuiteFactory.create(
            run=run, suite=s1, order=0)
        runsuite2 = self.F.RunSuiteFactory.create(
            run=run, suite=s2, order=1)
        return {
            "run": run,
            "s1": s1,
            "s2": s2,
            "runsuite1": runsuite1,
            "runsuite2": runsuite2,
            }


    def test_available_for_two_included(self):
        """Get a list of available cases, both included"""

        data = self._setup_two_included()
        self._do_test(
            data["run"].id,
            self.available_param,
            [],
            )


    def test_included_for_two_included(self):
        """Get a list of available cases, both included"""

        data = self._setup_two_included()

        exp_objects = [self.get_exp_obj(
            s,
            [unicode(self.get_detail_url("run", data["run"].id))],
            ) for s, rs in [
                (data["s1"], data["runsuite1"]),
                (data["s2"], data["runsuite2"])]]

        self._do_test(
            data["run"].id,
            self.included_param,
            exp_objects=exp_objects,
            )


    def _setup_for_one_included_one_not(self):
        s1 = self.factory.create(name="Suite1")
        s2 = self.factory.create(name="Suite2")
        run = self.F.RunFactory.create()
        runsuite1 = self.F.RunSuiteFactory.create(
            run=run, suite=s1, order=0)
        return {
            "run": run,
            "s1": s1,
            "s2": s2,
            "runsuite1": runsuite1,
            }


    def test_available_for_one_included_one_not(self):
        """Get a list of available cases, one included"""

        data = self._setup_for_one_included_one_not()
        exp_objects = [self.get_exp_obj(data["s2"])]

        self._do_test(
            data["run"].id,
            self.available_param,
            exp_objects=exp_objects,
            )


    def test_included_for_one_included_one_not(self):
        """Get a list of included cases, one included"""

        data = self._setup_for_one_included_one_not()
        exp_objects = [self.get_exp_obj(
            data["s1"],
            [unicode(self.get_detail_url("run", data["run"].id))],
            )]

        self._do_test(
            data["run"].id,
            self.included_param,
            exp_objects=exp_objects,
            )


    def test_available_included_in_other_runs(self):
        """Get a list of available suites, when suites included elsewhere"""

        s1 = self.factory.create(name="Suite1")
        s2 = self.factory.create(name="Suite2")
        run1 = self.F.RunFactory.create()
        runsuite1 = self.F.RunSuiteFactory.create(
            run=run1, suite=s1, order=0)
        runsuite2 = self.F.RunSuiteFactory.create(
            run=run1, suite=s2, order=1)
        run2 = self.F.RunFactory.create()
        runsuite3 = self.F.RunSuiteFactory.create(
            run=run2, suite=s1, order=0)
        runsuite4 = self.F.RunSuiteFactory.create(
            run=run2, suite=s2, order=1)

        self._do_test(
            -1,
            self.available_param,
            [self.get_exp_obj(
                s,
                runs=[
                    unicode(self.get_detail_url("run", run1.id)),
                    unicode(self.get_detail_url("run", run2.id)),
                    ],
                ) for s, rs in [(s1, runsuite3), (s2, runsuite4)]],
            )

########NEW FILE########
__FILENAME__ = test_case
"""
Tests for Case and related models (CaseVersion, CaseStep).

"""
from datetime import datetime

from django.core.exceptions import ValidationError

from mock import patch

from tests import case

from moztrap.model import SuiteCase



class CaseTest(case.DBTestCase):
    def test_unicode(self):
        c = self.F.CaseFactory()

        self.assertEqual(unicode(c), u"case #%s" % c.id)


    def test_clone_versions(self):
        """Cloning a case clones all versions."""
        cv = self.F.CaseVersionFactory.create(name="CV 1")

        new = cv.case.clone()

        self.assertEqual(new.versions.get().name, "Cloned: CV 1")


    def test_all_versions(self):
        """Returns ordered product versions paired with caseversion or None."""
        c = self.F.CaseFactory()
        pv1 = self.F.ProductVersionFactory(product=c.product, version="1")
        pv2 = self.F.ProductVersionFactory(product=c.product, version="2")
        pv3 = self.F.ProductVersionFactory(product=c.product, version="3")
        cv2 = self.F.CaseVersionFactory(productversion=pv2, case=c)

        self.assertEqual(
            c.all_versions(), [(pv1, None), (pv2, cv2), (pv3, None)])



class CaseVersionTest(case.DBTestCase):
    def test_unicode(self):
        cv = self.F.CaseVersionFactory(name="Foo")

        self.assertEqual(unicode(cv), u"Foo")


    def test_clone_clones_case(self):
        """Cloning caseversion w/o case or productversion clones case."""
        cv = self.F.CaseVersionFactory(name="one")
        self.F.CaseVersionFactory(case=cv.case)

        new = cv.clone()

        self.assertIsInstance(new, cv.__class__)
        self.assertEqual(
            [v.name for v in new.case.versions.all()], ["Cloned: one"])


    def test_clone_override_name(self):
        """Providing name override prevents 'Cloned: ' prefix."""
        cv = self.F.CaseVersionFactory(name="one")

        new = cv.clone(overrides={"name": "two"})

        self.assertEqual(new.name, "two")


    def test_clone_gets_source_state(self):
        """Clone of active caseversion is still active."""
        cv = self.F.CaseVersionFactory(status="active")

        new = cv.clone()

        self.assertEqual(new.status, "active")


    def test_clone_single_suite(self):
        cv = self.F.CaseVersionFactory()
        suite = self.F.SuiteFactory(product=cv.case.product)
        self.F.SuiteCaseFactory(suite=suite, case=cv.case)

        user = self.F.UserFactory.create(username='tester')
        new = cv.clone(user=user)

        self.assertEqual(len(SuiteCase.objects.filter(suite=suite)), 2)

    def test_clone_multiple_suites(self):
        cv = self.F.CaseVersionFactory()
        num_suites = 3
        suites = []
        for i in range(0, num_suites):
            suites.append(self.F.SuiteFactory(name='Suite {0}'.format(i), product=cv.case.product))
            self.F.SuiteCaseFactory(suite=suites[i], case=cv.case)

        user = self.F.UserFactory.create(username='tester')
        new = cv.clone(user=user)

        for i in range(0, num_suites):
            self.assertEqual(len(SuiteCase.objects.filter(suite=suites[i])), 2)


    def test_clone_steps(self):
        """Cloning a caseversion clones its steps."""
        cs = self.F.CaseStepFactory.create()
        pv = self.F.ProductVersionFactory.create(
            product=cs.caseversion.case.product, version="2.0")

        new = cs.caseversion.clone(overrides={"productversion": pv})

        cloned_step = new.steps.get()
        self.assertNotEqual(cloned_step, cs)
        self.assertEqual(cloned_step.instruction, cs.instruction)


    def test_clone_attachments(self):
        """Cloning a caseversion clones its attachments."""
        ca = self.F.CaseAttachmentFactory.create()
        pv = self.F.ProductVersionFactory.create(
            product=ca.caseversion.case.product, version="2.0")

        new = ca.caseversion.clone(overrides={"productversion": pv})

        cloned_attachment = new.attachments.get()
        self.assertNotEqual(cloned_attachment, ca)
        self.assertEqual(
            cloned_attachment.attachment.name, ca.attachment.name)


    def test_clone_tags(self):
        """Cloning a caseversion clones its tag relationships."""
        tag = self.F.TagFactory.create()
        cv = self.F.CaseVersionFactory.create()
        cv.tags.add(tag)
        pv = self.F.ProductVersionFactory.create(
            product=cv.case.product, version="2.0")

        new = cv.clone(overrides={"productversion": pv})

        self.assertEqual(new.tags.get(), tag)


    def test_clone_environments(self):
        """Cloning a CaseVersion clones its environments."""
        cv = self.F.CaseVersionFactory(environments={"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(
            product=cv.case.product, version="2.0")

        new = cv.clone(overrides={"productversion": pv})

        self.assertEqual(len(new.environments.all()), 2)


    def test_default_active(self):
        """New CaseVersion defaults to active state."""
        cv = self.F.CaseVersionFactory()

        self.assertEqual(cv.status, "active")


    def test_gets_productversion_envs(self):
        """A new caseversion inherits environments of its product version."""
        pv = self.F.ProductVersionFactory(environments={"OS": ["Windows", "Linux"]})
        cv = self.F.CaseVersionFactory(productversion=pv)

        self.assertEqual(set(cv.environments.all()), set(pv.environments.all()))
        self.assertFalse(cv.envs_narrowed)


    def test_deleting_last_version_deletes_case(self):
        """Deleting the last case version deletes its case as well."""
        c = self.F.CaseFactory.create()
        p = c.product
        cv = self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="3", case=c)

        cv.delete()

        self.assertEqual(
            self.model.Case.objects.count(),
            0
        )


    def test_inherits_env_removal(self):
        """Removing an env from a productversion cascades to caseversion."""
        envs = self.F.EnvironmentFactory.create_full_set({"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs)
        cv = self.F.CaseVersionFactory.create(productversion=pv)

        pv.remove_envs(envs[0])

        self.assertEqual(set(cv.environments.all()), set(envs[1:]))
        self.assertFalse(cv.envs_narrowed)


    def test_non_narrowed_inherits_env_addition(self):
        """Adding env to productversion cascades to non-narrowed caseversion."""
        envs = self.F.EnvironmentFactory.create_full_set({"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs[1:])
        cv = self.F.CaseVersionFactory.create(productversion=pv, envs_narrowed=False)

        pv.add_envs(envs[0])

        self.assertEqual(set(cv.environments.all()), set(envs))


    def test_narrowed_does_not_inherit_env_addition(self):
        """Adding env to prodversion doesn't cascade to narrowed caseversion."""
        envs = self.F.EnvironmentFactory.create_full_set({"OS": ["OS X", "Linux"]})
        pv = self.F.ProductVersionFactory.create(environments=envs[1:])
        cv = self.F.CaseVersionFactory.create(productversion=pv, envs_narrowed=True)

        pv.add_envs(envs[0])

        self.assertEqual(set(cv.environments.all()), set(envs[1:]))


    def test_direct_env_narrowing_sets_envs_narrowed(self):
        """Removing an env from a caseversion directly sets envs_narrowed."""
        envs = self.F.EnvironmentFactory.create_full_set({"OS": ["OS X", "Linux"]})
        cv = self.F.CaseVersionFactory.create(environments=envs)

        self.assertFalse(cv.envs_narrowed)

        cv.remove_envs(envs[0])

        self.assertTrue(self.refresh(cv).envs_narrowed)


    def test_adding_new_version_sets_latest(self):
        """Adding a new case version updates latest version."""
        c = self.F.CaseFactory.create()
        p = c.product
        self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="2", case=c)
        self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="1", case=c)
        self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="3", case=c)

        self.assertEqual(
            [v.latest for v in c.versions.all()],
            [False, False, True]
            )


    def test_deleting_version_sets_latest(self):
        """Deleting a case version updates latest version."""
        c = self.F.CaseFactory.create()
        p = c.product
        self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="2", case=c)
        self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="1", case=c)
        cv = self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="3", case=c)

        cv.delete()

        self.assertEqual(
            [v.latest for v in c.versions.all()],
            [False, True]
            )


    def test_undeleting_version_sets_latest(self):
        """Undeleting a case version updates latest version."""
        c = self.F.CaseFactory.create()
        p = c.product
        self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="2", case=c)
        self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="1", case=c)
        cv = self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="3", case=c)

        cv.delete()
        self.refresh(cv).undelete()

        self.assertEqual(
            [v.latest for v in c.versions.all()],
            [False, False, True]
            )


    @patch("moztrap.model.mtmodel.datetime")
    def test_update_latest_version_does_not_change_modified_on(self, mock_dt):
        """Updating latest case version does not change modified_on."""
        mock_dt.datetime.utcnow.return_value = datetime(2012, 1, 30)
        cv = self.F.CaseVersionFactory.create()

        mock_dt.datetime.utcnow.return_value = datetime(2012, 1, 31)
        cv.case.set_latest_version()

        self.assertEqual(self.refresh(cv).modified_on, datetime(2012, 1, 30))
        self.assertEqual(self.refresh(cv.case).modified_on, datetime(2012, 1, 30))


    def test_update_latest_version_does_not_change_modified_by(self):
        """Updating latest case version does not change modified_by."""
        u = self.F.UserFactory.create()
        c = self.F.CaseFactory.create(user=u)
        cv = self.F.CaseVersionFactory.create(case=c, user=u)

        cv.case.set_latest_version()

        self.assertEqual(self.refresh(cv).modified_by, u)
        self.assertEqual(self.refresh(c).modified_by, u)


    def test_set_latest_instance_being_saved_is_updated(self):
        """Version being saved gets correct latest setting."""
        c = self.F.CaseFactory.create()
        p = c.product
        self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="1", case=c)
        cv = self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="2", case=c)

        self.assertEqual(cv.latest, True)


    def test_skip_set_latest(self):
        """Passing skip_set_latest to save skips setting latest version."""
        cv1 = self.F.CaseVersionFactory.create(productversion__version="1")
        pv2 = self.F.ProductVersionFactory.create(
            product=cv1.productversion.product, version="2")
        cv2 = self.model.CaseVersion(case=cv1.case, productversion=pv2)
        cv2.save(skip_set_latest=True)

        # latest attributes are wrong because we didn't update them
        self.assertEqual(self.refresh(cv1).latest, True)
        self.assertEqual(self.refresh(cv2).latest, False)


    def test_latest_version(self):
        """Case.latest_version() gets latest version."""
        c = self.F.CaseFactory.create()
        p = c.product
        self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="2", case=c)
        self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="1", case=c)
        cv = self.F.CaseVersionFactory.create(
            productversion__product=p, productversion__version="3", case=c)

        self.assertEqual(c.latest_version(), cv)


    def test_bug_urls(self):
        """bug_urls aggregates bug urls from all results, sans dupes."""
        cv = self.F.CaseVersionFactory.create()
        rcv1 = self.F.RunCaseVersionFactory.create(caseversion=cv)
        rcv2 = self.F.RunCaseVersionFactory.create(caseversion=cv)
        result1 = self.F.ResultFactory.create(runcaseversion=rcv1)
        result2 = self.F.ResultFactory.create(runcaseversion=rcv2)
        self.F.StepResultFactory.create(result=result1)
        self.F.StepResultFactory.create(
            result=result1, bug_url="http://www.example.com/bug1")
        self.F.StepResultFactory.create(
            result=result2, bug_url="http://www.example.com/bug1")
        self.F.StepResultFactory.create(
            result=result2, bug_url="http://www.example.com/bug2")

        self.assertEqual(
            cv.bug_urls(),
            set(["http://www.example.com/bug1", "http://www.example.com/bug2"])
            )


    def test_unique_constraint(self):
        """Can't have two versions of a case for same product version."""
        cv = self.F.CaseVersionFactory.create()

        new = self.F.CaseVersionFactory.build(
            productversion=cv.productversion, case=cv.case)

        with self.assertRaises(ValidationError):
            new.full_clean()


    def test_unique_constraint_with_unset_case_and_productversion(self):
        """Uniqueness checking doesn't blow up if case/productversion unset."""
        new = self.model.CaseVersion()

        with self.assertRaises(ValidationError):
            new.full_clean()


    def test_unique_constraint_doesnt_prevent_edit(self):
        """Unique constraint still allows saving an edited existing object."""
        cv = self.F.CaseVersionFactory.create()

        cv.name = "new name"

        cv.full_clean()


    def test_unique_constraint_ignores_deleted(self):
        """Deleted version doesn't prevent new with same productversion."""
        cv = self.F.CaseVersionFactory.create()
        cv.delete()

        self.F.CaseVersionFactory.create(
            case=cv.case, productversion=cv.productversion)



class CaseStepTest(case.DBTestCase):
    """Tests for the CaseStep model."""
    def test_unicode(self):
        """Unicode representation is 'step #X'."""
        c = self.F.CaseStepFactory(number=1)

        self.assertEqual(unicode(c), u"step #1")


    def test_unique_constraint(self):
        """Can't have two steps of the same number in one caseversion."""
        cs = self.F.CaseStepFactory.create()

        new = self.F.CaseStepFactory.build(
            caseversion=cs.caseversion, number=cs.number)

        with self.assertRaises(ValidationError):
            new.full_clean()


    def test_unique_constraint_with_unset_caseversion(self):
        """Uniqueness checking doesn't blow up if caseversion unset."""
        new = self.model.CaseStep()

        with self.assertRaises(ValidationError):
            new.full_clean()


    def test_unique_constraint_doesnt_prevent_edit(self):
        """Unique constraint still allows saving an edited existing step."""
        cs = self.F.CaseStepFactory.create()

        cs.instruction = "new instruction"

        cs.full_clean()


    def test_unique_constraint_ignores_deleted(self):
        """Deleted step doesn't prevent new with same number."""
        cs = self.F.CaseStepFactory.create()
        cs.delete()

        self.F.CaseStepFactory.create(
            caseversion=cs.caseversion, number=cs.number)



class CaseAttachmentTest(case.DBTestCase):
    """Tests for the CaseAttachment model."""
    def test_unicode(self):
        """Unicode representation is name."""
        ca = self.F.CaseAttachmentFactory(name="afile.txt")

        self.assertEqual(unicode(ca), "afile.txt")


    def test_name(self):
        """``name`` property is basename of attached file name."""
        ca = self.F.CaseAttachmentFactory(name="thefile.txt")

        self.assertEqual(ca.name, "thefile.txt")


    def test_url(self):
        """``url`` property is shortcut to attached file url."""
        ca = self.F.CaseAttachmentFactory()

        self.assertEqual(ca.url, ca.attachment.url)

########NEW FILE########
__FILENAME__ = test_suite
"""
Tests for Suite model.

"""
from django.core.exceptions import ValidationError

from tests import case



class SuiteTest(case.DBTestCase):
    def test_unicode(self):
        """Unicode representation is name of Suite."""
        self.assertEqual(unicode(self.F.SuiteFactory(name="Foo")), u"Foo")


    def test_clone_cases(self):
        """Cloning a suite clones its member SuiteCases."""
        sc = self.F.SuiteCaseFactory()

        new = sc.suite.clone()

        self.assertEqual(new.cases.get(), sc.case)


    def test_clone_sets_draft_state(self):
        """Clone of active suite is still draft."""
        s = self.F.SuiteFactory(status="active")

        new = s.clone()

        self.assertEqual(new.status, "draft")


    def test_default_active(self):
        """New suite defaults to active state."""
        s = self.F.SuiteFactory()

        self.assertEqual(s.status, "active")


    def test_unique_constraint(self):
        """Can't have two SuiteCases with same suite and case."""
        sc = self.F.SuiteCaseFactory.create()

        new = self.F.SuiteCaseFactory.build(
            case=sc.case, suite=sc.suite)

        with self.assertRaises(ValidationError):
            new.full_clean()


    def test_unique_constraint_with_unset_case_and_suite(self):
        """Uniqueness checking doesn't blow up if suite/case unset."""
        new = self.model.SuiteCase()

        with self.assertRaises(ValidationError):
            new.full_clean()


    def test_unique_constraint_doesnt_prevent_edit(self):
        """Unique constraint still allows saving an edited existing object."""
        sc = self.F.SuiteCaseFactory.create()

        sc.instruction = "new instruction"

        sc.full_clean()


    def test_unique_constraint_ignores_deleted(self):
        """Deleted suitecase doesn't prevent new with same suite and case."""
        sc = self.F.SuiteCaseFactory.create()
        sc.delete()

        self.F.SuiteCaseFactory.create(
            case=sc.case, suite=sc.suite)

########NEW FILE########
__FILENAME__ = test_bulk
"""
Tests for bulk test-case parser.

"""
import textwrap

from tests import case



class ParseBulkTest(case.TestCase):
    """Tests for BulkParser."""
    @property
    def parser(self):
        from moztrap.model.library.bulk import BulkParser
        return BulkParser


    def test_success(self):
        """Test successful parsing."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                 Test that bulk parsing works
                As a testcase administrator
                Given that I've loaded the bulk-input screen
                When I type a sonnet in the textarea
                And I sing my sonnet aloud
                Then my sonnet should be parsed
                And when I click the submit button
                Then testcases should be created
                And
                When I am done
                Then I feel satisfied

                  tEst that a second testcase works
                 With any old description
                  whEn I do this thing
                Over here
                tHen I see that thing
                Over there
                """)
                ),
            [
                {
                    "name": "Test that bulk parsing works",
                    "description": (
                        "As a testcase administrator\n"
                        "Given that I've loaded the bulk-input screen"
                        ),
                    "steps": [
                        {
                            "instruction": (
                                "When I type a sonnet in the textarea\n"
                                "And I sing my sonnet aloud"
                                ),
                            "expected": "Then my sonnet should be parsed",
                            },
                        {
                            "instruction": "And when I click the submit button",
                            "expected": "Then testcases should be created",
                            },
                        {
                            "instruction": "When I am done",
                            "expected": "Then I feel satisfied",
                            },
                        ]
                    },
                {
                    "name": "tEst that a second testcase works",
                    "description": "With any old description",
                    "steps": [
                        {
                            "instruction": (
                                "whEn I do this thing\n"
                                "Over here"
                                ),
                            "expected": (
                                "tHen I see that thing\n"
                                "Over there"
                                ),
                            },
                        ],
                    },
                ]
            )


    def test_beginning_junk(self):
        """Unexpected junk at start causes error."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                This is not the beginning of a test case.
                Nor is this.
                """)
                ),
            [
                {
                    "error": (
                        "Expected 'Test that ...', not "
                        "'This is not the beginning of a test case.'"
                        ),
                    },
                ]
            )


    def test_no_description(self):
        """No description is ok."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                Test That a perfectly good name
                When followed by another keyword
                Then may work out just fine
                """)
                ),
            [
                {
                    "name": "Test That a perfectly good name",
                    "description": "",
                    "steps": [
                        {
                            "instruction": "When followed by another keyword",
                            "expected": "Then may work out just fine",
                            }
                        ],
                    },
                ]
            )


    def test_and_in_expected_result(self):
        """'And' can occur in the midst of an expected result."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                test That the word And
                Yes, that word
                When I place it in a result
                then it works
                And
                is included in the result
                """)
                ),
            [
                {
                    "name": "test That the word And",
                    "description": "Yes, that word",
                    "steps": [
                        {
                            "instruction": "When I place it in a result",
                            "expected": (
                                "then it works\n"
                                "And\n"
                                "is included in the result"
                                ),
                            },
                        ]
                    },
                ]
            )


    def test_early_end_begin(self):
        """Unexpected end of input causes error."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                """)
                ),
            [
                {
                    "error": (
                        "Unexpected end of input, looking for 'Test That '"
                        ),
                    },
                ]
            )


    def test_early_end_pre_description(self):
        """Unexpected end of input after name causes error."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                Test That a perfectly good name
                """)
                ),
            [
                {
                    "name": "Test That a perfectly good name",
                    "error": (
                        "Unexpected end of input, looking for 'When ' or 'And When '"
                        ),
                    },
                ]
            )


    def test_early_end_description(self):
        """Unexpected end of input in description causes error."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                Test That a perfectly good name
                With some description
                """)
                ),
            [
                {
                    "name": "Test That a perfectly good name",
                    "description": "With some description",
                    "error": (
                        "Unexpected end of input, looking for 'When ' or 'And When '"
                        ),
                    },
                ]
            )


    def test_early_end_after_and(self):
        """Unexpected end of input after 'and' is ok."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                Test That a perfectly good name
                And a good description
                When insufficiently assisted
                Then may not
                And
                """)
                ),
            [
                {
                    "name": "Test That a perfectly good name",
                    "description": "And a good description",
                    "steps": [
                        {
                            "instruction": "When insufficiently assisted",
                            "expected": "Then may not",
                            },
                        ],
                    "error": (
                        "Unexpected end of input, looking for 'When '"
                        ),
                    },
                ]
            )


    def test_unmatched_when_then(self):
        """Unexpected end of input in the midst of a step causes error."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                Test that this case is good
                when ever you are
                tesT that this case is better
                when it's there
                 Test that bulk parsing works
                When I type a sonnet in the textarea
                And I sing my sonnet aloud
                And when I click the submit button
                When I am done
                Then I feel satisfied
                wHen nothing happens

                  tEst that another testcase works
                 With any old description
                  whEn I do this thing
                """)
                ),
            [
                {
                    "name": "Test that this case is good",
                    "description": "",
                    "steps": [
                        {
                            "instruction": (
                                "when ever you are"
                                ),
                            },
                        ]
                    },
                {
                    "name": "tesT that this case is better",
                    "description": "",
                    "steps": [
                        {
                            "instruction": (
                                "when it's there"
                                ),
                            },
                        ]
                    },
                {
                    "name": "Test that bulk parsing works",
                    "description": "",
                    "steps": [
                        {
                            "instruction": (
                                "When I type a sonnet in the textarea\n"
                                "And I sing my sonnet aloud"
                                ),
                            },
                        {
                            "instruction": "And when I click the submit button",
                            },
                        {
                            "instruction": "When I am done",
                            "expected": "Then I feel satisfied",
                            },
                        {
                            "instruction": "wHen nothing happens",
                            },
                        ]
                    },
                {
                    "name": "tEst that another testcase works",
                    "description": "With any old description",
                    "steps": [
                        {
                            "instruction": (
                                "whEn I do this thing"
                                ),
                            },
                        ],
                    },
                ]
            )


    def test_overlong_name_in_first_case(self):
        """Overlong name causes error."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                Test That a super long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long name
                When the name is overlong
                Then causes error
                """)
                ),
            [
                {
                    "error": (
                        "Title should have at most 200 chracters, '"
                        "Test That a super long long long long long long lo"
                        "...'"
                        ),
                    },
                ]
            )


    def test_overlong_name_in_another_case(self):
        """Overlong name causes error."""
        self.assertEqual(
            self.parser().parse(
                textwrap.dedent("""
                Test that a perfectly good name
                when ever you are
                Test That a super long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long name
                When the name is overlong
                Then causes error
                """)
                ),
            [
                {
                    "name": "Test that a perfectly good name",
                    "description": "",
                    "steps": [
                        {
                            "instruction": (
                                "when ever you are"
                                ),
                            },
                        ]
                    },
                {
                    "error": (
                        "Title should have at most 200 chracters, '"
                        "Test That a super long long long long long long lo"
                        "...'"
                        ),
                    },
                ]
            )

########NEW FILE########
__FILENAME__ = test_importer
"""Tests for suite/case importer."""
from tests import case

from mock import patch

from moztrap.model.library.importer import ImportResult, SuiteImporter



class ImporterTestBase(object):
    """Common base class for importer tests."""
    def setUp(self):
        """Setup for importer tests; create a product version."""
        self.pv = self.F.ProductVersionFactory.create()


    def import_data(self, case_data):
        """Instantiate ``Importer``, call ``import_data`` and return result."""
        from moztrap.model.library.importer import Importer
        return Importer().import_data(self.pv, case_data)


class ImporterTest(ImporterTestBase, case.DBTestCase):
    """Tests for ``Importer``."""
    def test_create_caseversion(self):
        """Successful import creates a caseversion with expected values."""
        self.import_data(
            {
                "cases": [
                    {
                        "name": "Foo",
                        "steps": [{"instruction": "do this"}],
                        }
                    ]
                }
            )

        cv = self.model.CaseVersion.objects.get()
        self.assertEqual(cv.name, "Foo")
        self.assertEqual(cv.productversion, self.pv)
        self.assertEqual(cv.case.product, self.pv.product)


    def test_create_caseversion_idprefix(self):
        """Successful import creates a caseversion with an idprefix."""
        self.import_data(
            {
                "cases": [
                    {
                        "name": "Foo",
                        "idprefix": "wow",
                        "steps": [{"instruction": "do this"}],
                        }
                ]
            }
        )

        cv = self.model.CaseVersion.objects.get()
        self.assertEqual(cv.name, "Foo")
        self.assertEqual(cv.case.idprefix, "wow")
        self.assertEqual(cv.productversion, self.pv)
        self.assertEqual(cv.case.product, self.pv.product)


    def test_create_caseversion_description(self):
        """Test the description field of a new test case"""
        result = self.import_data(
            {
                "cases": [
                    {
                        "description": "case description",
                        "name": "Foo",
                        "steps": [{"instruction": "do this"}],
                        }
                    ]
                }
            )

        cv = self.model.CaseVersion.objects.get()
        self.assertEqual(cv.description, "case description")
        self.assertEqual(result.num_cases, 1)


    def test_create_caseversion_tags(self):
        """Test that case tags get created and assigned"""

        new_tags = ["tag1", "tag2", "tag3"]

        result = self.import_data(
            {
                "cases": [
                    {
                        "name": "Foo",
                        "steps": [{"instruction": "do this"}],
                        "tags": new_tags,
                        }
                    ]
                }
            )

        cv = self.model.CaseVersion.objects.get()

        case_tags = [tag.name for tag in cv.tags.all()]
        self.assertEqual(set(case_tags), set(new_tags))
        self.assertEqual(result.num_cases, 1)


    def test_create_caseversion_suites(self):
        """Test that case suites get created and assigned"""

        new_suites = ["suite1 name", "suite2 name", "suite3 name"]

        result = self.import_data(
            {
                "cases": [
                    {
                        "name": "Foo",
                        "steps": [{"instruction": "do this"}],
                        "suites": new_suites,
                        }
                    ]
                }
            )

        cv = self.model.CaseVersion.objects.get()
        case_suites = [suite.name for suite in cv.case.suites.all()]
        self.assertEqual(set(case_suites), set(new_suites))
        self.assertEqual(result.num_cases, 1)


    def test_create_caseversion_existing_user(self):
        """A case with created_by field filled with existing user"""

        # need a user to exist, so the import can find it.
        user = self.F.UserFactory.create(email="sumbudee@mozilla.com")

        result = self.import_data(
            {
                "cases": [
                    {
                        "created_by": "sumbudee@mozilla.com",
                        "name": "Foo",
                        "steps": [{"instruction": "do this"}]
                        }
                    ]
                }
            )

        cv = self.model.CaseVersion.objects.get()
        self.assertEqual(cv.created_by, user)
        self.assertEqual(result.num_cases, 1)


    def test_create_two_caseversions_same_user(self):
        """
        Two caseversions that both use the same user.  Test that import caches
        the user and doesn't have to query for it a second time.

        Expect 19 queries for this import:

        Query 1: Ensure this caseversion does not already exist for this
        productversion::

            SELECT (1) AS `a` FROM `library_caseversion` WHERE
            (`library_caseversion`.`deleted_on` IS NULL AND
            `library_caseversion`.`name` = Foo AND
            `library_caseversion`.`productversion_id` = 12 ) LIMIT 1

        Query 2: Find the user for this email::

            SELECT `auth_user`.`id`, `auth_user`.`username`,
            `auth_user`.`first_name`, `auth_user`.`last_name`,
            `auth_user`.`email`, `auth_user`.`password`,
            `auth_user`.`is_staff`, `auth_user`.`is_active`,
            `auth_user`.`is_superuser`, `auth_user`.`last_login`,
            `auth_user`.`date_joined` FROM `auth_user` WHERE
            `auth_user`.`email` = sumbudee@mozilla.com

        Transaction: SAVEPOINT s140735243669888_x1

        Query 3: Create the first new case object::

            INSERT INTO `library_case` (`created_on`, `created_by_id`,
            `modified_on`, `modified_by_id`, `deleted_on`, `deleted_by_id`,
            `product_id`) VALUES (2012-03-07 19:35:34, None, 2012-03-07
            19:35:34, None, None, None, 12)

        Queries 4-8: Create the first new caseversion object::

            INSERT INTO `library_caseversion` (`created_on`, `created_by_id`,
            `modified_on`, `modified_by_id`, `deleted_on`, `deleted_by_id`,
            `status`, `productversion_id`, `case_id`, `name`, `description`,
            `latest`, `envs_narrowed`) VALUES (2012-03-07 19:35:34, 2,
            2012-03-07 19:35:34, 2, None, None, draft, 12, 10, Foo, , False,
            False)

             SELECT `environments_environment`.`id`,
            `environments_environment`.`created_on`,
            `environments_environment`.`created_by_id`,
            `environments_environment`.`modified_on`,
            `environments_environment`.`modified_by_id`,
            `environments_environment`.`deleted_on`,
            `environments_environment`.`deleted_by_id`,
            `environments_environment`.`profile_id` FROM
            `environments_environment` INNER JOIN
            `core_productversion_environments` ON
            (`environments_environment`.`id` =
            `core_productversion_environments`.`environment_id`) WHERE
            (`environments_environment`.`deleted_on` IS NULL AND
            `core_productversion_environments`.`productversion_id` = 12 )

             SELECT `library_caseversion`.`id`,
            `library_caseversion`.`created_on`,
            `library_caseversion`.`created_by_id`,
            `library_caseversion`.`modified_on`,
            `library_caseversion`.`modified_by_id`,
            `library_caseversion`.`deleted_on`,
            `library_caseversion`.`deleted_by_id`,
            `library_caseversion`.`status`,
            `library_caseversion`.`productversion_id`,
            `library_caseversion`.`case_id`, `library_caseversion`.`name`,
            `library_caseversion`.`description`,
            `library_caseversion`.`latest`,
            `library_caseversion`.`envs_narrowed` FROM `library_caseversion`
            INNER JOIN `core_productversion` ON
            (`library_caseversion`.`productversion_id` =
            `core_productversion`.`id`) WHERE
            (`library_caseversion`.`deleted_on` IS NULL AND
            `library_caseversion`.`case_id` = 10 ) ORDER BY
            `core_productversion`.`order` DESC LIMIT 1

             UPDATE `library_caseversion` SET `latest` = False WHERE
            (`library_caseversion`.`deleted_on` IS NULL AND
            `library_caseversion`.`case_id` = 10 )

             UPDATE `library_caseversion` SET `created_on` = 2012-03-07
            19:35:34, `created_by_id` = 2, `modified_on` = 2012-03-07 19:35:34,
            `modified_by_id` = 2, `deleted_on` = NULL, `deleted_by_id` = NULL,
            `status` = draft, `productversion_id` = 12, `case_id` = 10, `name`
            = Foo, `description` = , `latest` = True, `envs_narrowed` = False
            WHERE `library_caseversion`.`id` = 10

        Query 9: During save, check if there are other caseversions for this
                 case to sync names.
            SELECT `library_caseversion`.`id`, `library_caseversion`
            .`created_on`,
            `library_caseversion`.`created_by_id`, `library_caseversion`
            .`modified_on`,
            `library_caseversion`.`modified_by_id`, `library_caseversion`
            .`deleted_on`,
            `library_caseversion`.`deleted_by_id`, `library_caseversion`
            .`cc_version`,
            `library_caseversion`.`status`, `library_caseversion`
            .`productversion_id`,
            `library_caseversion`.`case_id`, `library_caseversion`.`name`,
            `library_caseversion`.`description`, `library_caseversion`
            .`latest`,
            `library_caseversion`.`envs_narrowed` FROM `library_caseversion`
             INNER JOIN
            `core_productversion` ON (`library_caseversion`
            .`productversion_id` =
            `core_productversion`.`id`) WHERE (`library_caseversion`
            .`deleted_on` IS
            NULL AND `library_caseversion`.`case_id` = 1 ) ORDER BY
            `library_caseversion`.`case_id` ASC,
            `core_productversion`.`order` ASC

        Query 10: Add the new step to the caseversion::

            INSERT INTO `library_casestep` (`created_on`, `created_by_id`,
            `modified_on`, `modified_by_id`, `deleted_on`, `deleted_by_id`,
            `caseversion_id`, `number`, `instruction`, `expected`) VALUES
            (2012-03-07 19:35:34, None, 2012-03-07 19:35:34, None, None, None,
            10, 1, do this, )

        Transaction: RELEASE SAVEPOINT s140735243669888_x1

        Query 11: Ensure the second caseversion with this name and pv doesn't
        exist::

            SELECT (1) AS `a` FROM `library_caseversion` WHERE
            (`library_caseversion`.`deleted_on` IS NULL AND
            `library_caseversion`.`name` = Bar AND
            `library_caseversion`.`productversion_id` = 12 ) LIMIT 1

        Transaction: SAVEPOINT s140735243669888_x2

        **NOTE: We didn't have to search for the user again, since it was
        cached**

        Query 12: Create the second new case::

            INSERT INTO `library_case` (`created_on`, `created_by_id`,
            `modified_on`, `modified_by_id`, `deleted_on`, `deleted_by_id`,
            `product_id`) VALUES (2012-03-07 19:35:34, None, 2012-03-07
            19:35:34, None, None, None, 12)

        Queries 13-17: Create the second new caseversion::

             INSERT INTO `library_caseversion` (`created_on`, `created_by_id`,
             `modified_on`, `modified_by_id`, `deleted_on`, `deleted_by_id`,
             `status`, `productversion_id`, `case_id`, `name`, `description`,
             `latest`, `envs_narrowed`) VALUES (2012-03-07 19:35:34, 2,
             2012-03-07 19:35:34, 2, None, None, draft, 12, 11, Bar, , False,
             False)

              SELECT `environments_environment`.`id`,
             `environments_environment`.`created_on`,
             `environments_environment`.`created_by_id`,
             `environments_environment`.`modified_on`,
             `environments_environment`.`modified_by_id`,
             `environments_environment`.`deleted_on`,
             `environments_environment`.`deleted_by_id`,
             `environments_environment`.`profile_id` FROM
             `environments_environment` INNER JOIN
             `core_productversion_environments` ON
             (`environments_environment`.`id` =
             `core_productversion_environments`.`environment_id`) WHERE
             (`environments_environment`.`deleted_on` IS NULL AND
             `core_productversion_environments`.`productversion_id` = 12 )

              SELECT `library_caseversion`.`id`,
             `library_caseversion`.`created_on`,
             `library_caseversion`.`created_by_id`,
             `library_caseversion`.`modified_on`,
             `library_caseversion`.`modified_by_id`,
             `library_caseversion`.`deleted_on`,
             `library_caseversion`.`deleted_by_id`,
             `library_caseversion`.`status`,
             `library_caseversion`.`productversion_id`,
             `library_caseversion`.`case_id`, `library_caseversion`.`name`,
             `library_caseversion`.`description`,
             `library_caseversion`.`latest`,
             `library_caseversion`.`envs_narrowed` FROM `library_caseversion`
             INNER JOIN `core_productversion` ON
             (`library_caseversion`.`productversion_id` =
             `core_productversion`.`id`) WHERE
             (`library_caseversion`.`deleted_on` IS NULL AND
             `library_caseversion`.`case_id` = 11 ) ORDER BY
             `core_productversion`.`order` DESC LIMIT 1

              UPDATE `library_caseversion` SET `latest` = False WHERE
             (`library_caseversion`.`deleted_on` IS NULL AND
             `library_caseversion`.`case_id` = 11 )

              UPDATE `library_caseversion` SET `created_on` = 2012-03-07
             19:35:34, `created_by_id` = 2, `modified_on` = 2012-03-07
             19:35:34, `modified_by_id` = 2, `deleted_on` = NULL,
             `deleted_by_id` = NULL, `status` = draft, `productversion_id` =
             12, `case_id` = 11, `name` = Bar, `description` = , `latest` =
             True, `envs_narrowed` = False WHERE `library_caseversion`.`id` =
             11

        Query 18: Check for other caseversions for the same case to sync names

            SELECT `library_caseversion`.`id`, `library_caseversion`
            .`created_on`,
            `library_caseversion`.`created_by_id`, `library_caseversion`
            .`modified_on`,
            `library_caseversion`.`modified_by_id`, `library_caseversion`
            .`deleted_on`,
            `library_caseversion`.`deleted_by_id`, `library_caseversion`
            .`cc_version`,
            `library_caseversion`.`status`, `library_caseversion`
            .`productversion_id`,
            `library_caseversion`.`case_id`, `library_caseversion`.`name`,
            `library_caseversion`.`description`, `library_caseversion`
            .`latest`,
            `library_caseversion`.`envs_narrowed` FROM `library_caseversion`
             INNER JOIN
            `core_productversion` ON (`library_caseversion`
            .`productversion_id` =
            `core_productversion`.`id`) WHERE (`library_caseversion`
            .`deleted_on` IS
            NULL AND `library_caseversion`.`case_id` = 2 ) ORDER BY
            `library_caseversion`.`case_id` ASC,
            `core_productversion`.`order` ASC

        Query 19: Add the step to the second caseversion::

            INSERT INTO `library_casestep` (`created_on`, `created_by_id`,
            `modified_on`, `modified_by_id`, `deleted_on`, `deleted_by_id`,
            `caseversion_id`, `number`, `instruction`, `expected`) VALUES
            (2012-03-07 19:35:34, None, 2012-03-07 19:35:34, None, None, None,
            11, 1, do this, )

        Transaction: RELEASE SAVEPOINT s140735243669888_x2

        Note: Django 1.4 now logs transaction points in the connection.queries

        EXPECT: 19 Queries + 4 Transaction actions = 23 queries.

        To re-capture this query list, use a block like this in place
            of the "with self.assertNumQueries..." block::

                from django.conf import settings
                from django.db import connection
                import json

                settings.DEBUG = True
                connection.queries = []
                result = self.import_data(case_data)

                print(json.dumps(connection.queries, indent=4))
                settings.DEBUG = False

        """

        # need a user to exist, so the import can find it.
        user = self.F.UserFactory.create(email="sumbudee@mozilla.com")

        case_data = {
            "cases": [
                {
                    "created_by": "sumbudee@mozilla.com",
                    "name": "Foo",
                    "steps": [{"instruction": "do this"}],
                    },
                {
                    "created_by": "sumbudee@mozilla.com",
                    "name": "Bar",
                    "steps": [{"instruction": "do this"}],
                    }
                ]
            }

        # Test code as normal
        with self.assertNumQueries(23):
            result = self.import_data(case_data)

        cv1 = self.model.CaseVersion.objects.get(name="Foo")
        self.assertEqual(cv1.created_by, user)
        cv2 = self.model.CaseVersion.objects.get(name="Bar")
        self.assertEqual(cv2.created_by, user)
        self.assertEqual(result.num_cases, 2)


    def test_create_caseversion_no_existing_user(self):
        """A caseversion with a user that does not exist in the db."""

        result = self.import_data(
            {
                "cases": [
                    {
                        "created_by": "sumbudee@mozilla.com",
                        "name": "Foo",
                        "steps": [{"instruction": "do this"}],
                        }
                    ]
                }
            )

        cv = self.model.CaseVersion.objects.get()
        self.assertEqual(cv.created_by, None)
        self.assertEqual(result.num_cases, 1)
        self.assertEqual(
            result.warnings[0]["reason"],
            ImportResult.WARN_USER_NOT_FOUND,
            )


    def test_create_caseversion_existing_tag(self):
        """A caseversion that uses an existing product tag"""

        # need a tag to exist, so the import can find it.
        tag = self.model.Tag.objects.create(
            name="FooTag",
            product=self.pv.product,
            )

        result = self.import_data(
                {
                "cases": [
                        {
                        "name": "Foo",
                        "steps": [{"instruction": "do this"}],
                        "tags": ["FooTag"],
                        }
                ]
            }
        )

        cv = self.model.CaseVersion.objects.get()
        self.assertEqual(cv.tags.get(), tag)
        self.assertEqual(result.num_cases, 1)


    def test_create_caseversion_existing_tag_different_case(self):
        """A caseversion that uses an existing product tag with diff case"""

        # need a tag to exist, so the import can find it.
        tag = self.model.Tag.objects.create(
            name="footag",
            product=self.pv.product,
            )

        result = self.import_data(
            {
                "cases": [
                    {
                        "name": "Foo",
                        "steps": [{"instruction": "do this"}],
                        "tags": ["FooTag"],
                        }
                ]
            }
        )

        cv = self.model.CaseVersion.objects.get()
        self.assertEqual(cv.tags.get(), tag)
        self.assertEqual(result.num_cases, 1)


    def test_create_caseversion_existing_suite(self):
        """A case that uses an existing suite."""

        # need a suite to exist, so the import can find it.
        suite = self.model.Suite.objects.create(
            name="FooSuite",
            product=self.pv.product,
            )

        result = self.import_data({
            "cases": [{
                "name": "Foo",
                "steps": [{"instruction": "do this"}],
                "suites": ["FooSuite"],
                }]
            }
        )

        cv = self.model.CaseVersion.objects.get()
        self.assertEqual(cv.case.suites.get(), suite)
        self.assertEqual(result.num_cases, 1)
        self.assertEqual(result.num_suites, 0)


    def test_create_caseversion_existing_suite_different_case(self):
        """A case that uses an existing suite with different case."""

        # need a suite to exist, so the import can find it.
        suite = self.model.Suite.objects.create(
            name="foosuite",
            product=self.pv.product,
            )

        result = self.import_data(
            {
                "cases": [
                    {
                        "name": "Foo",
                        "steps": [{"instruction": "do this"}],
                        "suites": ["FooSuite"],
                        }
                ]
            }
        )

        cv = self.model.CaseVersion.objects.get()
        self.assertEqual(cv.case.suites.get(), suite)
        self.assertEqual(result.num_cases, 1)
        self.assertEqual(result.num_suites, 0)


    def test_case_no_name_skip(self):
        """A case with no name is skipped."""
        result = self.import_data(
            {
                "cases": [
                    {
                        "description": "Foo",
                        }
                    ]
                }
            )

        self.assertFalse(list(self.model.CaseVersion.objects.all()))
        self.assertEqual(result.num_cases, 0)
        self.assertEqual(
            result.warnings[0]["reason"],
            ImportResult.SKIP_CASE_NO_NAME,
            )


    def test_case_name_conflict_skip(self):
        """A case with same name already exists."""
        self.F.CaseVersionFactory.create(productversion=self.pv, name="Foo")

        case_to_import = {
            "cases": [
                {
                    "name": "Foo",
                    }
                ]
            }

        result = self.import_data(case_to_import)

        self.assertEqual(result.num_cases, 0)
        self.assertEqual(
            result.warnings[0]["reason"],
            ImportResult.SKIP_CASE_NAME_CONFLICT,
            )


    def test_no_step_warning(self):
        """A case with no steps emits a warning."""
        result = self.import_data(
            {
                "cases": [
                    {
                        "name": "Foo",
                        }
                    ]
                }
            )

        cv = self.model.CaseVersion.objects.get()
        self.assertEqual(cv.steps.count(), 0)
        self.assertEqual(result.num_cases, 1)
        self.assertEqual(result.warnings[0]["item"], cv)
        self.assertEqual(
            result.warnings[0]["reason"],
            ImportResult.WARN_NO_STEPS,
            )


    def test_steps(self):
        """Steps are created with correct instruction and expected values."""

        new_steps = [
            {
                "instruction": "instr1",
                "expected": "exp1"
            },
            {
                "instruction": "instr2",
                "expected": "exp2"
            },
            {
                "instruction": "instr3",
                "expected": "exp3"
            },
        ]

        self.import_data(
            {
                "cases": [
                    {
                        "name": "Foo",
                        "steps": new_steps,
                        }
                    ]
                }
            )

        cv = self.model.CaseVersion.objects.get()

        self.assertEqual(
            [(s.number, s.instruction, s.expected) for s in cv.steps.order_by(
                "number")],
            [(i + 1, s["instruction"], s["expected"]) for i, s in enumerate(
                new_steps)],
            )


    def test_create_suite(self):
        """Successful import creates a suite with expected values."""
        self.import_data(
            {
                "suites": [
                    {
                        "name": "Foo",
                        "description": "indescribable"
                        }
                    ]
                }
            )

        s = self.model.Suite.objects.get()
        self.assertEqual(s.description, "indescribable")
        self.assertEqual(s.name, "Foo")


    def test_suite_no_name_skip(self):
        """A suite with no name is skipped."""
        result = self.import_data(
            {
                "suites": [
                    {
                        "description": "Foo",
                        }
                    ]
                }
            )

        self.assertFalse(self.model.Suite.objects.count(), 0)
        self.assertEqual(result.num_suites, 0)
        self.assertEqual(
            result.warnings[0]["reason"],
            ImportResult.SKIP_SUITE_NO_NAME,
            )


    def test_result_object(self):
        """Successful import returns a result summary object."""
        result = self.import_data(
            {
                "cases": [
                    {
                        "name": "Foo",
                        "steps": [{"instruction": "do this"}]
                        }
                    ]
                }
            )

        result_list = result.get_as_list()
        self.assertTrue("Imported 1 cases" in result_list)
        self.assertTrue("Imported 0 suites" in result_list)



class ImporterTransactionTest(ImporterTestBase, case.TransactionTestCase):
    """Tests for ``Importer`` transactional behavior."""

    @patch.object(SuiteImporter, 'import_suites')
    def test_unknown_exception_rollback(self, new_import_suites):
        """
        An unknown exception is thrown by the import_suites method of
        SuiteImporter, so the entire transaction is rolled back and no
        cases are imported.
        """

        case_suite_data = {
            "suites": [
                    {
                    "name": "FooSuite",
                    "description": "indescribable"
                }
            ],
            "cases": [
                    {
                    "name": "FooCase",
                    "steps": [{"instruction": "do this"}]
                },
                    {
                    "name": "BarCase",
                    "steps": [{"instruction": "do this"}]
                }
            ]
        }

        class SurpriseException(RuntimeError):
            pass

        def raise_exception():
            raise SurpriseException("Surprise!")

        new_import_suites.side_effect = raise_exception

        with self.assertRaises(SurpriseException):
            self.import_data(case_suite_data)

        self.assertEqual(self.model.Case.objects.count(), 0)
        self.assertEqual(self.model.CaseVersion.objects.count(), 0)


    # @@@ This test won't work till we upgrade to Django 1.4
    def test_step_no_instruction_skip(self):
        """Skip import on case with step and no instruction."""
        result = self.import_data(
            {
                "cases": [
                    {
                        "name": "Foo",
                        "steps": [{"expected": "did this"}]
                        }
                    ]
                }
            )

        # @@@ The savepoint-rollback won't work until Django 1.4.
        # cv = self.model.CaseVersion.objects.all()
        # self.assertFalse(list(cv))
        # self.assertEqual(result.num_cases, 0)
        self.assertEqual(
            result.warnings[0]["reason"],
            ImportResult.SKIP_STEP_NO_INSTRUCTION,
            )

########NEW FILE########
__FILENAME__ = test_tag
"""
Tests for Tag admin.

"""
from tests import case



class TagAdminTest(case.admin.AdminTestCase):
    app_label = "tags"
    model_name = "tag"


    def test_changelist(self):
        """Tag changelist page loads without error, contains name."""
        self.F.TagFactory.create(name="security")

        self.get(self.changelist_url).mustcontain("security")


    def test_change_page(self):
        """Tag change page loads without error, contains name."""
        p = self.F.TagFactory.create(name="security")

        self.get(self.change_url(p)).mustcontain("security")

########NEW FILE########
__FILENAME__ = test_tags_resource
"""
Tests for TagResource api.

"""

from tests.case.api.crud import ApiCrudCases

import logging
mozlogger = logging.getLogger('moztrap.test')


class TagResourceTest(ApiCrudCases):

    @property
    def factory(self):
        """The model factory for this object."""
        return self.F.TagFactory()


    @property
    def resource_name(self):
        return "tag"


    @property
    def permission(self):
        """String defining the permission required for
        Create, Update, and Delete."""
        return "tags.manage_tags"


    @property
    def new_object_data(self):
        """Generates a dictionary containing the field names and auto-generated
        values needed to create a unique object.

        The output of this method can be sent in the payload parameter of a
        POST message.
        """
        self.product_fixture = self.F.ProductFactory.create()
        fields = {
            u"name": unicode(
                "test_%s_%s" % (self.datetime, self.resource_name)),
            u"description": unicode(
                "test %s %s" % (self.datetime, self.resource_name)),
            u"product": None,
        }
        return fields


    def backend_object(self, id):
        """Returns the object from the backend, so you can query it's values in
        the database for validation.
        """
        return self.model.Tag.everything.get(id=id)


    def backend_data(self, backend_obj):
        """Query's the database for the object's current values. Output is a
        dictionary that should match the result of getting the object's detail
        via the API, and can be used to verify API output.

        Note: both keys and data should be in unicode
        """
        actual = {}
        actual[u"id"] = unicode(str(backend_obj.id))
        actual[u"name"] = unicode(backend_obj.name)
        actual[u"description"] = unicode(backend_obj.description)
        actual[u"resource_uri"] = unicode(
            self.get_detail_url(self.resource_name, str(backend_obj.id)))
        if backend_obj.product:
            actual[u"product"] = unicode(
                self.get_detail_url("product", str(backend_obj.product.id)))
        else:
            actual[u"product"] = None

        return actual


    # additional test cases, if any

    # create cases
    # test_create handles creating a global tag

    def test_create_tag_with_product(self):
        """Create a product-specific tag."""
        mozlogger.info('test_create_tag_with_product')

        # get data for creation
        fields = self.new_object_data
        fields['product'] = unicode(
            self.get_detail_url("product", str(self.product_fixture.id)))

        # do the create
        res = self.post(
            self.get_list_url(self.resource_name),
            params=self.credentials,
            payload=fields,
            )

        # make sure response included detail uri
        object_id = self._id_from_uri(res.headers["location"])
        self.assertIsNotNone(object_id)

        # get data from backend
        backend_obj = self.backend_object(object_id)
        created_object_data = self.clean_backend_data(backend_obj)

        # compare backend data to desired data
        self.maxDiff = None
        self.assertEqual(created_object_data, fields)

    # edit cases

    @property
    def _invalid_product_msg(self):
        return str("Tag's Product may not be changed unless the tag is not " +
               "in use, the product is being set to None, or the product " +
               "matches the existing cases.")


    def test_edit_no_product(self):
        """Test that edit works even without the product."""
        mozlogger.info('test_edit_no_product')

        # create fixture
        fixture1 = self.factory
        backend_obj = self.backend_object(fixture1.id)
        obj_id = str(fixture1.id)
        fields = self.new_object_data
        product = fields.pop(u'product')

        # do put
        res = self.put(
            self.get_detail_url(self.resource_name, obj_id),
            params=self.credentials,
            data=fields
            )

        # make sure object has been updated in the database
        fields[u'product'] = product
        fixture1 = self.refresh(fixture1)
        backend_data = self.clean_backend_data(fixture1)

        self.maxDiff = None
        self.assertEqual(fields, backend_data)


    def test_edit_global_tag_in_use_change_description(self):
        """Editing the description on a global tag should not un-set it's cases."""
        mozlogger.info('test_edit_global_tag_in_use_change_description')

        # create fixtures
        tag1 = self.factory

        tc1 = self.F.CaseVersionFactory()
        tc1.tags = [tag1]
        tc2 = self.F.CaseVersionFactory()
        tc2.tags = [tag1]
        tc3 = self.F.CaseVersionFactory()

        tag1 = self.refresh(tag1)
        self.assertEqual(len(tag1.caseversions.all()), 2)

        # generate new values
        fields = self.backend_data(tag1)
        fields[u'description'] = 'an updated description'

        # do put
        res = self.put(
            self.get_detail_url(self.resource_name, str(tag1.id)),
            params=self.credentials,
            data=fields,
            )

        # make sure object has been updated in the database
        tag1 = self.refresh(tag1)

        self.maxDiff = None
        backend_data = self.backend_data(tag1)
        self.assertEqual(fields, backend_data)

        # make sure test cases still have their tags
        self.assertEqual(len(tag1.caseversions.all()), 2)
        self.assertTrue(tc1 in tag1.caseversions.all())
        self.assertTrue(tc2 in tag1.caseversions.all())


    def test_edit_global_tag_in_use_change_product_error(self):
        """If a global tag is in-use by cases of multiple products, it's product field should be read-only."""
        mozlogger.info('test_edit_global_tag_in_use_change_product_error')

        # create fixtures
        tag1 = self.factory

        tc1 = self.F.CaseVersionFactory()
        tc1.tags = [tag1]
        tc2 = self.F.CaseVersionFactory()
        tc2.tags = [tag1]
        tc3 = self.F.CaseVersionFactory()

        tag1 = self.refresh(tag1)
        self.assertEqual(len(tag1.caseversions.all()), 2)

        # generate new values
        fields = self.backend_data(tag1)
        product1 = self.F.ProductFactory()
        fields[u'product'] = unicode(
            self.get_detail_url("product", str(product1.id)))

        # do put
        res = self.put(
            self.get_detail_url(self.resource_name, str(tag1.id)),
            params=self.credentials,
            data=fields,
            status=400,
            )

        self.assertEqual(res.text, self._invalid_product_msg)


    def test_edit_global_tag_in_use_change_product_matches_caseversion(self):
        """If a global tag is in use by cases all having the same product, the product field may be changed to match."""
        mozlogger.info(
            'test_edit_global_tag_in_use_change_product_matches_caseversion')

        # create fixtures
        tag1 = self.factory

        tc1 = self.F.CaseVersionFactory()
        tc1.tags = [tag1]
        tc2 = self.F.CaseVersionFactory()
        tc2.productversion = tc1.productversion  # make it be same product
        tc2.save()
        tc2.tags = [tag1]

        tag1 = self.refresh(tag1)
        self.assertEqual(len(tag1.caseversions.all()), 2)

        # generate new values
        fields = self.backend_data(tag1)
        fields[u'product'] = unicode(
            self.get_detail_url("product", str(tc1.productversion.product.id)))

        # do put
        res = self.put(
            self.get_detail_url(self.resource_name, str(tag1.id)),
            params=self.credentials,
            data=fields,
            )

        # make sure object has been updated in the database
        tag1 = self.refresh(tag1)

        self.maxDiff = None
        backend_data = self.backend_data(tag1)
        self.assertEqual(fields, backend_data)

        # make sure test cases still have their tags
        self.assertEqual(len(tag1.caseversions.all()), 2)
        self.assertTrue(tc1 in tag1.caseversions.all())
        self.assertTrue(tc2 in tag1.caseversions.all())


    def test_edit_global_tag_not_in_use_change_product(self):
        """If a global tag is not in-use by any caseversions, the product field should be editable."""
        mozlogger.info('test_edit_global_tag_not_in_use_change_product')

        # create fixtures
        tag1 = self.factory
        self.assertEqual(len(tag1.caseversions.all()), 0)

        # generate new values
        fields = self.backend_data(tag1)
        product1 = self.F.ProductFactory()
        fields[u'product'] = unicode(
            self.get_detail_url("product", str(product1.id)))

        # do put
        res = self.put(
            self.get_detail_url(self.resource_name, str(tag1.id)),
            params=self.credentials,
            data=fields,
            )

        # make sure object has been updated in the database
        tag1 = self.refresh(tag1)

        self.maxDiff = None
        backend_data = self.backend_data(tag1)
        self.assertEqual(fields, backend_data)


    def test_edit_product_tag_in_use_change_product_error(self):
        """If a product-specific tag is in use, trying to change it's product should error."""
        mozlogger.info('test_edit_product_tag_in_use_change_product_error')

        # create fixtures
        tag1 = self.factory
        tc1 = self.F.CaseVersionFactory()
        tag1.product = tc1.productversion.product  # make tag product-specific
        tc1.tags = [tag1]  # use the tag

        self.assertEqual(len(tag1.caseversions.all()), 1)

        # generate new values
        fields = self.backend_data(tag1)
        product1 = self.F.ProductFactory()
        fields[u'product'] = unicode(
            self.get_detail_url("product", str(product1.id)))

        # do put
        res = self.put(
            self.get_detail_url(self.resource_name, str(tag1.id)),
            params=self.credentials,
            data=fields,
            status=400,
            )

        self.assertEqual(res.text, self._invalid_product_msg)


    def test_edit_product_tag_in_use_remove_product(self):
        """If a product-specific tag is in use and you reset the product to None. caseversions should stay tagged."""
        mozlogger.info("test_edit_product_tag_in_use_remove_product")

        # create fixtures
        tag1 = self.factory
        tc1 = self.F.CaseVersionFactory()
        tag1.product = tc1.productversion.product  # make tag product-specific
        tag1.save()
        tc1.tags = [tag1]  # use the tag

        self.assertEqual(len(tag1.caseversions.all()), 1)

        # generate new values
        fields = self.backend_data(tag1)
        fields[u'product'] = None

        # do put
        res = self.put(
            self.get_detail_url(self.resource_name, str(tag1.id)),
            params=self.credentials,
            data=fields,
            )

        # make sure object has been updated in the database
        tag1 = self.refresh(tag1)

        self.maxDiff = None
        backend_data = self.backend_data(tag1)
        self.assertEqual(fields, backend_data)

        # make sure caseversions are still tagged
        self.assertEqual(len(tag1.caseversions.all()), 1)

    # filtering

    def test_filter_by_name(self):
        """Filter tags by name."""
        mozlogger.info("test_filter_by_name")

        # create fixtures
        tag1 = self.factory
        tag2 = self.factory
        tag2.name = u'unique name'
        tag2.save()

        # do test
        self._test_filter_list_by(u'name', u'unique name', 1)


    def test_filter_by_product(self):
        """Filter tags by product."""
        mozlogger.info("test_filter_by_product")

        # create fixtures
        product1 = self.F.ProductFactory()
        tag1 = self.factory
        tag1.product = product1
        tag1.save()
        tag2 = self.factory
        tag2.product = product1
        tag2.save()
        tag3 = self.factory

        # do test
        self._test_filter_list_by(u'product', str(product1.id), 2)
        self._test_filter_list_by(u'product', None, 1)

########NEW FILE########
__FILENAME__ = test_tag
"""
Tests for Tag model.

"""
from tests import case



class TagTest(case.DBTestCase):
    def test_unicode(self):
        """Unicode representation is name of Tag"""
        t = self.F.TagFactory(name="security")

        self.assertEqual(unicode(t), u"security")


    def test_clone(self):
        """Cloning sets 'cloned: ' prefix on name."""
        t = self.F.TagFactory(name="foo")

        new = t.clone()

        self.assertEqual(new.name, "Cloned: foo")

########NEW FILE########
__FILENAME__ = test_mtadmin
"""
Tests for MT base admin forms.

"""
from django.core.urlresolvers import reverse

from django.contrib.admin.sites import AdminSite

from tests import case



class MTAdminSiteTest(case.view.ViewTestCase):
    """Tests of MTAdminSite"""
    @property
    def url(self):
        return reverse("admin:index")


    def test_login_redirect(self):
        """No-user redirects to front-end login page with ?next parameter."""
        res = self.get()

        self.assertRedirects(res, "/users/login/?next=/admin/")


    def test_login_redirect_message(self):
        """Non-admin user redirects to login with message."""
        res = self.get(user=self.F.UserFactory.create())

        self.assertRedirects(res, "/users/login/?next=/admin/")
        res.follow().mustcontain("have permission")


    def test_logout_doesnt(self):
        """
        Admin 'logout' view just redirects to home.

        The default version exposes us to logout CSRF. We remove the admin
        logout link to, but we still need to neuter the actual view since
        removing it from the url patterns is a pain.

        """
        from django.contrib.auth.signals import user_logged_out

        def handler(*args, **kwargs):
            self.fail("User logged out, should not have been.")
        user_logged_out.connect(handler, weak=True)

        user = self.F.UserFactory.create(is_staff=True)

        res = self.app.get(reverse("admin:logout"), user=user)

        self.assertRedirects(res, "/")



class TeamModelAdminTest(case.DBTestCase):
    """Tests of TeamModelAdmin."""
    @property
    def admin(self):
        """The model admin class under test."""
        from moztrap.model.mtadmin import TeamModelAdmin
        return TeamModelAdmin


    def test_fieldsets(self):
        """Sans declared fieldsets, puts team fields into Team fieldset."""
        ma = self.admin(self.model.ProductVersion, AdminSite())

        fs = ma.get_fieldsets(None, None)

        self.assertEqual(len(fs), 4)

        default, team, deletion, meta = fs

        self.assertNotIn("has_team", default[1]["fields"])
        self.assertNotIn("own_team", default[1]["fields"])
        self.assertEqual(team[0], "Team")
        self.assertEqual(team[1]["fields"], [("has_team", "own_team")])

########NEW FILE########
__FILENAME__ = test_mtmodel
"""
Tests for ``MTModel`` and related classes.

These tests use the ``Product`` model (and ``Suite`` for cascade-delete tests),
as its a simple model inherited from ``MTModel``, and this avoids the need for
a test-only model.

"""
import datetime

from mock import patch

from tests import case



class MTModelTestCase(case.DBTestCase):
    """Common base class for MTModel tests."""
    def setUp(self):
        """Creates ``self.user`` for use by all tests."""
        self.user = self.F.UserFactory.create()



class UserDeleteTest(MTModelTestCase):
    """Tests for deleting users, and the effect on MTModels."""
    def test_delete_created_by_sets_null(self):
        """Deleting the created_by user sets created_by to None."""
        u = self.F.UserFactory()
        p = self.F.ProductFactory(user=u)

        u.delete()

        self.assertEqual(self.refresh(p).created_by, None)


    def test_delete_modified_by_sets_null(self):
        """Deleting the modified_by user sets modified_by to None."""
        p = self.F.ProductFactory()
        u = self.F.UserFactory()
        p.save(user=u)

        u.delete()

        self.assertEqual(self.refresh(p).modified_by, None)


    def test_delete_deleted_by_sets_null(self):
        """Deleting the deleted_by user sets deleted_by to None."""
        p = self.F.ProductFactory()
        u = self.F.UserFactory()
        p.delete(user=u)

        u.delete()

        self.assertEqual(self.refresh(p).deleted_by, None)



class MTModelMockNowTestCase(MTModelTestCase):
    """Base class for MTModel tests that need "now" mocked."""
    def setUp(self):
        """Mocks datetime.utcnow() with datetime in self.utcnow."""
        super(MTModelMockNowTestCase, self).setUp()

        self.utcnow = datetime.datetime(2011, 12, 13, 22, 39)
        patcher = patch("moztrap.model.mtmodel.datetime")
        self.mock_utcnow = patcher.start().datetime.utcnow
        self.mock_utcnow.return_value = self.utcnow
        self.addCleanup(patcher.stop)



class CreateTest(MTModelMockNowTestCase):
    """Tests for (created/modified)_(on/by) when using Model.objects.create."""
    def test_created_by_none(self):
        """If ``user`` is not given to create(), created_by is None."""
        p = self.model.Product.objects.create(name="Foo")

        self.assertEqual(p.created_by, None)


    def test_created_by(self):
        """If ``user`` is given to create(), created_by is set."""
        p = self.model.Product.objects.create(name="Foo", user=self.user)

        self.assertEqual(p.created_by, self.user)


    def test_new_modified_by_none(self):
        """If ``user`` is not given to create(), modified_by is None."""
        p = self.model.Product.objects.create(name="Foo")

        self.assertEqual(p.modified_by, None)


    def test_new_modified_by(self):
        """If ``user`` is given to create(), modified_by is set."""
        p = self.model.Product.objects.create(name="Foo", user=self.user)

        self.assertEqual(p.modified_by, self.user)


    def test_created_on(self):
        """create() method sets created_on."""
        p = self.model.Product.objects.create(name="Foo")

        self.assertEqual(p.created_on, self.utcnow)


    def test_new_modified_on(self):
        """create() method sets modified_on."""
        p = self.model.Product.objects.create(name="Foo")

        self.assertEqual(p.modified_on, self.utcnow)



class SaveTest(MTModelMockNowTestCase):
    """Tests for (created/modified)_(on/by) when using instance.save."""
    def test_created_by_none(self):
        """If ``user`` is not given to new obj save(), created_by is None."""
        p = self.model.Product(name="Foo")
        p.save()

        self.assertEqual(p.created_by, None)


    def test_created_by(self):
        """If ``user`` is given to new obj save(), created_by is set."""
        p = self.model.Product(name="Foo")
        p.save(user=self.user)

        self.assertEqual(p.created_by, self.user)


    def test_new_modified_by_none(self):
        """If ``user`` is not given to new obj save(), modified_by is None."""
        p = self.model.Product(name="Foo")
        p.save()

        self.assertEqual(p.modified_by, None)


    def test_new_modified_by(self):
        """If ``user`` is given to new obj save(), modified_by is set."""
        p = self.model.Product(name="Foo")
        p.save(user=self.user)

        self.assertEqual(p.modified_by, self.user)


    def test_created_on(self):
        """save() method sets created_on."""
        p = self.model.Product(name="Foo")
        p.save()

        self.assertEqual(p.created_on, self.utcnow)


    def test_new_modified_on(self):
        """save() method sets modified_on for new object."""
        p = self.model.Product(name="Foo")
        p.save()

        self.assertEqual(p.modified_on, self.utcnow)


    def test_modified_by_none(self):
        """If ``user`` is not given to save(), modified_by is set to None."""
        p = self.model.Product.objects.create(name="Foo", user=self.user)
        p.save()

        self.assertEqual(p.modified_by, None)


    def test_modified_by(self):
        """If ``user`` is given to save(), modified_by is set."""
        p = self.model.Product.objects.create(name="Foo")
        p.save(user=self.user)

        self.assertEqual(p.modified_by, self.user)


    def test_modified_on(self):
        """save() method sets modified_on for existing object."""
        p = self.model.Product.objects.create(name="Foo")
        new_now = datetime.datetime(2012, 1, 1, 12, 0)
        self.mock_utcnow.return_value = new_now
        p.save()

        self.assertEqual(p.modified_on, new_now)


    def test_notrack_modified_on(self):
        """If notrack=True, doesn't update modified_on."""
        self.mock_utcnow.return_value = datetime.datetime(2012, 1, 1)
        p = self.model.Product.objects.create(name="Foo")

        self.mock_utcnow.return_value = datetime.datetime(2012, 1, 2)
        p.save(notrack=True)

        self.assertEqual(
            self.refresh(p).modified_on, datetime.datetime(2012, 1, 1))


    def test_notrack_modified_by(self):
        """If notrack=True, doesn't update modified_by."""
        p = self.model.Product.objects.create(name="Foo", user=self.user)

        p.save(notrack=True)

        self.assertEqual(self.refresh(p).modified_by, self.user)



class UpdateTest(MTModelMockNowTestCase):
    """Tests for modified_(by/on) when using queryset.update."""
    def test_modified_by_none(self):
        """queryset update() sets modified_by to None if not given user."""
        p = self.model.Product.objects.create(name="Foo", user=self.user)

        self.model.Product.objects.update(name="Bar")

        self.assertEqual(self.refresh(p).modified_by, None)


    def test_modified_by(self):
        """queryset update() sets modified_by if given user."""
        p = self.model.Product.objects.create(name="Foo")

        self.model.Product.objects.update(name="Bar", user=self.user)

        self.assertEqual(self.refresh(p).modified_by, self.user)


    def test_modified_on(self):
        """queryset update() sets modified_on."""
        p = self.model.Product.objects.create(name="Foo")
        new_now = datetime.datetime(2012, 1, 1, 12, 0)
        self.mock_utcnow.return_value = new_now

        self.model.Product.objects.update(name="Bar")

        self.assertEqual(self.refresh(p).modified_on, new_now)


    def test_notrack_modified_on(self):
        """If notrack=True, doesn't update modified_on."""
        self.mock_utcnow.return_value = datetime.datetime(2012, 1, 1)
        p = self.model.Product.objects.create(name="Foo")

        self.mock_utcnow.return_value = datetime.datetime(2012, 1, 2)
        self.model.Product.objects.update(name="bar", notrack=True)

        self.assertEqual(self.refresh(p).modified_on, datetime.datetime(2012, 1, 1))


    def test_notrack_modified_by(self):
        """If notrack=True, doesn't update modified_by."""
        p = self.model.Product.objects.create(name="Foo", user=self.user)

        self.model.Product.objects.update(name="bar", notrack=True)

        self.assertEqual(self.refresh(p).modified_by, self.user)



class DeleteTest(MTModelMockNowTestCase):
    """Tests for deleted_(by/on) when using instance.delete or qs.delete."""
    def test_queryset_deleted_by_none(self):
        """queryset delete() sets deleted_by to None if not given user."""
        p = self.F.ProductFactory.create()

        self.model.Product.objects.all().delete()

        self.assertEqual(self.refresh(p).deleted_by, None)


    def test_queryset_deleted_by(self):
        """queryset delete() sets deleted_by if given user."""
        p = self.F.ProductFactory.create()

        self.model.Product.objects.all().delete(user=self.user)

        self.assertEqual(self.refresh(p).deleted_by, self.user)


    def test_queryset_deleted_on(self):
        """queryset delete() sets deleted_on."""
        p = self.F.ProductFactory.create()

        self.model.Product.objects.all().delete()

        self.assertEqual(self.refresh(p).deleted_on, self.utcnow)


    def test_deleted_by_none(self):
        """delete() sets deleted_by to None if not given user."""
        p = self.F.ProductFactory.create()

        p.delete()

        self.assertEqual(self.refresh(p).deleted_by, None)


    def test_deleted_by(self):
        """delete() sets deleted_by if given user."""
        p = self.F.ProductFactory.create()

        p.delete(user=self.user)

        self.assertEqual(self.refresh(p).deleted_by, self.user)


    def test_deleted_on(self):
        """delete() sets deleted_on."""
        p = self.F.ProductFactory.create()

        p.delete()

        self.assertEqual(self.refresh(p).deleted_on, self.utcnow)



class HardDeleteTest(case.DBTestCase):
    """Tests for deletion with permanent=True."""
    def test_instance(self):
        """Can hard-delete an instance with permanent=True."""
        p = self.F.ProductFactory.create()

        p.delete(permanent=True)

        self.assertEqual(self.model.Product._base_manager.count(), 0)


    def test_queryset(self):
        """Can hard-delete a queryset with permanent=True."""
        self.F.ProductFactory.create()

        self.model.Product.objects.all().delete(permanent=True)

        self.assertEqual(self.model.Product._base_manager.count(), 0)



class CascadeDeleteTest(MTModelTestCase):
    """Tests for cascading soft-delete."""
    def test_queryset_deleted_by_none(self):
        """queryset delete() sets deleted_by None if no user on cascade."""
        p = self.F.ProductFactory.create()
        s = self.F.SuiteFactory.create(product=p)

        self.model.Product.objects.all().delete()

        self.assertEqual(self.refresh(s).deleted_by, None)


    def test_queryset_deleted_by(self):
        """queryset delete() sets deleted_by to given user on cascade."""
        p = self.F.ProductFactory.create()
        s = self.F.SuiteFactory.create(product=p)

        self.model.Product.objects.all().delete(user=self.user)

        self.assertEqual(self.refresh(s).deleted_by, self.user)


    def test_queryset_deleted_on(self):
        """qs delete() sets deleted_on to same time as parent on cascade."""
        p = self.F.ProductFactory.create()
        s = self.F.SuiteFactory.create(product=p)

        self.model.Product.objects.all().delete()

        p = self.refresh(p)
        s = self.refresh(s)
        self.assertIsNot(p.deleted_on, None)

        self.assertEqual(s.deleted_on, p.deleted_on)


    def test_deleted_by_none(self):
        """delete() sets deleted_by None if no user on cascade."""
        p = self.F.ProductFactory.create()
        s = self.F.SuiteFactory.create(product=p)

        p.delete()

        self.assertEqual(self.refresh(s).deleted_by, None)


    def test_deleted_by(self):
        """delete() sets deleted_by to given user on cascade."""
        p = self.F.ProductFactory.create()
        s = self.F.SuiteFactory.create(product=p)

        p.delete(user=self.user)

        self.assertEqual(self.refresh(s).deleted_by, self.user)


    def test_deleted_on(self):
        """delete() sets deleted_on to same time as parent on cascade."""
        p = self.F.ProductFactory.create()
        s = self.F.SuiteFactory.create(product=p)

        p.delete()

        p = self.refresh(p)
        s = self.refresh(s)
        self.assertIsNot(p.deleted_on, None)

        self.assertEqual(s.deleted_on, p.deleted_on)


    def test_no_cascade_redelete(self):
        """cascade delete won't update deleted-on for previously deleted."""
        p = self.F.ProductFactory.create()
        s = self.F.SuiteFactory.create(product=p)
        # need to patch utcnow because MySQL doesn't give us better than
        # one-second resolution on datetimes.
        with patch("moztrap.model.mtmodel.datetime") as mock_dt:
            mock_dt.datetime.utcnow.return_value = datetime.datetime(
                2011, 12, 13, 10, 23, 58)
            s.delete()
            # ... a day later...
            mock_dt.datetime.utcnow.return_value = datetime.datetime(
                2011, 12, 14, 9, 18, 22)
            p.delete()

        self.assertNotEqual(
            self.refresh(s).deleted_on, self.refresh(p).deleted_on)



class UndeleteMixin(object):
    """Utility assertions mixin for undelete tests."""
    def assertNotDeleted(self, obj):
        self.assertEqual(obj.deleted_on, None)
        self.assertEqual(obj.deleted_by, None)



class UndeleteTest(UndeleteMixin, MTModelTestCase):
    """Tests for undelete using instance.undelete or qs.undelete."""
    def test_instance(self):
        """instance.undelete() undeletes an instance."""
        p = self.F.ProductFactory.create()
        p.delete()

        p.undelete()

        self.assertNotDeleted(p)


    def test_queryset(self):
        """qs.undelete() undeletes all objects in the queryset."""
        p = self.F.ProductFactory.create()
        p.delete()

        self.model.Product.everything.all().undelete()

        self.assertNotDeleted(self.refresh(p))



class CascadeUndeleteTest(UndeleteMixin, MTModelTestCase):
    """Tests for cascading undelete."""
    def test_instance(self):
        """Undeleting an instance also undeletes cascade-deleted dependents."""
        p = self.F.ProductFactory.create()
        s = self.F.SuiteFactory.create(product=p)
        p.delete()
        p = self.refresh(p)

        p.undelete()

        self.assertNotDeleted(self.refresh(s))


    def test_queryset(self):
        """Undeleting a queryset also undeletes cascade-deleted dependents."""
        p = self.F.ProductFactory.create()
        s = self.F.SuiteFactory.create(product=p)
        p.delete()

        self.model.Product.everything.all().undelete()

        self.assertNotDeleted(self.refresh(s))


    def test_cascade_limited(self):
        """Undelete only cascades to objs cascade-deleted with that object."""
        p = self.F.ProductFactory.create()
        s = self.F.SuiteFactory.create(product=p)
        # need to patch utcnow because MySQL doesn't give us better than
        # one-second resolution on datetimes.
        with patch("moztrap.model.mtmodel.datetime") as mock_dt:
            mock_dt.datetime.utcnow.return_value = datetime.datetime(
                2011, 12, 13, 10, 23, 58)
            s.delete()
            # ... a day later ...
            mock_dt.datetime.utcnow.return_value = datetime.datetime(
                2011, 12, 14, 9, 18, 22)
            p.delete()

        self.refresh(p).undelete()

        self.assertIsNot(self.refresh(s).deleted_on, None)



class CloneTest(UndeleteMixin, MTModelTestCase):
    """Tests for cloning."""
    def test_cascade_non_m2m_or_reverse_fk(self):
        """Cascade-cloning an attr that isn't M2M or rev FK raises an error."""
        p = self.F.ProductFactory.create()
        with self.assertRaises(ValueError):
            p.clone(cascade=["name"])


    @patch("moztrap.model.mtmodel.datetime")
    def test_updates_created_on(self, mock_dt):
        """Cloned objects get a new created-on timestamp."""
        mock_dt.datetime.utcnow.return_value = datetime.datetime(
            2012, 1, 30)
        p = self.F.ProductFactory.create()

        cloned_on = datetime.datetime(2012, 1, 31)
        mock_dt.datetime.utcnow.return_value = cloned_on
        new = p.clone()

        self.assertEqual(new.created_on, cloned_on)


    def test_updates_created_by(self):
        """Cloned objects get a new created-by; the cloning user."""
        u1 = self.F.UserFactory.create()
        p = self.F.ProductFactory.create(user=u1)

        u2 = self.F.UserFactory.create()
        new = p.clone(user=u2)

        self.assertEqual(new.created_by, u2)


    @patch("moztrap.model.mtmodel.datetime")
    def test_updates_modified_on(self, mock_dt):
        """Cloned objects get a new modified-on timestamp."""
        mock_dt.datetime.utcnow.return_value = datetime.datetime(
            2012, 1, 30)
        p = self.F.ProductFactory.create()

        cloned_on = datetime.datetime(2012, 1, 31)
        mock_dt.datetime.utcnow.return_value = cloned_on
        new = p.clone()

        self.assertEqual(new.modified_on, cloned_on)


    def test_updates_modified_by(self):
        """Cloned objects get a new modified-by; the cloning user."""
        u1 = self.F.UserFactory.create()
        p = self.F.ProductFactory.create(user=u1)

        u2 = self.F.UserFactory.create()
        new = p.clone(user=u2)

        self.assertEqual(new.modified_by, u2)



class MTManagerTest(MTModelTestCase):
    """Tests for MTManager."""
    def test_objects_doesnt_include_deleted(self):
        """``objects`` manager doesn't include deleted objects."""
        p1 = self.F.ProductFactory.create()
        p2 = self.F.ProductFactory.create()
        p2.delete()

        self.assertEqual(set(self.model.Product.objects.all()), set([p1]))


    def test_everything_does_include_deleted(self):
        """``everything`` manager does include deleted objects."""
        p1 = self.F.ProductFactory.create()
        p2 = self.F.ProductFactory.create()
        p2.delete()

        self.assertEqual(
            set(self.model.Product.everything.all()), set([p1, p2]))


    def test_everything_is_default_manager(self):
        """``everything`` manager is the default manager."""
        self.assertIs(
            self.model.Product._default_manager, self.model.Product.everything)


    def test_related_managers_dont_include_deleted(self):
        """Related managers don't include deleted objects."""
        pv1 = self.F.ProductVersionFactory.create(version="2.0")
        pv2 = self.F.ProductVersionFactory.create(product=pv1.product)
        pv2.delete()

        self.assertEqual(set(pv1.product.versions.all()), set([pv1]))



class TeamModelTest(case.DBTestCase):
    """Tests for TeamModel base class."""
    @property
    def TeamModel(self):
        from moztrap.model.mtmodel import TeamModel
        return TeamModel


    def test_parent(self):
        """parent property is None in base class."""
        t = self.TeamModel()
        self.assertIsNone(t.parent)



class DraftStatusModelTest(case.DBTestCase):
    """
    Tests for DraftStatusModel base class.

    The tests use Run, a DraftStatusModel subclass, to avoid the need for a
    test-only model.

    """
    def test_activate(self):
        """Test the activate method."""
        r = self.F.RunFactory.create(status="draft")

        r.activate()

        self.assertEqual(self.refresh(r).status, "active")


    def test_draft(self):
        """Test the draft method."""
        r = self.F.RunFactory.create(status="active")

        r.draft()

        self.assertEqual(self.refresh(r).status, "draft")


    def test_deactivate(self):
        """Test the deactivate method."""
        r = self.F.RunFactory.create(status="active")

        r.deactivate()

        self.assertEqual(self.refresh(r).status, "disabled")


    def test_activate_by_user(self):
        """Test the activate method with a user."""
        r = self.F.RunFactory.create(status="draft")
        u = self.F.UserFactory.create()

        r.activate(user=u)

        self.assertEqual(self.refresh(r).modified_by, u)


    def test_draft_by_user(self):
        """Test the draft method with a user."""
        r = self.F.RunFactory.create(status="active")
        u = self.F.UserFactory.create()

        r.draft(user=u)

        self.assertEqual(self.refresh(r).modified_by, u)


    def test_deactivate_by_user(self):
        """Test the deactivate method with a user."""
        r = self.F.RunFactory.create(status="active")
        u = self.F.UserFactory.create()

        r.deactivate(user=u)

        self.assertEqual(self.refresh(r).modified_by, u)



class NotDeletedCountTest(case.DBTestCase):
    """Tests for NotDeletedCount aggregate."""
    @property
    def NotDeletedCount(self):
        """The aggregate class under test."""
        from moztrap.model.mtmodel import NotDeletedCount
        return NotDeletedCount


    def test_counts_not_deleted(self):
        """Counts only not-deleted related objects."""
        pv = self.F.ProductVersionFactory.create()
        self.F.ProductVersionFactory.create(product=pv.product)
        pv.delete()

        p = self.model.Product.objects.annotate(
            num_versions=self.NotDeletedCount("versions")).get()

        self.assertEqual(p.num_versions, 1)


    def test_aggregate_annotation(self):
        """
        Works when aggregating over an annotation.

        This is a bit of an artificially-constructed test in order to cover a
        certain edge case in the aggregation code.

        """
        from django.db.models import Count

        pv1 = self.F.ProductVersionFactory.create()
        self.F.ProductVersionFactory.create()
        pv1.product.delete()

        # In this case we are intentionally selecting all products, and
        # counting all versions (even deleted ones) in the initial num_versions
        # annotation. What we want to test is that the final aggregation counts
        # only not-deleted products.
        res = self.model.Product.everything.annotate(
            num_versions=Count("versions")).aggregate(
            products_with_versions=self.NotDeletedCount("num_versions"))

        self.assertEqual(res, {"products_with_versions": 1})



class OptimisticLockingTest(case.DBTestCase):
    """Test optimistic locking to avoid silent overwrite on concurrent edits."""
    def test_concurrency_error(self):
        """Save raises ConcurrencyError if version does not match the DB."""
        p = self.F.ProductFactory()

        p2 = self.model.Product.objects.get()
        p2.name = "Name One"
        p2.save()

        p.name = "Name Two"

        with self.assertRaises(self.model.ConcurrencyError):
            p.save()


    def test_queryset_update_increments_version(self):
        """Update via queryset increments version in database, not just save."""
        p = self.F.ProductFactory()

        self.model.Product.objects.update(name="Name One")

        p.name = "Name Two"

        with self.assertRaises(self.model.ConcurrencyError):
            p.save()

########NEW FILE########
__FILENAME__ = runner
from django.conf import settings
from django.test import TestCase, TransactionTestCase
from django.test.simple import DjangoTestSuiteRunner, reorder_suite
from django.utils.importlib import import_module
from django.utils.unittest.loader import defaultTestLoader



class DiscoveryDjangoTestSuiteRunner(DjangoTestSuiteRunner):
    def build_suite(self, test_labels, extra_tests=None, **kwargs):
        suite = None
        discovery_root = settings.TEST_DISCOVERY_ROOT
        if test_labels:
            suite = defaultTestLoader.loadTestsFromNames(test_labels)
            # if single named module has no tests, do discovery within it
            if not suite.countTestCases() and len(test_labels) == 1:
                suite = None
                discovery_root = import_module(test_labels[0]).__path__[0]

        if suite is None:
            suite = defaultTestLoader.discover(
                discovery_root,
                top_level_dir=settings.BASE_PATH,
                )

        if extra_tests:
            for test in extra_tests:
                suite.addTest(test)

        return reorder_suite(suite, (
            TestCase,
            TransactionTestCase,
            ))

########NEW FILE########
__FILENAME__ = settings
"""
Settings for tests.

"""
from moztrap.settings.default import *

DEFAULT_FILE_STORAGE = "tests.storage.MemoryStorage"
ALLOW_ANONYMOUS_ACCESS = False
SITE_URL = "http://localhost:80"
USE_BROWSERID = True

PASSWORD_HASHERS = ['django.contrib.auth.hashers.UnsaltedMD5PasswordHasher']

########NEW FILE########
__FILENAME__ = storage
"""
In-memory file storage for tests.

"""
import urlparse

from django.conf import settings
from django.utils.encoding import filepath_to_uri

import inmemorystorage



class MemoryStorage(inmemorystorage.InMemoryStorage):
    """An in-memory Django file storage backend, for tests."""
    def url(self, name):
        """In-memory files aren't actually URL-accessible; we'll pretend."""
        return urlparse.urljoin(settings.MEDIA_URL, filepath_to_uri(name))

########NEW FILE########
__FILENAME__ = test_utils
from django.utils.unittest import TestCase



class TestUrl(TestCase):
    @property
    def url(self):
        from .utils import Url
        return Url


    def assertEqual(self, *args):
        """
        For this test, want to ensure that compare-equal implies hash-equal.

        """
        super(TestUrl, self).assertEqual(*args)

        super(TestUrl, self).assertEqual(hash(args[0]), hash(args[1]), args[2:])


    def test_no_qs(self):
        self.assertEqual(
            self.url("http://fake.base/path/"),
            self.url("http://fake.base/path/"))


    def test_same_qs(self):
        self.assertEqual(
            self.url("http://fake.base/path/?foo=bar"),
            self.url("http://fake.base/path/?foo=bar"))


    def test_different_key_order(self):
        self.assertEqual(
            self.url("http://fake.base/path/?foo=bar&arg=yo"),
            self.url("http://fake.base/path/?arg=yo&foo=bar"))


    def test_different_value_order(self):
        self.assertNotEqual(
            self.url("http://fake.base/path/?foo=bar&foo=yo"),
            self.url("http://fake.base/path/?foo=yo&foo=bar"))


    def test_repr(self):
        self.assertEqual(
            repr(self.url("http://fake.base/path/?foo=bar")),
            "Url(http://fake.base/path/?foo=bar)")

########NEW FILE########
__FILENAME__ = utils
"""
Testing utilities.

"""
import urlparse

from contextlib import contextmanager
from mock import patch



class Url(object):
    """
    A wrapper class for comparing urls with querystrings while avoiding
    dict-ordering dependencies. Order of keys in querystring should not matter,
    although order of multiple values for a single key does matter.

    """
    def __init__(self, url):
        self.url = url
        parts = urlparse.urlparse(url)
        self.non_qs = (
            parts.scheme,
            parts.netloc,
            parts.path,
            parts.params,
            parts.fragment)
        # convert values from lists to tuples for hashability later
        self.qs = tuple(sorted((k, tuple(v)) for k, v
                               in urlparse.parse_qs(parts.query).iteritems()))


    def __eq__(self, other):
        return (self.non_qs == other.non_qs) and (self.qs == other.qs)


    def __hash__(self):
        return hash((self.non_qs, self.qs))


    def __repr__(self):
        return "Url(%s)" % self.url



@contextmanager
def patch_session(session_data):
    """Context manager to patch session vars."""
    with patch(
            "django.contrib.sessions.backends.cached_db."
            "SessionStore._session_cache",
            session_data,
            create=True):
        yield

########NEW FILE########
__FILENAME__ = runs
"""
Common tests for run-list views.

"""
from datetime import date



class RunsListTests(object):
    """Common tests for any runs-list view."""
    def test_filter_by_status(self):
        """Can filter by status."""
        self.factory.create(name="Foo 1", status=self.model.Run.STATUS.active)
        self.factory.create(name="Foo 2", status=self.model.Run.STATUS.draft)

        res = self.get(params={"filter-status": "active"})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_product(self):
        """Can filter by product."""
        one = self.factory.create(name="Foo 1")
        self.factory.create(name="Foo 2")

        res = self.get(
            params={"filter-product": str(one.productversion.product.id)})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_productversion(self):
        """Can filter by product version."""
        one = self.factory.create(name="Foo 1")
        self.factory.create(name="Foo 2")

        res = self.get(
            params={"filter-productversion": str(one.productversion.id)})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_name(self):
        """Can filter by name."""
        self.factory.create(name="Foo 1")
        self.factory.create(name="Foo 2")

        res = self.get(params={"filter-name": "1"})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_description(self):
        """Can filter by name."""
        self.factory.create(name="Foo 1", description="foo bar")
        self.factory.create(name="Foo 2", description="bar baz")

        res = self.get(params={"filter-description": "foo"})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_suite(self):
        """Can filter by included suite."""
        one = self.factory.create(name="Foo 1")
        rs = self.F.RunSuiteFactory(run=one)
        self.factory.create(name="Foo 2")

        res = self.get(params={"filter-suite": str(rs.suite.id)})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_case_id(self):
        """Can filter by included case id."""
        one = self.factory.create(name="Foo 1")
        rs = self.F.RunSuiteFactory.create(run=one)
        sc = self.F.SuiteCaseFactory.create(suite=rs.suite)
        self.factory.create(name="Foo 2")

        res = self.get(params={"filter-case": str(sc.case.id)})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_env_elements(self):
        """Can filter by environment elements."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        self.factory.create(name="Foo 1", environments=envs)
        self.factory.create(name="Foo 2", environments=envs[1:])

        res = self.get(
            params={"filter-envelement": envs[0].elements.all()[0].id})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_sort_by_status(self):
        """Can sort by status."""
        self.factory.create(name="Run 1", status=self.model.Run.STATUS.active)
        self.factory.create(name="Run 2", status=self.model.Run.STATUS.draft)

        res = self.get(
            params={"sortfield": "status", "sortdirection": "desc"})

        self.assertOrderInList(res, "Run 2", "Run 1")


    def test_sort_by_name(self):
        """Can sort by name."""
        self.factory.create(name="Run 1")
        self.factory.create(name="Run 2")

        res = self.get(
            params={"sortfield": "name", "sortdirection": "desc"})

        self.assertOrderInList(res, "Run 2", "Run 1")


    def test_sort_by_productversion(self):
        """Can sort by productversion."""
        pb = self.F.ProductFactory.create(name="B")
        pa = self.F.ProductFactory.create(name="A")
        self.factory.create(
            name="x", productversion__product=pb, productversion__version="2")
        self.factory.create(
            name="y", productversion__product=pb, productversion__version="1")
        self.factory.create(
            name="z", productversion__product=pa, productversion__version="1")

        res = self.get(
            params={"sortfield": "productversion", "sortdirection": "asc"})

        self.assertOrderInList(res, "z", "y", "x")


    def test_sort_by_start(self):
        """Can sort by start."""
        self.factory.create(name="Run 1", start=date(2012, 1, 5))
        self.factory.create(name="Run 2", start=date(2012, 1, 10))

        res = self.get(
            params={"sortfield": "start", "sortdirection": "desc"})

        self.assertOrderInList(res, "Run 2", "Run 1")


    def test_sort_by_end(self):
        """Can sort by end."""
        self.factory.create(name="Run 1", end=date(2012, 1, 15))
        self.factory.create(name="Run 2", end=date(2012, 1, 10))

        res = self.get(
            params={"sortfield": "end", "sortdirection": "asc"})

        self.assertOrderInList(res, "Run 2", "Run 1")

########NEW FILE########
__FILENAME__ = test_filters
"""
Tests for queryset-filtering.

"""
from django.template import Template, Context

from mock import patch

from tests import case



class FilterUrlTest(case.TestCase):
    """Tests for filter_url template filter."""
    @patch("moztrap.view.lists.filters.filter_url")
    def test_pass_through(self, mock_filter_url):
        """filter_url template filter is pass-through to filter_url function."""
        t = Template("{% load filters %}{{ 'manage_cases'|filter_url:prod }}")
        product = object()
        mock_filter_url.return_value = "some url"
        res = t.render(Context({"prod": product}))

        self.assertEqual(res, "some url")
        mock_filter_url.assert_called_with("manage_cases", product)

########NEW FILE########
__FILENAME__ = test_finder
"""
Tests for finder template filters.

"""
from mock import Mock

from tests import case



class FilterTest(case.TestCase):
    """Tests for finder template filters."""
    @property
    def finder(self):
        """The templatetag module under test."""
        from moztrap.view.lists.templatetags import finder
        return finder


    def test_child_query_url(self):
        """child_query_url passes through to method of Filter object."""
        f, o = Mock(), Mock()

        url = self.finder.child_query_url(f, o)

        f.child_query_url.assert_called_with(o)
        self.assertIs(url, f.child_query_url.return_value)


    def test_sub_name(self):
        """sub_name passes through to Filter.child_column_for_obj method."""
        f, o = Mock(), Mock()

        url = self.finder.sub_name(f, o)

        f.child_column_for_obj.assert_called_with(o)
        self.assertIs(url, f.child_column_for_obj.return_value)


    def test_goto_url(self):
        """goto_url passes through to method of Filter object."""
        f, o = Mock(), Mock()

        url = self.finder.goto_url(f, o)

        f.goto_url.assert_called_with(o)
        self.assertIs(url, f.goto_url.return_value)

########NEW FILE########
__FILENAME__ = test_pagination
"""
Tests for pagination template tags and filters.

"""
from mock import Mock

from django import template

from tests import case



class PaginateTest(case.DBTestCase):
    """Tests for paginate template tag."""
    def test_paginate(self):
        """Places Pager object in context with size/num from request."""
        from moztrap.model.tags.models import Tag

        tpl = template.Template(
            "{% load pagination %}{% paginate queryset as pager %}"
            "{% for obj in pager.objects %}{{ obj }} {% endfor %}")

        request = Mock()
        request.GET = {"pagesize": 3, "pagenumber": 2}

        for i in range(1, 7):
            self.F.TagFactory.create(name=str(i))
        qs = Tag.objects.all()

        output = tpl.render(
            template.Context({"request": request, "queryset": qs}))

        self.assertEqual(output, "4 5 6 ")


class FilterTest(case.TestCase):
    """Tests for template filters."""
    def test_pagenumber_url(self):
        """``pagenumber_url`` filter updates pagenumber in URL."""
        from moztrap.view.lists.templatetags.pagination import pagenumber_url
        request = Mock()
        request.get_full_path.return_value = (
            "http://localhost/?pagenumber=2&pagesize=10")
        self.assertEqual(
            pagenumber_url(request, 1),
            "http://localhost/?pagenumber=1&pagesize=10")


    def test_pagesize_url(self):
        """``pagesize_url`` updates pagesize in URL (and jumps to page 1)."""
        from moztrap.view.lists.templatetags.pagination import pagesize_url
        request = Mock()
        request.get_full_path.return_value = (
            "http://localhost/?pagenumber=2&pagesize=10")
        self.assertEqual(
            pagesize_url(request, 20),
            "http://localhost/?pagenumber=1&pagesize=20")


    def test_pagenumber(self):
        """``pagenumber`` gets the pagenumber from the request."""
        from moztrap.view.lists.templatetags.pagination import pagenumber
        request = Mock()
        request.GET = {"pagenumber": 2, "pagesize": 10}
        self.assertEqual(pagenumber(request), 2)


    def test_pagesize(self):
        """``pagenumber`` gets the pagenumber from the request."""
        from moztrap.view.lists.templatetags.pagination import pagesize
        request = Mock()
        request.GET = {"pagenumber": 2, "pagesize": 10}
        self.assertEqual(pagesize(request), 10)

########NEW FILE########
__FILENAME__ = test_sort
"""
Tests for sort template filters.

"""
from mock import Mock

from tests import case



class FilterTest(case.TestCase):
    """Tests for sort template filters."""
    @property
    def sort(self):
        """The templatetag module under test."""
        from moztrap.view.lists.templatetags import sort
        return sort


    def test_url(self):
        """url filter passes through to url method of Sort object."""
        s = Mock()

        ret = self.sort.url(s, "name")

        s.url.assert_called_with("name")
        self.assertIs(ret, s.url.return_value)


    def test_dir(self):
        """dir filter passes through to dir method of Sort object."""
        s = Mock()

        ret = self.sort.dir(s, "name")

        s.dir.assert_called_with("name")
        self.assertIs(ret, s.dir.return_value)

########NEW FILE########
__FILENAME__ = test_actions
"""
Tests for list actions.

"""
from mock import Mock

from django.http import HttpResponse
from django.test import RequestFactory

from tests import case



class ActionsTest(case.TestCase):
    """Tests for list-actions decorator."""
    @property
    def actions(self):
        """The decorator under test."""
        from moztrap.view.lists.actions import actions
        return actions


    def setUp(self):
        """Set up a mock Model class."""
        self.mock_model = Mock()


    def view(self, request, decorator=None):
        """
        Pass request to decorated test view, return response.

        Optionally accepts decorator to apply. Assigns request as ``request``
        attribute on response.

        """
        if decorator is None:
            decorator = self.actions(self.mock_model, ["doit"])

        @decorator
        def view(req):
            response = HttpResponse()
            response.request = req
            return response

        return view(request)


    def req(self, method, *args, **kwargs):
        """Shortcut for RequestFactory; adds request.user."""
        req = getattr(RequestFactory(), method)(*args, **kwargs)
        req.user = Mock()
        return req


    def test_uses_wraps(self):
        """Preserves docstring and name of original view func."""
        @self.actions("ctx_name", [])
        def myview(request, some_id):
            """docstring"""

        self.assertEqual(myview.func_name, "myview")
        self.assertEqual(myview.func_doc, "docstring")


    def test_passes_on_args(self):
        """Arguments are passed on to original view func."""
        record = []

        @self.actions("ctx_name", [])
        def myview(request, *args, **kwargs):
            record.extend([args, kwargs])

        myview(self.req("get", "/"), "a", b=2)

        self.assertEqual(record, [("a",), {"b": 2}])


    def test_action_redirects(self):
        """After action is taken, redirects to original URL."""
        req = self.req("post", "/the/url", data={"action-doit": "3"})

        res = self.view(req)

        self.assertEqual(res.status_code, 302)
        self.assertEqual(res["Location"], "/the/url")


    def test_action_redirects_with_querystring(self):
        """Post-action redirect includes querystring."""
        req = self.req(
            "post", "/the/url?filter=value", data={"action-doit": "3"})

        res = self.view(req)

        self.assertEqual(res.status_code, 302)
        self.assertEqual(res["Location"], "/the/url?filter=value")


    def test_ajax_no_redirect(self):
        """Ajax request doesn't redirect post-action."""
        req = self.req(
            "post", "/the/url?filter=value", data={"action-doit": "3"},
            HTTP_X_REQUESTED_WITH="XMLHttpRequest")

        res = self.view(req)

        self.assertEqual(res.status_code, 200)


    def test_ajax_fall_through_method(self):
        """Post-action, ajax req continues with method GET and no POST data."""
        req = self.req(
            "post", "/the/url?filter=value", data={"action-doit": "3"},
            HTTP_X_REQUESTED_WITH="XMLHttpRequest")

        res = self.view(req)

        self.assertEqual(res.request.method, "GET")
        self.assertEqual(res.request.POST, {})


    def test_action_called(self):
        """Correct method is called on correct object, with user."""
        req = self.req("post", "/the/url", data={"action-doit": "3"})
        req.user = Mock()

        self.view(req)

        model_get = self.mock_model._base_manager.get
        model_get.assert_called_with(pk="3")

        instance = model_get.return_value
        instance.doit.assert_called_with(user=req.user)


    def test_POST_no_action(self):
        """Without fallthrough, redirects even if no action taken."""
        req = self.req("post", "/the/url", data={})

        res = self.view(req)

        self.assertEqual(self.mock_model._base_manager.get.call_count, 0)
        self.assertEqual(res.status_code, 302)


    def test_bad_action(self):
        """Unknown action is handled the same as no action."""
        req = self.req("post", "/the/url", data={"action-bad": "3"})

        res = self.view(req)

        self.assertEqual(self.mock_model._base_manager.get.call_count, 0)
        self.assertEqual(res.status_code, 302)


    def test_fall_through(self):
        """If fall_through is set, POST falls through untouched if no action."""
        dec = self.actions(self.mock_model, ["doit"], fall_through=True)
        req = self.req("post", "/the/url", data={"other": "thing"})

        res = self.view(req, decorator=dec)

        self.assertEqual(self.mock_model._base_manager.get.call_count, 0)
        self.assertEqual(res.status_code, 200)
        self.assertEqual(res.request.method, "POST")
        self.assertEqual(res.request.POST["other"], "thing")


    def test_object_does_not_exist(self):
        """If requested obj id does not exist, no action is taken."""
        req = self.req("post", "/the/url", data={"action-doit": "3"})

        class MockModelDoesNotExist(Exception):
            pass
        self.mock_model.DoesNotExist = MockModelDoesNotExist

        def raise_does_not_exist(*args, **kwargs):
            raise self.mock_model.DoesNotExist

        self.mock_model._base_manager.get.side_effect = raise_does_not_exist

        res = self.view(req)

        self.mock_model._base_manager.get.assert_called_with(pk="3")
        self.assertEqual(res.status_code, 302)


    def test_non_POST(self):
        """Decorator ignores non-POST requests."""
        req = self.req("get", "/the/url", data={"action-doit": "3"})

        self.view(req)

        self.assertEqual(self.mock_model._base_manager.get.call_count, 0)


    def test_no_permission(self):
        """If permission is passed in and user doesn't have it, returns 403."""
        req = self.req("post", "/the/url", data={"action-doit": "3"})
        req.user = Mock()
        req.user.has_perm.return_value = False

        res = self.view(
            req,
            decorator=self.actions(
                self.mock_model, ["doit"], permission="do_things")
            )

        self.assertEqual(res.status_code, 403)
        req.user.has_perm.assert_called_with("do_things")


    def test_has_permission(self):
        """If permission is passed in and user has it, success."""
        req = self.req("post", "/the/url", data={"action-doit": "3"})
        req.user = Mock()
        req.user.has_perm.return_value = True

        res = self.view(
            req,
            decorator=self.actions(
                self.mock_model, ["doit"], permission="do_things")
            )

        self.assertEqual(res.status_code, 302)
        req.user.has_perm.assert_called_with("do_things")

########NEW FILE########
__FILENAME__ = test_cases
"""
Tests for test case queryset-filtering by ID and with optional ID prefix.

"""
from tests import case
from moztrap.view.lists.cases import PrefixIDFilter



class PrefixIDFilterTest(case.DBTestCase):
    """Tests for PrefixIDFilter"""

    def create_testdata(self):
        testdata = {}

        testdata["cv1"] = self.F.CaseVersionFactory.create(name="CV 1",
            case=self.F.CaseFactory.create(idprefix="pre"))
        testdata["cv2"] = self.F.CaseVersionFactory.create(name="CV 2")
        testdata["cv3"] = self.F.CaseVersionFactory.create(name="CV 3",
            case=self.F.CaseFactory.create(idprefix="moz"))
        testdata["cv4"] = self.F.CaseVersionFactory.create(name="CV 4",
            case=self.F.CaseFactory.create(idprefix="moz"))

        return testdata


    def filter(self, criteria):
        f = PrefixIDFilter("id")
        res = f.filter(
            self.model.CaseVersion.objects.all(),
            criteria,
            )
        return res


    def test_prefix_and_id(self):
        """prefix and ID"""
        td = self.create_testdata()
        res = self.filter([u"pre-{0}".format(td["cv1"].case.id)])

        self.assertEqual(res.get().name, "CV 1")


    def test_prefix_only(self):
        """prefix only"""
        self.create_testdata()
        res = self.filter([u"pre"])

        self.assertEqual(res.get().name, "CV 1")


    def test_id_only(self):
        """ID only"""
        td = self.create_testdata()
        res = self.filter([unicode(td["cv1"].case.id)])

        self.assertEqual(res.get().name, "CV 1")


    def test_id_only_int(self):
        """ID as an int"""
        td = self.create_testdata()
        res = self.filter([int(td["cv1"].case.id)])

        self.assertEqual(res.get().name, "CV 1")


    def test_id_and_prefix_from_different_cases_gets_both(self):
        """ID from one case and prefix from a different case gets both"""
        td = self.create_testdata()
        res = self.filter([u"pre", unicode(td["cv2"].case.id)])

        self.assertEqual(
            set([x.name for x in res.all()]),
            set(["CV 1", "CV 2"]),
            )


    def test_id_case_without_prefix(self):
        """id when case has no prefix"""
        td = self.create_testdata()
        res = self.filter([unicode(td["cv2"].case.id)])

        self.assertEqual(res.get().name, "CV 2")


    def test_cases_different_prefix_return_both(self):
        """
        3 cases have 2 different prefixes returns cases from both prefixes.
        """
        self.create_testdata()
        res = self.filter([u"pre", u"moz"])

        self.assertEqual(
            set([x.name for x in res.all()]),
            set(["CV 1", "CV 3", "CV 4"]),
            )


    def test_cases_same_prefix_return_both(self):
        """2 cases with no prefixes, IDs OR'ed"""
        self.create_testdata()
        res = self.filter([u"moz"])

        self.assertEqual(
            set([x.name for x in res.all()]),
            set(["CV 3", "CV 4"]),
            )

########NEW FILE########
__FILENAME__ = test_filters
"""
Tests for queryset-filtering.

"""
from django.http import QueryDict
from mock import Mock

from django.template.response import TemplateResponse
from django.test import RequestFactory
from django.utils.datastructures import MultiValueDict

from tests import case



class FiltersTestCase(case.TestCase):
    """A test case for testing classes in the moztrap.view.lists.filters module."""
    @property
    def filters(self):
        """The module under test."""
        from moztrap.view.lists import filters
        return filters



class FilterUrlTest(FiltersTestCase):
    """Tests for ``filter_url`` function."""
    @property
    def Product(self):
        """The Product model."""
        from moztrap.model import Product
        return Product


    def test_urlpattern_name(self):
        """Can find filter url by url pattern name."""
        p = self.Product(pk=2)

        self.assertEqual(
            self.filters.filter_url("manage_cases", p),
            "/manage/cases/?filter-product=2"
            )


    def test_view_function(self):
        """Can find filter url by view function."""
        p = self.Product(pk=2)

        from moztrap.view.manage.cases.views import cases_list

        self.assertEqual(
            self.filters.filter_url(cases_list, p),
            "/manage/cases/?filter-product=2"
            )


    def test_path(self):
        """Can find filter url by path."""
        p = self.Product(pk=2)

        self.assertEqual(
            self.filters.filter_url("/manage/cases/", p),
            "/manage/cases/?filter-product=2"
            )



class FilterDecoratorTest(FiltersTestCase):
    """Tests for ``filter`` decorator."""
    @property
    def filter(self):
        """The decorator factory under test."""
        return self.filters.filter


    def on_response(self, response, decorator=None, request=None):
        """Apply given decorator to dummy view, return given response."""
        decorator = decorator or self.filter("ctx_name")
        request = request or RequestFactory().get("/")

        @decorator
        def view(request):
            return response

        return view(request)


    def on_template_response(self, context, **kwargs):
        """Run TemplateResponse with given context through decorated view."""
        request = kwargs.setdefault("request", RequestFactory().get("/"))

        res = TemplateResponse(request, "some/template.html", context)

        return self.on_response(res, **kwargs)


    def test_returns_non_template_response(self):
        """Returns a non-TemplateResponse unmodified, without error."""
        res = self.on_response("blah")

        self.assertEqual(res, "blah")


    def test_uses_wraps(self):
        """Preserves docstring and name of original view func."""
        @self.filter("ctx_name")
        def myview(request, some_id):
            """docstring"""

        self.assertEqual(myview.func_name, "myview")
        self.assertEqual(myview.func_doc, "docstring")


    def test_passes_on_args(self):
        """Arguments are passed on to original view func."""
        record = []

        @self.filter("ctx_name")
        def myview(request, *args, **kwargs):
            record.extend([args, kwargs])

        myview(RequestFactory().get("/"), "a", b=2)

        self.assertEqual(record, [("a",), {"b": 2}])


    def test_filterset(self):
        """Constructs BoundFilterSet and places it in template context."""
        response = self.on_template_response(
            {"ctx_name": Mock()},
            decorator=self.filter("ctx_name", [self.filters.Filter("name")]),
            )

        bfs = response.context_data["filters"]
        self.assertIsInstance(bfs, self.filters.BoundFilterSet)
        self.assertEqual(list(bfs)[0].name, "name")


    def test_filterset_subclass(self):
        """Accepts a FilterSet subclass in ``filterset_class`` argument."""
        class MyFilterSet(self.filters.FilterSet):
            filters = [self.filters.Filter("name")]

        response = self.on_template_response(
            {"ctx_name": Mock()},
            decorator=self.filter("ctx_name", filterset_class=MyFilterSet),
            )

        bfs = response.context_data["filters"]
        self.assertIsInstance(bfs.filterset, MyFilterSet)
        self.assertEqual(list(bfs)[0].name, "name")


    def test_filters_qs(self):
        """Finds queryset in context; runs it through filterset ``filter``."""
        class MockFilterSet(self.filters.FilterSet):
            def filter(self, queryset):
                # simple annotation so we know it passed through here.
                queryset.filtered = True
                return queryset

        response = self.on_template_response({"ctx_name": Mock()})

        qs = response.context_data["ctx_name"]
        self.assertTrue(qs.filtered)



class FilterSetTest(FiltersTestCase):
    """Tests for FilterSet."""
    def test_class_filters(self):
        """Subclasses can provide filters list as class attribute."""
        class MyFilterSet(self.filters.FilterSet):
            filters = [
                self.filters.Filter("name")
                ]

        fs = MyFilterSet()

        self.assertEqual(len(fs.filters), 1)
        self.assertEqual(fs.filters[0].name, "name")


    def test_instantiation_filters_extend_class_filters(self):
        """Filters given at instantiation extend class-attr filters."""
        class MyFilterSet(self.filters.FilterSet):
            filters = [
                self.filters.Filter("one")
                ]

        fs = MyFilterSet([self.filters.Filter("two")])

        self.assertEqual([f.name for f in fs.filters], ["one", "two"])


    def test_extend_doesnt_alter_class_attr(self):
        """Providing filters at instantiation doesn't alter the class attr."""
        class MyFilterSet(self.filters.FilterSet):
            filters = [
                self.filters.Filter("one")
                ]

        MyFilterSet([self.filters.Filter("two")])
        fs = MyFilterSet()

        self.assertEqual(len(fs.filters), 1)


    def test_bind(self):
        """``bind`` method returns BoundFilterSet."""
        fs = self.filters.FilterSet()
        bfs = fs.bind()

        self.assertIsInstance(bfs, self.filters.BoundFilterSet)
        self.assertIs(bfs.filterset, fs)


    def test_bind_with_cookies(self):
        """``bind`` method mixes cookies with filters."""
        fs = self.filters.FilterSet(filters=[self.filters.Filter("one")])
        COOKIES = {
            'csrftoken': 'd792db7bb8d4e073dbb3131bf7e9acc4',
            'moztrap-filter-foo': '%5B%222%22%5D',
            'djdt': 'hide',
            'sessionid': '93bb6b0b87594a3b6387692724d67043',
            }
        GET = MultiValueDict({"filter-one": ["bub"]})

        bfs = fs.bind(GET=GET, COOKIES=COOKIES)
        self.assertEqual(bfs.data, {"foo": [u"2"], "one": ["bub"]})


    def test_bound_class(self):
        """Subclass can use subclass of BoundFilterSet."""
        class MyBoundFilterSet(self.filters.BoundFilterSet):
            pass

        class MyFilterSet(self.filters.FilterSet):
            bound_class = MyBoundFilterSet

        fs = MyFilterSet()
        bfs = fs.bind()

        self.assertIsInstance(bfs, MyBoundFilterSet)


    def test_bound_data(self):
        """
        BoundFilterSet's data is plain dict of lists from given MultiValueDict.

        Only keys beginning with the prefix "filter-" are included, and the
        prefix is stripped from the key.

        """
        bfs = self.filters.FilterSet().bind(
            MultiValueDict(
                {
                    "other": ["a", "b"],
                    "filter-one": ["foo"],
                    "filter-two": ["bar", "baz"]
                    }
                )
            )

        self.assertEqual(bfs.data, {"one": ["foo"], "two": ["bar", "baz"]})


    def test_prefix_override(self):
        """'filter-' prefix can be changed via 'filter' kwarg."""
        bfs = self.filters.FilterSet(prefix="foo:").bind(
            MultiValueDict(
                {
                    "other": ["a", "b"],
                    "foo:one": ["foo"],
                    "foo:two": ["bar", "baz"]
                    }
                ),
            )

        self.assertEqual(bfs.data, {"one": ["foo"], "two": ["bar", "baz"]})


    def test_iteration_yields_filters(self):
        """Iterating over a FilterSet yields its Filters."""
        fs = self.filters.FilterSet([self.filters.Filter("name")])

        self.assertEqual(list(fs), fs.filters)


    def test_params_for(self):
        """params_for returns querystring params for a given object."""
        class MockModel(object):
            def __init__(self, pk):
                self.pk = pk

        mock_model_filter = self.filters.Filter("name", key="key")
        mock_model_filter.queryset = Mock()
        mock_model_filter.queryset.model = MockModel

        fs = self.filters.FilterSet([mock_model_filter], prefix="foo:")

        self.assertEqual(fs.params_for(MockModel(3)), {"foo:key": 3})


    def test_params_for_none(self):
        """params_for returns empty dict if no applicable model-filter."""
        fs = self.filters.FilterSet()

        self.assertEqual(fs.params_for(3), {})



class BoundFilterSetTest(FiltersTestCase):
    """Tests for BoundFilterSet."""
    def test_boundfilters(self):
        """``self.boundfilters`` has a BoundFilter for each given Filter."""
        fs = self.filters.FilterSet([self.filters.Filter("name")])
        bfs = self.filters.BoundFilterSet(fs)

        self.assertEqual(len(bfs.boundfilters), 1)
        self.assertIsInstance(bfs.boundfilters[0], self.filters.BoundFilter)
        self.assertIs(bfs.boundfilters[0].name, "name")


    def test_iteration_yields_boundfilters(self):
        """Iterating over a BoundFilterSet yields its BoundFilters."""
        fs = self.filters.FilterSet([self.filters.Filter("name")])
        bfs = self.filters.BoundFilterSet(fs)

        self.assertEqual(list(bfs), bfs.boundfilters)


    def test_len_is_number_of_boundfilters(self):
        """Length of a BoundFilterSet is its number of BoundFilters."""
        class MyFilterSet(self.filters.FilterSet):
            filters = [
                self.filters.Filter("one")
                ]

        fs = MyFilterSet([self.filters.Filter("two")])
        bfs = self.filters.BoundFilterSet(fs)

        self.assertEqual(len(bfs), 2)


    def test_filter(self):
        """filter method sends queryset through all filter's filter methods."""
        class MockFilter(self.filters.Filter):
            def filter(self, queryset, values):
                # simple annotation so we can test the qs passed through here
                setattr(queryset, self.name, values)
                return queryset

        bfs = self.filters.FilterSet(
            [MockFilter("one"), MockFilter("two")]).bind(
            MultiValueDict({"filter-one": ["1"], "filter-two": ["2", "3"]}),
            )
        qs = Mock()

        qs = bfs.filter(qs)

        self.assertEqual(qs.one, ["1"])
        self.assertEqual(qs.two, ["2", "3"])



class BoundFilterTest(FiltersTestCase):
    """Tests for BoundFilter."""
    def test_values(self):
        """values is list of valid values (as returned by Filter)."""
        bf = self.filters.BoundFilter(
            self.filters.ChoicesFilter(
                "name", choices=[("1", "one"), ("2", "two")]),
            {"name": ["1", "bad"], "other": ["irrelevant"]}
            )

        self.assertEqual(bf.values, ["1"])


    def test_iteration(self):
        """Iteration returns FilterOptions with value, label, selected attrs."""
        bf = self.filters.BoundFilter(
            self.filters.ChoicesFilter(
                "name", choices=[("1", "one"), ("2", "two")]),
            {"name": ["1", "bad"], "other": ["irrelevant"]}
            )

        self.assertEqual(
            [(o.value, o.label, o.selected) for o in bf],
            [("1", "one", True), ("2", "two", False)])


    def test_filter(self):
        """Filtering just passes through queryset and values to filter."""
        class MyChoicesFilter(self.filters.ChoicesFilter):
            def filter(self, queryset, values):
                # simple annotation so we can tell qs went through here
                queryset.values = values
                return queryset

        bf = self.filters.BoundFilter(
            MyChoicesFilter(
                "name", choices=[("1", "one"), ("2", "two")]),
            {"name": ["1", "bad"], "other": ["irrelevant"]}
            )

        qs = bf.filter(Mock())

        self.assertEqual(qs.values, ["1"])


    def test_passthrough(self):
        """cls, name, and key properties are just pass-through to filter."""
        flt = self.filters.Filter("name", key="key")
        flt.cls = "foobar"

        bf = self.filters.BoundFilter(flt, {})

        self.assertEqual(bf.cls, "foobar")
        self.assertEqual(bf.name, "name")
        self.assertEqual(bf.key, "key")


    def test_len(self):
        """Length is number of options."""
        bf = self.filters.BoundFilter(
            self.filters.ChoicesFilter(
                "name", choices=[("1", "one"), ("2", "two")]),
            {}
            )

        self.assertEqual(len(bf), 2)



class FilterTest(FiltersTestCase):
    """Tests for base Filter class."""
    def test_name(self):
        """Name attribute is from mandatory first instantiation argument."""
        f = self.filters.Filter("name")

        self.assertEqual(f.name, "name")


    def test_lookup(self):
        """Lookup attribute is optional keyword argument."""
        f = self.filters.Filter("name", lookup="lookup")

        self.assertEqual(f.lookup, "lookup")


    def test_lookup_defaults_to_name(self):
        """Lookup attribute defaults to name."""
        f = self.filters.Filter("name")

        self.assertEqual(f.lookup, "name")


    def test_key(self):
        """Key attribute is optional keyword argument."""
        f = self.filters.Filter("name", key="key")

        self.assertEqual(f.key, "key")


    def test_key_defaults_to_name(self):
        """Key attribute defaults to name."""
        f = self.filters.Filter("name")

        self.assertEqual(f.key, "name")


    def test_filter(self):
        """Filters queryset so ``self.lookup`` field value is in ``values``."""
        f = self.filters.Filter("name", lookup="lookup")

        qs = Mock()
        qs2 = f.filter(qs, ["1", "2"])

        qs.filter.assert_called_with(lookup__in=["1", "2"])
        qs.filter.return_value.distinct.assert_called_with()
        self.assertEqual(qs2, qs.filter.return_value.distinct.return_value)


    def test_filter_toggle(self):
        "Switches from ORed to ANDed filtering"
        f = self.filters.Filter("name", lookup="lookup", switchable=True)

        f.values({"name-switch": ["on"]})
        self.assertTrue(f.toggle)

        qs = Mock()
        qs2 = f.filter(qs, ["1", "2"])

        qs.filter.assert_called_with(lookup__in=["1"])
        qs.filter.return_value.filter.assert_called_with(lookup__in=["2"])
        qs.filter.return_value.filter.return_value.filter.assert_called_with()
        qs.filter.return_value.filter.return_value.filter.return_value.distinct.assert_called_with()
        self.assertEqual(qs2, qs.filter.return_value.filter.return_value.filter.return_value.distinct.return_value)


    def test_options(self):
        """Base Filter has no options."""
        f = self.filters.Filter("name")

        self.assertEqual(f.options(["yo"]), [])


    def test_values(self):
        """Pulls ``self.key`` values from given data."""
        f = self.filters.Filter("name", key="key")

        self.assertEqual(f.values({"key": ["one"], "name": ["two"]}), ["one"])


    def test_coerce(self):
        """Can force values to be coerced."""
        f = self.filters.Filter("name", coerce=int)

        self.assertEqual(f.values({"name": ["1", "two"]}), [1, None])



class BaseChoicesFilterTest(FiltersTestCase):
    """Tests for BaseChoicesFilter."""
    def test_get_choices(self):
        """Default get_choices returns no choices; should be overridden."""
        f = self.filters.BaseChoicesFilter("name")

        self.assertEqual(f.get_choices(), [])


    def test_options(self):
        """Options are fixed to choices, regardless of current filter values."""
        f = self.filters.BaseChoicesFilter("name")
        f.get_choices = lambda: [("1", "one")]

        self.assertEqual(f.options(["values"]), [("1", "one")])


    def test_values(self):
        """Values are constrained to valid choices."""
        f = self.filters.BaseChoicesFilter("name")
        f.get_choices = lambda: [("1", "one")]

        self.assertEqual(f.values({"name": ["1", "2"]}), ["1"])



class ChoicesFilterTest(FiltersTestCase):
    """Tests for ChoicesFilter."""
    def test_choices(self):
        """Choices can be passed in as a keyword argument at instantiation."""
        f = self.filters.ChoicesFilter("name", choices=[("1", "one")])

        self.assertEqual(f.get_choices(), [("1", "one")])



class ModelFilterTest(FiltersTestCase):
    """Tests for ModelFilter."""
    @property
    def queryset(self):
        """Mock "queryset" of instances with numeric id and unicode repr."""
        o1 = Mock()
        o1.pk = 1
        o1.__unicode__ = lambda self: "one"
        o2 = Mock()
        o2.pk = 2
        o2.__unicode__ = lambda self: "two"
        qs = Mock()
        qs.__iter__ = lambda self: iter([o1, o2])
        qs.all.return_value = qs
        return qs


    def test_choices(self):
        """Choices are passed in as an iterable of model instances."""
        f = self.filters.ModelFilter("name", queryset=self.queryset)

        self.assertEqual(f.get_choices(), [(1, "one"), (2, "two")])


    def test_custom_labels(self):
        """Callable can be passed in to customize labeling of instances."""
        f = self.filters.ModelFilter(
            "name",
            queryset=self.queryset,
            label=lambda o: u"option {0}".format(o)
            )

        self.assertEqual(
            f.get_choices(), [(1, "option one"), (2, "option two")])


    def test_values_coerced(self):
        """
        Values are coerced to integers before being matched against options.

        If coercion fails, value is ignored.

        """
        f = self.filters.ModelFilter("name", queryset=self.queryset)

        self.assertEqual(f.values({"name": ["1", "foo", None]}), [1])



class KeywordExactFilterTest(FiltersTestCase):
    """Tests for KeywordExactFilter."""
    def test_options(self):
        """Available options are the current filter values."""
        f = self.filters.KeywordExactFilter("name")

        self.assertEqual(
            f.options(["one", "two"]), [("one", "one"), ("two", "two")])



class KeywordFilterTest(FiltersTestCase):
    """Tests for KeywordFilter."""
    def test_filter(self):
        """Filters queryset by 'contains' all values."""
        f = self.filters.KeywordFilter("name")

        qs = Mock()
        qs2 = f.filter(qs, ["one", "two"])

        self.assertIs(
            qs2,
            qs.filter.return_value.distinct.return_value)


    def test_filter_doesnt_touch_queryset_if_no_values(self):
        """Doesn't call .distinct() or .filter() unless actually filtered."""
        f = self.filters.KeywordFilter("name")

        qs = Mock()
        f.filter(qs, [])

        self.assertEqual(qs.filter.call_count, 0)
        self.assertEqual(qs.distinct.call_count, 0)



class PinnedFilterTest(FiltersTestCase):
    """Tests for pinned filters"""

    def test_empty_cookie(self):
        pf = self.filters.PinnedFilters(COOKIES=None)
        self.assertEqual(pf.cookies, {})

    def test_fill_form_querystring(self):
        """Fill querystring with pinned filter values."""
        COOKIES = {
            'csrftoken': 'd792db7bb8d4e073dbb3131bf7e9acc4',
            'moztrap-filter-foo': '%5B%222%22%5D',
            'djdt': 'hide',
            'sessionid': '93bb6b0b87594a3b6387692724d67043',
            }
        GET = MultiValueDict({
            "one": ["bub"],
            })

        pf = self.filters.PinnedFilters(COOKIES=COOKIES)
        newfilters = pf.fill_form_querystring(GET=GET)
        self.assertEqual(
            newfilters,
            {"foo": [u"2"], "one": ["bub"]},
            )


    def test_fill_form_querystring_pinned_filter_loses(self):
        """
        querystring filters take priority over pinned filters.

        If a filter is pinned, but the user also passes the filter
        in on the querystring, use the querystring.  Because that's
        more explicit, and pinned filters are more implicit.
        """
        COOKIES = {
            'csrftoken': 'd792db7bb8d4e073dbb3131bf7e9acc4',
            'moztrap-filter-foo': '%5B%222%22%5D',
            'djdt': 'hide',
            'sessionid': '93bb6b0b87594a3b6387692724d67043',
            }
        GET = MultiValueDict({
            "one": ["bub"],
            "foo": ["5"],
            })

        pf = self.filters.PinnedFilters(COOKIES=COOKIES)
        newfilters = pf.fill_form_querystring(GET=GET)
        self.assertEqual(
            newfilters,
            {"foo": ["5"], "one": ["bub"]},
            )

########NEW FILE########
__FILENAME__ = test_finder
"""
Tests for finder.

"""
from django.template.response import TemplateResponse
from django.test import RequestFactory

from mock import Mock, patch

from tests import case



class FinderDecoratorTest(case.DBTestCase):
    """Tests for the finder view decorator."""
    @property
    def finder(self):
        """The decorator under test."""
        from moztrap.view.lists.decorators import finder
        return finder


    def on_response(self, response, decorator=None, request=None):
        """Apply given decorator to dummy view, return given response."""
        decorator = decorator or self.finder(Mock())
        request = request or RequestFactory().get("/")

        @decorator
        def view(request):
            return response

        return view(request)


    def on_template_response(self, context, **kwargs):
        """Run TemplateResponse with given context through decorated view."""
        request = kwargs.setdefault("request", RequestFactory().get("/"))

        res = TemplateResponse(request, "some/template.html", context)

        return self.on_response(res, **kwargs)


    def test_returns_non_template_response(self):
        """Returns a non-TemplateResponse unmodified, without error."""
        res = self.on_response("blah")

        self.assertEqual(res, "blah")


    def test_uses_wraps(self):
        """Preserves docstring and name of original view func."""
        @self.finder(Mock())
        def myview(request, some_id):
            """docstring"""

        self.assertEqual(myview.func_name, "myview")
        self.assertEqual(myview.func_doc, "docstring")


    def test_passes_on_args(self):
        """Arguments are passed on to original view func."""
        record = []

        @self.finder(Mock())
        def myview(request, *args, **kwargs):
            record.extend([args, kwargs])

        myview(RequestFactory().get("/"), "a", b=2)

        self.assertEqual(record, [("a",), {"b": 2}])


    @patch("moztrap.view.lists.finder.render")
    def test_ajax(self, render):
        """Ajax response is rendered column template."""
        render.return_value = "some HTML"

        MockFinder = Mock()
        f = MockFinder.return_value
        f.column_template.return_value = "some/finder/_column.html"
        f.objects.return_value = ["some", "objects"]

        req = RequestFactory().get(
            "/some/url",
            {"finder": "1", "col": "things", "id": "2"},
            HTTP_X_REQUESTED_WITH="XMLHttpRequest")
        res = self.on_template_response(
            {}, request=req, decorator=self.finder(MockFinder))

        self.assertEqual(res, "some HTML")

        self.assertEqual(
            render.call_args[0][1:],
            (
                "some/finder/_column.html",
                {
                    "colname": "things",
                    "finder": {
                        "finder": f,
                        "things": ["some", "objects"]
                        }
                    }
                )
            )

        f.column_template.assert_called_with("things")
        f.objects.assert_called_with("things", "2")


    def test_no_ajax(self):
        """Non-ajax response has finder with top-column objects in context."""
        MockFinder = Mock()
        f = MockFinder.return_value
        top_col = Mock()
        top_col.name = "top"
        f.columns = [top_col]
        f.objects.return_value = ["some", "objects"]

        res = self.on_template_response({}, decorator=self.finder(MockFinder))

        self.assertIs(res.context_data["finder"]["finder"], f)
        self.assertEqual(
            res.context_data["finder"]["top"],
            ["some", "objects"]
            )

        f.objects.assert_called_with("top")



class FinderTest(case.DBTestCase):
    """Tests for Finder."""
    @property
    def ManageFinder(self):
        """ManageFinder; a sample finder subclass to exercise Finder."""
        from moztrap.view.manage.finders import ManageFinder
        return ManageFinder


    def test_columns_by_name(self):
        """Index of columns by name."""
        f = self.ManageFinder()

        self.assertEqual(
            sorted((n, c.name) for (n, c) in f.columns_by_name.items()),
            [
                ("products", "products"),
                ("productversions", "productversions"),
                ("runs", "runs"),
                ("suites", "suites"),
                ]
            )


    def test_parent_columns(self):
        """Maps column name to parent column."""
        f = self.ManageFinder()

        self.assertEqual(
            sorted((n, c.name) for (n, c) in f.parent_columns.items()),
            [
                ("productversions", "products"),
                ("runs", "productversions"),
                ("suites", "runs"),
                ]
            )


    def test_child_columns(self):
        """Maps column name to child column."""
        f = self.ManageFinder()

        self.assertEqual(
            sorted((n, c.name) for (n, c) in f.child_columns.items()),
            [
                ("products", "productversions"),
                ("productversions", "runs"),
                ("runs", "suites")
                ]
            )


    def test_columns_by_model(self):
        """Index of columns by model."""
        f = self.ManageFinder()

        self.assertEqual(
            sorted(
                ((m, c.name) for (m, c) in f.columns_by_model.items()),
                key=lambda o: o[1]
                ),
            [
                (self.model.Product, "products"),
                (self.model.ProductVersion, "productversions"),
                (self.model.Run, "runs"),
                (self.model.Suite, "suites"),
                ]
            )


    def test_column_template(self):
        """Joins finder base template to column template name."""
        f = self.ManageFinder()

        self.assertEqual(f.column_template("runs"), "manage/finder/_runs.html")


    def test_bad_column_name(self):
        """Bad column name raises ValueError."""
        f = self.ManageFinder()

        with self.assertRaises(ValueError):
            f.column_template("doesnotexist")


    def test_goto_url(self):
        """Goto url is manage url for child objects, filtered by parent."""
        f = self.ManageFinder()

        obj = self.model.Suite(pk=2)

        self.assertEqual(f.goto_url(obj), "/manage/cases/?filter-suite=2")


    def test_goto_url_bad_object(self):
        """Goto url returns None if given object from unknown class."""
        f = self.ManageFinder()

        self.assertEqual(f.goto_url(Mock()), None)


    def test_child_column_for_obj(self):
        """Returns child column name for given object."""
        f = self.ManageFinder()

        obj = self.model.Product()

        child_col = f.child_column_for_obj(obj)

        self.assertEqual(child_col, "productversions")


    def test_child_column_for_bad_obj(self):
        """Returns None if obj isn't of a model class in this finder."""
        f = self.ManageFinder()

        child_col = f.child_column_for_obj(Mock())

        self.assertEqual(child_col, None)


    def test_child_column_for_last_obj(self):
        """Returns None if given object from final-column class."""
        f = self.ManageFinder()

        obj = self.model.Suite()

        child_col = f.child_column_for_obj(obj)

        self.assertEqual(child_col, None)


    def test_child_query_url(self):
        """Returns ajax query url for list of child objects in next column."""
        f = self.ManageFinder()

        obj = self.model.Run(pk=5)

        url = f.child_query_url(obj)
        self.assertEqual(url, "?finder=1&col=suites&id=5")


    def test_child_query_url_none(self):
        """Returns None for final column."""
        f = self.ManageFinder()

        obj = self.model.Suite(pk=5)
        url = f.child_query_url(obj)

        self.assertEqual(url, None)


    def test_objects(self):
        """Without parent, objects is just pass-through to column objects."""
        f = self.ManageFinder()

        p = self.F.ProductFactory.create()

        objects = f.objects("products")

        self.assertEqual(list(objects), [p])


    def test_objects_of_parent(self):
        """With parent, objects filters by parent."""
        f = self.ManageFinder()

        pv = self.F.ProductVersionFactory.create()
        self.F.ProductVersionFactory.create()

        objects = f.objects("productversions", pv.product.pk)

        self.assertEqual(list(objects), [pv])


    def test_parent_via_m2m(self):
        """Parent filtering also works via m2m relationship."""
        f = self.ManageFinder()

        rs = self.F.RunSuiteFactory.create()
        self.F.SuiteFactory.create()

        objects = f.objects("suites", rs.run.pk)

        self.assertEqual(list(objects), [rs.suite])


    def test_no_parent_relationship(self):
        """If no relationship to parent model is found, raises ValueError."""
        from moztrap.view.lists.finder import Finder, Column

        class BadFinder(Finder):
            columns = [
                Column(
                    "products",
                    "_products.html",
                    self.model.Product.objects.all()
                    ),
                Column("runs", "_runs.html", self.model.Run.objects.all()),
                ]

        f = BadFinder()

        with self.assertRaises(ValueError):
            f.objects("runs", 1)


    def test_objects_of_no_parent(self):
        """Passing in parent for top column raises ValueError."""
        f = self.ManageFinder()

        with self.assertRaises(ValueError):
            f.objects("products", 3)


    def test_objects_bad_col(self):
        """Asking for objects of bad column raises ValueError."""
        f = self.ManageFinder()

        with self.assertRaises(ValueError):
            f.objects("doesnotexist")



class ColumnTest(case.DBTestCase):
    """Tests for finder Column."""
    @property
    def column(self):
        from moztrap.view.lists.finder import Column
        return Column


    def test_objects(self):
        """Objects method is just .all() on given queryset."""
        qs = Mock()
        c = self.column("thing", "_things.html", qs)

        objects = c.objects()

        self.assertIs(objects, qs.all.return_value)


    @patch("moztrap.view.lists.finder.filter_url")
    def test_goto_url(self, filter_url):
        """goto_url method calls filter_url if goto is given."""
        c = self.column("thing", "_things.html", Mock(), "goto_name")

        obj = Mock()
        url = c.goto_url(obj)

        self.assertIs(url, filter_url.return_value)
        filter_url.assert_called_with("goto_name", obj)


    def test_no_goto_url(self):
        """goto_url method just returns None if no goto is given."""
        c = self.column("thing", "_things.html", Mock())

        url = c.goto_url(Mock())

        self.assertIs(url, None)

########NEW FILE########
__FILENAME__ = test_pagination
"""
Tests for pagination utilities.

"""
from mock import Mock

from tests import case

from tests.utils import Url



class TestFromRequest(case.DBTestCase):
    """Tests for ``from_request`` function."""
    @property
    def func(self):
        """The function under test."""
        from moztrap.view.lists.pagination import from_request
        return from_request


    def _check(self, GET, result):
        """Assert that a request with ``GET`` params gives ``result``"""
        request = Mock()
        request.GET = GET
        self.assertEqual(self.func(request), result)


    def test_defaults(self):
        """Defaults to page 1, 20 per page, if no values in querystring."""
        self._check({}, (20, 1))


    def test_set(self):
        """Values from querystring override defaults."""
        self._check({"pagesize": 10, "pagenumber": 2}, (10, 2))


    def test_invalid(self):
        """Non-numbers fallback to default."""
        self._check({"pagesize": "blah", "pagenumber": 2}, (20, 2))


    def test_negative(self):
        """Out-of-bounds numbers are constrained to bounds."""
        self._check({"pagesize": 15, "pagenumber": -2}, (15, 1))



class TestPagesizeUrl(case.TestCase):
    """Tests for ``pagesize_url`` function."""
    @property
    def func(self):
        """The function under test."""
        from moztrap.view.lists.pagination import pagesize_url
        return pagesize_url


    def test_simple(self):
        """Adds pagenumber and pagesize to a URL with neither in querystring."""
        self.assertEqual(
            Url(self.func("http://fake.base/", 10)),
            Url("http://fake.base/?pagenumber=1&pagesize=10"))


    def test_override(self):
        """Overrides existing values in querystring, jumping back to page 1."""
        self.assertEqual(
            Url(self.func("http://fake.base/?pagesize=40&pagenumber=3", 10)),
            Url("http://fake.base/?pagenumber=1&pagesize=10"))



class TestPagenumberUrl(case.TestCase):
    """Tests for ``pagenumber_url`` function."""
    @property
    def func(self):
        """The function under test."""
        from moztrap.view.lists.pagination import pagenumber_url
        return pagenumber_url


    def test_simple(self):
        """Adds pagenumber to a URL without it in querystring."""
        self.assertEqual(
            Url(self.func("http://fake.base/", 3)),
            Url("http://fake.base/?pagenumber=3"))


    def test_override(self):
        """Overrides existing value in querystring."""
        self.assertEqual(
            Url(self.func("http://fake.base/?pagesize=40&pagenumber=3", 5)),
            Url("http://fake.base/?pagenumber=5&pagesize=40"))



class TestPager(case.DBTestCase):
    """Tests for ``Pager`` class."""
    @property
    def pager(self):
        """The class under test."""
        from moztrap.view.lists.pagination import Pager
        return Pager


    def qs(self, count):
        """Returns mock queryset with given count."""
        qs = Mock()
        qs.count.return_value = count
        qs.empty.return_value = []
        qs.__getitem__ = Mock()
        return qs


    def test_sizes_with_standard_size(self):
        """Has built-in standard set of page-size options."""
        p = self.pager(self.qs(5), 10, 1)
        self.assertEqual(p.sizes(), [10, 20, 50, 100])


    def test_sizes_with_nonstandard_size(self):
        """Current pagesize is always included in page-size options."""
        p = self.pager(self.qs(5), 15, 1)
        self.assertEqual(p.sizes(), [10, 15, 20, 50, 100])


    def test_pages_empty(self):
        """With no objects, there's still one page."""
        p = self.pager(self.qs(0), 20, 1)
        self.assertEqual(list(p.pages()), [1])


    def test_pages_less_than_size(self):
        """With fewer objects than one full page, there's one page."""
        p = self.pager(self.qs(10), 20, 1)
        self.assertEqual(list(p.pages()), [1])


    def test_pages_equal_to_size(self):
        """With exactly one page's worth of objects, there's one page."""
        p = self.pager(self.qs(20), 20, 1)
        self.assertEqual(list(p.pages()), [1])


    def test_pages_more_than_size(self):
        """With more than one page's worth of objects, there's two pages."""
        p = self.pager(self.qs(21), 20, 1)
        self.assertEqual(list(p.pages()), [1, 2])


    def test_display_pages_empty(self):
        """With no objects, one page is linked in nav."""
        p = self.pager(self.qs(0), 20, 1)
        self.assertEqual(list(p.display_pages()), [1])


    def test_display_pages_less_than_size(self):
        """With less than one page's objects, one page is linked in nav."""
        p = self.pager(self.qs(10), 20, 1)
        self.assertEqual(list(p.display_pages()), [1])


    def test_display_pages_equal_to_size(self):
        """With exactly one page's objects, one page is linked in nav."""
        p = self.pager(self.qs(20), 20, 1)
        self.assertEqual(list(p.display_pages()), [1])


    def test_display_pages_more_than_size(self):
        """With more than one page's objects, both pages are linked in nav."""
        p = self.pager(self.qs(21), 20, 1)
        self.assertEqual(list(p.display_pages()), [1, 2])


    def test_display_pages_long_on_first(self):
        """With many pages, some in the middle are elided."""
        p = self.pager(self.qs(120), 10, 1)
        self.assertEqual(list(p.display_pages()), [1, 2, 3, None, 11, 12])


    def test_display_pages_long_on_last(self):
        """At least two pages on each side of current page are shown."""
        p = self.pager(self.qs(120), 10, 12)
        self.assertEqual(list(p.display_pages()), [1, 2, None, 10, 11, 12])


    def test_display_pages_long_near_one_end(self):
        """If only one page would be elided, it isn't."""
        p = self.pager(self.qs(120), 10, 5)
        self.assertEqual(
        list(p.display_pages()), [1, 2, 3, 4, 5, 6, 7, None, 11, 12])


    def test_display_pages_long_near_other_end(self):
        """Overlap between near-current and near-end is not a problem."""
        p = self.pager(self.qs(120), 10, 9)
        self.assertEqual(
            list(p.display_pages()), [1, 2, None, 7, 8, 9, 10, 11, 12])


    def test_display_pages_long_in_middle(self):
        """May be two elisions, if in middle of long page set."""
        p = self.pager(self.qs(150), 10, 8)
        self.assertEqual(list(p.display_pages()), [1, 2, None, 6, 7, 8, 9, 10, None, 14, 15])


    def test_total(self):
        """Total number of objects is count of queryset."""
        p = self.pager(self.qs(10), 20, 1)
        self.assertEqual(p.total, 10)


    def test_total_cached(self):
        """Checking total twice doesn't query db for count twice."""
        qs = self.qs(10)
        p = self.pager(qs, 20, 1)

        p.total
        p.total

        self.assertEqual(qs.count.call_count, 1)


    def test_objects(self):
        """.objects is list of objects on current page."""
        products = [
            self.F.ProductFactory.create(name="Product {0}".format(i))
            for i in range(1, 5)
            ]
        p = self.pager(products[0].__class__.objects.all(), 3, 1)

        self.assertEqual(list(p.objects), products[:3])


    def test_objects_empty(self):
        """.objects can be empty."""
        p = self.pager(self.qs(0), 3, 1)

        self.assertEqual(list(p.objects), [])


    def test_sliced_queryset_cached(self):
        """Accessing .objects twice does not query db twice."""
        qs = self.qs(10)
        p = self.pager(qs, 5, 1)

        p.objects
        p.objects

        self.assertEqual(qs.__getitem__.call_count, 1)


    def test_num_pages_empty(self):
        """With no objects, there's still one page."""
        self.assertEqual(self.pager(self.qs(0), 20, 1).num_pages, 1)


    def test_num_pages_less_than_size(self):
        """With less than one page's objects, there's one page."""
        self.assertEqual(self.pager(self.qs(15), 20, 1).num_pages, 1)


    def test_num_pages_equal_to_size(self):
        """With exactly one page's objects, there's one page."""
        self.assertEqual(self.pager(self.qs(20), 20, 1).num_pages, 1)


    def test_num_pages_more_than_size(self):
        """With more than one page's objects, there's one page."""
        self.assertEqual(self.pager(self.qs(21), 20, 1).num_pages, 2)


    def test_low_empty(self):
        """With no objects, the first displayed is the zero-th."""
        self.assertEqual(self.pager(self.qs(0), 20, 1).low, 0)


    def test_high_empty(self):
        """With no objects, the last displayed is the zero-th."""
        self.assertEqual(self.pager(self.qs(0), 20, 1).high, 0)


    def test_low_less_than_size(self):
        """With only one page, the first displayed is the first."""
        self.assertEqual(self.pager(self.qs(15), 20, 1).low, 1)


    def test_high_less_than_size(self):
        """With only one page, the last displayed is the last."""
        self.assertEqual(self.pager(self.qs(15), 20, 1).high, 15)


    def test_low_equal_to_size(self):
        """With exactly one page's objects, first displayed is the first."""
        self.assertEqual(self.pager(self.qs(20), 20, 1).low, 1)


    def test_high_equal_to_size(self):
        """With exactly one page's objects, last displayed is the last."""
        self.assertEqual(self.pager(self.qs(20), 20, 1).high, 20)


    def test_low_more_than_size_page1(self):
        """With more than one page, first on first page is the first."""
        self.assertEqual(self.pager(self.qs(21), 20, 1).low, 1)


    def test_high_more_than_size_page1(self):
        """With more than one page, last on first page is the page size-th."""
        self.assertEqual(self.pager(self.qs(21), 20, 1).high, 20)


    def test_low_more_than_size_page2(self):
        """With two pages, first on second page is page-size+1-th."""
        self.assertEqual(self.pager(self.qs(21), 20, 2).low, 21)


    def test_high_more_than_size_page2(self):
        """With two pages, last on second page is the last."""
        self.assertEqual(self.pager(self.qs(21), 20, 2).high, 21)


    def test_prev_none(self):
        """If there is no previous page, .prev is None."""
        self.assertEqual(self.pager(self.qs(5), 20, 1).prev, None)


    def test_prev(self):
        "If there is a previous page, .prev is its number."""
        self.assertEqual(self.pager(self.qs(25), 20, 2).prev, 1)


    def test_next_none(self):
        """If there is no next page, .next is None."""
        self.assertEqual(self.pager(self.qs(5), 20, 1).next, None)


    def test_next(self):
        """If there is a next page, .next is its number."""
        self.assertEqual(self.pager(self.qs(25), 20, 1).next, 2)



class TestPositiveInteger(case.TestCase):
    """Tests for ``positive_integer`` function."""
    @property
    def func(self):
        """The function under test."""
        from moztrap.view.lists.pagination import positive_integer
        return positive_integer


    def test_negative(self):
        """Negative numbers are coerced to 1."""
        self.assertEqual(self.func(-1, 5), 1)


    def test_zero(self):
        """Zero is coerced to 1."""
        self.assertEqual(self.func(0, 5), 1)


    def test_positive(self):
        """Positive in-bounds numbers are returned as-is."""
        self.assertEqual(self.func(1, 5), 1)


    def test_none(self):
        """None is coerced to the given default."""
        self.assertEqual(self.func(None, 5), 5)


    def test_string(self):
        """Non-numbers are coerced to the given default."""
        self.assertEqual(self.func("blah", 5), 5)

########NEW FILE########
__FILENAME__ = test_sort
"""
Tests for sorting utilities.

"""
from mock import Mock

from django.template.response import TemplateResponse
from django.test import RequestFactory

from tests import case

from ...utils import Url



class SortDecoratorTest(case.DBTestCase):
    @property
    def sort(self):
        """The decorator factory under test."""
        from moztrap.view.lists.sort import sort
        return sort


    def on_response(self, response, decorator=None, request=None):
        """Apply given decorator to dummy view, return given response."""
        decorator = decorator or self.sort("ctx_name")
        request = request or RequestFactory().get("/")

        @decorator
        def view(request):
            return response

        return view(request)


    def on_template_response(self, context, **kwargs):
        """Run TemplateResponse with given context through decorated view."""
        request = kwargs.setdefault("request", RequestFactory().get("/"))

        res = TemplateResponse(request, "some/template.html", context)

        return self.on_response(res, **kwargs)


    def test_returns_non_template_response(self):
        """Returns a non-TemplateResponse unmodified, without error."""
        res = self.on_response("blah")

        self.assertEqual(res, "blah")


    def test_uses_wraps(self):
        """Preserves docstring and name of original view func."""
        @self.sort("ctx_name")
        def myview(request, some_id):
            """docstring"""

        self.assertEqual(myview.func_name, "myview")
        self.assertEqual(myview.func_doc, "docstring")


    def test_passes_on_args(self):
        """Arguments are passed on to original view func."""
        record = []

        @self.sort("ctx_name")
        def myview(request, *args, **kwargs):
            record.extend([args, kwargs])

        myview(RequestFactory().get("/"), "a", b=2)

        self.assertEqual(record, [("a",), {"b": 2}])


    def test_orders_queryset(self):
        """Orders queryset in context according to sort params."""
        req = RequestFactory().get(
            "/a/url", {"sortfield": "name", "sortdirection": "asc"})
        qs = Mock()
        self.on_template_response({"ctx_name": qs}, request=req)

        qs.order_by.assert_called_with("name")


    def test_bad_sort_field(self):
        """Silently ignores bad sort field."""
        req = RequestFactory().get(
            "/a/url", {"sortfield": "foo", "sortdirection": "asc"})
        from moztrap.model.core.models import Product  # has no "foo" field

        qs = Product.objects.all()
        res = self.on_template_response({"ctx_name": qs}, request=req)

        self.assertEqual(list(res.context_data["ctx_name"]), [])


    def test_no_sort(self):
        """Handles lack of querystring sort params."""
        qs = Mock()
        self.on_template_response({"ctx_name": qs})

        qs.order_by.assert_called_with("-created_on")


    def test_sort_defaults(self):
        """Decorator factory accepts default sort field and direction."""
        dec = self.sort(
            "ctx_name", defaultfield="name", defaultdirection="desc")
        qs = Mock()
        self.on_template_response({"ctx_name": qs}, decorator=dec)

        qs.order_by.assert_called_with("-name")


    def test_sort_object_in_context(self):
        """Places Sort object in context as "sort"."""
        req = RequestFactory().get(
            "/a/url", {"sortfield": "name", "sortdirection": "desc"})
        res = self.on_template_response({"ctx_name": Mock()}, request=req)

        sort = res.context_data["sort"]
        self.assertEqual(sort.field, "name")
        self.assertEqual(sort.direction, "desc")



class SortTest(case.TestCase):
    def cls(self, full_path, GET):
        """Construct mock request; instantiate and return Sort object."""
        request = Mock()
        request.GET = GET
        request.get_full_path.return_value = full_path

        from moztrap.view.lists.sort import Sort
        return Sort(request)


    def test_attribute_defaults(self):
        """Sort defaults to descending last-modified date."""
        s = self.cls("path", {})

        self.assertEqual(s.field, "created_on")
        self.assertEqual(s.direction, "desc")


    def test_default_direction(self):
        """For any specified field, sort direction defaults to ascending."""
        s = self.cls("path", {"sortfield": "name"})
        self.assertEqual(s.field, "name")
        self.assertEqual(s.direction, "asc")


    def test_attributes(self):
        """Sort class pulls field and direction attrs from request.GET."""
        s = self.cls("path", {"sortfield": "name", "sortdirection": "desc"})
        self.assertEqual(s.field, "name")
        self.assertEqual(s.direction, "desc")


    def test_url_same_field(self):
        """url property returns opposite sort direction for current field."""
        s = self.cls("path", {"sortfield": "name", "sortdirection": "asc"})
        self.assertEqual(
            Url(s.url("name")), Url("path?sortfield=name&sortdirection=desc"))


    def test_url_other_field(self):
        """url property returns default sort direction for any other field."""
        s = self.cls("path", {"sortfield": "name", "sortdirection": "desc"})
        self.assertEqual(
            Url(s.url("status")),
            Url("path?sortfield=status&sortdirection=asc"))


    def test_dir_same_field(self):
        """dir property returns current sort direction for current field."""
        s = self.cls("path", {"sortfield": "name", "sortdirection": "asc"})
        self.assertEqual(s.dir("name"), "asc")


    def test_dir_other_field(self):
        """dir property returns nothing for any other field."""
        s = self.cls("path", {"sortfield": "name", "sortdirection": "desc"})
        self.assertEqual(s.dir("status"), "")


    def test_order_by_desc(self):
        """order_by property return "-field" for descending sort on "field"."""
        s = self.cls("path", {"sortfield": "name", "sortdirection": "desc"})
        self.assertEqual(s.order_by, ("-name",))


    def test_order_by_asc(self):
        """order_by property returns "field" for ascending sort on "field"."""
        s = self.cls("path", {"sortfield": "name", "sortdirection": "asc"})
        self.assertEqual(s.order_by, ("name",))


    def test_order_by_multiple_desc(self):
        """order_by property prepends - to each field if multiple."""
        s = self.cls("path", {"sortfield": "one,two", "sortdirection": "desc"})
        self.assertEqual(s.order_by, ("-one", "-two"))


    def test_order_by_multiple_asc(self):
        """order_by property splits field by comma and returns multiple."""
        s = self.cls("path", {"sortfield": "one,two", "sortdirection": "asc"})
        self.assertEqual(s.order_by, ("one", "two"))

########NEW FILE########
__FILENAME__ = test_forms
"""
Tests for case management forms.

"""
from django.core.files.uploadedfile import SimpleUploadedFile
from django.core.urlresolvers import reverse
from django.utils.datastructures import MultiValueDict

from moztrap import model
from tests import case



class AddCaseFormTest(case.DBTestCase):
    """Tests for add-case form."""
    def setUp(self):
        """All add-case tests require at least one product version."""
        self.productversion = self.F.ProductVersionFactory.create(version="1.0")
        self.product = self.productversion.product


    @property
    def user(self):
        """A lazily-created user."""
        if not hasattr(self, "_user"):
            self._user = self.F.UserFactory.create()
        return self._user


    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.cases.forms import AddCaseForm
        return AddCaseForm


    def get_form_data(self):
        defaults = {
            "product": [self.product.id],
            "productversion": [self.productversion.id],
            "priority": [3],
            "idprefix": ["pref"],
            "name": ["Can register."],
            "description": ["A user can sign up for the site."],
            "steps-TOTAL_FORMS": [1],
            "steps-INITIAL_FORMS": [0],
            "steps-0-instruction": ["Fill in form and submit."],
            "steps-0-expected": ["You should get a welcome email."],
            "status": ["active"],
            }
        return MultiValueDict(defaults)


    def test_product_id(self):
        """Product choices render data-product-id attr."""
        html = unicode(self.form()["product"])

        self.assertIn('data-product-id="{0}"'.format(self.product.id), html)


    def test_productversion_product_id(self):
        """Product version choices render data-product-id attr."""
        html = unicode(self.form()["productversion"])

        self.assertIn('data-product-id="{0}"'.format(self.product.id), html)


    def test_success(self):
        """Can add a test case."""
        form = self.form(data=self.get_form_data())

        cv = form.save().versions.get()

        self.assertEqual(cv.name, "Can register.")


    def test_bad_priority(self):
        """Can add a test case bad priority defaults to None."""
        data = self.get_form_data()
        data["priority"] = ["foo"]

        form = self.form(data=data)

        cv = form.save().versions.get()

        self.assertEqual(cv.case.priority, None)


    def test_created_by(self):
        """If user is provided, created objects have created_by set."""
        form = self.form(data=self.get_form_data(), user=self.user)

        cv = form.save().versions.get()

        self.assertEqual(cv.case.created_by, self.user)
        self.assertEqual(cv.created_by, self.user)
        self.assertEqual(cv.steps.get().created_by, self.user)


    def test_initial_state(self):
        """New cases should default to active state."""
        form = self.form()

        self.assertEqual(form["status"].value(), "active")
        self.assertEqual(form["priority"].value(), None)


    def test_wrong_product_version(self):
        """Selecting version of wrong product results in validation error."""
        data = self.get_form_data()
        data["product"] = self.F.ProductFactory.create().id

        form = self.form(data=data)

        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors,
            {'__all__': [u'Must select a version of the correct product.']}
            )


    def test_no_suite(self):
        """If no manage-suite-cases perm, no suite field."""
        self.assertNotIn("initial", self.form().fields)


    def test_suite(self):
        """Can pick an initial suite for case to be in (with right perms)."""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_suite_cases"))
        suite = self.F.SuiteFactory.create(product=self.product)

        data = self.get_form_data()
        data["suite"] = suite.id

        case = self.form(data=data, user=self.user).save()

        self.assertEqual(list(case.suites.all()), [suite])


    def test_initial_suite_order(self):
        """Adding a new case to a suite adds it in last place for the suite"""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_suite_cases"))
        suite = self.F.SuiteFactory.create(product=self.product)
        c1 = self.F.CaseFactory()
        c2 = self.F.CaseFactory()
        self.F.SuiteCaseFactory(
            suite=suite,
            case=c1,
            order=0)
        self.F.SuiteCaseFactory(
            suite=suite,
            case=c2,
            order=1)

        data = self.get_form_data()
        data["suite"] = suite.id

        newcase = self.form(data=data, user=self.user).save()

        self.assertEqual(list(newcase.suites.all()), [suite])

        self.assertEqual(
            [x.case for x in suite.cases.through.objects.order_by("order")],
            [c1, c2, newcase])


    def test_wrong_suite_product(self):
        """Selecting suite from wrong product results in validation error."""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_suite_cases"))
        suite = self.F.SuiteFactory.create()  # some other product

        data = self.get_form_data()
        data["suite"] = suite.id

        form = self.form(data=data, user=self.user)

        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors,
            {"__all__": [u"Must select a suite for the correct product."]}
            )


    def test_tag_autocomplete_url(self):
        """Tag autocomplete field renders data-autocomplete-url."""
        self.assertIn(
            'data-autocomplete-url="{0}"'.format(
                reverse("manage_tags_autocomplete")),
            unicode(self.form()["add_tags"])
            )


    def test_tag(self):
        """Can tag a new case with some existing tags."""
        t1 = self.F.TagFactory.create(name="foo")
        t2 = self.F.TagFactory.create(name="bar")
        data = self.get_form_data()
        data.setlist("tag-tag", [t1.id, t2.id])

        caseversion = self.form(data=data).save().versions.get()

        self.assertEqual(list(caseversion.tags.all()), [t1, t2])


    def test_new_tag(self):
        """Can create a new case with a new tag, with correct perm."""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_tags"))
        data = self.get_form_data()
        data.setlist("tag-newtag", ["baz"])

        caseversion = self.form(data=data, user=self.user).save().versions.get()

        self.assertEqual([t.name for t in caseversion.tags.all()], ["baz"])


    def test_new_tag_requires_manage_tags_permission(self):
        """Cannot add new tag without correct permission."""
        data = self.get_form_data()
        data.setlist("tag-newtag", ["baz"])

        form = self.form(data=data)

        self.assertEqual(
            form.errors["__all__"],
            ["You do not have permission to create new tags."]
            )


    def test_data_allow_new(self):
        """add_tag field has data-allow-new set true with manage_tags perm."""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_tags"))

        form = self.form(user=self.user)

        self.assertEqual(
            form.fields["add_tags"].widget.attrs["data-allow-new"], "true")


    def test_no_allow_new(self):
        """add_tag field has data-allow-new false without manage_tags perm."""
        form = self.form(user=self.user)

        self.assertEqual(
            form.fields["add_tags"].widget.attrs["data-allow-new"], "false")


    def test_attachment(self):
        """Can add an attachment to the new case."""
        files = MultiValueDict(
            {"add_attachment": [SimpleUploadedFile("name.txt", "contents")]}
            )

        caseversion = self.form(
            data=self.get_form_data(), files=files).save().versions.get()

        self.assertEqual(len(caseversion.attachments.all()), 1)


    def test_and_later_versions(self):
        """Can add multiple versions of a test case at once."""
        self.F.ProductVersionFactory.create(
            product=self.product, version="0.5")
        newer_version = self.F.ProductVersionFactory.create(
            product=self.product, version="1.1")

        # these versions from a different product should not be included
        other_product = self.F.ProductFactory.create(name="Other Product")
        self.F.ProductVersionFactory.create(version="2", product=other_product)
        self.F.ProductVersionFactory.create(version="3", product=other_product)
        self.F.ProductVersionFactory.create(version="4", product=other_product)

        data = self.get_form_data()
        data["and_later_versions"] = 1

        case = self.form(data=data).save()

        self.assertEqual(
            [v.productversion for v in case.versions.all()],
            [self.productversion, newer_version]
            )



class AddBulkCasesFormTest(case.DBTestCase):
    """Tests for add-bulk-case form."""
    def setUp(self):
        """All add-bulk-case tests require at least one product version."""
        self.productversion = self.F.ProductVersionFactory.create(version="1.0")
        self.product = self.productversion.product


    @property
    def user(self):
        """A lazily-created user."""
        if not hasattr(self, "_user"):
            self._user = self.F.UserFactory.create()
        return self._user


    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.cases.forms import AddBulkCaseForm
        return AddBulkCaseForm


    def get_form_data(self):
        defaults = {
            "product": [self.product.id],
            "productversion": [self.productversion.id],
            "cases": [
                "Test that I can register\n"
                "this is the description\n"
                "when I fill in form and submit\n"
                "then I get a welcome email\n"
                ],
            "status": ["active"],
            }
        return MultiValueDict(defaults)


    def test_success(self):
        """Can add a test case."""
        form = self.form(data=self.get_form_data())

        cv = form.save()[0].versions.get()

        self.assertEqual(cv.name, "Test that I can register")
        self.assertEqual(cv.case.product, self.product)
        self.assertEqual(cv.productversion, self.productversion)
        self.assertEqual(cv.description, "this is the description")
        self.assertEqual(
            [(s.instruction, s.expected) for s in cv.steps.all()],
            [("when I fill in form and submit", "then I get a welcome email")]
            )
        self.assertEqual(cv.status, "active")


    def test_parse_error(self):
        """Error in bulk case text parsing."""
        data = self.get_form_data()
        data["cases"] = "Foo"

        form = self.form(data=data)

        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors["cases"], [u"Expected 'Test that ...', not 'Foo'"])


    def test_created_by(self):
        """If user is provided, created objects have created_by set."""
        form = self.form(data=self.get_form_data(), user=self.user)

        cv = form.save()[0].versions.get()

        self.assertEqual(cv.case.created_by, self.user)
        self.assertEqual(cv.created_by, self.user)
        self.assertEqual(cv.steps.get().created_by, self.user)


    def test_wrong_product_version(self):
        """Selecting version of wrong product results in validation error."""
        data = self.get_form_data()
        data["product"] = self.F.ProductFactory.create().id

        form = self.form(data=data)

        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors,
            {'__all__': [u'Must select a version of the correct product.']}
            )


    def test_no_suite(self):
        """If no manage-suite-cases perm, no suite field."""
        self.assertNotIn("suite", self.form().fields)


    def test_suite(self):
        """Can pick an initial suite for case to be in (with right perms)."""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_suite_cases"))
        suite = self.F.SuiteFactory.create(product=self.product)

        data = self.get_form_data()
        data["suite"] = suite.id

        case = self.form(data=data, user=self.user).save()[0]

        self.assertEqual(list(case.suites.all()), [suite])


    def test_initial_suite_order(self):
        """Adding a new case to a suite adds it in last place for the suite"""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_suite_cases"))
        suite = self.F.SuiteFactory.create(product=self.product)
        c1 = self.F.CaseFactory()
        c2 = self.F.CaseFactory()
        self.F.SuiteCaseFactory(
            suite=suite,
            case=c1,
            order=0)
        self.F.SuiteCaseFactory(
            suite=suite,
            case=c2,
            order=1)

        data = self.get_form_data()
        data["suite"] = suite.id

        newcase = self.form(data=data, user=self.user).save()[0]

        self.assertEqual(list(newcase.suites.all()), [suite])

        self.assertEqual(
            [x.case for x in suite.cases.through.objects.order_by("order")],
            [c1, c2, newcase])


    def test_wrong_suite_product(self):
        """Selecting suite from wrong product results in validation error."""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_suite_cases"))
        suite = self.F.SuiteFactory.create()  # some other product

        data = self.get_form_data()
        data["suite"] = suite.id

        form = self.form(data=data, user=self.user)

        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors,
            {"__all__": [u"Must select a suite for the correct product."]}
            )


    def test_tag(self):
        """Can tag a new case with some existing tags."""
        t1 = self.F.TagFactory.create(name="foo")
        t2 = self.F.TagFactory.create(name="bar")
        data = self.get_form_data()
        data.setlist("tag-tag", [t1.id, t2.id])

        caseversion = self.form(data=data).save()[0].versions.get()

        self.assertEqual(list(caseversion.tags.all()), [t1, t2])


    def test_new_tag(self):
        """Can create a new case with a new tag, with correct perm."""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_tags"))
        data = self.get_form_data()
        data.setlist("tag-newtag", ["baz"])

        caseversion = self.form(data=data, user=self.user).save(
            )[0].versions.get()

        self.assertEqual([t.name for t in caseversion.tags.all()], ["baz"])


    def test_new_tag_requires_manage_tags_permission(self):
        """Cannot add new tag without correct permission."""
        data = self.get_form_data()
        data.setlist("tag-newtag", ["baz"])

        form = self.form(data=data)

        self.assertEqual(
            form.errors["__all__"],
            ["You do not have permission to create new tags."]
            )


    def test_data_allow_new(self):
        """add_tag field has data-allow-new set true with manage_tags perm."""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_tags"))

        form = self.form(user=self.user)

        self.assertEqual(
            form.fields["add_tags"].widget.attrs["data-allow-new"], "true")


    def test_no_allow_new(self):
        """add_tag field has data-allow-new false without manage_tags perm."""
        form = self.form(user=self.user)

        self.assertEqual(
            form.fields["add_tags"].widget.attrs["data-allow-new"], "false")


    def test_and_later_versions(self):
        """Can add multiple versions of a test case at once."""
        self.F.ProductVersionFactory.create(
            product=self.product, version="0.5")
        newer_version = self.F.ProductVersionFactory.create(
            product=self.product, version="1.1")

        # these versions from a different product should not be included
        other_product = self.F.ProductFactory.create(name="Other Product")
        self.F.ProductVersionFactory.create(version="2", product=other_product)
        self.F.ProductVersionFactory.create(version="3", product=other_product)
        self.F.ProductVersionFactory.create(version="4", product=other_product)

        data = self.get_form_data()
        data["and_later_versions"] = 1

        case = self.form(data=data).save()[0]

        self.assertEqual(
            [v.productversion for v in case.versions.all()],
            [self.productversion, newer_version]
            )



class EditCaseVersionFormTest(case.DBTestCase):
    """Tests for EditCaseVersionForm."""
    @property
    def user(self):
        """A lazily-created user."""
        if not hasattr(self, "_user"):
            self._user = self.F.UserFactory.create()
        return self._user


    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.cases.forms import EditCaseVersionForm
        return EditCaseVersionForm


    def test_initial(self):
        """Initial data is populated accurately."""
        cv = self.F.CaseVersionFactory.create(
            case__idprefix="pref",
            case__priority=3,
            name="a name",
            description="a desc",
            status="active",
            )
        self.F.CaseStepFactory.create(
            caseversion=cv, instruction="do this", expected="see that")

        form = self.form(instance=cv)

        self.assertEqual(
            form.initial,
            {
                "name": "a name",
                "description": "a desc",
                "idprefix": "pref",
                "priority": 3,
                "status": "active",
                "cc_version": cv.cc_version,
                }
            )
        self.assertEqual(
            form.steps_formset.forms[0].initial,
            {
                "caseversion": cv.id,
                "instruction": "do this",
                "expected": "see that",
                }
            )


    def test_save_edits(self):
        """Can edit basic data and steps and save."""
        cv = self.F.CaseVersionFactory.create(
            name="a name", description="a desc", status="draft")
        step = self.F.CaseStepFactory.create(
            caseversion=cv, instruction="do this", expected="see that")

        form = self.form(
            instance=cv,
            data=MultiValueDict(
                {
                    "name": ["new name"],
                    "description": ["new desc"],
                    "idprefix": ["pref"],
                    "priority": [1],
                    "status": ["active"],
                    "cc_version": str(cv.cc_version),
                    "steps-TOTAL_FORMS": ["2"],
                    "steps-INITIAL_FORMS": ["1"],
                    "steps-0-id": [""],
                    "steps-0-instruction": ["new step"],
                    "steps-0-expected": [""],
                    "steps-1-id": [str(step.id)],
                    "steps-1-instruction": ["do this instead"],
                    "steps-1-expected": [""],
                    }
                )
            )

        cv = form.save()
        cv = self.refresh(cv)

        self.assertEqual(cv.name, "new name")
        self.assertEqual(cv.case.priority, 1)
        self.assertEqual(cv.description, "new desc")
        self.assertEqual(cv.status, "active")
        self.assertEqual(
            [s.instruction for s in cv.steps.all()],
            ["new step", "do this instead"])


    def test_save_edits_bad_priority(self):
        """Can edit basic data and steps and save, priority set to None."""
        cv = self.F.CaseVersionFactory.create(
            name="a name", description="a desc", status="draft")
        step = self.F.CaseStepFactory.create(
            caseversion=cv, instruction="do this", expected="see that")

        form = self.form(
            instance=cv,
            data=MultiValueDict(
                {
                    "name": ["new name"],
                    "description": ["new desc"],
                    "idprefix": ["pref"],
                    "priority": ["foo"],
                    "status": ["active"],
                    "cc_version": str(cv.cc_version),
                    "steps-TOTAL_FORMS": ["2"],
                    "steps-INITIAL_FORMS": ["1"],
                    "steps-0-id": [""],
                    "steps-0-instruction": ["new step"],
                    "steps-0-expected": [""],
                    "steps-1-id": [str(step.id)],
                    "steps-1-instruction": ["do this instead"],
                    "steps-1-expected": [""],
                    }
                )
            )

        cv = form.save()
        cv = self.refresh(cv)

        self.assertEqual(cv.name, "new name")
        self.assertEqual(cv.case.priority, None)
        self.assertEqual(cv.description, "new desc")
        self.assertEqual(cv.status, "active")
        self.assertEqual(
            [s.instruction for s in cv.steps.all()],
            ["new step", "do this instead"])


    def test_save_tags(self):
        """Can add/remove tags."""
        self.user.user_permissions.add(
            model.Permission.objects.get(codename="manage_tags"))

        cv = self.F.CaseVersionFactory.create()

        t1 = self.F.TagFactory.create(name="one")
        t2 = self.F.TagFactory.create(name="two")
        t3 = self.F.TagFactory.create(name="three")

        cv.tags.add(t1, t2)

        form = self.form(
            instance=cv,
            user=self.user,
            data=MultiValueDict(
                {
                    "name": ["new name"],
                    "description": ["new desc"],
                    "status": ["active"],
                    "cc_version": str(cv.cc_version),
                    "tag-tag": [t2.id, t3.id],
                    "tag-newtag": ["foo"],
                    "steps-TOTAL_FORMS": ["0"],
                    "steps-INITIAL_FORMS": ["0"],
                    }
                )
            )

        cv = form.save()

        self.assertEqual(
            set([t.name for t in cv.tags.all()]),
            set(["two", "three", "foo"])
            )


    def test_save_attachments(self):
        """Can add/remove attachments."""

        cv = self.F.CaseVersionFactory.create()

        a1 = self.F.CaseAttachmentFactory.create(
            caseversion=cv, name="Foo1")
        self.F.CaseAttachmentFactory.create(
            caseversion=cv, name="Foo2")

        form = self.form(
            instance=cv,
            user=self.user,
            data=MultiValueDict(
                {
                    "name": ["new name"],
                    "description": ["new desc"],
                    "status": ["active"],
                    "cc_version": [str(cv.cc_version)],
                    "remove-attachment": [str(a1.id)],
                    "steps-TOTAL_FORMS": ["0"],
                    "steps-INITIAL_FORMS": ["0"],
                    }
                ),
            files=MultiValueDict(
                {"add_attachment": [SimpleUploadedFile("Foo3", "contents")]})
            )

        cv = form.save()

        self.assertEqual(
            set([ca.name for ca in cv.attachments.all()]),
            set(["Foo2", "Foo3"])
            )


    def test_concurrent_save(self):
        """Saving edits to out-of-date version returns None and sets error."""
        cv = self.F.CaseVersionFactory.create(
            name="a name", description="a desc", status="draft")
        submitted_version = cv.cc_version
        cv.save()  # increments the concurrency-control version

        form = self.form(
            instance=cv,
            data=MultiValueDict(
                {
                    "name": ["new name"],
                    "description": ["new desc"],
                    "status": ["active"],
                    "cc_version": str(submitted_version),
                    "steps-TOTAL_FORMS": ["0"],
                    "steps-INITIAL_FORMS": ["0"],
                    }
                )
            )

        self.assertIsNone(form.save_if_valid())
        self.assertIn("Another user saved changes", form.errors["__all__"][0])



class StepFormSetTest(case.DBTestCase):
    """Tests for StepFormSet."""
    @property
    def formset(self):
        """The class under test."""
        from moztrap.view.manage.cases.forms import StepFormSet
        return StepFormSet


    def bound(self, data, instance=None):
        """Return a formset, with instance, bound to data."""
        if instance is None:
            instance = self.F.CaseVersionFactory.create()
        return self.formset(data=data, instance=instance)


    def assertSteps(self, caseversion, steps):
        """Assert ``caseversion`` has ``steps``, as (inst, exp) tuples."""
        self.assertEqual(
            [(s.instruction, s.expected) for s in caseversion.steps.all()],
            steps)


    def test_existing(self):
        """Displays forms for existing steps when unbound."""
        step = self.F.CaseStepFactory.create(instruction="do this")
        fs = self.formset(instance=step.caseversion)

        self.assertEqual(len(fs), 1)
        self.assertEqual(list(fs)[0].initial["instruction"], "do this")


    def test_add_new(self):
        """Can add new steps."""
        fs = self.bound(
            {
                "steps-TOTAL_FORMS": "1",
                "steps-INITIAL_FORMS": "0",
                "steps-0-id": "",
                "steps-0-instruction": "do this",
                "steps-0-expected": "see that",
                }
            )
        fs.save()

        self.assertSteps(fs.instance, [("do this", "see that")])


    def test_unknown_id_adds_new(self):
        """Unknown step id just creates a new step."""
        fs = self.bound(
            {
                "steps-TOTAL_FORMS": "1",
                "steps-INITIAL_FORMS": "0",
                "steps-0-id": "27",
                "steps-0-instruction": "do this",
                "steps-0-expected": "see that",
                }
            )
        fs.save()

        self.assertSteps(fs.instance, [("do this", "see that")])


    def test_bad_id_adds_new(self):
        """Unknown step id just creates a new step."""
        fs = self.bound(
            {
                "steps-TOTAL_FORMS": "1",
                "steps-INITIAL_FORMS": "0",
                "steps-0-id": "foo",
                "steps-0-instruction": "do this",
                "steps-0-expected": "see that",
                }
            )
        fs.save()

        self.assertSteps(fs.instance, [("do this", "see that")])


    def test_edit_existing(self):
        """Can edit existing steps."""
        step = self.F.CaseStepFactory.create()
        fs = self.bound(
            {
                "steps-TOTAL_FORMS": "1",
                "steps-INITIAL_FORMS": "1",
                "steps-0-id": str(step.id),
                "steps-0-instruction": "do this",
                "steps-0-expected": "see that",
                },
            instance=step.caseversion,
            )
        fs.save()

        self.assertSteps(fs.instance, [("do this", "see that")])


    def test_delete_existing(self):
        """Can delete existing steps."""
        step = self.F.CaseStepFactory.create()
        fs = self.bound(
            {
                "steps-TOTAL_FORMS": "0",
                "steps-INITIAL_FORMS": "1",  # JS doesn't touch this
                },
            instance=step.caseversion,
            )
        fs.save()

        self.assertSteps(fs.instance, [])


    def test_delete_existing_and_add_new(self):
        """Can delete an existing step and put a new one in its place."""
        step = self.F.CaseStepFactory.create()
        fs = self.bound(
            {
                "steps-TOTAL_FORMS": "1",
                "steps-INITIAL_FORMS": "1",  # JS doesn't touch this
                "steps-0-id": "",
                "steps-0-instruction": "do this",
                "steps-0-expected": "see that",
                },
            instance=step.caseversion,
            )
        fs.save()

        self.assertSteps(fs.instance, [("do this", "see that")])


    def test_intersperse_new(self):
        """Can add a new step in between existing ones."""
        step1 = self.F.CaseStepFactory.create(instruction="one")
        step2 = self.F.CaseStepFactory.create(
            instruction="two", caseversion=step1.caseversion)
        fs = self.bound(
            {
                "steps-TOTAL_FORMS": "3",
                "steps-INITIAL_FORMS": "2",
                "steps-0-id": str(step1.id),
                "steps-0-instruction": "one",
                "steps-0-expected": "",
                "steps-1-id": "",
                "steps-1-instruction": "new",
                "steps-1-expected": "",
                "steps-2-id": str(step2.id),
                "steps-2-instruction": "three",
                "steps-2-expected": "",
                },
            instance=step1.caseversion,
            )
        fs.save()

        self.assertSteps(fs.instance, [("one", ""), ("new", ""), ("three", "")])


    def test_marks_created_by(self):
        """Steps are saved with created-by data."""
        u = self.F.UserFactory.create()
        fs = self.bound(
            {
                "steps-TOTAL_FORMS": "1",
                "steps-INITIAL_FORMS": "0",
                "steps-0-id": "",
                "steps-0-instruction": "do this",
                "steps-0-expected": "see that",
                },
            )
        fs.save(user=u)

        self.assertEqual(fs.instance.steps.get().created_by, u)


    def test_marks_modified_by(self):
        """Steps are saved with modified-by data."""
        u = self.F.UserFactory.create()
        step = self.F.CaseStepFactory.create()
        fs = self.bound(
            {
                "steps-TOTAL_FORMS": "1",
                "steps-INITIAL_FORMS": "1",
                "steps-0-id": str(step.id),
                "steps-0-instruction": "do this",
                "steps-0-expected": "see that",
                },
            instance=step.caseversion,
            )
        fs.save(user=u)

        self.assertEqual(self.refresh(step).modified_by, u)

########NEW FILE########
__FILENAME__ = test_views
# coding: utf-8
"""
Tests for case management views.

"""
from django.conf import settings
from django.core.urlresolvers import reverse

from tests import case



class CasesTest(case.view.manage.ListViewTestCase,
                case.view.ListFinderTests,
                case.view.manage.MTModelListTests,
                case.view.manage.StatusListTests,
                case.view.NoCacheTest,
                ):
    """Test for cases manage list view."""
    form_id = "manage-cases-form"
    perm = "manage_cases"


    @property
    def factory(self):
        """The model factory for this manage list."""
        return self.F.CaseVersionFactory


    @property
    def url(self):
        """Shortcut for manage-cases url."""
        return reverse("manage_cases")


    def test_create_link(self):
        """With proper perm, create links are there."""
        self.add_perm("create_cases")
        res = self.get()

        self.assertElement(res.html, "a", "create", count=2)


    def test_lists_all_versions(self):
        """Lists all versions of each case."""
        cv = self.F.CaseVersionFactory.create(productversion__version="1.0")
        cv2 = self.F.CaseVersionFactory.create(
            case=cv.case,
            productversion__product=cv.productversion.product,
            productversion__version="2.0")

        res = self.get()

        self.assertIdInList(res, "caseversion-id-{0}".format(cv.id))
        self.assertIdInList(res, "caseversion-id-{0}".format(cv2.id))


    def test_filter_by_status(self):
        """Can filter by status."""
        self.F.CaseVersionFactory.create(status="draft", name=u"Case 1 ùê")
        self.F.CaseVersionFactory.create(status="active", name=u"Case 2 ùê")

        res = self.get(params={"filter-status": "draft"})

        self.assertInList(res, u"Case 1 ùê")
        self.assertNotInList(res, u"Case 2 ùê")


    def test_filter_by_id(self):
        """Can filter by id."""
        cv1 = self.F.CaseVersionFactory.create(name=u"Case 1 ùê")
        self.F.CaseVersionFactory.create(name=u"Case 2 ùê")

        res = self.get(params={"filter-id": cv1.case.id})

        self.assertInList(res, u"Case 1 ùê")
        self.assertNotInList(res, u"Case 2 ùê")


    def test_filter_by_bad_id(self):
        """Attempt to filter by non-integer id returns no items."""
        self.F.CaseVersionFactory.create(name=u"Case 1 ùê")

        res = self.get(params={"filter-id": "foo"})

        self.assertNotInList(res, u"Case 1 ùê")


    def test_filter_by_name(self):
        """Can filter by name."""
        self.F.CaseVersionFactory.create(name=u"Case 1 ùê")
        self.F.CaseVersionFactory.create(name=u"Case 2 ùê")

        res = self.get(params={"filter-name": "1"})

        self.assertInList(res, u"Case 1 ùê")
        self.assertNotInList(res, u"Case 2 ùê")


    def test_filter_by_tag(self):
        """Can filter by tag."""
        t = self.F.TagFactory.create()
        cv = self.F.CaseVersionFactory.create(name="Case 1")
        cv.tags.add(t)
        self.F.CaseVersionFactory.create(name="Case 2")

        res = self.get(params={"filter-tag": t.id})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_product(self):
        """Can filter by product."""
        cv = self.F.CaseVersionFactory.create(name="Case 1")
        self.F.CaseVersionFactory.create(name="Case 2")

        res = self.get(params={"filter-product": cv.case.product.id})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_productversion(self):
        """Can filter by product version; no implicit filter by latest."""
        cv = self.F.CaseVersionFactory.create()
        cv2 = self.F.CaseVersionFactory.create(
            case=cv.case,
            productversion__product=cv.productversion.product,
            productversion__version="2.0")

        res = self.get(params={"filter-productversion": cv.productversion.id})

        self.assertIdInList(res, "caseversion-id-{0}".format(cv.id))
        self.assertIdNotInList(res, "caseversion-id-{0}".format(cv2.id))


    def test_filter_by_step_instruction(self):
        """Can filter by step instruction."""
        self.F.CaseStepFactory.create(
            caseversion__name="Case 1", instruction="do this")
        self.F.CaseStepFactory.create(
            caseversion__name="Case 2", instruction="do that")

        res = self.get(params={"filter-instruction": "this"})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_step_expected_result(self):
        """Can filter by step expected result."""
        self.F.CaseStepFactory.create(
            caseversion__name="Case 1", expected="see this")
        self.F.CaseStepFactory.create(
            caseversion__name="Case 2", expected="see that")

        res = self.get(params={"filter-expected": "this"})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_env_elements(self):
        """Can filter by environment elements."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        self.F.CaseVersionFactory.create(name="Case 1", environments=envs)
        self.F.CaseVersionFactory.create(name="Case 2", environments=envs[1:])

        res = self.get(
            params={"filter-envelement": envs[0].elements.all()[0].id})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_suite(self):
        """Can filter by suite."""
        cv = self.F.CaseVersionFactory.create(name="Case 1")
        self.F.CaseVersionFactory.create(name="Case 2")
        sc = self.F.SuiteCaseFactory.create(case=cv.case)

        res = self.get(params={"filter-suite": sc.suite.id})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_sort_by_status(self):
        """Can sort by status."""
        self.F.CaseVersionFactory.create(name="Case 1", status="draft")
        self.F.CaseVersionFactory.create(name="Case 2", status="active")

        res = self.get(params={"sortfield": "status", "sortdirection": "asc"})

        self.assertOrderInList(res, "Case 2", "Case 1")


    def test_sort_by_name(self):
        """Can sort by name."""
        self.F.CaseVersionFactory.create(name="Case 1")
        self.F.CaseVersionFactory.create(name="Case 2")

        res = self.get(params={"sortfield": "name", "sortdirection": "desc"})

        self.assertOrderInList(res, "Case 2", "Case 1")



class CaseDetailTest(case.view.AuthenticatedViewTestCase,
                     case.view.NoCacheTest,
                     ):
    """Test for case-detail ajax view."""
    def setUp(self):
        """Setup for case details tests; create a caseversion."""
        super(CaseDetailTest, self).setUp()
        self.cv = self.F.CaseVersionFactory.create()


    @property
    def url(self):
        """Shortcut for case-details url."""
        return reverse(
            "manage_case_details", kwargs=dict(caseversion_id=self.cv.id))


    def test_id_prefix(self):
        """Details shows the id prefix"""
        self.cv = self.F.CaseVersionFactory.create(case__idprefix="moo")
        res = self.get(ajax=True)

        res.mustcontain("#moo-{0}".format(self.cv.case.id))


    def test_id_no_prefix(self):
        """Details show the id properly when no prefix is specified."""
        self.cv = self.F.CaseVersionFactory.create()
        res = self.get(ajax=True)

        res.mustcontain("#{0}".format(self.cv.case.id))


    def test_description(self):
        """Details includes description, markdownified safely."""
        self.cv = self.F.CaseVersionFactory.create(
            description="_Valmorphanize_ <script>",
            )
        res = self.get(ajax=True)

        res.mustcontain("<em>Valmorphanize</em> &lt;script&gt;")


    def test_step(self):
        """Details includes steps, markdownified safely."""
        self.F.CaseStepFactory.create(
            caseversion=self.cv,
            instruction="<script>alert(foo);</script>",
            expected="{@onclick=alert(1)}paragraph",
            ).caseversion

        res = self.get(ajax=True)

        res.mustcontain("<p>&lt;script&gt;alert(foo);&lt;/script&gt;</p>")
        res.mustcontain("<p>{@onclick=alert(1)}paragraph</p>")



class CaseTest(case.view.AuthenticatedViewTestCase):
    """Tests for case-id redirect view."""
    def setUp(self):
        """Setup for case-url tests; creates a case."""
        super(CaseTest, self).setUp()
        self.case = self.F.CaseFactory.create()


    @property
    def url(self):
        """Shortcut for case-id redirect view."""
        return reverse("manage_case", kwargs=dict(case_id=self.case.id))


    def test_redirect(self):
        """Redirects to show latest version of this case in manage list."""
        self.F.CaseVersionFactory(
            productversion__version="1.0",
            productversion__product=self.case.product,
            case=self.case,
            )
        cv = self.F.CaseVersionFactory(
            productversion__version="2.0",
            productversion__product=self.case.product,
            case=self.case,
            )

        res = self.get()

        self.assertRedirects(
            res,
            "{0}?filter-id={1}#caseversion-id-{2}".format(
                reverse("manage_cases"), cv.case.id, cv.id),
            )


    def test_deleted_version(self):
        """Excludes deleted versions from consideration."""
        self.F.CaseVersionFactory(
            productversion__version="1.0",
            productversion__product=self.case.product,
            case=self.case,
            ).delete()
        cv = self.F.CaseVersionFactory(
            productversion__version="2.0",
            productversion__product=self.case.product,
            case=self.case,
            )

        res = self.get()

        self.assertRedirects(
            res,
            "{0}?filter-id={1}#caseversion-id-{2}".format(
                reverse("manage_cases"), cv.case.id, cv.id),
            )



class AddCaseTest(case.view.FormViewTestCase,
                  case.view.NoCacheTest,
                  ):
    """Tests for add-case-single view."""
    form_id = "single-case-add"


    @property
    def url(self):
        """Shortcut for add-case-single url."""
        return reverse("manage_case_add")


    def setUp(self):
        """Add create-cases permission to user."""
        super(AddCaseTest, self).setUp()
        self.add_perm("create_cases")


    def test_success(self):
        """Can add a test case with basic data, including a step."""
        pv = self.F.ProductVersionFactory.create()

        form = self.get_form()
        form["product"] = pv.product.id
        form["productversion"] = pv.id
        form["name"] = u"Can log in ùê."
        form["description"] = "Tests that a user can log in."
        form["steps-0-instruction"] = "Type creds and click login."
        form["steps-0-expected"] = "You should see a welcome message."
        form["status"] = "active"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_cases"))

        res.follow().mustcontain(u"Test case 'Can log in ùê.' added.")

        from moztrap.model import CaseVersion
        cv = CaseVersion.objects.get()
        self.assertEqual(cv.case.product, pv.product)
        self.assertEqual(cv.productversion, pv)
        self.assertEqual(cv.name, u"Can log in ùê.")
        self.assertEqual(cv.description, "Tests that a user can log in.")
        self.assertEqual(cv.status, "active")
        step = cv.steps.get()
        self.assertEqual(step.instruction, "Type creds and click login.")
        self.assertEqual(step.expected, "You should see a welcome message.")


    def test_prepopulate_from_querystring(self):
        """Can prepopulate the form via the GET querystring."""
        self.add_perm("manage_suite_cases")

        s = self.F.SuiteFactory.create()
        form = self.get_form(params={"suite": str(s.id)})

        self.assertEqual(form.fields["suite"][0].value, str(s.id))


    def test_error(self):
        """Bound form with errors is re-displayed."""
        res = self.get_form().submit()

        self.assertEqual(res.status_int, 200)
        res.mustcontain("This field is required.")


    def test_requires_create_cases_permission(self):
        """Requires create-cases permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")



class AddBulkCaseTest(case.view.FormViewTestCase,
                      case.view.NoCacheTest,
                      ):
    """Tests for add-case-bulk view."""
    form_id = "bulk-case-add"


    @property
    def url(self):
        """Shortcut for add-case-bulk url."""
        return reverse("manage_case_add_bulk")


    def setUp(self):
        """Add create-cases permission to user."""
        super(AddBulkCaseTest, self).setUp()
        self.add_perm("create_cases")


    def test_success(self):
        """Can add a test case or two with basic data, including a step."""
        pv = self.F.ProductVersionFactory.create()

        form = self.get_form()
        form["product"] = pv.product.id
        form["productversion"] = pv.id
        form["cases"] = (
            u"Test that I can log in ùê\n"
            "description here\n"
            "When I type creds and click login\n"
            "Then I should see a welcome message.\n"
            "Test that I can register\n"
            "When I register\n"
            "Then I am registered\n"
            )
        form["status"] = "active"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_cases"))

        res.follow().mustcontain("Added 2 test cases.")

        from moztrap.model import CaseVersion
        cv1, cv2 = list(CaseVersion.objects.all())

        self.assertEqual(cv1.case.product, pv.product)
        self.assertEqual(cv1.productversion, pv)
        self.assertEqual(cv1.name, u"Test that I can log in ùê")
        self.assertEqual(cv1.description, "description here")
        self.assertEqual(cv1.status, "active")
        step = cv1.steps.get()
        self.assertEqual(step.instruction, "When I type creds and click login")
        self.assertEqual(step.expected, "Then I should see a welcome message.")

        self.assertEqual(cv2.case.product, pv.product)
        self.assertEqual(cv2.productversion, pv)
        self.assertEqual(cv2.name, "Test that I can register")
        self.assertEqual(cv2.description, "")
        self.assertEqual(cv2.status, "active")
        step = cv2.steps.get()
        self.assertEqual(step.instruction, "When I register")
        self.assertEqual(step.expected, "Then I am registered")


    def test_success_single(self):
        """Confirmation message for single add is grammatically correct."""
        pv = self.F.ProductVersionFactory.create()

        form = self.get_form()
        form["product"] = pv.product.id
        form["productversion"] = pv.id
        form["cases"] = (
            u"Test that I can log in ùê\n"
            "description here\n"
            "When I type creds and click login\n"
            "Then I should see a welcome message.\n"
            )
        res = form.submit(status=302)

        res.follow().mustcontain("Added 1 test case.")


    def test_error(self):
        """Bound form with errors is re-displayed."""
        res = self.get_form().submit()

        self.assertEqual(res.status_int, 200)
        res.mustcontain("This field is required.")


    def test_requires_create_cases_permission(self):
        """Requires create-cases permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")



class CloneCaseVersionTest(case.view.AuthenticatedViewTestCase):
    """Tests for caseversion-clone view."""
    csrf_checks = False


    def setUp(self):
        """Setup for caseversion clone tests; create a caseversion, add perm."""
        super(CloneCaseVersionTest, self).setUp()
        self.cv = self.F.CaseVersionFactory.create(
            name=u"Can log in ùê", productversion__product__name="MozTrap")
        self.add_perm("manage_cases")


    @property
    def url(self):
        """Shortcut for caseversion-clone url."""
        return reverse(
            "manage_caseversion_clone", kwargs=dict(caseversion_id=self.cv.id))


    def test_login_required(self):
        """Requires login."""
        res = self.app.post(
            self.url,
            {"csrfmiddlewaretoken": "foo"},
            headers={"Cookie": "{0}=foo".format(settings.CSRF_COOKIE_NAME)},
            status=302,
            )

        self.assertRedirects(res, reverse("auth_login") + "?next=" + self.url)


    def test_manage_cases_permission_required(self):
        """Requires manage cases permission."""
        res = self.app.post(
            self.url,
            {"csrfmiddlewaretoken": "foo"},
            headers={"Cookie": "{0}=foo".format(settings.CSRF_COOKIE_NAME)},
            user=self.F.UserFactory.create(),
            status=302,
            )

        self.assertRedirects(res, "/")


    def test_requires_post(self):
        """View only accepts POST."""
        self.get(status=405)


    def test_no_productversion_id(self):
        """If no productversion id, redirects back to original caseversion."""
        res = self.post({}, status=302)

        self.assertRedirects(
            res,
            reverse(
                "manage_caseversion_edit",
                kwargs=dict(caseversion_id=self.cv.id)
                )
            )


    def test_bad_productversion_id(self):
        """If bad productversion id, redirects back to original caseversion."""
        res = self.post({"productversion": 75}, status=302)

        self.assertRedirects(
            res,
            reverse(
                "manage_caseversion_edit",
                kwargs=dict(caseversion_id=self.cv.id)
                )
            )


    def test_already_exists(self):
        """If target caseversion already exists, redirect to edit it."""
        target = self.F.CaseVersionFactory.create(
            case=self.cv.case,
            productversion__product=self.cv.productversion.product,
            productversion__version="2.0")

        res = self.post(
            {"productversion": target.productversion.id}, status=302)

        self.assertRedirects(
            res,
            reverse(
                "manage_caseversion_edit",
                kwargs=dict(caseversion_id=target.id)
                )
            )


    def test_clone(self):
        """If target caseversion doesn't exist yet, clone this one to it."""
        pv = self.F.ProductVersionFactory.create(
            product=self.cv.productversion.product, version="2.0")

        res = self.post({"productversion": pv.id}, status=302)

        res.follow().mustcontain(
            u"Created new version of 'Can log in ùê' for MozTrap 2.0.")

        new = pv.caseversions.get()
        self.assertEqual(new.name, self.cv.name)
        self.assertEqual(new.case, self.cv.case)
        self.assertRedirects(
            res,
            reverse(
                "manage_caseversion_edit",
                kwargs=dict(caseversion_id=new.id)
                )
            )



class EditCaseVersionTest(case.view.FormViewTestCase,
                          case.view.NoCacheTest,
                          ):
    """Tests for edit-caseversion view."""
    form_id = "single-case-edit"


    def setUp(self):
        """Setup for caseversion edit tests; create a caseversion, add perm."""
        super(EditCaseVersionTest, self).setUp()
        self.cv = self.F.CaseVersionFactory.create()
        self.add_perm("manage_cases")


    @property
    def url(self):
        """Shortcut for edit-caseversion url."""
        return reverse(
            "manage_caseversion_edit", kwargs=dict(caseversion_id=self.cv.id))


    def test_requires_manage_cases_permission(self):
        """Requires manage-cases permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")


    def test_existing_version_links(self):
        """Page has links to edit other existing versions."""
        other_cv = self.F.CaseVersionFactory.create(
            case=self.cv.case,
            productversion__product=self.cv.case.product,
            productversion__version="2.0"
            )

        res = self.get()

        res.mustcontain(
            reverse(
                "manage_caseversion_edit",
                kwargs=dict(caseversion_id=other_cv.id)
                )
            )


    def test_clone_version_buttons(self):
        """Page has buttons for creating new versions."""
        other_pv = self.F.ProductVersionFactory.create(
            product=self.cv.case.product, version="2.0")

        form = self.get().forms["case-version-list-form"]

        self.assertEqual(len(form.fields["productversion"]), 1)
        self.assertEqual(
            form.fields["productversion"][0].value_if_submitted(),
            str(other_pv.id)
            )


    def test_initial_data(self):
        """Form prepopulates with correct initial data."""
        self.cv.name = u"Some name ùê"
        self.cv.description = "Some desc"
        self.cv.status = "active"
        self.cv.save(force_update=True)

        form = self.get_form()

        self.assertEqual(form.fields["name"][0].value, u"Some name ùê")
        self.assertEqual(form.fields["description"][0].value, "Some desc")
        self.assertEqual(form.fields["status"][0].value, "active")


    def test_existing_tags(self):
        """Form prepopulates with existing tags."""
        tags = [
            self.F.TagFactory.create(name="one"),
            self.F.TagFactory.create(name="two")
            ]
        self.cv.tags.add(*tags)

        form = self.get_form()

        self.assertEqual(
            [f.value for f in form.fields["tag-tag"]],
            [str(t.id) for t in tags]
            )


    def test_existing_attachments(self):
        """Form prepopulates with remove checkboxes for existing attachments."""
        ca = self.F.CaseAttachmentFactory.create(
            caseversion=self.cv, name="sample.csv")
        self.cv.attachments.add(ca)

        form = self.get_form()

        self.assertEqual(form.fields["remove-attachment"][0].value, None)


    def test_save_basic(self):
        """Can save updates; redirects to manage cases list."""
        form = self.get_form()
        form["status"] = "active"
        form["name"] = u"new name ùê"
        form["description"] = "new desc"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_cases"))

        res.follow().mustcontain(u"Saved 'new name ùê'.")

        cv = self.refresh(self.cv)
        self.assertEqual(cv.name, u"new name ùê")
        self.assertEqual(cv.description, "new desc")
        self.assertEqual(cv.status, "active")


    def test_save_intl_name(self):
        """Can save updates; redirects to manage cases list."""
        form = self.get_form()
        form["status"] = "active"
        form["name"] = u"test with ùê"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_cases"))

        res.follow().mustcontain(u"Saved 'test with ùê'.")


    def test_edit_step(self):
        """Can edit a step."""
        step = self.F.CaseStepFactory(
            caseversion=self.cv, instruction="do this", expected="see that")

        form = self.get_form()
        form["steps-0-instruction"] = "do something else"
        form["steps-0-expected"] = ""
        form.submit(status=302)

        step = self.refresh(step)
        self.assertEqual(step.instruction, "do something else")
        self.assertEqual(step.expected, "")
        self.assertEqual(step.modified_by, self.user)


    def test_remove_tags(self):
        """Can remove tags."""
        tags = [
            self.F.TagFactory.create(name="one"),
            self.F.TagFactory.create(name="two")
            ]
        self.cv.tags.add(*tags)

        form = self.get_form()
        form.set("tag-tag", None, index=1)
        form.submit(status=302)

        self.assertEqual(list(self.cv.tags.all()), tags[:1])


    def test_remove_attachments(self):
        """Can remove attachments."""
        ca = self.F.CaseAttachmentFactory.create(
            caseversion=self.cv, name="sample.csv")
        self.cv.attachments.add(ca)

        form = self.get_form()
        form["remove-attachment"] = ca.id
        form.submit(status=302)

        self.assertEqual(list(self.cv.attachments.all()), [])


    def test_errors(self):
        """Test bound form redisplay with errors."""
        form = self.get_form()
        form["name"] = ""
        res = form.submit(status=200)

        res.mustcontain("This field is required.")


    def test_concurrency_error(self):
        """Concurrency error is displayed."""
        form = self.get_form()

        self.cv.save()

        form["name"] = u"New ùê"
        res = form.submit(status=200)

        res.mustcontain("Another user saved changes to this object")

########NEW FILE########
__FILENAME__ = test_forms
"""
Tests for environment forms.

"""
from tests import case



class AddProfileFormTest(case.DBTestCase):
    """Tests for AddProfileForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.environments.forms import AddProfileForm
        return AddProfileForm


    def test_save(self):
        """Given a name and element list, autogenerates a profile."""
        e1 = self.F.ElementFactory.create()
        e2 = self.F.ElementFactory.create()
        self.F.ElementFactory.create()
        u = self.F.UserFactory.create()

        f = self.form(
            {
                "elements": [str(e1.id), str(e2.id)],
                "name": "Foo",
                "cc_version": "0"},
            user=u,
            )
        self.assertTrue(f.is_valid())
        p = f.save()

        self.assertEqual(p.created_by, u)
        self.assertEqual(p.name, "Foo")
        self.assertEqual(
            set(p.environments.get().elements.all()), set([e1, e2]))


    def test_empty_category_rendered(self):
        """A category with no elements is still rendered in elements widget."""
        self.F.CategoryFactory.create(name="EmptyCat")

        self.assertIn("EmptyCat", unicode(self.form()["elements"]))


    def test_elements_rendered(self):
        """Elements are rendered in widget."""
        self.F.ElementFactory.create(name="SomeElement")

        self.assertIn("SomeElement", unicode(self.form()["elements"]))


    def test_selected_element_ids(self):
        """Selected elements are rendered checked."""
        unsel = self.F.ElementFactory.create()
        sel = self.F.ElementFactory.create()

        f = self.form({"elements": [str(sel.id)]})

        rendered = unicode(f["elements"])
        self.assertIn('id="element-{0}">'.format(unsel.id), rendered)
        self.assertIn('id="element-{0}" checked>'.format(sel.id), rendered)



class PopulateProductVersionEnvsFormTest(case.DBTestCase):
    """Tests for PopulateProductVersionEnvsForm."""
    def setUp(self):
        """All these tests need a productversion."""
        super(PopulateProductVersionEnvsFormTest, self).setUp()
        self.pv = self.F.ProductVersionFactory.create()


    @property
    def PopulateProductVersionEnvsForm(self):
        """The form class under test."""
        from moztrap.view.manage.environments import forms
        return forms.PopulateProductVersionEnvsForm


    def test_populate_from_profile(self):
        """Can populate pv's envs from a profile."""
        profile = self.F.ProfileFactory.create()
        profile.environments.add(
            *self.F.EnvironmentFactory.create_full_set({"OS": ["Windows"]}))

        form = self.PopulateProductVersionEnvsForm(
            {"source": "profile-{0}".format(profile.id)},
            productversion=self.pv,
            )

        self.assertTrue(form.is_valid())

        pv = form.save()

        self.assertEqual(pv, self.pv)
        self.assertEqual(
            [unicode(e) for e in pv.environments.all()], [u"Windows"])


    def test_populate_from_other_version(self):
        """Can populate pv's envs from another version of the same product."""
        pv2 = self.F.ProductVersionFactory.create(product=self.pv.product)
        pv2.environments.add(
            *self.F.EnvironmentFactory.create_full_set({"OS": ["Windows"]}))

        form = self.PopulateProductVersionEnvsForm(
            {"source": "productversion-{0}".format(pv2.id)},
            productversion=self.pv,
            )

        self.assertTrue(form.is_valid())

        pv = form.save()

        self.assertEqual(pv, self.pv)
        self.assertEqual(
            [unicode(e) for e in pv.environments.all()], [u"Windows"])


    def test_cascade(self):
        """Populated envs cascade to cases."""
        profile = self.F.ProfileFactory.create()
        profile.environments.add(
            *self.F.EnvironmentFactory.create_full_set({"OS": ["Windows"]}))

        cv = self.F.CaseVersionFactory.create(
            productversion=self.pv, case__product=self.pv.product)

        form = self.PopulateProductVersionEnvsForm(
            {"source": "profile-{0}".format(profile.id)},
            productversion=self.pv,
            )

        self.assertTrue(form.is_valid())

        pv = form.save()

        self.assertEqual(pv, self.pv)
        self.assertEqual(
            [unicode(e) for e in cv.environments.all()], [u"Windows"])

########NEW FILE########
__FILENAME__ = test_views
# coding: utf-8
"""
Tests for environment management views.

"""
from django.core.urlresolvers import reverse
from django.http import Http404

from mock import Mock

from tests import case



class ProfilesViewTest(case.view.manage.ListViewTestCase,
                       case.view.manage.MTModelListTests,
                       case.view.NoCacheTest,
                       ):
    """Tests for environment profiles manage list."""
    form_id = "manage-profiles-form"
    perm = "manage_environments"


    @property
    def factory(self):
        """The model factory for this manage list."""
        return self.F.ProfileFactory


    @property
    def url(self):
        """Shortcut for manage-profiles url."""
        return reverse("manage_profiles")


    def test_filter_by_name(self):
        """Can filter by name."""
        self.factory.create(name=u"Foo 1 ùê")
        self.factory.create(name=u"Foo 2 ùê")

        res = self.get(params={"filter-name": "1"})

        self.assertInList(res, u"Foo 1 ùê")
        self.assertNotInList(res, u"Foo 2 ùê")


    def test_filter_by_env_elements(self):
        """Can filter by environment elements."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        p1 = self.factory.create(name=u"Foo 1 ùê")
        p1.environments.add(*envs)
        p2 = self.factory.create(name=u"Foo 2 ùê")
        p2.environments.add(*envs[1:])

        res = self.get(
            params={"filter-envelement": envs[0].elements.all()[0].id})

        self.assertInList(res, u"Foo 1 ùê")
        self.assertNotInList(res, u"Foo 2 ùê")


    def test_sort_by_name(self):
        """Can sort by name."""
        self.factory.create(name=u"Profile 1 ùê")
        self.factory.create(name=u"Profile 2 ùê")

        res = self.get(
            params={"sortfield": "name", "sortdirection": "desc"})

        self.assertOrderInList(res, u"Profile 2 ùê", u"Profile 1 ùê")



class ProfileDetailTest(case.view.AuthenticatedViewTestCase,
                        case.view.NoCacheTest,
                        ):
    """Test for profile-detail ajax view."""
    def setUp(self):
        """Setup for case details tests; create a profile."""
        super(ProfileDetailTest, self).setUp()
        self.profile = self.F.ProfileFactory.create()


    @property
    def url(self):
        """Shortcut for profile detail url."""
        return reverse(
            "manage_profile_details",
            kwargs=dict(profile_id=self.profile.id)
            )


    def test_details_envs(self):
        """Details lists envs."""
        self.profile.environments.add(
            *self.F.EnvironmentFactory.create_full_set(
                {"OS": ["Windows"]}))

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("Windows")



class AddProfileTest(case.view.FormViewTestCase,
                     case.view.NoCacheTest,
                     ):
    """Tests for add profile view."""
    form_id = "profile-add-form"


    @property
    def url(self):
        """Shortcut for add-profile url."""
        return reverse("manage_profile_add")


    def setUp(self):
        """Add manage-environments permission to user."""
        super(AddProfileTest, self).setUp()
        self.add_perm("manage_environments")


    def test_success(self):
        """Can add a profile with basic data."""
        el = self.F.ElementFactory.create()
        form = self.get_form()
        form["name"] = u"Foo Profile ùê"
        form["elements"] = [str(el.id)]

        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_profiles"))

        res.follow().mustcontain(u"Profile 'Foo Profile ùê' added.")

        p = self.model.Profile.objects.get()
        self.assertEqual(p.name, u"Foo Profile ùê")
        self.assertEqual(p.environments.get().elements.get(), el)


    def test_error(self):
        """Bound form with errors is re-displayed."""
        res = self.get_form().submit()

        self.assertEqual(res.status_int, 200)
        res.mustcontain("This field is required.")


    def test_requires_manage_environments_permission(self):
        """Requires manage-environments permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")



class CategoryManagementViewTest(case.view.AuthenticatedViewTestCase):
    """
    Tests for adding/editing/deleting categories and elements.

    Currently this is implemented as an AJAX-POST-handling decorator on the
    add-profile view, but it's likely to be split into its own separate view,
    thus the tests are separated.

    """
    # @@@ Since these POSTs are all done by JS rather than by submitting a real
    # form, can't test via the usual WebTest form submission. Could submit a
    # GET request, scrape the CSRF token and submit it with the POST, but
    # doubling the number of requests slows down the tests and gains little.
    csrf_checks = False


    @property
    def url(self):
        """Shortcut to add-profile url."""
        return reverse("manage_profile_add")


    def setUp(self):
        """Add manage-environments permission to user."""
        super(CategoryManagementViewTest, self).setUp()
        self.add_perm("manage_environments")


    def post(self, data, **kwargs):
        """Shortcut for ajax-posting to url, authenticated."""
        headers = kwargs.setdefault("headers", {})
        headers.setdefault("X-Requested-With", "XMLHttpRequest")
        return super(CategoryManagementViewTest, self).post(data, **kwargs)


    def test_ignores_non_ajax(self):
        """Non-ajax requests are passed through."""
        res = self.app.post(self.url, {}, user=self.user)

        self.assertElement(res.html, "form", id="profile-add-form")


    def test_ignores_non_POST(self):
        """Non-POST requests are passed through."""
        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        self.assertElement(res.json["html"], "form", id="profile-add-form")


    def test_no_action(self):
        """Returns empty JSON data if given no action."""
        res = self.post({})

        self.assertEqual(res.json, {"messages": []})


    def test_delete_element(self):
        """Can delete an element."""
        el = self.F.ElementFactory.create()

        res = self.post({"action-delete": "element-{0}".format(el.id)})

        self.assertEqual(res.json, {"messages": [], "html": ""})
        self.assertEqual(self.refresh(el).deleted_by, self.user)


    def test_delete_category(self):
        """Can delete a category."""
        c = self.F.CategoryFactory.create()

        res = self.post({"action-delete": "category-{0}".format(c.id)})

        self.assertEqual(res.json, {"messages": [], "html": ""})
        self.assertEqual(self.refresh(c).deleted_by, self.user)


    def test_delete_bad_obj_type(self):
        """Trying to delete an unknown object type returns no_replace=True."""
        res = self.post({"action-delete": "foo-1"})

        self.assertEqual(res.json, {"messages": [], "no_replace": True})


    def test_delete_bad_obj_id(self):
        """Trying to delete a bad id returns no_replace=True."""
        res = self.post({"action-delete": "element-1"})

        self.assertEqual(res.json, {"messages": [], "no_replace": True})


    def test_add_category(self):
        """Can add a new category."""
        res = self.post({"new-category-name": u"FooCat ùê".encode("utf-8")})

        self.assertElement(
            res.json["html"],
            lambda t: (
                t.name == "h3" and
                t["class"] == "title" and
                t.text == u"FooCat ùê"
                )
            )


    def test_blank_category_name(self):
        """Blank category name results in error message, no new HTML."""
        res = self.post({"new-category-name": ""})

        self.assertEqual(
            res.json,
            {
                "no_replace": True,
                "messages": [
                    {
                        "message": "Please enter a category name.",
                        "level": 40,
                        "tags": "error",
                        }
                    ],
                },
            )


    def test_edit_category(self):
        """Can change the name of a category."""
        c = self.F.CategoryFactory.create(name="OldName")

        res = self.post({
            "new-category-name": u"FooCat ùê".encode("utf-8"),
            "category-id": str(c.id),
            })

        self.assertElement(
            res.json["html"],
            lambda t: (
                t.name == "h3" and
                t["class"] == "title" and
                unicode(t.text).encode("utf-8") == u"FooCat ùê".encode("utf-8")
                )
            )

        self.assertEqual(
            unicode(self.refresh(c).name).encode("utf-8"),
            u"FooCat ùê".encode("utf-8"),
            )


    def test_edit_category_with_elements(self):
        """Editing category with elements preserves element input state."""
        c = self.F.CategoryFactory.create(name="OldName")
        el1 = self.F.ElementFactory.create(category=c)
        el2 = self.F.ElementFactory.create(category=c)

        res = self.post(
            {
                "new-category-name": u"FooCat ùê",
                "category-id": str(c.id),
                "elements": [str(el1.id)],
                }
            )

        self.assertElement(
            res.json["html"],
            "input",
            attrs={
                "type": "checkbox",
                "name": "elements",
                "value": str(el1.id),
                "checked": True,
                }
            )

        self.assertElement(
            res.json["html"],
            "input",
            attrs={
                "type": "checkbox",
                "name": "elements",
                "value": str(el2.id),
                "checked": None,
                },
            )


    def test_add_element(self):
        """Can add a new element."""
        c = self.F.CategoryFactory.create()

        res = self.post({
            "new-element-name": u"FooElement ùê".encode("utf-8"),
            "category-id": str(c.id)},
            )

        label_finder = lambda t: (
            t.name == "label" and
            unicode(t.text).encode("utf-8") == u"FooElement ùê".encode("utf-8")
            )

        e = self.model.Element.objects.get()
        self.assertEqual(
            unicode(e.name).encode("utf-8"),
            u"FooElement ùê".encode("utf-8"),
            )
        self.assertEqual(e.category, c)

        self.assertElement(res.json["elem"], label_finder)
        self.assertElement(res.json["preview"], label_finder)
        self.assertElement(
            res.json["elem"],
            "input",
            attrs={
                "type": "checkbox",
                "name": "elements",
                "value": str(e.id),
                "checked": None,
                }
            )


    def test_blank_element_name(self):
        """Blank element name results in error message, no new HTML."""
        res = self.post({"new-element-name": ""})

        self.assertEqual(
            res.json,
            {
                "no_replace": True,
                "messages": [
                    {
                        "message": "Please enter an element name.",
                        "level": 40,
                        "tags": "error",
                        }
                    ],
                },
            )


    def test_edit_element(self):
        """Can change the name of a element."""
        e = self.F.ElementFactory.create(name="OldName")

        res = self.post({
            "new-element-name": u"FooElement ùê".encode("utf-8"),
            "element-id": str(e.id)},
            )

        label_finder = lambda t: (
                t.name == "label" and
                unicode(t.text).encode("utf-8") == u"FooElement ùê".encode("utf-8")
                )

        self.assertElement(res.json["elem"], label_finder)
        self.assertElement(res.json["preview"], label_finder)
        self.assertElement(
            res.json["elem"],
            "input",
            attrs={
                "type": "checkbox",
                "name": "elements",
                "value": str(e.id),
                "checked": None,
                }
            )

        self.assertEqual(
            unicode(self.refresh(e).name).encode("utf-8"),
            u"FooElement ùê".encode("utf-8"),
            )



class EditProfileViewTest(case.view.FormViewTestCase,
                          case.view.NoCacheTest,
                          ):
    """
    Tests for editing an environment profile.

    Which is really mostly a manage-list of environments.

    """
    form_id = "profile-environments-form"


    def setUp(self):
        """Setup for edit-profile; create a profile, give user permission."""
        super(EditProfileViewTest, self).setUp()
        self.profile = self.F.ProfileFactory.create()
        self.add_perm("manage_environments")


    def factory(self, **kwargs):
        """Create an environment for this profile."""
        kwargs.setdefault("profile", self.profile)
        return self.F.EnvironmentFactory.create(**kwargs)


    @property
    def url(self):
        """Shortcut for edit-profile url."""
        return reverse(
            "manage_profile_edit", kwargs={"profile_id": self.profile.id})


    def test_filter_by_env_elements(self):
        """Can filter by environment elements."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]}, profile=self.profile)

        res = self.get(
            params={"filter-envelement": envs[0].elements.get().id})

        res.mustcontain("Linux")
        self.assertNotIn(res.body, "Windows")


    def test_remove(self):
        """Can remove environments from profile."""
        o = self.factory()

        self.get_form().submit(
            name="action-remove_from_profile",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"}
            )

        self.assertEqual(self.refresh(o).deleted_by, self.user)


    def test_manage_environments_permission_required(self):
        """Requires manage environments permission."""
        res = self.app.get(self.url, user=self.F.UserFactory.create())

        self.assertRedirects(res, "/")


    def ajax_post(self, form_id, data):
        """Post given data from given form via Ajax, along with CSRF token."""
        form = self.get().forms[form_id]
        defaults = {
            "csrfmiddlewaretoken": form.fields.get(
                "csrfmiddlewaretoken")[0].value,
            }
        defaults.update(data)

        return self.post(
            defaults,
            headers={"X-Requested-With": "XMLHttpRequest"},
            )


    def test_blank_post(self):
        """Posting with no action key does nothing."""
        res = self.ajax_post(self.form_id, {})

        self.assertEqual(res.status_int, 200)


    def test_save_profile_name(self):
        """Can change the profile name."""
        res = self.ajax_post(
            "profile-name-form",
            {
                "save-profile-name": "1",
                "profile-name": u"FooProf ùê".encode("utf-8"),
                },
            )

        self.assertEqual(
            res.json,
            {
                "messages": [
                    {
                        "message": "Profile name saved!",
                        "level": 25,
                        "tags": "success",
                        }
                    ],
                "success": True,
                }
            )
        self.assertEqual(
            unicode(self.refresh(self.profile).name).encode("utf-8"),
            u"FooProf ùê".encode("utf-8"),
            )


    def test_blank_profile_name(self):
        """Blank profile name results in error message."""
        res = self.ajax_post(
            "profile-name-form",
            {
                "save-profile-name": "1",
                "profile-name": "",
                },
            )

        self.assertEqual(
            res.json,
            {
                "messages": [
                    {
                        "message": "Please enter a profile name.",
                        "level": 40,
                        "tags": "error",
                        }
                    ],
                "success": False,
                }
            )


    def test_add_environment(self):
        """Can add an environment from arbitrary elements."""
        e1 = self.F.ElementFactory.create(name="Linux")
        e2 = self.F.ElementFactory.create(name="Firefox")
        self.F.ElementFactory.create()

        res = self.ajax_post(
            "add-environment-form",
            {
                "add-environment": "1",
                "element-element": [str(e1.id), str(e2.id)],
                },
            )

        self.assertIn("Linux", res.json["html"])
        self.assertIn("Firefox", res.json["html"])
        env = self.profile.environments.get()
        self.assertEqual(set(env.elements.all()), set([e1, e2]))
        self.assertEqual(env.profile, self.profile)


    def test_no_elements(self):
        """Add env with no elements results in error message."""
        res = self.ajax_post(
            "add-environment-form",
            {"add-environment": "1"},
            )

        self.assertEqual(
            res.json["messages"],
            [
                {
                    "message": "Please select some environment elements.",
                    "level": 40,
                    "tags": "error",
                    }
                ],
            )



class EditProductVersionEnvironmentsViewTest(case.view.FormViewTestCase,
                                             case.view.NoCacheTest,
                                             ):
    """
    Tests for editing environments of a product version.

    Which is really mostly a manage-list of environments.

    """
    form_id = "productversion-environments-form"


    def setUp(self):
        """Setup; create a product version, give user permission."""
        super(EditProductVersionEnvironmentsViewTest, self).setUp()
        self.productversion = self.F.ProductVersionFactory.create()
        self.add_perm("manage_products")


    def factory(self, **kwargs):
        """Create an environment for this productversion."""
        env = self.F.EnvironmentFactory.create(**kwargs)
        self.productversion.environments.add(env)
        return env


    @property
    def url(self):
        """Shortcut for edit-productversion-envs url."""
        return reverse(
            "manage_productversion_environments",
            kwargs={"productversion_id": self.productversion.id}
            )


    def test_filter_by_env_elements(self):
        """Can filter by environment elements."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        self.productversion.environments.add(*envs)

        res = self.get(
            ajax=True,
            params={"filter-envelement": envs[0].elements.get().id})

        res.mustcontain("Linux")
        self.assertNotIn("Windows", res.json["html"])


    def test_remove(self):
        """Can remove environments from productversion."""
        self.factory()

        self.get_form().submit(
            name="action-remove",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"}
            )

        self.assertEqual(self.productversion.environments.count(), 0)


    def test_remove_cascades(self):
        """Removing environments cascades to caseversions."""
        self.factory()

        cv = self.F.CaseVersionFactory.create(
            productversion=self.productversion,
            case__product=self.productversion.product
            )

        self.get_form().submit(
            name="action-remove",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"}
            )

        self.assertEqual(cv.environments.count(), 0)


    def test_manage_products_permission_required(self):
        """Requires manage products permission."""
        res = self.app.get(self.url, user=self.F.UserFactory.create())

        self.assertRedirects(res, "/")


    def ajax_post(self, form_id, data):
        """Post given data from given form via Ajax, along with CSRF token."""
        form = self.get().forms[form_id]
        defaults = {
            "csrfmiddlewaretoken": form.fields.get(
                "csrfmiddlewaretoken")[0].value,
            }
        defaults.update(data)

        return self.post(
            defaults,
            headers={"X-Requested-With": "XMLHttpRequest"},
            )


    def test_blank_post(self):
        """Posting with no action key does nothing."""
        res = self.ajax_post(self.form_id, {})

        self.assertEqual(res.status_int, 200)


    def test_add_environment(self):
        """Can add an environment from arbitrary elements."""
        e1 = self.F.ElementFactory.create(name="Linux")
        e2 = self.F.ElementFactory.create(name="Firefox")
        self.F.ElementFactory.create()

        res = self.ajax_post(
            "add-environment-form",
            {
                "add-environment": "1",
                "element-element": [str(e1.id), str(e2.id)],
                },
            )

        self.assertIn("Linux", res.json["html"])
        self.assertIn("Firefox", res.json["html"])
        env = self.productversion.environments.get()
        self.assertEqual(set(env.elements.all()), set([e1, e2]))
        self.assertEqual(self.productversion.environments.get(), env)


    def test_add_cascades(self):
        """Adding an environment cascades to caseversions."""
        cv = self.F.CaseVersionFactory.create(
            productversion=self.productversion,
            case__product=self.productversion.product
            )

        e1 = self.F.ElementFactory.create(name="Linux")

        self.ajax_post(
            "add-environment-form",
            {
                "add-environment": "1",
                "element-element": [str(e1.id)],
                },
            )

        env = self.productversion.environments.get()
        self.assertEqual(cv.environments.get(), env)


    def test_no_elements(self):
        """Add env with no elements results in error message."""
        res = self.ajax_post(
            "add-environment-form",
            {"add-environment": "1"},
            )

        self.assertEqual(
            res.json["messages"],
            [
                {
                    "message": "Please select some environment elements.",
                    "level": 40,
                    "tags": "error",
                    }
                ],
            )


    def test_no_populate_form_if_filtered_to_none(self):
        """If pv has envs but view's filtered to show none, no populate form."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        self.productversion.environments.add(envs[0])

        res = self.get(
            ajax=True,
            params={"filter-envelement": envs[1].elements.get().id})

        self.assertNotIn("populate", res.json["html"])


    def test_populate(self):
        """Can populate a productversion's envs from a profile."""
        profile = self.F.ProfileFactory.create()
        profile.environments.add(
            *self.F.EnvironmentFactory.create_full_set({"OS": ["Windows"]}))

        form = self.get_form()
        form["source"] = "profile-{0}".format(profile.id)
        res = form.submit(
            name="populate",
            headers={"X-Requested-With": "XMLHttpRequest"},
            status=200,
            )
        self.assertIn("Windows", res.json["html"])

        self.assertEqual(
            [unicode(e) for e in self.productversion.environments.all()],
            [u"Windows"],
            )


    def test_populate_error(self):
        """Error message on failure to populate envs."""
        profile = self.F.ProfileFactory.create()

        form = self.get_form()
        form["source"] = "profile-{0}".format(profile.id)

        profile.delete()

        res = form.submit(
            name="populate",
            headers={"X-Requested-With": "XMLHttpRequest"},
            status=200,
            )

        self.assertEqual(
            res.json["messages"][0],
            {
                "message": (
                    "Unable to populate environments. "
                    "Please select a different source."
                    ),
                "level": 30,
                "tags": "warning",
                }
            )



class ElementsAutocompleteTest(case.view.AuthenticatedViewTestCase,
                               case.view.NoCacheTest,
                               ):
    """Test for elements autocomplete view."""
    @property
    def url(self):
        """Shortcut for element-autocomplete url."""
        return reverse("manage_environment_autocomplete_elements")


    def get(self, query=None):
        """Shortcut for getting element-autocomplete url authenticated."""
        url = self.url
        if query is not None:
            url = url + "?text=" + query
        return self.app.get(url, user=self.user)


    def test_matching_elements_json(self):
        """Returns list of matching elements in JSON."""
        e = self.F.ElementFactory.create(name="foo")

        res = self.get("o")

        self.assertEqual(
            res.json,
            {
                "suggestions": [
                    {
                        "id": e.id,
                        "name": "foo",
                        "postText": "o",
                        "preText": "f",
                        "type": "element",
                        "typedText": "o",
                        }
                    ]
                }
            )


    def test_case_insensitive(self):
        """Matching is case-insensitive, but pre/post are case-accurate."""
        e = self.F.ElementFactory.create(name="FooBar")

        res = self.get("oO")

        self.assertEqual(
            res.json,
            {
                "suggestions": [
                    {
                        "id": e.id,
                        "name": "FooBar",
                        "postText": "Bar",
                        "preText": "F",
                        "type": "element",
                        "typedText": "oO",
                        }
                    ]
                }
            )


    def test_no_query(self):
        """If no query is provided, no elements are returned."""
        self.F.ElementFactory.create(name="foo")

        res = self.get()

        self.assertEqual(res.json, {"suggestions": []})



class NarrowEnvironmentsViewTests(case.view.NoCacheTest):
    """Common tests for narrow-environments view."""
    form_id = "narrow-envs-form"
    # subclasses should set these
    factory = None
    object_type = None
    redirect_to = None


    def setUp(self):
        """Setup - create an object of the right type."""
        super(NarrowEnvironmentsViewTests, self).setUp()
        self.object = self.factory()


    @property
    def url(self):
        "Shortcut for narrow-environments url."""
        return reverse(
            "manage_narrow_environments",
            kwargs={
                "object_type": self.object_type,
                "object_id": self.object.id,
                }
            )


    def test_unknown_object_type(self):
        """Passing an unknown object_type raises 404."""
        # Have to test this by calling the view func directly, as the URL
        # pattern prevents a bad object_type from getting through.
        from moztrap.view.manage.environments.views import narrow_environments
        req = Mock()
        req.user = self.user

        with self.assertRaises(Http404):
            narrow_environments(req, "foo", "1")


    def test_requires_perm(self):
        """Narrowing envs requires manage perm on appropriate model."""
        res = self.get(status=302)

        self.assertIn("login", res.headers["Location"])


    def test_list_parent_envs(self):
        """Lists parent productversion environments; mine selected."""
        self.add_perm(self.perm)
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows", "OS X"]})
        self.object.productversion.environments.add(envs[0], envs[1])
        self.object.environments.add(envs[0])

        res = self.get()

        # parent env also assigned to object is selected
        self.assertElement(
            res.html,
            "input",
            attrs={
                "type": "checkbox",
                "name": "environments",
                "value": str(envs[0].id),
                "checked": True,
                },
            )
        # parent env not assigned to object is not selected
        self.assertElement(
            res.html,
            "input",
            attrs={
                "type": "checkbox",
                "name": "environments",
                "value": str(envs[1].id),
                "checked": None,
                },
            )
        # not a parent env; not in list at all
        self.assertElement(
            res.html,
            "input",
            attrs={
                "type": "checkbox",
                "name": "environments",
                "value": str(envs[2].id),
                },
            count=0,
            )


    def test_set_envs(self):
        """Can set object's environments."""
        self.add_perm(self.perm)
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows", "OS X"]})
        self.object.productversion.environments.add(envs[0], envs[1])
        self.object.environments.add(envs[0])

        form = self.get_form()
        for field in form.fields["environments"]:
            if field.value is None:
                field.value = str(envs[1].id)
            else:
                field.value = None
        res = form.submit(status=302)

        self.assertRedirects(res, reverse(self.redirect_to))
        self.assertEqual(self.object.environments.get(), envs[1])


    def test_cascade(self):
        """Removed environment cascades to runcaseversion."""
        self.add_perm(self.perm)
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        self.object.productversion.environments.add(*envs)
        rcv = self.F.RunCaseVersionFactory.create(
            **{self.object_type: self.object})
        self.object.environments.add(*envs)
        rcv.environments.add(*envs)

        form = self.get_form()
        for field in form.fields["environments"]:
            if field.value != str(envs[1].id):
                field.value = None
        form.submit(status=302)

        self.assertEqual(rcv.environments.get(), envs[1])



class NarrowRunEnvironmentsTest(NarrowEnvironmentsViewTests,
                                case.view.FormViewTestCase
                                ):
    """Tests for narrowing run environments."""
    object_type = "run"
    redirect_to = "manage_runs"
    perm = "manage_runs"


    @property
    def factory(self):
        """Run factory."""
        return self.F.RunFactory



class NarrowCaseVersionEnvironmentsTest(NarrowEnvironmentsViewTests,
                                        case.view.FormViewTestCase
                                        ):
    """Tests for narrowing caseversion environments."""
    object_type = "caseversion"
    redirect_to = "manage_cases"
    perm = "manage_cases"


    @property
    def factory(self):
        """CaseVersion factory."""
        return self.F.CaseVersionFactory

########NEW FILE########
__FILENAME__ = test_forms
"""
Tests for product-management forms.

"""
from tests import case



class EditProductFormTest(case.DBTestCase):
    """Tests for EditProductForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.products.forms import EditProductForm
        return EditProductForm


    def test_edit_product(self):
        """Can edit product name and description, with modified-by user."""
        p = self.F.ProductFactory(name="Take One", description="")
        u = self.F.UserFactory()

        f = self.form(
            {
                "name": "Two",
                "description": "not blank",
                "cc_version": str(p.cc_version),
                },
            instance=p,
            user=u,
            )

        product = f.save()

        self.assertEqual(product.name, "Two")
        self.assertEqual(product.description, "not blank")
        self.assertEqual(product.modified_by, u)



class AddProductFormTest(case.DBTestCase):
    """Tests for AddProductForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.products.forms import AddProductForm
        return AddProductForm


    def test_add_product(self):
        """Can add product, with version and created-by user."""
        u = self.F.UserFactory()

        f = self.form(
            {
                "name": "Two",
                "version": "1.0",
                "description": "not blank",
                "cc_version": "0",
                },
            user=u)

        product = f.save()

        self.assertEqual(product.name, "Two")
        self.assertEqual(product.description, "not blank")
        self.assertEqual(product.created_by, u)

        version = product.versions.get()

        self.assertEqual(version.version, "1.0")
        self.assertEqual(version.created_by, u)


    def test_add_product_with_profile(self):
        """Can add product with initial environment profile."""
        profile = self.F.ProfileFactory.create()
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["OS X", "Linux"]}, profile=profile)

        f = self.form(
            {
                "name": "Two",
                "version": "1.0",
                "profile": profile.id,
                "cc_version": "0",
                }
            )

        version = f.save().versions.get()

        self.assertEqual(set(version.environments.all()), set(envs))

########NEW FILE########
__FILENAME__ = test_views
# coding: utf-8
"""
Tests for product management views.

"""
from django.core.urlresolvers import reverse

from tests import case



class ProductsTest(case.view.manage.ListViewTestCase,
                   case.view.ListFinderTests,
                   case.view.manage.MTModelListTests,
                   case.view.NoCacheTest,
                   ):
    """Test for products manage list view."""
    form_id = "manage-products-form"
    perm = "manage_products"


    @property
    def factory(self):
        """The model factory for this manage list."""
        return self.F.ProductFactory


    @property
    def url(self):
        """Shortcut for manage-products url."""
        return reverse("manage_products")


    def test_filter_by_name(self):
        """Can filter by name."""
        self.factory.create(name="Product 1")
        self.factory.create(name="Product 2")

        res = self.get(params={"filter-name": "1"})

        self.assertInList(res, "Product 1")
        self.assertNotInList(res, "Product 2")


    def test_sort_by_name(self):
        """Can sort by name."""
        self.factory.create(name="Product 1")
        self.factory.create(name="Product 2")

        res = self.get(params={"sortfield": "name", "sortdirection": "desc"})

        self.assertOrderInList(res, "Product 2", "Product 1")



class ProductDetailTest(case.view.AuthenticatedViewTestCase,
                        case.view.NoCacheTest,
                        ):
    """Test for product-detail ajax view."""
    def setUp(self):
        """Setup for case details tests; create a product."""
        super(ProductDetailTest, self).setUp()
        self.product = self.F.ProductFactory.create()


    @property
    def url(self):
        """Shortcut for product detail url."""
        return reverse(
            "manage_product_details", kwargs=dict(product_id=self.product.id))


    def test_details_versions(self):
        """Details lists product versions."""
        self.F.ProductVersionFactory.create(
            product=self.product, version="0.8-alpha-1")

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("0.8-alpha-1")


    def test_details_team(self):
        """Details lists team."""
        u = self.F.UserFactory.create(username="somebody")
        self.product.add_to_team(u)

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("somebody")



class AddProductTest(case.view.FormViewTestCase,
                     case.view.NoCacheTest,
                     ):
    """Tests for add product view."""
    form_id = "product-add-form"


    @property
    def url(self):
        """Shortcut for add-product url."""
        return reverse("manage_product_add")


    def setUp(self):
        """Add manage-products permission to user."""
        super(AddProductTest, self).setUp()
        self.add_perm("manage_products")


    def test_success(self):
        """Can add a product with basic data, including a version."""
        form = self.get_form()
        form["name"] = "Some browser ùê"
        form["description"] = "Some old browser or other."
        form["version"] = "1.0"

        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_products"))

        res.follow().mustcontain("Product 'Some browser ùê' added.")

        p = self.model.Product.objects.get()
        self.assertEqual(unicode(p.name), u"Some browser ùê")
        self.assertEqual(p.description, "Some old browser or other.")
        self.assertEqual(p.versions.get().version, "1.0")


    def test_error(self):
        """Bound form with errors is re-displayed."""
        res = self.get_form().submit()

        self.assertEqual(res.status_int, 200)
        res.mustcontain("This field is required.")


    def test_requires_manage_products_permission(self):
        """Requires manage-products permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")



class EditProductTest(case.view.FormViewTestCase,
                      case.view.NoCacheTest,
                      ):
    """Tests for edit-product view."""
    form_id = "product-edit-form"


    def setUp(self):
        """Setup for product edit tests; create a product, add perm."""
        super(EditProductTest, self).setUp()
        self.product = self.F.ProductFactory.create()
        self.add_perm("manage_products")


    @property
    def url(self):
        """Shortcut for edit-product url."""
        return reverse(
            "manage_product_edit", kwargs=dict(product_id=self.product.id))


    def test_requires_manage_products_permission(self):
        """Requires manage-products permission."""
        res = self.app.get(self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")


    def test_save_basic(self):
        """Can save updates; redirects to manage products list."""
        form = self.get_form()
        form["name"] = "new name ùê"
        form["description"] = "new desc"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_products"))

        res.follow().mustcontain("Saved 'new name ùê'.")

        p = self.refresh(self.product)
        self.assertEqual(unicode(p.name), u"new name ùê")
        self.assertEqual(p.description, "new desc")


    def test_errors(self):
        """Test bound form redisplay with errors."""
        form = self.get_form()
        form["name"] = ""
        res = form.submit(status=200)

        res.mustcontain("This field is required.")


    def test_concurrency_error(self):
        """Concurrency error is displayed."""
        form = self.get_form()

        self.product.save()

        form["name"] = "New"
        res = form.submit(status=200)

        res.mustcontain("Another user saved changes to this object")

########NEW FILE########
__FILENAME__ = test_forms
"""
Tests for productversion-management forms.

"""
from tests import case



class EditProductVersionFormTest(case.DBTestCase):
    """Tests for EditProductVersionForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.productversions.forms import EditProductVersionForm
        return EditProductVersionForm


    def test_edit_productversion(self):
        """Can edit productversion version and codename, with modified-by."""
        p = self.F.ProductVersionFactory(version="1.0", codename="Foo")
        u = self.F.UserFactory()

        f = self.form(
            {
                "version": "2.0",
                "codename": "New",
                "cc_version": str(p.cc_version)
                },
            instance=p,
            user=u,
            )

        productversion = f.save()

        self.assertEqual(productversion.version, "2.0")
        self.assertEqual(productversion.codename, "New")
        self.assertEqual(productversion.modified_by, u)


    def test_edit_fill_from_2_missing(self):
        """Fill from a pv that has 2 cases missing from this one."""
        pv1 = self.F.ProductVersionFactory(version="1.0", codename="Foo")
        pv_fill_from = self.F.ProductVersionFactory(product=pv1.product, version="2.0")
        pv1 = self.refresh(pv1)

        # cv existing in both
        cv_exist = self.F.CaseVersionFactory(productversion=pv1)
        self.F.CaseVersionFactory(
            case=cv_exist.case,
            productversion=pv_fill_from,
            )

        # cvs we will end up with
        cv_new1 = self.F.CaseVersionFactory(
            productversion=pv_fill_from,
            name="noclone")
        exp_cvs = [
            cv_new1.case.id,
            self.F.CaseVersionFactory(productversion=pv_fill_from).case.id,
            cv_exist.case.id,
            ]

        f = self.form(
            {
                "version": "1.0",
                "fill_from": str(pv_fill_from.id),
                "cc_version": str(pv1.cc_version)
            },
            instance=pv1,
            )

        productversion = f.save()

        self.assertEqual(
            set(productversion.caseversions.all().values_list(
                "case_id", flat=True)),
            set(exp_cvs),
            )
        self.assertEqual(
            cv_new1.name,
            productversion.caseversions.get(case=cv_new1.case).name,
            )


    def test_edit_fill_from_2_missing_1_extra(self):
        """Fill from a pv get 2, this has 1 extra."""
        pv1 = self.F.ProductVersionFactory(version="1.0", codename="Foo")
        pv_fill_from = self.F.ProductVersionFactory(product=pv1.product, version="2.0")
        pv1 = self.refresh(pv1)

        cv1 = self.F.CaseVersionFactory(productversion=pv1)

        # cv existing in both
        cv_shared = self.F.CaseVersionFactory(productversion=pv1)
        self.F.CaseVersionFactory(
            case=cv_shared.case,
            productversion=pv_fill_from,
            )

        # cvs we will end up with
        exp_cvs = [
            self.F.CaseVersionFactory(productversion=pv_fill_from).case.id,
            self.F.CaseVersionFactory(productversion=pv_fill_from).case.id,
            cv_shared.case.id,
            cv1.case.id
            ]

        f = self.form(
            {
                "version": "1.0",
                "fill_from": str(pv_fill_from.id),
                "cc_version": str(pv1.cc_version)
            },
            instance=pv1,
            )

        productversion = f.save()

        self.assertEqual(
            set(productversion.caseversions.all().values_list(
                "case_id", flat=True)),
            set(exp_cvs),
            )


    def test_edit_fill_from_0_missing(self):
        """Fill from a pv that has 2 cases missing from this one."""
        pv1 = self.F.ProductVersionFactory(version="1.0", codename="Foo")
        pv_fill_from = self.F.ProductVersionFactory(product=pv1.product, version="2.0")
        pv1 = self.refresh(pv1)

        cv1 = self.F.CaseVersionFactory(productversion=pv1)

        # cv existing in both
        cv_shared = self.F.CaseVersionFactory(productversion=pv1)
        self.F.CaseVersionFactory(
            case=cv_shared.case,
            productversion=pv_fill_from,
            )

        # cvs we will end up with
        exp_cvs = [
            cv_shared.case.id,
            cv1.case.id
        ]

        f = self.form(
            {
                "version": "1.0",
                "fill_from": str(pv_fill_from.id),
                "cc_version": str(pv1.cc_version)
            },
            instance=pv1,
            )

        productversion = f.save()

        self.assertEqual(
            set(productversion.caseversions.all().values_list(
                "case_id", flat=True)),
            set(exp_cvs),
            )




class AddProductVersionFormTest(case.DBTestCase):
    """Tests for AddProductVersionForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.productversions.forms import AddProductVersionForm
        return AddProductVersionForm


    def test_add_productversion(self):
        """Can add productversion; sets created-by user, clones envs/cases."""
        pv = self.F.ProductVersionFactory.create(version="1.0")
        envs = self.F.EnvironmentFactory.create_full_set({"OS": ["Linux"]})
        pv.environments.add(*envs)
        cv = self.F.CaseVersionFactory.create(productversion=pv)
        u = self.F.UserFactory()

        f = self.form(
            {
                "product": str(pv.product.id),
                "version": "2.0",
                "clone_from": str(pv.id),
                "codename": "Foo",
                "cc_version": "0",
                },
            user=u
            )

        self.assertTrue(f.is_valid(), f.errors)

        productversion = f.save()

        self.assertEqual(productversion.product, pv.product)
        self.assertEqual(set(productversion.environments.all()), set(envs))
        new_cv = productversion.caseversions.get()
        self.assertEqual(new_cv.case, cv.case)
        self.assertEqual(new_cv.name, cv.name)
        self.assertEqual(productversion.version, "2.0")
        self.assertEqual(productversion.codename, "Foo")
        self.assertEqual(productversion.created_by, u)

########NEW FILE########
__FILENAME__ = test_views
# coding: utf-8
"""
Tests for productversion management views.

"""
from django.core.urlresolvers import reverse

from tests import case



class ProductVersionsTest(case.view.manage.ListViewTestCase,
                          case.view.ListFinderTests,
                          case.view.manage.MTModelListTests,
                          case.view.NoCacheTest,
                          ):
    """Test for productversions manage list view."""
    form_id = "manage-productversions-form"
    perm = "manage_products"


    @property
    def factory(self):
        """The model factory for this manage list."""
        return self.F.ProductVersionFactory


    @property
    def url(self):
        """Shortcut for manage-productversions url."""
        return reverse("manage_productversions")


    def test_filter_by_version(self):
        """Can filter by version."""
        self.factory.create(name="Foo 1.0")
        self.factory.create(name="Foo 2.0")

        res = self.get(params={"filter-version": "1"})

        self.assertInList(res, "Foo 1.0")
        self.assertNotInList(res, "Foo 2.0")


    def test_filter_by_codename(self):
        """Can filter by codename."""
        self.factory.create(name="Foo 1.0", codename="One")
        self.factory.create(name="Foo 2.0", codename="Two")

        res = self.get(params={"filter-codename": "One"})

        self.assertInList(res, "Foo 1.0")
        self.assertNotInList(res, "Foo 2.0")


    def test_filter_by_product(self):
        """Can filter by product."""
        one = self.factory.create(name="Foo 1.0")
        self.factory.create(name="Foo 2.0")

        res = self.get(params={"filter-product": str(one.product.id)})

        self.assertInList(res, "Foo 1.0")
        self.assertNotInList(res, "Foo 2.0")


    def test_filter_by_env_elements(self):
        """Can filter by environment elements."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        self.factory.create(name="Foo 1", environments=envs)
        self.factory.create(name="Foo 2", environments=envs[1:])

        res = self.get(
            params={"filter-envelement": envs[0].elements.all()[0].id})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_sort_by_default_order(self):
        """Can sort by default order."""
        self.factory.create(product__name="B", version="1")
        self.factory.create(product__name="A", version="1")
        self.factory.create(product__name="A", version="2")

        res = self.get(
            params={"sortfield": "product,order", "sortdirection": "asc"})

        self.assertOrderInList(res, "A 1", "A 2", "B 1")


    def test_sort_by_codename(self):
        """Can sort by codename."""
        self.factory.create(name="ProductVersion 1", codename="B")
        self.factory.create(name="ProductVersion 2", codename="A")

        res = self.get(
            params={"sortfield": "codename", "sortdirection": "asc"})

        self.assertOrderInList(res, "ProductVersion 2", "ProductVersion 1")


    def test_sort_by_product(self):
        """Can sort by product."""
        self.factory.create(product__name="B", version="1")
        self.factory.create(product__name="A", version="1")

        res = self.get(
            params={"sortfield": "product", "sortdirection": "asc"})

        self.assertOrderInList(res, "A 1", "B 1")



class ProductVersionDetailTest(case.view.AuthenticatedViewTestCase,
                               case.view.NoCacheTest,
                               ):
    """Test for productversion-detail ajax view."""
    def setUp(self):
        """Setup for case details tests; create a productversion."""
        super(ProductVersionDetailTest, self).setUp()
        self.productversion = self.F.ProductVersionFactory.create()


    @property
    def url(self):
        """Shortcut for product version detail url."""
        return reverse(
            "manage_productversion_details",
            kwargs=dict(productversion_id=self.productversion.id)
            )


    def test_details_envs(self):
        """Details lists envs."""
        self.productversion.environments.add(
            *self.F.EnvironmentFactory.create_full_set({"OS": ["Windows"]}))

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("Windows")


    def test_details_runs(self):
        """Details lists runs."""
        self.F.RunFactory.create(
            productversion=self.productversion, name="Foo Run")

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("Foo Run")


    def test_details_team(self):
        """Details lists team."""
        u = self.F.UserFactory.create(username="somebody")
        self.productversion.add_to_team(u)

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("somebody")



class AddProductVersionTest(case.view.FormViewTestCase,
                            case.view.NoCacheTest,
                            ):
    """Tests for add product version view."""
    form_id = "productversion-add-form"


    @property
    def url(self):
        """Shortcut for add-productversion url."""
        return reverse("manage_productversion_add")


    def setUp(self):
        """Add manage-products permission to user."""
        super(AddProductVersionTest, self).setUp()
        self.add_perm("manage_products")


    def test_success(self):
        """Can add a productversion with basic data."""
        p = self.F.ProductFactory.create(name="Foo")
        form = self.get_form()
        form["product"] = str(p.id)
        form["codename"] = "codename"
        form["version"] = "1.0"

        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_productversions"))

        res.follow().mustcontain("Product version 'Foo 1.0' added.")

        pv = self.model.ProductVersion.objects.get()
        self.assertEqual(pv.name, "Foo 1.0")
        self.assertEqual(pv.codename, "codename")


    def test_error(self):
        """Bound form with errors is re-displayed."""
        res = self.get_form().submit()

        self.assertEqual(res.status_int, 200)
        res.mustcontain("This field is required.")


    def test_requires_manage_products_permission(self):
        """Requires manage-products permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")



class EditProductVersionTest(case.view.FormViewTestCase,
                             case.view.NoCacheTest,
                             ):
    """Tests for edit-productversion view."""
    form_id = "productversion-edit-form"


    def setUp(self):
        """Setup for edit tests; create productversion, add perm."""
        super(EditProductVersionTest, self).setUp()
        self.productversion = self.F.ProductVersionFactory.create(
            product__name="Foo ùê")
        self.add_perm("manage_products")


    @property
    def url(self):
        """Shortcut for edit-productversion url."""
        return reverse(
            "manage_productversion_edit",
            kwargs=dict(productversion_id=self.productversion.id))


    def test_requires_manage_products_permission(self):
        """Requires manage-products permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")


    def test_save_basic(self):
        """Can save updates; redirects to manage productversions list."""
        form = self.get_form()
        form["version"] = "2.0"
        form["codename"] = "new code"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_productversions"))

        res.follow().mustcontain("Saved 'Foo ùê 2.0'.")

        pv = self.refresh(self.productversion)
        self.assertEqual(unicode(pv.name), u"Foo ùê 2.0")
        self.assertEqual(pv.codename, "new code")


    def test_errors(self):
        """Test bound form redisplay with errors."""
        form = self.get_form()
        form["version"] = ""
        res = form.submit(status=200)

        res.mustcontain("This field is required.")


    def test_concurrency_error(self):
        """Concurrency error is displayed."""
        form = self.get_form()

        self.productversion.save()

        form["codename"] = "New"
        res = form.submit(status=200)

        res.mustcontain("Another user saved changes to this object")

########NEW FILE########
__FILENAME__ = test_forms
"""
Tests for run-management forms.

"""
from datetime import date
from django.core.exceptions import ValidationError

from tests import case



class EditRunFormTest(case.DBTestCase):
    """Tests for EditRunForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.runs.forms import EditRunForm
        return EditRunForm


    def test_edit_run(self):
        """Can edit run, including productversion, with modified-by."""
        pv = self.F.ProductVersionFactory.create()
        r = self.F.RunFactory.create(productversion__product=pv.product)
        u = self.F.UserFactory.create()

        f = self.form(
            {
                "productversion": str(pv.id),
                "name": "new name",
                "description": "new desc",
                "start": "1/3/2012",
                "end": "1/10/2012",
                "cc_version": str(r.cc_version),
                },
            instance=r,
            user=u)

        run = f.save()

        self.assertEqual(run.productversion, pv)
        self.assertEqual(run.name, "new name")
        self.assertEqual(run.description, "new desc")
        self.assertEqual(run.start, date(2012, 1, 3))
        self.assertEqual(run.end, date(2012, 1, 10))
        self.assertEqual(run.modified_by, u)


    def test_add_suites(self):
        """Can add suites to a run."""
        pv = self.F.ProductVersionFactory.create()
        r = self.F.RunFactory.create(productversion__product=pv.product)
        s = self.F.SuiteFactory.create(product=pv.product)

        f = self.form(
            {
                "productversion": str(pv.id),
                "name": r.name,
                "description": r.description,
                "start": r.start.strftime("%m/%d/%Y"),
                "end": "",
                "suites": [str(s.id)],
                "cc_version": str(r.cc_version),
                },
            instance=r,
            )

        run = f.save()

        self.assertEqual(set(run.suites.all()), set([s]))


    def test_add_bad_suite(self):
        """Attempt to add non-existent suite to a run."""
        pv = self.F.ProductVersionFactory.create()
        r = self.F.RunFactory.create(productversion__product=pv.product)
        s = self.F.SuiteFactory.create(product=pv.product)

        f = self.form(
            {
                "productversion": str(pv.id),
                "name": r.name,
                "description": r.description,
                "start": r.start.strftime("%m/%d/%Y"),
                "end": "",
                "suites": [str(s.id + 1)],
                "cc_version": str(r.cc_version),
                },
            instance=r,
            )

        self.assertFalse(f.is_valid())
        self.assertEqual(
            f.errors["suites"],
            [u"Not a valid suite for this run."]
        )


    def test_edit_suites(self):
        """Can edit suites in a run."""
        pv = self.F.ProductVersionFactory.create()
        r = self.F.RunFactory.create(productversion__product=pv.product)
        self.F.RunSuiteFactory.create(run=r)
        s = self.F.SuiteFactory.create(product=pv.product)

        f = self.form(
            {
                "productversion": str(pv.id),
                "name": r.name,
                "description": r.description,
                "start": r.start.strftime("%m/%d/%Y"),
                "end": "",
                "suites": [str(s.id)],
                "cc_version": str(r.cc_version),
                },
            instance=r,
            )

        run = f.save()

        self.assertEqual(set(run.suites.all()), set([s]))


    def test_no_change_product_option(self):
        """No option to change to a version of a different product."""
        self.F.ProductVersionFactory.create()
        r = self.F.RunFactory()

        f = self.form(instance=r)
        self.assertEqual(
            [c[0] for c in f.fields["productversion"].choices],
            ['', r.productversion.id]
            )


    def test_no_edit_product(self):
        """Can't change product"""
        pv = self.F.ProductVersionFactory()
        r = self.F.RunFactory()

        f = self.form(
            {
                "productversion": str(pv.id),
                "name": "new name",
                "description": "new desc",
                "start": "1/3/2012",
                "end": "1/10/2012",
                "cc_version": str(r.cc_version),
                },
            instance=r,
            )

        self.assertFalse(f.is_valid())
        self.assertEqual(
            f.errors["productversion"],
            [u"Select a valid choice. "
             "That choice is not one of the available choices."]
            )


    def test_active_run_no_product_version_options(self):
        """If editing active run, current product version is only option."""
        pv = self.F.ProductVersionFactory.create()
        r = self.F.RunFactory(
            status=self.model.Run.STATUS.active,
            productversion__product=pv.product)

        f = self.form(instance=r)
        self.assertEqual(
            [c[0] for c in f.fields["productversion"].choices],
            ['', r.productversion.id]
            )


    def test_active_run_product_version_readonly(self):
        """If editing active run, product version field is marked readonly."""
        pv = self.F.ProductVersionFactory.create()
        r = self.F.RunFactory(
            status=self.model.Run.STATUS.active,
            productversion__product=pv.product)

        f = self.form(instance=r)
        self.assertTrue(f.fields["productversion"].readonly)


    def test_active_run_no_edit_product_version(self):
        """Can't change product version of active run"""
        pv = self.F.ProductVersionFactory()
        r = self.F.RunFactory(status=self.model.Run.STATUS.active)

        f = self.form(
            {
                "productversion": str(pv.id),
                "name": "new name",
                "description": "new desc",
                "start": "1/3/2012",
                "end": "1/10/2012",
                "cc_version": str(r.cc_version),
                },
            instance=r,
            )

        self.assertFalse(f.is_valid())
        self.assertEqual(
            f.errors["productversion"],
            [u"Select a valid choice. "
             "That choice is not one of the available choices."]
            )


    def test_active_run_suites_preserved(self):
        """
        Can save run with suite list as names and not disturb suites.

        This happens when you try to save an active run.  The suites
        are names rather than ids, and are read-only.  So there should
        be no change.
        """
        pv = self.F.ProductVersionFactory.create()
        s = self.F.SuiteFactory.create(product=pv.product)
        r = self.F.RunFactory.create(productversion__product=pv.product)
        self.F.RunSuiteFactory.create(run=r, suite=s)

        f = self.form(
            {
                "productversion": str(pv.id),
                "name": r.name,
                "description": r.description,
                "start": r.start.strftime("%m/%d/%Y"),
                "end": "",
                "suites": [str(s.name)],
                "cc_version": str(r.cc_version),
                },
            instance=r,
            )

        run = f.save()

        self.assertEqual(set(run.suites.all()), set([s]))



class AddRunFormTest(case.DBTestCase):
    """Tests for AddRunForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.runs.forms import AddRunForm
        return AddRunForm


    def test_add_run(self):
        """Can add run, has created-by user."""
        pv = self.F.ProductVersionFactory()
        u = self.F.UserFactory()

        f = self.form(
            {
                "productversion": str(pv.id),
                "name": "Foo",
                "description": "foo desc",
                "start": "1/3/2012",
                "end": "1/10/2012",
                "cc_version": "0",
                },
            user=u
            )

        run = f.save()

        self.assertEqual(run.productversion, pv)
        self.assertEqual(run.name, "Foo")
        self.assertEqual(run.description, "foo desc")
        self.assertEqual(run.start, date(2012, 1, 3))
        self.assertEqual(run.end, date(2012, 1, 10))
        self.assertEqual(run.created_by, u)


    def test_add_run_series_clears_build(self):
        """Can add run as a series, and clears the build field if set."""
        pv = self.F.ProductVersionFactory()
        u = self.F.UserFactory()

        f = self.form(
            {
                "productversion": str(pv.id),
                "name": "Foo",
                "description": "foo desc",
                "start": "1/3/2012",
                "end": "1/10/2012",
                "cc_version": "0",
                "is_series": True,
                "build": "rah",
                },
            user=u
        )

        run = f.save()

        self.assertEqual(run.build, None)


    def test_add_run_withsuites(self):
        """Can add suites to a new run."""
        pv = self.F.ProductVersionFactory.create()
        s = self.F.SuiteFactory.create(product=pv.product)

        f = self.form(
            {
                "productversion": str(pv.id),
                "name": "some name",
                "description": "some desc",
                "start": "1/3/2012",
                "end": "",
                "suites": [str(s.id)],
                "cc_version": "0",
                },
            )

        run = f.save()

        self.assertEqual(set(run.suites.all()), set([s]))

########NEW FILE########
__FILENAME__ = test_views
# coding: utf-8
"""
Tests for run management views.

"""
from datetime import date

from django.core.urlresolvers import reverse

from tests import case

from ...lists.runs import RunsListTests



class RunsTest(case.view.manage.ListViewTestCase,
               RunsListTests,
               case.view.ListFinderTests,
               case.view.manage.MTModelListTests,
               case.view.manage.StatusListTests,
               case.view.NoCacheTest,
               ):
    """Test for runs manage list view."""
    form_id = "manage-runs-form"
    perm = "manage_runs"


    @property
    def factory(self):
        """The model factory for this manage list."""
        return self.F.RunFactory


    @property
    def url(self):
        """Shortcut for manage-runs url."""
        return reverse("manage_runs")



class RunDetailTest(case.view.AuthenticatedViewTestCase,
                    case.view.NoCacheTest,
                    ):
    """Test for run-detail ajax view."""
    def setUp(self):
        """Setup for case details tests; create a run."""
        super(RunDetailTest, self).setUp()
        self.testrun = self.F.RunFactory.create()


    @property
    def url(self):
        """Shortcut for run detail url."""
        return reverse(
            "manage_run_details",
            kwargs=dict(run_id=self.testrun.id)
            )


    def test_details_description(self):
        """Details includes description, markdownified safely."""
        self.testrun.description = "_foodesc_ <script>"
        self.testrun.save()

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("<em>foodesc</em> &lt;script&gt;")


    def test_details_envs(self):
        """Details lists envs."""
        self.testrun.environments.add(
            *self.F.EnvironmentFactory.create_full_set({"OS": ["Windows"]}))

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("Windows")


    def test_details_suites(self):
        """Details lists suites."""
        self.F.RunSuiteFactory.create(run=self.testrun, suite__name="Foo Suite")

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("Foo Suite")


    def test_details_team(self):
        """Details lists team."""
        u = self.F.UserFactory.create(username="somebody")
        self.testrun.add_to_team(u)

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("somebody")



class AddRunTest(case.view.FormViewTestCase,
                 case.view.NoCacheTest,
                 ):
    """Tests for add run view."""
    form_id = "run-add-form"


    @property
    def url(self):
        """Shortcut for add-run url."""
        return reverse("manage_run_add")


    def setUp(self):
        """Add manage-runs permission to user."""
        super(AddRunTest, self).setUp()
        self.add_perm("manage_runs")


    def test_success(self):
        """Can add a run with basic data."""
        pv = self.F.ProductVersionFactory.create()
        form = self.get_form()
        form["productversion"] = str(pv.id)
        form["name"] = "Foo Run ùê"
        form["description"] = "Foo desc"
        form["start"] = "2012-1-2"
        form["end"] = "2012-1-20"

        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_runs"))

        res.follow().mustcontain("Run 'Foo Run ùê' added.")

        r = pv.runs.get()
        self.assertEqual(unicode(r.name), u"Foo Run ùê")
        self.assertEqual(r.description, "Foo desc")
        self.assertEqual(r.start, date(2012, 1, 2))
        self.assertEqual(r.end, date(2012, 1, 20))


    def test_error(self):
        """Bound form with errors is re-displayed."""
        res = self.get_form().submit()

        self.assertEqual(res.status_int, 200)
        res.mustcontain("This field is required.")


    def test_non_field_error(self):
        """Non-field errors are displayed"""
        form = self.get_form()

        form["start"] = "2012-3-1"
        form["end"] = "2012-2-1"

        res = form.submit()

        self.assertEqual(res.status_int, 200)
        res.mustcontain("Start date must be prior to end date.")


    def test_requires_manage_runs_permission(self):
        """Requires manage-runs permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")



class EditRunTest(case.view.FormViewTestCase,
                  case.view.NoCacheTest,
                  ):
    """Tests for edit-run view."""
    form_id = "run-edit-form"


    def setUp(self):
        """Setup for edit tests; create run, add perm."""
        super(EditRunTest, self).setUp()
        self.testrun = self.F.RunFactory.create()
        self.add_perm("manage_runs")


    @property
    def url(self):
        """Shortcut for edit-run url."""
        return reverse(
            "manage_run_edit", kwargs=dict(run_id=self.testrun.id))


    def test_requires_manage_runs_permission(self):
        """Requires manage-runs permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")


    def test_save_basic(self):
        """Can save updates; redirects to manage runs list."""
        form = self.get_form()
        form["name"] = "New Foo ùê"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_runs"))

        res.follow().mustcontain("Saved 'New Foo ùê'.")

        r = self.refresh(self.testrun)
        self.assertEqual(unicode(r.name), u"New Foo ùê")



    def test_errors(self):
        """Test bound form redisplay with errors."""
        form = self.get_form()
        form["name"] = ""
        res = form.submit(status=200)

        res.mustcontain("This field is required.")


    def test_active_run_product_version_readonly(self):
        """If editing active run, product version field is read only."""
        self.testrun.status = self.testrun.STATUS.active
        self.testrun.save()
        pv = self.testrun.productversion

        res = self.get()

        div = res.html.find("div", "product-version-field")
        self.assertEqual(div.find("span", "value").text, unicode(pv))
        self.assertEqual(
            div.find(
                "input",
                attrs={"name": "productversion", "type": "hidden"}
                )["value"],
            unicode(pv.id)
            )


    def test_concurrency_error(self):
        """Concurrency error is displayed."""
        form = self.get_form()

        self.testrun.save()

        form["name"] = "New"
        res = form.submit(status=200)

        res.mustcontain("Another user saved changes to this object")

########NEW FILE########
__FILENAME__ = test_forms
"""
Tests for suite-management forms.

"""
from tests import case



class EditSuiteFormTest(case.DBTestCase):
    """Tests for EditSuiteForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.suites.forms import EditSuiteForm
        return EditSuiteForm


    def test_edit_suite(self):
        """Can edit suite, including new product, sets modified-by."""
        p = self.F.ProductFactory()
        s = self.F.SuiteFactory()
        u = self.F.UserFactory()

        f = self.form(
            {
                "product": str(p.id),
                "name": "new name",
                "description": "new desc",
                "status": "draft",
                "cc_version": str(s.cc_version),
                },
            instance=s,
            user=u)

        suite = f.save()

        self.assertEqual(suite.product, p)
        self.assertEqual(suite.name, "new name")
        self.assertEqual(suite.description, "new desc")
        self.assertEqual(suite.modified_by, u)


    def test_no_change_product_option(self):
        """No option to change to different product if there are cases."""
        self.F.ProductFactory.create()
        s = self.F.SuiteFactory()
        self.F.SuiteCaseFactory(suite=s)

        f = self.form(instance=s)
        self.assertEqual(
            [c[0] for c in f.fields["product"].choices],
            ['', s.product.id]
            )
        self.assertTrue(f.fields["product"].readonly)


    def test_no_edit_product(self):
        """Can't change product if there are cases"""
        p = self.F.ProductFactory()
        s = self.F.SuiteFactory()
        self.F.SuiteCaseFactory(suite=s)

        f = self.form(
            {
                "product": str(p.id),
                "name": "new name",
                "description": "new desc",
                "status": "draft",
                "cc_version": str(s.cc_version),
                },
            instance=s,
            )

        self.assertFalse(f.is_valid())
        self.assertEqual(
            f.errors["product"],
            [u"Select a valid choice. "
             "That choice is not one of the available choices."]
            )


    def test_add_cases(self):
        """Can add cases to a suite."""
        s = self.F.SuiteFactory()
        c = self.F.CaseFactory(product=s.product)

        f = self.form(
            {
                "product": str(s.product.id),
                "name": s.name,
                "description": s.description,
                "status": s.status,
                "cases": [str(c.id)],
                "cc_version": str(s.cc_version),
                },
            instance=s,
            )

        self.assertTrue(f.is_valid())
        suite = f.save()

        self.assertEqual(set(suite.cases.all()), set([c]))


    def test_add_bad_case(self):
        """Try to add a non-existent case to a suite, get exception."""
        s = self.F.SuiteFactory()
        c = self.F.CaseFactory(product=s.product)

        f = self.form(
            {
                "product": str(s.product.id),
                "name": s.name,
                "description": s.description,
                "status": s.status,
                "cases": [str(c.id + 1)],
                "cc_version": str(s.cc_version),
                },
            instance=s,
            )

        self.assertFalse(f.is_valid())
        self.assertEqual(
            f.errors["cases"],
            [u"Not a valid case for this suite."]
        )


    def test_edit_cases(self):
        """Can edit cases of a suite."""
        s = self.F.SuiteFactory.create()
        self.F.SuiteCaseFactory.create(suite=s)
        c = self.F.CaseFactory.create(product=s.product)

        f = self.form(
            {
                "product": str(s.product.id),
                "name": s.name,
                "description": s.description,
                "status": s.status,
                "cases": [str(c.id)],
                "cc_version": str(s.cc_version),
                },
            instance=s,
            )

        self.assertTrue(f.is_valid())
        suite = f.save()

        self.assertEqual(set(suite.cases.all()), set([c]))


    def test_edit_cases_order_only(self):
        """Can edit cases of a suite."""
        s = self.F.SuiteFactory.create()
        c1 = self.F.CaseFactory.create(product=s.product)
        c2 = self.F.CaseFactory.create(product=s.product)
        self.F.SuiteCaseFactory.create(suite=s, case=c1, order=0)
        self.F.SuiteCaseFactory.create(suite=s, case=c2, order=1)

        f = self.form(
            {
                "product": str(s.product.id),
                "name": s.name,
                "description": s.description,
                "status": s.status,
                "cases": [str(c2.id), str(c1.id)],
                "cc_version": str(s.cc_version),
                },
            instance=s,
            )

        self.assertTrue(f.is_valid())
        suite = f.save()

        self.assertEqual(
            list(suite.cases.all().order_by("suitecases__order")),
            [c2, c1],
            )


    def test_remove_dup_cases(self):
        """Can edit cases of a suite."""
        s = self.F.SuiteFactory.create()
        c = self.F.CaseFactory.create(product=s.product)
        self.F.SuiteCaseFactory.create(suite=s, case=c)
        self.F.SuiteCaseFactory.create(suite=s, case=c)

        f = self.form(
            {
                "product": str(s.product.id),
                "name": s.name,
                "description": s.description,
                "status": s.status,
                "cases": [str(c.id), str(c.id)],
                "cc_version": str(s.cc_version),
                },
            instance=s,
            )

        self.assertTrue(f.is_valid())
        suite = f.save()

        self.assertEqual(set(suite.cases.all()), set([c]))



class AddSuiteFormTest(case.DBTestCase):
    """Tests for AddSuiteForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.suites.forms import AddSuiteForm
        return AddSuiteForm


    def test_add_suite(self):
        """Can add suite, has created-by user."""
        p = self.F.ProductFactory()
        u = self.F.UserFactory()

        f = self.form(
            {
                "product": str(p.id),
                "name": "Foo",
                "description": "foo desc",
                "status": "active",
                "cc_version": "0",
                },
            user=u
            )

        suite = f.save()

        self.assertEqual(suite.product, p)
        self.assertEqual(suite.name, "Foo")
        self.assertEqual(suite.description, "foo desc")
        self.assertEqual(suite.created_by, u)


    def test_initial_state(self):
        """New suites should default to active state."""
        form = self.form()

        self.assertEqual(form["status"].value(), "active")


    def test_add_with_cases(self):
        """Can add cases to a new suite."""
        c = self.F.CaseFactory()

        f = self.form(
            {
                "product": str(c.product.id),
                "name": "some name",
                "description": "some desc",
                "status": "active",
                "cases": [str(c.id)],
                "cc_version": "0",
                },
            )

        self.assertTrue(f.is_valid())
        suite = f.save()

        self.assertEqual(set(suite.cases.all()), set([c]))


    def test_product_id_attrs(self):
        """Product and cases options have data-product-id."""
        case = self.F.CaseFactory.create()

        f = self.form()

        self.assertEqual(
            [
                c[1].attrs["data-product-id"]
                for c in f.fields["product"].choices
                if c[0]
                ],
            [case.product.id]
            )

########NEW FILE########
__FILENAME__ = test_views
# coding: utf-8
"""
Tests for suite management views.

"""
from django.core.urlresolvers import reverse

from tests import case



class SuitesTest(case.view.manage.ListViewTestCase,
                 case.view.ListFinderTests,
                 case.view.manage.MTModelListTests,
                 case.view.manage.StatusListTests,
                 case.view.NoCacheTest,
                 ):
    """Test for suites manage list view."""
    form_id = "manage-suites-form"
    perm = "manage_suites"


    @property
    def factory(self):
        """The model factory for this manage list."""
        return self.F.SuiteFactory


    @property
    def url(self):
        """Shortcut for manage-suites url."""
        return reverse("manage_suites")


    def test_filter_by_status(self):
        """Can filter by status."""
        self.factory.create(name="Foo 1", status=self.model.Suite.STATUS.active)
        self.factory.create(name="Foo 2", status=self.model.Suite.STATUS.draft)

        res = self.get(params={"filter-status": "active"})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_product(self):
        """Can filter by product."""
        one = self.factory.create(name="Foo 1")
        self.factory.create(name="Foo 2")

        res = self.get(
            params={"filter-product": str(one.product.id)})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_productversion(self):
        """Can filter by product of productversion."""
        pv1 = self.F.ProductVersionFactory()
        pv2 = self.F.ProductVersionFactory()
        one = self.factory.create(name="Foo 1", product=pv1.product)
        self.factory.create(name="Foo 2", product=pv2.product)

        res = self.get(
            params={"filter-productversion": str(pv1.id)})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_run(self):
        """Can filter by run."""
        one = self.factory.create(name="Foo 1")
        rs = self.F.RunSuiteFactory.create(suite=one)
        self.factory.create(name="Foo 2")

        res = self.get(
            params={"filter-run": str(rs.run.id)})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_name(self):
        """Can filter by name."""
        self.factory.create(name="Foo 1")
        self.factory.create(name="Foo 2")

        res = self.get(params={"filter-name": "1"})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_description(self):
        """Can filter by name."""
        self.factory.create(name="Foo 1", description="foo bar")
        self.factory.create(name="Foo 2", description="bar baz")

        res = self.get(params={"filter-description": "foo"})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_filter_by_case_id(self):
        """Can filter by included case id."""
        one = self.factory.create(name="Foo 1")
        sc = self.F.SuiteCaseFactory.create(suite=one)
        self.factory.create(name="Foo 2")

        res = self.get(params={"filter-case": str(sc.case.id)})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_sort_by_status(self):
        """Can sort by status."""
        self.factory.create(name="Suite 1", status=self.model.Suite.STATUS.active)
        self.factory.create(name="Suite 2", status=self.model.Suite.STATUS.draft)

        res = self.get(
            params={"sortfield": "status", "sortdirection": "desc"})

        self.assertOrderInList(res, "Suite 2", "Suite 1")


    def test_sort_by_name(self):
        """Can sort by name."""
        self.factory.create(name="Suite 1")
        self.factory.create(name="Suite 2")

        res = self.get(
            params={"sortfield": "name", "sortdirection": "desc"})

        self.assertOrderInList(res, "Suite 2", "Suite 1")


    def test_sort_by_product(self):
        """Can sort by product."""
        pb = self.F.ProductFactory.create(name="B")
        pa = self.F.ProductFactory.create(name="A")
        self.factory.create(name="Foo 1", product=pb)
        self.factory.create(name="Foo 2", product=pa)

        res = self.get(
            params={"sortfield": "product", "sortdirection": "asc"})

        self.assertOrderInList(res, "Foo 2", "Foo 1")


    def test_link_to_manage_cases(self):
        """Contains link to manage cases in suite."""
        s = self.factory.create(name="Foo")

        res = self.get()

        self.assertElement(
            res.html,
            "a",
            href="{0}?filter-suite={1}".format(
                reverse("manage_cases"), str(s.id)
                )
            )


    def assertAddCaseLink(self, res, suite, count=1):
        """Assert that given response contains link to add case in suite."""
        self.assertElement(
            res.html,
            "a",
            href="{0}?product={1}&suite={2}".format(
                reverse("manage_case_add"), str(suite.product.id), str(suite.id)
                ),
            count=count
            )


    def assertNoAddCaseLink(self, res, suite):
        """Assert that response does not contain link to add case in suite."""
        self.assertAddCaseLink(res, suite, 0)


    def test_add_case_link(self):
        """Contains link to add case in this suite (with proper perms)."""
        self.add_perm("create_cases")
        self.add_perm("manage_suite_cases")
        s = self.factory.create(name="Foo")

        self.assertAddCaseLink(self.get(), s)


    def test_add_case_link_requires_manage_suite_case_perm(self):
        """No link to add case in suite if no manage_suite_case perm."""
        self.add_perm("create_cases")
        s = self.factory.create(name="Foo")

        self.assertNoAddCaseLink(self.get(), s)


    def test_add_case_link_requires_create_cases_perm(self):
        """No link to add case in suite if no create_cases perm."""
        self.add_perm("manage_suite_cases")
        s = self.factory.create(name="Foo")

        self.assertNoAddCaseLink(self.get(), s)



class SuiteDetailTest(case.view.AuthenticatedViewTestCase,
                      case.view.NoCacheTest,
                      ):
    """Test for suite-detail ajax view."""
    def setUp(self):
        """Setup for case details tests; create a suite."""
        super(SuiteDetailTest, self).setUp()
        self.testsuite = self.F.SuiteFactory.create()


    @property
    def url(self):
        """Shortcut for suite detail url."""
        return reverse(
            "manage_suite_details",
            kwargs=dict(suite_id=self.testsuite.id)
            )


    def test_details_description(self):
        """Details includes description, markdownified safely."""
        self.testsuite.description = "_foodesc_ <script>"
        self.testsuite.save()

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("<em>foodesc</em> &lt;script&gt;")



class AddSuiteTest(case.view.FormViewTestCase,
                   case.view.NoCacheTest,
                   ):
    """Tests for add suite view."""
    form_id = "suite-add-form"


    @property
    def url(self):
        """Shortcut for add-suite url."""
        return reverse("manage_suite_add")


    def setUp(self):
        """Add manage-suites permission to user."""
        super(AddSuiteTest, self).setUp()
        self.add_perm("manage_suites")


    def test_success(self):
        """Can add a suite with basic data."""
        p = self.F.ProductFactory.create()
        form = self.get_form()
        form["product"] = str(p.id)
        form["name"] = "Foo Suite ùê"
        form["description"] = "Foo desc"
        form["status"] = "active"

        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_suites"))

        res.follow().mustcontain("Suite 'Foo Suite ùê' added.")

        s = p.suites.get()
        self.assertEqual(unicode(s.name), u"Foo Suite ùê")
        self.assertEqual(s.description, "Foo desc")
        self.assertEqual(s.status, "active")


    def test_error(self):
        """Bound form with errors is re-displayed."""
        res = self.get_form().submit()

        self.assertEqual(res.status_int, 200)
        res.mustcontain("This field is required.")


    def test_requires_manage_suites_permission(self):
        """Requires manage-suites permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")



class EditSuiteTest(case.view.FormViewTestCase,
                    case.view.NoCacheTest,
                    ):
    """Tests for edit-suite view."""
    form_id = "suite-edit-form"


    def setUp(self):
        """Setup for edit tests; create suite, add perm."""
        super(EditSuiteTest, self).setUp()
        self.suite = self.F.SuiteFactory.create()
        self.add_perm("manage_suites")


    @property
    def url(self):
        """Shortcut for edit-suite url."""
        return reverse(
            "manage_suite_edit", kwargs=dict(suite_id=self.suite.id))


    def test_requires_manage_suites_permission(self):
        """Requires manage-suites permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")


    def test_save_basic(self):
        """Can save updates; redirects to manage suites list."""
        form = self.get_form()
        form["name"] = "New Foo ùê"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_suites"))

        res.follow().mustcontain("Saved 'New Foo ùê'.")

        r = self.refresh(self.suite)
        self.assertEqual(unicode(r.name), u"New Foo ùê")



    def test_errors(self):
        """Test bound form redisplay with errors."""
        form = self.get_form()
        form["name"] = ""
        res = form.submit(status=200)

        res.mustcontain("This field is required.")


    def test_concurrency_error(self):
        """Concurrency error is displayed."""
        form = self.get_form()

        self.suite.save()

        form["name"] = "New"
        res = form.submit(status=200)

        res.mustcontain("Another user saved changes to this object")

########NEW FILE########
__FILENAME__ = test_forms
"""
Tests for tag management forms.

"""
from tests import case



class EditTagFormTest(case.DBTestCase):
    """Tests for EditTagForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.tags.forms import EditTagForm
        return EditTagForm


    def test_edit_tag(self):
        """Can edit tag name and product, with modified-by user."""
        p = self.F.ProductFactory.create()
        p2 = self.F.ProductFactory.create()
        t = self.F.TagFactory.create(name="Take One", product=p)
        u = self.F.UserFactory.create()

        f = self.form(
            {
                "name": "Two",
                "product": str(p2.id),
                "description": "new desc",
                "cc_version": str(t.cc_version),
                },
            instance=t,
            user=u,
            )

        tag = f.save()

        self.assertEqual(tag.name, "Two")
        self.assertEqual(tag.product, p2)
        self.assertEqual(tag.description, "new desc")
        self.assertEqual(tag.modified_by, u)


    def test_no_edit_product_if_tagged(self):
        """Can't change tag product if tag is in use."""
        p = self.F.ProductFactory.create()
        p2 = self.F.ProductFactory.create()
        cv = self.F.CaseVersionFactory.create(case__product=p, productversion__product=p)
        t = self.F.TagFactory.create(name="Take One", product=p)
        cv.tags.add(t)

        f = self.form(
            {"name": "Two", "product": str(p2.id)}, instance=t)

        self.assertFalse(f.is_valid())
        self.assertEqual(
            f.errors["product"],
            [u"Select a valid choice. "
             "That choice is not one of the available choices."]
            )


    def test_no_set_product_if_multiple_products_tagged(self):
        """Can't set tag product if cases from multiple products are tagged."""
        p = self.F.ProductFactory.create()
        p2 = self.F.ProductFactory.create()
        cv = self.F.CaseVersionFactory.create(
            case__product=p, productversion__product=p)
        cv2 = self.F.CaseVersionFactory.create(
            case__product=p2, productversion__product=p2)
        t = self.F.TagFactory.create(name="Take One")
        cv.tags.add(t)
        cv2.tags.add(t)

        f = self.form(
            {"name": "Two", "product": str(p.id)}, instance=t)

        self.assertFalse(f.is_valid())
        self.assertEqual(
            f.errors["product"],
            [u"Select a valid choice. "
             "That choice is not one of the available choices."]
            )


    def test_add_cases(self):
        """Can add cases to a tag."""
        cv = self.F.CaseVersionFactory()
        t = self.F.TagFactory(product=cv.productversion.product)

        f = self.form(
            {
                "product": str(t.product.id),
                "name": t.name,
                "description": t.description,
                "caseversions": [str(cv.id)],
                "cc_version": str(t.cc_version),
                },
            instance=t,
            )

        self.assertTrue(f.is_valid())
        tag = f.save()

        self.assertEqual(set(tag.caseversions.all()), set([cv]))


    def test_add_bad_case(self):
        """Try to add a non-existent case to a tag, get exception."""
        cv = self.F.CaseVersionFactory()
        t = self.F.TagFactory(product=cv.productversion.product)

        f = self.form(
            {
                "product": str(t.product.id),
                "name": t.name,
                "description": t.description,
                "caseversions": [str(cv.id + 1)],
                "cc_version": str(t.cc_version),
                },
            instance=t,
            )

        self.assertFalse(f.is_valid())
        self.assertEqual(
            f.errors["caseversions"],
            [u"Not a valid caseversion for this tag."]
        )


    def test_edit_cases(self):
        """Can edit cases of a tag."""
        pv = self.F.ProductVersionFactory()
        t = self.F.TagFactory(product=pv.product)
        t.caseversions.add(self.F.CaseVersionFactory(productversion=pv))
        cv_new = self.F.CaseVersionFactory(productversion=pv)

        f = self.form(
            {
                "product": str(t.product.id),
                "name": t.name,
                "description": t.description,
                "caseversions": [str(cv_new.id)],
                "cc_version": str(t.cc_version),
                },
            instance=t,
            )

        self.assertTrue(f.is_valid())
        tag = f.save()

        self.assertEqual(set(tag.caseversions.all()), set([cv_new]))



class AddTagFormTest(case.DBTestCase):
    """Tests for AddTagForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.tags.forms import AddTagForm
        return AddTagForm


    def test_add_tag(self):
        """Can add tag, with product and created-by user."""
        p = self.F.ProductFactory.create()
        u = self.F.UserFactory()

        f = self.form(
            {
                "name": "Two",
                "product": str(p.id),
                "description": "foo desc",
                "cc_version": "0",
                },
            user=u)

        tag = f.save()

        self.assertEqual(tag.name, "Two")
        self.assertEqual(tag.product, p)
        self.assertEqual(tag.description, "foo desc")
        self.assertEqual(tag.created_by, u)


    def test_add_with_cases(self):
        """Can add cases to a new tag."""
        cv = self.F.CaseVersionFactory()

        f = self.form(
            {
                "product": str(cv.productversion.product.id),
                "name": "some name",
                "description": "some desc",
                "caseversions": [str(cv.id)],
                "cc_version": 0,
                },
            )

        self.assertTrue(f.is_valid())
        tag = f.save()

        self.assertEqual(set(tag.caseversions.all()), set([cv]))


    def test_product_id_attrs(self):
        """Product and cases options have data-product-id."""
        cv = self.F.CaseVersionFactory.create()

        f = self.form()

        self.assertEqual(
            [
            c[1].attrs["data-product-id"]
            for c in f.fields["product"].choices
            if c[0]
            ],
            [cv.productversion.product.id]
        )

########NEW FILE########
__FILENAME__ = test_views
# coding: utf-8
"""
Tests for tag management views.

"""
from django.core.urlresolvers import reverse

from tests import case



class TagsTest(case.view.manage.ListViewTestCase,
               case.view.manage.MTModelListTests,
               case.view.NoCacheTest,
               ):
    """Test for tags manage list view."""
    form_id = "manage-tags-form"
    perm = "manage_tags"


    @property
    def factory(self):
        """The model factory for this manage list."""
        return self.F.TagFactory


    @property
    def url(self):
        """Shortcut for manage-tags url."""
        return reverse("manage_tags")


    def test_filter_by_name(self):
        """Can filter by name."""
        self.factory.create(name="Tag 1")
        self.factory.create(name="Tag 2")

        res = self.get(params={"filter-name": "1"})

        self.assertInList(res, "Tag 1")
        self.assertNotInList(res, "Tag 2")


    def test_sort_by_name(self):
        """Can sort by name."""
        self.factory.create(name="Tag 1")
        self.factory.create(name="Tag 2")

        res = self.get(params={"sortfield": "name", "sortdirection": "desc"})

        self.assertOrderInList(res, "Tag 2", "Tag 1")


    def test_filter_by_product(self):
        """Can filter by product."""
        p = self.F.ProductFactory.create()
        self.factory.create(name="Tag 1", product=p)
        self.factory.create(name="Tag 2")

        res = self.get(params={"filter-product": str(p.id)})

        self.assertInList(res, "Tag 1")
        self.assertNotInList(res, "Tag 2")


    def test_filter_by_productversion(self):
        """Can filter by product of productversion."""
        pv1 = self.F.ProductVersionFactory()
        pv2 = self.F.ProductVersionFactory()
        one = self.factory.create(name="Foo 1", product=pv1.product)
        self.factory.create(name="Foo 2", product=pv2.product)

        res = self.get(
            params={"filter-productversion": str(pv1.id)})

        self.assertInList(res, "Foo 1")
        self.assertNotInList(res, "Foo 2")


    def test_sort_by_product(self):
        """Can sort by product."""
        pb = self.F.ProductFactory.create(name="B")
        pa = self.F.ProductFactory.create(name="A")
        self.factory.create(name="Tag 1", product=pb)
        self.factory.create(name="Tag 2", product=pa)

        res = self.get(params={"sortfield": "product", "sortdirection": "asc"})

        self.assertOrderInList(res, "Tag 2", "Tag 1")



class TagDetailTest(case.view.AuthenticatedViewTestCase,
                      case.view.NoCacheTest,
                      ):
    """Test for tag-detail ajax view."""
    def setUp(self):
        """Setup for case details tests; create a suite."""
        super(TagDetailTest, self).setUp()
        self.tag = self.F.TagFactory.create()


    @property
    def url(self):
        """Shortcut for suite detail url."""
        return reverse(
            "manage_tag_details",
            kwargs=dict(tag_id=self.tag.id)
        )


    def test_details_description(self):
        """Details includes description, markdownified safely."""
        self.tag.description = "_foodesc_ <script>"
        self.tag.save()

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("<em>foodesc</em> &lt;script&gt;")



class AddTagTest(case.view.FormViewTestCase,
                 case.view.NoCacheTest,
                 ):
    """Tests for add tag view."""
    form_id = "tag-add-form"


    @property
    def url(self):
        """Shortcut for add-tag url."""
        return reverse("manage_tag_add")


    def setUp(self):
        """Add manage-tags permission to user."""
        super(AddTagTest, self).setUp()
        self.add_perm("manage_tags")


    def test_success(self):
        """Can add a tag with basic data, including a product."""
        p = self.F.ProductFactory.create()
        form = self.get_form()
        form["name"] = "Some browser ùê"
        form["product"] = str(p.id)

        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_tags"))

        res.follow().mustcontain("Tag 'Some browser ùê' added.")

        t = self.model.Tag.objects.get()
        self.assertEqual(unicode(t.name), u"Some browser ùê")
        self.assertEqual(t.product, p)


    def test_error(self):
        """Bound form with errors is re-displayed."""
        res = self.get_form().submit()

        self.assertEqual(res.status_int, 200)
        res.mustcontain("This field is required.")


    def test_requires_manage_tags_permission(self):
        """Requires manage-tags permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")



class EditTagTest(case.view.FormViewTestCase,
                  case.view.NoCacheTest,
                  ):
    """Tests for edit-tag view."""
    form_id = "tag-edit-form"


    def setUp(self):
        """Setup for tag edit tests; create a tag, add perm."""
        super(EditTagTest, self).setUp()
        self.tag = self.F.TagFactory.create()
        self.add_perm("manage_tags")


    @property
    def url(self):
        """Shortcut for edit-tag url."""
        return reverse(
            "manage_tag_edit", kwargs=dict(tag_id=self.tag.id))


    def test_requires_manage_tags_permission(self):
        """Requires manage-tags permission."""
        res = self.app.get(self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")


    def test_save_basic(self):
        """Can save updates; redirects to manage tags list."""
        p = self.F.ProductFactory.create()
        form = self.get_form()
        form["name"] = "new name ùê"
        form["product"] = str(p.id)
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_tags"))

        res.follow().mustcontain("Saved 'new name ùê'.")

        t = self.refresh(self.tag)
        self.assertEqual(unicode(t.name), u"new name ùê")
        self.assertEqual(t.product, p)


    def test_errors(self):
        """Test bound form redisplay with errors."""
        form = self.get_form()
        form["name"] = ""
        res = form.submit(status=200)

        res.mustcontain("This field is required.")


    def test_concurrency_error(self):
        """Concurrency error is displayed."""
        form = self.get_form()

        self.tag.save()

        form["name"] = "New"
        res = form.submit(status=200)

        res.mustcontain("Another user saved changes to this object")



class TagsAutocompleteTest(case.view.AuthenticatedViewTestCase,
                           case.view.NoCacheTest,
                           ):
    """Test for tags autocomplete view."""
    @property
    def url(self):
        """Shortcut for tag-autocomplete url."""
        return reverse("manage_tags_autocomplete")


    def get(self, query=None):
        """Shortcut for getting tag-autocomplete url authenticated."""
        url = self.url
        if query is not None:
            url = url + "?text=" + query
        return self.app.get(url, user=self.user)


    def test_matching_tags_json(self):
        """Returns list of matching tags in JSON."""
        t = self.F.TagFactory.create(name="foùêo")

        res = self.get("o")

        self.assertEqual(
            res.json,
            {
                "suggestions": [
                    {
                        "id": t.id,
                        "name": u"foùêo",
                        "postText": u"ùêo",
                        "preText": "f",
                        "product-id": None,
                        "type": "tag",
                        "typedText": "o",
                        }
                    ]
                }
            )


    def test_not_wrong_product_tags(self):
        """Only tags for the correct product, or global tags, are returned."""
        p1 = self.F.ProductFactory.create()
        p2 = self.F.ProductFactory.create()

        t1 = self.F.TagFactory.create(product=p1, name="t1")
        self.F.TagFactory.create(product=p2, name="t2")
        t3 = self.F.TagFactory.create(product=None, name="t3")

        res = self.app.get(
            self.url, user=self.user, params={"text": "t", "product-id": p1.id})

        self.assertEqual(
            [(t["id"], t["product-id"]) for t in res.json["suggestions"]],
            [(t1.id, p1.id), (t3.id, None)]
            )


    def test_case_insensitive(self):
        """Matching is case-insensitive, but pre/post are case-accurate."""
        t = self.F.TagFactory.create(name="FooBar")

        res = self.get("oO")

        self.assertEqual(
            res.json,
            {
                "suggestions": [
                    {
                        "id": t.id,
                        "name": "FooBar",
                        "postText": "Bar",
                        "preText": "F",
                        "product-id": None,
                        "type": "tag",
                        "typedText": "oO",
                        }
                    ]
                }
            )


    def test_no_query(self):
        """If no query is provided, no tags are returned."""
        self.F.TagFactory.create(name="foo")

        res = self.get()

        self.assertEqual(res.json, {"suggestions": []})

########NEW FILE########
__FILENAME__ = test_filters
"""
Tests for filtering.

"""
from mock import Mock

from django.utils.datastructures import MultiValueDict

from tests import case



class CaseVersionFilterSetTest(case.DBTestCase):
    """Tests for CaseVersionFilterSet."""
    def bound(self, GET):
        """Return instance of bound filter set."""
        from moztrap.view.filters import CaseVersionFilterSet
        return CaseVersionFilterSet().bind(GET)


    def test_filtered_by_productversion(self):
        """If filtered by productversion, doesn't filter by latest=True."""
        pv = self.F.ProductVersionFactory.create()

        fs = self.bound(MultiValueDict({"filter-productversion": [str(pv.id)]}))

        qs = Mock()
        qs2 = fs.filter(qs)

        qs.filter.assert_called_with(productversion__in=[pv.id])
        # no other filters intervening
        self.assertIs(qs2, qs.filter.return_value.distinct.return_value)

########NEW FILE########
__FILENAME__ = test_views
"""
Tests for home management view.

"""
from django.core.urlresolvers import reverse

from tests import case



class ManageHomeViewTest(case.view.AuthenticatedViewTestCase):
    """Tests for manage home view."""
    @property
    def url(self):
        """Shortcut for manage url."""
        return reverse("manage")


    def test_redirects_to_manage_runs_with_open_finder(self):
        """Redirects to the manage runs list, with manage finder open."""
        res = self.get(status=302)

        self.assertRedirects(res, reverse("manage_runs") + "?openfinder=1")

########NEW FILE########
__FILENAME__ = test_forms
"""
Tests for user-management forms.

"""
from tests import case



class EditUserFormTest(case.DBTestCase):
    """Tests for EditUserForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.users.forms import EditUserForm
        return EditUserForm


    def test_edit_user(self):
        """Can edit user name and description."""
        g1 = self.F.RoleFactory()
        g2 = self.F.RoleFactory()
        self.F.RoleFactory()
        p = self.F.UserFactory(username="Take One", email="", is_active=False)

        f = self.form(
            {
                "username": "two",
                "email": "two@example.com",
                "is_active": "1",
                "groups": [str(g1.id), str(g2.id)]
                },
            instance=p
            )

        user = f.save()

        self.assertEqual(user.username, "two")
        self.assertEqual(user.email, "two@example.com")
        self.assertEqual(user.is_active, True)
        self.assertEqual(set(user.groups.all()), set([g1, g2]))



class AddUserFormTest(case.DBTestCase):
    """Tests for AddUserForm."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.manage.users.forms import AddUserForm
        return AddUserForm


    def test_add_user(self):
        """Can add user."""
        g1 = self.F.RoleFactory()
        g2 = self.F.RoleFactory()
        self.F.RoleFactory()
        f = self.form(
            {
                "username": "Two",
                "email": "two@example.com",
                "is_active": "0",
                "groups": [str(g1.id), str(g2.id)]
                }
            )

        user = f.save()

        self.assertEqual(user.username, "Two")
        self.assertEqual(user.email, "two@example.com")
        self.assertEqual(user.is_active, False)
        self.assertEqual(set(user.groups.all()), set([g1, g2]))

########NEW FILE########
__FILENAME__ = test_views
# coding: utf-8
"""
Tests for user management views.

"""
from django.core.urlresolvers import reverse

from tests import case



class UsersTest(case.view.manage.ListViewTestCase,
                case.view.NoCacheTest,
                ):
    """Test for users manage list view."""
    form_id = "manage-users-form"
    perm = "manage_users"
    name_attr = "username"


    def setUp(self):
        """Any access to this view requires manage_users perm."""
        super(UsersTest, self).setUp()
        self.add_perm(self.perm)


    @property
    def factory(self):
        """The model factory for this manage list."""
        return self.F.UserFactory


    @property
    def url(self):
        """Shortcut for manage-users url."""
        return reverse("manage_users")


    def test_create_link_requires_perms(self):
        """This test from superclass doesn't apply here."""
        pass


    def test_delete_requires_permission(self):
        """This test from superclass doesn't apply here."""
        pass


    def test_activate(self):
        """Can activate objects in list."""
        s = self.factory.create(is_active=False, username="foo")

        self.get_form(params={"filter-username": "foo"}).submit(
            name="action-activate",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            )

        self.assertTrue(self.refresh(s).is_active)


    def test_deactivate(self):
        """Can deactivate objects in list."""
        s = self.factory.create(is_active=True, username="foo")

        self.get_form(params={"filter-username": "foo"}).submit(
            name="action-deactivate",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            )

        self.assertFalse(self.refresh(s).is_active)


    def test_delete(self):
        """Can delete objects from list."""
        o = self.factory.create(username="foo")

        self.get_form(params={"filter-username": "foo"}).submit(
            name="action-delete",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"}
            )

        with self.assertRaises(self.model.User.DoesNotExist):
            self.refresh(o)


    def test_filter_by_username(self):
        """Can filter by username."""
        self.factory.create(username="User 1")
        self.factory.create(username="User 2")

        res = self.get(params={"filter-username": "1"})

        self.assertInList(res, "User 1")
        self.assertNotInList(res, "User 2")


    def test_filter_by_email(self):
        """Can filter by email."""
        self.factory.create(username="User 1", email="one@example.com")
        self.factory.create(username="User 2", email="two@example.com")

        res = self.get(params={"filter-email": "one"})

        self.assertInList(res, "User 1")
        self.assertNotInList(res, "User 2")


    def test_filter_by_active(self):
        """Can filter by is_active."""
        self.factory.create(username="User 1", is_active=True)
        self.factory.create(username="User 2", is_active=False)

        res = self.get(params={"filter-active": "1"})

        self.assertInList(res, "User 1")
        self.assertNotInList(res, "User 2")


    def test_filter_by_not_active(self):
        """Can filter by not is_active."""
        self.factory.create(username="User 1", is_active=True)
        self.factory.create(username="User 2", is_active=False)

        res = self.get(params={"filter-active": "0"})

        self.assertInList(res, "User 2")
        self.assertNotInList(res, "User 1")


    def test_filter_by_role(self):
        """Can filter by role."""
        r = self.F.RoleFactory.create()
        u = self.factory.create(username="User 1")
        u.groups.add(r)
        self.factory.create(username="User 2")

        res = self.get(params={"filter-role": str(r.id)})

        self.assertInList(res, "User 1")
        self.assertNotInList(res, "User 2")


    def test_sort_by_username(self):
        """Can sort by username."""
        self.factory.create(username="User 1")
        self.factory.create(username="User 2")

        res = self.get(params={"sortfield": "username", "sortdirection": "desc"})

        self.assertOrderInList(res, "User 2", "User 1")


    def test_sort_by_email(self):
        """Can sort by email."""
        self.factory.create(username="User 1", email="one@example.com")
        self.factory.create(username="User 2", email="two@example.com")

        res = self.get(params={"sortfield": "email", "sortdirection": "desc"})

        self.assertOrderInList(res, "User 2", "User 1")



class AddUserTest(case.view.FormViewTestCase,
                  case.view.NoCacheTest,
                  ):
    """Tests for add user view."""
    form_id = "user-add-form"


    @property
    def url(self):
        """Shortcut for add-user url."""
        return reverse("manage_user_add")


    def setUp(self):
        """Add manage-users permission to user."""
        super(AddUserTest, self).setUp()
        self.add_perm("manage_users")


    def test_success(self):
        """Can add a user with basic data, including a version."""
        g = self.F.RoleFactory.create()
        form = self.get_form()
        form["username"] = "someone ùê"
        form["email"] = "someone@example.com"
        form["is_active"] = "1"
        form["groups"] = [str(g.id)]

        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_users"))

        res.follow().mustcontain("User 'someone ùê' added.")

        u = self.model.User.objects.get(username="someone ùê")
        self.assertEqual(u.email, "someone@example.com")
        self.assertTrue(u.is_active)
        self.assertEqual(u.groups.get(), g)


    def test_error(self):
        """Bound form with errors is re-displayed."""
        res = self.get_form().submit()

        self.assertEqual(res.status_int, 200)
        res.mustcontain("This field is required.")


    def test_requires_manage_users_permission(self):
        """Requires manage-users permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")



class EditUserTest(case.view.FormViewTestCase,
                   case.view.NoCacheTest,
                   ):
    """Tests for edit-user view."""
    form_id = "user-edit-form"


    def setUp(self):
        """Setup for user edit tests; create a user, add perm."""
        super(EditUserTest, self).setUp()
        self.user = self.F.UserFactory.create()
        self.add_perm("manage_users")


    @property
    def url(self):
        """Shortcut for edit-user url."""
        return reverse(
            "manage_user_edit", kwargs=dict(user_id=self.user.id))


    def test_requires_manage_users_permission(self):
        """Requires manage-users permission."""
        res = self.app.get(self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")


    def test_save_basic(self):
        """Can save updates; redirects to manage users list."""
        form = self.get_form()
        form["username"] = "new name ùê"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_users"))

        res.follow().mustcontain("Saved 'new name ùê'.")

        p = self.refresh(self.user)
        self.assertEqual(unicode(p.username), u"new name ùê")


    def test_errors(self):
        """Test bound form redisplay with errors."""
        form = self.get_form()
        form["username"] = ""
        res = form.submit(status=200)

        res.mustcontain("This field is required.")

########NEW FILE########
__FILENAME__ = test_markup
"""
Tests for URL-related template filters.

"""
from django.utils.safestring import SafeData

from tests import case



class FilterTest(case.TestCase):
    """Tests for markup-related template filters."""
    @property
    def markup(self):
        """The templatetag module under test."""
        from moztrap.view.markup.templatetags import markup
        return markup


    def test_markdown_renders_html(self):
        """Markdown filter renders markdown to HTML."""
        self.assertEqual(
            self.markup.markdown("_foo_"), "<p><em>foo</em></p>\n")


    def test_markdown_returns_safestring(self):
        """Markdown filter returns marked-safe HTML string."""
        self.assertIsInstance(self.markup.markdown("_foo"), SafeData)


    def test_markdown_escapes_html(self):
        """Markdown filter escapes HTML."""
        self.assertEqual(
            self.markup.markdown("<script>"), "<p>&lt;script&gt;</p>\n")

########NEW FILE########
__FILENAME__ = test_views
# Case Conductor is a Test Case Management system.
# Copyright (C) 2011-12 Mozilla
#
# This file is part of Case Conductor.
#
# Case Conductor is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Case Conductor is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Case Conductor.  If not, see <http://www.gnu.org/licenses/>.
"""
Tests for open web app views.

"""
import json

from django.core.urlresolvers import reverse

from django_webtest import WebTest



class ManifestTest(WebTest):
    """Tests for manifest view."""
    @property
    def url(self):
        """Shortcut for owa manifest url."""
        return reverse("owa_manifest")


    def get(self, **kwargs):
        """Shortcut for getting manifest url."""
        return self.app.get(self.url, **kwargs)


    def test_manifest(self):
        """Successful manifest is returned."""

        res = self.get(status=200)

        self.assertEqual(
            res.headers["Content-Type"], "application/x-web-app-manifest+json",
            res.headers)

        # content-type isn't normal JSON, so I must parse the JSON
        # directly, rather than using res.json["name"]

        self.assertEqual(
            json.loads(res.body)["description"],
            "A Test Case and Results management System.",
            )

########NEW FILE########
__FILENAME__ = test_views
"""
Tests for results-list view.

"""
from django.core.urlresolvers import reverse

from tests import case



class ResultsViewTest(case.view.ListViewTestCase,
                      case.view.ListFinderTests,
                      ):
    """Tests for results-list view."""
    name_attr = "tester__username"


    def setUp(self):
        """Results list view requires a runcaseversion."""
        super(ResultsViewTest, self).setUp()
        self.rcv = self.F.RunCaseVersionFactory.create()


    @property
    def url(self):
        """Shortcut for result results url."""
        return reverse("results_results", kwargs={"rcv_id": self.rcv.id})


    def factory(self, **kwargs):
        """Create a result for this test case's runcaseversion."""
        kwargs.setdefault("runcaseversion", self.rcv)
        return self.F.ResultFactory.create(**kwargs)


    def test_description(self):
        """Includes description, markdownified safely."""
        cv = self.F.CaseVersionFactory.create(
            description="_Valmorphanize_ <script>",
            )
        self.rcv = self.F.RunCaseVersionFactory.create(caseversion=cv)
        res = self.get()

        res.mustcontain("<em>Valmorphanize</em> &lt;script&gt;")


    def test_step(self):
        """Includes steps, markdownified safely."""
        self.F.CaseStepFactory.create(
            caseversion=self.rcv.caseversion,
            instruction="<script>alert(foo);</script>",
            expected="{@onclick=alert(1)}paragraph",
            ).caseversion

        res = self.get()

        res.mustcontain("<p>&lt;script&gt;alert(foo);&lt;/script&gt;</p>")
        res.mustcontain("<p>{@onclick=alert(1)}paragraph</p>")


    def test_filter_by_status(self):
        """Can filter by status."""
        self.factory(status="passed", tester__username="Tester 1")
        self.factory(status="failed", tester__username="Tester 2")

        res = self.get(params={"filter-status": "failed"})

        self.assertInList(res, "Tester 2")
        self.assertNotInList(res, "Tester 1")


    def test_filter_by_tester(self):
        """Can filter by tester."""
        r = self.factory(tester__username="Tester 1")
        self.factory(tester__username="Tester 2")

        res = self.get(params={"filter-tester": str(r.tester.id)})

        self.assertInList(res, "Tester 1")
        self.assertNotInList(res, "Tester 2")


    def test_filter_by_comment(self):
        """Can filter by name."""
        self.factory(comment="foo", tester__username="Tester 1")
        self.factory(comment="bar", tester__username="Tester 2")

        res = self.get(params={"filter-comment": "fo"})

        self.assertInList(res, "Tester 1")
        self.assertNotInList(res, "Tester 2")


    def test_filter_by_env_elements(self):
        """Can filter by environment elements."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        self.factory(
            tester__username="Tester 1", environment=envs[0])
        self.factory(
            tester__username="Tester 2", environment=envs[1])

        res = self.get(
            params={"filter-envelement": envs[0].elements.all()[0].id})

        self.assertInList(res, "Tester 1")
        self.assertNotInList(res, "Tester 2")


    def test_sort_by_status(self):
        """Can sort by status."""
        self.factory(tester__username="Tester 1", status="passed")
        self.factory(tester__username="Tester 2", status="failed")

        res = self.get(
            params={"sortfield": "status", "sortdirection": "asc"})

        self.assertOrderInList(res, "Tester 2", "Tester 1")


    def test_sort_by_tester(self):
        """Can sort by tester."""
        self.factory(tester__username="Tester 1")
        self.factory(tester__username="Tester 2")

        res = self.get(
            params={"sortfield": "tester__username", "sortdirection": "desc"}
            )

        self.assertOrderInList(res, "Tester 2", "Tester 1")

########NEW FILE########
__FILENAME__ = test_views
"""
Tests for runcaseversion results view.

"""
from django.core.urlresolvers import reverse

from tests import case



class RunCaseVersionResultsViewTest(case.view.ListViewTestCase,
                                    case.view.ListFinderTests,
                                    ):
    """Tests for runcaseversion results view."""
    name_attr = "caseversion__name"


    @property
    def factory(self):
        """The RunCaseVersion factory."""
        return self.F.RunCaseVersionFactory


    @property
    def url(self):
        """Shortcut for runcaseversion results url."""
        return reverse("results_runcaseversions")


    def test_filter_by_status(self):
        """Can filter by status."""
        self.F.RunCaseVersionFactory.create(
            caseversion__status="draft", caseversion__name="Case 1")
        self.F.RunCaseVersionFactory.create(
            caseversion__status="active", caseversion__name="Case 2")

        res = self.get(params={"filter-status": "draft"})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_id(self):
        """Can filter by id."""
        rcv1 = self.F.RunCaseVersionFactory.create(caseversion__name="Case 1")
        self.F.RunCaseVersionFactory.create(caseversion__name="Case 2")

        res = self.get(params={"filter-id": rcv1.caseversion.case.id})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_bad_id(self):
        """Attempt to filter by non-integer id returns no cases."""
        self.F.RunCaseVersionFactory.create(caseversion__name="Case 1")

        res = self.get(params={"filter-id": "foo"})

        self.assertNotInList(res, "Case 1")


    def test_filter_by_name(self):
        """Can filter by name."""
        self.F.RunCaseVersionFactory.create(caseversion__name="Case 1")
        self.F.RunCaseVersionFactory.create(caseversion__name="Case 2")

        res = self.get(params={"filter-name": "1"})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_tag(self):
        """Can filter by tag."""
        t = self.F.TagFactory.create()
        rcv = self.F.RunCaseVersionFactory.create(caseversion__name="Case 1")
        rcv.caseversion.tags.add(t)
        self.F.RunCaseVersionFactory.create(caseversion__name="Case 2")

        res = self.get(params={"filter-tag": t.id})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_product(self):
        """Can filter by product."""
        rcv = self.F.RunCaseVersionFactory.create(caseversion__name="Case 1")
        self.F.RunCaseVersionFactory.create(caseversion__name="Case 2")

        res = self.get(
            params={"filter-product": rcv.caseversion.case.product.id})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_productversion(self):
        """Can filter by product version; no implicit filter by latest."""
        rcv = self.F.RunCaseVersionFactory.create()
        other_pv = self.F.ProductVersionFactory(
            product=rcv.caseversion.productversion.product, version="2.0")
        rcv2 = self.F.RunCaseVersionFactory.create(
            caseversion__case=rcv.caseversion.case,
            caseversion__productversion=other_pv,
            run__productversion=other_pv)

        res = self.get(
            params={"filter-productversion": rcv.caseversion.productversion.id})

        self.assertIdInList(res, "runcaseversion-id-{0}".format(rcv.id))
        self.assertIdNotInList(res, "runcaseversion-id-{0}".format(rcv2.id))


    def test_filter_by_step_instruction(self):
        """Can filter by step instruction."""
        rcv1 = self.F.RunCaseVersionFactory.create(caseversion__name="Case 1")
        rcv2 = self.F.RunCaseVersionFactory.create(caseversion__name="Case 2")
        self.F.CaseStepFactory.create(
            caseversion=rcv1.caseversion, instruction="do this")
        self.F.CaseStepFactory.create(
            caseversion=rcv2.caseversion, instruction="do that")

        res = self.get(params={"filter-instruction": "this"})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_step_expected_result(self):
        """Can filter by step expected result."""
        rcv1 = self.F.RunCaseVersionFactory.create(caseversion__name="Case 1")
        rcv2 = self.F.RunCaseVersionFactory.create(caseversion__name="Case 2")
        self.F.CaseStepFactory.create(
            caseversion=rcv1.caseversion, expected="see this")
        self.F.CaseStepFactory.create(
            caseversion=rcv2.caseversion, expected="see that")

        res = self.get(params={"filter-expected": "this"})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_env_elements(self):
        """Can filter by environment elements."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        self.F.RunCaseVersionFactory.create(
            caseversion__name="Case 1", environments=envs)
        self.F.RunCaseVersionFactory.create(
            caseversion__name="Case 2", environments=envs[1:])

        res = self.get(
            params={"filter-envelement": envs[0].elements.all()[0].id})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_filter_by_suite(self):
        """Can filter by suite."""
        rcv = self.F.RunCaseVersionFactory.create(caseversion__name="Case 1")
        self.F.RunCaseVersionFactory.create(caseversion__name="Case 2")
        ts = self.F.SuiteFactory.create(
            product=rcv.run.productversion.product)
        self.F.SuiteCaseFactory(suite=ts,
            case=rcv.caseversion.case,
            )

        res = self.get(params={"filter-suite": ts.id})

        self.assertInList(res, "Case 1")
        self.assertNotInList(res, "Case 2")


    def test_sort_by_status(self):
        """Can sort by status."""
        self.F.RunCaseVersionFactory.create(
            caseversion__name="Case 1", caseversion__status="draft")
        self.F.RunCaseVersionFactory.create(
            caseversion__name="Case 2", caseversion__status="active")

        res = self.get(
            params={"sortfield": "caseversion__status", "sortdirection": "asc"})

        self.assertOrderInList(res, "Case 2", "Case 1")


    def test_sort_by_name(self):
        """Can sort by name."""
        self.F.RunCaseVersionFactory.create(caseversion__name="Case 1")
        self.F.RunCaseVersionFactory.create(caseversion__name="Case 2")

        res = self.get(
            params={"sortfield": "caseversion__name", "sortdirection": "desc"}
            )

        self.assertOrderInList(res, "Case 2", "Case 1")


    def test_sort_by_run(self):
        """Can sort by run."""
        pv2 = self.F.ProductVersionFactory.create(version="2.0")
        pv1 = self.F.ProductVersionFactory.create(
            version="1.0", product=pv2.product)
        self.F.RunCaseVersionFactory.create(
            caseversion__name="Case 2",
            caseversion__productversion=pv1,
            run__productversion=pv1,
            )
        self.F.RunCaseVersionFactory.create(
            caseversion__name="Case 1",
            caseversion__productversion=pv2,
            run__productversion=pv2,
            )

        res = self.get(params={"sortfield": "run", "sortdirection": "asc"})

        self.assertOrderInList(res, "Case 2", "Case 1")


    def test_sort_by_productversion(self):
        """Can sort by product version."""
        pv2 = self.F.ProductVersionFactory.create(version="2.0")
        pv1 = self.F.ProductVersionFactory.create(
            version="1.0", product=pv2.product)
        self.F.RunCaseVersionFactory.create(
            caseversion__name="Case 2",
            caseversion__productversion=pv1,
            run__productversion=pv1,
            )
        self.F.RunCaseVersionFactory.create(
            caseversion__name="Case 1",
            caseversion__productversion=pv2,
            run__productversion=pv2,
            )

        res = self.get(
            params={
                "sortfield": "run__productversion",
                "sortdirection": "desc",
                },
            )

        self.assertOrderInList(res, "Case 1", "Case 2")



class RunCaseVersionDetailTest(case.view.AuthenticatedViewTestCase):
    """Test for runcaseversion-detail ajax view."""
    def setUp(self):
        """Setup for runcaseversion details tests; create a runcaseversion."""
        super(RunCaseVersionDetailTest, self).setUp()
        self.rcv = self.F.RunCaseVersionFactory.create()


    @property
    def url(self):
        """Shortcut for runcaseversion detail url."""
        return reverse(
            "results_runcaseversion_details",
            kwargs=dict(rcv_id=self.rcv.id)
            )


    def test_details_envs(self):
        """Details lists envs."""
        self.rcv.environments.add(
            *self.F.EnvironmentFactory.create_full_set({"OS": ["Windows"]}))

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("Windows")


    def test_details_team(self):
        """Details lists testers with assigned/executed results."""
        u = self.F.UserFactory.create(username="somebody")
        self.F.ResultFactory.create(tester=u, runcaseversion=self.rcv)

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("somebody")


    def test_details_drilldown(self):
        """Details contains link to drilldown to results for single case."""
        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain(
            reverse("results_results", kwargs={"rcv_id": self.rcv.id})
            )


    def test_description(self):
        """Details includes description, markdownified safely."""
        cv = self.F.CaseVersionFactory.create(
            description="_Valmorphanize_ <script>",
            )
        self.rcv = self.F.RunCaseVersionFactory.create(caseversion=cv)
        res = self.get(ajax=True)

        res.mustcontain("<em>Valmorphanize</em> &lt;script&gt;")


    def test_step(self):
        """Details includes steps, markdownified safely."""
        self.F.CaseStepFactory.create(
            caseversion=self.rcv.caseversion,
            instruction="<script>alert(foo);</script>",
            expected="{@onclick=alert(1)}paragraph",
            ).caseversion

        res = self.get(ajax=True)

        res.mustcontain("<p>&lt;script&gt;alert(foo);&lt;/script&gt;</p>")
        res.mustcontain("<p>{@onclick=alert(1)}paragraph</p>")

########NEW FILE########
__FILENAME__ = test_views
"""
Tests for run results view.

"""
from django.core.urlresolvers import reverse

from tests import case

from ...lists.runs import RunsListTests



class RunResultsViewTest(case.view.ListViewTestCase,
                         RunsListTests,
                         case.view.ListFinderTests,
                         ):
    """Tests for run results view."""
    @property
    def factory(self):
        """The Run factory."""
        return self.F.RunFactory


    @property
    def url(self):
        """Shortcut for run results url."""
        return reverse("results_runs")



class RunDetailTest(case.view.AuthenticatedViewTestCase):
    """Test for run-detail ajax view."""
    def setUp(self):
        """Setup for run details tests; create a run."""
        super(RunDetailTest, self).setUp()
        self.testrun = self.F.RunFactory.create()


    @property
    def url(self):
        """Shortcut for run detail url."""
        return reverse(
            "results_run_details",
            kwargs=dict(run_id=self.testrun.id)
            )


    def test_details_description(self):
        """Details lists description."""
        self.testrun.description = "foodesc"
        self.testrun.save()

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("foodesc")


    def test_details_envs(self):
        """Details lists envs."""
        self.testrun.environments.add(
            *self.F.EnvironmentFactory.create_full_set({"OS": ["Windows"]}))

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("Windows")


    def test_details_team(self):
        """Details lists team."""
        u = self.F.UserFactory.create(username="somebody")
        self.testrun.add_to_team(u)

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain("somebody")


    def test_details_drilldown(self):
        """Details contains link to drilldown to runcaseversions."""
        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        res.mustcontain(
            "{0}?filter-run={1}".format(
                reverse("results_runcaseversions"), self.testrun.id)
            )

########NEW FILE########
__FILENAME__ = test_results
"""
Tests for MozTrap results-views template tags and filters.

"""
from tests import case



class PercentageFilterTest(case.TestCase):
    """Tests for percentage filter."""
    @property
    def filter(self):
        """The template filter under test."""
        from moztrap.view.results.templatetags.results import percentage
        return percentage


    def test_zero(self):
        """Zero returns zero."""
        self.assertEqual(self.filter(0.0), 0)


    def test_one(self):
        """One returns 100."""
        self.assertEqual(self.filter(1.0), 100)


    def test_near_one(self):
        """Very near one returns 99, not 100."""
        self.assertEqual(self.filter(0.999), 99)


    def test_near_zero(self):
        """Very near zero returns 1, not 0."""
        self.assertEqual(self.filter(0.001), 1)


    def test_round_up(self):
        """Below 0.5, rounds up."""
        self.assertEqual(self.filter(0.45123), 46)


    def test_round_down(self):
        """Above 0.5, rounds down."""
        self.assertEqual(self.filter(0.55987), 55)

########NEW FILE########
__FILENAME__ = test_finders
"""
Tests for results finder.

"""
from django.core.urlresolvers import reverse

from tests import case



class CaseColumnTest(case.DBTestCase):
    """Tests for results finder CaseColumn."""
    @property
    def column(self):
        """The Column class under test."""
        from moztrap.view.results.finders import CaseColumn
        return CaseColumn


    def test_goto_url(self):
        """goto_url returns results list url for given RCV."""
        c = self.column(
            None,
            None,
            self.model.RunCaseVersion.objects.all(),
            "results_results",
            )
        rcv = self.F.RunCaseVersionFactory.create()

        url = c.goto_url(rcv)

        self.assertEqual(
            url, reverse("results_results", kwargs={"rcv_id": rcv.id}))


    def test_no_goto_url(self):
        """goto_url still returns None if no url name given."""
        c = self.column(
            None,
            None,
            self.model.RunCaseVersion.objects.all(),
            )
        rcv = self.F.RunCaseVersionFactory.create()

        self.assertIsNone(c.goto_url(rcv))

########NEW FILE########
__FILENAME__ = test_views
"""
Tests for home results view.

"""
from django.core.urlresolvers import reverse

from tests import case



class ResultsHomeViewTest(case.view.AuthenticatedViewTestCase):
    """Tests for results home view."""
    @property
    def url(self):
        """Shortcut for results url."""
        return reverse("results")


    def test_redirects_to_runs_with_open_finder(self):
        """Redirects to the active runs list, with results finder open."""
        res = self.get(status=302)

        self.assertRedirects(
            res, reverse("results_runs") + "?openfinder=1&filter-status=active")

########NEW FILE########
__FILENAME__ = test_execution
"""Tests for template tags/filters for running tests."""
import datetime

from django.template import Template, Context

import mock

from tests import case



class ResultForTest(case.DBTestCase):
    """Tests for the result_for template tag."""
    def result_for(self, runcaseversion, user, environment, render):
        """Execute template tag with given args and render given string."""
        t = Template(
            "{% load execution %}{% result_for rcv user env as result %}"
            + render)
        return t.render(
            Context({"rcv": runcaseversion, "user": user, "env": environment}))


    def test_result_exists(self):
        """If the result already exists, it is returned."""
        r = self.F.ResultFactory()

        self.assertEqual(
            self.result_for(
                r.runcaseversion, r.tester, r.environment, "{{ result.id }}"),
            str(r.id)
            )


    def test_dupe_complete_results_keeps_both_finds_latest(self):
        """If dupe completed results exists, find the last-modified."""

        with mock.patch("moztrap.model.mtmodel.utcnow") as mock_utcnow:
            mock_utcnow.return_value = datetime.datetime(2012, 3, 24)
            r = self.F.ResultFactory(
                status="passed",
                )
            mock_utcnow.return_value = datetime.datetime(2012, 3, 25)
            r2 = self.F.ResultFactory(
                tester=r.tester,
                runcaseversion=r.runcaseversion,
                environment=r.environment,
                status="failed",
                )

        self.assertEqual(
            self.result_for(
                r.runcaseversion, r.tester, r.environment, "{{ result.id }}"),
            str(r2.id),
            )
        self.assertEqual(self.model.Result.objects.count(), 2)


    def test_dupe_incomplete_results_keeps_both_finds_latest(self):
        """If dupe incomplete results exists, find the last-modified."""

        with mock.patch("moztrap.model.mtmodel.utcnow") as mock_utcnow:
            mock_utcnow.return_value = datetime.datetime(2012, 3, 24)
            r = self.F.ResultFactory()
            mock_utcnow.return_value = datetime.datetime(2012, 3, 25)
            r2 = self.F.ResultFactory(
                tester=r.tester,
                runcaseversion=r.runcaseversion,
                environment=r.environment,
                )

        self.assertEqual(
            self.result_for(
                r.runcaseversion, r.tester, r.environment, "{{ result.id }}"),
            str(r2.id),
            )
        self.assertEqual(self.model.Result.objects.count(), 2)


    def test_dupe_latest_results_sets_non_latest_to_false(self):
        """If dupe latest results exists, keep the last-modified."""

        with mock.patch("moztrap.model.mtmodel.utcnow") as mock_utcnow:
            mock_utcnow.return_value = datetime.datetime(2012, 3, 24)
            res1 = self.F.ResultFactory(
                status="passed",
            )
            mock_utcnow.return_value = datetime.datetime(2012, 3, 25)
            res2 = self.F.ResultFactory(
                tester=res1.tester,
                runcaseversion=res1.runcaseversion,
                environment=res1.environment,
                status="passed",
                )

            # manually set a non-latest result to is_latest=True
            # since res1 has already been saved, and has a pk assigned,
            # it will not try to set all the other results to NOT latest.
            mock_utcnow.return_value = datetime.datetime(2012, 3, 24)
            self.model.Result.objects.filter(pk=res1.pk).update(
                is_latest=True,
                )

        self.assertEqual(self.result_for(
                res1.runcaseversion,
                res1.tester,
                res1.environment,
                "{{ result.id }}",
                ), str(res2.id))
        self.assertEqual(self.model.Result.objects.count(), 2)
        self.assertEqual(
            self.model.Result.objects.get(is_latest=True).pk, res2.pk)


    def test_result_does_not_exist(self):
        """If the result does not exist, a new unsaved one is returned."""
        rcv = self.F.RunCaseVersionFactory.create()
        env = self.F.EnvironmentFactory.create()
        user = self.F.UserFactory.create()

        self.assertEqual(
            self.result_for(
                rcv,
                user,
                env,
                "{{ result.id }} {{ result.runcaseversion.id }} "
                "{{ result.environment.id }} {{ result.tester.id }}"),
            "None {0} {1} {2}".format(rcv.id, env.id, user.id)
            )



class StepResultForTest(case.DBTestCase):
    """Tests for the step_result_for template tag."""
    def result_for(self, result, step, render):
        """Execute template tag with given args and render given string."""
        t = Template(
            "{% load execution %}{% stepresult_for result step as stepresult %}"
            + render)
        return t.render(
            Context({"result": result, "step": step}))


    def test_stepresult_exists(self):
        """If the step result already exists, it is returned."""
        sr = self.F.StepResultFactory()

        self.assertEqual(
            self.result_for(
                sr.result, sr.step, "{{ stepresult.id }}"),
            str(sr.id)
            )


    def test_step_result_does_not_exist(self):
        """If the step result does not exist, a new unsaved one is returned."""
        r = self.F.ResultFactory.create()
        step = self.F.CaseStepFactory.create()

        self.assertEqual(
            self.result_for(
                r,
                step,
                "{{ stepresult.id }} {{ stepresult.result.id }} "
                "{{ stepresult.step.id }}"),
            "None {0} {1}".format(r.id, step.id)
            )


    def test_result_does_not_exist(self):
        """If given result is not saved, unsaved step result is returned."""
        r = self.F.ResultFactory.build()
        step = self.F.CaseStepFactory.create()

        self.assertEqual(
            self.result_for(
                r,
                step,
                "{{ stepresult.id }} {{ stepresult.result.id }} "
                "{{ stepresult.step.id }}"),
            "None None {0}".format(step.id)
            )


class SuitesForTest(case.DBTestCase):
    """Tests for the suites_for template tag."""

    def suites_for(self, run, runcaseversion, render):
        """Execute template tag with given args and render given string."""
        t = Template(
            "{% load execution %}{% suites_for run runcaseversion as suites %}"
            + render)
        return t.render(
            Context({"run": run, "runcaseversion": runcaseversion}))


    def test_multiple_source_suites(self):
        """Sets source suites for a caseversion in multiple included suites."""
        envs = self.F.EnvironmentFactory.create_set(["os"], ["Atari"])
        pv = self.F.ProductVersionFactory(environments=envs)
        tc = self.F.CaseFactory.create(product=pv.product)
        cv = self.F.CaseVersionFactory.create(
            case=tc, productversion=pv, status="active")

        ts1 = self.F.SuiteFactory.create(product=pv.product, status="active")
        self.F.SuiteCaseFactory.create(suite=ts1, case=tc)

        ts2 = self.F.SuiteFactory.create(product=pv.product, status="active")
        self.F.SuiteCaseFactory.create(suite=ts2, case=tc)

        r = self.F.RunFactory.create(productversion=pv, environments=envs)
        self.F.RunSuiteFactory.create(suite=ts1, run=r)
        self.F.RunSuiteFactory.create(suite=ts2, run=r)

        r.activate()

        self.assertEqual(
            self.suites_for(
                r,
                self.model.RunCaseVersion.objects.get(),
                "{% for suite in suites %}{{ suite.id }} {% endfor %}"),
            "{0} {1} ".format(ts1.id, ts2.id)
        )


    def test_source_suite(self):
        """Sets source suites for each runcaseversion."""
        envs = self.F.EnvironmentFactory.create_set(["os"], ["Atari"])
        pv = self.F.ProductVersionFactory(environments=envs)
        tc = self.F.CaseFactory.create(product=pv.product)
        self.F.CaseVersionFactory.create(
            case=tc, productversion=pv, status="active")

        ts = self.F.SuiteFactory.create(product=pv.product, status="active")
        self.F.SuiteCaseFactory.create(suite=ts, case=tc)

        r = self.F.RunFactory.create(productversion=pv, environments=envs)
        self.F.RunSuiteFactory.create(suite=ts, run=r)

        r.activate()

        rcv = r.runcaseversions.get()
        self.assertEqual(
            self.suites_for(
                r,
                self.model.RunCaseVersion.objects.get(),
                "{% for suite in suites %}{{ suite.id }} {% endfor %}"),
            "{0} ".format(ts.id)
        )

########NEW FILE########
__FILENAME__ = test_finders
"""
Tests for runtests finder.

"""
from tests import case



class RunTestsFinderTest(case.DBTestCase):
    """Tests for RunTestsFinder."""
    @property
    def finder(self):
        """The Finder class under test."""
        from moztrap.view.runtests.finders import RunTestsFinder
        return RunTestsFinder


    def test_child_query_url(self):
        """child_query_url returns environments URL for a run, not None."""
        f = self.finder()
        r = self.F.RunFactory.create()

        url = f.child_query_url(r)

        self.assertEqual(
            url, "/runtests/environment/{0}/".format(r.id))


    def test_child_query_url_non_run(self):
        """Given anything but a run, child_query_url defers to Finder."""
        f = self.finder()
        r = self.F.RunFactory.create()

        url = f.child_query_url(r.productversion)

        self.assertEqual(
            url, "?finder=1&col=runs&id={0}".format(r.productversion.id))

########NEW FILE########
__FILENAME__ = test_forms
"""
Tests for runtests forms.

"""
from tests import case



class EnvironmentSelectionFormTest(case.DBTestCase):
    """Tests for environment selection form."""
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.runtests.forms import EnvironmentSelectionForm
        return EnvironmentSelectionForm


    def test_no_extra_arguments(self):
        """By default, form has no fields."""
        f = self.form()

        self.assertEqual(len(f.fields), 0)


    def test_environments(self):
        """Can pass in queryset of environments."""
        self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"], "Browser": ["Opera", "Firefox"]})
        os = self.model.Category.objects.get(name="OS")
        browser = self.model.Category.objects.get(name="Browser")

        form = self.form(environments=self.model.Environment.objects.all())

        self.assertEqual(
            dict(
                (fname, [c[1] for c in f.choices])
                for fname, f in form.fields.items()
                ),
            {
                "category_{0}".format(browser.id): [
                    "---------", "Firefox", "Opera"],
                "category_{0}".format(os.id): [
                    "---------", "Linux", "Windows"],
                },
            )


    def test_current(self):
        """Can pass in ID of current environment."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        cat = self.model.Category.objects.get()

        f = self.form(
            environments=self.model.Environment.objects.all(),
            current=envs[0].id)

        self.assertEqual(
            f.initial,
            {"category_{0}".format(cat.id): envs[0].elements.get().id}
            )


    def test_bad_current(self):
        """ID of nonexistent environment is ignored."""
        f = self.form(current="-1")

        self.assertEqual(f.initial, {})


    def test_save(self):
        """Save method returns ID of selected environment."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        cat = self.model.Category.objects.get()

        f = self.form(
            {"category_{0}".format(cat.id): str(envs[0].elements.get().id)},
            environments=self.model.Environment.objects.all())

        self.assertTrue(f.is_valid(), f.errors)
        self.assertEqual(f.save(), envs[0].id)


    def test_invalid_environment(self):
        """Form validation error if invalid combination is selected."""
        self.F.EnvironmentFactory.create_set(
            ["OS", "Browser"], ["OS X", "Safari"], ["Windows", "IE"])
        windows = self.model.Element.objects.get(name="Windows")
        safari = self.model.Element.objects.get(name="Safari")

        f = self.form(
            {
                "category_{0}".format(windows.category.id): str(windows.id),
                "category_{0}".format(safari.category.id): str(safari.id),
                },
            environments=self.model.Environment.objects.all()
            )

        self.assertFalse(f.is_valid())
        self.assertEqual(
            f.errors,
            {
                "__all__": [
                    "The selected environment is not valid for this test run. "
                    "Please select a different combination."
                    ]
                }
            )


    def test_superset_env(self):
        """Selecting a superset of the envs for a valid combo is valid."""
        os = self.F.CategoryFactory.create(name="OS")
        browser = self.F.CategoryFactory.create(name="Browser")
        language = self.F.CategoryFactory.create(name="Language")

        windows = self.F.ElementFactory.create(name="Windows", category=os)
        linux = self.F.ElementFactory.create(name="Linux", category=os)
        firefox = self.F.ElementFactory.create(name="Firefox", category=browser)
        opera = self.F.ElementFactory.create(name="Opera", category=browser)
        english = self.F.ElementFactory.create(
            name="English", category=language)
        spanish = self.F.ElementFactory.create(
            name="Spanish", category=language)

        # we only care about language for Opera/Linux, not Firefox/Windows
        winff = self.F.EnvironmentFactory.create()
        winff.elements.add(windows, firefox)
        linuxoperaenglish = self.F.EnvironmentFactory.create()
        linuxoperaenglish.elements.add(linux, opera, english)
        linuxoperaspanish = self.F.EnvironmentFactory.create()
        linuxoperaspanish.elements.add(linux, opera, spanish)

        f = self.form(
            {
                "category_{0}".format(browser.id): str(firefox.id),
                "category_{0}".format(language.id): str(spanish.id),
                "category_{0}".format(os.id): str(windows.id),
                },
            environments=self.model.Environment.objects.all())

        self.assertTrue(f.is_valid(), f.errors)
        self.assertEqual(f.save(), winff.id)


    def test_incomplete_env(self):
        """A valid combo that does not include all categories is ok."""
        os = self.F.CategoryFactory.create(name="OS")
        browser = self.F.CategoryFactory.create(name="Browser")
        language = self.F.CategoryFactory.create(name="Language")

        windows = self.F.ElementFactory.create(name="Windows", category=os)
        linux = self.F.ElementFactory.create(name="Linux", category=os)
        firefox = self.F.ElementFactory.create(name="Firefox", category=browser)
        opera = self.F.ElementFactory.create(name="Opera", category=browser)
        english = self.F.ElementFactory.create(
            name="English", category=language)
        self.F.ElementFactory.create(name="Spanish", category=language)

        winff = self.F.EnvironmentFactory.create()
        winff.elements.add(windows, firefox)
        linuxoperaenglish = self.F.EnvironmentFactory.create()
        linuxoperaenglish.elements.add(linux, opera, english)

        f = self.form(
            {
                "category_{0}".format(browser.id): str(firefox.id),
                "category_{0}".format(language.id): "",
                "category_{0}".format(os.id): str(windows.id),
                },
            environments=self.model.Environment.objects.all())

        self.assertTrue(f.is_valid(), f.errors)
        self.assertEqual(f.save(), winff.id)



class EnvironmentBuildSelectionFormTest(case.DBTestCase):
    """
    Tests for environment build selection form.

    This form extends the EnvironmentSelectionForm and is used when a
    run is a series and you need to specify a build.
    """
    @property
    def form(self):
        """The form class under test."""
        from moztrap.view.runtests.forms import EnvironmentBuildSelectionForm
        return EnvironmentBuildSelectionForm


    def test_no_extra_arguments(self):
        """By default, form has no env, but always has a build field."""
        f = self.form()

        self.assertEqual(len(f.fields), 1)


    def test_save_series(self):
        """Save method returns ID of selected environment and new run id."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        cat = self.model.Category.objects.get()
        r = self.F.RunFactory(is_series=True)
        user = self.F.UserFactory.create()


        f = self.form(
            {
                "category_{0}".format(cat.id): str(envs[0].elements.get().id),
                "build": "foobuild",
                },
            run=r,
            environments=self.model.Environment.objects.all(),
            user=user,
            )

        self.assertTrue(f.is_valid(), f.errors)

        envid, runid = f.save()
        newrun = self.F.model.Run.objects.get(pk=runid)

        self.assertEqual(envid, envs[0].id)

        self.assertEqual(
            newrun.name,
            "{0} - Build: foobuild".format(r.name),
            )
        self.assertEqual(newrun.is_series, False)
        self.assertEqual(newrun.series, r)
        self.assertEqual(newrun.created_by, user)


    def test_series_without_build_set(self):
        """Try to save form without setting the build fails."""
        envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Linux", "Windows"]})
        cat = self.model.Category.objects.get()
        r = self.F.RunFactory(is_series=True)

        f = self.form(
            {
                "category_{0}".format(cat.id): str(envs[0].elements.get().id),
                },
            run=r,
            environments=self.model.Environment.objects.all())

        self.assertFalse(f.is_valid(), f.errors)
        self.assertEqual(
            f.errors,
            {'build': [u'You must specify a build to test.']},
            )

########NEW FILE########
__FILENAME__ = test_views
"""
Tests for runtests views.

"""
from datetime import datetime

from django.core.urlresolvers import reverse

from BeautifulSoup import BeautifulSoup
from mock import patch

from tests import case



class SelectTest(case.view.AuthenticatedViewTestCase,
                 case.view.NoCacheTest,
                 ):
    """Tests for select-run view."""
    @property
    def url(self):
        """Shortcut for runtests url."""
        return reverse("runtests")


    def test_requires_execute_permission(self):
        """Requires execute permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")


    def test_finder(self):
        """Finder is present in context with list of products."""
        self.add_perm("execute")

        p = self.F.ProductFactory.create(name="Foo Product")

        res = self.get()

        res.mustcontain("Foo Product")
        res.mustcontain(
            "data-sub-url="
            '"?finder=1&amp;col=productversions&amp;id={0}"'.format(p.id))


    def test_finder_ajax(self):
        """Finder intercepts its ajax requests to return child obj lists."""
        self.add_perm("execute")

        pv = self.F.ProductVersionFactory.create(version="1.0.1")

        res = self.get(
            params={
                "finder": "1",
                "col": "productversions",
                "id": str(pv.product.id)
                },
            headers={"X-Requested-With": "XMLHttpRequest"},
            )

        self.assertIn("1.0.1", res.json["html"])
        self.assertIn(
            'data-sub-url="?finder=1&amp;col=runs&amp;id={0}"'.format(pv.id),
            res.json["html"]
            )



class SetEnvironmentTest(case.view.AuthenticatedViewTestCase,
                         case.view.NoCacheTest,
                         ):
    """Tests for set_environment view."""
    def setUp(self):
        """These tests all require a test run."""
        super(SetEnvironmentTest, self).setUp()
        self.testrun = self.F.RunFactory.create(name="Foo Run")


    @property
    def url(self):
        """Shortcut for set_environment url."""
        return reverse(
            "runtests_environment", kwargs={"run_id": self.testrun.id})


    @property
    def envs(self):
        """A lazily-created sample set of environments."""
        if getattr(self, "_cached_envs", None) is None:
            self._cached_envs = self.F.EnvironmentFactory.create_full_set(
                {"OS": ["Windows 7", "Ubuntu Linux"]})
        return self._cached_envs


    def test_requires_execute_permission(self):
        """Requires execute permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")


    def test_form_choices(self):
        """Form has available categories and elements for run as choices."""
        self.add_perm("execute")
        self.testrun.environments.add(*self.envs)

        res = self.get()

        res.mustcontain("OS")
        res.mustcontain("Ubuntu Linux")
        res.mustcontain("Windows 7")


    def test_valid_environments(self):
        """JSON list of valid envs (as ordered element list) is in template."""
        self.add_perm("execute")
        envs = self.F.EnvironmentFactory.create_set(
            ["OS", "Browser"], ["OS X", "Safari"], ["Windows", "IE"])
        self.testrun.environments.add(*envs)

        osx = self.model.Element.objects.get(name="OS X")
        safari = self.model.Element.objects.get(name="Safari")
        windows = self.model.Element.objects.get(name="Windows")
        ie = self.model.Element.objects.get(name="IE")

        res = self.get()

        res.mustcontain("VALID_ENVIRONMENTS = [")
        res.mustcontain("[{0}, {1}]".format(safari.id, osx.id))
        res.mustcontain("[{0}, {1}]".format(ie.id, windows.id))


    def test_form_initial(self):
        """Form initial choices determined by "environment" querystring key."""
        self.add_perm("execute")
        self.testrun.environments.add(*self.envs)

        res = self.get(params=dict(environment=self.envs[0].id))

        res.mustcontain(
            '<option value="{0}" selected="selected">'.format(
                self.envs[0].elements.get().id)
            )


    def test_run(self):
        """Form has test run name in label."""
        self.add_perm("execute")

        res = self.get()

        res.mustcontain("run tests in Foo Run!")


    def test_bad_run_id_404(self):
        """Bad run id returns 404."""
        self.add_perm("execute")
        url = reverse("runtests_environment", kwargs={"run_id": 9999})

        self.app.get(url, user=self.user, status=404)


    def test_ajax(self):
        """Ajax request uses partial template."""
        self.add_perm("execute")

        res = self.get(headers={"X-Requested-With": "XMLHttpRequest"})

        self.assertNotIn("<body", res.body)


    def test_env_required(self):
        """Invalid combination results in error."""
        self.add_perm("execute")

        res = self.get().forms["runtests-environment-form"].submit()

        res.mustcontain("selected environment is not valid")


    def test_set_environment(self):
        """Selecting an environment redirects to run view for that run/env."""
        self.add_perm("execute")
        self.testrun.environments.add(*self.envs)

        cat = self.model.Category.objects.get()

        form = self.get().forms["runtests-environment-form"]
        form["category_{0}".format(cat.id)] = self.envs[0].elements.get().id

        res = form.submit(status=302)

        self.assertRedirects(
            res,
            reverse(
                "runtests_run",
                kwargs={"run_id": self.testrun.id, "env_id": self.envs[0].id})
            )


    def test_set_environment_and_build(self):
        """Selecting an environment and build redirects to run view for that run/env."""
        self.add_perm("execute")
        self.testrun.environments.add(*self.envs)
        self.testrun.is_series = True
        self.testrun.save()

        cat = self.model.Category.objects.get()

        form = self.get().forms["runtests-environment-form"]
        form["category_{0}".format(cat.id)] = self.envs[0].elements.get().id
        form["build"] = "rahbuild"

        res = form.submit(status=302)

        # we now need to find the run that was created for the series
        # by having the old run as its series value.
        newrun = self.F.model.Run.objects.get(series=self.testrun)
        self.assertRedirects(
            res,
            reverse(
                "runtests_run",
                kwargs={"run_id": newrun.id, "env_id": self.envs[0].id})
        )



class RunTestsTest(case.view.ListViewTestCase,
                   case.view.NoCacheTest,
                   ):
    """Tests for runtests view."""
    def setUp(self):
        """These tests all require a test run and envs, and execute perm."""
        super(RunTestsTest, self).setUp()
        self.testrun = self.F.RunFactory.create(status="active")
        self.envs = self.F.EnvironmentFactory.create_full_set(
            {"OS": ["Windows 7", "Ubuntu Linux"]})
        self.testrun.environments.add(*self.envs)
        self.add_perm("execute")


    @property
    def url(self):
        """Shortcut for runtests_run url."""
        return reverse(
            "runtests_run",
            kwargs={"run_id": self.testrun.id, "env_id": self.envs[0].id})


    def factory(self, **kwargs):
        """Create a result for inherited tests."""
        rcv = self.create_rcv(caseversion__name="Foo Bar")
        return self.create_result(runcaseversion=rcv)


    def create_rcv(self, **kwargs):
        """Create a runcaseversion for this run with given kwargs."""
        defaults = {
            "run": self.testrun,
            "caseversion__productversion": self.testrun.productversion,
            "caseversion__case__product": self.testrun.productversion.product,
            "environments": self.envs,
            }
        defaults.update(kwargs)
        return self.F.RunCaseVersionFactory.create(**defaults)


    def create_result(self, **kwargs):
        """Create a result for this run/env/user with given kwargs."""
        defaults = {
            "tester": self.user,
            "environment": self.envs[0]
            }
        defaults.update(kwargs)
        if "runcaseversion" not in defaults:
            defaults["runcaseversion"] = self.create_rcv()
        return self.F.ResultFactory.create(**defaults)


    def test_ajax_get(self):
        """Getting page via ajax returns just itemlist."""
        res = self.get(ajax=True, status=200)

        soup = BeautifulSoup(res.json["html"])

        # outermost element is class "itemlist"
        self.assertIn("itemlist", soup.findChild()["class"])


    def test_requires_execute_permission(self):
        """Requires execute permission."""
        res = self.app.get(
            self.url, user=self.F.UserFactory.create(), status=302)

        self.assertRedirects(res, "/")


    def test_markdown_safe(self):
        """Raw HTML and markdown attributes are escaped."""
        rcv = self.create_rcv(caseversion__description="<script>")
        self.F.CaseStepFactory.create(
            caseversion=rcv.caseversion,
            instruction="<script>alert(foo);</script>",
            expected="{@onclick=alert(1)}paragraph",
            )

        res = self.get()

        self.assertEqual(
            unicode(res.html.find("div", "description").find("p")),
            "<p>&lt;script&gt;</p>"
            )

        step = res.html.find("li", {"data-step-number": "1"})
        self.assertEqual(
            unicode(step.find("div", "instruction").find("p")),
            "<p>&lt;script&gt;alert(foo);&lt;/script&gt;</p>"
            )
        self.assertEqual(
            unicode(step.find("div", "outcome").find("p")),
            "<p>{@onclick=alert(1)}paragraph</p>",
            )


    def test_bad_run_id_404(self):
        """Bad run id returns 404."""
        url = reverse("runtests_environment", kwargs={"run_id": 9999})

        self.app.get(url, user=self.user, status=404)


    def test_inactive_run_redirects_to_selector(self):
        """An inactive run redirects to run selector with message."""
        self.testrun.status = "draft"
        self.testrun.save()

        res = self.get(status=302)

        self.assertRedirects(res, reverse("runtests"))
        res.follow().mustcontain("not open for testing")


    def test_invalid_environment_set(self):
        """If env is not valid for run, redirects to set-environment."""
        self.testrun.environments.remove(self.envs[0])

        res = self.get(status=302)

        self.assertRedirects(
            res,
            reverse("runtests_environment", kwargs={"run_id": self.testrun.id})
            )


    def test_environment(self):
        """Environment is shown in template."""
        res = self.get(status=200)

        self.assertEqual(
            res.html.findAll("ul", "envsettings")[0].find("li").text,
            self.envs[0].elements.get().name)


    def test_finder_productversions_prepopulated(self):
        """Finder is prepopulated with product versions."""
        res = self.get(status=200)

        finder_productversions = res.html.findAll(
            "input",
            id="finder-productversions-{0}".format(
                self.testrun.productversion.id)
            )


        self.assertEqual(len(finder_productversions), 1)
        self.assertIn("checked", unicode(finder_productversions[0]))


    def test_finder_runs_prepopulated(self):
        """Finder is prepopulated with runs."""
        res = self.get(status=200)

        finder_runs = res.html.findAll(
            "input", id="finder-runs-{0}".format(self.testrun.id))

        self.assertEqual(len(finder_runs), 1)
        self.assertIn("checked", unicode(finder_runs[0]))


    def test_finder_env_form_prepopulated(self):
        """Finder env form is prepopulated."""
        el = self.envs[0].elements.get()

        res = self.get(status=200)

        form = res.html.find("form", id="runtests-environment-form")
        self.assertEqual(
            form.find("option", value=str(el.id))["selected"], "selected")


    def test_runcaseversions(self):
        """Lists runcaseversions."""
        self.create_rcv(caseversion__name="Foo Case")

        res = self.get(status=200)

        res.mustcontain("Foo Case")


    def test_runcaseversions_env_narrowed(self):
        """Lists only correct env runcaseversions."""
        self.create_rcv(
            caseversion__name="Env0 Case", environments=self.envs[:1])
        self.create_rcv(
            caseversion__name="Env1 Case", environments=self.envs[1:])
        self.create_rcv(caseversion__name="EnvAll Case")

        res = self.get(status=200)

        res.mustcontain("Env0 Case")
        res.mustcontain("EnvAll Case")
        self.assertNotIn("Env1 Case", res)


    def test_redirect_preserves_sort(self):
        """Redirect after non-Ajax post preserves sort params."""
        rcv = self.create_rcv()

        form = self.get(
            params={"sortfield": "name"}, status=200).forms[
            "test-status-form-{0}".format(rcv.id)]

        res = form.submit(name="action-result_pass", index=0, status=302)

        self.assertRedirects(res, self.url + "?sortfield=name")


    def test_sort_by_status(self):
        """
        Can sort by status.  Honors status by ANY user for the env/test.

        Ascending puts pending at the top, since they have no status.
        """
        user2 = self.F.UserFactory()
        t1 = self.create_rcv(caseversion__name="t1")
        t2 = self.create_rcv(caseversion__name="t2")
        t3 = self.create_rcv(caseversion__name="t3")
        t4 = self.create_rcv(caseversion__name="t4")
        t5 = self.create_rcv(caseversion__name="t5")
        t6 = self.create_rcv(caseversion__name="t6")
        self.create_result(runcaseversion=t1, status="started")
        self.create_result(runcaseversion=t2, status="blocked")
        self.create_result(runcaseversion=t3, status="failed", tester=user2)
        self.create_result(runcaseversion=t4, status="invalidated")
        self.create_result(runcaseversion=t5, status="passed")
        self.create_result(runcaseversion=t6, status="skipped")

        res = self.get(
            params={"sortfield": "current_result", "sortdirection": "asc"})

        self.assertOrderInList(res, "t1", "t2", "t3", "t4", "t5", "t6")


    def test_sort_by_status_env_specific(self):
        """
        Can sort by status.  Specific to env in question.

        If rcv has result for different env, it's ignored
        """
        user2 = self.F.UserFactory()
        t1 = self.create_rcv(caseversion__name="t1")
        t2 = self.create_rcv(caseversion__name="t2")
        self.create_result(runcaseversion=t1, status="started")
        self.create_result(runcaseversion=t2, status="failed", tester=user2)

        # result for different env that should be ignored in sort
        self.create_result(
            runcaseversion=t1,
            environment=self.envs[1],
            status="passed",
            )

        res = self.get(
            params={"sortfield": "current_result", "sortdirection": "asc"})

        self.assertOrderInList(res, "t1", "t2")


    def test_description(self):
        """Returns details HTML snippet for given caseversion"""

        rcv = self.create_rcv(
            caseversion__name="Foo Case",
            caseversion__description="_Valmorphanize_",
            )

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        res = form.submit(
            name="action-result_pass",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            status=200
        )

        res.mustcontain("<em>Valmorphanize</em>")

    def test_post_no_action_redirect(self):
        """POST with no action does nothing and redirects."""
        rcv = self.create_rcv()

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        res = form.submit(status=302)

        self.assertRedirects(res, self.url)


    def test_post_no_action_ajax(self):
        """Ajax POST with no action does nothing and returns no HTML."""
        rcv = self.create_rcv()

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        res = form.submit(
            headers={"X-Requested-With": "XMLHttpRequest"}, status=200)

        self.assertEqual(res.json["html"], "")
        self.assertEqual(res.json["no_replace"], True)


    @patch("moztrap.view.runtests.views.ACTIONS", {})
    def test_post_bad_action_redirect(self):
        """POST with bad action does nothing but message and redirects."""
        rcv = self.create_rcv()

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        # we patched the actions dictionary so "result_pass" will not be valid
        res = form.submit(name="action-result_pass", index=0, status=302)

        self.assertRedirects(res, self.url)

        res.follow().mustcontain("result_pass is not a valid action")


    @patch("moztrap.view.runtests.views.ACTIONS", {})
    def test_post_bad_action_ajax(self):
        """Ajax POST with bad action sets message and returns no HTML."""
        rcv = self.create_rcv()

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        # we patched the actions dictionary so "result_pass" will not be valid
        res = form.submit(
            name="action-result_pass", index=0,
            headers={"X-Requested-With": "XMLHttpRequest"}, status=200)

        self.assertEqual(res.json["html"], "")
        self.assertEqual(res.json["no_replace"], True)
        self.assertEqual(
            res.json["messages"][0]["message"], "result_pass is not a valid action.")


    def test_post_bad_rcv_id_redirect(self):
        """POST with bad rcv id does nothing but message and redirects."""
        rcv = self.create_rcv()

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        rcv.delete()

        res = form.submit(name="action-result_pass", index=0, status=302)

        self.assertRedirects(res, self.url)

        res.follow().mustcontain("is not a valid run/caseversion ID")


    def test_post_bad_rcv_id_ajax(self):
        """Ajax POST with bad rcv id sets message and returns no HTML."""
        rcv = self.create_rcv()

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        rcv.delete()

        res = form.submit(
            name="action-result_pass", index=0,
            headers={"X-Requested-With": "XMLHttpRequest"}, status=200)

        self.assertEqual(res.json["html"], "")
        self.assertEqual(res.json["no_replace"], True)
        self.assertIn(
            "is not a valid run/caseversion ID",
            res.json["messages"][0]["message"]
            )


    def test_post_missing_result(self):
        """Can pass/fail/invalid a not-yet-existing result."""
        result = self.create_result(status="started")
        rcv = result.runcaseversion

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        result.delete()

        res = form.submit(name="action-result_pass", index=0, status=302)

        self.assertRedirects(res, self.url)

        result = rcv.results.get(tester=self.user, environment=self.envs[0])

        self.assertEqual(result.status, result.STATUS.passed)


    def test_post_missing_result_ajax(self):
        """Can pass/fail/invalid a not-yet-existing result via ajax."""
        result = self.create_result(status="started")
        rcv = result.runcaseversion

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        result.delete()

        res = form.submit(
            name="action-result_pass", index=0,
            headers={"X-Requested-With": "XMLHttpRequest"}, status=200)

        self.assertElement(
            res.json["html"], "button", attrs={"name": "action-start"})


    def test_pass_case(self):
        """Submit a "result_pass" action for a case; redirects."""
        result = self.create_result(status="started")
        rcv = result.runcaseversion

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        res = form.submit(name="action-result_pass", index=0, status=302)

        self.assertRedirects(res, self.url)

        result = rcv.results.get(
            tester=self.user,
            environment=self.envs[0],
            is_latest=True)

        self.assertEqual(result.status, result.STATUS.passed)


    def test_pass_case_ajax(self):
        """Ajax post a "result_pass" action; returns HTML snippet."""
        result = self.create_result(status="started")
        rcv = result.runcaseversion

        form = self.get(status=200).forms["test-status-form-{0}".format(rcv.id)]

        res = form.submit(
            name="action-result_pass",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            status=200
            )

        self.assertElement(
            res.json["html"], "button", attrs={"name": "action-start"})


    def test_invalidate_case(self):
        """Submit a "result_invalid" action for a case; redirects."""
        result = self.create_result(status="started")
        rcv = result.runcaseversion

        form = self.get(status=200).forms[
            "test-invalid-form-{0}".format(rcv.id)]

        form["comment"] = "it ain't valid"

        res = form.submit(
            name="action-result_invalid", index=0, status=302)

        self.assertRedirects(res, self.url)

        result = rcv.results.get(
            tester=self.user,
            environment=self.envs[0],
            is_latest=True)

        self.assertEqual(result.status, result.STATUS.invalidated)
        self.assertEqual(result.comment, "it ain't valid")


    def test_invalidate_case_ajax(self):
        """Ajax post a "result_invalid" action; returns HTML snippet."""
        result = self.create_result(status="started")
        rcv = result.runcaseversion

        form = self.get(status=200).forms[
            "test-invalid-form-{0}".format(rcv.id)]

        form["comment"] = "it ain't valid"

        res = form.submit(
            name="action-result_invalid",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            status=200
            )

        self.assertElement(
            res.json["html"], "button", attrs={"name": "action-start"})


    def test_fail_case(self):
        """Submit a "result_invalid" action for a case; redirects."""
        step = self.F.CaseStepFactory.create(number=1)
        rcv = self.create_rcv(caseversion=step.caseversion)
        self.create_result(status="started", runcaseversion=rcv)

        form = self.get(status=200).forms[
            "test-fail-form-{0}-1".format(rcv.id)]

        form["comment"] = "it didn't pass"

        res = form.submit(
            name="action-result_fail", index=0, status=302)

        self.assertRedirects(res, self.url)

        result = rcv.results.get(
            tester=self.user,
            environment=self.envs[0],
            is_latest=True)

        self.assertEqual(result.status, result.STATUS.failed)
        self.assertEqual(result.comment, "it didn't pass")


    def test_fail_case_ajax(self):
        """Ajax post a "result_invalid" action; returns HTML snippet."""
        step = self.F.CaseStepFactory.create(number=1)
        rcv = self.create_rcv(caseversion=step.caseversion)
        self.create_result(status="started", runcaseversion=rcv)

        form = self.get(status=200).forms[
            "test-fail-form-{0}-1".format(rcv.id)]

        form["comment"] = "it didn't pass"

        res = form.submit(
            name="action-result_fail",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            status=200
            )

        self.assertElement(
            res.json["html"], "button", attrs={"name": "action-start"})


    def test_restart_case(self):
        """Submit a "restart" action for a case; redirects."""
        result = self.create_result(status="passed")
        rcv = result.runcaseversion

        form = self.get(status=200).forms["restart-form-{0}".format(rcv.id)]

        res = form.submit(name="action-start", index=0, status=302)

        self.assertRedirects(res, self.url)

        result = rcv.results.get(
            tester=self.user,
            environment=self.envs[0],
            is_latest=True,
            )

        self.assertEqual(result.status, result.STATUS.started)


    def test_restart_case_ajax(self):
        """Ajax post a "restart" action; returns HTML snippet."""
        result = self.create_result(status="passed")
        rcv = result.runcaseversion

        form = self.get(status=200).forms["restart-form-{0}".format(rcv.id)]

        res = form.submit(
            name="action-start",
            index=0,
            headers={"X-Requested-With": "XMLHttpRequest"},
            status=200
            )

        self.assertElement(
            res.json["html"], "button", attrs={"name": "action-result_pass"})


    def test_parameter_defaults(self):
        """Action parameters have defaults and are not required."""
        result = self.create_result(status="started")
        rcv = result.runcaseversion

        form = self.get(status=200).forms[
            "test-invalid-form-{0}".format(rcv.id)]

        # prevents any comment parameter from being submitted
        del form.fields["comment"]

        res = form.submit(name="action-result_invalid", index=0, status=302)

        self.assertRedirects(res, self.url)

        result = rcv.results.get(is_latest=True)

        self.assertEqual(result.status, result.STATUS.invalidated)
        self.assertEqual(result.comment, "")

########NEW FILE########
__FILENAME__ = test_filterset
"""
Tests for transforming a filterset class (with `filters` list as a class
attribute) into a blob of JSON.
"""

import json

from django.template import Template, Context

from moztrap import model
from moztrap.view.lists import filters
from tests import case


class FiltersetToJSONTests(case.DBTestCase):

    def test_empty_filterset_to_json(self):
        t = Template("{% load filterset %}{% filterset_to_json filterset %}")
        filterset = []
        output = t.render(Context({"filterset": filterset}))
        struct = json.loads(output)
        self.assertEqual(struct, {"fields": [], "options": {}})

    def test_empty_filterset_with_options_to_json(self):
        t = Template("""
            {% load filterset %}
            {% filterset_to_json filterset with foo="bar" one=1 advanced %}
        """)
        filterset = []
        output = t.render(Context({"filterset": filterset}))
        struct = json.loads(output)
        self.assertEqual(struct["fields"], [])
        self.assertEqual(struct["options"], {
            "foo": "bar",
            "one": 1,
            "advanced": None
        })

    def test_basic_filterset_to_json(self):
        t = Template("{% load filterset %}{% filterset_to_json filterset %}")
        class SampleFilterset(filters.FilterSet):
            filters = [
                filters.KeywordFilter("name"),
                filters.ModelFilter(
                    "creator",
                    lookup="created_by",
                    queryset=model.User.objects.all().order_by("username")),
                filters.ModelFilter(
                    "product",
                    queryset=model.Product.objects.all().order_by("name")
                    ),
            ]
        product1 = model.Product.objects.create(
            name="Bee", description="A nice description",
        )
        product2 = model.Product.objects.create(
            name="Aaa", description="Another nice description",
        )
        assert not model.User.objects.all().count()
        assert model.Product.objects.all().count()

        f = SampleFilterset().bind({})
        output = t.render(Context({"filterset": f}))
        struct = json.loads(output)

        field1, field2, field3 = struct["fields"]
        # field1
        self.assertEqual(field1["key"], "name")
        self.assertEqual(field1["name"], "name")
        self.assertEqual(field1["cls"], "keyword")
        self.assertEqual(field1["is_default_and"], True)
        self.assertEqual(field1["switchable"], True)
        self.assertEqual(field1["options"], [])

        # field2
        self.assertEqual(field2["key"], "creator")
        self.assertEqual(field2["name"], "creator")
        self.assertEqual(field2["cls"], "")
        self.assertEqual(field2["is_default_and"], False)
        self.assertEqual(field2["switchable"], False)
        self.assertEqual(field2["options"], [])

        # field3
        self.assertEqual(field3["key"], "product")
        self.assertEqual(field3["name"], "product")
        self.assertEqual(field3["cls"], "")
        self.assertEqual(field3["is_default_and"], False)
        self.assertEqual(field3["switchable"], False)
        self.assertEqual(field3["options"], [
            ["Aaa", False, product2.pk],
            ["Bee", False, product1.pk]
        ])

########NEW FILE########
__FILENAME__ = test_mtforms
"""
Tests for MozTrap form-rendering template tags and filters.

"""
from mock import patch
import floppyforms as forms

from tests import case



class FieldFilterTests(case.TestCase):
    """Tests for form field filters."""
    @property
    def mtforms(self):
        """The module under test."""
        from moztrap.view.templatetags import mtforms
        return mtforms


    @property
    def form(self):
        """A sample form."""
        class PersonForm(forms.Form):
            name = forms.CharField(initial="none", required=True)
            level = forms.ChoiceField(
                choices=(("b", "Beginner"), ("a", "Advanced")), required=False)
            awesome = forms.BooleanField(required=False)

        return PersonForm



    def test_placeholder(self):
        """``placeholder`` filter sets placeholder attribute."""
        bf = self.mtforms.placeholder(self.form()["name"], "Placeholder")
        self.assertIn('placeholder="Placeholder"', unicode(bf))


    @patch("moztrap.view.templatetags.mtforms.render_to_string")
    def test_label(self, render_to_string):
        """``label`` filter renders field label from template."""
        render_to_string.return_value = "<label>something</label>"
        bf = self.form()["name"]

        label = self.mtforms.label(bf)

        self.assertEqual(label, "<label>something</label>")
        render_to_string.assert_called_with(
            "forms/_label.html",
            {
                "label_text": "Name",
                "id": "id_name",
                "field": bf
                }
            )


    @patch("moztrap.view.templatetags.mtforms.render_to_string")
    def test_label_override(self, render_to_string):
        """label filter allows overriding the label text."""
        bf = self.form()["name"]

        self.mtforms.label(bf, "override")

        render_to_string.assert_called_with(
            "forms/_label.html",
            {
                "label_text": "override",
                "id": "id_name",
                "field": bf
                }
            )

    def test_label_text(self):
        """``label_text`` filter returns field's default label text."""
        self.assertEqual(self.mtforms.label_text(self.form()["name"]), "Name")


    def test_value_text(self):
        """``value_text`` filter returns value of field."""
        self.assertEqual(
            self.mtforms.value_text(self.form({"name": "boo"})["name"]), "boo")


    def test_value_text_unbound(self):
        """``value_text`` filter returns default value of unbound field."""
        self.assertEqual(self.mtforms.value_text(self.form()["name"]), "none")


    def test_value_text_choices(self):
        """``value_text`` filter returns human-readable value of choicefield."""
        self.assertEqual(
            self.mtforms.value_text(
                self.form({"level": "a"})["level"]), "Advanced")


    def test_values_text_choices(self):
        """``values_text`` filter returns values of multiple select."""
        f = self.form({"level": ["a", "b"]})

        self.assertEqual(
            self.mtforms.values_text(f["level"]), ["Advanced", "Beginner"])


    def test_classes(self):
        """``classes`` filter sets widget's class attr if not set."""
        bf = self.form()["name"]

        bf = self.mtforms.classes(bf, "yo ma")

        self.assertIn('class="yo ma"', unicode(bf))


    def test_classes_append(self):
        """``classes`` filter appends to widget's class attr if set."""
        bf = self.form()["name"]
        bf.field.widget.attrs["class"] = "foo"

        bf = self.mtforms.classes(bf, "yo ma")

        self.assertIn('class="foo yo ma"', unicode(bf))


    def test_optional_false(self):
        """A required field should not be marked optional."""
        self.assertFalse(self.mtforms.optional(self.form()["name"]))


    def test_optional_true(self):
        """A non-required field should be marked optional."""
        self.assertTrue(self.mtforms.optional(self.form()["level"]))


    def test_attr(self):
        """``attr`` filter sets an attribute."""
        self.assertIn(
            'foo="bar"',
            unicode(self.mtforms.attr(self.form()["name"], "foo:bar")))


    def test_attr_no_value(self):
        """``attr`` filter sets a no-value attribute."""
        self.assertIn(
            "foo ", unicode(self.mtforms.attr(self.form()["name"], "foo")))


    def test_detect_checkbox(self):
        """``is_checkbox`` detects checkboxes."""
        f = self.form()

        self.assertTrue(self.mtforms.is_checkbox(f["awesome"]))


    def test_detect_non_checkbox(self):
        """``is_checkbox`` detects that select fields are not checkboxes."""
        f = self.form()

        self.assertFalse(self.mtforms.is_checkbox(f["level"]))


    def test_is_readonly(self):
        """`is_readonly` detects the presence of a True readonly attribute."""
        f = self.form()
        f.fields["level"].readonly = True

        self.assertTrue(self.mtforms.is_readonly(f["level"]))


    def test_is_not_readonly(self):
        """`is_readonly` detects the absence of a True readonly attribute."""
        f = self.form()

        self.assertFalse(self.mtforms.is_readonly(f["level"]))


    def test_is_multiple(self):
        """`is_multiple` detects a SelectMultiple widget."""
        f = self.form()
        f.fields["level"].widget = forms.SelectMultiple()

        self.assertTrue(self.mtforms.is_multiple(f["level"]))


    def test_is_not_multiple(self):
        """`is_multiple` detects a non-multiple widget."""
        f = self.form()

        self.assertFalse(self.mtforms.is_multiple(f["level"]))

########NEW FILE########
__FILENAME__ = test_permissions
"""
Tests for MozTrap permissions template tags and filters.

"""
from tests import case



class PermissionFilterTest(case.DBTestCase):
    """Tests for permission-related filters."""
    @property
    def permissions(self):
        """The templatetags module under test."""
        from moztrap.view.templatetags import permissions
        return permissions


    def test_has_perm(self):
        """``has_perm`` filter passes through to user's has_perm method."""
        u = self.F.UserFactory.create(permissions=["library.create_cases"])
        self.assertTrue(self.permissions.has_perm(u, "library.create_cases"))

########NEW FILE########
__FILENAME__ = test_urls
"""
Tests for URL-related template filters.

"""
from django.template import Template, Context

from django.test.utils import override_settings
from tests import case



class FilterTest(case.TestCase):
    """Tests for URL-related template filters."""
    @property
    def urls(self):
        """The templatetag module under test."""
        from moztrap.view.templatetags import urls
        return urls


    def test_is_url(self):
        """is_url filter detects a full URL."""
        self.assertTrue(self.urls.is_url("http://www.example.com"))


    def test_is_not_url(self):
        """is_url filter detects a non-URL."""
        self.assertFalse(self.urls.is_url("1234567"))



class ProtocolTest(case.TestCase):
    """Tests for the protocol template tag."""
    def tag(self):
        """Return the output of the {% protocol %} template tag."""
        t = Template("{% load urls %}{% protocol %}")
        return t.render(Context({}))


    @override_settings(SESSION_COOKIE_SECURE=False)
    def test_http(self):
        """protocol tag returns 'http' if SESSION_COOKIE_SECURE is False."""
        self.assertEqual(self.tag(), "http")


    @override_settings(SESSION_COOKIE_SECURE=True)
    def test_https(self):
        """protocol tag returns 'https' if SESSION_COOKIE_SECURE is True."""
        self.assertEqual(self.tag(), "https")

########NEW FILE########
__FILENAME__ = test_views
"""
Tests for home view.

"""
from django.core.urlresolvers import reverse

from tests import case



class HomeViewTest(case.view.AuthenticatedViewTestCase):
    """Tests for home view."""
    @property
    def url(self):
        """Shortcut for home url."""
        return reverse("home")


    def test_execute_permission_redirects_to_runtests(self):
        """Users with execute permission are directed to run-tests page."""
        self.add_perm("execute")
        res = self.get(status=302)

        self.assertRedirects(res, reverse("runtests"))


    def test_no_permission_redirects_to_results(self):
        """Users without execute permission are directed to results."""
        res = self.get(status=302)

        self.assertRedirects(res, reverse("results_runs"))

########NEW FILE########
__FILENAME__ = test_forms
"""
Tests for login/logout/registration forms.

"""
from tests import case



class RegistrationFormTest(case.DBTestCase):
    """Tests for RegistrationForm."""
    @property
    def RegistrationForm(self):
        """The form class under test."""
        from moztrap.view.users.forms import RegistrationForm
        return RegistrationForm


    def test_unique_email(self):
        """Validation error for non-unique email."""
        self.F.UserFactory.create(email="test@example.com")

        form = self.RegistrationForm({
                "username": "foo",
                "email": "test@example.com",
                "password1": "testpw1234",
                "password2": "testpw1234",
                })

        self.assertFalse(form.is_valid())

        self.assertEqual(
            form.errors["email"], [u"A user with that email already exists."])



class SetUsernameFormTest(case.DBTestCase):
    """Tests for SetUsernameForm."""
    @property
    def SetUsernameForm(self):
        """The form class under test."""
        from moztrap.view.users.forms import SetUsernameForm
        return SetUsernameForm


    def test_invalid_chars(self):
        """Validation error for invalid username characters."""
        self.F.UserFactory.create()

        form = self.SetUsernameForm({"username": ":foo:"})

        self.assertFalse(form.is_valid())

        self.assertEqual(
            form.errors["username"],
            [u"This value must contain only letters, numbers and underscores."],
            )

########NEW FILE########
__FILENAME__ = test_views
"""
Tests for login/logout/account views.

"""
from django.conf import settings
from django.core import mail
from django.core.urlresolvers import reverse

from django.test.utils import override_settings
import mock

from tests import case
from tests.utils import patch_session



@mock.patch.object(settings, "USE_BROWSERID", False)
class LoginTest(case.view.ViewTestCase):
    """Tests for login view."""
    @property
    def url(self):
        """Shortcut for login url."""
        return reverse("auth_login")


    def test_login(self):
        """Successful login redirects."""
        self.F.UserFactory.create(username="test", password="sekrit")

        form = self.get().forms["loginform"]
        form["username"] = "test"
        form["password"] = "sekrit"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("home"))


    def test_login_next_redirect_prevent_external(self):
        """the 'next' redirect after login can only go somewhere internal"""
        url = reverse("auth_login") + "?next=example.com"
        self.F.UserFactory.create(username="test", password="sekrit")

        form = self.app.get(url).forms["loginform"]
        form["username"] = "test"
        form["password"] = "sekrit"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("home"))

    def test_login_next_redirect_only_to_internal(self):
        """the 'next' redirect after login can only go somewhere internal"""
        url = reverse("auth_login") + "?next=/manage/cases/"
        self.F.UserFactory.create(username="test", password="sekrit")

        form = self.app.get(url).forms["loginform"]
        form["username"] = "test"
        form["password"] = "sekrit"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("manage_cases"))

    def test_email_login(self):
        """Can log in with email address."""
        self.F.UserFactory.create(
            username="test", email="test@example.com", password="sekrit")

        form = self.get().forms["loginform"]
        form["username"] = "test@example.com"
        form["password"] = "sekrit"
        res = form.submit(status=302)

        self.assertRedirects(res, reverse("home"))


    def test_login_failed(self):
        """Failed login returns error message."""
        self.F.UserFactory.create(username="test", password="sekrit")

        form = self.get().forms["loginform"]
        form["username"] = "test"
        form["password"] = "blah"
        res = form.submit(status=200)

        res.mustcontain("Please enter a correct username and password")


    def test_display_captcha(self):
        """Sixth login attempt within a minute returns form with captcha."""
        res = self.get()
        for i in range(6):
            res = res.forms["loginform"].submit()

        form = res.forms["loginform"]

        self.assertIn("captcha", form.fields)


    def test_bad_captcha(self):
        """Bad value for captcha fails login, even with correct user/pw."""
        self.F.UserFactory.create(username="test", password="sekrit")

        session_data = {}

        with patch_session(session_data):
            res = self.get()
            for i in range(6):
                res = res.forms["loginform"].submit()

            form = res.forms["loginform"]
            answer = session_data["auth_captcha_answer"]
            form["captcha"] = answer + 1  # oops, wrong answer!
            form["username"] = "test"
            form["password"] = "sekrit"
            res = form.submit(status=200)

        res.mustcontain("not the answer we were looking for")


    def test_good_captcha(self):
        """Good value for captcha allows login."""
        self.F.UserFactory.create(username="test", password="sekrit")

        session_data = {}

        with patch_session(session_data):
            res = self.get()
            for i in range(6):
                res = res.forms["loginform"].submit()

            form = res.forms["loginform"]
            answer = session_data["auth_captcha_answer"]
            form["captcha"] = answer
            form["username"] = "test"
            form["password"] = "sekrit"
            res = form.submit(status=302)

        self.assertRedirects(res, reverse("home"))



@mock.patch.object(settings, "USE_BROWSERID", True)
class BrowserIDTest(case.view.ViewTestCase):
    """Tests for BrowserID verify view."""
    @property
    def url(self):
        """Shortcut for login url with a next URL."""
        return reverse("auth_login")


    def new_browserid(self, email="test@example.com"):
        """Create a new user via browserID login; return the redirect."""
        with mock.patch("django_browserid.auth.verify") as verify:
            verify.return_value = {"email": email}

            form = self.get().forms["browserid-form"]
            form["assertion"].force_value("foo")
            res = form.submit(status=302)

        return res


    def test_fail_redirect(self):
        """Failed BrowserID verification redirects without losing 'next'."""
        url = reverse("auth_login") + "?next=/results/"
        form = self.app.get(url).forms["browserid-form"]
        res = form.submit(status=302)

        self.assertRedirects(res, url)


    def test_fail_message(self):
        """Failed BrowserID verification has a message for the user."""
        form = self.get().forms["browserid-form"]
        res = form.submit(status=302).follow()

        self.assertContains(res, "Unable to sign in with that email address")


    def test_new_user(self):
        """Successful new BrowserID login creates User with auto username."""
        self.new_browserid()

        user = self.model.User.objects.get()
        self.assertTrue(user.username.startswith(":auto:"))


    def test_new_user_role(self):
        """New user has default new user role."""
        from preferences import preferences
        cp = preferences.CorePreferences
        role = self.F.RoleFactory.create()
        cp.default_new_user_role = role
        cp.save()

        self.new_browserid()

        user = self.model.User.objects.get()
        self.assertTrue(user.roles.get(), role)


    def test_set_username_initial(self):
        """A new browserID user gets a set-username form, initially blank."""
        form = self.new_browserid().follow().follow().forms["setusernameform"]

        self.assertEqual(form.fields["username"][0].value, "")


    def test_set_username(self):
        """A new browserID user is prompted to set their username, and can."""
        form = self.new_browserid().follow().follow().forms["setusernameform"]
        form["username"] = "tester"
        res = form.submit(status=302)

        self.assertRedirects(res, "/")
        user = self.model.User.objects.get()
        self.assertEqual(user.username, "tester")


    def test_set_username_next_internal(self):
        """the 'next' redirect after set_username can go somewhere internal"""

        self.new_browserid()
        url = reverse("auth_set_username") + "?next=/manage/cases/"

        form = self.app.get(url).forms["setusernameform"]
        form["username"] = "tester"
        res = form.submit(status=302)
        self.assertRedirects(res, "/manage/cases/")


    def test_set_username_next_prevent_external(self):
        """the 'next' redirect can not go somewhere external"""

        self.new_browserid()
        url = reverse("auth_set_username") + "?next=http://example.com"

        form = self.app.get(url).forms["setusernameform"]
        form["username"] = "tester"
        res = form.submit(status=302)

        self.assertRedirects(res, "/")


    def test_set_username_error(self):
        """A new browserID user gets an error if they choose an in-use name."""
        self.F.UserFactory.create(username="tester")

        form = self.new_browserid().follow().follow().forms["setusernameform"]
        form["username"] = "tester"
        res = form.submit(status=200)

        res.mustcontain("User with this Username already exists.")


    def test_auto_username_logout(self):
        """A user with an auto-username can logout."""
        logoutform = self.new_browserid().follow().follow().forms["logoutform"]
        res = logoutform.submit().follow()

        self.assertRedirects(res, reverse("auth_login") + "?next=/")



@mock.patch.object(settings, "USE_BROWSERID", False)
class LogoutTest(case.view.ViewTestCase):
    """Tests for logout view."""
    @property
    def url(self):
        """Shortcut for logout url."""
        return reverse("auth_logout")


    def test_get_405(self):
        """GETting the logout view results in HTTP 405 Method Not Allowed."""
        self.get(status=405)


    def test_logout_redirect(self):
        """Successful logout POST redirects to the page you were on."""
        user = self.F.UserFactory.create()

        form = self.app.get("/manage/runs/", user=user).forms["logoutform"]
        res = form.submit()

        self.assertRedirects(res, "/manage/runs/")



class PasswordStrengthTests(object):
    """Mixin tests for any view that sets or changes a password."""
    # subclasses should set
    form_id = None
    extra_form_data = {}
    password_fields = ["new_password1", "new_password2"]


    def get_form(self):
        """Shortcut to get the form."""
        return self.get().forms[self.form_id]


    def submit_form(self, password, status):
        """Submit form with given password and return response."""
        form = self.get_form()
        for k, v in self.extra_form_data.items():
            form[k] = v
        for fn in self.password_fields:
            form[fn] = password
        return form.submit(status=status)


    @override_settings(MINIMUM_PASSWORD_CHARS=10)
    def test_minimum_password_length(self):
        """Passwords must meet the minimum length."""
        res = self.submit_form("abcdef123", status=200)

        res.mustcontain("Your password must be a minimum of 10 characters")


    @override_settings(PASSWORD_REQUIRE_ALPHA_NUMERIC=True)
    def test_password_require_numeric(self):
        """If enabled, passwords require numbers + letters, not just letters."""
        res = self.submit_form("abcdefgh", status=200)

        res.mustcontain("Your password must contain both letters and numbers")


    @override_settings(PASSWORD_REQUIRE_ALPHA_NUMERIC=True)
    def test_password_require_alpha(self):
        """If enabled, passwords require numbers + letters, not just numbers."""
        res = self.submit_form("12345678", status=200)

        res.mustcontain("Your password must contain both letters and numbers")


    @override_settings(FORBIDDEN_PASSWORDS=["abcdef123"])
    def test_forbidden_passwords(self):
        """Some passwords are explicitly forbidden."""
        res = self.submit_form("abcdef123", status=200)

        res.mustcontain("That password is too easily guessed")



class PasswordChangeTest(PasswordStrengthTests,
                         case.view.AuthenticatedViewTestCase
                         ):
    """Tests for change-password view."""
    form_id = "changepasswordform"
    extra_form_data = {"old_password": "sekrit"}


    def setUp(self):
        """Set password for user."""
        super(PasswordChangeTest, self).setUp()
        self.user.set_password("sekrit")
        self.user.save()


    @property
    def url(self):
        """Shortcut for password-change url."""
        return reverse("auth_password_change")


    def test_change_password(self):
        """Get a confirmation message after changing password."""
        res = self.submit_form("sekrit123", status=302).follow().follow()

        res.mustcontain("Password changed")



class PasswordResetTest(case.view.ViewTestCase):
    """Tests for reset-password view."""
    def setUp(self):
        """Create a user."""
        super(PasswordResetTest, self).setUp()


    @property
    def url(self):
        """Shortcut for password-reset url."""
        return reverse("auth_password_reset")


    def test_reset_password(self):
        """Get a confirmation message and reset email."""
        self.F.UserFactory.create(email="user@example.com")

        form = self.get().forms["resetpasswordform"]
        form["email"] = "user@example.com"

        res = form.submit(status=302).follow().follow()

        res.mustcontain("Password reset email sent")
        self.assertEqual(len(mail.outbox), 1)
        self.assertEqual(mail.outbox[0].to, ["user@example.com"])


    def test_bad_email(self):
        """Nonexistent user emails give no clue to an attacker."""
        form = self.get().forms["resetpasswordform"]
        form["email"] = "doesnotexist@example.com"

        res = form.submit(status=302).follow().follow()

        res.mustcontain("Password reset email sent")
        self.assertEqual(len(mail.outbox), 0)



class PasswordResetConfirmTest(PasswordStrengthTests, case.view.ViewTestCase):
    """Tests for reset-password-confirm view."""
    form_id = "setpasswordform"


    def setUp(self):
        """Create a user."""
        super(PasswordResetConfirmTest, self).setUp()
        self.user = self.F.UserFactory.create(email="user@example.com")


    @property
    def url(self):
        """Shortcut for password-reset-confirm url."""
        form = self.app.get(
            reverse("auth_password_reset")).forms["resetpasswordform"]
        form["email"] = "user@example.com"
        form.submit(status=302)

        for line in mail.outbox[0].body.splitlines():
            if "://" in line:
                return line.strip()

        self.fail("No password reset confirm URL found in reset email.")


    def test_reset_password_confirm(self):
        """Get a confirmation message after resetting password."""
        res = self.submit_form("sekrit123", status=302).follow().follow()

        res.mustcontain("Password changed")



class RegisterTest(PasswordStrengthTests, case.view.ViewTestCase):
    """Tests for register view."""
    form_id = "accountform"
    extra_form_data = {"username": "new", "email": "new@example.com"}
    password_fields = ["password1", "password2"]


    @property
    def url(self):
        """Shortcut for register url."""
        return reverse("registration_register")


    def test_register(self):
        """Get a confirmation message after registering."""
        res = self.submit_form("sekrit123", status=302).follow().follow()

        res.mustcontain("Check your email for an account activation link")


    def test_new_user_role(self):
        """New user has default new user role."""
        from preferences import preferences
        cp = preferences.CorePreferences
        role = self.F.RoleFactory.create()
        cp.default_new_user_role = role
        cp.save()

        self.submit_form("sekrit123", status=302)

        user = self.model.User.objects.get()
        self.assertTrue(user.roles.get(), role)



class ActivateTest(case.view.ViewTestCase):
    @property
    def url(self):
        """Shortcut for activate url."""
        form = self.app.get(
            reverse("registration_register")).forms["accountform"]
        form["username"] = "new"
        form["email"] = "new@example.com"
        form["password1"] = "sekrit123"
        form["password2"] = "sekrit123"
        form.submit(status=302)

        for line in mail.outbox[0].body.splitlines():
            if "://" in line:
                return line.strip()

        self.fail("Activation link not found in activation email.")


    def test_activate(self):
        """Get a confirmation message after activating."""
        res = self.get(status=302).follow().follow()

        res.mustcontain("Account activated")


    def test_failed_activate(self):
        """Failed activation returns a failure message."""
        res = self.app.get(
            reverse("registration_activate", kwargs={"activation_key": "foo"})
            )

        res.mustcontain("that activation key is not valid")



class CreateApiKeyTest(case.view.AuthenticatedViewTestCase):
    """Tests for the create_apikey view."""
    def setUp(self):
        """Creating an API key requires a user."""
        super(CreateApiKeyTest, self).setUp()
        self.owner = self.F.UserFactory.create()


    @property
    def url(self):
        """Shortcut for user-edit url (from where we can create an API key)."""
        return reverse("manage_user_edit", kwargs={"user_id": self.owner.id})


    def test_post(self):
        """POSTing to create_apikey creates a key and redirects to user-edit."""
        self.add_perm("manage_users")
        res = self.get().forms["create-apikey-form"].submit()

        self.assertRedirects(res, self.url)

        ak = self.model.ApiKey.objects.get()
        self.assertEqual(ak.created_by, self.user)
        self.assertEqual(ak.owner, self.owner)

########NEW FILE########
__FILENAME__ = test_ajax
"""
Tests for ajax view utilities.

"""
from django.template.response import TemplateResponse
from django.test import RequestFactory

from tests import case



class AjaxTest(case.TestCase):
    """Tests for ajax template-swapping view decorator."""
    @property
    def ajax(self):
        """The decorator-factory under test."""
        from moztrap.view.utils.ajax import ajax
        return ajax


    @property
    def view(self):
        """A simple TemplateResponse-returning view, decorated with @ajax."""
        @self.ajax("ajax_template.html")
        def view(request):
            return TemplateResponse(request, "normal_template.html")

        return view


    def test_swaps_template(self):
        """Decorator changes TemplateResponse to given template, if ajax."""
        request = RequestFactory().get(
            "/", HTTP_X_REQUESTED_WITH="XMLHttpRequest")
        response = self.view(request)
        self.assertEqual(response.template_name, "ajax_template.html")


    def test_only_ajax(self):
        """Decorator has no effect on non-Ajax response."""
        request = RequestFactory().get("/")
        response = self.view(request)
        self.assertEqual(response.template_name, "normal_template.html")

########NEW FILE########
__FILENAME__ = test_auth
"""
Tests for auth view utilities.

"""
from django.http import HttpResponse
from django.test import RequestFactory

from django.contrib.auth.models import AnonymousUser

from django.test.utils import override_settings
from tests import case



class AjaxTest(case.TestCase):
    @property
    def login_maybe_required(self):
        """The decorator-factory under test."""
        from moztrap.view.utils.auth import login_maybe_required
        return login_maybe_required


    @property
    def view(self):
        """A simple view, decorated with @login_maybe_required."""
        @self.login_maybe_required
        def view(request):
            return HttpResponse("success")

        return view


    @override_settings(ALLOW_ANONYMOUS_ACCESS=False)
    def test_no_anonymous(self):
        """With no anonymous access, decorator requires login."""
        request = RequestFactory().get("/")
        request.user = AnonymousUser()
        response = self.view(request)
        self.assertEqual(response.status_code, 302)


    @override_settings(ALLOW_ANONYMOUS_ACCESS=True)
    def test_anonymous(self):
        """With anonymous access allowed, decorator is no-op."""
        request = RequestFactory().get("/")
        response = self.view(request)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, "success")

########NEW FILE########
__FILENAME__ = test_mtforms
"""
Tests for MozTrap form utilities.

"""
from django import forms

from tests import case



class MTFormsTestCase(case.DBTestCase):
    """Base test case class for mtforms tests."""
    @property
    def mtforms(self):
        """The module under test."""
        from moztrap.view.utils import mtforms
        return mtforms



class TestNonFieldErrorsClassFormMixin(MTFormsTestCase):
    """Tests for NonFieldErrorsClassMixin."""
    @property
    def form(self):
        """A sample descended form class."""
        class PersonForm(self.mtforms.NonFieldErrorsClassFormMixin, forms.Form):
            name = forms.CharField()
            age = forms.IntegerField()

            def clean(self):
                if (self.cleaned_data.get("name") == "Shakespeare" and
                    self.cleaned_data.get("age", 0) < 400):
                    raise forms.ValidationError("Too young to be Shakespeare.")

        return PersonForm


    def test_non_field_errorlist(self):
        """Non-field-error list has nonfield class."""
        form = self.form({"name": "Shakespeare", "age": "25"})

        nfe = form.non_field_errors()

        self.assertTrue('class="errorlist nonfield"' in unicode(nfe))


    def test_field_errorlist(self):
        """Field error list does not have nonfield class."""
        form = self.form({"name": "Joe"})

        fe = unicode(form["age"].errors)

        self.assertTrue('class="' in fe)
        self.assertFalse("nonfield" in fe)


    def test_no_nonfield_errors(self):
        """Works if there are no nonfield errors."""
        form = self.form({"name": "Joe", "age": "25"})

        self.assertEqual(unicode(form.non_field_errors()), u"")



class BareTextareaTest(MTFormsTestCase):
    """Tests for BareTextarea."""
    def test_no_attrs(self):
        """BareTextarea does not have rows or cols attributes."""
        self.assertEqual(self.mtforms.BareTextarea().attrs, {})



class ProductIdAttrsTest(MTFormsTestCase):
    """Tests for product_id_attrs."""
    def test_product_id_attr(self):
        """Returns dict with data-product-id."""
        pv = self.F.ProductVersionFactory.create()
        self.assertEqual(
            self.mtforms.product_id_attrs(pv),
            {"data-product-id": pv.product.id},
            )



class MTModelFormTest(MTFormsTestCase):
    """Tests for MTModelForm."""
    def setUp(self):
        """Setup for MTModelForm tests; create a user."""
        self.user = self.F.UserFactory.create()


    @property
    def form(self):
        """A sample descended form class."""
        class ProductForm(self.mtforms.MTModelForm):
            """Sample MTModelForm"""
            class Meta:
                model = self.model.Product
                fields = ["name"]

        return ProductForm


    def test_new_instance_records_created_by(self):
        """Adding a new instance records the created_by user."""
        f = self.form({"name": "Foo", "cc_version": "0"}, user=self.user)

        product = f.save()

        self.assertEqual(product.created_by, self.user)


    def test_edited_instance_records_modified_by(self):
        """Editing an instance records the modified_by user."""
        p = self.F.ProductFactory.create()
        f = self.form(
            {"name": "Foo", "cc_version": str(p.cc_version)},
            instance=p,
            user=self.user,
            )

        product = f.save()

        self.assertEqual(product.modified_by, self.user)


    def test_commit_false_records_modified_by(self):
        """modified_by user is still recorded even with commit=False."""
        f = self.form({"name": "Foo", "cc_version": "0"})

        product = f.save(commit=False, user=self.user)

        product.save()

        self.assertEqual(product.modified_by, self.user)


    def test_commit_false_allows_user_to_be_passed_in_later(self):
        """With commit=False, user can be passed in at later save."""
        u = self.F.UserFactory.create()
        f = self.form({"name": "Foo", "cc_version": "0"})

        product = f.save(commit=False, user=u)

        product.save(user=self.user)

        self.assertEqual(product.modified_by, self.user)


    def test_save_concurrent(self):
        """save will raise ConcurrencyError if there was a concurrent edit."""
        p = self.F.ProductFactory.create()
        submitted_version = p.cc_version
        p.name = "Foo"
        p.save()

        f = self.form(
            {"name": "New", "cc_version": str(submitted_version)},
            instance=p,
            )

        with self.assertRaises(self.model.ConcurrencyError):
            f.save()


    def test_save_if_valid_not_valid(self):
        """save_if_valid returns None if there are errors."""
        f = self.form({"name": "", "cc_version": "0"})

        self.assertIsNone(f.save_if_valid())
        self.assertEqual(f.errors, {"name": [u"This field is required."]})
        self.assertEqual(self.model.Product.objects.count(), 0)


    def test_save_if_valid_concurrent(self):
        """
        save_if_valid adds an error message on a concurrent edit.

        This tests the case where the concurrent edit happened before this form
        was submitted at all. So the model instance fetched and passed to the
        form is actually up to date, but the submitted form data contains an
        older ``cc_version``.

        """
        p = self.F.ProductFactory.create()
        submitted_version = p.cc_version
        p.name = "Foo"
        p.save()

        f = self.form(
            {"name": "New", "cc_version": str(submitted_version)},
            instance=p,
            )

        self.assertIsNone(f.save_if_valid())
        self.assertEqual(
            f.errors,
            {
                "__all__": [
                    u"Another user saved changes to this object in the "
                    u'meantime. Please <a href="">review their changes</a> '
                    u"and save yours again if they still apply."
                    ]
                }
            )
        # Added error uses proper error list class
        self.assertIsInstance(f.errors["__all__"], f.error_class)


    def test_save_if_valid_redisplay_updates_version(self):
        """
        On a concurrency error, redisplayed form can be successfully submitted.

        Rather than redisplaying the form with the known-to-be-out-of-date
        version, we redisplay it with the updated version.

        Need to pass in a QueryDict here, as immutability is relevant.

        """
        p = self.F.ProductFactory.create()
        submitted_version = p.cc_version
        p.name = "Foo"
        p.save()

        f = self.form(
            {"name": "New", "cc_version": str(submitted_version)},
            instance=p,
            )

        self.assertIsNone(f.save_if_valid())
        self.assertEqual(f["cc_version"].value(), p.cc_version)


    def test_save_if_valid_race_redisplay_updates_version(self):
        """On a race concurrency error, redisplayed form can be submitted."""
        p = self.F.ProductFactory.create()

        p2 = self.model.Product.objects.get()
        p2.name = "Foo"
        p2.save()

        from django.http import QueryDict
        f = self.form(
            QueryDict("name=New&cc_version={0}".format(p.cc_version)),
            instance=p,
            )

        self.assertIsNone(f.save_if_valid())
        self.assertEqual(f["cc_version"].value(), p2.cc_version)


    def test_save_if_valid_concurrent_race(self):
        """
        save_if_valid adds an error message on a rare race-condition edit.

        This tests the much less common situation where the concurrent edit is
        actually saved to the database in between the fetching of the form's
        instance and the validation of the form, so both the form's instance
        and the submitted data have an out-of-date version.

        """
        p = self.F.ProductFactory.create()

        p2 = self.model.Product.objects.get()
        p2.name = "Foo"
        p2.save()

        f = self.form({"name": "New", "cc_version": str(p.cc_version)}, instance=p)

        self.assertIsNone(f.save_if_valid())
        self.assertEqual(
            f.errors,
            {
                "__all__": [
                    u"Another user saved changes to this object in the "
                    u'meantime. Please <a href="">review their changes</a> '
                    u"and save yours again if they still apply."
                    ]
                }
            )


    def test_save_if_valid_success(self):
        """save_if_valid saves and returns the object on success."""
        p = self.F.ProductFactory.create()
        submitted_version = p.cc_version

        f = self.form(
            {"name": "New", "cc_version": str(submitted_version)},
            instance=p,
            )

        product = f.save_if_valid()

        self.assertEqual(product, p)
        self.assertEqual(product.name, "New")
        self.assertEqual(f.errors, {})


    def test_save_if_valid_accepts_user(self):
        """save_if_valid accepts current user and saves with it."""
        p = self.F.ProductFactory.create()
        u = self.F.UserFactory.create()
        submitted_version = p.cc_version

        f = self.form(
            {"name": "New", "cc_version": str(submitted_version)},
            instance=p,
            )

        product = f.save_if_valid(user=u)

        self.assertEqual(product.modified_by, u)


    def test_save_if_valid_respects_init_user(self):
        """save_if_valid uses user passed in on form instantiation."""
        p = self.F.ProductFactory.create()
        u = self.F.UserFactory.create()
        submitted_version = p.cc_version

        f = self.form(
            {"name": "New", "cc_version": str(submitted_version)},
            instance=p,
            user=u,
            )

        product = f.save_if_valid()

        self.assertEqual(product.modified_by, u)


    def test_cc_version_default(self):
        """With no instance, cc_version field defaults to 0."""
        f = self.form()

        self.assertEqual(f["cc_version"].value(), 0)


    def test_cc_version_initial(self):
        """With an instance, cc_version initial value is from instance."""
        p = self.F.ProductFactory.create()
        p.save()  # make the version nonzero

        f = self.form(instance=p)

        self.assertEqual(f["cc_version"].value(), p.cc_version)


    def test_cc_version_hidden(self):
        """cc_version field renders as a hidden input."""
        f = self.form()

        self.assertIn("hidden", unicode(f["cc_version"]))



class MTModelChoiceFieldTest(MTFormsTestCase):
    """Tests for MTModelChoiceField."""
    @property
    def form(self):
        """A sample form using the field class under test."""
        class ProductVersionForm(forms.Form):
            """Sample form using MTModelChoiceField."""
            product = self.mtforms.MTModelChoiceField(
                self.model.Product.objects.all(),
                label_from_instance=lambda p: "FooLabel {0}".format(unicode(p)),
                choice_attrs=lambda p: {"data-product-id": p.id}
                )
            product2 = self.mtforms.MTModelChoiceField(
                self.model.Product.objects.all())

        return ProductVersionForm


    def test_label_from_instance(self):
        """Custom label_from_instance callable is used."""
        self.F.ProductFactory(name="Bar")
        s = unicode(self.form()["product"])

        self.assertIn(">FooLabel Bar<", s, s)


    def test_default_label_from_instance(self):
        """Default label_from_instance is unicode of instance."""
        self.F.ProductFactory(name="Bar")
        s = unicode(self.form()["product2"])

        self.assertIn(">Bar<", s, s)


    def test_choice_attrs(self):
        """Custom choice_attrs callable is used."""
        p = self.F.ProductFactory(name="Bar")
        s = unicode(self.form()["product"])

        self.assertIn('data-product-id="{0}"'.format(p.id), s, s)


    def test_set_choices(self):
        """Can set choices explicitly."""
        f = self.form()
        f.fields["product"].choices = [(1, "Foo")]
        s = unicode(f["product"])

        self.assertEqual(f.fields["product"].choices, [(1, "Foo")])
        self.assertIn(">Foo<", s, s)



class AutocompleteInputTest(MTFormsTestCase):
    """Tests for AutocompleteInput."""
    def test_autocomplete_off(self):
        """Sets autocomplete attr to "off" to disable browser autocomplete."""
        self.assertIn(
            'autocomplete="off"',
            self.mtforms.AutocompleteInput(url="foo").render("n", "")
            )


    def test_autocomplete_url(self):
        """Sets data-autocomplete-url."""
        self.assertIn(
            'data-autocomplete-url="/foo/bar/"',
            self.mtforms.AutocompleteInput(url="/foo/bar/").render("n", "")
            )


    def test_autocomplete_url_callable(self):
        """Sets data-autocomplete-url from callable url argument."""
        self.assertIn(
            'data-autocomplete-url="/foo/bar/"',
            self.mtforms.AutocompleteInput(
                url=lambda: "/foo/bar/").render("n", "")
            )



class FilteredSelectMultipleTest(MTFormsTestCase):
    """Tests for FilteredSelectMultiple."""
    def test_override_choice_template(self):
        """Can override choice_template in context at initialization."""
        fsm = self.mtforms.FilteredSelectMultiple(choice_template="foo")

        self.assertEqual(fsm.get_context_data()["choice_template"], "foo")


    def test_override_listordering_template(self):
        """Can override listordering_template in context at initialization."""
        fsm = self.mtforms.FilteredSelectMultiple(listordering_template="foo")

        self.assertEqual(fsm.get_context_data()["listordering_template"], "foo")

########NEW FILE########
__FILENAME__ = test_querystring
# coding: utf-8
"""
Tests for querystring utilities.

"""
from tests import case



class TestUpdateQueryString(case.TestCase):
    @property
    def func(self):
        from moztrap.view.utils.querystring import update_querystring
        return update_querystring


    def test_basic(self):
        self.assertEqual(
            self.func("http://fake.base/", blah="foo"),
            "http://fake.base/?blah=foo")


    def test_list(self):
        self.assertEqual(
            self.func("http://fake.base/", blah=["foo", "yo"]),
            "http://fake.base/?blah=foo&blah=yo")


    def test_override(self):
        self.assertEqual(
            self.func("http://fake.base/?blah=yo", blah="foo"),
            "http://fake.base/?blah=foo")


    def test_override_none(self):
        self.assertEqual(
            self.func("http://fake.base/?blah=yo", blah=None),
            "http://fake.base/")


    def test_basic_with_existing(self):
        self.assertEqual(
            self.func("http://fake.base/?arg=yo", blah="foo"),
            "http://fake.base/?blah=foo&arg=yo")


    def test_override_with_existing(self):
        self.assertEqual(
            self.func("http://fake.base/?arg=yo&blah=yo", blah="foo"),
            "http://fake.base/?blah=foo&arg=yo")


    def test_override_multiple(self):
        self.assertEqual(
            self.func("http://fake.base/?blah=one&blah=two", blah="foo"),
            "http://fake.base/?blah=foo")


    def test_existing_multiple(self):
        self.assertEqual(
            self.func("http://fake.base/?blah=one&blah=two", arg="foo"),
            "http://fake.base/?blah=one&blah=two&arg=foo")


    def test_intl_list(self):
        self.assertEqual(
            self.func(u"http://fake.base/?blah=ÒÒ&blah=2"),
            "http://fake.base/?blah=%C3%92%C3%92&blah=2")

    def test_intl_single(self):
        self.assertEqual(
            self.func(u"http://fake.base/?blah=ÒÒ"),
            "http://fake.base/?blah=%C3%92%C3%92")

########NEW FILE########
__FILENAME__ = vendor-manage
#!/usr/bin/env python


"""
Runs a Django management command, using the vendor library.

"""
import os, sys
from moztrap.deploy.paths import add_vendor_lib

if __name__ == "__main__":
    add_vendor_lib()

    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "moztrap.settings.default")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
