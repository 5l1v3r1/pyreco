Descriptors
===========

In the MongoKit philosophy, the structure must be simple, clear and readable.
So all descriptors (validation, requirement, default values, etc.) are
described outside of the structure. Descriptors can be combined and can apply
the same field.

required
--------

This descriptor describes the required fields::

    class MyDoc(Document):
        structure = {
            'bar': basestring,
            'foo':{
                'spam': basestring,
                'eggs': int,
            }
        }
        required = ['bar', 'foo.spam']

If you want to reach nested fields, just use the dot notation.

default_values
--------------

This descriptors allow to specify a default value at the creation of the
document::

   class MyDoc(Document):
        structure = {
            'bar': basestring,
            'foo':{
                'spam': basestring,
                'eggs': int,
            }
        }
        default_values = {'bar': 'hello', 'foo.eggs': 4}

Note that the default value must be a valid type. Again, to reach nested
fields, use dot notation.

validators
----------

This descriptor bring a validation layer to a field. It take a function which
returns a ``False`` if the validation fails, ``True`` otherwise::

    import re
    def email_validator(value):
       email = re.compile(r'(?:^|\s)[-a-z0-9_.]+@(?:[-a-z0-9]+\.)+[a-z]{2,6}(?:\s|$)',re.IGNORECASE)
       return bool(email.match(value))

    class MyDoc(Document):
       structure = {
          'email': basestring,
          'foo': {
            'eggs': int,
          }
       }
       validators = {
           'email': email_validator,
           'foo.eggs': lambda x: x > 10
       }

You can add custom message in your validators by throwing a ``ValidatorError``
instead of returning false. ::

    def email_validator(value):
       email = re.compile(r'(?:^|\s)[-a-z0-9_.]+@(?:[-a-z0-9]+\.)+[a-z]{2,6}(?:\s|$)',re.IGNORECASE)
       if not bool(email.match(value))
          raise ValidatorError('%s is not a valid email')

*Do you need to throw ValidatorError or any Exception -Ed *

Make sure to include one '%s' in the message. This will be used to describes
the failing field name.

You can also pass params to your validator by wrapping it in a class::

    class MinLengthValidator(object):
        def __init__(self, min_length):
            self.min_length = min_length

        def __call__(self, value):
            if len(value) >= self.min_length:
                return True
            else:
                raise Exception('%s must be at least ' + str(self.min_length) + ' characters long.')

    class Client(Document):
        structure = {
          'first_name': basestring
        }
        validators = { 'first_name': MinLengthValidator(2) }

In this example, ``first_name`` must contain at least 2 characters.

Adding Complex Validation
^^^^^^^^^^^^^^^^^^^^^^^^^

If the use of a validator is not enough, you can overload the validation method
to fit your needs.

Example the following document::

    class MyDoc(Document):
        structure = {
            'foo': int,
            'bar': int,
            'baz': basestring
        }

We want to be sure that before saving our object, foo is greater than bar. To
do that, we just overload the validation method::

    def validate(self, *args, **kwargs):
        assert self['foo'] > self['bar']
        super(MyDoc, self).validate(*args, **kwargs)

Skipping Validation
^^^^^^^^^^^^^^^^^^^

Once your application is ready for production and you are sure that the data is
consistent, you might want to skip the validation layer. This will make
MongoKit significantly faster (as fast as pymongo). In order to do that, just
set the ``skip_validation`` attribute to ``True``.

TIP: It is a good idea to create a ``RootDocument`` and to inherit all your
document classes from it. This will allow you to control the default behavior
of all your objects by setting attributes on the RootDocument::

    class RootDocument(Document):
        structure = {}
        skip_validation = True
        use_autorefs = True

    class MyDoc(RootDocument):
        structure = {
            'foo': int
        }

Note that you can always force the validation at any moment on saving even if
``skip_validation`` is ``True``:

>>> con.register([MyDoc]) # No need to register RootDocument as we do not instantiate it
>>> mydoc = tutorial.MyDoc()
>>> mydoc['foo'] = 'bar'
>>> mydoc.save(validate=True)
Traceback (most recent call last):
...
SchemaTypeError: foo must be an instance of int not basestring


Quiet Validation Detection
^^^^^^^^^^^^^^^^^^^^^^^^^^

By default, when validation is on, each error raises an Exception. Sometimes,
you just want to collect any errors in one place. This is possible by setting
the ``raise_validation_errors`` to False. This causes any errors to be stored
in the ``validation_errors`` attribute::

    class MyDoc(Document):
        raise_validation_errors = False
        structure = {
            'foo': set,
        }

>>> con.register([MyDoc])
>>> doc = tutorial.MyDoc()
>>> doc.validate()
>>> doc.validation_errors
{'foo': [StructureError("<type 'set'> is not an authorized type",), RequireFieldError('foo is required',)]}

``validation_errors`` is a dictionary which take the field name as key and the
python exception as value. Here foo has two issues : a structure one (``set``
is not an authorized type) and field requirement error (``foo`` is required
field but is not specified).

>>> doc.validation_errors['foo'][0].message
"<type 'set'> is not an authorized type"

Validate Keys
^^^^^^^^^^^^^

If the value of key is not known but we want to validate some deeper structure, 
we use the "$<type>" descriptor::

    class MyDoc(Document):
      structure = {
        'key': {
          unicode: {
            'first': int,
            'secondpart: {
              unicode: int
            }
          }
        }
      }

      required_fields = ["key1.$unicode.bla"]

Note that if you use a python type as a key in structure, generate_skeleton
won't be able to build the entire underlying structure :

>>> con.register([MyDoc])
>>> tutorial.MyDoc() == {'key1': {}, 'bla': None}
True

So, neither default_values nor validators will work.


# MongoKit [![Build Status](https://travis-ci.org/namlook/mongokit.png)](https://travis-ci.org/namlook/mongokit.png)

[MongoDB](http://www.mongodb.org/display/DOCS/Home) is a great schema-less document oriented database. It has a lot of drivers for many languages (python, ruby, perl, java, php...).

MongoKit is a python module that brings a structured schema and validation layer
on top of the great pymongo driver. It has been written to be as simple and light
as possible with the KISS and DRY principles in mind.

## Philosophy

MongoKit is designed to be:

 * **simple**: MongoKit uses plain python types to describe document structure
 * **fast**: MongoKit is fast but if you *really* need to be fast you have
   access to the raw pymongo layer without changing the API
 * **powerful**: MongoKit brings many features like document auto-reference, 
   custom types or i18n support.

**Your data is clean:**

> "Tools change, not data". In order to follow this "credo", MongoKit won't
> add any information into your data saved into the database.
> So if you need to use other mongo tools or ODMs in other languages, your
> data won't be polluted by MongoKit's stuff.

## Features

 * schema validation (which uses simple python types for the declaration)
 * schema-less feature
 * dot notation
 * nested and complex schema declaration
 * untyped field support
 * required fields validation
 * default values
 * custom validators
 * cross database document reference
 * random query support (which returns a random document from the database)
 * inheritance and polymorphism support
 * versionized document support (in beta stage)
 * partial auth support (it brings a simple User model)
 * operator for validation (currently : OR, NOT and IS)
 * simple web framework integration
 * import/export to json
 * i18n support
 * GridFS support
 * document migration support

Go to the full [documentation](http://github.com/namlook/mongokit/wiki)

## A quick example

Documents are enhanced python dictionaries with a `validate()` method.
A Document declaration look as follows:

```python
>>> from mongokit import *
>>> import datetime

>>> connection = Connection()

>>> @connection.register
... class BlogPost(Document):
...     structure = {
...             'title':unicode,
...             'body':unicode,
...             'author':unicode,
...             'date_creation':datetime.datetime,
...             'rank':int
...     }
...     required_fields = ['title','author', 'date_creation']
...     default_values = {'rank':0, 'date_creation':datetime.datetime.utcnow}
...
```

We establish a connection and register our objects.

```python
>>> blogpost = con.test.example.BlogPost() # this uses the database "test" and the collection "example"
>>> blogpost['title'] = u'my title'
>>> blogpost['body'] = u'a body'
>>> blogpost['author'] = u'me'
>>> blogpost
{'body': u'a body', 'title': u'my title', 'date_creation': datetime.datetime(...), 'rank': 0, 'author': u'me'}
>>> blogpost.save()
```

Saving the object will call the `validate()` method.

And you can use a more complex structure as follows:

```python
>>>  @connection.register
...  class ComplexDoc(Document):
...     __database__ = 'test'
...     __collection__ = 'example'
...     structure = {
...         "foo" : {"content":int},
...         "bar" : {
...             'bla':{'spam':int}
...         }
...     }
...     required_fields = ['foo.content', 'bar.bla.spam']
```

Please see the [tutorial](https://github.com/namlook/mongokit/wiki/Tutorial) for more examples.

Suggestions and patches are really welcome. If you find mistakes in the documentation
(English is not my primary language) feel free to contact me. You can find me (namlook)
on the freenode #mongodb irc channel or on [twitter](http://twitter.com/namlook)


## Recent Change Log

### v0.9.1

 * fixed #131 - Use PEP8 recommendation for import
 * fixed tests (thanks @JohnBrodie and @bneron)
 * Added a Makefile for running tests in venv (thanks to @gulbinas)
 * fixed pep8 error (thanks to @gulbinas)
 * added support for MongoReplicaSetClient (thanks to @inabhi9)
 * Added `__getstate__` and `__setstate__` to DotedDict and i18nDotedDict. Problems appeared here when pickling mongokit documents due to apparent lack of these functions. (thanks to @petersng)
 * Fixed english mistake and typos into the documentation (thanks to @biow0lf, @SeyZ, @gianpaj and @1123)
 * Fixed inherited queries when accessing cursor by index (thanks to @asivokon)
 * changed the namespace on schema document errors (thanks to @rtjoseph11)

### v0.9.0

 * now MongoKit requires PyMongo >= 2.5
 * find_and_modify returns None if the query fails (thanks to @a1gucis)
 * Fix off-by-one error on SchemaDocument (thanks to @John Brodie)
 * Fix inherited queries (issue #106) (thanks to @effem-git)
 * Fix for serialization of nested structures with type validation (thanks to @LK4D4)
 * Remove unnecessary path arguments in to_json._convert_to_python (thanks to @Alexandr Morozov)
 * big refactorization by using multiple inheritance for DRYness (thanks to @liyanchang)
 * Add find_fulltext method for convenience (thanks to @astronouth7303) (not official and not documented yet)
 * Allow text indexes in document definitions (thanks to @astronouth7303)
 * Adding replica set support (thanks to @liyanchang)
 * Fix typos on README (thanks to @girasquid)
 * add pagination helper (not yet documented)(thanks to @jarrodb) https://github.com/namlook/mongokit/blob/master/mongokit/paginator.py

### v0.8.3

 * allow keyword arguments (like read_preferences, slave_okay, etc) to be set in Connection (thanks to @petersng)
 * Add find_and_modify again. It was removed by an unexpected rollback.
 * use MongoClient with MasterSlaveConnection

### v0.8.2

 * fix #101 - validators condition fix
 * fix #110 - support PyMongo >= 2.4 (import MongoClient) -- thanks to @mattbodman and @zavatskiy
 * Fixed some spelling/grammar (thanks to @gekitsuu)

### v0.8.1

 * support python 2.3
 * small updates to validation messages (Merge pull request #94 from unpluggd/master)
 * Fixes formatting error when throwing MaxDocumentSizeError in Document.validate() (Merge pull request #99 from apavlo/master)
 * Fixed typo when throwing MaxDocumentSizeError in validate() (thanks to Andy Pavlo)
 * added fix for unconditional access to `__wrap on cursors (thanks to David T. Lehmann)
 * added test for `__getitem__` on cursor with undefined `__wrap` (thanks to David T. Lehmann)
 * `__getitem__` on unwrapped cursor checks if `__wrap` is None (Merge pull request #97 from dtl/fix-getitem-on-unwrapped-cursor)
 * Add .travis.yml for Travis CI (http://travis-ci.org/) (Merge pull request #96 from msabramo/travis)
 * Fixed a very minor rendering issue in the docs (Merge pull request #95 from d0ugal/master)
 * Fixed rendering issue in the docs. (thanks to Dougal Matthews)
 * tweaked the error messages in validation for missing and unknown fields to aid in debugging projects (thanks to Phillip B Oldham)

### v0.8.0

 * Add spec file for rpm-based distributions (Merge pull request #63 from linuxnow/master)
 * change document size limitation for mongodb 1.8 or later. Thanks to Aleksey Sivokon (Merge pull request #74 from key/master)
 * validation of "" for an int (Merge pull request #79 from barnybug/master)
 * Fix exception when loading documents with a custom type field missing (Merge pull request #80 from barnybug/master)
 * Big documentation restructuring made by Sean Lynch (Merge pull request #82 from sean-lynch/master)
 * Using rename no longer causes migrations throw an exception (Merge pull request #86 from matthewh/master)
 * Some test is modified and added tox (Merge pull request #91 from aircastle/modifiytest)
 * Replace pymongo.objectid with bson.objectid (Merge pull request #88 from behackett/master)
 * Added Support for additional keyword-arguments for index-creation (Merge pull request #85 from mfelsche/master)
 * Remove anyjson dependency and use builtin json instead

Thank you all for all your patches !

### v0.7.2

 * add inherited queries support (please see http://github.com/namlook/mongokit/wiki/Inherited-queries for more details)


### v0.7.1

 * change MongokitMasterSlaveConnection to MasterSlaveConnection for consistency
 * fix #57 -- support pymongo > 1.9 in grid.py
 * fix #45 -- remove automatic index creation
 * fix #43 -- slicing a cursor should return a mongokit document, not dict
 * Dont try to convert None struct to json (patch from @mLewisLogic thanks !)
 * fix schemaless issue (thanks to Mihai Pocorschi for reporting it)

### v0.7

 * add `use_schemaless` feature ! please see the documentation for more information
 * Add equality test for mongokit operators (thanks to @allancaffee)
    This allows developers to write unit tests on the structure
    of their document classes when operators are used
 * roll back find_and_modify for master branch (need pymongo 1.10 for that)
 * many documentation fixes
 * fix #55 -- Bug in VersionedDocument remove() method
 * fix #53 -- Fixed a few spelling errors in README
 * fix #52 -- Advanced bulk migration docs example is broken
 * fix #51 -- pymongo.dbref is deprecated, use bson.dbref instead
 * fix #49 -- Can't specify default values for lists of embedded objects
 * fix #48 -- uuid.UUID support
 * fix #41 -- add basestring to authorized types
 * fix #40 -- Made some enhancements
 * fix #39 -- KeyError when saving partially loaded documents
 * fix #34 -- add find_and_modify method to Document
 * fix #32 -- allow the structure to be empty (was: document.to_json())
 * fix #24 -- Don't handle `__database__` and `__collection__` attributes for virtual documents

