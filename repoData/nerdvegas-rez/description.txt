
Run the script './run_demo'.

It sets the rez package search path and install path to ./build/published_packages, builds
and installs a set of packages, and then tests them. See './run_demo' for more details.

Some of the example packages in this demo (under ./packages) contain multiple versions.
These are analogous in the real world to multiple versions from a repository, such as svn
or git.




The directories in here are rez packages that expose some common third-party software to
the rez system, so they can be used by your own packages.

Each contains an 'ext' file somewhere. This should be changed into a symlink, pointing at
the relevant software on your system. The intent is that rez does not influence where you
actually have your 3rd party software installed... you might want this to be in a different
place to your rez packages.

Any 3rd party software that you need to add to rez but isn't here, should be reasonably
trivial to add. You just have to make the relevant dirs, symlink and files by hand
(package.yaml, and .cmake if it's a library). The user manual has instructions on how to
do this.

If you want to use any of these supplied packages, you just need to copy them into your
nominated package deployment directory (whos path will be listed in REZ_PACKAGES_PATH, and 
whos value was set by the "packages_path" entry in configure.sh), and then change 'ext' to 
a symlink as mentioned above.

Ideally sometime in the future there will be some kind of 'rez' file format, and a rez
package installer utility, for interfacing 3rd party software with rez more easily.



demo:
----------------------
Contains a script which builds and installs a set of packages and then tests them,
illustrating rez at work in a sandbox area.

package_repository:
----------------------
A set of rez packages for common third party software. See the README in that dir for more details.


##########################################################################################
# INFO
##########################################################################################

Rez:
A set of tools for resolving environment configurations and building projects within
these environments. Rez searches for 'packages' (pieces of software) in the colon-delimited
env-var '$REZ_PACKAGES_PATH'. With rez you can request a set of packages, and it will
return you all the packages that you need, or an equivalent configured environment. Rez has
a resolution algorithm that avoids package version clashes.

Original Author:
Allan Johns, 2010
nerdvegas@googlemail.com
Dr D Studios, Sydney, Australia

Forked and Modified by:
Morn√© Chamberlain, 2012
morne@blackginger.tv
BlackGinger, Cape Town, South Africa

Rez has been tested on Linux Centos5, and to a lesser extent on OSX. Rez is not supported
on Windows (yet), but volunteers are welcome!

rez requires:
bash
cmake (2.8 or greater)
a C++ compiler (it will use cmake to detect one)
python (2.5 or greater)
pyyaml (tested with 3.9.0)
pydot (tested with 1.0.2)
pyparsing (tested with 1.5.1)

rez-release requires:
svn (tested with svn client 1.6.6)
pysvn (tested with 1.7.2)

rez-release-git requires:
git (tested with 1.7.2.3)
GitPython (tested with 0.3.2-RC1)

##########################################################################################
# INSTALLATION
##########################################################################################

Open the configure.sh script first, and edit the relevant entries in the "EDIT HERE" section.
This points rez at various paths (for example, python paths for pyyaml etc). It will attempt
to autodetect what it can, but you'll probably need to set these to something (and you HAVE
to set the first entry to something).

After editing configure.sh and running it successfully, run install.sh, specifying the
install location. Rez will be installed at that path, plus a version directory. Rez's
version is determined by the contents of the version.sh file.

Rez will automatically build you a number of key packages - one representing the operating
system; one for cmake; one for python; one for a C++ compiler, and one example hello_world
package. Some of these may not be exactly what you want, it's up to you to create and use
your own packages instead.


##########################################################################################
# RUNNING REZ
##########################################################################################

Once installed, you need to initialize the rez system by sourcing its init.sh file, which
has been installed alongside all the other rez source. It's typical to do this in a
startup script (eg ~/.bashrc), so that rez is always available to users.

You can test the system by running the demo (./examples/demo/run_demo.sh), but you do need
to configure rez first, as explained above. The demo creates its own rez microcosm, setting
a local packages path, and building and installing a set of test packages into it.

There are further READMEs scattered through the distribution, refer to them for more info.


##########################################################################################
# DOCUMENTATION
##########################################################################################

There are a lot of docs in the docs/ subdir, including the technical user manual. You
should read this sooner rather than later to like, learn things and stuff.

There are Rez tutorial videos available also, at the time of writing they're probably on
Vimeo or Youtube, and there may be a zipped download available from the same place you got
this Rez thing from.

When building packages you'll need to know about rez's cmake macros. All rez's supporting
cmake code can be found in the cmake/ subdir, and every source file contains a block
comment at the top detailing its use.

The vast majority of rez's command-line utilities will show a fair bit of help like so:
rez-config -h


Happy Rezzing!















%(USER)s has not written any documentation yet! {#mainpage}
============
\image html "%(REZ_PATH)s/template/project_types/feelbad.jpg"


Markdown examples (this is an h3 header)
============

Paragraphs are separated by a blank line. This first paragraph should be some detailed description
of your project, outlining what it does, why it exists and possibly what other packages it 
interacts with. It's a good idea to take some time to write this introduction, since it not only
helps others understand your project, but also helps you keep the project focussed on its original
goals. Well-defined software is easier to maintain and to understand than software that creeps.

2nd paragraph. *Italic*, **bold**, `monospace`. Itemized lists
look like:

  * this one
  * that one
  * the other one


An h2 header
------------

Here's a numbered list:

 1. first item
 2. second item
 3. third item

Here's a code sample:

~~~
define foobar() {
    print "Welcome to flavour country!";
}
~~~

And here's an even better code sample, with syntax highlighting:

~~~{.python}
import time
# Quick, count to ten!
for i in range(10):
    # (but not *too* quick)
    time.sleep(0.5)
    print i
~~~


### An h3 header ###

Here is a nested list, showing a list within a list, and a code block within a list:

 1. First, get these ingredients:

      * carrots
      * celery
      * lentils

 2. Boil some water.

 3. Dump everything in the pot and follow
    this algorithm:

        find wooden spoon
        uncover pot
        stir
        cover pot
        balance wooden spoon precariously on pot handle
        wait 10 minutes
        goto first step (or shut off burner when done)

    Do not bump wooden spoon or it will fall.

Here is some inline HTML:
<table border="1">
<tr>
<th>Header 1</th>
<th>Header 2</th>
</tr>
<tr>
<td>row 1, cell 1</td>
<td>row 1, cell 2</td>
</tr>
<tr>
<td>row 2, cell 1</td>
<td>row 2, cell 2</td>
</tr>
</table> 


### Final Notes ###

Don't just leave this example document here as your mainpage, otherwise your documentation is bad,
and you should feel bad. Woopwoopwoopwoopwoop!

