__FILENAME__ = demo
#!/bin/env python
#-*- coding: utf-8 -*-

"""
Demo script. Run:

python.exe demo.py
"""

from __future__ import absolute_import, division, print_function, unicode_literals

import logging
import os
import re

logging.basicConfig()

from django.conf import settings, global_settings
from django.conf.urls import patterns, url
from django.core.wsgi import get_wsgi_application
from django.utils.timezone import now as tznow

basename = os.path.splitext(os.path.basename(__file__))[0]


def rel(*path):
    return os.path.abspath(
        os.path.join(os.path.dirname(__file__), *path)
    ).replace("\\", "/")


if not settings.configured:
    settings.configure(
        DEBUG=True,
        TEMPLATE_DEBUG=True,
        TIMEZONE="UTC",
        DATABASES={},
        INSTALLED_APPS=[
            "django.contrib.staticfiles",
            "easy_pjax"
        ],
        MIDDLEWARE_CLASSES=[
            "easy_pjax.middleware.UnpjaxMiddleware"
        ],
        TEMPLATE_DIRS=[rel("tests", "templates", "demo")],
        TEMPLATE_CONTEXT_PROCESSORS=
            global_settings.TEMPLATE_CONTEXT_PROCESSORS +
            ("django.core.context_processors.request",),
        STATICFILES_DIRS=[rel("tests", "static")],
        STATIC_ROOT=rel("tests", "static"),
        STATICFILES_FINDERS=[
            "django.contrib.staticfiles.finders.FileSystemFinder",
            "django.contrib.staticfiles.finders.AppDirectoriesFinder",
        ],
        STATIC_URL="/static/",
        ROOT_URLCONF=basename,
        WSGI_APPLICATION="{}.application".format(basename),
    )

from django.views.generic import TemplateView


class HelloView(TemplateView):
    template_name = "index.html"
    page_name = "Hi There!"

    def get_context_data(self, **kwargs):
        return super(HelloView, self).get_context_data(
            today=tznow(),
            page_name=self.page_name,
            **kwargs
        )

urlpatterns = patterns("",
    url(r"^$", HelloView.as_view(), name="index"),
    url(r"^page-1$", HelloView.as_view(page_name="Page 1"), name="page-1"),
    url(r"^page-2$", HelloView.as_view(page_name="Page 2"), name="page-2"),
    url(r"^%s(?P<path>.*)$" % re.escape(settings.STATIC_URL.lstrip("/")),
        "django.views.static.serve", kwargs=dict(document_root=settings.STATIC_ROOT))
)

application = get_wsgi_application()

if __name__ == "__main__":
    from django.core.management import call_command
    call_command("runserver", "8000")

########NEW FILE########
__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-easy-pjax documentation build configuration file, created by
# sphinx-quickstart on Sun Jan 12 20:56:38 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import datetime
import jinja2.filters

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

cwd = os.path.abspath(os.path.dirname(__file__))
parent = os.path.dirname(cwd)
ext = os.path.join(cwd, "_ext")
sys.path.extend([parent, ext])

import django.conf
django.conf.settings.configure()

import easy_pjax

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['djangodocs', 'sphinx.ext.autodoc', 'sphinx.ext.intersphinx']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'django-easy-pjax'
copyright = jinja2.filters.do_mark_safe('%s, <a href="http://en.ig.ma/">Filip Wasilewski</a>' % datetime.date.today().year)

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = easy_pjax.__version__
# The full version, including alpha/beta/rc tags.
release = easy_pjax.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
modindex_common_prefix = [
    "easy_pjax."
]

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.

try:
    import sphinx_rtd_theme
    html_theme = 'sphinx_rtd_theme'
    html_theme_path = [
        os.path.abspath(os.path.join(os.path.dirname(__file__), "_templates")),
        sphinx_rtd_theme.get_html_theme_path()
    ]
except ImportError:
    html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-easy-pjaxdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'django-easy-pjax.tex', u'django-easy-pjax Documentation',
   u'Filip Wasilewski', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-easy-pjax', u'django-easy-pjax Documentation',
     [u'Filip Wasilewski'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'django-easy-pjax', u'django-easy-pjax Documentation',
   u'Filip Wasilewski', 'django-easy-pjax', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

# Links to Python's docs should reference the most recent version of the 2.x
# branch, which is located at this URL.
intersphinx_mapping = {
    'python': ('http://docs.python.org/', None),
    'sphinx': ('http://sphinx-doc.org/', None),
    'django': ('http://docs.djangoproject.com/en/1.6/', 'http://docs.djangoproject.com/en/1.6/_objects/'),
}

# Python's docs don't change every week.
intersphinx_cache_limit = 2  # days

autodoc_member_order = 'bysource'
autodoc_default_flags = ['undoc-members']

########NEW FILE########
__FILENAME__ = djangodocs
def setup(app):
    app.add_crossref_type(
        directivename = "setting",
        rolename = "setting",
        indextemplate = "pair: %s; setting",
    )

########NEW FILE########
__FILENAME__ = middleware
#-*- coding: utf-8 -*-

from __future__ import absolute_import, division, print_function, unicode_literals

from django.http import QueryDict


class UnpjaxMiddleware(object):
    """
    Removes the `_pjax` parameter from query string
    """

    def process_request(self, request):
        if "_pjax" in request.META.get("QUERY_STRING", ""):
            qs = QueryDict(request.META.get("QUERY_STRING", ""),
                           encoding=request.encoding, mutable=True)
            qs.pop("_pjax", None)
            request.META["QUERY_STRING"] = qs.urlencode()

########NEW FILE########
__FILENAME__ = models
#-*- coding: utf-8 -*-

from __future__ import absolute_import, division, print_function, unicode_literals

########NEW FILE########
__FILENAME__ = pjax_tags
#-*- coding: utf-8 -*-

from __future__ import absolute_import, division, print_function, unicode_literals

from django import template
from django.http import QueryDict

# Note: this file is automatically added to Django template builtins
# by the easy_pjax.__init__ module.

register = template.Library()


@register.filter_function
def pjax(template_names, request, default="pjax_base.html"):
    """
    Returns template name for request.

    :param request: Django request or boolean value
    :param template_names: Base theme name or comma-separated names of base and
      pjax templates.

    Examples::

        {% extends "base.html"|pjax:request %}
        {% extends "base.html,pjax_base.html"|pjax:request %}

        context = {"is_pjax": True}
        {% extends "base.html"|pjax:is_pjax %}
    """
    if isinstance(request, (bool, int)):
        is_pjax = request
    else:
        is_pjax = request.META.get("HTTP_X_PJAX", False)
    
    if "," in template_names:
        template_name, pjax_template_name = template_names.split(",", 1)
    else:
        template_name, pjax_template_name = template_names, default

    if is_pjax:
        return pjax_template_name.strip() or default
    return template_name.strip()


@register.filter_function
def unpjax(url):
    """
    Removes `_pjax` param from query string of a given url::

        <a href="{{ request.get_full_path|unpjax }}"></a>
    """
    if "?" in url:
        base, qs = url.split("?", 1)
        if "_pjax" in qs:
            qs = QueryDict(qs, mutable=True)
            qs.pop("_pjax", None)
            qs = qs.urlencode()
            if qs:
                return base + "?" + qs
            return base
    return url

########NEW FILE########
__FILENAME__ = run_tests
#-*- coding: utf-8 -*-

import os
import sys
from optparse import OptionParser

from django.conf import settings, global_settings


def rel(*path):
    return os.path.abspath(
        os.path.join(os.path.dirname(__file__), *path)
    ).replace("\\", "/")


if not settings.configured or not os.environ.get("DJANGO_SETTINGS_MODULE"):
    settings.configure(
        DEBUG=False,
        USE_TZ=True,
        DATABASES={
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
            }
        },
        INSTALLED_APPS=[
            "easy_pjax",
            "tests",
        ],
        TEMPLATE_CONTEXT_PROCESSORS=
        global_settings.TEMPLATE_CONTEXT_PROCESSORS +
        ("django.core.context_processors.request",),
        ROOT_URLCONF="tests.urls",
    )

from django.test.utils import get_runner


def run_tests(verbosity, interactive, failfast, test_labels):
    if not test_labels:
        test_labels = ["tests"]

    if not hasattr(settings, "TEST_RUNNER"):
        settings.TEST_RUNNER = "django.test.runner.DiscoverRunner"
    TestRunner = get_runner(settings)

    test_runner = TestRunner(
        verbosity=verbosity,
        interactive=interactive,
        failfast=failfast
    )

    failures = test_runner.run_tests(test_labels)
    if failures:
        sys.exit(bool(failures))


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("--failfast", action="store_true",
                      default=False, dest="failfast")
    parser.add_option("--verbosity", action="store",
                      default=1, type=int, dest="verbosity")
    (options, args) = parser.parse_args()
    run_tests(options.verbosity, options.failfast, False, args)

########NEW FILE########
__FILENAME__ = models
#-*- coding: utf-8 -*-

from __future__ import absolute_import, division, print_function, unicode_literals

########NEW FILE########
__FILENAME__ = tests
#-*- coding: utf-8 -*-

from __future__ import absolute_import, division, print_function, unicode_literals

from django.conf import settings
from django.test.testcases import TestCase
from django.test.client import RequestFactory, Client


class UnpjaxMiddlewareTestCase(TestCase):
    def test_without_middleware(self):
        response = self.client.get("/unpjax/?param=1")
        content = response.content.decode(response._charset)
        self.assertHTMLEqual('<a href="/unpjax/?param=1"></a>', content)

        response = self.client.get("/unpjax/?param=1&_pjax=true", HTTP_X_PJAX=True)
        content = response.content.decode(response._charset)
        self.assertHTMLEqual('<a href="/unpjax/?param=1&_pjax=true"></a>',
                             content)

    def test_with_middleware(self):
        MIDDLEWARE_CLASSES = settings.MIDDLEWARE_CLASSES +\
                             ("easy_pjax.middleware.UnpjaxMiddleware",)

        with self.settings(MIDDLEWARE_CLASSES=MIDDLEWARE_CLASSES):
            client = Client()

            response = client.get("/unpjax/?param=1")
            content = response.content.decode(response._charset)
            self.assertHTMLEqual('<a href="/unpjax/?param=1"></a>', content)

            response = client.get("/unpjax/?param=1&_pjax=true", HTTP_X_PJAX=True)
            content = response.content.decode(response._charset)
            self.assertHTMLEqual('<a href="/unpjax/?param=1"></a>', content)


class UnpjaxFilterTestCase(TestCase):
    def test_regular_request(self):
        response = self.client.get("/unpjax-filter/?param=1")
        content = response.content.decode(response._charset)
        self.assertHTMLEqual('<a href="/unpjax-filter/?param=1"></a>',
                             content)

    def test_pjax_request(self):
        response = self.client.get("/unpjax-filter/?param=1&_pjax=true",
            HTTP_X_PJAX=True)
        content = response.content.decode(response._charset)
        self.assertHTMLEqual('<a href="/unpjax-filter/?param=1"></a>',
                             content)


class TemplateFilterChoiceTestCase(TestCase):
    regular_url = "/simple/?param=1"
    pjax_url = "/simple/?param=1&_pjax=true"

    def setUp(self):
        self.rf = RequestFactory()

    def build_regular_request(self):
        return self.rf.get(self.regular_url)

    def build_pjax_request(self):
        return self.rf.get(self.pjax_url, HTTP_X_PJAX=True)

    def test_template_choice_filter_with_request(self):
        from easy_pjax.templatetags.pjax_tags import pjax

        assert pjax("base.html", self.build_pjax_request()) == "pjax_base.html"
        assert pjax("base.html", self.build_regular_request()) == "base.html"

    def test_template_choice_filter_with_template_params(self):
        from easy_pjax.templatetags.pjax_tags import pjax

        assert pjax("base.html,other_pjax.html",
            self.build_pjax_request()) == "other_pjax.html"
        assert pjax("base.html", self.build_regular_request()) == "base.html"

    def test_template_choice_filter_with_flag(self):
        from easy_pjax.templatetags.pjax_tags import pjax

        assert pjax("base.html", True) == "pjax_base.html"
        assert pjax("base.html", False) == "base.html"


class SimpleTemplateChoiceTestCase(TestCase):
    regular_url = "/simple/?param=1"
    pjax_url = "/simple/?param=1&_pjax=true"

    def test_regular_request(self):
        resp = self.client.get(self.regular_url)
        self.assertTemplateUsed(resp, "base.html")
        self.assertTemplateNotUsed(resp, "pjax_base.html")
        self.assertContains(resp, "<div>Sample page structure</div>")
        self.assertContains(resp, "<title>Hello</title>")
        self.assertContains(resp, "<h1>Hi There!</h1>")

    def test_pjax_request(self):
        resp = self.client.get(self.pjax_url, HTTP_X_PJAX=True)
        self.assertTemplateNotUsed(resp, "base.html")
        self.assertTemplateUsed(resp, "pjax_base.html")
        self.assertNotContains(resp, "<div>Sample page structure</div>")
        self.assertContains(resp, "<title>Hello</title>")
        self.assertContains(resp, "<h1>Hi There!</h1>")


class TupleTemplateChoiceTestCase(SimpleTemplateChoiceTestCase):
    regular_url = "/tuple/?param=1"
    pjax_url = "/tuple/?param=1&_pjax=true"

########NEW FILE########
__FILENAME__ = urls
#-*- coding: utf-8 -*-

from __future__ import absolute_import, division, print_function, unicode_literals

from django.conf.urls import patterns, url
from django.views.generic.base import TemplateView

urlpatterns = patterns("",
    url(r"^simple/", TemplateView.as_view(template_name="site_base.html")),
    url(r"^tuple/$", TemplateView.as_view(template_name="site_base2.html")),
    url(r"^unpjax/", TemplateView.as_view(template_name="unpjax_middleware.html")),
    url(r"^unpjax-filter/", TemplateView.as_view(template_name="unpjax_filter.html")),
)

########NEW FILE########
