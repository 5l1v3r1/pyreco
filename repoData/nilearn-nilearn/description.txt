===========================================
NILEARN: neuroimaging with the scikit-learn
===========================================

This repository contains code and documentation to use the scikit-learn
( http://scikit-learn.org ) for neuroimaging data analysis. The only
requirements are scikit-learn and nibabel ( http://nipy.org/nibabel ), as
well as their dependencies (numpy, scipy and matplotlib).

The code comes with fully-runnable examples that download the data
required from Internet.

License
--------

As indicated in the COPYING file, all the code and documentation is
BSD-licensed.

=====================================
numpydoc -- Numpy's Sphinx extensions
=====================================

Numpy's documentation uses several custom extensions to Sphinx.  These
are shipped in this ``numpydoc`` package, in case you want to make use
of them in third-party projects.

The following extensions are available:

  - ``numpydoc``: support for the Numpy docstring format in Sphinx, and add
    the code description directives ``np-function``, ``np-cfunction``, etc.
    that support the Numpy docstring syntax.

  - ``numpydoc.traitsdoc``: For gathering documentation about Traits attributes.

  - ``numpydoc.plot_directives``: Adaptation of Matplotlib's ``plot::``
    directive. Note that this implementation may still undergo severe
    changes or eventually be deprecated.

  - ``numpydoc.only_directives``: (DEPRECATED)

  - ``numpydoc.autosummary``: (DEPRECATED) An ``autosummary::`` directive.
    Available in Sphinx 0.6.2 and (to-be) 1.0 as ``sphinx.ext.autosummary``,
    and it the Sphinx 1.0 version is recommended over that included in
    Numpydoc.


numpydoc
========

Numpydoc inserts a hook into Sphinx's autodoc that converts docstrings
following the Numpy/Scipy format to a form palatable to Sphinx.

Options
-------

The following options can be set in conf.py:

- numpydoc_use_plots: bool

  Whether to produce ``plot::`` directives for Examples sections that
  contain ``import matplotlib``.

- numpydoc_show_class_members: bool

  Whether to show all members of a class in the Methods and Attributes
  sections automatically.

- numpydoc_edit_link: bool  (DEPRECATED -- edit your HTML template instead)

  Whether to insert an edit link after docstrings.

.. -*- mode: rst -*-

nilearn
=======

This projects contains a tutorial on how to process functional Magnetic Resonance Imaging (fMRI) data with the scikit-learn.

This work is made available by the INRIA Parietal Project Team and the
scikit-learn folks, among which P. Gervais, A. Abraham, V. Michel, A.
Gramfort, G. Varoquaux, F. Pedregosa and B. Thirion.

Important links
===============

- Official source code repo: https://github.com/nilearn/nilearn/
- HTML documentation (stable release): http://nilearn.github.com/

Dependencies
============

The required dependencies to sue the software are Python >= 2.6,
setuptools, Numpy >= 1.3, SciPy >= 0.7, Scikit-learn >= 0.12.1
This configuration almost matches the Ubuntu 10.04 LTS release from
April 2010, except for scikit-learn, which must be installed separately.

Running the examples requires matplotlib >= 0.99.1

If you want to run the tests, you need recent python-coverage and python-nose.
(resp. 3.6 and 1.2.1).


Install
=======

This package uses distutils, which is the default way of installing
python modules. To install in your home directory, use::

  python setup.py install --user

To install for all users on Unix/Linux::

  python setup.py build
  sudo python setup.py install


Development
===========

Code
----

GIT
~~~

You can check the latest sources with the command::

    git clone git://github.com/nilearn/nilearn

or if you have write privileges::

    git clone git@github.com:nilearn/nilearn



General-purpose and introductory examples for neuroimaging with the 
scikit-learn.

