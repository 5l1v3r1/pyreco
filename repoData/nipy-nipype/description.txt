======================
 Nipype Documentation
======================

This directory contains the documentation for the Nipype_ project.
The documentation is written in reST_ (reStructuredText) and uses
Sphinx_ to render html documentation from the rst source files.

A relatively recent version of Sphinx_ is required to build the
documentation, at least 0.6.x.

Use the ``Makefile`` to build the documentation.  Common commands:

Discover available make targets::

  make help

Clean up previous build::
  
  make clean

Build html documentation::

  make html





===================
 Sphinx Extensions
===================

We've copied these sphinx extensions over from nipy-core.  Any edits
should be done upstream in nipy-core, not here in nipype!

These a are a few sphinx extensions we are using to build the nipy
documentation.  In this file we list where they each come from, since we intend
to always push back upstream any modifications or improvements we make to them.

* From numpy:
  * numpy_ext

* From ipython
  * ipython_console_highlighting

A dataset for use with these scripts can be downloaded from the nipype
website. At the time of writing, it's at:

http://nipy.sourceforge.net/nipype/users/pipeline_tutorial.html

This directory contains useful matlab scripts.


This directory is meant to contain fixes to external packages, such as scipy, numpy
that are meant to eventually be moved upstream to these packages.

When these changes find their way upstream and are released,
they can be deleted from the "fixes" directory when new versions of
NIPY are released.

PACKAGES/MODULES:
---------
scipy/stats_models: corresponds to module "scipy.stats.models"
This directory contains empty, dummy files which are meant to be used
in the doctests of nipype.  For verion 0.3 of nipype, we're using
Traits and for input files, the code checks to confirm the assigned
files actually exist.  It doesn't matter what the files are, or even
if they contain "real data", only that they exist.  Again, these files
are only meant to serve as documentation in the doctests.
The numpytesting directory contains a copy of all the files from
numpy/testing for numpy version 1.3.  This provides all the test
integration with the nose test framework we need to run the nipype
tests.  By including these files, nipype can now run on systems that
only have numpy 1.1, like Debian Lenny.  This feature was added by
Yaroslav Halchenko.

==================
 Nipype Utilities
==================

This directory contains various utilities used in nipype.  Some of
them have been copied from nipy.  Any changes to these should be done
upstream.

* From nipy:
  * onetime.py
  * tmpdirs.py

========================================================
NIPYPE: Neuroimaging in Python: Pipelines and Interfaces
========================================================

.. image:: https://travis-ci.org/nipy/nipype.png?branch=master
  :target: https://travis-ci.org/nipy/nipype

.. image:: https://coveralls.io/repos/nipy/nipype/badge.png
  :target: https://coveralls.io/r/nipy/nipype


Current neuroimaging software offer users an incredible opportunity to
analyze data using a variety of different algorithms. However, this has
resulted in a heterogeneous collection of specialized applications
without transparent interoperability or a uniform operating interface.

*Nipype*, an open-source, community-developed initiative under the
umbrella of NiPy, is a Python project that provides a uniform interface
to existing neuroimaging software and facilitates interaction between
these packages within a single workflow. Nipype provides an environment
that encourages interactive exploration of algorithms from different
packages (e.g., SPM, FSL, FreeSurfer, AFNI, Slicer), eases the
design of workflows within and between packages, and reduces the
learning curve necessary to use different packages. Nipype is creating a
collaborative platform for neuroimaging software development in a
high-level language and addressing limitations of existing pipeline
systems.

*Nipype* allows you to:

* easily interact with tools from different software packages
* combine processing steps from different software packages
* develop new workflows faster by reusing common steps from old ones
* process data faster by running it in parallel on many cores/machines
* make your research easily reproducible
* share your processing workflows with the community

Documentation
-------------

Please see the ``doc/README.txt`` document for information on our
documentation.

Website
-------

Information specific to NIPYPE is located here::
	    
    http://nipy.org/nipype


Mailing Lists
-------------

For core NIPYPE related issues, please see the developer's list here::
       
       http://projects.scipy.org/mailman/listinfo/nipy-devel

For user NIPYPE related issues, please see the user's list here::

       http://groups.google.com/group/nipy-user

For NIPYPE related issues, please add *NIPYPE* to the subject line


NIPYPE structure
----------------

Currently NIPYPE consists of the following files and directories:

  INSTALL
    NIPYPE prerequisites, installation, development, testing, and 
    troubleshooting.

  README
    This document.

  THANKS
    NIPYPE developers and contributors. Please keep it up to date!!

  LICENSE
    NIPYPE license terms.

  doc/
    Sphinx/reST documentation

  examples/

  nipype/
    Contains the source code.

  setup.py
    Script for building and installing NIPYPE.

License information
-------------------

We use the 3-clause BSD license; the full license is in the file ``LICENSE`` in
the nipype distribution.

There are interfaces to some GNU code but these are entirely optional.

All trademarks referenced herein are property of their respective
holders.

Copyright (c) 2009-2014, NIPY Developers
All rights reserved.

==============
 Nipype Tools
==============

This directory contains various tools used by the nipype developers.
Only install tools here that are unique to the nipype project.  Any
tools shared with our parent project, nipy, should go in the
nipy/tools directory.

Exceptions
----------

* apigen.py: This is not importable from nipy, so I copied it.
* build_modref_templates.py: This was copied and modified to work with nipype.


