__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Django Social Auth documentation build configuration file, created by
# sphinx-quickstart on Sun Mar 20 23:07:14 2011.
#
# This file is execfile()d with the current directory set to its containing
# dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx',
              'sphinx.ext.todo', 'sphinx.ext.viewcode']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Django Social Auth'
copyright = u'2011, Matías Aguirre'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
#version = '0.6.0'
# The full version, including alpha/beta/rc tags.
#release = '0.6.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output --------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'DjangoSocialAuthdoc'


# -- Options for LaTeX output -------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass
# [howto/manual]).
latex_documents = [
  ('index', 'DjangoSocialAuth.tex', u'Django Social Auth Documentation',
   u'Matías Aguirre', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output -------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'djangosocialauth', u'Django Social Auth Documentation',
     [u'Matías Aguirre'], 1)
]


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'http://docs.python.org/': None}

########NEW FILE########
__FILENAME__ = facebook
from django.conf import settings
from django.contrib.auth import BACKEND_SESSION_KEY
from django.contrib.auth.models import AnonymousUser
from django.http import HttpResponse
from django.shortcuts import render_to_response
from django.template.context import RequestContext

from django.views.decorators.csrf import csrf_exempt
from django.core.cache import cache

from social_auth.models import UserSocialAuth
from social_auth.views import complete as social_complete
from social_auth.backends.facebook import FacebookBackend


def is_complete_authentication(request):
    return request.user.is_authenticated() and \
           FacebookBackend.__name__ in request.session.get(
                BACKEND_SESSION_KEY, ''
            )


def get_access_token(user):
    key = str(user.id)
    access_token = cache.get(key)

    # If cache is empty read the database
    if access_token is None:
        try:
            social_user = user.social_user if hasattr(user, 'social_user') \
                          else UserSocialAuth.objects.get(
                                  user=user.id, provider=FacebookBackend.name
                               )
        except UserSocialAuth.DoesNotExist:
            return None

        if social_user.extra_data:
            access_token = social_user.extra_data.get('access_token')
            expires = social_user.extra_data.get('expires')

            cache.set(key, access_token, int(expires) if expires is not None
                                                       else 0)
    return access_token


# Facebook decorator to setup environment
def facebook_decorator(func):
    def wrapper(request, *args, **kwargs):
        user = request.user

        # User must me logged via FB backend in order to ensure we talk about
        # the same person
        if not is_complete_authentication(request):
            try:
                user = social_complete(request, FacebookBackend.name)
            except ValueError:
                pass  # no matter if failed

        # Not recommended way for FB, but still something we need to be aware
        # of
        if isinstance(user, HttpResponse):
            kwargs.update({'auth_response': user})
        else:  # Need to re-check the completion
            if is_complete_authentication(request):
                kwargs.update({'access_token': get_access_token(request.user)})
            else:
                request.user = AnonymousUser()

        signed_request = FacebookBackend().load_signed_request(
            request.REQUEST.get('signed_request', '')
        )
        if signed_request:
            kwargs.update({'signed_request': signed_request})

        return func(request, *args, **kwargs)

    return wrapper


@csrf_exempt
@facebook_decorator
def facebook_view(request, *args, **kwargs):
    # If there is a ready response just return it. Not recommended though.
    auth_response = kwargs.get('auth_response')
    if auth_response:
        return auth_response
    return render_to_response('facebook.html', {
        'fb_app_id': getattr(settings, 'FACEBOOK_APP_ID', None),
         'warning': request.method == 'GET'
    }, RequestContext(request))

########NEW FILE########
__FILENAME__ = models
# Define a custom User class to work with django-social-auth
from django.db import models


class CustomUserManager(models.Manager):
    def create_user(self, username, email):
        return self.model._default_manager.create(username=username)


class CustomUser(models.Model):
    username = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)

    objects = CustomUserManager()

    def is_authenticated(self):
        return True

########NEW FILE########
__FILENAME__ = odnoklassniki
# -*- coding:utf-8 -*-
from django.conf import settings
from django.contrib.auth import BACKEND_SESSION_KEY, logout
from django.contrib.auth.models import AnonymousUser
from django.http import HttpResponse
from django.shortcuts import redirect
from django.views.generic.base import TemplateView
from social_auth.views import complete

SANDBOX_URL = 'http://api-sandbox.odnoklassniki.ru:8088/sandbox/protected/application/launch.do?appId={0:s}&userId=0'
class OdnoklassnikiInfo(TemplateView):
    template_name = 'odnoklassniki_info.html'
    
    def get(self, *args, **kwargs):
        if hasattr(settings, 'ODNOKLASSNIKI_APP_ID'):
            return redirect(SANDBOX_URL.format(settings.ODNOKLASSNIKI_APP_ID))
        else:
            return super(OdnoklassnikiInfo, self).get(*args, **kwargs)
    
ok_app_info = OdnoklassnikiInfo.as_view()

class OdnoklassnikiApp(TemplateView):
    template_name = 'odnoklassniki.html'
    
    def get(self, request, *args, **kwargs):
        result = None
        if request.GET.get('apiconnection', None):
            if request.user.is_authenticated() and 'OdnoklassnikiAppBackend' not in request.session.get(BACKEND_SESSION_KEY, ''):
                logout(request)
            result = complete(request, 'odnoklassnikiapp')
        if isinstance(result, HttpResponse):
            return result
        else:
            if not request.user.is_authenticated() or 'OdnoklassnikiAppBackend' not in request.session.get(BACKEND_SESSION_KEY, ''):
                request.user = AnonymousUser()
        
        context = self.get_context_data(params=kwargs)
        return self.render_to_response(context)
    
ok_app = OdnoklassnikiApp.as_view()
########NEW FILE########
__FILENAME__ = pipeline
from django.http import HttpResponseRedirect


def redirect_to_form(strategy, user=None, *args, **kwargs):
    if not strategy.session_get('saved_username') and user is None:
        return HttpResponseRedirect('/form/')


def username(strategy, user=None, *args, **kwargs):
    if user:
        username = user.username
    else:
        username = strategy.session_get('saved_username')
    return {'username': username}


def redirect_to_form2(strategy, *args, **kwargs):
    if strategy.session_get('saved_first_name'):
        return HttpResponseRedirect('/form2/')


def first_name(strategy, *args, **kwargs):
    if strategy.session_get('saved_first_name'):
        user = kwargs['user']
        user.first_name = strategy.session_get('saved_first_name')
        user.save()

########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponseRedirect
from django.contrib.auth import logout as auth_logout
from django.contrib.auth.decorators import login_required
from django.template import RequestContext
from django.shortcuts import render_to_response, redirect
from django.contrib.messages.api import get_messages

from social_auth import __version__ as version


def home(request):
    """Home view, displays login mechanism"""
    if request.user.is_authenticated():
        return HttpResponseRedirect('done')
    else:
        return render_to_response('home.html', {'version': version},
                                  RequestContext(request))


@login_required
def done(request):
    """Login complete view, displays user data"""
    ctx = {
        'version': version,
        'last_login': request.session.get('social_auth_last_login_backend')
    }
    return render_to_response('done.html', ctx, RequestContext(request))


def error(request):
    """Error view"""
    messages = get_messages(request)
    return render_to_response('error.html', {'version': version,
                                             'messages': messages},
                              RequestContext(request))


def logout(request):
    """Logs out user"""
    auth_logout(request)
    return HttpResponseRedirect('/')


def form(request):
    if request.method == 'POST' and request.POST.get('username'):
        request.session['saved_username'] = request.POST['username']
        backend = request.session['partial_pipeline']['backend']
        return redirect('socialauth_complete', backend=backend)
    return render_to_response('form.html', {}, RequestContext(request))


def form2(request):
    if request.method == 'POST' and request.POST.get('first_name'):
        request.session['saved_first_name'] = request.POST['first_name']
        backend = request.session['partial_pipeline']['backend']
        return redirect('socialauth_complete', backend=backend)
    return render_to_response('form2.html', {}, RequestContext(request))


def close_login_popup(request):
    return render_to_response('close_popup.html', {}, RequestContext(request))

########NEW FILE########
__FILENAME__ = vkontakte
from django.contrib.auth import BACKEND_SESSION_KEY
from django.contrib.auth.models import AnonymousUser
from django.http import HttpResponse
from django.shortcuts import render_to_response
from django.template.context import RequestContext

from django.core.cache import cache
from django.conf import settings

from social_auth.models import UserSocialAuth
from social_auth.views import complete as social_complete
from social_auth.backends.contrib.vk import VKOAuth2Backend


def is_complete_authentication(request):
    return request.user.is_authenticated() and \
           VKOAuth2Backend.__name__ in request.session.get(
            BACKEND_SESSION_KEY, ''
           )


def get_access_token(user):
    key = str(user.id)
    access_token = cache.get(key)

    # If cache is empty read the database
    if access_token is None:
        try:
            social_user = user.social_user if hasattr(user, 'social_user') \
                                           else UserSocialAuth.objects.get(
                                                user=user.id,
                                                provider=VKOAuth2Backend.name
                                           )
        except UserSocialAuth.DoesNotExist:
            return None

        if social_user.extra_data:
            access_token = social_user.extra_data.get('access_token')
            expires = social_user.extra_data.get('expires')

            cache.set(key, access_token, int(expires) if expires is not None
                                                      else 0)
    return access_token


# VK decorator to setup environment
def vkontakte_decorator(func):
    def wrapper(request, *args, **kwargs):
        user = request.user

        # User must me logged via VKontakte backend in order to ensure we talk
        # about the same person
        if not is_complete_authentication(request):
            try:
                user = social_complete(request, VKOAuth2Backend.name)
            except (ValueError, AttributeError):
                pass  # no matter if failed

        # Not recommended way for VK, but still something we need to be aware
        # of
        if isinstance(user, HttpResponse):
            kwargs.update({'auth_response': user})
        else:  # Need to re-check the completion
            if is_complete_authentication(request):
                kwargs.update({'access_token': get_access_token(request.user)})
            else:
                request.user = AnonymousUser()

        return func(request, *args, **kwargs)

    return wrapper


@vkontakte_decorator
def vkontakte_view(request, *args, **kwargs):
    # If there is a ready response just return it. Not recommended because
    # pipeline redirects fail the normal workflow here.
    auth_response = kwargs.get('auth_response')
    if auth_response:
        for item in auth_response.items():
            if item[0] == 'Location' and 'form' in item[1]:
                return auth_response

    return render_to_response('vkontakte_app.html', {
        'vk_app_id': settings.VKONTAKTE_APP_AUTH['id']
                        if hasattr(settings, 'VKONTAKTE_APP_AUTH') else None,
        'app_scope': ','.join(settings.VKONTAKTE_OAUTH2_EXTRA_SCOPE),
        'warning': not request.GET.get('user_id')
    }, RequestContext(request))

########NEW FILE########
__FILENAME__ = middleware
from django.core.urlresolvers import reverse

from social_auth.exceptions import AuthAlreadyAssociated
from social_auth.middleware import SocialAuthExceptionMiddleware


class ExampleSocialAuthExceptionMiddleware(SocialAuthExceptionMiddleware):
    def raise_exception(self, request, exception):
        return False

    def get_message(self, request, exception):
        if isinstance(exception, AuthAlreadyAssociated):
            return 'Somebody is already using that account!'
        return super(ExampleSocialAuthExceptionMiddleware, self)\
                        .get_message(request, exception)

    def get_redirect_uri(self, request, exception):
        if request.user.is_authenticated():
            return reverse('done')
        else:
            return reverse('error')

########NEW FILE########
__FILENAME__ = settings
import sys
from os.path import abspath, dirname, basename, join


#try:
    #import social_auth
    #social_auth  # pyflakes
#except ImportError:
    #import sys
#    sys.path.insert(0, '..')

sys.path.insert(0, '..')
sys.path.insert(0, '../../python-social-auth')


DEBUG = True
TEMPLATE_DEBUG = DEBUG

ROOT_PATH = abspath(dirname(__file__))
PROJECT_NAME = basename(ROOT_PATH)

ADMINS = ()
MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'test.db'
    }
}

TIME_ZONE = 'America/Chicago'
LANGUAGE_CODE = 'en-us'
SITE_ID = 1
USE_I18N = True
USE_L10N = True
USE_TZ = True
MEDIA_ROOT = ''
MEDIA_URL = ''
STATIC_ROOT = ''
STATIC_URL = '/static/'

STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

SECRET_KEY = '_u6ym67ywnj0ugi2=6f-a_361i6o5elx91hftz$+klw)(*pqjw'

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    # 'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = 'example.urls'

WSGI_APPLICATION = 'example.wsgi.application'

TEMPLATE_DIRS = (
    join(ROOT_PATH, 'templates'),
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'south',
    # 'social.apps.django_app.default',
    'social_auth',
    'app',
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

AUTHENTICATION_BACKENDS = (
    'social_auth.backends.OpenIDBackend',
    'social_auth.backends.twitter.TwitterBackend',
    'social_auth.backends.facebook.FacebookBackend',
    'social_auth.backends.google.GoogleOAuthBackend',
    'social_auth.backends.google.GoogleOAuth2Backend',
    'social_auth.backends.google.GoogleBackend',
    'social_auth.backends.yahoo.YahooBackend',
    'social_auth.backends.stripe.StripeBackend',
    'social_auth.backends.steam.SteamBackend',
    'social_auth.backends.reddit.RedditBackend',
    'social_auth.backends.amazon.AmazonBackend',
    'social_auth.backends.browserid.BrowserIDBackend',
    'social_auth.backends.contrib.linkedin.LinkedinBackend',
    'social_auth.backends.contrib.skyrock.SkyrockBackend',
    'social_auth.backends.contrib.flickr.FlickrBackend',
    'social_auth.backends.contrib.instagram.InstagramBackend',
    'social_auth.backends.contrib.github.GithubBackend',
    'social_auth.backends.contrib.yandex.YandexBackend',
    'social_auth.backends.contrib.yandex.YandexOAuth2Backend',
    'social_auth.backends.contrib.yandex.YaruBackend',
    'social_auth.backends.contrib.disqus.DisqusBackend',
    'social_auth.backends.contrib.yahoo.YahooOAuthBackend',
    'social_auth.backends.contrib.foursquare.FoursquareBackend',
    'social_auth.backends.contrib.live.LiveBackend',
    'social_auth.backends.contrib.livejournal.LiveJournalBackend',
    'social_auth.backends.contrib.douban.DoubanBackend',
    'social_auth.backends.contrib.vk.VKOpenAPIBackend',
    'social_auth.backends.contrib.vk.VKOAuth2Backend',
    'social_auth.backends.contrib.odnoklassniki.OdnoklassnikiBackend',
    'social_auth.backends.contrib.odnoklassniki.OdnoklassnikiAppBackend',
    'social_auth.backends.contrib.mailru.MailruBackend',
    'social_auth.backends.contrib.dailymotion.DailymotionBackend',
    # 'social_auth.backends.contrib.shopify.ShopifyBackend',
    # 'social_auth.backends.contrib.exacttarget.ExactTargetBackend',
    'social_auth.backends.contrib.stocktwits.StocktwitsBackend',
    'social_auth.backends.contrib.behance.BehanceBackend',
    'social_auth.backends.contrib.readability.ReadabilityBackend',
    'social_auth.backends.contrib.fedora.FedoraBackend',
    'django.contrib.auth.backends.ModelBackend',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',
    'django.contrib.messages.context_processors.messages',
    'social_auth.context_processors.social_auth_by_type_backends',
)

LOGIN_REDIRECT_URL = '/'

SOCIAL_AUTH_PIPELINE = (
    'social.pipeline.social_auth.social_details',
    'social.pipeline.social_auth.social_uid',
    'social.pipeline.social_auth.auth_allowed',
    'social_auth.backends.pipeline.social.social_auth_user',
    'social_auth.backends.pipeline.associate.associate_by_email',
    'social_auth.backends.pipeline.misc.save_status_to_session',
    'app.pipeline.redirect_to_form',
    'app.pipeline.username',
    'social_auth.backends.pipeline.user.create_user',
    'social_auth.backends.pipeline.social.associate_user',
    'social_auth.backends.pipeline.social.load_extra_data',
    'social_auth.backends.pipeline.user.update_user_details',
    'social_auth.backends.pipeline.misc.save_status_to_session',
    'app.pipeline.redirect_to_form2',
    'app.pipeline.first_name',
)

try:
    from example.local_settings import *
except Exception as e:
    pass

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import patterns, url, include
from django.contrib import admin

from app.views import home, done, logout, error, form, form2, close_login_popup
from app.facebook import facebook_view
from app.vkontakte import vkontakte_view
from app.odnoklassniki import ok_app, ok_app_info

admin.autodiscover()


urlpatterns = patterns('',
    url(r'^$', home, name='home'),
    url(r'^done/$', done, name='done'),
    url(r'^error/$', error, name='error'),
    url(r'^logout/$', logout, name='logout'),
    url(r'^form/$', form, name='form'),
    url(r'^form2/$', form2, name='form2'),
    url(r'^admin/', include(admin.site.urls)),
    url(r'^fb/', facebook_view, name='fb_app'),
    url(r'^vk/', vkontakte_view, name='vk_app'),
    url(r'^ok/$', ok_app, name='ok_app'),
    url(r'^ok/info/$', ok_app_info, name='ok_app_info'),
    url(r'^close_login_popup/$', close_login_popup, name='login_popup_close'),
    url(r'', include('social_auth.urls')),
)

########NEW FILE########
__FILENAME__ = wsgi
"""
WSGI config for example project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "example.settings")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

# Apply WSGI middleware here.
# from helloworld.wsgi import HelloWorldApplication
# application = HelloWorldApplication(application)

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "example.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = admin
from django.conf import settings


MODELS = getattr(settings, 'SOCIAL_AUTH_MODELS',
                 'social_auth.db.django_models')


if MODELS == 'social_auth.db.django_models':
    from social.apps.django_app.default import admin
    admin  # placate pyflakes

########NEW FILE########
__FILENAME__ = amazon
from social.backends.amazon import AmazonOAuth2 as AmazonBackend

########NEW FILE########
__FILENAME__ = aol
from social.backends.aol import AOLOpenId as AolBackend

########NEW FILE########
__FILENAME__ = browserid
from social.backends.persona import PersonaAuth as BrowserIDBackend

########NEW FILE########
__FILENAME__ = angel
from social.backends.angel import AngelOAuth2 as AngelBackend

########NEW FILE########
__FILENAME__ = appsfuel
from social.backends.appsfuel import AppsfuelOAuth2 as AppsfuelBackend, \
                               AppsfuelOAuth2Sandbox as AppsfuelSandboxBackend

########NEW FILE########
__FILENAME__ = behance
from social.backends.behance import BehanceOAuth2 as BehanceBackend

########NEW FILE########
__FILENAME__ = belgiumeid
from social.backends.belgiumeid import BelgiumEIDOpenId as EIDBackend

########NEW FILE########
__FILENAME__ = bitbucket
from social.backends.bitbucket import BitbucketOAuth as BitbucketBackend

########NEW FILE########
__FILENAME__ = dailymotion
from social.backends.dailymotion import DailymotionOAuth2 as DailymotionBackend

########NEW FILE########
__FILENAME__ = disqus
from social.backends.disqus import DisqusOAuth2 as DisqusBackend

########NEW FILE########
__FILENAME__ = douban
from social.backends.douban import DoubanOAuth as DoubanBackend, \
                                   DoubanOAuth2 as Douban2Backend

########NEW FILE########
__FILENAME__ = dropbox
from social.backends.dropbox import DropboxOAuth as DropboxBackend

########NEW FILE########
__FILENAME__ = evernote
from django.conf import settings


if getattr(settings, 'EVERNOTE_DEBUG', False):
    from social.backends.evernote import \
            EvernoteSandboxOAuth as EvernoteBackend
else:
    from social.backends.evernote import EvernoteOAuth as EvernoteBackend

########NEW FILE########
__FILENAME__ = exacttarget
from social.backends.exacttarget import ExactTargetOAuth2 as ExactTargetBackend

########NEW FILE########
__FILENAME__ = fedora
from social.backends.fedora import FedoraOpenId as FedoraBackend

########NEW FILE########
__FILENAME__ = fitbit
from social.backends.fitbit import FitbitOAuth as FitbitBackend

########NEW FILE########
__FILENAME__ = flickr
from social.backends.flickr import FlickrOAuth as FlickrBackend

########NEW FILE########
__FILENAME__ = foursquare
from social.backends.foursquare import FoursquareOAuth2 as FoursquareBackend

########NEW FILE########
__FILENAME__ = gae
from social.backends.gae import GoogleAppEngineAuth as GAEBackend

########NEW FILE########
__FILENAME__ = github
from django.conf import settings


if getattr(settings, 'GITHUB_ORGANIZATION', None):
    from social.backends.github import \
            GithubOrganizationOAuth2 as GithubBackend
else:
    from social.backends.github import GithubOAuth2 as GithubBackend

########NEW FILE########
__FILENAME__ = instagram
from social.backends.instagram import InstagramOAuth2 as InstagramBackend

########NEW FILE########
__FILENAME__ = jawbone
from social.backends.jawbone import JawboneOAuth2 as JawboneBackend

########NEW FILE########
__FILENAME__ = linkedin
from social.backends.linkedin import LinkedinOAuth as LinkedinBackend, \
                                     LinkedinOAuth2 as LinkedinOAuth2Backend

########NEW FILE########
__FILENAME__ = live
from social.backends.live import LiveOAuth2 as LiveBackend

########NEW FILE########
__FILENAME__ = livejournal
from social.backends.livejournal import LiveJournalOpenId as LiveJournalBackend

########NEW FILE########
__FILENAME__ = mailru
from social.backends.mailru import MailruOAuth2 as MailruBackend

########NEW FILE########
__FILENAME__ = mendeley
from social.backends.mendeley import MendeleyOAuth as MendeleyBackend

########NEW FILE########
__FILENAME__ = mixcloud
from social.backends.mixcloud import MixcloudOAuth2 as MixcloudBackend

########NEW FILE########
__FILENAME__ = odnoklassniki
from social.backends.odnoklassniki import \
        OdnoklassnikiOAuth2 as OdnoklassnikiBackend, \
        OdnoklassnikiApp as OdnoklassnikiAppBackend

########NEW FILE########
__FILENAME__ = orkut
from social.backends.orkut import OrkutOAuth as OrkutBackend

########NEW FILE########
__FILENAME__ = rdio
from social.backends.rdio import RdioOAuth1 as RdioOAuth1Backend, \
                                 RdioOAuth2 as RdioOAuth2Backend

########NEW FILE########
__FILENAME__ = readability
from social.backends.readability import ReadabilityOAuth as ReadabilityBackend

########NEW FILE########
__FILENAME__ = shopify
from social.backends.shopify import ShopifyOAuth2 as ShopifyBackend

########NEW FILE########
__FILENAME__ = skyrock
from social.backends.skyrock import SkyrockOAuth as SkyrockBackend

########NEW FILE########
__FILENAME__ = soundcloud
from social.backends.soundcloud import SoundcloudOAuth2 as SoundcloudBackend

########NEW FILE########
__FILENAME__ = stackoverflow
from social.backends.stackoverflow import \
        StackoverflowOAuth2 as StackoverflowBackend

########NEW FILE########
__FILENAME__ = stocktwits
from social.backends.stocktwits import StocktwitsOAuth2 as StocktwitsBackend

########NEW FILE########
__FILENAME__ = taobao
from social.backends.taobao import TAOBAOAuth as TaobaoBackend

########NEW FILE########
__FILENAME__ = trello
from social.backends.trello import TrelloOAuth as TrelloBackend

########NEW FILE########
__FILENAME__ = tripit
from social.backends.tripit import TripItOAuth as TripItBackend

########NEW FILE########
__FILENAME__ = tumblr
from social.backends.tumblr import TumblrOAuth as TumblrBackend

########NEW FILE########
__FILENAME__ = twilio
from social.backends.twilio import TwilioAuth as TwilioBackend

########NEW FILE########
__FILENAME__ = vk
from social.backends.vk import VKontakteOpenAPI as VKOpenAPIBackend, \
                               VKOAuth2 as VKOAuth2Backend, \
                               VKAppOAuth2 as VKApplicationBackend

########NEW FILE########
__FILENAME__ = vkontakte
import warnings

from social.backends.vk import VKontakteOpenAPI as VKOpenAPIBackend, \
                               VKOAuth2 as VKOAuth2Backend, \
                               VKAppOAuth2 as VKApplicationBackend

warnings.warn('Vkontakte backend was renamed to vk backend, '
              'settings were renamed too. Please adjust your '
              'settings', DeprecationWarning)

########NEW FILE########
__FILENAME__ = weibo
from social.backends.weibo import WeiboOAuth2 as WeiboBackend

########NEW FILE########
__FILENAME__ = xing
from social.backends.xing import XingOAuth as XingBackend

########NEW FILE########
__FILENAME__ = yahoo
from social.backends.yahoo import YahooOAuth as YahooOAuthBackend

########NEW FILE########
__FILENAME__ = yammer
from social.backends.yammer import YammerOAuth2 as YammerBackend

########NEW FILE########
__FILENAME__ = yammer_staging
from social.backends.yammer import YammerStagingOAuth2 as YammerStagingBackend

########NEW FILE########
__FILENAME__ = yandex
from social.backends.yandex import YandexOpenId as YandexBackend, \
                                   YaruOAuth2 as YaruBackend, \
                                   YandexOAuth2 as YandexOAuth2Backend

########NEW FILE########
__FILENAME__ = facebook
from django.conf import settings


if getattr(settings, 'FACEBOOK_APP_AUTH', False):
    from social.backends.facebook import \
            FacebookAppOAuth2 as FacebookBackendBase
else:
    from social.backends.facebook import FacebookOAuth2 as FacebookBackendBase


REDIRECT_HTML = """
<script type="text/javascript">
    var domain = 'https://apps.facebook.com/',
        redirectURI = domain + '{{ FACEBOOK_APP_NAMESPACE }}' + '/';
    window.top.location = 'https://www.facebook.com/dialog/oauth/' +
    '?client_id={{ FACEBOOK_KEY }}' +
    '&redirect_uri=' + encodeURIComponent(redirectURI) +
    '&scope={{ FACEBOOK_EXTENDED_PERMISSIONS }}';
</script>
"""


class FacebookBackend(FacebookBackendBase):
    def auth_html(self):
        key, secret = self.get_key_and_secret()
        namespace = self.setting('NAMESPACE', None)
        scope = self.get_scope()
        if scope:
            scope = self.SCOPE_SEPARATOR.join(scope)
        ctx = {
            'FACEBOOK_APP_NAMESPACE': namespace or key,
            'FACEBOOK_KEY': key,
            'FACEBOOK_EXTENDED_PERMISSIONS': scope,
            'FACEBOOK_COMPLETE_URI': self.redirect_uri,
        }
        tpl = self.setting('LOCAL_HTML', 'facebook.html')
        return self.strategy.render_html(tpl=tpl, html=REDIRECT_HTML,
                                         context=ctx)

########NEW FILE########
__FILENAME__ = google
from social.backends.google import GoogleOAuth2 as GoogleOAuth2Backend, \
                                   GoogleOAuth as GoogleOAuthBackend, \
                                   GoogleOpenId as GoogleBackend

########NEW FILE########
__FILENAME__ = associate
from social.pipeline.social_auth import associate_by_email

########NEW FILE########
__FILENAME__ = misc
from social.pipeline.partial import save_status_to_session
save_status_to_session  # placate pyflakes

########NEW FILE########
__FILENAME__ = sauth
from social.pipeline.social_auth import social_user as social_auth_user, \
                                        associate_user, load_extra_data
social_auth_user, associate_user, load_extra_data  # placate pyflakes

########NEW FILE########
__FILENAME__ = user
from social.pipeline.user import get_username, create_user, \
                                 user_details as update_user_details
get_username, create_user, update_user_details  # placate pyflakes

########NEW FILE########
__FILENAME__ = reddit
from social.backends.reddit import RedditOAuth2 as RedditBackend

########NEW FILE########
__FILENAME__ = steam
from social.backends.steam import SteamOpenId as SteamBackend

########NEW FILE########
__FILENAME__ = stripe
from social.backends.stripe import StripeOAuth2 as StripeBackend

########NEW FILE########
__FILENAME__ = twitter
from social.backends.twitter import TwitterOAuth as TwitterBackend

########NEW FILE########
__FILENAME__ = yahoo
from social.backends.yahoo import YahooOpenId as YahooBackend

########NEW FILE########
__FILENAME__ = context_processors
from collections import defaultdict

from social.apps.django_app.context_processors import login_redirect, \
                                                      backends, LazyDict
from social.backends.oauth import BaseOAuth1, BaseOAuth2
from social.backends.open_id import OpenIdAuth
from social.utils import user_is_authenticated

from social_auth.models import UserSocialAuth
from social_auth.backends import get_backends

# Note: social_auth_backends, social_auth_by_type_backends and
#       social_auth_by_name_backends don't play nice together.


def social_auth_backends(request):
    """Load Social Auth current user data to context.
    Will add a output from backends_data to context under social_auth key.
    """
    return {'social_auth': backends(request)}


def social_auth_by_type_backends(request):
    """Load Social Auth current user data to context.
    Will add a output from backends_data to context under social_auth key where
    each entry will be grouped by backend type (openid, oauth, oauth2).
    """
    def context_value():
        data = dict(backends(request)['backends'])
        data['backends'] = group_backend_by_type(data['backends'])
        data['not_associated'] = group_backend_by_type(data['not_associated'])
        data['associated'] = group_backend_by_type(data['associated'])
        return data
    return {'social_auth': LazyDict(context_value)}


def social_auth_by_name_backends(request):
    """Load Social Auth current user data to context.
    Will add a social_auth object whose attribute names are the names of each
    provider, e.g. social_auth.facebook would be the facebook association or
    None, depending on the logged in user's current associations. Providers
    with a hyphen have the hyphen replaced with an underscore, e.g.
    google-oauth2 becomes google_oauth2 when referenced in templates.
    """
    def context_value():
        keys = [key for key in get_backends().keys()]
        accounts = dict(zip(keys, [None] * len(keys)))
        user = request.user
        if user_is_authenticated(user):
            accounts.update((assoc.provider, assoc)
                    for assoc in UserSocialAuth.get_social_auth_for_user(user))
        return accounts
    return {'social_auth': LazyDict(context_value)}


def social_auth_login_redirect(request):
    """Load current redirect to context."""
    data = login_redirect(request)
    data['redirect_querystring'] = data.get('REDIRECT_QUERYSTRING')
    return data


def group_backend_by_type(items):
    """Group items by backend type."""
    result = defaultdict(list)
    backends_defined = get_backends()

    for item in items:
        name = getattr(item, 'provider', item)
        backend = backends_defined[name]
        if issubclass(backend, OpenIdAuth):
            result['openid'].append(item)
        elif issubclass(backend, BaseOAuth2):
            result['oauth2'].append(item)
        elif issubclass(backend, BaseOAuth1):
            result['oauth'].append(item)
    return dict(result)

########NEW FILE########
__FILENAME__ = exceptions
from social.exceptions import *

########NEW FILE########
__FILENAME__ = fields
from social.apps.django_app.default.fields import JSONField

########NEW FILE########
__FILENAME__ = middleware
from social.apps.django_app.middleware import SocialAuthExceptionMiddleware
SocialAuthExceptionMiddleware  # placate pyflakes

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration

from django.db import models

from django.conf import settings
from social_auth.utils import get_custom_user_model_for_migrations, \
                              custom_user_frozen_models

USER_MODEL = get_custom_user_model_for_migrations()
UID_LENGTH = getattr(settings, 'SOCIAL_AUTH_UID_LENGTH', 255)
NONCE_SERVER_URL_LENGTH = getattr(settings, 'SOCIAL_AUTH_NONCE_SERVER_URL_LENGTH', 255)
ASSOCIATION_SERVER_URL_LENGTH = getattr(settings, 'SOCIAL_AUTH_ASSOCIATION_SERVER_URL_LENGTH', 255)
ASSOCIATION_HANDLE_LENGTH = getattr(settings, 'SOCIAL_AUTH_ASSOCIATION_HANDLE_LENGTH', 255)


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'UserSocialAuth'
        db.create_table('social_auth_usersocialauth', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='social_auth', to=orm[USER_MODEL])),
            ('provider', self.gf('django.db.models.fields.CharField')(max_length=32)),
            ('uid', self.gf('django.db.models.fields.CharField')(max_length=UID_LENGTH)),
            ('extra_data', self.gf('social_auth.fields.JSONField')(default='{}')),
        ))
        db.send_create_signal('social_auth', ['UserSocialAuth'])

        # Adding unique constraint on 'UserSocialAuth', fields ['provider', 'uid']
        db.create_unique('social_auth_usersocialauth', ['provider', 'uid'])

        # Adding model 'Nonce'
        db.create_table('social_auth_nonce', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('server_url', self.gf('django.db.models.fields.CharField')(max_length=NONCE_SERVER_URL_LENGTH)),
            ('timestamp', self.gf('django.db.models.fields.IntegerField')()),
            ('salt', self.gf('django.db.models.fields.CharField')(max_length=40)),
        ))
        db.send_create_signal('social_auth', ['Nonce'])

        # Adding model 'Association'
        db.create_table('social_auth_association', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('server_url', self.gf('django.db.models.fields.CharField')(max_length=ASSOCIATION_SERVER_URL_LENGTH)),
            ('handle', self.gf('django.db.models.fields.CharField')(max_length=ASSOCIATION_HANDLE_LENGTH)),
            ('secret', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('issued', self.gf('django.db.models.fields.IntegerField')()),
            ('lifetime', self.gf('django.db.models.fields.IntegerField')()),
            ('assoc_type', self.gf('django.db.models.fields.CharField')(max_length=64)),
        ))
        db.send_create_signal('social_auth', ['Association'])


    def backwards(self, orm):
        # Removing unique constraint on 'UserSocialAuth', fields ['provider', 'uid']
        db.delete_unique('social_auth_usersocialauth', ['provider', 'uid'])

        # Deleting model 'UserSocialAuth'
        db.delete_table('social_auth_usersocialauth')

        # Deleting model 'Nonce'
        db.delete_table('social_auth_nonce')

        # Deleting model 'Association'
        db.delete_table('social_auth_association')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'social_auth.association': {
            'Meta': {'object_name': 'Association'},
            'assoc_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': str(ASSOCIATION_HANDLE_LENGTH)}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'issued': ('django.db.models.fields.IntegerField', [], {}),
            'lifetime': ('django.db.models.fields.IntegerField', [], {}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_url': ('django.db.models.fields.CharField', [], {'max_length': str(ASSOCIATION_SERVER_URL_LENGTH)})
        },
        'social_auth.nonce': {
            'Meta': {'object_name': 'Nonce'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'salt': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'server_url': ('django.db.models.fields.CharField', [], {'max_length': str(NONCE_SERVER_URL_LENGTH)}),
            'timestamp': ('django.db.models.fields.IntegerField', [], {})
        },
        'social_auth.usersocialauth': {
            'Meta': {'unique_together': "(('provider', 'uid'),)", 'object_name': 'UserSocialAuth'},
            'extra_data': ('social_auth.fields.JSONField', [], {'default': "'{}'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'provider': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'uid': ('django.db.models.fields.CharField', [], {'max_length': str(UID_LENGTH)}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'social_auth'", 'to': "orm['" + USER_MODEL + "']"})
        }
    }
    models.update(custom_user_frozen_models(USER_MODEL))

    complete_apps = ['social_auth']

########NEW FILE########
__FILENAME__ = 0002_auto__add_unique_nonce_timestamp_salt_server_url__add_unique_associati
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

from django.conf import settings
from social_auth.utils import get_custom_user_model_for_migrations, \
    custom_user_frozen_models


USER_MODEL = get_custom_user_model_for_migrations()
UID_LENGTH = getattr(settings, 'SOCIAL_AUTH_UID_LENGTH', 255)
NONCE_SERVER_URL_LENGTH = getattr(settings, 'SOCIAL_AUTH_NONCE_SERVER_URL_LENGTH', 255)
ASSOCIATION_SERVER_URL_LENGTH = getattr(settings, 'SOCIAL_AUTH_ASSOCIATION_SERVER_URL_LENGTH', 255)
ASSOCIATION_HANDLE_LENGTH = getattr(settings, 'SOCIAL_AUTH_ASSOCIATION_HANDLE_LENGTH', 255)


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding index on 'Nonce', fields ['timestamp']
        db.create_index('social_auth_nonce', ['timestamp'])

        # Adding unique constraint on 'Nonce', fields ['timestamp', 'salt', 'server_url']
        db.create_unique('social_auth_nonce', ['timestamp', 'salt', 'server_url'])

        # Adding index on 'Association', fields ['issued']
        db.create_index('social_auth_association', ['issued'])

        # Adding unique constraint on 'Association', fields ['handle', 'server_url']
        db.create_unique('social_auth_association', ['handle', 'server_url'])


    def backwards(self, orm):
        # Removing unique constraint on 'Association', fields ['handle', 'server_url']
        db.delete_unique('social_auth_association', ['handle', 'server_url'])

        # Removing index on 'Association', fields ['issued']
        db.delete_index('social_auth_association', ['issued'])

        # Removing unique constraint on 'Nonce', fields ['timestamp', 'salt', 'server_url']
        db.delete_unique('social_auth_nonce', ['timestamp', 'salt', 'server_url'])

        # Removing index on 'Nonce', fields ['timestamp']
        db.delete_index('social_auth_nonce', ['timestamp'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'social_auth.association': {
            'Meta': {'unique_together': "(('server_url', 'handle'),)", 'object_name': 'Association'},
            'assoc_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'handle': ('django.db.models.fields.CharField', [], {'max_length': str(ASSOCIATION_HANDLE_LENGTH)}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'issued': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'lifetime': ('django.db.models.fields.IntegerField', [], {}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_url': ('django.db.models.fields.CharField', [], {'max_length': str(ASSOCIATION_SERVER_URL_LENGTH)})
        },
        'social_auth.nonce': {
            'Meta': {'unique_together': "(('server_url', 'timestamp', 'salt'),)", 'object_name': 'Nonce'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'salt': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'server_url': ('django.db.models.fields.CharField', [], {'max_length': str(NONCE_SERVER_URL_LENGTH)}),
            'timestamp': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'social_auth.usersocialauth': {
            'Meta': {'unique_together': "(('provider', 'uid'),)", 'object_name': 'UserSocialAuth'},
            'extra_data': ('social_auth.fields.JSONField', [], {'default': "'{}'"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'provider': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'uid': ('django.db.models.fields.CharField', [], {'max_length': str(UID_LENGTH)}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'social_auth'", 'to': "orm['" + USER_MODEL + "']"})
        }
    }
    models.update(custom_user_frozen_models(USER_MODEL))
    complete_apps = ['social_auth']

########NEW FILE########
__FILENAME__ = models
from django.conf import settings

MODELS = getattr(settings, 'SOCIAL_AUTH_MODELS',
                 'social_auth.db.django_models')


if MODELS == 'social_auth.db.django_models':
    from social.apps.django_app.default.models import \
            UserSocialAuth as UserSocialAuthBase, \
            Nonce as NonceBase, \
            Association as AssociationBase, \
            DjangoStorage as DjangoStorageBase
else:
    from social.apps.django_app.me.models import \
            UserSocialAuth as UserSocialAuthBase, \
            Nonce as NonceBase, \
            Association as AssociationBase, \
            DjangoStorage as DjangoStorageBase


class UserSocialAuth(UserSocialAuthBase):
    class Meta:
        proxy = True


class Nonce(NonceBase):
    class Meta:
        proxy = True


class Association(AssociationBase):
    class Meta:
        proxy = True


class DjangoStorage(DjangoStorageBase):
    user = UserSocialAuth
    nonce = Nonce
    association = Association

########NEW FILE########
__FILENAME__ = strategy
from social.strategies.django_strategy import DjangoStrategy


class DSAStrategy(DjangoStrategy):
    settings_map = {
        'AMAZON_SECRET': 'AMAZON_API_SECRET',
        'AMAZON_KEY': 'AMAZON_APP_ID',
        'AMAZON_SCOPE': 'AMAZON_EXTENDED_PERMISSIONS',
        'ANGEL_KEY': 'ANGEL_CLIENT_ID',
        'ANGEL_SECRET': 'ANGEL_CLIENT_SECRET',
        'APPSFUEL_KEY': 'APPSFUEL_CLIENT_ID',
        'APPSFUEL_SECRET': 'APPSFUEL_CLIENT_SECRET',
        'BEHANCE_KEY': 'BEHANCE_CLIENT_ID',
        'BEHANCE_SECRET': 'BEHANCE_CLIENT_SECRET',
        'BEHANCE_SCOPE': 'BEHANCE_EXTENDED_PERMISSIONS',
        'BITBUCKET_KEY': 'BITBUCKET_CONSUMER_KEY',
        'BITBUCKET_SECRET': 'BITBUCKET_CONSUMER_SECRET',
        'DAILYMOTION_KEY': 'DAILYMOTION_OAUTH2_KEY',
        'DAILYMOTION_SECRET': 'DAILYMOTION_OAUTH2_SECRET',
        'DISQUS_KEY': 'DISQUS_CLIENT_ID',
        'DISQUS_SECRET': 'DISQUS_CLIENT_SECRET',
        'DOUBAN_OAUTH2_KEY': 'DOUBAN2_CONSUMER_KEY',
        'DOUBAN_OAUTH2_SECRET': 'DOUBAN2_CONSUMER_SECRET',
        'DOUBAN_KEY': 'DOUBAN_CONSUMER_KEY',
        'DOUBAN_SECRET': 'DOUBAN_CONSUMER_SECRET',
        'DROPBOX_KEY': 'DROPBOX_API_SECRET',
        'DROPBOX_SECRET': 'DROPBOX_APP_ID',
        'EVERNOTE_KEY': 'EVERNOTE_CONSUMER_KEY',
        'EVERNOTE_SECRET': 'EVERNOTE_CONSUMER_SECRET',
        'EXACTTARGET_SECRET': 'EXACTTARGET_APP_SIGNATURE',
        'EXACTTARGET_KEY': 'EXACTTARGET_UNUSED',
        'FACEBOOK_KEY': 'FACEBOOK_APP_ID',
        'FACEBOOK_SECRET': 'FACEBOOK_API_SECRET',
        'FACEBOOK_SCOPE': 'FACEBOOK_EXTENDED_PERMISSIONS',
        'FACEBOOK_APP_KEY': 'FACEBOOK_APP_ID',
        'FACEBOOK_APP_LOCAL_HTML': 'FACEBOOK_LOCAL_HTML',
        'FITBIT_KEY': 'FITBIT_CONSUMER_KEY',
        'FITBIT_SECRET': 'FITBIT_CONSUMER_SECRET',
        'FLICKR_SECRET': 'FLICKR_API_SECRET',
        'FLICKR_KEY': 'FLICKR_APP_ID',
        'FOURSQUARE_KEY': 'FOURSQUARE_CONSUMER_KEY',
        'FOURSQUARE_SECRET': 'FOURSQUARE_CONSUMER_SECRET',
        'GITHUB_SECRET': 'GITHUB_API_SECRET',
        'GITHUB_KEY': 'GITHUB_APP_ID',
        'GITHUB_SCOPE': 'GITHUB_EXTENDED_PERMISSIONS',
        'GOOGLE_OAUTH_KEY': 'GOOGLE_CONSUMER_KEY',
        'GOOGLE_OAUTH_SECRET': 'GOOGLE_CONSUMER_SECRET',
        'GOOGLE_OAUTH_SCOPE': 'GOOGLE_OAUTH_EXTRA_SCOPE',
        'GOOGLE_OAUTH2_KEY': 'GOOGLE_OAUTH2_CLIENT_KEY',
        'GOOGLE_OAUTH2_SECRET': 'GOOGLE_OAUTH2_CLIENT_SECRET',
        'GOOGLE_OAUTH2_SCOPE': 'GOOGLE_OAUTH_EXTRA_SCOPE',
        'INSTAGRAM_KEY': 'INSTAGRAM_CLIENT_ID',
        'INSTAGRAM_SECRET': 'INSTAGRAM_CLIENT_SECRET',
        'JAWBONE_KEY': 'JAWBONE_CONSUMER_KEY',
        'JAWBONE_SECRET': 'JAWBONE_CONSUMER_SECRET',
        'JAWBONE_SCOPE': 'JAWBONE_EXTENDED_PERMISSIONS',
        'LINKEDIN_KEY': 'LINKEDIN_CONSUMER_KEY',
        'LINKEDIN_SECRET': 'LINKEDIN_CONSUMER_SECRET',
        'LINKEDIN_FIELDS_SELECTORS': 'LINKEDIN_EXTRA_FIELD_SELECTORS',
        'LINKEDIN_OAUTH2_KEY': 'LINKEDIN_CONSUMER_KEY',
        'LINKEDIN_OAUTH2_SECRET': 'LINKEDIN_CONSUMER_SECRET',
        'LINKEDIN_OAUTH2_FIELDS_SELECTORS': 'LINKEDIN_EXTRA_FIELD_SELECTORS',
        'LINKEDIN_OAUTH2_SCOPE': 'LINKEDIN_SCOPE',
        'LIVE_KEY': 'LIVE_CLIENT_ID',
        'LIVE_SECRET': 'LIVE_CLIENT_SECRET',
        'LIVE_SCOPE': 'LIVE_EXTENDED_PERMISSIONS',
        'MAILRU_OAUTH2_KEY': 'MAILRU_OAUTH2_CLIENT_KEY',
        'MAILRU_OAUTH2_SECRET': 'MAILRU_OAUTH2_CLIENT_SECRET',
        'MAILRU_OAUTH2_SCOPE': 'MAILRU_OAUTH2_EXTRA_SCOPE',
        'MENDELEY_KEY': 'MENDELEY_CONSUMER_KEY',
        'MENDELEY_SECRET': 'MENDELEY_CONSUMER_SECRET',
        'MIXCLOUD_KEY': 'MIXCLOUD_CLIENT_ID',
        'MIXCLOUD_SECRET': 'MIXCLOUD_CLIENT_SECRET',
        'ODNOKLASSNIKI_OAUTH2_KEY': 'ODNOKLASSNIKI_OAUTH2_CLIENT_KEY',
        'ODNOKLASSNIKI_OAUTH2_SECRET': 'ODNOKLASSNIKI_OAUTH2_CLIENT_SECRET',
        'ODNOKLASSNIKI_OAUTH2_SCOPE': 'ODNOKLASSNIKI_OAUTH2_EXTRA_SCOPE',
        'ORKUT_KEY': 'ORKUT_CONSUMER_KEY',
        'ORKUT_SECRET': 'ORKUT_CONSUMER_SECRET',
        'RDIO_OAUTH2_SCOPE': 'RDIO2_PERMISSIONS',
        'READABILITY_KEY': 'READABILITY_CONSUMER_KEY',
        'READABILITY_SECRET': 'READABILITY_CONSUMER_SECRET',
        'REDDIT_SECRET': 'REDDIT_API_SECRET',
        'REDDIT_KEY': 'REDDIT_APP_ID',
        'REDDIT_SCOPE': 'REDDIT_EXTENDED_PERMISSIONS',
        'SHOPIFY_KEY': 'SHOPIFY_APP_API_KEY',
        'SHOPIFY_SECRET': 'SHOPIFY_SHARED_SECRET',
        'SKYROCK_KEY': 'SKYROCK_CONSUMER_KEY',
        'SKYROCK_SECRET': 'SKYROCK_CONSUMER_SECRET',
        'SOUNDCLOUD_KEY': 'SOUNDCLOUD_CLIENT_ID',
        'SOUNDCLOUD_SECRET': 'SOUNDCLOUD_CLIENT_SECRET',
        'SOUNDCLOUD_SCOPE': 'SOUNDCLOUD_EXTENDED_PERMISSIONS',
        'STACKOVERFLOW_KEY': 'STACKOVERFLOW_CLIENT_ID',
        'STACKOVERFLOW_SECRET': 'STACKOVERFLOW_CLIENT_SECRET',
        'STACKOVERFLOW_SCOPE': 'STACKOVERFLOW_EXTENDED_PERMISSIONS',
        'STOCKTWITS_KEY': 'STOCKTWITS_CONSUMER_KEY',
        'STOCKTWITS_SECRET': 'STOCKTWITS_CONSUMER_SECRET',
        'STRIPE_KEY': 'STRIPE_APP_ID',
        'STRIPE_SECRET': 'STRIPE_APP_SECRET',
        'TRELLO_KEY': 'TRELLO_CONSUMER_KEY',
        'TRELLO_SECRET': 'TRELLO_CONSUMER_SECRET',
        'TRIPIT_KEY': 'TRIPIT_API_KEY',
        'TRIPIT_SECRET': 'TRIPIT_API_SECRET',
        'TUMBLR_KEY': 'TUMBLR_CONSUMER_KEY',
        'TUMBLR_SECRET': 'TUMBLR_CONSUMER_SECRET',
        'TWILIO_SECRET': 'TWILIO_AUTH_TOKEN',
        'TWILIO_KEY': 'TWILIO_CONNECT_KEY',
        'TWITTER_KEY': 'TWITTER_CONSUMER_KEY',
        'TWITTER_SECRET': 'TWITTER_CONSUMER_SECRET',
        'VK_APP_SECRET': 'VKAPP_API_SECRET',
        'VK_APP_KEY': 'VKAPP_APP_ID',
        'VK_APP_USERMODE': 'VKAPP_USER_MODE',
        'VK_OAUTH2_EXTRA_DATA': 'VK_EXTRA_DATA',
        'VK_OAUTH2_SCOPE': 'VK_EXTRA_SCOPE',
        'VK_OAUTH2_SECRET': 'VK_API_SECRET',
        'VK_OPENAPI_LOCAL_HTML': 'VK_LOCAL_HTML',
        'VK_OPENAPI_APP_ID': 'VK_APP_ID',
        'WEIBO_KEY': 'WEIBO_CLIENT_KEY',
        'WEIBO_SECRET': 'WEIBO_CLIENT_SECRET',
        'XING_KEY': 'XING_CONSUMER_KEY',
        'XING_SECRET': 'XING_CONSUMER_SECRET',
        'YAHOO_KEY': 'YAHOO_CONSUMER_KEY',
        'YAHOO_SECRET': 'YAHOO_CONSUMER_SECRET',
        'YAMMER_KEY': 'YAMMER_CONSUMER_KEY',
        'YAMMER_SECRET': 'YAMMER_CONSUMER_SECRET',
        'YAMMER_STAGING_KEY': 'YAMMER_STAGING_CONSUMER_KEY',
        'YAMMER_STAGING_SECRET': 'YAMMER_STAGING_CONSUMER_SECRET',
        'YANDEX_SECRET': 'YANDEX_API_SECRET',
        'YANDEX_KEY': 'YANDEX_APP_ID',
        'ON_HTTPS': 'SOCIAL_AUTH_REDIRECT_IS_HTTPS',
    }

    def get_setting(self, name):
        if name in self.settings_map:
            # Try DSA setting name from map defined above
            try:
                return super(DSAStrategy, self).get_setting(
                    self.settings_map[name]
                )
            except (AttributeError, KeyError):
                pass
        # Fallback to PSA setting name
        return super(DSAStrategy, self).get_setting(name)

    def get_pipeline(self):
        pipeline = super(DSAStrategy, self).get_pipeline()
        pipeline_renamed = []
        for entry in pipeline:
            if entry.startswith('social_auth.backends.pipeline.social'):
                entry = entry.replace(
                    'social_auth.backends.pipeline.social',
                    'social_auth.backends.pipeline.sauth'
                )
            pipeline_renamed.append(entry)
        return pipeline_renamed

########NEW FILE########
__FILENAME__ = urls
"""URLs module"""
try:
    from django.conf.urls import patterns, url
except ImportError:
    # for Django version less then 1.4
    from django.conf.urls.defaults import patterns, url

from social_auth.views import auth, complete, disconnect


urlpatterns = patterns('',
    # authentication
    url(r'^login/(?P<backend>[^/]+)/$', auth, name='socialauth_begin'),
    url(r'^complete/(?P<backend>[^/]+)/$', complete,
        name='socialauth_complete'),

    # associate
    url(r'^associate/(?P<backend>[^/]+)/$', auth,
        name='socialauth_associate_begin'),
    url(r'^associate/complete/(?P<backend>[^/]+)/$', complete,
        name='socialauth_associate_complete'),

    # disconnection
    url(r'^disconnect/(?P<backend>[^/]+)/$', disconnect,
        name='socialauth_disconnect'),
    url(r'^disconnect/(?P<backend>[^/]+)/(?P<association_id>[^/]+)/$',
        disconnect, name='socialauth_disconnect_individual'),
)

########NEW FILE########
__FILENAME__ = utils
from django.conf import settings
from django.db.models.loading import get_model


def get_custom_user_model_for_migrations():
    user_model = getattr(settings, 'SOCIAL_AUTH_USER_MODEL', None) or \
                 getattr(settings, 'AUTH_USER_MODEL', None) or \
                 'auth.User'
    if user_model != 'auth.User':
        # In case of having a proxy model defined as USER_MODEL
        # We use auth.User instead to prevent migration errors
        # Since proxy models aren't present in migrations
        if get_model(*user_model.split('.'))._meta.proxy:
            user_model = 'auth.User'
    return user_model


def custom_user_frozen_models(user_model):
    migration_name = getattr(settings, 'INITIAL_CUSTOM_USER_MIGRATION',
                             '0001_initial.py')
    if user_model != 'auth.User':
        from south.migration.base import Migrations
        from south.exceptions import NoMigrations
        from south.creator.freezer import freeze_apps
        user_app, user_model = user_model.split('.')
        try:
            user_migrations = Migrations(user_app)
        except NoMigrations:
            extra_model = freeze_apps(user_app)
        else:
            initial_user_migration = user_migrations.migration(migration_name)
            extra_model = initial_user_migration.migration_class().models
    else:
        extra_model = {}
    return extra_model

########NEW FILE########
__FILENAME__ = views
from django.conf import settings
from django.contrib.auth import REDIRECT_FIELD_NAME
from django.views.decorators.csrf import csrf_exempt, csrf_protect
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST

from social.utils import setting_name
from social.actions import do_auth, do_complete, do_disconnect
from social.strategies.utils import get_strategy
from social.apps.django_app.utils import strategy, BACKENDS, STORAGE
from social.apps.django_app.views import _do_login


STRATEGY = getattr(settings, setting_name('STRATEGY'),
                   'social_auth.strategy.DSAStrategy')


def load_strategy(*args, **kwargs):
    return get_strategy(BACKENDS, STRATEGY, STORAGE, *args, **kwargs)


@strategy('socialauth_complete', load_strategy=load_strategy)
def auth(request, backend):
    return do_auth(request.strategy, redirect_name=REDIRECT_FIELD_NAME)


@csrf_exempt
@strategy('socialauth_complete', load_strategy=load_strategy)
def complete(request, backend, *args, **kwargs):
    return do_complete(request.strategy, _do_login, request.user,
                       redirect_name=REDIRECT_FIELD_NAME, *args, **kwargs)


@login_required
@strategy(load_strategy=load_strategy)
@require_POST
@csrf_protect
def disconnect(request, backend, association_id=None):
    return do_disconnect(request.strategy, request.user, association_id,
                         redirect_name=REDIRECT_FIELD_NAME)

########NEW FILE########
