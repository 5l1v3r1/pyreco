__FILENAME__ = _config
# -*- coding: utf-8 -*-

######################################################################
# This is your site's Blogofile configuration file.
# www.Blogofile.com
#
# This file doesn't list every possible setting, it relies on defaults
# set in the core blogofile _config.py. To see where the default
# configuration is on your system run 'blogofile info'
#
######################################################################

######################################################################
# Basic Settings
#  (almost all sites will want to configure these settings)
######################################################################
import inspect, os
sys.path.append( os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) ) # script directory
from _version import currentVersion 

## site_url -- Your site's full URL
# Your "site" is the same thing as your _site directory.
#  If you're hosting a blogofile powered site as a subdirectory of a larger
#  non-blogofile site, then you would set the site_url to the full URL
#  including that subdirectory: "http://www.yoursite.com/path/to/blogofile-dir"
#site.url = "http://arturocastro.net/newofsite"
site.url = "http://localhost:8080"

#### Blog Settings ####
blog = controllers.blog

## blog_enabled -- Should the blog be enabled?
#  (You don't _have_ to use blogofile to build blogs)
blog.enabled = False

## blog_path -- Blog path.
#  This is the path of the blog relative to the site_url.
#  If your site_url is "http://www.yoursite.com/~ryan"
#  and you set blog_path to "/blog" your full blog URL would be
#  "http://www.yoursite.com/~ryan/blog"
#  Leave blank "" to set to the root of site_url
#blog.path = "/blog"

## blog_name -- Your Blog's name.
# This is used repeatedly in default blog templates
blog.name = "openFrameworks"

## blog_description -- A short one line description of the blog
# used in the RSS/Atom feeds.
blog.description = "Your Blog's short description"

## blog_timezone -- the timezone that you normally write your blog posts from
blog.timezone = "US/Eastern"

controllers.documentation.enabled = True
controllers.tutorials.enabled = True

documentation = controllers.documentation
documentation.path = 'documentation'

tutorials = controllers.documentation
tutorials.path = 'tutorials'


########NEW FILE########
__FILENAME__ = documentation

import os
import re
import logging

import blogofile_bf as bf
import shutil
import sys
import random

import argparse
import shutil
import glob

sys.path.append(os.path.join(os.path.realpath(__file__)[0:-(len(os.path.join('_controllers','documentation.py'))+1)],'_tools'))
#sys.path.append( os.path.realpath('')+"/../_tools" )
import markdown_file

logger = logging.getLogger("blogofile.post")    
        
def uniqify(seq):
    seen = set()
    seen_add = seen.add
    return [ x for x in seq if x not in seen and not seen_add(x)]
        

def run():
    classes = []
    directory = "_documentation"
    documentation = bf.config.controllers.documentation
        
    classes = markdown_file.getclass_list()
    classes_simple_name = markdown_file.getclass_list(False)
    addon_classes = markdown_file.list_all_addons()
    
    module_lookup = dict()
    core_index = dict()
    addons_index = dict()
    
    # Create an index of which module each class is in for generated links to other classes
    for class_name in classes:
        clazz = markdown_file.getclass(class_name)
        if clazz.istemplated:
            module_lookup[class_name[:-1]] = clazz.module    
        else:
            module_lookup[class_name] = clazz.module
        
    for clazz_name in classes:
        clazz = markdown_file.getclass(clazz_name)
        if clazz.istemplated:
            clazz.name = clazz.name[:-1]

        methods_to_remove = []
        for method in clazz.function_list:
            if method.name[0]=="~" or method.name.find("OF_DEPRECATED_MSG")!=-1:
                methods_to_remove.append(method)
        for method in methods_to_remove:
            clazz.function_list.remove(method)

        clazz.detailed_inline_description = str(clazz.detailed_inline_description.encode('ascii', 'ignore'))
        for class_name in classes_simple_name:
            rep = class_name + "[\s]"
            clazz.detailed_inline_description = re.sub(rep, "<a href=\"../"+module_lookup[class_name]+"/"+class_name+".html\" class=\"docs_class\" >"+class_name+"</a> ", clazz.detailed_inline_description)
            rep = class_name + "[(]"
            clazz.detailed_inline_description = re.sub(rep, "<a href=\"../"+module_lookup[class_name]+"/"+class_name+".html\" class=\"docs_class\" >"+class_name+"</a>(", clazz.detailed_inline_description)

        clazz.reference = str(clazz.reference.encode('ascii', 'ignore'))
        for class_name in classes_simple_name:
            rep = class_name + "[\s]"
            clazz.reference = re.sub(rep, "<a href=\"../"+module_lookup[class_name]+"/"+class_name+".html\" class=\"docs_class\" >"+class_name+"</a> ", clazz.reference)
            rep = class_name + "[(]"
            clazz.reference = re.sub(rep, "<a href=\"../"+module_lookup[class_name]+"/"+class_name+".html\" class=\"docs_class\" >"+class_name+"</a>(", clazz.reference)

        functions_file = markdown_file.getfunctionsfile(clazz.name)
        #print clazz.name
        #print clazz.function_list 
        env = {
            "modulename": clazz.name,
            "clazz": clazz,
            "functions": functions_file,
            "classes_list": classes,
            "is_addon": (clazz.name in addon_classes)
        }
        
        bf.template.materialize_template("documentation_class.mako", ('documentation',clazz.module+"/"+clazz.name+".html"), env )
        
        if not clazz.module in addon_classes:
            if not clazz.module in core_index.keys():
                core_index[clazz.module] = []
            if functions_file!=None:
                for function in functions_file.function_list:
                    clazz.function_list.append(function)
            core_index[clazz.module].append(clazz)
        else:
            if not clazz.module in addons_index.keys():
                addons_index[clazz.module] = []
            if functions_file!=None:
                for function in functions_file.function_list:
                    clazz.function_list.append(function)
            addons_index[clazz.module].append(clazz)
        
    
    function_files = markdown_file.getfunctionsfiles_list()
    for functionfile_name in function_files:
        if functionfile_name in classes_simple_name:
            continue
        functions_file = markdown_file.getfunctionsfile(functionfile_name)

# might be needed at some point?
#        functions_file.reference = str(functions_file.reference)
#        for func in function_files:
#            functions_file.reference = str.replace(functions_file.reference, class_name, "<a href=\"../"+clazz.module+"/"+class_name+".html\">"+class_name+"</a>")


        functions_to_remove = []
        for function in functions_file.function_list:
            if function.name.find("OF_DEPRECATED_MSG")!=-1:
                functions_to_remove.append(method)
        for function in functions_to_remove:
            functions_file.function_list.remove(method)
        env = {
            "modulename": functions_file.name,
            "clazz": None,
            "functions": functions_file,
            "is_addon": (functions_file.name in addon_classes) 
        }
        bf.template.materialize_template("documentation_class.mako", ('documentation',functions_file.module+"/"+functions_file.name+".html"), env )
        
        if not functions_file.module in addon_classes:
            if not functions_file.module in core_index:
                core_index[functions_file.module] = []
            core_index[functions_file.module].append(functions_file)
        else:
            if not functions_file.module in addons_index:
                addons_index[functions_file.module] = []
            addons_index[functions_file.module].append(functions_file)
        
        

    # process index file        
    bf.template.materialize_template("documentation.mako", ('documentation',"index.html"), {'core':core_index,'addons':addons_index} )
    
    for root, dirs, files in os.walk(directory):
        for name in files:
            file_split = os.path.splitext(name)
            if file_split[1]==".jpeg" or file_split[1]==".jpg" or file_split[1]==".gif" or file_split[1]==".png":
                try:
                    os.mkdir(os.path.join('_site','documentation',os.path.basename(root)))
                except:
                    pass
                shutil.copyfile(os.path.join(root,name), os.path.join('_site','documentation',os.path.basename(root),name))
                
    #html = open(documentation.dir + "/" + class_fn + ".html",'w')
    #html.write(p.content)
    #html.close()
    
            
    

########NEW FILE########
__FILENAME__ = tutorials

import os
import re
import logging

from blogofile.cache import bf
import shutil
import sys

import argparse
import glob

sys.path.append(os.getcwd()+"/_filters/asciidoc_template")
from asciidocapi import AsciiDocAPI
import logging
import StringIO
import collections


logger = logging.getLogger("blogofile.post")   

def stripFileLine(line):
    return  line.lstrip(' ').rstrip('\n').rstrip(' ')
    
class AsciiDocArticle:
    def __init__(self,asciidocpath):
        adfile = open(asciidocpath,'r')
        
        outfile = StringIO.StringIO()
        asciidoc = AsciiDocAPI()
        asciidoc.options('--no-header-footer')
        asciidoc.execute(adfile, outfile, backend='html4')
        attributes = asciidoc.asciidoc.document.attributes #.attributes.values
        
        #print attributes
        self.file = os.path.basename(asciidocpath[:asciidocpath.find('.asciidoc')]) + '.html'
        self.date = attributes['date']
        self.title = attributes['doctitle']
        self.summary = attributes['summary']
        self.author = attributes['author']
        self.author_site = attributes['author_site']
        self.body = outfile.getvalue().decode('utf-8','replace').replace('<pre>','<pre><code class="cpp">').replace('</pre>','</code></pre>')
        self.type = 'asciidoc'
        
class MarkdownArticle:
    def __init__(self,markdown):
        mdfile = open(markdown,'r')
        state = 'begin'
        self.file = os.path.basename(markdown[:markdown.find('.markdown')]) + '.html'
        self.date = ''
        self.title = ''
        self.summary = ''
        self.author = ''
        self.author_site = ''
        self.body = ''
        self.type = 'markdown'
        for line in mdfile:
            line = line.decode('utf-8','replace')
            if state=='begin' and stripFileLine(line) =='---':
                state='header'
                continue
            if state=='header' and line.find('date:')==0:
                self.date = stripFileLine(line[line.find(':')+1:])
                continue
            if state=='header' and line.find('title:')==0:
                self.title = stripFileLine(line[line.find(':')+1:])
                continue
            if state=='header' and line.find('summary:')==0:
                self.summary = stripFileLine(line[line.find(':')+1:])
                continue
            if state=='header' and line.find('author:')==0:
                self.author = stripFileLine(line[line.find(':')+1:])
                continue
            if state=='header' and line.find('author_site:')==0:
                self.author_site = stripFileLine(line[line.find(':')+1:])
                continue
            if state=='header' and stripFileLine(line)=='---':
                state = 'body'
                continue     
            if state=='body':
                self.body = self.body + line       
            

def run():
    classes = []
    directory = "_tutorials"
    documentation = bf.config.controllers.tutorials
    categories = []
    
    dirs = os.listdir(directory)
    dirs.sort()
    for catfolder in dirs:
        if not os.path.isdir(os.path.join(directory,catfolder)):
            continue
        articles = []
        category = catfolder[catfolder.find("_")+1:]
        articlesfiles = os.listdir(os.path.join(directory,catfolder));
        articlesfiles.sort()
        for article in articlesfiles:
            file_split = os.path.splitext(article)
            if file_split[1]=='.markdown':
                articleobj = MarkdownArticle(os.path.join(directory,catfolder,article))
                bf.template.materialize_template("tutorial.mako", (os.path.join('tutorials',category),articleobj.file), {'article':articleobj} )
                articles.append(articleobj)
            if file_split[1]=='.asciidoc':
                articleobj = AsciiDocArticle(os.path.join(directory,catfolder,article))
                bf.template.materialize_template("tutorial.mako", (os.path.join('tutorials',category),articleobj.file), {'article':articleobj} )
                articles.append(articleobj)
            if os.path.isdir(os.path.join(directory,catfolder,article)):
                shutil.copytree(os.path.join(directory,catfolder,article),os.path.join('_site','tutorials',category,article))
        categories.append({'category': category, 'articles': articles});
    bf.template.materialize_template("tutorials.mako", ('tutorials',"index.html"), {'categories':categories} )

########NEW FILE########
__FILENAME__ = db2markdown
#!/usr/bin/python

import os
import sys
import documentation_group
import documentation_files
import documentation_function
import documentation_members
import MySQLdb

documentation_root = "/home/arturo/Documentos/new_of_site/_documentation"

index = open(documentation_root + "/index.markdown",'w')
db = MySQLdb.connect(host='localhost',user='root',passwd='asdqwe34',db='of_site09')
adv_groups = documentation_group.list_all(db,'core',True)


def export_vars(db,clazz_file,clazz):
    variables = documentation_members.list_all_vars(db,clazz.id)
    for var in variables:
        #if var.visible and not var.advanced
        index.write(var.name+'\n\n')
        #clazz_file.write("//----------------------\n\n")
        clazz_file.write( "###" + var.type + " " + var.name + "\n\n")
        clazz_file.write( '_name: ' + var.name + '_\n\n')
        clazz_file.write( '_type: ' + var.type + '_\n\n')
        clazz_file.write( '_access: ' + var.access + '_\n\n')
        clazz_file.write( '_version_started: ' + var.version_started + '_\n\n')
        clazz_file.write( '_version_deprecated: ' + var.version_deprecated + '_\n\n')
        clazz_file.write( '_constant: ' + var.constant + '_\n\n')
        clazz_file.write( '_summary: _\n\n' )
        clazz_file.write( '_visible: ' + str(var.visible) + '_\n\n' )
        clazz_file.write( '_advanced: ' + str(var.advanced) + '_\n\n' )
        clazz_file.write( '\n\n_description: _\n\n' )
        if(var.description is not None):
            clazz_file.write( var.description.replace('[code]','\n$$code(lang=c++)\n').replace('[/code]','\n$$/code\n') + "\n\n")
        #clazz_file.write("_end " + method.name + "_\n\n")
        clazz_file.write("\n\n\n\n\n\n\n\n\n\n\n\n")
        
        
def export_methods(db,clazz_file,clazz):
    methods = documentation_members.list_all_methods(db,clazz.id)
    for method in methods:
        #if method.visible and not method.advanced
        if len(method.parameters.replace(' ',''))>0:
            index.write(method.name+'(...)\n\n')
        else:
            index.write(method.name+'()\n\n')
        #clazz_file.write("//----------------------\n\n")
        clazz_file.write( "###"+method.returns + " " + method.syntax + "\n\n")
        clazz_file.write( '_syntax: ' + method.syntax + '_\n\n')
        clazz_file.write( '_name: ' + method.name + '_\n\n')
        clazz_file.write( '_returns: ' + method.returns + '_\n\n')
        clazz_file.write( '_returns_description: ' + method.returns_description + '_\n\n')
        clazz_file.write( '_parameters: ' + method.parameters.replace('<BR/>',', ').replace('<br/>',', ') + '_\n\n')
        clazz_file.write( '_access: ' + method.access + '_\n\n')
        clazz_file.write( '_version_started: ' + method.version_started + '_\n\n')
        clazz_file.write( '_version_deprecated: ' + method.version_deprecated + '_\n\n')
        clazz_file.write( '_summary: _\n\n' )
        clazz_file.write( '_visible: ' + str(method.visible) + '_\n\n' )
        clazz_file.write( '_advanced: ' + str(method.advanced) + '_\n\n' )
        clazz_file.write( '\n\n_description: _\n\n' )
        if(method.description is not None):
            clazz_file.write( method.description.replace('[code]','\n$$code(lang=c++)\n').replace('[/code]','\n$$/code\n') + "\n\n")
        #clazz_file.write("_end " + method.name + "_\n\n")
        clazz_file.write("\n\n\n\n\n\n\n\n\n\n\n\n")

def export_classes(db,group_dir,group):
    classes = documentation_files.list_all_classes(db,group.id)
    for clazz in classes:
        print str(clazz.id) + " " + clazz.name + " " + str(clazz.new)
        clazz_file = open(group_dir+"/"+clazz.name+".markdown",'w')
		
        index.write('###' + clazz.name + '###\n\n')
        index.write('__visible: ' + ('true' if clazz.visible else 'false' ) + '__\n\n')            
        index.write('__advanced: ' + ('true' if clazz.advanced else 'false' ) + '__\n\n')            
        index.write('__methods__\n\n')
	
        #clazz_file.write( '<%inherit file="_templates/documentation.mako" />\n' )
        clazz_file.write( '#class ' + clazz.name + "\n\n" )
        
        
        #clazz_file.write("//----------------------\n\n")
        clazz_file.write( "##Description\n\n\n\n" )
        #clazz_file.write("//----------------------\n\n")
        #clazz_file.write( "##Reference\n\n\n\n" )
        clazz_file.write(clazz.reference.replace('[code]','\n$$code(lang=c++)\n').replace('[/code]','\n$$/code\n')  + "\n\n")
        #clazz_file.write("//----------------------\n\n")
        clazz_file.write( "##Methods\n\n\n\n" )
        
        export_methods(db,clazz_file,clazz)
        
                 
        index.write('__variables__\n\n')
        #clazz_file.write("//----------------------\n\n")
        clazz_file.write( "##Variables\n\n\n\n" )
        export_vars(db,clazz_file,clazz)
		
        clazz_file.close()	

def export_groups(db,advanced):
    groups = documentation_group.list_all(db,'core',advanced)
    for group in groups:
        print str(group.id) + " " + group.name
        group_dir = documentation_root + "/" + group.name.replace(' ','_')
        #index.write("//----------------------\n\n")
        index.write("##" + group.name + "##\n\n")
        try:
            os.mkdir(group_dir)
        except:
            pass
        export_classes(db,group_dir,group)
        


#index.write( '<%inherit file="_templates/documentation.mako" />\n' )
index.write( '\n' )
export_groups(db,False)
export_groups(db,True)
index.close()

########NEW FILE########
__FILENAME__ = dbfunctions2markdown
#!/usr/bin/python

import os
import sys

sys.path.append('_tools')

import documentation_group
import dbtools_group
import dbtools_files
import dbtools_functions
import documentation_members
from documentation_function import DocsFunctionsFile, DocsFunction
import MySQLdb
import markdown_file


documentation_root = "/home/arturo/Documentos/new_of_site/_documentation"

#index = open(documentation_root + "/index.markdown",'w')
db = MySQLdb.connect(host='localhost',user='root',passwd='asdqwe34',db='of_site09')
adv_groups = dbtools_group.list_all(db,'core',True)

def export_functionsfiles(db,group_dir,group):
    dbfiles = dbtools_files.list_all(db,group.id)
    
    for dbfile in dbfiles:
        functions = dbtools_functions.list_all(db,dbfile[0],'files')
        if len(functions)>0:
            print dbfile[1]
            functionsfile = DocsFunctionsFile(dbfile[0])
            functionsfile.module = group.name
            functionsfile.name = dbfile[1]
            functionsfile.new = 0
            functionsfile.advanced = False
            functionsfile.visible = True
            functionsfile.description = dbfile[2]
            functionsfile.addons = False
            functionsfile.function_list = functions
            for function in functions:
                print "    " + function.name
            markdown_file.setfunctionsfile(functionsfile)

def export_groups(db,advanced):
    groups = dbtools_group.list_all(db,'core',advanced)
    for group in groups:
        print str(group.id) + " " + group.name
        group_dir = documentation_root + "/" + group.name.replace(' ','_')
        try:
            os.mkdir(group_dir)
        except:
            pass
        export_functionsfiles(db,group_dir,group)
        

export_groups(db,False)
export_groups(db,True)
#index.close()

########NEW FILE########
__FILENAME__ = dbtools

########NEW FILE########
__FILENAME__ = dbtools_class
import MySQLdb
from HTMLTemplate import Template
        
def list_all(db,fileid):
    cursor=db.cursor()
    sql='SELECT id,name,visible,advanced FROM documentation_class WHERE fileid=%s '
    cursor.execute(sql,(fileid,))
    classes=cursor.fetchall()
    class_list = []
    for dbclass in classes:
        clazz = DocsClass(dbclass[0])
        clazz.name = dbclass[1]
        clazz.visible = dbclass[2]
        clazz.advanced = dbclass[3]
    return classes

def getClass(db,classid):
    cursor=db.cursor()
    sql='SELECT name,description FROM documentation_class WHERE id=%s'
    cursor.execute(sql,(classid,))
    clazz=cursor.fetchall()
    documentation_class = DocsClass(classid)
    documentation_class.name = clazz[0][0]
    documentation_class.reference = clazz[0][1]
    return documentation_class

def renderFunctionsDetail(htmlFunction, function):
    htmlFunction.name.content = function.name
    htmlFunction.description.content = function.description
    htmlFunction.syntax.content = function.syntax

def renderClassDetail(tem,clazz):
    tem.documentation_class.name.content = clazz.name
    tem.documentation_class.description.content = clazz.description
    tem.documentation_class.function.repeat(renderFunctionsDetail,clazz.functions())

def class_detail():
    try:
        templates_path = str(os.path.join(os.path.dirname(__file__), 'templates'))

        file = open(templates_path + '/class.html')
        db=MySQLdb.connect(host='localhost',user='root',passwd='asdqwe34',db='of_site09')

        template = Template(renderClassDetail, str(file.read()))
        clazz = getClass(db, 1)
        html = str(template.render(clazz))

    except Exception as inst:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        error = str(inst)           # __str__ allows args to printed directly
        error += "<br/>"
        error += str(traceback.format_exception(exc_type, exc_value,
                                          exc_traceback))
        error.replace('\n',"<br/>")

        return "Unexpected error:<br/>", error
    return [html]


def application(environ, start_response):
    template = ""
    try:
        start_response('200 OK', [('Content-Type', 'text/html')])

        html = class_detail()

    except Exception as inst:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        error = str(inst)           # __str__ allows args to printed directly
        error += "<br/>"
        error += repr(traceback.format_exception(exc_type, exc_value,
                                          exc_traceback))
        error.replace('\n',"<br/>")

        return "Unexpected error:<br/>", error
    return html

if __name__ == '__main__':
    from wsgiref.handlers import CGIHandler
    CGIHandler().run(application)

########NEW FILE########
__FILENAME__ = dbtools_files
import documentation_class
from documentation_class import DocsClass
import documentation_function
from documentation_function import DocsFunction

def names(db,advanced):
    cursor=db.cursor()
    sql='SELECT id,name FROM documentation_files WHERE advanced=%s'
    cursor.execute(sql,(advanced,))
    files=cursor.fetchall()
    return files
    
def list_all(db,groupid):
    cursor=db.cursor()
    sql='SELECT id,name,description FROM documentation_files WHERE groupid=%s'
    cursor.execute(sql,(groupid,))
    files=cursor.fetchall()
    return files
    

def list_all_classes(db,groupid):
    cursor=db.cursor()
    sql='SELECT c.id,c.name,c.description,c.advanced,c.visible FROM documentation_class c JOIN documentation_files f WHERE c.fileid=f.id and f.groupid=%s ORDER BY f.sortid, c.sortid'
    cursor.execute(sql,(groupid))
    classes=cursor.fetchall()
    class_list = []
    for dbclass in classes:
        clazz = DocsClass(dbclass[0])
        clazz.name = dbclass[1]
        clazz.reference = dbclass[2]
        clazz.advanced = dbclass[3]
        clazz.visible = dbclass[4]
        #clazz.function_list = documentation_function.list_all(db,dbclass[0])
        class_list.append(clazz)
    return class_list

def list_all_functions(db,groupid,advanced):
    cursor=db.cursor()
    sql='SELECT c.id,c.name FROM documentation_functions c JOIN documentation_files f WHERE c.linkid=f.id and f.groupid=%s and f.advanced=%s and c.advanced=%s and f.visible=1 and c.visible=1 and c.linktable="files" ORDER BY f.sortid, c.sortid'
    cursor.execute(sql,(groupid,advanced,advanced,))
    functions=cursor.fetchall()
    function_list = []
    for dbfunction in functions:
        function = DocsFunction(dbfunction[0])
        function.name = dbfunction[1]
        function_list.append(function)
    return function_list

########NEW FILE########
__FILENAME__ = dbtools_function

def names(db,classid,advanced):
    cursor=db.cursor()
    sql='SELECT id,name FROM documentation_functions WHERE linktable="class" and linkid= %s and advanced=%s'
    cursor.execute(sql,(classid,advanced))
    functions=cursor.fetchall()
    return functions

def list_all(db,classid,advanced):
    cursor=db.cursor()
    sql='SELECT id,name FROM documentation_functions WHERE linkid=%s and linktable="class" and advanced=%s and visible=1 ORDER BY sortid'
    cursor.execute(sql,(classid,advanced,))
    functions=cursor.fetchall()
    function_list = []
    for dbfunction in functions:
        function = DocsFunction(dbfunction[0])
        function.name = dbfunction[1]
        function.new = 1
        function_list.append(function)
    return function_list

########NEW FILE########
__FILENAME__ = dbtools_functions
import MySQLdb
from documentation_function import DocsFunction

        
def tostr(string):
    if string is None:
        return ""
    else:
        return str(string)

def names(db,classid,linktable="class"):
    cursor=db.cursor()
    sql='SELECT name FROM documentation_functions WHERE linktable=%s and linkid= %s'
    cursor.execute(sql,(linktable,classid,))
    
    functions=cursor.fetchall()
    return functions
    
def list_all(db,linkid,linktable='class'):
    cursor=db.cursor()
    sql='SELECT id,name,description,returns,returns_description,parameters,syntax,version_started,version_deprecated,visible,advanced FROM documentation_functions WHERE linktable=%s and linkid= %s'
    cursor.execute(sql,(linktable,linkid,))
    dbfunctions = cursor.fetchall()
    functions = []
    for dbfunction in dbfunctions:
        function = DocsFunction(dbfunction[0])
        function.new = 0
        function.name = dbfunction[1]
        function.description = str(dbfunction[2]).replace('[code]','\n$$code(lang=c++)\n').replace('[/code]','\n$$/code\n') + "\n\n"
        if(dbfunction[3]==""):
            function.returns = "void"
        else:
            function.returns = tostr(dbfunction[3])
        function.returns_description = str(dbfunction[4]).replace('\n',' ')
        function.parameters = dbfunction[5].replace('<BR/>',', ').replace('<br/>',', ')
        function.syntax = dbfunction[6]
        if(dbfunction[7]==0 or dbfunction[7] is None):
            function.version_started = "006"
        else:
            function.version_started = tostr(dbfunction[7])
        if(dbfunction[8]==0 or dbfunction[8] is None):
            function.version_deprecated = ""
        else:
            function.version_deprecated = tostr(dbfunction[8])
        function.visible = dbfunction[9]
        function.advanced = dbfunction[10]
        
        functions.append(function)

    return functions

########NEW FILE########
__FILENAME__ = dbtools_group
from documentation_group import DocsGroup
import dbtools_files

def list_all(db,type,advanced):
    cursor=db.cursor()
    sql='SELECT id,name FROM documentation_group WHERE type=%s and advanced=%s and visible=1 ORDER BY sortid'
    cursor.execute(sql,(type,advanced,))
    groups=cursor.fetchall()
    groups_list = []
    for dbgroup in groups:
        group = DocsGroup(dbgroup[0])
        group.name = dbgroup[1]
        group.class_list = dbtools_files.list_all_classes(db,dbgroup[0])
        group.function_list = dbtools_files.list_all_functions(db,dbgroup[0],advanced)
        groups_list.append(group)
    return groups_list

########NEW FILE########
__FILENAME__ = dbtools_members
        
def tostr(string):
    if string is None:
        return ""
    else:
        return str(string)

def names(db,classid,advanced):
    cursor=db.cursor()
    sql='SELECT id,name FROM documentation_functions WHERE linktable="class" and linkid= %s and advanced=%s'
    cursor.execute(sql,(classid,advanced))
    functions=cursor.fetchall()
    return functions

def list_all_methods(db,classid):
    cursor=db.cursor()
    sql='SELECT id,name,returns,parameters,description,syntax,returns_description,access,version_started,version_deprecated,extra_description,visible,advanced FROM documentation_functions WHERE  linktable="class" and linkid=%s ORDER BY sortid'
    cursor.execute(sql,(classid,))
    functions=cursor.fetchall()
    function_list = []
    for dbfunction in functions:
        function = DocsMethod(dbfunction[0])
        function.name = tostr(dbfunction[1])
        if(dbfunction[2]==""):
            function.returns = "void"
        else:
            function.returns = tostr(dbfunction[2])
        function.parameters = tostr(dbfunction[3])
        function.description = tostr(dbfunction[4]) + "\n\n" + tostr(dbfunction[10])
        function.syntax = tostr(dbfunction[5])
        function.returns_description = tostr(dbfunction[6])
        function.access = tostr(dbfunction[7])
        if(dbfunction[8]==0 or dbfunction[8] is None):
            function.version_started = "006"
        else:
            function.version_started = tostr(dbfunction[8])
        if(dbfunction[9]==0 or dbfunction[9] is None):
            function.version_deprecated = ""
        else:
            function.version_deprecated = tostr(dbfunction[9])
        function.visible = tostr(dbfunction[11])
        function.advanced = tostr(dbfunction[12])
        function_list.append(function)
    return function_list
    
def list_all_vars(db,classid):
    cursor=db.cursor()
    sql='SELECT id,name,type,description,access,version_started,version_deprecated,constant,visible,advanced FROM documentation_vars WHERE  linktable="class" and linkid=%s ORDER BY sortid'
    cursor.execute(sql,(classid,))
    variables=cursor.fetchall()
    variables_list = []
    for dbvar in variables:
        var = DocsVar(dbvar[0])
        var.name = tostr(dbvar[1])
        var.type = tostr(dbvar[2])
        var.description = tostr(dbvar[3])
        var.access = tostr(dbvar[4])
        if(dbvar[5]==0 or dbvar[5] is None):
            var.version_started = "006"
        else:
            var.version_started = tostr(dbvar[5])
        if(dbvar[6]==0 or dbvar[6] is None):
            var.version_deprecated = ""
        else:
            var.version_deprecated = tostr(dbvar[6])
        var.constant = tostr(dbvar[7])
        var.visible = tostr(dbvar[8])
        var.advanced = tostr(dbvar[9])
        variables_list.append(var)
    return variables_list
    
    

########NEW FILE########
__FILENAME__ = dbtools_method
        
def tostr(string):
    if string is None:
        return ""
    else:
        return str(string)

def names(db,classid,advanced):
    cursor=db.cursor()
    sql='SELECT id,name FROM documentation_functions WHERE linktable="class" and linkid= %s and advanced=%s'
    cursor.execute(sql,(classid,advanced))
    functions=cursor.fetchall()
    return functions

def list_all(db,classid,advanced):
    cursor=db.cursor()
    sql='SELECT id,name,returns,parameters,description,syntax,returns_description,extra_description FROM documentation_functions WHERE  linktable="class" and linkid=%s and advanced=%s ORDER BY sortid'
    cursor.execute(sql,(classid,advanced,))
    functions=cursor.fetchall()
    function_list = []
    for dbfunction in functions:
        function = DocsMethod(dbfunction[0])
        function.name = tostr(dbfunction[1])
        if(dbfunction[2]==""):
            function.returns = "void"
        else:
            function.returns = tostr(dbfunction[2])
        function.parameters = tostr(dbfunction[3])
        function.description = tostr(dbfunction[4]) + "\n\n" + tostr(dbfunction[7])
        function.syntax = dbfunction[5]
        function.returns_description = tostr(dbfunction[6])
        function_list.append(function)
    return function_list

########NEW FILE########
__FILENAME__ = HTMLTemplate
"""HTMLTemplate - A fast, powerful, easy-to-use HTML templating system.

Copyright (C) 2004-2008 HAS

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

__all__ = ['ParseError', 'Node', 'Template']

from HTMLParser import HTMLParser
from keyword import kwlist
import re, sys


#################################################
# SUPPORT
#################################################

def renderAtts(atts):
    # Renders an HTML tag's attributes from a list of name-value tuples.
    result = ''
    for name, value in atts:
        if value is None:
            result += ' ' + name
        elif '"' in value:
            result += " %s='%s'" % (name, value)
        else:
            result += ' %s="%s"' % (name, value)
    return result


def defaultEncoder(txt):
    # Used to HTML-encode value in 'node.content = value'.
    return txt.replace('&', '&amp;').replace(
            '<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')

def defaultDecoder(txt):
    # Used to HTML-decode content in 'value = node.content'.
    return txt.replace('&quot;', '"').replace(
            '&lt;', '<').replace('&gt;', '>').replace('&amp;', '&')


#################################################
# TEMPLATE PARSER
#################################################

class ParseError(Exception):
    """A template parsing error."""
    pass


class ElementCollector:
    # Collects a node's type, name and content as it's parsed. 
    # When end of node is reached, the collected data is used
    # to construct a Template/Repeater/Container instance.

    def __init__(self, *args):
        self.nodeType, self.nodeName, self.tagName, self.atts, \
                self.isEmpty, self.omitTags, self.shouldDelete = args
        self.content = ['']
        self.elementNames = {}
        self.__depth = 1
    
    # Methods used to track nested tags of same tag name; used to locate
    # close tag that marks the end of this node.
    
    def incDepth(self):
        self.__depth += 1
        
    def decDepth(self):
        self.__depth -= 1
        
    def isComplete(self):
        return self.__depth < 1
    
    # Methods used to collect plain HTML and any sub-nodes.
    
    def addText(self, txt):
        self.content[-1] += txt
        
    def addElement(self, node, nodeType, nodeName):
        self.content.extend([node, ''])
        self.elementNames[nodeName] = nodeType


class Parser(HTMLParser):

    def unescape(self, s):
        # kludge: avoid HTMLParser's stupid mangling of attribute values
        return s
        
    # Handles parsing events sent by parseTemplate() as it processes
    # a template string. Collects data in ElementCollector instances, 
    # then converts these into Template/Repeater/Container objects
    # which it assembles into a finished object model. Stack-based.

    # Regular expressions used to match special tag attributes, 
    # a.k.a. template compiler directives, that indicate an HTML
    # element should be converted into a template node.
    __specialAttValuePattern = re.compile('(-)?(con|rep|sep|del):(.*)')
    __validNodeNamePattern = re.compile('[a-zA-Z][_a-zA-Z0-9]*')

    # List of words already used as property and method names,
    # so cannot be used as template node names as well:
    __invalidNodeNames = kwlist + [
            'content', 'raw', 'atts', 'omittags', 'omit', 'repeat', 'render']
    
    def __init__(self, attribute, encoder, decoder, warn):
        HTMLParser.__init__(self)
        self.__specialAttributeName = attribute
        self.__encoder = encoder
        self.__decoder = decoder
        self.__warn = warn
        # Each node's content is collected in an ElementCollector instance
        # that's stored in the __outputStack stack while it's being parsed. 
        # Once the end of the node is found, the ElementCollector's content
        # is used to create an instance of the appropriate node class, which
        # is then added to previous ElementCollector in the stack (i.e. the
        # collector for its parent node).
        self.__outputStack = [
                ElementCollector('tem', '', None, None, False, False, False)]
    
    def __isSpecialTag(self, atts, specialAttName):
        # Determines if any of an HTML tag's attributes are
        # compiler directives.
        for name, value in atts:
            if name == specialAttName:
                matchedValue = self.__specialAttValuePattern.match(value)
                if matchedValue:
                    atts = dict(atts)
                    del atts[specialAttName]
                    omitTags, nodeType, nodeName = matchedValue.groups()
                    return True, nodeType, nodeName, omitTags, atts
                elif self.__warn:
                   from warnings import warn
                   warn("Non-directive tag attribute found: %s=%r" 
                           % (name, value))
        return False, '', '', False, renderAtts(atts)
    
    def __startTag(self, tagName, atts, isEmpty):
        # Process an HTML tag that marks the start of an HTML element, 
        # i.e. <foo> or <foo/>. If the tag contains a compiler directive,
        # start collecting the element's content to be turned into a 
        # template node, otherwise reassemble it as regular HTML markup.
        node = self.__outputStack[-1]
        if node.shouldDelete:
            isSpecial = 0
        else:
            isSpecial, nodeType, nodeName, omitTags, atts = \
                    self.__isSpecialTag(atts, self. __specialAttributeName)
        if isSpecial:
            # Verify node name is legal, then process according to 
            # directive's type (con, rep, sep, del).
            if nodeType != 'del' and (
                    not self.__validNodeNamePattern.match(nodeName) 
                    or nodeName in self.__invalidNodeNames):
                raise ParseError, "Invalid node name: %r" % nodeName
            shouldDelete = nodeType == 'del'
            if node.elementNames.has_key(nodeName):
                if node.elementNames[nodeName] == nodeType:
                    shouldDelete = True
                elif nodeType != 'sep':
                    raise ParseError, ("Invalid node name: %s:%s " 
                            "(node %s:%s already found).") % (nodeType,  
                            nodeName, node.elementNames[nodeName], nodeName)
            self.__outputStack.append(ElementCollector(nodeType, nodeName, 
                    tagName, atts, isEmpty, omitTags, shouldDelete))
        else:
            if node.tagName == tagName:
                # Keep track of nested open tags of same name.
                node.incDepth()
            if not node.shouldDelete:
                if isEmpty:
                    endOfOpenTag = ' />'
                else:
                    endOfOpenTag = '>'
                node.addText('<' + tagName + atts + endOfOpenTag)
    
    def __hasCompletedElement(self, element, parent):
        # Called by __endTag when it finds the close tag that ends an HTML
        # element denoting a template node.
        if element.isEmpty:
            content = []
        else:
            content = element.content
        if element.nodeType in ['con', 'rep']:
            node = makeNode(
                    element.nodeType, element.nodeName, element.tagName, 
                    element.atts, content, self.__encoder, self.__decoder)
            if element.omitTags:
                node.omittags()
            parent.addElement(node, element.nodeType, element.nodeName)
        else: # element.nodeType == 'sep'
            # Add this separator to its repeater
            for node in parent.content[1::2]:
                if node._nodeName == element.nodeName:
                    if node._nodeType != 'rep':
                        raise ParseError, ("Can't process separator node "
                                "'sep:%s': repeater node 'rep:%s' wasn't "
                                "found. Found node '%s:%s' instead.") % (
                                element.nodeName, element.nodeName, 
                                element.nodeType, element.nodeName)
                    if element.omitTags:
                        if content:
                            node._sep = content[0]
                        else:
                            node._sep = ''
                    else:
                        if content:
                            node._sep = '<%s%s>%s</%s>' % (element.tagName, 
                                    renderAtts(element.atts.items()), # FIXED
                                    content[0], element.tagName)
                        else:
                            node._sep = '<%s%s />' % (element.tagName, 
                                    renderAtts(element.atts.items())) # FIXED
                    return
            raise ParseError, ("Can't process separator node 'sep:%s' in node "
                    "'%s:%s': repeater node 'rep:%s' wasn't found.") % (
                    element.nodeName, parent.nodeType, parent.nodeName, 
                    element.nodeName)
    
    def __endTag(self, tagName, isEmpty):
        # Process an end tag that closes an HTML element, i.e. </foo> or 
        # <foo/>. If the tag closes an HTML element representing a template
        # node, call __hasCompletedElement() to finish that node's creation.
        node = self.__outputStack[-1]
        if node.tagName == tagName:
            # Keep track of nested close tags of same name.
            node.decDepth()
        if node.isComplete():
            self.__outputStack.pop()
            if not node.shouldDelete:
                parent = self.__outputStack[-1]
                self.__hasCompletedElement(node, parent)
        elif not isEmpty:
            node.addText('</%s>' % tagName)

    def __addText(self, txt):
        self.__outputStack[-1].addText(txt)
    
    # event handlers; called by HTMLParser base class.

    def handle_startendtag(self, tagName, atts):
        self.__startTag(tagName, atts, True)
        self.__endTag(tagName, True)

    def handle_starttag(self, tagName, atts):
        self.__startTag(tagName, atts, False)

    def handle_endtag(self, tagName):
        self.__endTag(tagName, False)

    def handle_charref(self, txt):
        self.__addText('&#%s;' % txt)

    def handle_entityref(self, txt):
        self.__addText('&%s;' % txt)

    def handle_data(self, txt):
        self.__addText(txt)

    def handle_comment(self, txt):
        self.__addText('<!--%s-->' % txt)

    def handle_decl(self, txt):
        self.__addText('<!%s>' % txt)

    def handle_pi(self, txt):
        self.__addText('<?%s>' % txt)
    
    def result(self):
        # Get content of template's ElementCollector once parsing is done.
        element = self.__outputStack.pop()
        if element.nodeType != 'tem':
            raise ParseError, ("Can't complete template: node '%s:%s' wasn't "
                    "correctly closed.") % (element.nodeType, element.nodeName)
        #if len(element.content) == 1:
        #    raise ParseError, "No special %r attributes were found." % (
        #            self. __specialAttributeName)
        return element.content


#################################################
# OBJECT MODEL CLASSES
#################################################

# Note: HTMLTemplate implements its own performance-optimised object copying 
# system which is much faster than standard lib's general-purpose deepcopy().
# All cloning and rendering code is optimised for speed over grokability.

# To summarise, cloning and rendering involves bouncing between a template
# node's various base classes to perform the various steps of each operation
# with child nodes being processed recursively. When cloning, all child nodes
# are cloned as a single operation. When rendering, rather than wait until all
# processing is complete, Repeaters perform a mini-render of their content
# as soon as they finish rendering each clone of themselves. This reduces
# the number of template object instances that build up during rendering,
# reducing memory overheads, and is a bit faster than performing two separate
# traversals, one to call the template's Controller functions to insert 
# content, and another to traverse the (by now very large) template object
# model to extract the finished HTML. 

# Note that the one disadvantage of using incremental rendering is that it 
# makes it awkward for an asynchronous system to acquire new template objects 
# in advance and put them into storage for later processing. By the time the 
# system digs these nodes back out of storage and fills them in, their content
# has long since been rendered by some Repeater node, so any further changes
# will not appear in the final page. Should anyone ever need to use 
# HTMLTemplate in this fashion they can, of course, redesign the rendering
# system so that all nodes created remain viable until a final, separate 
# 'render everything' message is sent through the entire object model, but
# it'll obviously cost extra in both performance and memory overheads - 
# which is why it's not used as the standard operating model.

class CloneNode(object):
    """Makes cloned nodes."""
    def __init__(self, node):
        self.__dict__ = node.__dict__.copy()
        self.__class__ = node.__class__

# Node classes provide the basic functionality for a template node, with
# additional functionality being added by the Content classes. The Python
# implementation uses multiple inheritance to compose these behaviours;
# languages with native support for mixins or delegates may find those
# more appropriate (and easier for developers to follow).

class Node:
    """Abstract base class for template nodes; used for type checking when 
       user replaces an existing template node with a new one.
    """
    pass

class Container(Node):
    """A Container node has a one-to-one relationship with the node 
       that contains it.
    """
    
    _nodeType = 'con'
    
    def __init__(self, nodeName, tagName, atts):
        self._nodeName = nodeName
        self._atts = dict(atts) # On cloning, shallow copy this dict.
        if isinstance(self, NullContent):
            self.__startTag = '<%s%%s />' % tagName
            self.__endTag = ''
        else:
            self.__startTag = '<%s%%s>' % tagName
            self.__endTag = '</%s>' % tagName
        self.__omitTags = False
        self._omit = False
    
    def _clone(self):
        clone = CloneNode(self)
        clone._atts = self._atts.copy()
        return clone
    
    def _renderNode(self, collector):
        # Adds node's content to supplied collector list. Tags are added
        # here; PlainContent/RichContent's _renderContent() adds content.
        if self.__omitTags:
            self._renderContent(collector)
        else:
            collector.append(self.__startTag % renderAtts(self._atts.items()))
            self._renderContent(collector)
            collector.append(self.__endTag)

    def _render(self, collector):
        # Called by parent node to render this node and all its contents.
        if not self._omit:
            self._renderNode(collector)
    
    def __attsGet(self):
        return Attributes(self._atts, self._encode, self._decode)
    
    def __attsSet(self, val):
        self._atts = {}
        atts = Attributes(self._atts, self._encode, self._decode)
        for name, value in val.items():
            atts[name] = value
    
    atts = property(__attsGet, __attsSet, 
            doc="Get this element's tag attributes.")
    
    def omittags(self):
        """Don't render this element's tag(s)."""
        self.__omitTags = True
    
    def omit(self):
        """Don't render this element."""
        self._omit = True


class Repeater(Container):
    """A Repeater node has a one-to-many relationship with the node
       that contains it.
    """
    
    _nodeType = 'rep'
    
    def __init__(self, nodeName, tagName, atts):
        self._sep = '\n'
        self.__renderedContent = [] # On cloning, shallow-copy this list.
        Container.__init__(self, nodeName, tagName, atts)
        
    _fastClone = Container._clone
    
    def _clone(self):
        clone = Container._clone(self)
        clone.__renderedContent = self.__renderedContent[:]
        return clone
    
    def _render(self, collector):
        # Called by parent node to render this node and all its contents.
        if not self._omit:
            collector.extend(self.__renderedContent[1:])
    
    def repeat(self, fn, list, *args):
        """Render an instance of this node for each item in list."""
        self.__renderedContent = collector = [] # replaces any previous content
        # For each item in list, copy this node and pass it and the list item 
        # to the supplied callback function. Once the function has finished
        # inserting data into the cloned node, perform a mini-render of its
        # content and add the result to self.__renderedContent - where it will
        # remain until the original node is finally rendered by its parent.
        for item in list:
            clone = self._fastClone()
            fn(clone, item, *args)
            if not clone._omit:
                collector.append(clone._sep)
                clone._renderNode(collector)

##

class Attributes:
    """Public facade for modifying a node's tag attributes. Behaves like
       a much simplified dict object. Vended by Node's atts property.
    """
    
    __attNamePattern = re.compile('^[a-zA-Z_][-.:a-zA-Z_0-9]*$')
    
    def __init__(self, atts, encoder, decoder):
        self.__atts = atts # The Node's tag attributes dict.
        self.__encode = encoder
        self.__decode = decoder
    
    def __getitem__(self, name):
        return self.__decode(self.__atts[name])
        
    def __setitem__(self, name, val):
        try:
            if not self.__attNamePattern.match(name): # Note: this 
            # will throw a TypeError if 'name' is not string/unicode.
                raise KeyError, "bad name."
            if val != None:
                if not isinstance(val, basestring):
                    raise TypeError, "bad value: %r" % val
                val = self.__encode(val)
                if '"' in val and "'" in val:
                    raise ValueError, "value %r contains " \
                            "both single and double quotes." % val
            self.__atts[name] = val
        except Exception, e:
            msg = str(e)
            if not isinstance(name, basestring):
                msg = "bad name."
            raise e.__class__, "Can't set tag attribute %r: %s" % (name, msg)
        
    def __delitem__(self, name):
        del self.__atts[name]
    
    def __repr__(self):
        return '<Attributes [%s]>' % renderAtts(self.__atts.items())[1:]


#######

# Content classes provide nodes representing non-empty HTML elements with
# support for containing plain HTML content/sub-nodes.

class Content(object):
    def __init__(self, encoder, decoder):
        self._encode = encoder
        self._decode = decoder
    
    def _printStructure(self, indent):
        print >> sys.stderr, indent + self._nodeType + ':' + self._nodeName

##

class NullContent(Content):
    """Represents an empty HTML element's non-existent content."""
    
    def _renderContent(self, collector):
        pass


class PlainContent(Content):
    """Represents a non-empty HTML element's content where it contains plain 
       text/markup only.
    """
    
    def __init__(self, content, encoder, decoder):
        Content.__init__(self, encoder, decoder)
        self.raw = content # Get/Set this element's content as raw markup;
        # use with care.
        
    def _renderContent(self, collector):
        # Called by Node classes to add HTML element's content.
        collector.append(self.raw)
    
    def __contentGet(self):
        return self._decode(self.raw)
    
    def __contentSet(self, txt):
        self.raw = self._encode(txt)
    
    content = property(__contentGet, __contentSet, 
            doc="Get/Set this element's content as escaped text.")


class RichContent(Content):
    """Represents a non-empty HTML element's content where it contains other 
       Container/Repeater nodes.
    """
    
    __validIdentifierPattern = re.compile('^[a-zA-Z_][a-zA-Z_0-9]*$')
    
    # KLUDGE: The following line keeps Python 2.3 sweet while it instantiates 
    # instances of this class; without it, the process crashes hard as 
    # __init__ conflicts with __setattr__.
    __nodesDict = {}
    
    def __init__(self, content, encoder, decoder):
        Content.__init__(self, encoder, decoder)
        self.__nodesList = content # On cloning, deep copy this list.
        self.__nodesDict = dict(
                [(node._nodeName, node) for node in content[1::2]]) # (On clon-
        # ing: replace with a new dict built from cloned self.__nodesList.)
    
    def __rawGet(self):
        if self.__nodesDict:
            raise RuntimeError, ("Can't get raw/content of a node that "
                    "contains other nodes.")
        else:
            return self.__nodesList[0]
    
    # Note: property setting is done by __setattr__(), which takes precedence
    # over property-based setters for some reason.
    
    raw = property(__rawGet, 
            doc="Get/Set this element's raw content.")
    
    content = property(lambda self:self._decode(self.__rawGet()),
            doc="Get/Set this element's content as escaped text.")
    
    def _initRichClone(self, clone):
        # Once node is cloned, this is called to clone its sub-nodes.
        clone.__nodesDict = {}
        L = clone.__nodesList = self.__nodesList[:]
        for i in range(1, len(L), 2):
            clone.__nodesDict[L[i]._nodeName] = L[i] = L[i]._clone()
        return clone
    
    def _renderContent(self, collector):
        # Called by Node classes to add HTML element's content.
        L = self.__nodesList
        collector.append(L[0])
        for i in range(1, len(L), 2):
            L[i]._render(collector)
            collector.append(L[i + 1])
    
    def _printStructure(self, indent):
        Content._printStructure(self, indent)
        for node in self.__nodesList[1::2]:
            node._printStructure(indent + '\t')
    
    def __getattr__(self, name):
        # Get a sub-node.
        if self.__nodesDict.has_key(name):
            return self.__nodesDict[name]
        else:
            raise AttributeError , "%s instance has no attribute %r." % (
                    self.__class__.__name__, name)
    
    def __setattr__(self, name, value):
        # Replace a sub-node, or replace node's content.
        if self.__nodesDict.has_key(name):
            if not isinstance(value, Node):
                # Note: This type check is to catch careless user mistakes like
                # 'node.foo = "text"' instead of  'node.foo.content = "text"'
                raise TypeError, ("Can't replace node '%s:%s': value isn't a "
                        "Node object.") % (self.__nodesDict[name]._nodeType,
                         self.__nodesDict[name]._nodeName)
            value = value._clone() 
            value._nodeName = name
            idx = self.__nodesList.index(self.__nodesDict[name])
            self.__nodesDict[name] = self.__nodesList[idx] = value
        elif name == 'content':
            self.__nodesList = [self._encode(value)]
            self.__nodesDict = {}
        elif name == 'raw':
            self.__nodesList = [value]
            self.__nodesDict = {}
        else:
            self.__dict__[name] = value


#######
# Note: Container and Repeater objects are instantiated via the makeNode()
# constructor function. This returns the appropriate class for the content 
# supplied ('abstract factory'). Container and Repeater nodes are actually
# represented by three different classes apiece, depending on whether they
# represent empty or non-empty HTML elements and, in the case of the latter,
# whether or not they contain any sub-nodes. The documentation glosses over
# these details for simplicity, since the user doesn't need to know the
# exact class of a node in order to use it.

class EmptyContainer(NullContent, Container):
    def __init__(self, nodeName, tagName, atts, content, encoder, decoder):
        NullContent.__init__(self, encoder, decoder)
        Container.__init__(self, nodeName, tagName, atts)


class PlainContainer(PlainContent, Container):
    def __init__(self, nodeName, tagName, atts, content, encoder, decoder):
        PlainContent.__init__(self, content[0], encoder, decoder)
        Container.__init__(self, nodeName, tagName, atts)


class RichContainer(RichContent, Container):
    def __init__(self, nodeName, tagName, atts, content, encoder, decoder):
        RichContent.__init__(self, content, encoder, decoder)
        Container.__init__(self, nodeName, tagName, atts)
        
    def _clone(self):
        return self._initRichClone(Container._clone(self))

##

class EmptyRepeater(NullContent, Repeater):
    def __init__(self, nodeName, tagName, atts, content, encoder, decoder):
        NullContent.__init__(self, encoder, decoder)
        Repeater.__init__(self, nodeName, tagName, atts)


class PlainRepeater(PlainContent, Repeater):
    def __init__(self, nodeName, tagName, atts, content, encoder, decoder):
        PlainContent.__init__(self, content[0], encoder, decoder)
        Repeater.__init__(self, nodeName, tagName, atts)


class RichRepeater(RichContent, Repeater):
    def __init__(self, nodeName, tagName, atts, content, encoder, decoder):
        RichContent.__init__(self, content, encoder, decoder)
        Repeater.__init__(self, nodeName, tagName, atts)
        
    def _clone(self):
        return self._initRichClone(Repeater._clone(self))
        
    def _fastClone(self):
        return self._initRichClone(Repeater._fastClone(self))

##

__nodeClasses = {
        'con': {'empty': EmptyContainer, 
                'plain': PlainContainer, 
                'rich': RichContainer},
        'rep': {'empty': EmptyRepeater, 
                'plain': PlainRepeater, 
                'rich': RichRepeater}}

def makeNode(nodeType, nodeName, tagName, atts, content, encoder, decoder):
    # Called by template parser.
    return __nodeClasses[nodeType][{0: 'empty', 1: 'plain'}.get(len(content), 
            'rich')](nodeName, tagName, atts, content, encoder, decoder)


#################################################
# MAIN
#################################################

class Template(RichContent):
    """The top-level (i.e. root) node of the template object model."""
    
    _nodeType = 'tem'
    _nodeName = ''
    
    def __init__(self, callback, html, attribute='node', 
            codecs=(defaultEncoder, defaultDecoder), warnings=False):
        """
            callback : function -- the function that controls how this
                    template is rendered
            html : string or unicode -- the template HTML
            [attribute : string or unicode] -- name of the tag attribute used
                    to hold compiler directives
            [codecs : tuple] -- a tuple containing two functions used by the 
                    content property to encode/decode HTML entities
            [warnings : boolean] -- warn when non-directive attribute
                    is encountered
        """
        self.__callback = callback
        parser = Parser(attribute, codecs[0], codecs[1], warnings)
        parser.feed(html)
        parser.close()
        RichContent.__init__(self, parser.result(), *codecs)
    
    def render(self, *args, **kwargs):
        """Render this template; *args will be passed directly to the template.
        """
        clone = self._initRichClone(CloneNode(self))
        self.__callback(clone, *args, **kwargs)
        collector = []
        clone._renderContent(collector)
        try: # quick-n-dirty error reporting; not a real substitute for type-
            # checking for bad value assignments at point of origin, but cheap
            return ''.join(collector)
        except TypeError:
            raise TypeError, ("Can't render template: some node's content was "
                    "set to a non-text value.")

    def structure(self):
        """Print the object model's structure for diagnostic use."""
        print >> sys.stderr, '-' * 80
        self._printStructure('')
        print >> sys.stderr, '-' * 80


########NEW FILE########
__FILENAME__ = asciidocapi
#!/usr/bin/env python
"""
asciidocapi - AsciiDoc API wrapper class.

The AsciiDocAPI class provides an API for executing asciidoc. Minimal example
compiles `mydoc.txt` to `mydoc.html`:

  import sys
  sys.path.append("/usr/share/asciidoc")
  import asciidocapi
  asciidoc = asciidocapi.AsciiDocAPI()
  asciidoc.execute('mydoc.txt')

- Full documentation in asciidocapi.txt.
- See the doctests below for more examples.

Doctests:

1. Check execution:

   >>> import StringIO
   >>> import sys
   >>> sys.path.append("/usr/share/asciidoc")
   >>> infile = StringIO.StringIO('Hello *{author}*')
   >>> outfile = StringIO.StringIO()
   >>> asciidoc = AsciiDocAPI()
   >>> asciidoc.options('--no-header-footer')
   >>> asciidoc.attributes['author'] = 'Joe Bloggs'
   >>> asciidoc.execute(infile, outfile, backend='html4')
   >>> print outfile.getvalue()
   <p>Hello <strong>Joe Bloggs</strong></p>

   >>> asciidoc.attributes['author'] = 'Bill Smith'
   >>> infile = StringIO.StringIO('Hello _{author}_')
   >>> outfile = StringIO.StringIO()
   >>> asciidoc.execute(infile, outfile, backend='docbook')
   >>> print outfile.getvalue()
   <simpara>Hello <emphasis>Bill Smith</emphasis></simpara>

2. Check error handling:

   >>> import StringIO
   >>> import sys
   >>> sys.path.append("/usr/share/asciidoc")
   >>> asciidoc = AsciiDocAPI()
   >>> infile = StringIO.StringIO('---------')
   >>> outfile = StringIO.StringIO()
   >>> asciidoc.execute(infile, outfile)
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
     File "asciidocapi.py", line 189, in execute
       raise AsciiDocError(self.messages[-1])
   AsciiDocError: ERROR: <stdin>: line 1: [blockdef-listing] missing closing delimiter


Copyright (C) 2009 Stuart Rackham. Free use of this software is granted
under the terms of the GNU General Public License (GPL).

"""

import sys,os,re,imp
import inspect

API_VERSION = '0.1.2'
MIN_ASCIIDOC_VERSION = '8.4.1'  # Minimum acceptable AsciiDoc version.


def find_in_path(fname, path=None):
    """
    Find file fname in paths. Return None if not found.
    """
    if path is None:
        path = os.environ.get('PATH', '')
    for dir in path.split(os.pathsep):
        fpath = os.path.join(dir, fname)
        if os.path.isfile(fpath):
            return fpath
    else:
        return None


class AsciiDocError(Exception):
    pass


class Options(object):
    """
    Stores asciidoc(1) command options.
    """
    def __init__(self, values=[]):
        self.values = values[:]
    def __call__(self, name, value=None):
        """Shortcut for append method."""
        self.append(name, value)
    def append(self, name, value=None):
        if type(value) in (int,float):
            value = str(value)
        self.values.append((name,value))


class Version(object):
    """
    Parse and compare AsciiDoc version numbers. Instance attributes:

    string: String version number '<major>.<minor>[.<micro>][suffix]'.
    major:  Integer major version number.
    minor:  Integer minor version number.
    micro:  Integer micro version number.
    suffix: Suffix (begins with non-numeric character) is ignored when
            comparing.

    Doctest examples:

    >>> Version('8.2.5') < Version('8.3 beta 1')
    True
    >>> Version('8.3.0') == Version('8.3. beta 1')
    True
    >>> Version('8.2.0') < Version('8.20')
    True
    >>> Version('8.20').major
    8
    >>> Version('8.20').minor
    20
    >>> Version('8.20').micro
    0
    >>> Version('8.20').suffix
    ''
    >>> Version('8.20 beta 1').suffix
    'beta 1'

    """
    def __init__(self, version):
        self.string = version
        reo = re.match(r'^(\d+)\.(\d+)(\.(\d+))?\s*(.*?)\s*$', self.string)
        if not reo:
            raise ValueError('invalid version number: %s' % self.string)
        groups = reo.groups()
        self.major = int(groups[0])
        self.minor = int(groups[1])
        self.micro = int(groups[3] or '0')
        self.suffix = groups[4] or ''
    def __cmp__(self, other):
        result = cmp(self.major, other.major)
        if result == 0:
            result = cmp(self.minor, other.minor)
            if result == 0:
                result = cmp(self.micro, other.micro)
        return result


class AsciiDocAPI(object):
    """
    AsciiDoc API class.
    """
    def __init__(self, asciidoc_py=None):
        """
        Locate and import asciidoc.py.
        Initialize instance attributes.
        """
        self.options = Options()
        self.attributes = {}
        self.messages = []
        # Search for the asciidoc command file.
        # Try ASCIIDOC_PY environment variable first.
        cmd = os.environ.get('ASCIIDOC_PY')
        if cmd:
            if not os.path.isfile(cmd):
                raise AsciiDocError('missing ASCIIDOC_PY file: %s' % cmd)
        elif asciidoc_py:
            # Next try path specified by caller.
            cmd = asciidoc_py
            if not os.path.isfile(cmd):
                raise AsciiDocError('missing file: %s' % cmd)
        else:
            # Try shell search paths.
            for fname in [os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))+'/asciidoc.py',os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))+'/asciidoc.pyc',os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))+'/asciidoc']:
                cmd = find_in_path(fname)
                if cmd: break
            else:
                # Finally try current working directory.
                for cmd in ['asciidoc.py','asciidoc.pyc','asciidoc']:
                    if os.path.isfile(cmd): break
                else:
                    for cmd in ['_filters/asciidoc.py','_filters/asciidoc.pyc','_filters/asciidoc']:
                        if os.path.isfile(cmd): break
                    else:
                        raise AsciiDocError('failed to locate asciidoc')
        self.cmd = os.path.realpath(cmd)
        self.__import_asciidoc()

    def __import_asciidoc(self, reload=False):
        '''
        Import asciidoc module (script or compiled .pyc).
        See
        http://groups.google.com/group/asciidoc/browse_frm/thread/66e7b59d12cd2f91
        for an explanation of why a seemingly straight-forward job turned out
        quite complicated.
        '''
        if os.path.splitext(self.cmd)[1] in ['.py','.pyc']:
            sys.path.insert(0, os.path.dirname(self.cmd))
            try:
                try:
                    if reload:
                        import __builtin__  # Because reload() is shadowed.
                        __builtin__.reload(self.asciidoc)
                    else:
                        import asciidoc
                        self.asciidoc = asciidoc
                except ImportError:
                    raise AsciiDocError('failed to import ' + self.cmd)
            finally:
                del sys.path[0]
        else:
            # The import statement can only handle .py or .pyc files, have to
            # use imp.load_source() for scripts with other names.
            try:
                imp.load_source('asciidoc', self.cmd)
                import asciidoc
                self.asciidoc = asciidoc
            except ImportError:
                raise AsciiDocError('failed to import ' + self.cmd)
        if Version(self.asciidoc.VERSION) < Version(MIN_ASCIIDOC_VERSION):
            raise AsciiDocError(
                'asciidocapi %s requires asciidoc %s or better'
                % (API_VERSION, MIN_ASCIIDOC_VERSION))

    def execute(self, infile, outfile=None, backend=None):
        """
        Compile infile to outfile using backend format.
        infile can outfile can be file path strings or file like objects.
        """
        self.messages = []
        opts = Options(self.options.values)
        if outfile is not None:
            opts('--out-file', outfile)
        if backend is not None:
            opts('--backend', backend)
        for k,v in self.attributes.items():
            if v == '' or k[-1] in '!@':
                s = k
            elif v is None: # A None value undefines the attribute.
                s = k + '!'
            else:
                s = '%s=%s' % (k,v)
            opts('--attribute', s)
        args = [infile]
        # The AsciiDoc command was designed to process source text then
        # exit, there are globals and statics in asciidoc.py that have
        # to be reinitialized before each run -- hence the reload.
        self.__import_asciidoc(reload=True)
        try:
            try:
                self.asciidoc.execute(self.cmd, opts.values, args)
            finally:
                self.messages = self.asciidoc.messages[:]
        except SystemExit, e:
            if e.code:
                raise AsciiDocError(self.messages[-1])


if __name__ == "__main__":
    """
    Run module doctests.
    """
    import doctest
    options = doctest.NORMALIZE_WHITESPACE + doctest.ELLIPSIS
    doctest.testmod(optionflags=options)

########NEW FILE########
__FILENAME__ = escape
import cgi

config = {
    'name': "Escape",
    'description': "HTML escapes text.",
    'aliases': ['escape']
    }


def run(content):
    return cgi.escape(content)

########NEW FILE########
__FILENAME__ = markdown_template
import markdown
import logging

config = {
    'name': "Markdown",
    'description': "Renders markdown formatted text to HTML",
    'aliases': ['markdown']
    }


#Markdown logging is noisy, pot it down:
logging.getLogger("MARKDOWN").setLevel(logging.ERROR)


def run(content):
    return markdown.markdown(content, ['fenced_code','footnotes','headerid'])

########NEW FILE########
__FILENAME__ = method_header
def run(content):
    """elements = content.split(', ');
    key_values = dict()
    for element in elements:
        key_value = element.split("=")
        
    self.name = key_values[name]
    self.syntax = key_values['syntax']
    if(key_values['parameters']!=""):
        self.syntax_resume = key_values['syntax'] + '(...)'
    else:
        self.syntax_resume = key_values['syntax'] + '()'
    self.description = key_values['description']
    
    bf.writer.materialize_template("photo.mako",
                (photos_dir,photo+".html"), {"photo":photo})"""
    return "  "
    

########NEW FILE########
__FILENAME__ = rst_template
import docutils.core

config = {
    'name': "reStructuredText",
    'description': "Renders reStructuredText formatted text to HTML",
    'aliases': ['rst']
    }


def run(content):
    return docutils.core.publish_parts(content, writer_name='html')['html_body']

########NEW FILE########
__FILENAME__ = textile_template
import textile

config = {
    'name': "Textile",
    'description': "Renders textile formatted text to HTML",
    'aliases': ['textile']
    }


def run(content):
    return textile.textile(content)

########NEW FILE########
__FILENAME__ = class

########NEW FILE########
__FILENAME__ = documentation_class
#!/usr/bin/python
#import documentation_functions
import sys
from documentation_members import DocsMethod,DocsVar
#sys.path.append( "/var/www/test_new_documentation/" )

import os
import fileinput
import traceback

class DocsClass:
    def __init__(self,classid):
        self.id = classid
        self.module = ""
        self.name = ""
        self.new = 0
        self.advanced = False
        self.visible = True
        self.example = ""
        self.reference = ""
        self.addons = False
        self.function_list = []
        self.var_list = []
        self.detailed_inline_description = ""
        self.istemplated = False
        

    def functions(self):
        return self.function_list  
         
    def get_parameter_types(self, parameters_list):
        parameters_types = []
        if len(parameters_list.strip(' '))==0:
            return parameters_types
        for p in parameters_list.split(','):
            parameter = ""
            for e in p.split(' ')[:len(p.split(' '))-1]:
                parameter = parameter + " " + e
            parameters_types.append(parameter)
        return parameters_types
    
    def get_parameter_names(self,parameters_list):
        parameters_names = []
        if len(parameters_list.strip(' '))==0:
            return parameters_names
        for p in parameters_list.split(','):
            p = p.strip(' ')
            if p.find('=')!=-1:
                e = p.split('=')[0].strip(' ')
                parameters_names.append(e.split(' ')[len(e.split(' '))-1] + ' = ' + p.split('=')[1])
            else:
                parameters_names.append(p.split(' ')[len(p.split(' '))-1])
        return parameters_names
    
    def function_by_signature(self, name, returns, parameters):
        method = DocsMethod(0)
        method.name = name
        method.parameters = parameters
        method.syntax = name + "("
        for p in self.get_parameter_names(parameters):
            method.syntax = method.syntax + p + ", "
        method.syntax = method.syntax.rstrip(', ')
        method.syntax = method.syntax + ")"
        method.returns = returns
        method.new = True
        for function in self.function_list:
            if function.name == name:
                dst_parameters_types = self.get_parameter_types(function.parameters)
                src_parameters_types = self.get_parameter_types(parameters)
                if(len(src_parameters_types)==len(dst_parameters_types)):
                    a = -1
                    for i in range(len(src_parameters_types)):
                        if src_parameters_types[i] != dst_parameters_types[i]:
                            break
                        else:
                            a = i
                    if a == len(src_parameters_types)-1 and function.returns == returns:
                        function.new = False
                        function.parameters = parameters
                        return function
                        
        self.function_list.append(method)   
        return method

    def var_by_name(self, name):
        for var in self.var_list:
            if var.name == name:
                return var
        return False
        


########NEW FILE########
__FILENAME__ = documentation_function
class DocsFunction:
    def __init__(self,functionid):
        self.id = functionid
        self.new = 0
        self.name = ""
        self.description = ""
        self.returns = ""
        self.returns_description = ""
        self.inlined_description = ""
        self.parameters = ""
        self.syntax = ""
        self.summary = ""
        self.version_started = ""
        self.version_deprecated = ""
        self.constant = False
        self.static = False
        self.visible = True
        self.advanced = False
        self.functionsfile = ""
        self.linenum = 0
        self.file = ""
        
class DocsFunctionsFile:
    def __init__(self,fileid):
        self.id = fileid
        self.module = ""
        self.name = ""
        self.new = 0
        self.advanced = False
        self.visible = True
        self.description = ""
        self.addons = False
        self.function_list = []
    
    def get_parameter_types(self, parameters_list):
        parameters_types = []
        if len(parameters_list.strip(' '))==0:
            return parameters_types
        for p in parameters_list.split(','):
            parameter = ""
            for e in p.split(' ')[:len(p.split(' '))-1]:
                parameter = parameter + " " + e
            parameters_types.append(parameter)
        return parameters_types
    
    def get_parameter_names(self,parameters_list):
        parameters_names = []
        if len(parameters_list.strip(' '))==0:
            return parameters_names
        for p in parameters_list.split(','):
            p = p.strip(' ')
            if p.find('=')!=-1:
                e = p.split('=')[0].strip(' ')
                parameters_names.append(e.split(' ')[len(e.split(' '))-1] + ' = ' + p.split('=')[1])
            else:
                parameters_names.append(p.split(' ')[len(p.split(' '))-1])
        return parameters_names
                
    def function_by_signature(self, name, returns, parameters):
        function = DocsFunction(0)
        function.name = name
        function.parameters = parameters
        function.syntax = name + "("
        for p in self.get_parameter_names(parameters):
            function.syntax = function.syntax + p + ", "
        function.syntax = function.syntax.rstrip(', ')
        function.syntax = function.syntax + ")"
        function.returns = returns
        function.new = True
        found = False
        for f in self.function_list:
            if f.name == name:
                dst_parameters_types = self.get_parameter_types(f.parameters.replace('const ',''))
                src_parameters_types = self.get_parameter_types(parameters.replace('const ',''))

                if(len(src_parameters_types)==len(dst_parameters_types)):
                    a = -1
                    for i in range(len(src_parameters_types)):
                        if src_parameters_types[i] != dst_parameters_types[i]:
                            break
                        else:
                            a = i
                    if a == len(src_parameters_types)-1:
                        f.new = False
                        f.parameters = parameters
                        return f
                        found = True
                        #print 'found ' + function.name
                        break
        if not found:
            #print 'not found ' + method.name
            #clazzmethod = method
            self.function_list.append(function)   
        return function
        


########NEW FILE########
__FILENAME__ = documentation_group
import documentation_class

class DocsGroup:
    def __init__(self,groupid):
        self.id = groupid

    def classes(self):
        return self.class_list

    def functions(self):
        return self.function_list


########NEW FILE########
__FILENAME__ = documentation_members
class DocsMethod:
    def __init__(self,functionid):
        self.id = functionid
        self.new = 0
        self.name = ""
        self.description = ""
        self.returns = ""
        self.returns_description = ""
        self.inlined_description = ""
        self.parameters = ""
        self.syntax = ""
        self.access = ""
        self.summary = ""
        self.version_started = ""
        self.version_deprecated = ""
        self.constant = False
        self.static = False
        self.visible = True
        self.advanced = False
        self.clazz = ""
        self.linenum = 0
        self.file = ""

class DocsVar:
    def __init__(self,functionid):
        self.id = functionid
        self.name = ""
        self.type = ""
        self.summary = ""
        self.description = ""
        self.access = ""
        self.version_started = ""
        self.version_deprecated = ""
        self.constant = False
        self.visible = True
        self.advanced = False
        self.static = False
        self.clazz = ""
        self.linenum = 0
        self.file = ""


########NEW FILE########
__FILENAME__ = documentation_method
class DocsMethod:
    def __init__(self,functionid):
        self.id = functionid
        self.new = 0
        self.name = ""
        self.clazz = ""
        self.description = ""
        self.inlined_description = ""
        self.returns = ""
        self.returns_description = ""
        self.parameters = ""
        self.syntax = ""


########NEW FILE########
__FILENAME__ = documentation_update
#!/usr/bin/python

from lxml import etree
from lxml import objectify
import os
import sys
import re
from lxml.html.soupparser import fromstring 

import doxygen_compound

from documentation_class import DocsClass
from markdown_file import getclass,setclass,getfunctionsfile,setfunctionsfile
from documentation_members import DocsMethod, DocsVar
from documentation_function import DocsFunctionsFile, DocsFunction

of_root = "/home/arturo/Desktop/openFrameworks"
of_documentation = of_root + '/libs/openFrameworksCompiled/project/doxygen/build/xml/'
of_addons_documentation = of_root + 'addons/doxygen/xml/'
documentation_root = '/home/arturo/Documents/ofSite/documentation/'
#index = open(documentation_root + "index.html.mako",'w')

print of_documentation

missing_functions = []

currentversion = "0.8.0"


def update_moved_functions(filename,is_addon=False):
    xml = objectify.parse(filename)
    doxygen = xml.getroot()
    
    xmlfunctionsfile = doxygen.compounddef

    
    if xmlfunctionsfile.find('sectiondef')!=None:
        if len([ s for s in xmlfunctionsfile.sectiondef if s.get('kind')=='func'])>0:
            file_split = os.path.splitext(xmlfunctionsfile.compoundname.text)
            functionsfile = getfunctionsfile(file_split[0])
            for section in xmlfunctionsfile.sectiondef:
                if section.get('kind')=='func':
                    for xmlfunction in section.memberdef:
                        for function in missing_functions:
                            if function.name == xmlfunction.name.text:
                                argstring = str(xmlfunction.argsstring.text)
                                params = argstring[argstring.find('(')+1:argstring.rfind(')')]
                                returns = xmlfunction.type.ref.text if hasattr(xmlfunction.type,'ref') else xmlfunction.type.text
                                moved_function = functionsfile.function_by_signature(xmlfunction.name.text, returns, params)
                                moved_function.returns = returns
                                moved_function.description = moved_function.description + '\n\n' + function.description
                                print "moved function: " + function.name
                                
            setfunctionsfile(functionsfile,is_addon)
    
    
            
def serialize_functionsfile(filename,is_addon=False):
    print("functions file " + filename)
    xml = objectify.parse(filename)
    doxygen = xml.getroot()
    
    xmlfunctionsfile = doxygen.compounddef

    
    if xmlfunctionsfile.find('sectiondef')!=None:
        if len([ s for s in xmlfunctionsfile.sectiondef if s.get('kind')=='func'])>0:
            #print '\n'
            file_split = os.path.splitext(xmlfunctionsfile.compoundname.text)
            #print file_split[0]
            functionsfile = getfunctionsfile(file_split[0])
            #print 'new: ' + str(functionsfile.new)
            functions_fromxml = []
            for section in xmlfunctionsfile.sectiondef:
                if section.get('kind')=='func':
                    for xmlfunction in section.memberdef:
                        argstring = str(xmlfunction.argsstring.text)
                        params = argstring[argstring.find('(')+1:argstring.rfind(')')]
                        returns = xmlfunction.type.ref.text if hasattr(xmlfunction.type,'ref') else xmlfunction.type.text
                        function = functionsfile.function_by_signature(xmlfunction.name.text, returns, params)
                        #function.description = function.description.replace("~~~~{.brush cpp}","~~~~{.cpp}").replace('</pre>',"~~~~")
                        function.description = function.description.replace('<p>','').replace('</p>','').replace('<code>','').replace('</code>','').replace('<pre>','')
                        function.returns = returns
                        functions_fromxml.append(function.name)
                        
                        if xmlfunction.find("briefdescription")!=None and    xmlfunction.briefdescription.find("para")!=None:
                            function.inlined_description = ""
                            for p in xmlfunction.briefdescription.para:
                                function.inlined_description = function.inlined_description + serialize_doxygen_paragraph(p)
                            
                        if xmlfunction.find("detaileddescription")!=None and xmlfunction.detaileddescription.find("para")!=None:
                            function.inlined_description = function.inlined_description + "\n"
                            for p in xmlfunction.detaileddescription.para:
                                function.inlined_description = function.inlined_description + serialize_doxygen_paragraph(p)
                        
                        #print function.returns + " " + function.name + xmlfunction.argsstring.text + " new: " + str(function.new)
            
            #print "missing functions"
            thisfile_missing_functions = []
            #[f for f in functionsfile.function_list if f not in functions_fromxml.function_list]
            for function in functionsfile.function_list:
                if not function.name in functions_fromxml:
                    #print function.name+"("+function.parameters+")"
                    missing_functions.append(function)
                    thisfile_missing_functions.append(function)
            
            for function in thisfile_missing_functions:
                functionsfile.function_list.remove(function)
                
            deprecated_functions = []
            for function in functionsfile.function_list:
                if function.name.find("OF_DEPRECATED_MSG")!=-1:
                    deprecated_functions.append(function)
            for function in deprecated_functions:
                functionsfile.function_list.remove(function);
                        
            functionsfile.function_list.sort(key=lambda function: function.name)
            setfunctionsfile(functionsfile,is_addon)
                        
    
def parse_doxigen_para_element(e):
    if type(e.value) == doxygen_compound.docRefTextType:
        if type(e.value.content_) == list:
            ret = ""
            for l in e.value.content_:
                ret = ret + parse_doxigen_para_element(l)
            return ret
        else:
            return e.value.content_
            
            
    elif type(e.value) == doxygen_compound.docURLLink:
        if type(e.value.content_) == list:
            ret = ""
            for l in e.value.content_:
                ret = ret + "[" + l.value + "](" + l.value + ")"
            return ret
        else:
            return + "[" + e.value.content_ + "](" + e.value.content_ + ")"
            
            
    elif type(e.value) == doxygen_compound.docSimpleSectType:
        ret = "***" + e.value.kind + ":*** \n\t"
        for pc in e.value.get_para():
            ret = ret + serialize_doxygen_paragraph(pc)
        return ret
        
    elif type(e.value) == doxygen_compound.refTextType:
        if type(e.value.content_) == list:
            ret = ""
            for l in e.value.content_:
                ret = ret + parse_doxigen_para_element(l)
            return ret
        else:
            return e.value.content_
    
    elif type(e.value) == doxygen_compound.docMarkupType:
        if type(e.value.content_) == list:
            ret = ""
            for l in e.value.content_:
                ret = ret + parse_doxigen_para_element(l)
            return ret
        else:
            return e.value.content_
            
    elif type(e.value) == doxygen_compound.docListType:
        ret = ""
        for l in e.value.listitem:
            for p in l.para:
                for c in p.content_:
                    ret = ret + parse_doxigen_para_element(c)
        return ret
            
    

    else:        
        return  e.value

def serialize_doxygen_paragraph(p):
    ret = ""
    if hasattr(p,"content_"):
        for c in p.content_:
            next_element = parse_doxigen_para_element(c)
            if type(next_element)!=doxygen_compound.docEmptyType:
                if type(next_element)==str:
                    ret = ret + next_element;
                else:
                    print "Next Element: (not str) "+ type(next_element).__name__;
    else:
        ret = str(p)
    if ret != "":
        ret = ret + "\n\n"
    return ret

def serialize_class(filename,is_addon=False):
    xml = objectify.parse(filename)
    doxygen = xml.getroot()
    
    clazz = doxygen_compound.parse(filename).compounddef #doxygen.compounddef
        
    documentation_class = getclass(clazz.compoundname)
    
    current_variables_list = []
    current_methods_list = []
    
    
    #f = open('documentation/' + classname + ".html.mako",'w')
    
    #index.write("[" + classname + "](" + classname + ".html)\n\n")
    
    #f.write( '<%inherit file="_templates/documentation.mako" />\n' )
    #f.write( '___' + classname + "___\n" )
    
    inheritsfrom = []
    #if clazz.find('derivedcompoundref')!=None:
    inheritsfrom = clazz.derivedcompoundref

    documentation_class.detailed_inline_description = ""
   
    #clazz_for_description = doxygen_compound.parse(filename).compounddef 
    for p in clazz.briefdescription.get_para():
        documentation_class.detailed_inline_description = documentation_class.detailed_inline_description + serialize_doxygen_paragraph(p)
    documentation_class.detailed_inline_description = documentation_class.detailed_inline_description + "\n"
        
    for p in clazz.detaileddescription.get_para():
        documentation_class.detailed_inline_description = documentation_class.detailed_inline_description + serialize_doxygen_paragraph(p)

    #if clazz.find('sectiondef')!=None:
    for section in clazz.sectiondef:
        for member in section.memberdef:
            #if section.get("kind") == public TODO: access, virtual, pure virtual
            if member.kind == 'enum':
                pass
            else:
                #f.write( "$$code(lang=c++)\n" )
                if member.kind == 'variable':
                    var = documentation_class.var_by_name(member.name)
                    if not var:
                        var = DocsVar(0)
                        var.name = member.name
                        var.access = member.prot
                        var.version_started = currentversion
                        var.version_deprecated = ""
                        var.constant = member.mutable=="no"
                        var.static = member.static!="no"
                        var.clazz = documentation_class.name
                        #member.type.ref.text if hasattr(member.type,'ref') else member.type.text
                        var.type = ""
                        try:
                            for e in member.type_.content_:
                                if type(e.value) == doxygen_compound.refTextType:
                                    var.type = var.type +  e.value.valueOf_
                                else:
                                    var.type = var.type + e.value + " "
                        except:
                            pass
                    current_variables_list.append(var)
                    #f.write( str(member.type.text) + " " + str(member.name.text) + "\n" )
                if member.kind == 'function' and member.name.find("OF_DEPRECATED_MSG")==-1:
                    #print member.name
                    argstring = str(member.argsstring)
                    params = argstring[argstring.find('(')+1:argstring.rfind(')')]
                    
                    returns = ""
                    try:
                        for e in member.type_.content_:
                            if type(e.value) == doxygen_compound.refTextType:
                                returns = returns +  e.value.valueOf_
                            else:
                                returns = returns + e.value
                    except:
                        pass
                        
                    returns = ("" if returns is None else returns)
                    method = documentation_class.function_by_signature(member.name, returns, params)
                    method.static = member.static!="no"
                    method.clazz = documentation_class.name
                    method.access = member.prot
                    method.returns = returns
                    #method.description = method.description.replace("~~~~{.brush: cpp}","~~~~{.cpp}").replace('</pre>',"~~~~")
                    method.description = method.description.replace('<p>','').replace('</p>','').replace('<code>','').replace('</code>','').replace('<pre>','')
                    if method.new:
                        print "new method " + method.name + " in " + method.clazz
                        method.version_started = currentversion
                        
                    method.inlined_description = ""
                    for p in member.briefdescription.get_para():
                        method.inlined_description = method.inlined_description + serialize_doxygen_paragraph(p)
                        
                    method.inlined_description = method.inlined_description + "\n"
                    for p in member.detaileddescription.get_para():
                        method.inlined_description = method.inlined_description + serialize_doxygen_paragraph(p)
                        
                    current_methods_list.append(method)
                        
                    #f.write( str(member.type.text) + " " + str(member.name.text) + str(member.argsstring.text) + "\n" )
                """if member.name.text.find("OF_DEPRECATED_MSG")!=-1:
                    print "found deprecated function " + member.name.text
                    print "argstring = " + str(member.argsstring.text)
                    print "params = " + member.argsstring.text[member.argsstring.text.find('(')+1:member.argsstring.text.rfind(')')]
                    returns = member.type.ref.text if hasattr(member.type,'ref') else member.type.text
                    print "returns = " + ("" if returns is None else returns)"""
                #f.write( "$$/code\n\n\n\n" )
    
    #f.close()
    deprecated_methods = []
    for method in documentation_class.function_list:
        if method.name.find("OF_DEPRECATED_MSG")!=-1:
            deprecated_methods.append(method)
    for method in deprecated_methods:
        documentation_class.function_list.remove(method);
    
    class_name_printed = False
    
    for method in documentation_class.function_list:
        if not method in current_methods_list:
            if method.description.strip("\n ") != "":
                if not class_name_printed:    
                    print "\n\n\n\n"
                    print "========================================"
                    print "class " + documentation_class.name
                    class_name_printed = True
                print "\n\n\n\n"
                print "removing method " + method.returns + " " + method.name + "(" + method.parameters + ")"
                print "with description:"
                print method.description
    documentation_class.function_list = current_methods_list
    
    for var in documentation_class.var_list:
        if not var in current_variables_list:
            if var.description.strip("\n ") != "":
                if not class_name_printed:    
                    print "\n\n\n\n"
                    print "========================================"
                    print "class " + documentation_class.name
                    class_name_printed = True
                print "removing " + var.name
                print "with description:"
                print var.description
    documentation_class.var_list = current_variables_list
        
    documentation_class.function_list.sort(key=lambda function: function.name)
    documentation_class.var_list.sort(key=lambda variable: variable.name)
    setclass(documentation_class,is_addon)

#serialize_class ("/home/arturo/Desktop/openFrameworks/libs/openFrameworksCompiled/project/doxygen/build/xml/classof_log.xml")
#quit()

#index.write( '<%inherit file="_templates/documentation.mako" />\n' )
dir_count=0
file_count=0
for root, dirs, files in os.walk(of_documentation):
    dir_count+=1
    for name in files:       
        file_count+=1
        filename = os.path.join(root, name)
        if name.find('class')==0:
            serialize_class(filename)
        elif name.find('of')==0 and name.find('8h.xml')!=-1:
            serialize_functionsfile(filename)

for root, dirs, files in os.walk(of_documentation):
    dir_count+=1
    for name in files:       
        file_count+=1
        filename = os.path.join(root, name)
        if name.find('of')==0 and name.find('8h.xml')!=-1:
            update_moved_functions(filename)

for root, dirs, files in os.walk(of_addons_documentation):
    dir_count+=1
    for name in files:       
        file_count+=1
        filename = os.path.join(root, name)
        if name.find('class')==0:
            serialize_class(filename,True)
        elif name.find('ofx')==0 and name.find('8h.xml')!=-1:
            serialize_functionsfile(filename,True)

for root, dirs, files in os.walk(of_addons_documentation):
    dir_count+=1
    for name in files:       
        file_count+=1
        filename = os.path.join(root, name)
        if name.find('ofx')==0 and name.find('8h.xml')!=-1:
            update_moved_functions(filename,True)
            
print ""+str(dir_count)+" dirs/"+str(file_count)+" files"


########NEW FILE########
__FILENAME__ = documentation_update_addons
#!/usr/bin/python

from lxml import etree
from lxml import objectify
import os
import sys

from documentation_class import DocsClass
from markdown_file import getclass,setclass
from documentation_members import DocsMethod, DocsVar

of_src = '/home/arturo/Escritorio/openFrameworks/addons'
of_documentation = of_src + '/doxygensource/xml/'

currentversion = "0.8.0"

def serialize_class(filename):
    xml = objectify.parse(filename)
    doxygen = xml.getroot()

    clazz = doxygen.compounddef
    documentation_class = getclass(clazz.compoundname.text)
    
    inheritsfrom = []
    if clazz.find('derivedcompoundref')!=None:
        inheritsfrom = clazz.derivedcompoundref


    if clazz.find('sectiondef')!=None:
        for section in clazz.sectiondef:
            for member in section.memberdef:
                if member.get("kind") == 'enum':
                    pass
                else:
                    if member.get("kind") == 'variable':
                        var = documentation_class.var_by_name(member.name.text)
                        if not var:
                            var = DocsVar(0)
                            var.name = member.name.text
                            var.access = member.get("prot")
                            var.version_started = currentversion
                            var.version_deprecated = ""
                            var.constant = member.get("mutable")=="no"
                            var.static = member.get("static")
                            var.clazz = documentation_class.name
                            var.type = member.type.ref.text if hasattr(member.type,'ref') else member.type.text
                            documentation_class.var_list.append(var)
                    if member.get("kind") == 'function':
                        argstring = str(member.argsstring.text)
                        params = argstring[argstring.find('(')+1:argstring.rfind(')')]
                        returns = member.type.ref.text if hasattr(member.type,'ref') else member.type.text
                        returns = ("" if returns is None else returns)
                        method = documentation_class.function_by_signature(member.name.text, returns, params)
                        method.static = member.get("static")
                        method.clazz = documentation_class.name
                        method.access = member.get("prot")
                        method.returns = returns
                        if method.new:
                            method.version_started = currentversion
    
    setclass(documentation_class)


for root, dirs, files in os.walk(of_documentation):
    for name in files:       
        filename = os.path.join(root, name)
        if name.find('class')==0:

            serialize_class(filename)


########NEW FILE########
__FILENAME__ = doxygen_compound
#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Aug 13 05:29:23 2013 by generateDS.py version 2.10b.
#

import sys
import getopt
import re as re_
import base64
import datetime as datetime_

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class DoxygenType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, compounddef=None):
        self.version = _cast(None, version)
        self.compounddef = compounddef
    def factory(*args_, **kwargs_):
        if DoxygenType.subclass:
            return DoxygenType.subclass(*args_, **kwargs_)
        else:
            return DoxygenType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_compounddef(self): return self.compounddef
    def set_compounddef(self, compounddef): self.compounddef = compounddef
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def validate_DoxVersionNumber(self, value):
        # Validate type DoxVersionNumber, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.compounddef is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DoxygenType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DoxygenType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DoxygenType'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (quote_attrib(self.version), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DoxygenType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.compounddef is not None:
            self.compounddef.export(outfile, level, namespace_, name_='compounddef', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='DoxygenType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            showIndent(outfile, level)
            outfile.write('version="%s",\n' % (self.version,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.compounddef is not None:
            showIndent(outfile, level)
            outfile.write('compounddef=model_.compounddefType(\n')
            self.compounddef.exportLiteral(outfile, level, name_='compounddef')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
            self.validate_DoxVersionNumber(self.version)    # validate type DoxVersionNumber
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'compounddef':
            obj_ = compounddefType.factory()
            obj_.build(child_)
            self.compounddef = obj_
# end class DoxygenType


class compounddefType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, kind=None, abstract=None, prot=None, final=None, sealed=None, id=None, compoundname=None, title=None, basecompoundref=None, derivedcompoundref=None, includes=None, includedby=None, incdepgraph=None, invincdepgraph=None, innerdir=None, innerfile=None, innerclass=None, innernamespace=None, innerpage=None, innergroup=None, templateparamlist=None, sectiondef=None, briefdescription=None, detaileddescription=None, inheritancegraph=None, collaborationgraph=None, programlisting=None, location=None, listofallmembers=None):
        self.kind = _cast(None, kind)
        self.abstract = _cast(None, abstract)
        self.prot = _cast(None, prot)
        self.final = _cast(None, final)
        self.sealed = _cast(None, sealed)
        self.id = _cast(None, id)
        self.compoundname = compoundname
        self.title = title
        if basecompoundref is None:
            self.basecompoundref = []
        else:
            self.basecompoundref = basecompoundref
        if derivedcompoundref is None:
            self.derivedcompoundref = []
        else:
            self.derivedcompoundref = derivedcompoundref
        if includes is None:
            self.includes = []
        else:
            self.includes = includes
        if includedby is None:
            self.includedby = []
        else:
            self.includedby = includedby
        self.incdepgraph = incdepgraph
        self.invincdepgraph = invincdepgraph
        if innerdir is None:
            self.innerdir = []
        else:
            self.innerdir = innerdir
        if innerfile is None:
            self.innerfile = []
        else:
            self.innerfile = innerfile
        if innerclass is None:
            self.innerclass = []
        else:
            self.innerclass = innerclass
        if innernamespace is None:
            self.innernamespace = []
        else:
            self.innernamespace = innernamespace
        if innerpage is None:
            self.innerpage = []
        else:
            self.innerpage = innerpage
        if innergroup is None:
            self.innergroup = []
        else:
            self.innergroup = innergroup
        self.templateparamlist = templateparamlist
        if sectiondef is None:
            self.sectiondef = []
        else:
            self.sectiondef = sectiondef
        self.briefdescription = briefdescription
        self.detaileddescription = detaileddescription
        self.inheritancegraph = inheritancegraph
        self.collaborationgraph = collaborationgraph
        self.programlisting = programlisting
        self.location = location
        self.listofallmembers = listofallmembers
    def factory(*args_, **kwargs_):
        if compounddefType.subclass:
            return compounddefType.subclass(*args_, **kwargs_)
        else:
            return compounddefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_compoundname(self): return self.compoundname
    def set_compoundname(self, compoundname): self.compoundname = compoundname
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_basecompoundref(self): return self.basecompoundref
    def set_basecompoundref(self, basecompoundref): self.basecompoundref = basecompoundref
    def add_basecompoundref(self, value): self.basecompoundref.append(value)
    def insert_basecompoundref(self, index, value): self.basecompoundref[index] = value
    def get_derivedcompoundref(self): return self.derivedcompoundref
    def set_derivedcompoundref(self, derivedcompoundref): self.derivedcompoundref = derivedcompoundref
    def add_derivedcompoundref(self, value): self.derivedcompoundref.append(value)
    def insert_derivedcompoundref(self, index, value): self.derivedcompoundref[index] = value
    def get_includes(self): return self.includes
    def set_includes(self, includes): self.includes = includes
    def add_includes(self, value): self.includes.append(value)
    def insert_includes(self, index, value): self.includes[index] = value
    def get_includedby(self): return self.includedby
    def set_includedby(self, includedby): self.includedby = includedby
    def add_includedby(self, value): self.includedby.append(value)
    def insert_includedby(self, index, value): self.includedby[index] = value
    def get_incdepgraph(self): return self.incdepgraph
    def set_incdepgraph(self, incdepgraph): self.incdepgraph = incdepgraph
    def get_invincdepgraph(self): return self.invincdepgraph
    def set_invincdepgraph(self, invincdepgraph): self.invincdepgraph = invincdepgraph
    def get_innerdir(self): return self.innerdir
    def set_innerdir(self, innerdir): self.innerdir = innerdir
    def add_innerdir(self, value): self.innerdir.append(value)
    def insert_innerdir(self, index, value): self.innerdir[index] = value
    def get_innerfile(self): return self.innerfile
    def set_innerfile(self, innerfile): self.innerfile = innerfile
    def add_innerfile(self, value): self.innerfile.append(value)
    def insert_innerfile(self, index, value): self.innerfile[index] = value
    def get_innerclass(self): return self.innerclass
    def set_innerclass(self, innerclass): self.innerclass = innerclass
    def add_innerclass(self, value): self.innerclass.append(value)
    def insert_innerclass(self, index, value): self.innerclass[index] = value
    def get_innernamespace(self): return self.innernamespace
    def set_innernamespace(self, innernamespace): self.innernamespace = innernamespace
    def add_innernamespace(self, value): self.innernamespace.append(value)
    def insert_innernamespace(self, index, value): self.innernamespace[index] = value
    def get_innerpage(self): return self.innerpage
    def set_innerpage(self, innerpage): self.innerpage = innerpage
    def add_innerpage(self, value): self.innerpage.append(value)
    def insert_innerpage(self, index, value): self.innerpage[index] = value
    def get_innergroup(self): return self.innergroup
    def set_innergroup(self, innergroup): self.innergroup = innergroup
    def add_innergroup(self, value): self.innergroup.append(value)
    def insert_innergroup(self, index, value): self.innergroup[index] = value
    def get_templateparamlist(self): return self.templateparamlist
    def set_templateparamlist(self, templateparamlist): self.templateparamlist = templateparamlist
    def get_sectiondef(self): return self.sectiondef
    def set_sectiondef(self, sectiondef): self.sectiondef = sectiondef
    def add_sectiondef(self, value): self.sectiondef.append(value)
    def insert_sectiondef(self, index, value): self.sectiondef[index] = value
    def get_briefdescription(self): return self.briefdescription
    def set_briefdescription(self, briefdescription): self.briefdescription = briefdescription
    def get_detaileddescription(self): return self.detaileddescription
    def set_detaileddescription(self, detaileddescription): self.detaileddescription = detaileddescription
    def get_inheritancegraph(self): return self.inheritancegraph
    def set_inheritancegraph(self, inheritancegraph): self.inheritancegraph = inheritancegraph
    def get_collaborationgraph(self): return self.collaborationgraph
    def set_collaborationgraph(self, collaborationgraph): self.collaborationgraph = collaborationgraph
    def get_programlisting(self): return self.programlisting
    def set_programlisting(self, programlisting): self.programlisting = programlisting
    def get_location(self): return self.location
    def set_location(self, location): self.location = location
    def get_listofallmembers(self): return self.listofallmembers
    def set_listofallmembers(self, listofallmembers): self.listofallmembers = listofallmembers
    def get_kind(self): return self.kind
    def set_kind(self, kind): self.kind = kind
    def get_abstract(self): return self.abstract
    def set_abstract(self, abstract): self.abstract = abstract
    def get_prot(self): return self.prot
    def set_prot(self, prot): self.prot = prot
    def get_final(self): return self.final
    def set_final(self, final): self.final = final
    def get_sealed(self): return self.sealed
    def set_sealed(self, sealed): self.sealed = sealed
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def validate_DoxCompoundKind(self, value):
        # Validate type DoxCompoundKind, a restriction on xsd:string.
        pass
    def validate_DoxBool(self, value):
        # Validate type DoxBool, a restriction on xsd:string.
        pass
    def validate_DoxProtectionKind(self, value):
        # Validate type DoxProtectionKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.compoundname is not None or
            self.title is not None or
            self.basecompoundref or
            self.derivedcompoundref or
            self.includes or
            self.includedby or
            self.incdepgraph is not None or
            self.invincdepgraph is not None or
            self.innerdir or
            self.innerfile or
            self.innerclass or
            self.innernamespace or
            self.innerpage or
            self.innergroup or
            self.templateparamlist is not None or
            self.sectiondef or
            self.briefdescription is not None or
            self.detaileddescription is not None or
            self.inheritancegraph is not None or
            self.collaborationgraph is not None or
            self.programlisting is not None or
            self.location is not None or
            self.listofallmembers is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='compounddefType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='compounddefType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='compounddefType'):
        if self.kind is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            outfile.write(' kind=%s' % (quote_attrib(self.kind), ))
        if self.abstract is not None and 'abstract' not in already_processed:
            already_processed.add('abstract')
            outfile.write(' abstract=%s' % (quote_attrib(self.abstract), ))
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            outfile.write(' prot=%s' % (quote_attrib(self.prot), ))
        if self.final is not None and 'final' not in already_processed:
            already_processed.add('final')
            outfile.write(' final=%s' % (quote_attrib(self.final), ))
        if self.sealed is not None and 'sealed' not in already_processed:
            already_processed.add('sealed')
            outfile.write(' sealed=%s' % (quote_attrib(self.sealed), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='compounddefType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.compoundname is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompoundname>%s</%scompoundname>%s' % (namespace_, self.gds_format_string(quote_xml(self.compoundname).encode(ExternalEncoding), input_name='compoundname'), namespace_, eol_))
        if self.title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stitle>%s</%stitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.title).encode(ExternalEncoding), input_name='title'), namespace_, eol_))
        for basecompoundref_ in self.basecompoundref:
            basecompoundref_.export(outfile, level, namespace_, name_='basecompoundref', pretty_print=pretty_print)
        for derivedcompoundref_ in self.derivedcompoundref:
            derivedcompoundref_.export(outfile, level, namespace_, name_='derivedcompoundref', pretty_print=pretty_print)
        for includes_ in self.includes:
            includes_.export(outfile, level, namespace_, name_='includes', pretty_print=pretty_print)
        for includedby_ in self.includedby:
            includedby_.export(outfile, level, namespace_, name_='includedby', pretty_print=pretty_print)
        if self.incdepgraph is not None:
            self.incdepgraph.export(outfile, level, namespace_, name_='incdepgraph', pretty_print=pretty_print)
        if self.invincdepgraph is not None:
            self.invincdepgraph.export(outfile, level, namespace_, name_='invincdepgraph', pretty_print=pretty_print)
        for innerdir_ in self.innerdir:
            innerdir_.export(outfile, level, namespace_, name_='innerdir', pretty_print=pretty_print)
        for innerfile_ in self.innerfile:
            innerfile_.export(outfile, level, namespace_, name_='innerfile', pretty_print=pretty_print)
        for innerclass_ in self.innerclass:
            innerclass_.export(outfile, level, namespace_, name_='innerclass', pretty_print=pretty_print)
        for innernamespace_ in self.innernamespace:
            innernamespace_.export(outfile, level, namespace_, name_='innernamespace', pretty_print=pretty_print)
        for innerpage_ in self.innerpage:
            innerpage_.export(outfile, level, namespace_, name_='innerpage', pretty_print=pretty_print)
        for innergroup_ in self.innergroup:
            innergroup_.export(outfile, level, namespace_, name_='innergroup', pretty_print=pretty_print)
        if self.templateparamlist is not None:
            self.templateparamlist.export(outfile, level, namespace_, name_='templateparamlist', pretty_print=pretty_print)
        for sectiondef_ in self.sectiondef:
            sectiondef_.export(outfile, level, namespace_, name_='sectiondef', pretty_print=pretty_print)
        if self.briefdescription is not None:
            self.briefdescription.export(outfile, level, namespace_, name_='briefdescription', pretty_print=pretty_print)
        if self.detaileddescription is not None:
            self.detaileddescription.export(outfile, level, namespace_, name_='detaileddescription', pretty_print=pretty_print)
        if self.inheritancegraph is not None:
            self.inheritancegraph.export(outfile, level, namespace_, name_='inheritancegraph', pretty_print=pretty_print)
        if self.collaborationgraph is not None:
            self.collaborationgraph.export(outfile, level, namespace_, name_='collaborationgraph', pretty_print=pretty_print)
        if self.programlisting is not None:
            self.programlisting.export(outfile, level, namespace_, name_='programlisting', pretty_print=pretty_print)
        if self.location is not None:
            self.location.export(outfile, level, namespace_, name_='location', pretty_print=pretty_print)
        if self.listofallmembers is not None:
            self.listofallmembers.export(outfile, level, namespace_, name_='listofallmembers', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='compounddefType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.kind is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            showIndent(outfile, level)
            outfile.write('kind="%s",\n' % (self.kind,))
        if self.abstract is not None and 'abstract' not in already_processed:
            already_processed.add('abstract')
            showIndent(outfile, level)
            outfile.write('abstract="%s",\n' % (self.abstract,))
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            showIndent(outfile, level)
            outfile.write('prot="%s",\n' % (self.prot,))
        if self.final is not None and 'final' not in already_processed:
            already_processed.add('final')
            showIndent(outfile, level)
            outfile.write('final="%s",\n' % (self.final,))
        if self.sealed is not None and 'sealed' not in already_processed:
            already_processed.add('sealed')
            showIndent(outfile, level)
            outfile.write('sealed="%s",\n' % (self.sealed,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.compoundname is not None:
            showIndent(outfile, level)
            outfile.write('compoundname=%s,\n' % quote_python(self.compoundname).encode(ExternalEncoding))
        if self.title is not None:
            showIndent(outfile, level)
            outfile.write('title=%s,\n' % quote_python(self.title).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('basecompoundref=[\n')
        level += 1
        for basecompoundref_ in self.basecompoundref:
            showIndent(outfile, level)
            outfile.write('model_.compoundRefType(\n')
            basecompoundref_.exportLiteral(outfile, level, name_='compoundRefType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('derivedcompoundref=[\n')
        level += 1
        for derivedcompoundref_ in self.derivedcompoundref:
            showIndent(outfile, level)
            outfile.write('model_.compoundRefType(\n')
            derivedcompoundref_.exportLiteral(outfile, level, name_='compoundRefType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('includes=[\n')
        level += 1
        for includes_ in self.includes:
            showIndent(outfile, level)
            outfile.write('model_.incType(\n')
            includes_.exportLiteral(outfile, level, name_='incType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('includedby=[\n')
        level += 1
        for includedby_ in self.includedby:
            showIndent(outfile, level)
            outfile.write('model_.incType(\n')
            includedby_.exportLiteral(outfile, level, name_='incType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.incdepgraph is not None:
            showIndent(outfile, level)
            outfile.write('incdepgraph=model_.graphType(\n')
            self.incdepgraph.exportLiteral(outfile, level, name_='incdepgraph')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.invincdepgraph is not None:
            showIndent(outfile, level)
            outfile.write('invincdepgraph=model_.graphType(\n')
            self.invincdepgraph.exportLiteral(outfile, level, name_='invincdepgraph')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('innerdir=[\n')
        level += 1
        for innerdir_ in self.innerdir:
            showIndent(outfile, level)
            outfile.write('model_.refType(\n')
            innerdir_.exportLiteral(outfile, level, name_='refType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('innerfile=[\n')
        level += 1
        for innerfile_ in self.innerfile:
            showIndent(outfile, level)
            outfile.write('model_.refType(\n')
            innerfile_.exportLiteral(outfile, level, name_='refType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('innerclass=[\n')
        level += 1
        for innerclass_ in self.innerclass:
            showIndent(outfile, level)
            outfile.write('model_.refType(\n')
            innerclass_.exportLiteral(outfile, level, name_='refType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('innernamespace=[\n')
        level += 1
        for innernamespace_ in self.innernamespace:
            showIndent(outfile, level)
            outfile.write('model_.refType(\n')
            innernamespace_.exportLiteral(outfile, level, name_='refType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('innerpage=[\n')
        level += 1
        for innerpage_ in self.innerpage:
            showIndent(outfile, level)
            outfile.write('model_.refType(\n')
            innerpage_.exportLiteral(outfile, level, name_='refType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('innergroup=[\n')
        level += 1
        for innergroup_ in self.innergroup:
            showIndent(outfile, level)
            outfile.write('model_.refType(\n')
            innergroup_.exportLiteral(outfile, level, name_='refType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.templateparamlist is not None:
            showIndent(outfile, level)
            outfile.write('templateparamlist=model_.templateparamlistType(\n')
            self.templateparamlist.exportLiteral(outfile, level, name_='templateparamlist')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('sectiondef=[\n')
        level += 1
        for sectiondef_ in self.sectiondef:
            showIndent(outfile, level)
            outfile.write('model_.sectiondefType(\n')
            sectiondef_.exportLiteral(outfile, level, name_='sectiondefType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.briefdescription is not None:
            showIndent(outfile, level)
            outfile.write('briefdescription=model_.descriptionType(\n')
            self.briefdescription.exportLiteral(outfile, level, name_='briefdescription')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.detaileddescription is not None:
            showIndent(outfile, level)
            outfile.write('detaileddescription=model_.descriptionType(\n')
            self.detaileddescription.exportLiteral(outfile, level, name_='detaileddescription')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.inheritancegraph is not None:
            showIndent(outfile, level)
            outfile.write('inheritancegraph=model_.graphType(\n')
            self.inheritancegraph.exportLiteral(outfile, level, name_='inheritancegraph')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.collaborationgraph is not None:
            showIndent(outfile, level)
            outfile.write('collaborationgraph=model_.graphType(\n')
            self.collaborationgraph.exportLiteral(outfile, level, name_='collaborationgraph')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.programlisting is not None:
            showIndent(outfile, level)
            outfile.write('programlisting=model_.listingType(\n')
            self.programlisting.exportLiteral(outfile, level, name_='programlisting')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.location is not None:
            showIndent(outfile, level)
            outfile.write('location=model_.locationType(\n')
            self.location.exportLiteral(outfile, level, name_='location')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.listofallmembers is not None:
            showIndent(outfile, level)
            outfile.write('listofallmembers=model_.listofallmembersType(\n')
            self.listofallmembers.exportLiteral(outfile, level, name_='listofallmembers')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('kind', node)
        if value is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            self.kind = value
            self.validate_DoxCompoundKind(self.kind)    # validate type DoxCompoundKind
        value = find_attr_value_('abstract', node)
        if value is not None and 'abstract' not in already_processed:
            already_processed.add('abstract')
            self.abstract = value
            self.validate_DoxBool(self.abstract)    # validate type DoxBool
        value = find_attr_value_('prot', node)
        if value is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            self.prot = value
            self.validate_DoxProtectionKind(self.prot)    # validate type DoxProtectionKind
        value = find_attr_value_('final', node)
        if value is not None and 'final' not in already_processed:
            already_processed.add('final')
            self.final = value
            self.validate_DoxBool(self.final)    # validate type DoxBool
        value = find_attr_value_('sealed', node)
        if value is not None and 'sealed' not in already_processed:
            already_processed.add('sealed')
            self.sealed = value
            self.validate_DoxBool(self.sealed)    # validate type DoxBool
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'compoundname':
            compoundname_ = child_.text
            compoundname_ = self.gds_validate_string(compoundname_, node, 'compoundname')
            self.compoundname = compoundname_
        elif nodeName_ == 'title':
            title_ = child_.text
            title_ = self.gds_validate_string(title_, node, 'title')
            self.title = title_
        elif nodeName_ == 'basecompoundref':
            obj_ = compoundRefType.factory()
            obj_.build(child_)
            self.basecompoundref.append(obj_)
        elif nodeName_ == 'derivedcompoundref':
            obj_ = compoundRefType.factory()
            obj_.build(child_)
            self.derivedcompoundref.append(obj_)
        elif nodeName_ == 'includes':
            obj_ = incType.factory()
            obj_.build(child_)
            self.includes.append(obj_)
        elif nodeName_ == 'includedby':
            obj_ = incType.factory()
            obj_.build(child_)
            self.includedby.append(obj_)
        elif nodeName_ == 'incdepgraph':
            obj_ = graphType.factory()
            obj_.build(child_)
            self.incdepgraph = obj_
        elif nodeName_ == 'invincdepgraph':
            obj_ = graphType.factory()
            obj_.build(child_)
            self.invincdepgraph = obj_
        elif nodeName_ == 'innerdir':
            obj_ = refType.factory()
            obj_.build(child_)
            self.innerdir.append(obj_)
        elif nodeName_ == 'innerfile':
            obj_ = refType.factory()
            obj_.build(child_)
            self.innerfile.append(obj_)
        elif nodeName_ == 'innerclass':
            obj_ = refType.factory()
            obj_.build(child_)
            self.innerclass.append(obj_)
        elif nodeName_ == 'innernamespace':
            obj_ = refType.factory()
            obj_.build(child_)
            self.innernamespace.append(obj_)
        elif nodeName_ == 'innerpage':
            obj_ = refType.factory()
            obj_.build(child_)
            self.innerpage.append(obj_)
        elif nodeName_ == 'innergroup':
            obj_ = refType.factory()
            obj_.build(child_)
            self.innergroup.append(obj_)
        elif nodeName_ == 'templateparamlist':
            obj_ = templateparamlistType.factory()
            obj_.build(child_)
            self.templateparamlist = obj_
        elif nodeName_ == 'sectiondef':
            obj_ = sectiondefType.factory()
            obj_.build(child_)
            self.sectiondef.append(obj_)
        elif nodeName_ == 'briefdescription':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            self.briefdescription = obj_
        elif nodeName_ == 'detaileddescription':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            self.detaileddescription = obj_
        elif nodeName_ == 'inheritancegraph':
            obj_ = graphType.factory()
            obj_.build(child_)
            self.inheritancegraph = obj_
        elif nodeName_ == 'collaborationgraph':
            obj_ = graphType.factory()
            obj_.build(child_)
            self.collaborationgraph = obj_
        elif nodeName_ == 'programlisting':
            obj_ = listingType.factory()
            obj_.build(child_)
            self.programlisting = obj_
        elif nodeName_ == 'location':
            obj_ = locationType.factory()
            obj_.build(child_)
            self.location = obj_
        elif nodeName_ == 'listofallmembers':
            obj_ = listofallmembersType.factory()
            obj_.build(child_)
            self.listofallmembers = obj_
# end class compounddefType


class listofallmembersType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, member=None):
        if member is None:
            self.member = []
        else:
            self.member = member
    def factory(*args_, **kwargs_):
        if listofallmembersType.subclass:
            return listofallmembersType.subclass(*args_, **kwargs_)
        else:
            return listofallmembersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_member(self): return self.member
    def set_member(self, member): self.member = member
    def add_member(self, value): self.member.append(value)
    def insert_member(self, index, value): self.member[index] = value
    def hasContent_(self):
        if (
            self.member
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='listofallmembersType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='listofallmembersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='listofallmembersType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='listofallmembersType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for member_ in self.member:
            member_.export(outfile, level, namespace_, name_='member', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='listofallmembersType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('member=[\n')
        level += 1
        for member_ in self.member:
            showIndent(outfile, level)
            outfile.write('model_.memberRefType(\n')
            member_.exportLiteral(outfile, level, name_='memberRefType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'member':
            obj_ = memberRefType.factory()
            obj_.build(child_)
            self.member.append(obj_)
# end class listofallmembersType


class memberRefType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, virt=None, prot=None, refid=None, ambiguityscope=None, scope=None, name=None):
        self.virt = _cast(None, virt)
        self.prot = _cast(None, prot)
        self.refid = _cast(None, refid)
        self.ambiguityscope = _cast(None, ambiguityscope)
        self.scope = scope
        self.name = name
    def factory(*args_, **kwargs_):
        if memberRefType.subclass:
            return memberRefType.subclass(*args_, **kwargs_)
        else:
            return memberRefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_scope(self): return self.scope
    def set_scope(self, scope): self.scope = scope
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_virt(self): return self.virt
    def set_virt(self, virt): self.virt = virt
    def get_prot(self): return self.prot
    def set_prot(self, prot): self.prot = prot
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def get_ambiguityscope(self): return self.ambiguityscope
    def set_ambiguityscope(self, ambiguityscope): self.ambiguityscope = ambiguityscope
    def validate_DoxVirtualKind(self, value):
        # Validate type DoxVirtualKind, a restriction on xsd:string.
        pass
    def validate_DoxProtectionKind(self, value):
        # Validate type DoxProtectionKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.scope is not None or
            self.name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='memberRefType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='memberRefType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='memberRefType'):
        if self.virt is not None and 'virt' not in already_processed:
            already_processed.add('virt')
            outfile.write(' virt=%s' % (quote_attrib(self.virt), ))
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            outfile.write(' prot=%s' % (quote_attrib(self.prot), ))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
        if self.ambiguityscope is not None and 'ambiguityscope' not in already_processed:
            already_processed.add('ambiguityscope')
            outfile.write(' ambiguityscope=%s' % (self.gds_format_string(quote_attrib(self.ambiguityscope).encode(ExternalEncoding), input_name='ambiguityscope'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='memberRefType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.scope is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sscope>%s</%sscope>%s' % (namespace_, self.gds_format_string(quote_xml(self.scope).encode(ExternalEncoding), input_name='scope'), namespace_, eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='memberRefType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.virt is not None and 'virt' not in already_processed:
            already_processed.add('virt')
            showIndent(outfile, level)
            outfile.write('virt="%s",\n' % (self.virt,))
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            showIndent(outfile, level)
            outfile.write('prot="%s",\n' % (self.prot,))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
        if self.ambiguityscope is not None and 'ambiguityscope' not in already_processed:
            already_processed.add('ambiguityscope')
            showIndent(outfile, level)
            outfile.write('ambiguityscope="%s",\n' % (self.ambiguityscope,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.scope is not None:
            showIndent(outfile, level)
            outfile.write('scope=%s,\n' % quote_python(self.scope).encode(ExternalEncoding))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('virt', node)
        if value is not None and 'virt' not in already_processed:
            already_processed.add('virt')
            self.virt = value
            self.validate_DoxVirtualKind(self.virt)    # validate type DoxVirtualKind
        value = find_attr_value_('prot', node)
        if value is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            self.prot = value
            self.validate_DoxProtectionKind(self.prot)    # validate type DoxProtectionKind
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
        value = find_attr_value_('ambiguityscope', node)
        if value is not None and 'ambiguityscope' not in already_processed:
            already_processed.add('ambiguityscope')
            self.ambiguityscope = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'scope':
            scope_ = child_.text
            scope_ = self.gds_validate_string(scope_, node, 'scope')
            self.scope = scope_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
# end class memberRefType


class scope(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if scope.subclass:
            return scope.subclass(*args_, **kwargs_)
        else:
            return scope(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='scope', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='scope')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='scope'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='scope', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='scope'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class scope


class name(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if name.subclass:
            return name.subclass(*args_, **kwargs_)
        else:
            return name(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='name', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='name')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='name'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='name', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='name'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class name


class compoundRefType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, virt=None, prot=None, refid=None, valueOf_=None):
        self.virt = _cast(None, virt)
        self.prot = _cast(None, prot)
        self.refid = _cast(None, refid)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if compoundRefType.subclass:
            return compoundRefType.subclass(*args_, **kwargs_)
        else:
            return compoundRefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_virt(self): return self.virt
    def set_virt(self, virt): self.virt = virt
    def get_prot(self): return self.prot
    def set_prot(self, prot): self.prot = prot
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DoxVirtualKind(self, value):
        # Validate type DoxVirtualKind, a restriction on xsd:string.
        pass
    def validate_DoxProtectionKind(self, value):
        # Validate type DoxProtectionKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='compoundRefType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='compoundRefType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='compoundRefType'):
        if self.virt is not None and 'virt' not in already_processed:
            already_processed.add('virt')
            outfile.write(' virt=%s' % (quote_attrib(self.virt), ))
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            outfile.write(' prot=%s' % (quote_attrib(self.prot), ))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='compoundRefType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='compoundRefType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.virt is not None and 'virt' not in already_processed:
            already_processed.add('virt')
            showIndent(outfile, level)
            outfile.write('virt="%s",\n' % (self.virt,))
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            showIndent(outfile, level)
            outfile.write('prot="%s",\n' % (self.prot,))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('virt', node)
        if value is not None and 'virt' not in already_processed:
            already_processed.add('virt')
            self.virt = value
            self.validate_DoxVirtualKind(self.virt)    # validate type DoxVirtualKind
        value = find_attr_value_('prot', node)
        if value is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            self.prot = value
            self.validate_DoxProtectionKind(self.prot)    # validate type DoxProtectionKind
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class compoundRefType


class reimplementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, valueOf_=None):
        self.refid = _cast(None, refid)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if reimplementType.subclass:
            return reimplementType.subclass(*args_, **kwargs_)
        else:
            return reimplementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='reimplementType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='reimplementType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='reimplementType'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='reimplementType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='reimplementType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class reimplementType


class incType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, local=None, refid=None, valueOf_=None):
        self.local = _cast(None, local)
        self.refid = _cast(None, refid)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if incType.subclass:
            return incType.subclass(*args_, **kwargs_)
        else:
            return incType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_local(self): return self.local
    def set_local(self, local): self.local = local
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DoxBool(self, value):
        # Validate type DoxBool, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='incType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='incType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='incType'):
        if self.local is not None and 'local' not in already_processed:
            already_processed.add('local')
            outfile.write(' local=%s' % (quote_attrib(self.local), ))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='incType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='incType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.local is not None and 'local' not in already_processed:
            already_processed.add('local')
            showIndent(outfile, level)
            outfile.write('local="%s",\n' % (self.local,))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('local', node)
        if value is not None and 'local' not in already_processed:
            already_processed.add('local')
            self.local = value
            self.validate_DoxBool(self.local)    # validate type DoxBool
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class incType


class refType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, prot=None, refid=None, valueOf_=None):
        self.prot = _cast(None, prot)
        self.refid = _cast(None, refid)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if refType.subclass:
            return refType.subclass(*args_, **kwargs_)
        else:
            return refType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_prot(self): return self.prot
    def set_prot(self, prot): self.prot = prot
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DoxProtectionKind(self, value):
        # Validate type DoxProtectionKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='refType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='refType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='refType'):
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            outfile.write(' prot=%s' % (quote_attrib(self.prot), ))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='refType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='refType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            showIndent(outfile, level)
            outfile.write('prot="%s",\n' % (self.prot,))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('prot', node)
        if value is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            self.prot = value
            self.validate_DoxProtectionKind(self.prot)    # validate type DoxProtectionKind
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class refType


class refTextType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tooltip=None, refid=None, kindref=None, external=None, valueOf_=None):
        self.tooltip = _cast(None, tooltip)
        self.refid = _cast(None, refid)
        self.kindref = _cast(None, kindref)
        self.external = _cast(None, external)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if refTextType.subclass:
            return refTextType.subclass(*args_, **kwargs_)
        else:
            return refTextType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tooltip(self): return self.tooltip
    def set_tooltip(self, tooltip): self.tooltip = tooltip
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def get_kindref(self): return self.kindref
    def set_kindref(self, kindref): self.kindref = kindref
    def get_external(self): return self.external
    def set_external(self, external): self.external = external
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DoxRefKind(self, value):
        # Validate type DoxRefKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='refTextType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='refTextType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='refTextType'):
        if self.tooltip is not None and 'tooltip' not in already_processed:
            already_processed.add('tooltip')
            outfile.write(' tooltip=%s' % (self.gds_format_string(quote_attrib(self.tooltip).encode(ExternalEncoding), input_name='tooltip'), ))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
        if self.kindref is not None and 'kindref' not in already_processed:
            already_processed.add('kindref')
            outfile.write(' kindref=%s' % (quote_attrib(self.kindref), ))
        if self.external is not None and 'external' not in already_processed:
            already_processed.add('external')
            outfile.write(' external=%s' % (self.gds_format_string(quote_attrib(self.external).encode(ExternalEncoding), input_name='external'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='refTextType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='refTextType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.tooltip is not None and 'tooltip' not in already_processed:
            already_processed.add('tooltip')
            showIndent(outfile, level)
            outfile.write('tooltip="%s",\n' % (self.tooltip,))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
        if self.kindref is not None and 'kindref' not in already_processed:
            already_processed.add('kindref')
            showIndent(outfile, level)
            outfile.write('kindref="%s",\n' % (self.kindref,))
        if self.external is not None and 'external' not in already_processed:
            already_processed.add('external')
            showIndent(outfile, level)
            outfile.write('external="%s",\n' % (self.external,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('tooltip', node)
        if value is not None and 'tooltip' not in already_processed:
            already_processed.add('tooltip')
            self.tooltip = value
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
        value = find_attr_value_('kindref', node)
        if value is not None and 'kindref' not in already_processed:
            already_processed.add('kindref')
            self.kindref = value
            self.validate_DoxRefKind(self.kindref)    # validate type DoxRefKind
        value = find_attr_value_('external', node)
        if value is not None and 'external' not in already_processed:
            already_processed.add('external')
            self.external = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class refTextType


class sectiondefType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, kind=None, header=None, description=None, memberdef=None):
        self.kind = _cast(None, kind)
        self.header = header
        self.description = description
        if memberdef is None:
            self.memberdef = []
        else:
            self.memberdef = memberdef
    def factory(*args_, **kwargs_):
        if sectiondefType.subclass:
            return sectiondefType.subclass(*args_, **kwargs_)
        else:
            return sectiondefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_memberdef(self): return self.memberdef
    def set_memberdef(self, memberdef): self.memberdef = memberdef
    def add_memberdef(self, value): self.memberdef.append(value)
    def insert_memberdef(self, index, value): self.memberdef[index] = value
    def get_kind(self): return self.kind
    def set_kind(self, kind): self.kind = kind
    def validate_DoxSectionKind(self, value):
        # Validate type DoxSectionKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.header is not None or
            self.description is not None or
            self.memberdef
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='sectiondefType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sectiondefType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sectiondefType'):
        if self.kind is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            outfile.write(' kind=%s' % (quote_attrib(self.kind), ))
    def exportChildren(self, outfile, level, namespace_='', name_='sectiondefType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.header is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sheader>%s</%sheader>%s' % (namespace_, self.gds_format_string(quote_xml(self.header).encode(ExternalEncoding), input_name='header'), namespace_, eol_))
        if self.description is not None:
            self.description.export(outfile, level, namespace_, name_='description', pretty_print=pretty_print)
        for memberdef_ in self.memberdef:
            memberdef_.export(outfile, level, namespace_, name_='memberdef', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='sectiondefType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.kind is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            showIndent(outfile, level)
            outfile.write('kind="%s",\n' % (self.kind,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=%s,\n' % quote_python(self.header).encode(ExternalEncoding))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.descriptionType(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('memberdef=[\n')
        level += 1
        for memberdef_ in self.memberdef:
            showIndent(outfile, level)
            outfile.write('model_.memberdefType(\n')
            memberdef_.exportLiteral(outfile, level, name_='memberdefType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('kind', node)
        if value is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            self.kind = value
            self.validate_DoxSectionKind(self.kind)    # validate type DoxSectionKind
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            header_ = child_.text
            header_ = self.gds_validate_string(header_, node, 'header')
            self.header = header_
        elif nodeName_ == 'description':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            self.description = obj_
        elif nodeName_ == 'memberdef':
            obj_ = memberdefType.factory()
            obj_.build(child_)
            self.memberdef.append(obj_)
# end class sectiondefType


class memberdefType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, settable=None, virt=None, writable=None, static=None, id=None, const=None, raise_=None, prot=None, readable=None, add=None, volatile=None, sealed=None, new=None, final=None, initonly=None, mutable=None, optional=None, accessor=None, kind=None, required=None, explicit=None, remove=None, gettable=None, inline=None, templateparamlist=None, type_=None, definition=None, argsstring=None, name=None, read=None, write=None, bitfield=None, reimplements=None, reimplementedby=None, param=None, enumvalue=None, initializer=None, exceptions=None, briefdescription=None, detaileddescription=None, inbodydescription=None, location=None, references=None, referencedby=None):
        self.settable = _cast(None, settable)
        self.virt = _cast(None, virt)
        self.writable = _cast(None, writable)
        self.static = _cast(None, static)
        self.id = _cast(None, id)
        self.const = _cast(None, const)
        self.raise_ = _cast(None, raise_)
        self.prot = _cast(None, prot)
        self.readable = _cast(None, readable)
        self.add = _cast(None, add)
        self.volatile = _cast(None, volatile)
        self.sealed = _cast(None, sealed)
        self.new = _cast(None, new)
        self.final = _cast(None, final)
        self.initonly = _cast(None, initonly)
        self.mutable = _cast(None, mutable)
        self.optional = _cast(None, optional)
        self.accessor = _cast(None, accessor)
        self.kind = _cast(None, kind)
        self.required = _cast(None, required)
        self.explicit = _cast(None, explicit)
        self.remove = _cast(None, remove)
        self.gettable = _cast(None, gettable)
        self.inline = _cast(None, inline)
        self.templateparamlist = templateparamlist
        self.type_ = type_
        self.definition = definition
        self.argsstring = argsstring
        self.name = name
        self.read = read
        self.write = write
        self.bitfield = bitfield
        if reimplements is None:
            self.reimplements = []
        else:
            self.reimplements = reimplements
        if reimplementedby is None:
            self.reimplementedby = []
        else:
            self.reimplementedby = reimplementedby
        if param is None:
            self.param = []
        else:
            self.param = param
        if enumvalue is None:
            self.enumvalue = []
        else:
            self.enumvalue = enumvalue
        self.initializer = initializer
        self.exceptions = exceptions
        self.briefdescription = briefdescription
        self.detaileddescription = detaileddescription
        self.inbodydescription = inbodydescription
        self.location = location
        if references is None:
            self.references = []
        else:
            self.references = references
        if referencedby is None:
            self.referencedby = []
        else:
            self.referencedby = referencedby
    def factory(*args_, **kwargs_):
        if memberdefType.subclass:
            return memberdefType.subclass(*args_, **kwargs_)
        else:
            return memberdefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_templateparamlist(self): return self.templateparamlist
    def set_templateparamlist(self, templateparamlist): self.templateparamlist = templateparamlist
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_definition(self): return self.definition
    def set_definition(self, definition): self.definition = definition
    def get_argsstring(self): return self.argsstring
    def set_argsstring(self, argsstring): self.argsstring = argsstring
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_read(self): return self.read
    def set_read(self, read): self.read = read
    def get_write(self): return self.write
    def set_write(self, write): self.write = write
    def get_bitfield(self): return self.bitfield
    def set_bitfield(self, bitfield): self.bitfield = bitfield
    def get_reimplements(self): return self.reimplements
    def set_reimplements(self, reimplements): self.reimplements = reimplements
    def add_reimplements(self, value): self.reimplements.append(value)
    def insert_reimplements(self, index, value): self.reimplements[index] = value
    def get_reimplementedby(self): return self.reimplementedby
    def set_reimplementedby(self, reimplementedby): self.reimplementedby = reimplementedby
    def add_reimplementedby(self, value): self.reimplementedby.append(value)
    def insert_reimplementedby(self, index, value): self.reimplementedby[index] = value
    def get_param(self): return self.param
    def set_param(self, param): self.param = param
    def add_param(self, value): self.param.append(value)
    def insert_param(self, index, value): self.param[index] = value
    def get_enumvalue(self): return self.enumvalue
    def set_enumvalue(self, enumvalue): self.enumvalue = enumvalue
    def add_enumvalue(self, value): self.enumvalue.append(value)
    def insert_enumvalue(self, index, value): self.enumvalue[index] = value
    def get_initializer(self): return self.initializer
    def set_initializer(self, initializer): self.initializer = initializer
    def get_exceptions(self): return self.exceptions
    def set_exceptions(self, exceptions): self.exceptions = exceptions
    def get_briefdescription(self): return self.briefdescription
    def set_briefdescription(self, briefdescription): self.briefdescription = briefdescription
    def get_detaileddescription(self): return self.detaileddescription
    def set_detaileddescription(self, detaileddescription): self.detaileddescription = detaileddescription
    def get_inbodydescription(self): return self.inbodydescription
    def set_inbodydescription(self, inbodydescription): self.inbodydescription = inbodydescription
    def get_location(self): return self.location
    def set_location(self, location): self.location = location
    def get_references(self): return self.references
    def set_references(self, references): self.references = references
    def add_references(self, value): self.references.append(value)
    def insert_references(self, index, value): self.references[index] = value
    def get_referencedby(self): return self.referencedby
    def set_referencedby(self, referencedby): self.referencedby = referencedby
    def add_referencedby(self, value): self.referencedby.append(value)
    def insert_referencedby(self, index, value): self.referencedby[index] = value
    def get_settable(self): return self.settable
    def set_settable(self, settable): self.settable = settable
    def get_virt(self): return self.virt
    def set_virt(self, virt): self.virt = virt
    def get_writable(self): return self.writable
    def set_writable(self, writable): self.writable = writable
    def get_static(self): return self.static
    def set_static(self, static): self.static = static
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_const(self): return self.const
    def set_const(self, const): self.const = const
    def get_raise(self): return self.raise_
    def set_raise(self, raise_): self.raise_ = raise_
    def get_prot(self): return self.prot
    def set_prot(self, prot): self.prot = prot
    def get_readable(self): return self.readable
    def set_readable(self, readable): self.readable = readable
    def get_add(self): return self.add
    def set_add(self, add): self.add = add
    def get_volatile(self): return self.volatile
    def set_volatile(self, volatile): self.volatile = volatile
    def get_sealed(self): return self.sealed
    def set_sealed(self, sealed): self.sealed = sealed
    def get_new(self): return self.new
    def set_new(self, new): self.new = new
    def get_final(self): return self.final
    def set_final(self, final): self.final = final
    def get_initonly(self): return self.initonly
    def set_initonly(self, initonly): self.initonly = initonly
    def get_mutable(self): return self.mutable
    def set_mutable(self, mutable): self.mutable = mutable
    def get_optional(self): return self.optional
    def set_optional(self, optional): self.optional = optional
    def get_accessor(self): return self.accessor
    def set_accessor(self, accessor): self.accessor = accessor
    def get_kind(self): return self.kind
    def set_kind(self, kind): self.kind = kind
    def get_required(self): return self.required
    def set_required(self, required): self.required = required
    def get_explicit(self): return self.explicit
    def set_explicit(self, explicit): self.explicit = explicit
    def get_remove(self): return self.remove
    def set_remove(self, remove): self.remove = remove
    def get_gettable(self): return self.gettable
    def set_gettable(self, gettable): self.gettable = gettable
    def get_inline(self): return self.inline
    def set_inline(self, inline): self.inline = inline
    def validate_DoxBool(self, value):
        # Validate type DoxBool, a restriction on xsd:string.
        pass
    def validate_DoxVirtualKind(self, value):
        # Validate type DoxVirtualKind, a restriction on xsd:string.
        pass
    def validate_DoxProtectionKind(self, value):
        # Validate type DoxProtectionKind, a restriction on xsd:string.
        pass
    def validate_DoxAccessor(self, value):
        # Validate type DoxAccessor, a restriction on xsd:string.
        pass
    def validate_DoxMemberKind(self, value):
        # Validate type DoxMemberKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.templateparamlist is not None or
            self.type_ is not None or
            self.definition is not None or
            self.argsstring is not None or
            self.name is not None or
            self.read is not None or
            self.write is not None or
            self.bitfield is not None or
            self.reimplements or
            self.reimplementedby or
            self.param or
            self.enumvalue or
            self.initializer is not None or
            self.exceptions is not None or
            self.briefdescription is not None or
            self.detaileddescription is not None or
            self.inbodydescription is not None or
            self.location is not None or
            self.references or
            self.referencedby
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='memberdefType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='memberdefType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='memberdefType'):
        if self.settable is not None and 'settable' not in already_processed:
            already_processed.add('settable')
            outfile.write(' settable=%s' % (quote_attrib(self.settable), ))
        if self.virt is not None and 'virt' not in already_processed:
            already_processed.add('virt')
            outfile.write(' virt=%s' % (quote_attrib(self.virt), ))
        if self.writable is not None and 'writable' not in already_processed:
            already_processed.add('writable')
            outfile.write(' writable=%s' % (quote_attrib(self.writable), ))
        if self.static is not None and 'static' not in already_processed:
            already_processed.add('static')
            outfile.write(' static=%s' % (quote_attrib(self.static), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
        if self.const is not None and 'const' not in already_processed:
            already_processed.add('const')
            outfile.write(' const=%s' % (quote_attrib(self.const), ))
        if self.raise_ is not None and 'raise_' not in already_processed:
            already_processed.add('raise_')
            outfile.write(' raise=%s' % (quote_attrib(self.raise_), ))
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            outfile.write(' prot=%s' % (quote_attrib(self.prot), ))
        if self.readable is not None and 'readable' not in already_processed:
            already_processed.add('readable')
            outfile.write(' readable=%s' % (quote_attrib(self.readable), ))
        if self.add is not None and 'add' not in already_processed:
            already_processed.add('add')
            outfile.write(' add=%s' % (quote_attrib(self.add), ))
        if self.volatile is not None and 'volatile' not in already_processed:
            already_processed.add('volatile')
            outfile.write(' volatile=%s' % (quote_attrib(self.volatile), ))
        if self.sealed is not None and 'sealed' not in already_processed:
            already_processed.add('sealed')
            outfile.write(' sealed=%s' % (quote_attrib(self.sealed), ))
        if self.new is not None and 'new' not in already_processed:
            already_processed.add('new')
            outfile.write(' new=%s' % (quote_attrib(self.new), ))
        if self.final is not None and 'final' not in already_processed:
            already_processed.add('final')
            outfile.write(' final=%s' % (quote_attrib(self.final), ))
        if self.initonly is not None and 'initonly' not in already_processed:
            already_processed.add('initonly')
            outfile.write(' initonly=%s' % (quote_attrib(self.initonly), ))
        if self.mutable is not None and 'mutable' not in already_processed:
            already_processed.add('mutable')
            outfile.write(' mutable=%s' % (quote_attrib(self.mutable), ))
        if self.optional is not None and 'optional' not in already_processed:
            already_processed.add('optional')
            outfile.write(' optional=%s' % (quote_attrib(self.optional), ))
        if self.accessor is not None and 'accessor' not in already_processed:
            already_processed.add('accessor')
            outfile.write(' accessor=%s' % (quote_attrib(self.accessor), ))
        if self.kind is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            outfile.write(' kind=%s' % (quote_attrib(self.kind), ))
        if self.required is not None and 'required' not in already_processed:
            already_processed.add('required')
            outfile.write(' required=%s' % (quote_attrib(self.required), ))
        if self.explicit is not None and 'explicit' not in already_processed:
            already_processed.add('explicit')
            outfile.write(' explicit=%s' % (quote_attrib(self.explicit), ))
        if self.remove is not None and 'remove' not in already_processed:
            already_processed.add('remove')
            outfile.write(' remove=%s' % (quote_attrib(self.remove), ))
        if self.gettable is not None and 'gettable' not in already_processed:
            already_processed.add('gettable')
            outfile.write(' gettable=%s' % (quote_attrib(self.gettable), ))
        if self.inline is not None and 'inline' not in already_processed:
            already_processed.add('inline')
            outfile.write(' inline=%s' % (quote_attrib(self.inline), ))
    def exportChildren(self, outfile, level, namespace_='', name_='memberdefType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.templateparamlist is not None:
            self.templateparamlist.export(outfile, level, namespace_, name_='templateparamlist', pretty_print=pretty_print)
        if self.type_ is not None:
            self.type_.export(outfile, level, namespace_, name_='type', pretty_print=pretty_print)
        if self.definition is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdefinition>%s</%sdefinition>%s' % (namespace_, self.gds_format_string(quote_xml(self.definition).encode(ExternalEncoding), input_name='definition'), namespace_, eol_))
        if self.argsstring is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sargsstring>%s</%sargsstring>%s' % (namespace_, self.gds_format_string(quote_xml(self.argsstring).encode(ExternalEncoding), input_name='argsstring'), namespace_, eol_))
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
        if self.read is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sread>%s</%sread>%s' % (namespace_, self.gds_format_string(quote_xml(self.read).encode(ExternalEncoding), input_name='read'), namespace_, eol_))
        if self.write is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%swrite>%s</%swrite>%s' % (namespace_, self.gds_format_string(quote_xml(self.write).encode(ExternalEncoding), input_name='write'), namespace_, eol_))
        if self.bitfield is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbitfield>%s</%sbitfield>%s' % (namespace_, self.gds_format_string(quote_xml(self.bitfield).encode(ExternalEncoding), input_name='bitfield'), namespace_, eol_))
        for reimplements_ in self.reimplements:
            reimplements_.export(outfile, level, namespace_, name_='reimplements', pretty_print=pretty_print)
        for reimplementedby_ in self.reimplementedby:
            reimplementedby_.export(outfile, level, namespace_, name_='reimplementedby', pretty_print=pretty_print)
        for param_ in self.param:
            param_.export(outfile, level, namespace_, name_='param', pretty_print=pretty_print)
        for enumvalue_ in self.enumvalue:
            enumvalue_.export(outfile, level, namespace_, name_='enumvalue', pretty_print=pretty_print)
        if self.initializer is not None:
            self.initializer.export(outfile, level, namespace_, name_='initializer', pretty_print=pretty_print)
        if self.exceptions is not None:
            self.exceptions.export(outfile, level, namespace_, name_='exceptions', pretty_print=pretty_print)
        if self.briefdescription is not None:
            self.briefdescription.export(outfile, level, namespace_, name_='briefdescription', pretty_print=pretty_print)
        if self.detaileddescription is not None:
            self.detaileddescription.export(outfile, level, namespace_, name_='detaileddescription', pretty_print=pretty_print)
        if self.inbodydescription is not None:
            self.inbodydescription.export(outfile, level, namespace_, name_='inbodydescription', pretty_print=pretty_print)
        if self.location is not None:
            self.location.export(outfile, level, namespace_, name_='location', pretty_print=pretty_print)
        for references_ in self.references:
            references_.export(outfile, level, namespace_, name_='references', pretty_print=pretty_print)
        for referencedby_ in self.referencedby:
            referencedby_.export(outfile, level, namespace_, name_='referencedby', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='memberdefType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.settable is not None and 'settable' not in already_processed:
            already_processed.add('settable')
            showIndent(outfile, level)
            outfile.write('settable="%s",\n' % (self.settable,))
        if self.virt is not None and 'virt' not in already_processed:
            already_processed.add('virt')
            showIndent(outfile, level)
            outfile.write('virt="%s",\n' % (self.virt,))
        if self.writable is not None and 'writable' not in already_processed:
            already_processed.add('writable')
            showIndent(outfile, level)
            outfile.write('writable="%s",\n' % (self.writable,))
        if self.static is not None and 'static' not in already_processed:
            already_processed.add('static')
            showIndent(outfile, level)
            outfile.write('static="%s",\n' % (self.static,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
        if self.const is not None and 'const' not in already_processed:
            already_processed.add('const')
            showIndent(outfile, level)
            outfile.write('const="%s",\n' % (self.const,))
        if self.raise_ is not None and 'raise_' not in already_processed:
            already_processed.add('raise_')
            showIndent(outfile, level)
            outfile.write('raise_="%s",\n' % (self.raise_,))
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            showIndent(outfile, level)
            outfile.write('prot="%s",\n' % (self.prot,))
        if self.readable is not None and 'readable' not in already_processed:
            already_processed.add('readable')
            showIndent(outfile, level)
            outfile.write('readable="%s",\n' % (self.readable,))
        if self.add is not None and 'add' not in already_processed:
            already_processed.add('add')
            showIndent(outfile, level)
            outfile.write('add="%s",\n' % (self.add,))
        if self.volatile is not None and 'volatile' not in already_processed:
            already_processed.add('volatile')
            showIndent(outfile, level)
            outfile.write('volatile="%s",\n' % (self.volatile,))
        if self.sealed is not None and 'sealed' not in already_processed:
            already_processed.add('sealed')
            showIndent(outfile, level)
            outfile.write('sealed="%s",\n' % (self.sealed,))
        if self.new is not None and 'new' not in already_processed:
            already_processed.add('new')
            showIndent(outfile, level)
            outfile.write('new="%s",\n' % (self.new,))
        if self.final is not None and 'final' not in already_processed:
            already_processed.add('final')
            showIndent(outfile, level)
            outfile.write('final="%s",\n' % (self.final,))
        if self.initonly is not None and 'initonly' not in already_processed:
            already_processed.add('initonly')
            showIndent(outfile, level)
            outfile.write('initonly="%s",\n' % (self.initonly,))
        if self.mutable is not None and 'mutable' not in already_processed:
            already_processed.add('mutable')
            showIndent(outfile, level)
            outfile.write('mutable="%s",\n' % (self.mutable,))
        if self.optional is not None and 'optional' not in already_processed:
            already_processed.add('optional')
            showIndent(outfile, level)
            outfile.write('optional="%s",\n' % (self.optional,))
        if self.accessor is not None and 'accessor' not in already_processed:
            already_processed.add('accessor')
            showIndent(outfile, level)
            outfile.write('accessor="%s",\n' % (self.accessor,))
        if self.kind is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            showIndent(outfile, level)
            outfile.write('kind="%s",\n' % (self.kind,))
        if self.required is not None and 'required' not in already_processed:
            already_processed.add('required')
            showIndent(outfile, level)
            outfile.write('required="%s",\n' % (self.required,))
        if self.explicit is not None and 'explicit' not in already_processed:
            already_processed.add('explicit')
            showIndent(outfile, level)
            outfile.write('explicit="%s",\n' % (self.explicit,))
        if self.remove is not None and 'remove' not in already_processed:
            already_processed.add('remove')
            showIndent(outfile, level)
            outfile.write('remove="%s",\n' % (self.remove,))
        if self.gettable is not None and 'gettable' not in already_processed:
            already_processed.add('gettable')
            showIndent(outfile, level)
            outfile.write('gettable="%s",\n' % (self.gettable,))
        if self.inline is not None and 'inline' not in already_processed:
            already_processed.add('inline')
            showIndent(outfile, level)
            outfile.write('inline="%s",\n' % (self.inline,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.templateparamlist is not None:
            showIndent(outfile, level)
            outfile.write('templateparamlist=model_.templateparamlistType(\n')
            self.templateparamlist.exportLiteral(outfile, level, name_='templateparamlist')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=model_.linkedTextType(\n')
            self.type_.exportLiteral(outfile, level, name_='type')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.definition is not None:
            showIndent(outfile, level)
            outfile.write('definition=%s,\n' % quote_python(self.definition).encode(ExternalEncoding))
        if self.argsstring is not None:
            showIndent(outfile, level)
            outfile.write('argsstring=%s,\n' % quote_python(self.argsstring).encode(ExternalEncoding))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.read is not None:
            showIndent(outfile, level)
            outfile.write('read=%s,\n' % quote_python(self.read).encode(ExternalEncoding))
        if self.write is not None:
            showIndent(outfile, level)
            outfile.write('write=%s,\n' % quote_python(self.write).encode(ExternalEncoding))
        if self.bitfield is not None:
            showIndent(outfile, level)
            outfile.write('bitfield=%s,\n' % quote_python(self.bitfield).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('reimplements=[\n')
        level += 1
        for reimplements_ in self.reimplements:
            showIndent(outfile, level)
            outfile.write('model_.reimplementType(\n')
            reimplements_.exportLiteral(outfile, level, name_='reimplementType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('reimplementedby=[\n')
        level += 1
        for reimplementedby_ in self.reimplementedby:
            showIndent(outfile, level)
            outfile.write('model_.reimplementType(\n')
            reimplementedby_.exportLiteral(outfile, level, name_='reimplementType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('param=[\n')
        level += 1
        for param_ in self.param:
            showIndent(outfile, level)
            outfile.write('model_.paramType(\n')
            param_.exportLiteral(outfile, level, name_='paramType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumvalue=[\n')
        level += 1
        for enumvalue_ in self.enumvalue:
            showIndent(outfile, level)
            outfile.write('model_.enumvalueType(\n')
            enumvalue_.exportLiteral(outfile, level, name_='enumvalueType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.initializer is not None:
            showIndent(outfile, level)
            outfile.write('initializer=model_.linkedTextType(\n')
            self.initializer.exportLiteral(outfile, level, name_='initializer')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.exceptions is not None:
            showIndent(outfile, level)
            outfile.write('exceptions=model_.linkedTextType(\n')
            self.exceptions.exportLiteral(outfile, level, name_='exceptions')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.briefdescription is not None:
            showIndent(outfile, level)
            outfile.write('briefdescription=model_.descriptionType(\n')
            self.briefdescription.exportLiteral(outfile, level, name_='briefdescription')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.detaileddescription is not None:
            showIndent(outfile, level)
            outfile.write('detaileddescription=model_.descriptionType(\n')
            self.detaileddescription.exportLiteral(outfile, level, name_='detaileddescription')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.inbodydescription is not None:
            showIndent(outfile, level)
            outfile.write('inbodydescription=model_.descriptionType(\n')
            self.inbodydescription.exportLiteral(outfile, level, name_='inbodydescription')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.location is not None:
            showIndent(outfile, level)
            outfile.write('location=model_.locationType(\n')
            self.location.exportLiteral(outfile, level, name_='location')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('references=[\n')
        level += 1
        for references_ in self.references:
            showIndent(outfile, level)
            outfile.write('model_.referenceType(\n')
            references_.exportLiteral(outfile, level, name_='referenceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('referencedby=[\n')
        level += 1
        for referencedby_ in self.referencedby:
            showIndent(outfile, level)
            outfile.write('model_.referenceType(\n')
            referencedby_.exportLiteral(outfile, level, name_='referenceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('settable', node)
        if value is not None and 'settable' not in already_processed:
            already_processed.add('settable')
            self.settable = value
            self.validate_DoxBool(self.settable)    # validate type DoxBool
        value = find_attr_value_('virt', node)
        if value is not None and 'virt' not in already_processed:
            already_processed.add('virt')
            self.virt = value
            self.validate_DoxVirtualKind(self.virt)    # validate type DoxVirtualKind
        value = find_attr_value_('writable', node)
        if value is not None and 'writable' not in already_processed:
            already_processed.add('writable')
            self.writable = value
            self.validate_DoxBool(self.writable)    # validate type DoxBool
        value = find_attr_value_('static', node)
        if value is not None and 'static' not in already_processed:
            already_processed.add('static')
            self.static = value
            self.validate_DoxBool(self.static)    # validate type DoxBool
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('const', node)
        if value is not None and 'const' not in already_processed:
            already_processed.add('const')
            self.const = value
            self.validate_DoxBool(self.const)    # validate type DoxBool
        value = find_attr_value_('raise', node)
        if value is not None and 'raise' not in already_processed:
            already_processed.add('raise')
            self.raise_ = value
            self.validate_DoxBool(self.raise_)    # validate type DoxBool
        value = find_attr_value_('prot', node)
        if value is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            self.prot = value
            self.validate_DoxProtectionKind(self.prot)    # validate type DoxProtectionKind
        value = find_attr_value_('readable', node)
        if value is not None and 'readable' not in already_processed:
            already_processed.add('readable')
            self.readable = value
            self.validate_DoxBool(self.readable)    # validate type DoxBool
        value = find_attr_value_('add', node)
        if value is not None and 'add' not in already_processed:
            already_processed.add('add')
            self.add = value
            self.validate_DoxBool(self.add)    # validate type DoxBool
        value = find_attr_value_('volatile', node)
        if value is not None and 'volatile' not in already_processed:
            already_processed.add('volatile')
            self.volatile = value
            self.validate_DoxBool(self.volatile)    # validate type DoxBool
        value = find_attr_value_('sealed', node)
        if value is not None and 'sealed' not in already_processed:
            already_processed.add('sealed')
            self.sealed = value
            self.validate_DoxBool(self.sealed)    # validate type DoxBool
        value = find_attr_value_('new', node)
        if value is not None and 'new' not in already_processed:
            already_processed.add('new')
            self.new = value
            self.validate_DoxBool(self.new)    # validate type DoxBool
        value = find_attr_value_('final', node)
        if value is not None and 'final' not in already_processed:
            already_processed.add('final')
            self.final = value
            self.validate_DoxBool(self.final)    # validate type DoxBool
        value = find_attr_value_('initonly', node)
        if value is not None and 'initonly' not in already_processed:
            already_processed.add('initonly')
            self.initonly = value
            self.validate_DoxBool(self.initonly)    # validate type DoxBool
        value = find_attr_value_('mutable', node)
        if value is not None and 'mutable' not in already_processed:
            already_processed.add('mutable')
            self.mutable = value
            self.validate_DoxBool(self.mutable)    # validate type DoxBool
        value = find_attr_value_('optional', node)
        if value is not None and 'optional' not in already_processed:
            already_processed.add('optional')
            self.optional = value
            self.validate_DoxBool(self.optional)    # validate type DoxBool
        value = find_attr_value_('accessor', node)
        if value is not None and 'accessor' not in already_processed:
            already_processed.add('accessor')
            self.accessor = value
            self.validate_DoxAccessor(self.accessor)    # validate type DoxAccessor
        value = find_attr_value_('kind', node)
        if value is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            self.kind = value
            self.validate_DoxMemberKind(self.kind)    # validate type DoxMemberKind
        value = find_attr_value_('required', node)
        if value is not None and 'required' not in already_processed:
            already_processed.add('required')
            self.required = value
            self.validate_DoxBool(self.required)    # validate type DoxBool
        value = find_attr_value_('explicit', node)
        if value is not None and 'explicit' not in already_processed:
            already_processed.add('explicit')
            self.explicit = value
            self.validate_DoxBool(self.explicit)    # validate type DoxBool
        value = find_attr_value_('remove', node)
        if value is not None and 'remove' not in already_processed:
            already_processed.add('remove')
            self.remove = value
            self.validate_DoxBool(self.remove)    # validate type DoxBool
        value = find_attr_value_('gettable', node)
        if value is not None and 'gettable' not in already_processed:
            already_processed.add('gettable')
            self.gettable = value
            self.validate_DoxBool(self.gettable)    # validate type DoxBool
        value = find_attr_value_('inline', node)
        if value is not None and 'inline' not in already_processed:
            already_processed.add('inline')
            self.inline = value
            self.validate_DoxBool(self.inline)    # validate type DoxBool
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'templateparamlist':
            obj_ = templateparamlistType.factory()
            obj_.build(child_)
            self.templateparamlist = obj_
        elif nodeName_ == 'type':
            obj_ = linkedTextType.factory()
            obj_.build(child_)
            self.type_ = obj_
        elif nodeName_ == 'definition':
            definition_ = child_.text
            definition_ = self.gds_validate_string(definition_, node, 'definition')
            self.definition = definition_
        elif nodeName_ == 'argsstring':
            argsstring_ = child_.text
            argsstring_ = self.gds_validate_string(argsstring_, node, 'argsstring')
            self.argsstring = argsstring_
        elif nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'read':
            read_ = child_.text
            read_ = self.gds_validate_string(read_, node, 'read')
            self.read = read_
        elif nodeName_ == 'write':
            write_ = child_.text
            write_ = self.gds_validate_string(write_, node, 'write')
            self.write = write_
        elif nodeName_ == 'bitfield':
            bitfield_ = child_.text
            bitfield_ = self.gds_validate_string(bitfield_, node, 'bitfield')
            self.bitfield = bitfield_
        elif nodeName_ == 'reimplements':
            obj_ = reimplementType.factory()
            obj_.build(child_)
            self.reimplements.append(obj_)
        elif nodeName_ == 'reimplementedby':
            obj_ = reimplementType.factory()
            obj_.build(child_)
            self.reimplementedby.append(obj_)
        elif nodeName_ == 'param':
            obj_ = paramType.factory()
            obj_.build(child_)
            self.param.append(obj_)
        elif nodeName_ == 'enumvalue':
            obj_ = enumvalueType.factory()
            obj_.build(child_)
            self.enumvalue.append(obj_)
        elif nodeName_ == 'initializer':
            obj_ = linkedTextType.factory()
            obj_.build(child_)
            self.initializer = obj_
        elif nodeName_ == 'exceptions':
            obj_ = linkedTextType.factory()
            obj_.build(child_)
            self.exceptions = obj_
        elif nodeName_ == 'briefdescription':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            self.briefdescription = obj_
        elif nodeName_ == 'detaileddescription':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            self.detaileddescription = obj_
        elif nodeName_ == 'inbodydescription':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            self.inbodydescription = obj_
        elif nodeName_ == 'location':
            obj_ = locationType.factory()
            obj_.build(child_)
            self.location = obj_
        elif nodeName_ == 'references':
            obj_ = referenceType.factory()
            obj_.build(child_)
            self.references.append(obj_)
        elif nodeName_ == 'referencedby':
            obj_ = referenceType.factory()
            obj_.build(child_)
            self.referencedby.append(obj_)
# end class memberdefType


class definition(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if definition.subclass:
            return definition.subclass(*args_, **kwargs_)
        else:
            return definition(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='definition', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='definition')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='definition'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='definition', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='definition'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class definition


class argsstring(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if argsstring.subclass:
            return argsstring.subclass(*args_, **kwargs_)
        else:
            return argsstring(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='argsstring', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='argsstring')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='argsstring'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='argsstring', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='argsstring'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class argsstring


class read(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if read.subclass:
            return read.subclass(*args_, **kwargs_)
        else:
            return read(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='read', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='read')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='read'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='read', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='read'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class read


class write(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if write.subclass:
            return write.subclass(*args_, **kwargs_)
        else:
            return write(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='write', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='write')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='write'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='write', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='write'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class write


class bitfield(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if bitfield.subclass:
            return bitfield.subclass(*args_, **kwargs_)
        else:
            return bitfield(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='bitfield', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bitfield')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bitfield'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bitfield', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='bitfield'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class bitfield


class descriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, title=None, para=None, sect1=None, internal=None, valueOf_=None, mixedclass_=None, content_=None):
        self.title = title
        if para is None:
            self.para = []
        else:
            self.para = para
        if sect1 is None:
            self.sect1 = []
        else:
            self.sect1 = sect1
        self.internal = internal
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if descriptionType.subclass:
            return descriptionType.subclass(*args_, **kwargs_)
        else:
            return descriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_sect1(self): return self.sect1
    def set_sect1(self, sect1): self.sect1 = sect1
    def add_sect1(self, value): self.sect1.append(value)
    def insert_sect1(self, index, value): self.sect1[index] = value
    def get_internal(self): return self.internal
    def set_internal(self, internal): self.internal = internal
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.title is not None or
            self.para or
            self.sect1 or
            self.internal is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='descriptionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='descriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='descriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='descriptionType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='descriptionType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'title' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'title', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'para', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_para'):
              self.add_para(obj_.value)
            elif hasattr(self, 'set_para'):
              self.set_para(obj_.value)
        elif nodeName_ == 'sect1':
            obj_ = docSect1Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect1', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect1'):
              self.add_sect1(obj_.value)
            elif hasattr(self, 'set_sect1'):
              self.set_sect1(obj_.value)
        elif nodeName_ == 'internal':
            obj_ = docInternalType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'internal', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_internal'):
              self.add_internal(obj_.value)
            elif hasattr(self, 'set_internal'):
              self.set_internal(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class descriptionType


class enumvalueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, prot=None, id=None, name=None, initializer=None, briefdescription=None, detaileddescription=None, valueOf_=None, mixedclass_=None, content_=None):
        self.prot = _cast(None, prot)
        self.id = _cast(None, id)
        self.name = name
        self.initializer = initializer
        self.briefdescription = briefdescription
        self.detaileddescription = detaileddescription
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if enumvalueType.subclass:
            return enumvalueType.subclass(*args_, **kwargs_)
        else:
            return enumvalueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_initializer(self): return self.initializer
    def set_initializer(self, initializer): self.initializer = initializer
    def get_briefdescription(self): return self.briefdescription
    def set_briefdescription(self, briefdescription): self.briefdescription = briefdescription
    def get_detaileddescription(self): return self.detaileddescription
    def set_detaileddescription(self, detaileddescription): self.detaileddescription = detaileddescription
    def get_prot(self): return self.prot
    def set_prot(self, prot): self.prot = prot
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DoxProtectionKind(self, value):
        # Validate type DoxProtectionKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.name is not None or
            self.initializer is not None or
            self.briefdescription is not None or
            self.detaileddescription is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='enumvalueType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumvalueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumvalueType'):
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            outfile.write(' prot=%s' % (quote_attrib(self.prot), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='enumvalueType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='enumvalueType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.prot is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            showIndent(outfile, level)
            outfile.write('prot="%s",\n' % (self.prot,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('prot', node)
        if value is not None and 'prot' not in already_processed:
            already_processed.add('prot')
            self.prot = value
            self.validate_DoxProtectionKind(self.prot)    # validate type DoxProtectionKind
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'name', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'initializer':
            obj_ = linkedTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'initializer', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_initializer'):
              self.add_initializer(obj_.value)
            elif hasattr(self, 'set_initializer'):
              self.set_initializer(obj_.value)
        elif nodeName_ == 'briefdescription':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'briefdescription', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_briefdescription'):
              self.add_briefdescription(obj_.value)
            elif hasattr(self, 'set_briefdescription'):
              self.set_briefdescription(obj_.value)
        elif nodeName_ == 'detaileddescription':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'detaileddescription', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_detaileddescription'):
              self.add_detaileddescription(obj_.value)
            elif hasattr(self, 'set_detaileddescription'):
              self.set_detaileddescription(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class enumvalueType


class templateparamlistType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, param=None):
        if param is None:
            self.param = []
        else:
            self.param = param
    def factory(*args_, **kwargs_):
        if templateparamlistType.subclass:
            return templateparamlistType.subclass(*args_, **kwargs_)
        else:
            return templateparamlistType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_param(self): return self.param
    def set_param(self, param): self.param = param
    def add_param(self, value): self.param.append(value)
    def insert_param(self, index, value): self.param[index] = value
    def hasContent_(self):
        if (
            self.param
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='templateparamlistType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='templateparamlistType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='templateparamlistType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='templateparamlistType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for param_ in self.param:
            param_.export(outfile, level, namespace_, name_='param', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='templateparamlistType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('param=[\n')
        level += 1
        for param_ in self.param:
            showIndent(outfile, level)
            outfile.write('model_.paramType(\n')
            param_.exportLiteral(outfile, level, name_='paramType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'param':
            obj_ = paramType.factory()
            obj_.build(child_)
            self.param.append(obj_)
# end class templateparamlistType


class paramType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, declname=None, defname=None, array=None, defval=None, briefdescription=None):
        self.type_ = type_
        self.declname = declname
        self.defname = defname
        self.array = array
        self.defval = defval
        self.briefdescription = briefdescription
    def factory(*args_, **kwargs_):
        if paramType.subclass:
            return paramType.subclass(*args_, **kwargs_)
        else:
            return paramType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_declname(self): return self.declname
    def set_declname(self, declname): self.declname = declname
    def get_defname(self): return self.defname
    def set_defname(self, defname): self.defname = defname
    def get_array(self): return self.array
    def set_array(self, array): self.array = array
    def get_defval(self): return self.defval
    def set_defval(self, defval): self.defval = defval
    def get_briefdescription(self): return self.briefdescription
    def set_briefdescription(self, briefdescription): self.briefdescription = briefdescription
    def hasContent_(self):
        if (
            self.type_ is not None or
            self.declname is not None or
            self.defname is not None or
            self.array is not None or
            self.defval is not None or
            self.briefdescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='paramType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='paramType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='paramType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='paramType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.type_ is not None:
            self.type_.export(outfile, level, namespace_, name_='type', pretty_print=pretty_print)
        if self.declname is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdeclname>%s</%sdeclname>%s' % (namespace_, self.gds_format_string(quote_xml(self.declname).encode(ExternalEncoding), input_name='declname'), namespace_, eol_))
        if self.defname is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdefname>%s</%sdefname>%s' % (namespace_, self.gds_format_string(quote_xml(self.defname).encode(ExternalEncoding), input_name='defname'), namespace_, eol_))
        if self.array is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sarray>%s</%sarray>%s' % (namespace_, self.gds_format_string(quote_xml(self.array).encode(ExternalEncoding), input_name='array'), namespace_, eol_))
        if self.defval is not None:
            self.defval.export(outfile, level, namespace_, name_='defval', pretty_print=pretty_print)
        if self.briefdescription is not None:
            self.briefdescription.export(outfile, level, namespace_, name_='briefdescription', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='paramType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=model_.linkedTextType(\n')
            self.type_.exportLiteral(outfile, level, name_='type')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.declname is not None:
            showIndent(outfile, level)
            outfile.write('declname=%s,\n' % quote_python(self.declname).encode(ExternalEncoding))
        if self.defname is not None:
            showIndent(outfile, level)
            outfile.write('defname=%s,\n' % quote_python(self.defname).encode(ExternalEncoding))
        if self.array is not None:
            showIndent(outfile, level)
            outfile.write('array=%s,\n' % quote_python(self.array).encode(ExternalEncoding))
        if self.defval is not None:
            showIndent(outfile, level)
            outfile.write('defval=model_.linkedTextType(\n')
            self.defval.exportLiteral(outfile, level, name_='defval')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.briefdescription is not None:
            showIndent(outfile, level)
            outfile.write('briefdescription=model_.descriptionType(\n')
            self.briefdescription.exportLiteral(outfile, level, name_='briefdescription')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'type':
            obj_ = linkedTextType.factory()
            obj_.build(child_)
            self.type_ = obj_
        elif nodeName_ == 'declname':
            declname_ = child_.text
            declname_ = self.gds_validate_string(declname_, node, 'declname')
            self.declname = declname_
        elif nodeName_ == 'defname':
            defname_ = child_.text
            defname_ = self.gds_validate_string(defname_, node, 'defname')
            self.defname = defname_
        elif nodeName_ == 'array':
            array_ = child_.text
            array_ = self.gds_validate_string(array_, node, 'array')
            self.array = array_
        elif nodeName_ == 'defval':
            obj_ = linkedTextType.factory()
            obj_.build(child_)
            self.defval = obj_
        elif nodeName_ == 'briefdescription':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            self.briefdescription = obj_
# end class paramType


class declname(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if declname.subclass:
            return declname.subclass(*args_, **kwargs_)
        else:
            return declname(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='declname', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='declname')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='declname'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='declname', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='declname'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class declname


class defname(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if defname.subclass:
            return defname.subclass(*args_, **kwargs_)
        else:
            return defname(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='defname', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='defname')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='defname'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='defname', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='defname'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class defname


class array(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if array.subclass:
            return array.subclass(*args_, **kwargs_)
        else:
            return array(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='array', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='array')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='array'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='array', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='array'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class array


class linkedTextType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ref=None, valueOf_=None, mixedclass_=None, content_=None):
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if linkedTextType.subclass:
            return linkedTextType.subclass(*args_, **kwargs_)
        else:
            return linkedTextType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ref or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='linkedTextType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='linkedTextType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='linkedTextType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='linkedTextType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='linkedTextType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ref':
            obj_ = refTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class linkedTextType


class graphType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, node=None):
        if node is None:
            self.node = []
        else:
            self.node = node
    def factory(*args_, **kwargs_):
        if graphType.subclass:
            return graphType.subclass(*args_, **kwargs_)
        else:
            return graphType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_node(self): return self.node
    def set_node(self, node): self.node = node
    def add_node(self, value): self.node.append(value)
    def insert_node(self, index, value): self.node[index] = value
    def hasContent_(self):
        if (
            self.node
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='graphType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='graphType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='graphType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='graphType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for node_ in self.node:
            node_.export(outfile, level, namespace_, name_='node', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='graphType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('node=[\n')
        level += 1
        for node_ in self.node:
            showIndent(outfile, level)
            outfile.write('model_.nodeType(\n')
            node_.exportLiteral(outfile, level, name_='nodeType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'node':
            obj_ = nodeType.factory()
            obj_.build(child_)
            self.node.append(obj_)
# end class graphType


class nodeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, label=None, link=None, childnode=None):
        self.id = _cast(None, id)
        self.label = label
        self.link = link
        if childnode is None:
            self.childnode = []
        else:
            self.childnode = childnode
    def factory(*args_, **kwargs_):
        if nodeType.subclass:
            return nodeType.subclass(*args_, **kwargs_)
        else:
            return nodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def get_childnode(self): return self.childnode
    def set_childnode(self, childnode): self.childnode = childnode
    def add_childnode(self, value): self.childnode.append(value)
    def insert_childnode(self, index, value): self.childnode[index] = value
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def hasContent_(self):
        if (
            self.label is not None or
            self.link is not None or
            self.childnode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nodeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nodeType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='nodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.label is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slabel>%s</%slabel>%s' % (namespace_, self.gds_format_string(quote_xml(self.label).encode(ExternalEncoding), input_name='label'), namespace_, eol_))
        if self.link is not None:
            self.link.export(outfile, level, namespace_, name_='link', pretty_print=pretty_print)
        for childnode_ in self.childnode:
            childnode_.export(outfile, level, namespace_, name_='childnode', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='nodeType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.label is not None:
            showIndent(outfile, level)
            outfile.write('label=%s,\n' % quote_python(self.label).encode(ExternalEncoding))
        if self.link is not None:
            showIndent(outfile, level)
            outfile.write('link=model_.linkType(\n')
            self.link.exportLiteral(outfile, level, name_='link')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('childnode=[\n')
        level += 1
        for childnode_ in self.childnode:
            showIndent(outfile, level)
            outfile.write('model_.childnodeType(\n')
            childnode_.exportLiteral(outfile, level, name_='childnodeType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'label':
            label_ = child_.text
            label_ = self.gds_validate_string(label_, node, 'label')
            self.label = label_
        elif nodeName_ == 'link':
            obj_ = linkType.factory()
            obj_.build(child_)
            self.link = obj_
        elif nodeName_ == 'childnode':
            obj_ = childnodeType.factory()
            obj_.build(child_)
            self.childnode.append(obj_)
# end class nodeType


class label(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if label.subclass:
            return label.subclass(*args_, **kwargs_)
        else:
            return label(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='label', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='label')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='label'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='label', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='label'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class label


class childnodeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, relation=None, refid=None, edgelabel=None):
        self.relation = _cast(None, relation)
        self.refid = _cast(None, refid)
        if edgelabel is None:
            self.edgelabel = []
        else:
            self.edgelabel = edgelabel
    def factory(*args_, **kwargs_):
        if childnodeType.subclass:
            return childnodeType.subclass(*args_, **kwargs_)
        else:
            return childnodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_edgelabel(self): return self.edgelabel
    def set_edgelabel(self, edgelabel): self.edgelabel = edgelabel
    def add_edgelabel(self, value): self.edgelabel.append(value)
    def insert_edgelabel(self, index, value): self.edgelabel[index] = value
    def get_relation(self): return self.relation
    def set_relation(self, relation): self.relation = relation
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def validate_DoxGraphRelation(self, value):
        # Validate type DoxGraphRelation, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.edgelabel
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='childnodeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='childnodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='childnodeType'):
        if self.relation is not None and 'relation' not in already_processed:
            already_processed.add('relation')
            outfile.write(' relation=%s' % (quote_attrib(self.relation), ))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='childnodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for edgelabel_ in self.edgelabel:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sedgelabel>%s</%sedgelabel>%s' % (namespace_, self.gds_format_string(quote_xml(edgelabel_).encode(ExternalEncoding), input_name='edgelabel'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='childnodeType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.relation is not None and 'relation' not in already_processed:
            already_processed.add('relation')
            showIndent(outfile, level)
            outfile.write('relation="%s",\n' % (self.relation,))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('edgelabel=[\n')
        level += 1
        for edgelabel_ in self.edgelabel:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(edgelabel_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('relation', node)
        if value is not None and 'relation' not in already_processed:
            already_processed.add('relation')
            self.relation = value
            self.validate_DoxGraphRelation(self.relation)    # validate type DoxGraphRelation
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'edgelabel':
            edgelabel_ = child_.text
            edgelabel_ = self.gds_validate_string(edgelabel_, node, 'edgelabel')
            self.edgelabel.append(edgelabel_)
# end class childnodeType


class edgelabel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if edgelabel.subclass:
            return edgelabel.subclass(*args_, **kwargs_)
        else:
            return edgelabel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='edgelabel', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='edgelabel')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='edgelabel'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='edgelabel', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='edgelabel'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class edgelabel


class linkType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, external=None):
        self.refid = _cast(None, refid)
        self.external = _cast(None, external)
        pass
    def factory(*args_, **kwargs_):
        if linkType.subclass:
            return linkType.subclass(*args_, **kwargs_)
        else:
            return linkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def get_external(self): return self.external
    def set_external(self, external): self.external = external
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='linkType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='linkType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='linkType'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
        if self.external is not None and 'external' not in already_processed:
            already_processed.add('external')
            outfile.write(' external=%s' % (self.gds_format_string(quote_attrib(self.external).encode(ExternalEncoding), input_name='external'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='linkType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='linkType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
        if self.external is not None and 'external' not in already_processed:
            already_processed.add('external')
            showIndent(outfile, level)
            outfile.write('external="%s",\n' % (self.external,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
        value = find_attr_value_('external', node)
        if value is not None and 'external' not in already_processed:
            already_processed.add('external')
            self.external = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class linkType


class listingType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codeline=None):
        if codeline is None:
            self.codeline = []
        else:
            self.codeline = codeline
    def factory(*args_, **kwargs_):
        if listingType.subclass:
            return listingType.subclass(*args_, **kwargs_)
        else:
            return listingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codeline(self): return self.codeline
    def set_codeline(self, codeline): self.codeline = codeline
    def add_codeline(self, value): self.codeline.append(value)
    def insert_codeline(self, index, value): self.codeline[index] = value
    def hasContent_(self):
        if (
            self.codeline
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='listingType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='listingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='listingType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='listingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for codeline_ in self.codeline:
            codeline_.export(outfile, level, namespace_, name_='codeline', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='listingType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('codeline=[\n')
        level += 1
        for codeline_ in self.codeline:
            showIndent(outfile, level)
            outfile.write('model_.codelineType(\n')
            codeline_.exportLiteral(outfile, level, name_='codelineType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codeline':
            obj_ = codelineType.factory()
            obj_.build(child_)
            self.codeline.append(obj_)
# end class listingType


class codelineType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, external=None, lineno=None, refkind=None, refid=None, highlight=None):
        self.external = _cast(None, external)
        self.lineno = _cast(int, lineno)
        self.refkind = _cast(None, refkind)
        self.refid = _cast(None, refid)
        if highlight is None:
            self.highlight = []
        else:
            self.highlight = highlight
    def factory(*args_, **kwargs_):
        if codelineType.subclass:
            return codelineType.subclass(*args_, **kwargs_)
        else:
            return codelineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_highlight(self): return self.highlight
    def set_highlight(self, highlight): self.highlight = highlight
    def add_highlight(self, value): self.highlight.append(value)
    def insert_highlight(self, index, value): self.highlight[index] = value
    def get_external(self): return self.external
    def set_external(self, external): self.external = external
    def get_lineno(self): return self.lineno
    def set_lineno(self, lineno): self.lineno = lineno
    def get_refkind(self): return self.refkind
    def set_refkind(self, refkind): self.refkind = refkind
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def validate_DoxBool(self, value):
        # Validate type DoxBool, a restriction on xsd:string.
        pass
    def validate_DoxRefKind(self, value):
        # Validate type DoxRefKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.highlight
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='codelineType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='codelineType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='codelineType'):
        if self.external is not None and 'external' not in already_processed:
            already_processed.add('external')
            outfile.write(' external=%s' % (quote_attrib(self.external), ))
        if self.lineno is not None and 'lineno' not in already_processed:
            already_processed.add('lineno')
            outfile.write(' lineno="%s"' % self.gds_format_integer(self.lineno, input_name='lineno'))
        if self.refkind is not None and 'refkind' not in already_processed:
            already_processed.add('refkind')
            outfile.write(' refkind=%s' % (quote_attrib(self.refkind), ))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='codelineType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for highlight_ in self.highlight:
            highlight_.export(outfile, level, namespace_, name_='highlight', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='codelineType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.external is not None and 'external' not in already_processed:
            already_processed.add('external')
            showIndent(outfile, level)
            outfile.write('external="%s",\n' % (self.external,))
        if self.lineno is not None and 'lineno' not in already_processed:
            already_processed.add('lineno')
            showIndent(outfile, level)
            outfile.write('lineno=%d,\n' % (self.lineno,))
        if self.refkind is not None and 'refkind' not in already_processed:
            already_processed.add('refkind')
            showIndent(outfile, level)
            outfile.write('refkind="%s",\n' % (self.refkind,))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('highlight=[\n')
        level += 1
        for highlight_ in self.highlight:
            showIndent(outfile, level)
            outfile.write('model_.highlightType(\n')
            highlight_.exportLiteral(outfile, level, name_='highlightType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('external', node)
        if value is not None and 'external' not in already_processed:
            already_processed.add('external')
            self.external = value
            self.validate_DoxBool(self.external)    # validate type DoxBool
        value = find_attr_value_('lineno', node)
        if value is not None and 'lineno' not in already_processed:
            already_processed.add('lineno')
            try:
                self.lineno = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('refkind', node)
        if value is not None and 'refkind' not in already_processed:
            already_processed.add('refkind')
            self.refkind = value
            self.validate_DoxRefKind(self.refkind)    # validate type DoxRefKind
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'highlight':
            obj_ = highlightType.factory()
            obj_.build(child_)
            self.highlight.append(obj_)
# end class codelineType


class highlightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, class_=None, sp=None, ref=None, valueOf_=None, mixedclass_=None, content_=None):
        self.class_ = _cast(None, class_)
        if sp is None:
            self.sp = []
        else:
            self.sp = sp
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if highlightType.subclass:
            return highlightType.subclass(*args_, **kwargs_)
        else:
            return highlightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sp(self): return self.sp
    def set_sp(self, sp): self.sp = sp
    def add_sp(self, value): self.sp.append(value)
    def insert_sp(self, index, value): self.sp[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_class(self): return self.class_
    def set_class(self, class_): self.class_ = class_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DoxHighlightClass(self, value):
        # Validate type DoxHighlightClass, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.sp or
            self.ref or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='highlightType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='highlightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='highlightType'):
        if self.class_ is not None and 'class_' not in already_processed:
            already_processed.add('class_')
            outfile.write(' class=%s' % (quote_attrib(self.class_), ))
    def exportChildren(self, outfile, level, namespace_='', name_='highlightType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='highlightType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.class_ is not None and 'class_' not in already_processed:
            already_processed.add('class_')
            showIndent(outfile, level)
            outfile.write('class_="%s",\n' % (self.class_,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('class', node)
        if value is not None and 'class' not in already_processed:
            already_processed.add('class')
            self.class_ = value
            self.validate_DoxHighlightClass(self.class_)    # validate type DoxHighlightClass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sp' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'sp', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'ref':
            obj_ = refTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class highlightType


class sp(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if sp.subclass:
            return sp.subclass(*args_, **kwargs_)
        else:
            return sp(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='sp', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sp')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sp'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sp', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='sp'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class sp


class referenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, endline=None, startline=None, refid=None, compoundref=None, valueOf_=None, mixedclass_=None, content_=None):
        self.endline = _cast(int, endline)
        self.startline = _cast(int, startline)
        self.refid = _cast(None, refid)
        self.compoundref = _cast(None, compoundref)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if referenceType.subclass:
            return referenceType.subclass(*args_, **kwargs_)
        else:
            return referenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_endline(self): return self.endline
    def set_endline(self, endline): self.endline = endline
    def get_startline(self): return self.startline
    def set_startline(self, startline): self.startline = startline
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def get_compoundref(self): return self.compoundref
    def set_compoundref(self, compoundref): self.compoundref = compoundref
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='referenceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='referenceType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
        outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='referenceType'):
        if self.endline is not None and 'endline' not in already_processed:
            already_processed.add('endline')
            outfile.write(' endline="%s"' % self.gds_format_integer(self.endline, input_name='endline'))
        if self.startline is not None and 'startline' not in already_processed:
            already_processed.add('startline')
            outfile.write(' startline="%s"' % self.gds_format_integer(self.startline, input_name='startline'))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
        if self.compoundref is not None and 'compoundref' not in already_processed:
            already_processed.add('compoundref')
            outfile.write(' compoundref=%s' % (self.gds_format_string(quote_attrib(self.compoundref).encode(ExternalEncoding), input_name='compoundref'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='referenceType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='referenceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.endline is not None and 'endline' not in already_processed:
            already_processed.add('endline')
            showIndent(outfile, level)
            outfile.write('endline=%d,\n' % (self.endline,))
        if self.startline is not None and 'startline' not in already_processed:
            already_processed.add('startline')
            showIndent(outfile, level)
            outfile.write('startline=%d,\n' % (self.startline,))
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
        if self.compoundref is not None and 'compoundref' not in already_processed:
            already_processed.add('compoundref')
            showIndent(outfile, level)
            outfile.write('compoundref="%s",\n' % (self.compoundref,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('endline', node)
        if value is not None and 'endline' not in already_processed:
            already_processed.add('endline')
            try:
                self.endline = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('startline', node)
        if value is not None and 'startline' not in already_processed:
            already_processed.add('startline')
            try:
                self.startline = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
        value = find_attr_value_('compoundref', node)
        if value is not None and 'compoundref' not in already_processed:
            already_processed.add('compoundref')
            self.compoundref = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class referenceType


class locationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, bodystart=None, line=None, bodyend=None, bodyfile=None, file=None):
        self.bodystart = _cast(int, bodystart)
        self.line = _cast(int, line)
        self.bodyend = _cast(int, bodyend)
        self.bodyfile = _cast(None, bodyfile)
        self.file = _cast(None, file)
        pass
    def factory(*args_, **kwargs_):
        if locationType.subclass:
            return locationType.subclass(*args_, **kwargs_)
        else:
            return locationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_bodystart(self): return self.bodystart
    def set_bodystart(self, bodystart): self.bodystart = bodystart
    def get_line(self): return self.line
    def set_line(self, line): self.line = line
    def get_bodyend(self): return self.bodyend
    def set_bodyend(self, bodyend): self.bodyend = bodyend
    def get_bodyfile(self): return self.bodyfile
    def set_bodyfile(self, bodyfile): self.bodyfile = bodyfile
    def get_file(self): return self.file
    def set_file(self, file): self.file = file
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='locationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='locationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='locationType'):
        if self.bodystart is not None and 'bodystart' not in already_processed:
            already_processed.add('bodystart')
            outfile.write(' bodystart="%s"' % self.gds_format_integer(self.bodystart, input_name='bodystart'))
        if self.line is not None and 'line' not in already_processed:
            already_processed.add('line')
            outfile.write(' line="%s"' % self.gds_format_integer(self.line, input_name='line'))
        if self.bodyend is not None and 'bodyend' not in already_processed:
            already_processed.add('bodyend')
            outfile.write(' bodyend="%s"' % self.gds_format_integer(self.bodyend, input_name='bodyend'))
        if self.bodyfile is not None and 'bodyfile' not in already_processed:
            already_processed.add('bodyfile')
            outfile.write(' bodyfile=%s' % (self.gds_format_string(quote_attrib(self.bodyfile).encode(ExternalEncoding), input_name='bodyfile'), ))
        if self.file is not None and 'file' not in already_processed:
            already_processed.add('file')
            outfile.write(' file=%s' % (self.gds_format_string(quote_attrib(self.file).encode(ExternalEncoding), input_name='file'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='locationType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='locationType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.bodystart is not None and 'bodystart' not in already_processed:
            already_processed.add('bodystart')
            showIndent(outfile, level)
            outfile.write('bodystart=%d,\n' % (self.bodystart,))
        if self.line is not None and 'line' not in already_processed:
            already_processed.add('line')
            showIndent(outfile, level)
            outfile.write('line=%d,\n' % (self.line,))
        if self.bodyend is not None and 'bodyend' not in already_processed:
            already_processed.add('bodyend')
            showIndent(outfile, level)
            outfile.write('bodyend=%d,\n' % (self.bodyend,))
        if self.bodyfile is not None and 'bodyfile' not in already_processed:
            already_processed.add('bodyfile')
            showIndent(outfile, level)
            outfile.write('bodyfile="%s",\n' % (self.bodyfile,))
        if self.file is not None and 'file' not in already_processed:
            already_processed.add('file')
            showIndent(outfile, level)
            outfile.write('file="%s",\n' % (self.file,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('bodystart', node)
        if value is not None and 'bodystart' not in already_processed:
            already_processed.add('bodystart')
            try:
                self.bodystart = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('line', node)
        if value is not None and 'line' not in already_processed:
            already_processed.add('line')
            try:
                self.line = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('bodyend', node)
        if value is not None and 'bodyend' not in already_processed:
            already_processed.add('bodyend')
            try:
                self.bodyend = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('bodyfile', node)
        if value is not None and 'bodyfile' not in already_processed:
            already_processed.add('bodyfile')
            self.bodyfile = value
        value = find_attr_value_('file', node)
        if value is not None and 'file' not in already_processed:
            already_processed.add('file')
            self.file = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class locationType


class docSect1Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, title=None, para=None, sect2=None, internal=None, valueOf_=None, mixedclass_=None, content_=None):
        self.id = _cast(None, id)
        self.title = title
        if para is None:
            self.para = []
        else:
            self.para = para
        if sect2 is None:
            self.sect2 = []
        else:
            self.sect2 = sect2
        self.internal = internal
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docSect1Type.subclass:
            return docSect1Type.subclass(*args_, **kwargs_)
        else:
            return docSect1Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_sect2(self): return self.sect2
    def set_sect2(self, sect2): self.sect2 = sect2
    def add_sect2(self, value): self.sect2.append(value)
    def insert_sect2(self, index, value): self.sect2[index] = value
    def get_internal(self): return self.internal
    def set_internal(self, internal): self.internal = internal
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.title is not None or
            self.para or
            self.sect2 or
            self.internal is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docSect1Type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docSect1Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docSect1Type'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docSect1Type', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docSect1Type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'title' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'title', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'para', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_para'):
              self.add_para(obj_.value)
            elif hasattr(self, 'set_para'):
              self.set_para(obj_.value)
        elif nodeName_ == 'sect2':
            obj_ = docSect2Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect2', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect2'):
              self.add_sect2(obj_.value)
            elif hasattr(self, 'set_sect2'):
              self.set_sect2(obj_.value)
        elif nodeName_ == 'internal':
            obj_ = docInternalS1Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'internal', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_internal'):
              self.add_internal(obj_.value)
            elif hasattr(self, 'set_internal'):
              self.set_internal(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docSect1Type


class docSect2Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, title=None, para=None, sect3=None, internal=None, valueOf_=None, mixedclass_=None, content_=None):
        self.id = _cast(None, id)
        self.title = title
        if para is None:
            self.para = []
        else:
            self.para = para
        if sect3 is None:
            self.sect3 = []
        else:
            self.sect3 = sect3
        self.internal = internal
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docSect2Type.subclass:
            return docSect2Type.subclass(*args_, **kwargs_)
        else:
            return docSect2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_sect3(self): return self.sect3
    def set_sect3(self, sect3): self.sect3 = sect3
    def add_sect3(self, value): self.sect3.append(value)
    def insert_sect3(self, index, value): self.sect3[index] = value
    def get_internal(self): return self.internal
    def set_internal(self, internal): self.internal = internal
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.title is not None or
            self.para or
            self.sect3 or
            self.internal is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docSect2Type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docSect2Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docSect2Type'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docSect2Type', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docSect2Type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'title' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'title', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'para', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_para'):
              self.add_para(obj_.value)
            elif hasattr(self, 'set_para'):
              self.set_para(obj_.value)
        elif nodeName_ == 'sect3':
            obj_ = docSect3Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect3', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect3'):
              self.add_sect3(obj_.value)
            elif hasattr(self, 'set_sect3'):
              self.set_sect3(obj_.value)
        elif nodeName_ == 'internal':
            obj_ = docInternalS2Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'internal', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_internal'):
              self.add_internal(obj_.value)
            elif hasattr(self, 'set_internal'):
              self.set_internal(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docSect2Type


class docSect3Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, title=None, para=None, sect4=None, internal=None, valueOf_=None, mixedclass_=None, content_=None):
        self.id = _cast(None, id)
        self.title = title
        if para is None:
            self.para = []
        else:
            self.para = para
        if sect4 is None:
            self.sect4 = []
        else:
            self.sect4 = sect4
        self.internal = internal
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docSect3Type.subclass:
            return docSect3Type.subclass(*args_, **kwargs_)
        else:
            return docSect3Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_sect4(self): return self.sect4
    def set_sect4(self, sect4): self.sect4 = sect4
    def add_sect4(self, value): self.sect4.append(value)
    def insert_sect4(self, index, value): self.sect4[index] = value
    def get_internal(self): return self.internal
    def set_internal(self, internal): self.internal = internal
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.title is not None or
            self.para or
            self.sect4 or
            self.internal is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docSect3Type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docSect3Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docSect3Type'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docSect3Type', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docSect3Type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'title' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'title', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'para', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_para'):
              self.add_para(obj_.value)
            elif hasattr(self, 'set_para'):
              self.set_para(obj_.value)
        elif nodeName_ == 'sect4':
            obj_ = docSect4Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect4', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect4'):
              self.add_sect4(obj_.value)
            elif hasattr(self, 'set_sect4'):
              self.set_sect4(obj_.value)
        elif nodeName_ == 'internal':
            obj_ = docInternalS3Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'internal', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_internal'):
              self.add_internal(obj_.value)
            elif hasattr(self, 'set_internal'):
              self.set_internal(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docSect3Type


class docSect4Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, title=None, para=None, internal=None, valueOf_=None, mixedclass_=None, content_=None):
        self.id = _cast(None, id)
        self.title = title
        if para is None:
            self.para = []
        else:
            self.para = para
        self.internal = internal
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docSect4Type.subclass:
            return docSect4Type.subclass(*args_, **kwargs_)
        else:
            return docSect4Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_internal(self): return self.internal
    def set_internal(self, internal): self.internal = internal
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.title is not None or
            self.para or
            self.internal is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docSect4Type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docSect4Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docSect4Type'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docSect4Type', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docSect4Type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'title' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'title', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'para', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_para'):
              self.add_para(obj_.value)
            elif hasattr(self, 'set_para'):
              self.set_para(obj_.value)
        elif nodeName_ == 'internal':
            obj_ = docInternalS4Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'internal', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_internal'):
              self.add_internal(obj_.value)
            elif hasattr(self, 'set_internal'):
              self.set_internal(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docSect4Type


class docInternalType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, para=None, sect1=None, valueOf_=None, mixedclass_=None, content_=None):
        if para is None:
            self.para = []
        else:
            self.para = para
        if sect1 is None:
            self.sect1 = []
        else:
            self.sect1 = sect1
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docInternalType.subclass:
            return docInternalType.subclass(*args_, **kwargs_)
        else:
            return docInternalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_sect1(self): return self.sect1
    def set_sect1(self, sect1): self.sect1 = sect1
    def add_sect1(self, value): self.sect1.append(value)
    def insert_sect1(self, index, value): self.sect1[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.para or
            self.sect1 or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docInternalType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docInternalType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docInternalType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docInternalType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docInternalType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'para', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_para'):
              self.add_para(obj_.value)
            elif hasattr(self, 'set_para'):
              self.set_para(obj_.value)
        elif nodeName_ == 'sect1':
            obj_ = docSect1Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect1', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect1'):
              self.add_sect1(obj_.value)
            elif hasattr(self, 'set_sect1'):
              self.set_sect1(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docInternalType


class docInternalS1Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, para=None, sect2=None, valueOf_=None, mixedclass_=None, content_=None):
        if para is None:
            self.para = []
        else:
            self.para = para
        if sect2 is None:
            self.sect2 = []
        else:
            self.sect2 = sect2
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docInternalS1Type.subclass:
            return docInternalS1Type.subclass(*args_, **kwargs_)
        else:
            return docInternalS1Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_sect2(self): return self.sect2
    def set_sect2(self, sect2): self.sect2 = sect2
    def add_sect2(self, value): self.sect2.append(value)
    def insert_sect2(self, index, value): self.sect2[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.para or
            self.sect2 or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docInternalS1Type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docInternalS1Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docInternalS1Type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docInternalS1Type', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docInternalS1Type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'para', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_para'):
              self.add_para(obj_.value)
            elif hasattr(self, 'set_para'):
              self.set_para(obj_.value)
        elif nodeName_ == 'sect2':
            obj_ = docSect2Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect2', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect2'):
              self.add_sect2(obj_.value)
            elif hasattr(self, 'set_sect2'):
              self.set_sect2(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docInternalS1Type


class docInternalS2Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, para=None, sect3=None, valueOf_=None, mixedclass_=None, content_=None):
        if para is None:
            self.para = []
        else:
            self.para = para
        if sect3 is None:
            self.sect3 = []
        else:
            self.sect3 = sect3
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docInternalS2Type.subclass:
            return docInternalS2Type.subclass(*args_, **kwargs_)
        else:
            return docInternalS2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_sect3(self): return self.sect3
    def set_sect3(self, sect3): self.sect3 = sect3
    def add_sect3(self, value): self.sect3.append(value)
    def insert_sect3(self, index, value): self.sect3[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.para or
            self.sect3 or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docInternalS2Type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docInternalS2Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docInternalS2Type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docInternalS2Type', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docInternalS2Type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'para', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_para'):
              self.add_para(obj_.value)
            elif hasattr(self, 'set_para'):
              self.set_para(obj_.value)
        elif nodeName_ == 'sect3':
            obj_ = docSect3Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect3', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect3'):
              self.add_sect3(obj_.value)
            elif hasattr(self, 'set_sect3'):
              self.set_sect3(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docInternalS2Type


class docInternalS3Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, para=None, sect3=None, valueOf_=None, mixedclass_=None, content_=None):
        if para is None:
            self.para = []
        else:
            self.para = para
        if sect3 is None:
            self.sect3 = []
        else:
            self.sect3 = sect3
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docInternalS3Type.subclass:
            return docInternalS3Type.subclass(*args_, **kwargs_)
        else:
            return docInternalS3Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_sect3(self): return self.sect3
    def set_sect3(self, sect3): self.sect3 = sect3
    def add_sect3(self, value): self.sect3.append(value)
    def insert_sect3(self, index, value): self.sect3[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.para or
            self.sect3 or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docInternalS3Type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docInternalS3Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docInternalS3Type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docInternalS3Type', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docInternalS3Type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'para', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_para'):
              self.add_para(obj_.value)
            elif hasattr(self, 'set_para'):
              self.set_para(obj_.value)
        elif nodeName_ == 'sect3':
            obj_ = docSect4Type.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect3', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect3'):
              self.add_sect3(obj_.value)
            elif hasattr(self, 'set_sect3'):
              self.set_sect3(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docInternalS3Type


class docInternalS4Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, para=None, valueOf_=None, mixedclass_=None, content_=None):
        if para is None:
            self.para = []
        else:
            self.para = para
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docInternalS4Type.subclass:
            return docInternalS4Type.subclass(*args_, **kwargs_)
        else:
            return docInternalS4Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.para or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docInternalS4Type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docInternalS4Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docInternalS4Type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docInternalS4Type', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docInternalS4Type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'para', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_para'):
              self.add_para(obj_.value)
            elif hasattr(self, 'set_para'):
              self.set_para(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docInternalS4Type


class docTitleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ulink=None, bold=None, emphasis=None, computeroutput=None, subscript=None, superscript=None, center=None, small=None, htmlonly=None, manonly=None, xmlonly=None, rtfonly=None, latexonly=None, dot=None, anchor=None, formula=None, ref=None, copy=None, trademark=None, registered=None, lsquo=None, rsquo=None, ldquo=None, rdquo=None, ndash=None, mdash=None, umlaut=None, acute=None, grave=None, circ=None, slash=None, tilde=None, cedil=None, ring=None, szlig=None, nonbreakablespace=None, aelig=None, AElig=None, Gamma=None, Delta=None, Theta=None, Lambda=None, Xi=None, Pi=None, Sigma=None, Upsilon=None, Phi=None, Psi=None, Omega=None, alpha=None, beta=None, gamma=None, delta=None, epsilon=None, zeta=None, eta=None, theta=None, iota=None, kappa=None, lambda_=None, mu=None, nu=None, xi=None, pi=None, rho=None, sigma=None, tau=None, upsilon=None, phi=None, chi=None, psi=None, omega=None, sigmaf=None, sect=None, deg=None, prime=None, Prime=None, infin=None, empty=None, plusmn=None, times=None, minus=None, sdot=None, part=None, nabla=None, radic=None, perp=None, sum=None, int=None, prod=None, sim=None, asymp=None, ne=None, equiv=None, prop=None, le=None, ge=None, larr=None, rarr=None, isin=None, notin=None, lceil=None, rceil=None, lfloor=None, rfloor=None, valueOf_=None, mixedclass_=None, content_=None):
        if ulink is None:
            self.ulink = []
        else:
            self.ulink = ulink
        if bold is None:
            self.bold = []
        else:
            self.bold = bold
        if emphasis is None:
            self.emphasis = []
        else:
            self.emphasis = emphasis
        if computeroutput is None:
            self.computeroutput = []
        else:
            self.computeroutput = computeroutput
        if subscript is None:
            self.subscript = []
        else:
            self.subscript = subscript
        if superscript is None:
            self.superscript = []
        else:
            self.superscript = superscript
        if center is None:
            self.center = []
        else:
            self.center = center
        if small is None:
            self.small = []
        else:
            self.small = small
        if htmlonly is None:
            self.htmlonly = []
        else:
            self.htmlonly = htmlonly
        if manonly is None:
            self.manonly = []
        else:
            self.manonly = manonly
        if xmlonly is None:
            self.xmlonly = []
        else:
            self.xmlonly = xmlonly
        if rtfonly is None:
            self.rtfonly = []
        else:
            self.rtfonly = rtfonly
        if latexonly is None:
            self.latexonly = []
        else:
            self.latexonly = latexonly
        if dot is None:
            self.dot = []
        else:
            self.dot = dot
        if anchor is None:
            self.anchor = []
        else:
            self.anchor = anchor
        if formula is None:
            self.formula = []
        else:
            self.formula = formula
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        if copy is None:
            self.copy = []
        else:
            self.copy = copy
        if trademark is None:
            self.trademark = []
        else:
            self.trademark = trademark
        if registered is None:
            self.registered = []
        else:
            self.registered = registered
        if lsquo is None:
            self.lsquo = []
        else:
            self.lsquo = lsquo
        if rsquo is None:
            self.rsquo = []
        else:
            self.rsquo = rsquo
        if ldquo is None:
            self.ldquo = []
        else:
            self.ldquo = ldquo
        if rdquo is None:
            self.rdquo = []
        else:
            self.rdquo = rdquo
        if ndash is None:
            self.ndash = []
        else:
            self.ndash = ndash
        if mdash is None:
            self.mdash = []
        else:
            self.mdash = mdash
        if umlaut is None:
            self.umlaut = []
        else:
            self.umlaut = umlaut
        if acute is None:
            self.acute = []
        else:
            self.acute = acute
        if grave is None:
            self.grave = []
        else:
            self.grave = grave
        if circ is None:
            self.circ = []
        else:
            self.circ = circ
        if slash is None:
            self.slash = []
        else:
            self.slash = slash
        if tilde is None:
            self.tilde = []
        else:
            self.tilde = tilde
        if cedil is None:
            self.cedil = []
        else:
            self.cedil = cedil
        if ring is None:
            self.ring = []
        else:
            self.ring = ring
        if szlig is None:
            self.szlig = []
        else:
            self.szlig = szlig
        if nonbreakablespace is None:
            self.nonbreakablespace = []
        else:
            self.nonbreakablespace = nonbreakablespace
        if aelig is None:
            self.aelig = []
        else:
            self.aelig = aelig
        if AElig is None:
            self.AElig = []
        else:
            self.AElig = AElig
        if Gamma is None:
            self.Gamma = []
        else:
            self.Gamma = Gamma
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Theta is None:
            self.Theta = []
        else:
            self.Theta = Theta
        if Lambda is None:
            self.Lambda = []
        else:
            self.Lambda = Lambda
        if Xi is None:
            self.Xi = []
        else:
            self.Xi = Xi
        if Pi is None:
            self.Pi = []
        else:
            self.Pi = Pi
        if Sigma is None:
            self.Sigma = []
        else:
            self.Sigma = Sigma
        if Upsilon is None:
            self.Upsilon = []
        else:
            self.Upsilon = Upsilon
        if Phi is None:
            self.Phi = []
        else:
            self.Phi = Phi
        if Psi is None:
            self.Psi = []
        else:
            self.Psi = Psi
        if Omega is None:
            self.Omega = []
        else:
            self.Omega = Omega
        if alpha is None:
            self.alpha = []
        else:
            self.alpha = alpha
        if beta is None:
            self.beta = []
        else:
            self.beta = beta
        if gamma is None:
            self.gamma = []
        else:
            self.gamma = gamma
        if delta is None:
            self.delta = []
        else:
            self.delta = delta
        if epsilon is None:
            self.epsilon = []
        else:
            self.epsilon = epsilon
        if zeta is None:
            self.zeta = []
        else:
            self.zeta = zeta
        if eta is None:
            self.eta = []
        else:
            self.eta = eta
        if theta is None:
            self.theta = []
        else:
            self.theta = theta
        if iota is None:
            self.iota = []
        else:
            self.iota = iota
        if kappa is None:
            self.kappa = []
        else:
            self.kappa = kappa
        if lambda_ is None:
            self.lambda_ = []
        else:
            self.lambda_ = lambda_
        if mu is None:
            self.mu = []
        else:
            self.mu = mu
        if nu is None:
            self.nu = []
        else:
            self.nu = nu
        if xi is None:
            self.xi = []
        else:
            self.xi = xi
        if pi is None:
            self.pi = []
        else:
            self.pi = pi
        if rho is None:
            self.rho = []
        else:
            self.rho = rho
        if sigma is None:
            self.sigma = []
        else:
            self.sigma = sigma
        if tau is None:
            self.tau = []
        else:
            self.tau = tau
        if upsilon is None:
            self.upsilon = []
        else:
            self.upsilon = upsilon
        if phi is None:
            self.phi = []
        else:
            self.phi = phi
        if chi is None:
            self.chi = []
        else:
            self.chi = chi
        if psi is None:
            self.psi = []
        else:
            self.psi = psi
        if omega is None:
            self.omega = []
        else:
            self.omega = omega
        if sigmaf is None:
            self.sigmaf = []
        else:
            self.sigmaf = sigmaf
        if sect is None:
            self.sect = []
        else:
            self.sect = sect
        if deg is None:
            self.deg = []
        else:
            self.deg = deg
        if prime is None:
            self.prime = []
        else:
            self.prime = prime
        if Prime is None:
            self.Prime = []
        else:
            self.Prime = Prime
        if infin is None:
            self.infin = []
        else:
            self.infin = infin
        if empty is None:
            self.empty = []
        else:
            self.empty = empty
        if plusmn is None:
            self.plusmn = []
        else:
            self.plusmn = plusmn
        if times is None:
            self.times = []
        else:
            self.times = times
        if minus is None:
            self.minus = []
        else:
            self.minus = minus
        if sdot is None:
            self.sdot = []
        else:
            self.sdot = sdot
        if part is None:
            self.part = []
        else:
            self.part = part
        if nabla is None:
            self.nabla = []
        else:
            self.nabla = nabla
        if radic is None:
            self.radic = []
        else:
            self.radic = radic
        if perp is None:
            self.perp = []
        else:
            self.perp = perp
        if sum is None:
            self.sum = []
        else:
            self.sum = sum
        if int is None:
            self.int = []
        else:
            self.int = int
        if prod is None:
            self.prod = []
        else:
            self.prod = prod
        if sim is None:
            self.sim = []
        else:
            self.sim = sim
        if asymp is None:
            self.asymp = []
        else:
            self.asymp = asymp
        if ne is None:
            self.ne = []
        else:
            self.ne = ne
        if equiv is None:
            self.equiv = []
        else:
            self.equiv = equiv
        if prop is None:
            self.prop = []
        else:
            self.prop = prop
        if le is None:
            self.le = []
        else:
            self.le = le
        if ge is None:
            self.ge = []
        else:
            self.ge = ge
        if larr is None:
            self.larr = []
        else:
            self.larr = larr
        if rarr is None:
            self.rarr = []
        else:
            self.rarr = rarr
        if isin is None:
            self.isin = []
        else:
            self.isin = isin
        if notin is None:
            self.notin = []
        else:
            self.notin = notin
        if lceil is None:
            self.lceil = []
        else:
            self.lceil = lceil
        if rceil is None:
            self.rceil = []
        else:
            self.rceil = rceil
        if lfloor is None:
            self.lfloor = []
        else:
            self.lfloor = lfloor
        if rfloor is None:
            self.rfloor = []
        else:
            self.rfloor = rfloor
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docTitleType.subclass:
            return docTitleType.subclass(*args_, **kwargs_)
        else:
            return docTitleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ulink(self): return self.ulink
    def set_ulink(self, ulink): self.ulink = ulink
    def add_ulink(self, value): self.ulink.append(value)
    def insert_ulink(self, index, value): self.ulink[index] = value
    def get_bold(self): return self.bold
    def set_bold(self, bold): self.bold = bold
    def add_bold(self, value): self.bold.append(value)
    def insert_bold(self, index, value): self.bold[index] = value
    def get_emphasis(self): return self.emphasis
    def set_emphasis(self, emphasis): self.emphasis = emphasis
    def add_emphasis(self, value): self.emphasis.append(value)
    def insert_emphasis(self, index, value): self.emphasis[index] = value
    def get_computeroutput(self): return self.computeroutput
    def set_computeroutput(self, computeroutput): self.computeroutput = computeroutput
    def add_computeroutput(self, value): self.computeroutput.append(value)
    def insert_computeroutput(self, index, value): self.computeroutput[index] = value
    def get_subscript(self): return self.subscript
    def set_subscript(self, subscript): self.subscript = subscript
    def add_subscript(self, value): self.subscript.append(value)
    def insert_subscript(self, index, value): self.subscript[index] = value
    def get_superscript(self): return self.superscript
    def set_superscript(self, superscript): self.superscript = superscript
    def add_superscript(self, value): self.superscript.append(value)
    def insert_superscript(self, index, value): self.superscript[index] = value
    def get_center(self): return self.center
    def set_center(self, center): self.center = center
    def add_center(self, value): self.center.append(value)
    def insert_center(self, index, value): self.center[index] = value
    def get_small(self): return self.small
    def set_small(self, small): self.small = small
    def add_small(self, value): self.small.append(value)
    def insert_small(self, index, value): self.small[index] = value
    def get_htmlonly(self): return self.htmlonly
    def set_htmlonly(self, htmlonly): self.htmlonly = htmlonly
    def add_htmlonly(self, value): self.htmlonly.append(value)
    def insert_htmlonly(self, index, value): self.htmlonly[index] = value
    def get_manonly(self): return self.manonly
    def set_manonly(self, manonly): self.manonly = manonly
    def add_manonly(self, value): self.manonly.append(value)
    def insert_manonly(self, index, value): self.manonly[index] = value
    def get_xmlonly(self): return self.xmlonly
    def set_xmlonly(self, xmlonly): self.xmlonly = xmlonly
    def add_xmlonly(self, value): self.xmlonly.append(value)
    def insert_xmlonly(self, index, value): self.xmlonly[index] = value
    def get_rtfonly(self): return self.rtfonly
    def set_rtfonly(self, rtfonly): self.rtfonly = rtfonly
    def add_rtfonly(self, value): self.rtfonly.append(value)
    def insert_rtfonly(self, index, value): self.rtfonly[index] = value
    def get_latexonly(self): return self.latexonly
    def set_latexonly(self, latexonly): self.latexonly = latexonly
    def add_latexonly(self, value): self.latexonly.append(value)
    def insert_latexonly(self, index, value): self.latexonly[index] = value
    def get_dot(self): return self.dot
    def set_dot(self, dot): self.dot = dot
    def add_dot(self, value): self.dot.append(value)
    def insert_dot(self, index, value): self.dot[index] = value
    def get_anchor(self): return self.anchor
    def set_anchor(self, anchor): self.anchor = anchor
    def add_anchor(self, value): self.anchor.append(value)
    def insert_anchor(self, index, value): self.anchor[index] = value
    def get_formula(self): return self.formula
    def set_formula(self, formula): self.formula = formula
    def add_formula(self, value): self.formula.append(value)
    def insert_formula(self, index, value): self.formula[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_copy(self): return self.copy
    def set_copy(self, copy): self.copy = copy
    def add_copy(self, value): self.copy.append(value)
    def insert_copy(self, index, value): self.copy[index] = value
    def get_trademark(self): return self.trademark
    def set_trademark(self, trademark): self.trademark = trademark
    def add_trademark(self, value): self.trademark.append(value)
    def insert_trademark(self, index, value): self.trademark[index] = value
    def get_registered(self): return self.registered
    def set_registered(self, registered): self.registered = registered
    def add_registered(self, value): self.registered.append(value)
    def insert_registered(self, index, value): self.registered[index] = value
    def get_lsquo(self): return self.lsquo
    def set_lsquo(self, lsquo): self.lsquo = lsquo
    def add_lsquo(self, value): self.lsquo.append(value)
    def insert_lsquo(self, index, value): self.lsquo[index] = value
    def get_rsquo(self): return self.rsquo
    def set_rsquo(self, rsquo): self.rsquo = rsquo
    def add_rsquo(self, value): self.rsquo.append(value)
    def insert_rsquo(self, index, value): self.rsquo[index] = value
    def get_ldquo(self): return self.ldquo
    def set_ldquo(self, ldquo): self.ldquo = ldquo
    def add_ldquo(self, value): self.ldquo.append(value)
    def insert_ldquo(self, index, value): self.ldquo[index] = value
    def get_rdquo(self): return self.rdquo
    def set_rdquo(self, rdquo): self.rdquo = rdquo
    def add_rdquo(self, value): self.rdquo.append(value)
    def insert_rdquo(self, index, value): self.rdquo[index] = value
    def get_ndash(self): return self.ndash
    def set_ndash(self, ndash): self.ndash = ndash
    def add_ndash(self, value): self.ndash.append(value)
    def insert_ndash(self, index, value): self.ndash[index] = value
    def get_mdash(self): return self.mdash
    def set_mdash(self, mdash): self.mdash = mdash
    def add_mdash(self, value): self.mdash.append(value)
    def insert_mdash(self, index, value): self.mdash[index] = value
    def get_umlaut(self): return self.umlaut
    def set_umlaut(self, umlaut): self.umlaut = umlaut
    def add_umlaut(self, value): self.umlaut.append(value)
    def insert_umlaut(self, index, value): self.umlaut[index] = value
    def get_acute(self): return self.acute
    def set_acute(self, acute): self.acute = acute
    def add_acute(self, value): self.acute.append(value)
    def insert_acute(self, index, value): self.acute[index] = value
    def get_grave(self): return self.grave
    def set_grave(self, grave): self.grave = grave
    def add_grave(self, value): self.grave.append(value)
    def insert_grave(self, index, value): self.grave[index] = value
    def get_circ(self): return self.circ
    def set_circ(self, circ): self.circ = circ
    def add_circ(self, value): self.circ.append(value)
    def insert_circ(self, index, value): self.circ[index] = value
    def get_slash(self): return self.slash
    def set_slash(self, slash): self.slash = slash
    def add_slash(self, value): self.slash.append(value)
    def insert_slash(self, index, value): self.slash[index] = value
    def get_tilde(self): return self.tilde
    def set_tilde(self, tilde): self.tilde = tilde
    def add_tilde(self, value): self.tilde.append(value)
    def insert_tilde(self, index, value): self.tilde[index] = value
    def get_cedil(self): return self.cedil
    def set_cedil(self, cedil): self.cedil = cedil
    def add_cedil(self, value): self.cedil.append(value)
    def insert_cedil(self, index, value): self.cedil[index] = value
    def get_ring(self): return self.ring
    def set_ring(self, ring): self.ring = ring
    def add_ring(self, value): self.ring.append(value)
    def insert_ring(self, index, value): self.ring[index] = value
    def get_szlig(self): return self.szlig
    def set_szlig(self, szlig): self.szlig = szlig
    def add_szlig(self, value): self.szlig.append(value)
    def insert_szlig(self, index, value): self.szlig[index] = value
    def get_nonbreakablespace(self): return self.nonbreakablespace
    def set_nonbreakablespace(self, nonbreakablespace): self.nonbreakablespace = nonbreakablespace
    def add_nonbreakablespace(self, value): self.nonbreakablespace.append(value)
    def insert_nonbreakablespace(self, index, value): self.nonbreakablespace[index] = value
    def get_aelig(self): return self.aelig
    def set_aelig(self, aelig): self.aelig = aelig
    def add_aelig(self, value): self.aelig.append(value)
    def insert_aelig(self, index, value): self.aelig[index] = value
    def get_AElig(self): return self.AElig
    def set_AElig(self, AElig): self.AElig = AElig
    def add_AElig(self, value): self.AElig.append(value)
    def insert_AElig(self, index, value): self.AElig[index] = value
    def get_Gamma(self): return self.Gamma
    def set_Gamma(self, Gamma): self.Gamma = Gamma
    def add_Gamma(self, value): self.Gamma.append(value)
    def insert_Gamma(self, index, value): self.Gamma[index] = value
    def get_Delta(self): return self.Delta
    def set_Delta(self, Delta): self.Delta = Delta
    def add_Delta(self, value): self.Delta.append(value)
    def insert_Delta(self, index, value): self.Delta[index] = value
    def get_Theta(self): return self.Theta
    def set_Theta(self, Theta): self.Theta = Theta
    def add_Theta(self, value): self.Theta.append(value)
    def insert_Theta(self, index, value): self.Theta[index] = value
    def get_Lambda(self): return self.Lambda
    def set_Lambda(self, Lambda): self.Lambda = Lambda
    def add_Lambda(self, value): self.Lambda.append(value)
    def insert_Lambda(self, index, value): self.Lambda[index] = value
    def get_Xi(self): return self.Xi
    def set_Xi(self, Xi): self.Xi = Xi
    def add_Xi(self, value): self.Xi.append(value)
    def insert_Xi(self, index, value): self.Xi[index] = value
    def get_Pi(self): return self.Pi
    def set_Pi(self, Pi): self.Pi = Pi
    def add_Pi(self, value): self.Pi.append(value)
    def insert_Pi(self, index, value): self.Pi[index] = value
    def get_Sigma(self): return self.Sigma
    def set_Sigma(self, Sigma): self.Sigma = Sigma
    def add_Sigma(self, value): self.Sigma.append(value)
    def insert_Sigma(self, index, value): self.Sigma[index] = value
    def get_Upsilon(self): return self.Upsilon
    def set_Upsilon(self, Upsilon): self.Upsilon = Upsilon
    def add_Upsilon(self, value): self.Upsilon.append(value)
    def insert_Upsilon(self, index, value): self.Upsilon[index] = value
    def get_Phi(self): return self.Phi
    def set_Phi(self, Phi): self.Phi = Phi
    def add_Phi(self, value): self.Phi.append(value)
    def insert_Phi(self, index, value): self.Phi[index] = value
    def get_Psi(self): return self.Psi
    def set_Psi(self, Psi): self.Psi = Psi
    def add_Psi(self, value): self.Psi.append(value)
    def insert_Psi(self, index, value): self.Psi[index] = value
    def get_Omega(self): return self.Omega
    def set_Omega(self, Omega): self.Omega = Omega
    def add_Omega(self, value): self.Omega.append(value)
    def insert_Omega(self, index, value): self.Omega[index] = value
    def get_alpha(self): return self.alpha
    def set_alpha(self, alpha): self.alpha = alpha
    def add_alpha(self, value): self.alpha.append(value)
    def insert_alpha(self, index, value): self.alpha[index] = value
    def get_beta(self): return self.beta
    def set_beta(self, beta): self.beta = beta
    def add_beta(self, value): self.beta.append(value)
    def insert_beta(self, index, value): self.beta[index] = value
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def add_gamma(self, value): self.gamma.append(value)
    def insert_gamma(self, index, value): self.gamma[index] = value
    def get_delta(self): return self.delta
    def set_delta(self, delta): self.delta = delta
    def add_delta(self, value): self.delta.append(value)
    def insert_delta(self, index, value): self.delta[index] = value
    def get_epsilon(self): return self.epsilon
    def set_epsilon(self, epsilon): self.epsilon = epsilon
    def add_epsilon(self, value): self.epsilon.append(value)
    def insert_epsilon(self, index, value): self.epsilon[index] = value
    def get_zeta(self): return self.zeta
    def set_zeta(self, zeta): self.zeta = zeta
    def add_zeta(self, value): self.zeta.append(value)
    def insert_zeta(self, index, value): self.zeta[index] = value
    def get_eta(self): return self.eta
    def set_eta(self, eta): self.eta = eta
    def add_eta(self, value): self.eta.append(value)
    def insert_eta(self, index, value): self.eta[index] = value
    def get_theta(self): return self.theta
    def set_theta(self, theta): self.theta = theta
    def add_theta(self, value): self.theta.append(value)
    def insert_theta(self, index, value): self.theta[index] = value
    def get_iota(self): return self.iota
    def set_iota(self, iota): self.iota = iota
    def add_iota(self, value): self.iota.append(value)
    def insert_iota(self, index, value): self.iota[index] = value
    def get_kappa(self): return self.kappa
    def set_kappa(self, kappa): self.kappa = kappa
    def add_kappa(self, value): self.kappa.append(value)
    def insert_kappa(self, index, value): self.kappa[index] = value
    def get_lambda(self): return self.lambda_
    def set_lambda(self, lambda_): self.lambda_ = lambda_
    def add_lambda(self, value): self.lambda_.append(value)
    def insert_lambda(self, index, value): self.lambda_[index] = value
    def get_mu(self): return self.mu
    def set_mu(self, mu): self.mu = mu
    def add_mu(self, value): self.mu.append(value)
    def insert_mu(self, index, value): self.mu[index] = value
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def add_nu(self, value): self.nu.append(value)
    def insert_nu(self, index, value): self.nu[index] = value
    def get_xi(self): return self.xi
    def set_xi(self, xi): self.xi = xi
    def add_xi(self, value): self.xi.append(value)
    def insert_xi(self, index, value): self.xi[index] = value
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def add_pi(self, value): self.pi.append(value)
    def insert_pi(self, index, value): self.pi[index] = value
    def get_rho(self): return self.rho
    def set_rho(self, rho): self.rho = rho
    def add_rho(self, value): self.rho.append(value)
    def insert_rho(self, index, value): self.rho[index] = value
    def get_sigma(self): return self.sigma
    def set_sigma(self, sigma): self.sigma = sigma
    def add_sigma(self, value): self.sigma.append(value)
    def insert_sigma(self, index, value): self.sigma[index] = value
    def get_tau(self): return self.tau
    def set_tau(self, tau): self.tau = tau
    def add_tau(self, value): self.tau.append(value)
    def insert_tau(self, index, value): self.tau[index] = value
    def get_upsilon(self): return self.upsilon
    def set_upsilon(self, upsilon): self.upsilon = upsilon
    def add_upsilon(self, value): self.upsilon.append(value)
    def insert_upsilon(self, index, value): self.upsilon[index] = value
    def get_phi(self): return self.phi
    def set_phi(self, phi): self.phi = phi
    def add_phi(self, value): self.phi.append(value)
    def insert_phi(self, index, value): self.phi[index] = value
    def get_chi(self): return self.chi
    def set_chi(self, chi): self.chi = chi
    def add_chi(self, value): self.chi.append(value)
    def insert_chi(self, index, value): self.chi[index] = value
    def get_psi(self): return self.psi
    def set_psi(self, psi): self.psi = psi
    def add_psi(self, value): self.psi.append(value)
    def insert_psi(self, index, value): self.psi[index] = value
    def get_omega(self): return self.omega
    def set_omega(self, omega): self.omega = omega
    def add_omega(self, value): self.omega.append(value)
    def insert_omega(self, index, value): self.omega[index] = value
    def get_sigmaf(self): return self.sigmaf
    def set_sigmaf(self, sigmaf): self.sigmaf = sigmaf
    def add_sigmaf(self, value): self.sigmaf.append(value)
    def insert_sigmaf(self, index, value): self.sigmaf[index] = value
    def get_sect(self): return self.sect
    def set_sect(self, sect): self.sect = sect
    def add_sect(self, value): self.sect.append(value)
    def insert_sect(self, index, value): self.sect[index] = value
    def get_deg(self): return self.deg
    def set_deg(self, deg): self.deg = deg
    def add_deg(self, value): self.deg.append(value)
    def insert_deg(self, index, value): self.deg[index] = value
    def get_prime(self): return self.prime
    def set_prime(self, prime): self.prime = prime
    def add_prime(self, value): self.prime.append(value)
    def insert_prime(self, index, value): self.prime[index] = value
    def get_Prime(self): return self.Prime
    def set_Prime(self, Prime): self.Prime = Prime
    def add_Prime(self, value): self.Prime.append(value)
    def insert_Prime(self, index, value): self.Prime[index] = value
    def get_infin(self): return self.infin
    def set_infin(self, infin): self.infin = infin
    def add_infin(self, value): self.infin.append(value)
    def insert_infin(self, index, value): self.infin[index] = value
    def get_empty(self): return self.empty
    def set_empty(self, empty): self.empty = empty
    def add_empty(self, value): self.empty.append(value)
    def insert_empty(self, index, value): self.empty[index] = value
    def get_plusmn(self): return self.plusmn
    def set_plusmn(self, plusmn): self.plusmn = plusmn
    def add_plusmn(self, value): self.plusmn.append(value)
    def insert_plusmn(self, index, value): self.plusmn[index] = value
    def get_times(self): return self.times
    def set_times(self, times): self.times = times
    def add_times(self, value): self.times.append(value)
    def insert_times(self, index, value): self.times[index] = value
    def get_minus(self): return self.minus
    def set_minus(self, minus): self.minus = minus
    def add_minus(self, value): self.minus.append(value)
    def insert_minus(self, index, value): self.minus[index] = value
    def get_sdot(self): return self.sdot
    def set_sdot(self, sdot): self.sdot = sdot
    def add_sdot(self, value): self.sdot.append(value)
    def insert_sdot(self, index, value): self.sdot[index] = value
    def get_part(self): return self.part
    def set_part(self, part): self.part = part
    def add_part(self, value): self.part.append(value)
    def insert_part(self, index, value): self.part[index] = value
    def get_nabla(self): return self.nabla
    def set_nabla(self, nabla): self.nabla = nabla
    def add_nabla(self, value): self.nabla.append(value)
    def insert_nabla(self, index, value): self.nabla[index] = value
    def get_radic(self): return self.radic
    def set_radic(self, radic): self.radic = radic
    def add_radic(self, value): self.radic.append(value)
    def insert_radic(self, index, value): self.radic[index] = value
    def get_perp(self): return self.perp
    def set_perp(self, perp): self.perp = perp
    def add_perp(self, value): self.perp.append(value)
    def insert_perp(self, index, value): self.perp[index] = value
    def get_sum(self): return self.sum
    def set_sum(self, sum): self.sum = sum
    def add_sum(self, value): self.sum.append(value)
    def insert_sum(self, index, value): self.sum[index] = value
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def add_int(self, value): self.int.append(value)
    def insert_int(self, index, value): self.int[index] = value
    def get_prod(self): return self.prod
    def set_prod(self, prod): self.prod = prod
    def add_prod(self, value): self.prod.append(value)
    def insert_prod(self, index, value): self.prod[index] = value
    def get_sim(self): return self.sim
    def set_sim(self, sim): self.sim = sim
    def add_sim(self, value): self.sim.append(value)
    def insert_sim(self, index, value): self.sim[index] = value
    def get_asymp(self): return self.asymp
    def set_asymp(self, asymp): self.asymp = asymp
    def add_asymp(self, value): self.asymp.append(value)
    def insert_asymp(self, index, value): self.asymp[index] = value
    def get_ne(self): return self.ne
    def set_ne(self, ne): self.ne = ne
    def add_ne(self, value): self.ne.append(value)
    def insert_ne(self, index, value): self.ne[index] = value
    def get_equiv(self): return self.equiv
    def set_equiv(self, equiv): self.equiv = equiv
    def add_equiv(self, value): self.equiv.append(value)
    def insert_equiv(self, index, value): self.equiv[index] = value
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def add_prop(self, value): self.prop.append(value)
    def insert_prop(self, index, value): self.prop[index] = value
    def get_le(self): return self.le
    def set_le(self, le): self.le = le
    def add_le(self, value): self.le.append(value)
    def insert_le(self, index, value): self.le[index] = value
    def get_ge(self): return self.ge
    def set_ge(self, ge): self.ge = ge
    def add_ge(self, value): self.ge.append(value)
    def insert_ge(self, index, value): self.ge[index] = value
    def get_larr(self): return self.larr
    def set_larr(self, larr): self.larr = larr
    def add_larr(self, value): self.larr.append(value)
    def insert_larr(self, index, value): self.larr[index] = value
    def get_rarr(self): return self.rarr
    def set_rarr(self, rarr): self.rarr = rarr
    def add_rarr(self, value): self.rarr.append(value)
    def insert_rarr(self, index, value): self.rarr[index] = value
    def get_isin(self): return self.isin
    def set_isin(self, isin): self.isin = isin
    def add_isin(self, value): self.isin.append(value)
    def insert_isin(self, index, value): self.isin[index] = value
    def get_notin(self): return self.notin
    def set_notin(self, notin): self.notin = notin
    def add_notin(self, value): self.notin.append(value)
    def insert_notin(self, index, value): self.notin[index] = value
    def get_lceil(self): return self.lceil
    def set_lceil(self, lceil): self.lceil = lceil
    def add_lceil(self, value): self.lceil.append(value)
    def insert_lceil(self, index, value): self.lceil[index] = value
    def get_rceil(self): return self.rceil
    def set_rceil(self, rceil): self.rceil = rceil
    def add_rceil(self, value): self.rceil.append(value)
    def insert_rceil(self, index, value): self.rceil[index] = value
    def get_lfloor(self): return self.lfloor
    def set_lfloor(self, lfloor): self.lfloor = lfloor
    def add_lfloor(self, value): self.lfloor.append(value)
    def insert_lfloor(self, index, value): self.lfloor[index] = value
    def get_rfloor(self): return self.rfloor
    def set_rfloor(self, rfloor): self.rfloor = rfloor
    def add_rfloor(self, value): self.rfloor.append(value)
    def insert_rfloor(self, index, value): self.rfloor[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ulink or
            self.bold or
            self.emphasis or
            self.computeroutput or
            self.subscript or
            self.superscript or
            self.center or
            self.small or
            self.htmlonly or
            self.manonly or
            self.xmlonly or
            self.rtfonly or
            self.latexonly or
            self.dot or
            self.anchor or
            self.formula or
            self.ref or
            self.copy or
            self.trademark or
            self.registered or
            self.lsquo or
            self.rsquo or
            self.ldquo or
            self.rdquo or
            self.ndash or
            self.mdash or
            self.umlaut or
            self.acute or
            self.grave or
            self.circ or
            self.slash or
            self.tilde or
            self.cedil or
            self.ring or
            self.szlig or
            self.nonbreakablespace or
            self.aelig or
            self.AElig or
            self.Gamma or
            self.Delta or
            self.Theta or
            self.Lambda or
            self.Xi or
            self.Pi or
            self.Sigma or
            self.Upsilon or
            self.Phi or
            self.Psi or
            self.Omega or
            self.alpha or
            self.beta or
            self.gamma or
            self.delta or
            self.epsilon or
            self.zeta or
            self.eta or
            self.theta or
            self.iota or
            self.kappa or
            self.lambda_ or
            self.mu or
            self.nu or
            self.xi or
            self.pi or
            self.rho or
            self.sigma or
            self.tau or
            self.upsilon or
            self.phi or
            self.chi or
            self.psi or
            self.omega or
            self.sigmaf or
            self.sect or
            self.deg or
            self.prime or
            self.Prime or
            self.infin or
            self.empty or
            self.plusmn or
            self.times or
            self.minus or
            self.sdot or
            self.part or
            self.nabla or
            self.radic or
            self.perp or
            self.sum or
            self.int or
            self.prod or
            self.sim or
            self.asymp or
            self.ne or
            self.equiv or
            self.prop or
            self.le or
            self.ge or
            self.larr or
            self.rarr or
            self.isin or
            self.notin or
            self.lceil or
            self.rceil or
            self.lfloor or
            self.rfloor or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docTitleType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docTitleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docTitleType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docTitleType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docTitleType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ulink':
            obj_ = docURLLink.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ulink', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ulink'):
              self.add_ulink(obj_.value)
            elif hasattr(self, 'set_ulink'):
              self.set_ulink(obj_.value)
        elif nodeName_ == 'bold':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'bold', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_bold'):
              self.add_bold(obj_.value)
            elif hasattr(self, 'set_bold'):
              self.set_bold(obj_.value)
        elif nodeName_ == 'emphasis':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'emphasis', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_emphasis'):
              self.add_emphasis(obj_.value)
            elif hasattr(self, 'set_emphasis'):
              self.set_emphasis(obj_.value)
        elif nodeName_ == 'computeroutput':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'computeroutput', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_computeroutput'):
              self.add_computeroutput(obj_.value)
            elif hasattr(self, 'set_computeroutput'):
              self.set_computeroutput(obj_.value)
        elif nodeName_ == 'subscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'subscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_subscript'):
              self.add_subscript(obj_.value)
            elif hasattr(self, 'set_subscript'):
              self.set_subscript(obj_.value)
        elif nodeName_ == 'superscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'superscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_superscript'):
              self.add_superscript(obj_.value)
            elif hasattr(self, 'set_superscript'):
              self.set_superscript(obj_.value)
        elif nodeName_ == 'center':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'center', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_center'):
              self.add_center(obj_.value)
            elif hasattr(self, 'set_center'):
              self.set_center(obj_.value)
        elif nodeName_ == 'small':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'small', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_small'):
              self.add_small(obj_.value)
            elif hasattr(self, 'set_small'):
              self.set_small(obj_.value)
        elif nodeName_ == 'htmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'htmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'manonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'manonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'xmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'xmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'rtfonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'rtfonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'latexonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'latexonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'dot' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'dot', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'anchor':
            obj_ = docAnchorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'anchor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_anchor'):
              self.add_anchor(obj_.value)
            elif hasattr(self, 'set_anchor'):
              self.set_anchor(obj_.value)
        elif nodeName_ == 'formula':
            obj_ = docFormulaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'formula', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_formula'):
              self.add_formula(obj_.value)
            elif hasattr(self, 'set_formula'):
              self.set_formula(obj_.value)
        elif nodeName_ == 'ref':
            obj_ = docRefTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        elif nodeName_ == 'copy':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copy', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copy'):
              self.add_copy(obj_.value)
            elif hasattr(self, 'set_copy'):
              self.set_copy(obj_.value)
        elif nodeName_ == 'trademark':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'trademark', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_trademark'):
              self.add_trademark(obj_.value)
            elif hasattr(self, 'set_trademark'):
              self.set_trademark(obj_.value)
        elif nodeName_ == 'registered':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'registered', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_registered'):
              self.add_registered(obj_.value)
            elif hasattr(self, 'set_registered'):
              self.set_registered(obj_.value)
        elif nodeName_ == 'lsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lsquo'):
              self.add_lsquo(obj_.value)
            elif hasattr(self, 'set_lsquo'):
              self.set_lsquo(obj_.value)
        elif nodeName_ == 'rsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rsquo'):
              self.add_rsquo(obj_.value)
            elif hasattr(self, 'set_rsquo'):
              self.set_rsquo(obj_.value)
        elif nodeName_ == 'ldquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ldquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ldquo'):
              self.add_ldquo(obj_.value)
            elif hasattr(self, 'set_ldquo'):
              self.set_ldquo(obj_.value)
        elif nodeName_ == 'rdquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rdquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rdquo'):
              self.add_rdquo(obj_.value)
            elif hasattr(self, 'set_rdquo'):
              self.set_rdquo(obj_.value)
        elif nodeName_ == 'ndash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ndash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ndash'):
              self.add_ndash(obj_.value)
            elif hasattr(self, 'set_ndash'):
              self.set_ndash(obj_.value)
        elif nodeName_ == 'mdash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mdash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mdash'):
              self.add_mdash(obj_.value)
            elif hasattr(self, 'set_mdash'):
              self.set_mdash(obj_.value)
        elif nodeName_ == 'umlaut':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'umlaut', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_umlaut'):
              self.add_umlaut(obj_.value)
            elif hasattr(self, 'set_umlaut'):
              self.set_umlaut(obj_.value)
        elif nodeName_ == 'acute':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'acute', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_acute'):
              self.add_acute(obj_.value)
            elif hasattr(self, 'set_acute'):
              self.set_acute(obj_.value)
        elif nodeName_ == 'grave':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'grave', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_grave'):
              self.add_grave(obj_.value)
            elif hasattr(self, 'set_grave'):
              self.set_grave(obj_.value)
        elif nodeName_ == 'circ':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circ', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_circ'):
              self.add_circ(obj_.value)
            elif hasattr(self, 'set_circ'):
              self.set_circ(obj_.value)
        elif nodeName_ == 'slash':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'slash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_slash'):
              self.add_slash(obj_.value)
            elif hasattr(self, 'set_slash'):
              self.set_slash(obj_.value)
        elif nodeName_ == 'tilde':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tilde', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tilde'):
              self.add_tilde(obj_.value)
            elif hasattr(self, 'set_tilde'):
              self.set_tilde(obj_.value)
        elif nodeName_ == 'cedil':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cedil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_cedil'):
              self.add_cedil(obj_.value)
            elif hasattr(self, 'set_cedil'):
              self.set_cedil(obj_.value)
        elif nodeName_ == 'ring':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ring', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ring'):
              self.add_ring(obj_.value)
            elif hasattr(self, 'set_ring'):
              self.set_ring(obj_.value)
        elif nodeName_ == 'szlig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'szlig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_szlig'):
              self.add_szlig(obj_.value)
            elif hasattr(self, 'set_szlig'):
              self.set_szlig(obj_.value)
        elif nodeName_ == 'nonbreakablespace':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nonbreakablespace', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nonbreakablespace'):
              self.add_nonbreakablespace(obj_.value)
            elif hasattr(self, 'set_nonbreakablespace'):
              self.set_nonbreakablespace(obj_.value)
        elif nodeName_ == 'aelig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'aelig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_aelig'):
              self.add_aelig(obj_.value)
            elif hasattr(self, 'set_aelig'):
              self.set_aelig(obj_.value)
        elif nodeName_ == 'AElig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AElig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AElig'):
              self.add_AElig(obj_.value)
            elif hasattr(self, 'set_AElig'):
              self.set_AElig(obj_.value)
        elif nodeName_ == 'Gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Gamma'):
              self.add_Gamma(obj_.value)
            elif hasattr(self, 'set_Gamma'):
              self.set_Gamma(obj_.value)
        elif nodeName_ == 'Delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Delta'):
              self.add_Delta(obj_.value)
            elif hasattr(self, 'set_Delta'):
              self.set_Delta(obj_.value)
        elif nodeName_ == 'Theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Theta'):
              self.add_Theta(obj_.value)
            elif hasattr(self, 'set_Theta'):
              self.set_Theta(obj_.value)
        elif nodeName_ == 'Lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Lambda'):
              self.add_Lambda(obj_.value)
            elif hasattr(self, 'set_Lambda'):
              self.set_Lambda(obj_.value)
        elif nodeName_ == 'Xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Xi'):
              self.add_Xi(obj_.value)
            elif hasattr(self, 'set_Xi'):
              self.set_Xi(obj_.value)
        elif nodeName_ == 'Pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Pi'):
              self.add_Pi(obj_.value)
            elif hasattr(self, 'set_Pi'):
              self.set_Pi(obj_.value)
        elif nodeName_ == 'Sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Sigma'):
              self.add_Sigma(obj_.value)
            elif hasattr(self, 'set_Sigma'):
              self.set_Sigma(obj_.value)
        elif nodeName_ == 'Upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Upsilon'):
              self.add_Upsilon(obj_.value)
            elif hasattr(self, 'set_Upsilon'):
              self.set_Upsilon(obj_.value)
        elif nodeName_ == 'Phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Phi'):
              self.add_Phi(obj_.value)
            elif hasattr(self, 'set_Phi'):
              self.set_Phi(obj_.value)
        elif nodeName_ == 'Psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Psi'):
              self.add_Psi(obj_.value)
            elif hasattr(self, 'set_Psi'):
              self.set_Psi(obj_.value)
        elif nodeName_ == 'Omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Omega'):
              self.add_Omega(obj_.value)
            elif hasattr(self, 'set_Omega'):
              self.set_Omega(obj_.value)
        elif nodeName_ == 'alpha':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'alpha', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_alpha'):
              self.add_alpha(obj_.value)
            elif hasattr(self, 'set_alpha'):
              self.set_alpha(obj_.value)
        elif nodeName_ == 'beta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'beta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_beta'):
              self.add_beta(obj_.value)
            elif hasattr(self, 'set_beta'):
              self.set_beta(obj_.value)
        elif nodeName_ == 'gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_gamma'):
              self.add_gamma(obj_.value)
            elif hasattr(self, 'set_gamma'):
              self.set_gamma(obj_.value)
        elif nodeName_ == 'delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_delta'):
              self.add_delta(obj_.value)
            elif hasattr(self, 'set_delta'):
              self.set_delta(obj_.value)
        elif nodeName_ == 'epsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'epsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_epsilon'):
              self.add_epsilon(obj_.value)
            elif hasattr(self, 'set_epsilon'):
              self.set_epsilon(obj_.value)
        elif nodeName_ == 'zeta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'zeta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_zeta'):
              self.add_zeta(obj_.value)
            elif hasattr(self, 'set_zeta'):
              self.set_zeta(obj_.value)
        elif nodeName_ == 'eta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'eta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_eta'):
              self.add_eta(obj_.value)
            elif hasattr(self, 'set_eta'):
              self.set_eta(obj_.value)
        elif nodeName_ == 'theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_theta'):
              self.add_theta(obj_.value)
            elif hasattr(self, 'set_theta'):
              self.set_theta(obj_.value)
        elif nodeName_ == 'iota':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'iota', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_iota'):
              self.add_iota(obj_.value)
            elif hasattr(self, 'set_iota'):
              self.set_iota(obj_.value)
        elif nodeName_ == 'kappa':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'kappa', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_kappa'):
              self.add_kappa(obj_.value)
            elif hasattr(self, 'set_kappa'):
              self.set_kappa(obj_.value)
        elif nodeName_ == 'lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lambda'):
              self.add_lambda(obj_.value)
            elif hasattr(self, 'set_lambda'):
              self.set_lambda(obj_.value)
        elif nodeName_ == 'mu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mu'):
              self.add_mu(obj_.value)
            elif hasattr(self, 'set_mu'):
              self.set_mu(obj_.value)
        elif nodeName_ == 'nu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nu'):
              self.add_nu(obj_.value)
            elif hasattr(self, 'set_nu'):
              self.set_nu(obj_.value)
        elif nodeName_ == 'xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xi'):
              self.add_xi(obj_.value)
            elif hasattr(self, 'set_xi'):
              self.set_xi(obj_.value)
        elif nodeName_ == 'pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_pi'):
              self.add_pi(obj_.value)
            elif hasattr(self, 'set_pi'):
              self.set_pi(obj_.value)
        elif nodeName_ == 'rho':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rho', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rho'):
              self.add_rho(obj_.value)
            elif hasattr(self, 'set_rho'):
              self.set_rho(obj_.value)
        elif nodeName_ == 'sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigma'):
              self.add_sigma(obj_.value)
            elif hasattr(self, 'set_sigma'):
              self.set_sigma(obj_.value)
        elif nodeName_ == 'tau':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tau', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tau'):
              self.add_tau(obj_.value)
            elif hasattr(self, 'set_tau'):
              self.set_tau(obj_.value)
        elif nodeName_ == 'upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_upsilon'):
              self.add_upsilon(obj_.value)
            elif hasattr(self, 'set_upsilon'):
              self.set_upsilon(obj_.value)
        elif nodeName_ == 'phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_phi'):
              self.add_phi(obj_.value)
            elif hasattr(self, 'set_phi'):
              self.set_phi(obj_.value)
        elif nodeName_ == 'chi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'chi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_chi'):
              self.add_chi(obj_.value)
            elif hasattr(self, 'set_chi'):
              self.set_chi(obj_.value)
        elif nodeName_ == 'psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_psi'):
              self.add_psi(obj_.value)
            elif hasattr(self, 'set_psi'):
              self.set_psi(obj_.value)
        elif nodeName_ == 'omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_omega'):
              self.add_omega(obj_.value)
            elif hasattr(self, 'set_omega'):
              self.set_omega(obj_.value)
        elif nodeName_ == 'sigmaf':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigmaf', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigmaf'):
              self.add_sigmaf(obj_.value)
            elif hasattr(self, 'set_sigmaf'):
              self.set_sigmaf(obj_.value)
        elif nodeName_ == 'sect':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect'):
              self.add_sect(obj_.value)
            elif hasattr(self, 'set_sect'):
              self.set_sect(obj_.value)
        elif nodeName_ == 'deg':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'deg', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_deg'):
              self.add_deg(obj_.value)
            elif hasattr(self, 'set_deg'):
              self.set_deg(obj_.value)
        elif nodeName_ == 'prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prime'):
              self.add_prime(obj_.value)
            elif hasattr(self, 'set_prime'):
              self.set_prime(obj_.value)
        elif nodeName_ == 'Prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Prime'):
              self.add_Prime(obj_.value)
            elif hasattr(self, 'set_Prime'):
              self.set_Prime(obj_.value)
        elif nodeName_ == 'infin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'infin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_infin'):
              self.add_infin(obj_.value)
            elif hasattr(self, 'set_infin'):
              self.set_infin(obj_.value)
        elif nodeName_ == 'empty':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'empty', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_empty'):
              self.add_empty(obj_.value)
            elif hasattr(self, 'set_empty'):
              self.set_empty(obj_.value)
        elif nodeName_ == 'plusmn':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'plusmn', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_plusmn'):
              self.add_plusmn(obj_.value)
            elif hasattr(self, 'set_plusmn'):
              self.set_plusmn(obj_.value)
        elif nodeName_ == 'times':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'times', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_times'):
              self.add_times(obj_.value)
            elif hasattr(self, 'set_times'):
              self.set_times(obj_.value)
        elif nodeName_ == 'minus':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'minus', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_minus'):
              self.add_minus(obj_.value)
            elif hasattr(self, 'set_minus'):
              self.set_minus(obj_.value)
        elif nodeName_ == 'sdot':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sdot', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sdot'):
              self.add_sdot(obj_.value)
            elif hasattr(self, 'set_sdot'):
              self.set_sdot(obj_.value)
        elif nodeName_ == 'part':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'part', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_part'):
              self.add_part(obj_.value)
            elif hasattr(self, 'set_part'):
              self.set_part(obj_.value)
        elif nodeName_ == 'nabla':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nabla', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nabla'):
              self.add_nabla(obj_.value)
            elif hasattr(self, 'set_nabla'):
              self.set_nabla(obj_.value)
        elif nodeName_ == 'radic':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radic', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_radic'):
              self.add_radic(obj_.value)
            elif hasattr(self, 'set_radic'):
              self.set_radic(obj_.value)
        elif nodeName_ == 'perp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'perp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_perp'):
              self.add_perp(obj_.value)
            elif hasattr(self, 'set_perp'):
              self.set_perp(obj_.value)
        elif nodeName_ == 'sum':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sum', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sum'):
              self.add_sum(obj_.value)
            elif hasattr(self, 'set_sum'):
              self.set_sum(obj_.value)
        elif nodeName_ == 'int':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'int', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_int'):
              self.add_int(obj_.value)
            elif hasattr(self, 'set_int'):
              self.set_int(obj_.value)
        elif nodeName_ == 'prod':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prod'):
              self.add_prod(obj_.value)
            elif hasattr(self, 'set_prod'):
              self.set_prod(obj_.value)
        elif nodeName_ == 'sim':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sim', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sim'):
              self.add_sim(obj_.value)
            elif hasattr(self, 'set_sim'):
              self.set_sim(obj_.value)
        elif nodeName_ == 'asymp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'asymp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_asymp'):
              self.add_asymp(obj_.value)
            elif hasattr(self, 'set_asymp'):
              self.set_asymp(obj_.value)
        elif nodeName_ == 'ne':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ne', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ne'):
              self.add_ne(obj_.value)
            elif hasattr(self, 'set_ne'):
              self.set_ne(obj_.value)
        elif nodeName_ == 'equiv':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'equiv', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_equiv'):
              self.add_equiv(obj_.value)
            elif hasattr(self, 'set_equiv'):
              self.set_equiv(obj_.value)
        elif nodeName_ == 'prop':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prop', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prop'):
              self.add_prop(obj_.value)
            elif hasattr(self, 'set_prop'):
              self.set_prop(obj_.value)
        elif nodeName_ == 'le':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'le', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_le'):
              self.add_le(obj_.value)
            elif hasattr(self, 'set_le'):
              self.set_le(obj_.value)
        elif nodeName_ == 'ge':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ge', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ge'):
              self.add_ge(obj_.value)
            elif hasattr(self, 'set_ge'):
              self.set_ge(obj_.value)
        elif nodeName_ == 'larr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'larr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_larr'):
              self.add_larr(obj_.value)
            elif hasattr(self, 'set_larr'):
              self.set_larr(obj_.value)
        elif nodeName_ == 'rarr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rarr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rarr'):
              self.add_rarr(obj_.value)
            elif hasattr(self, 'set_rarr'):
              self.set_rarr(obj_.value)
        elif nodeName_ == 'isin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'isin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_isin'):
              self.add_isin(obj_.value)
            elif hasattr(self, 'set_isin'):
              self.set_isin(obj_.value)
        elif nodeName_ == 'notin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'notin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_notin'):
              self.add_notin(obj_.value)
            elif hasattr(self, 'set_notin'):
              self.set_notin(obj_.value)
        elif nodeName_ == 'lceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lceil'):
              self.add_lceil(obj_.value)
            elif hasattr(self, 'set_lceil'):
              self.set_lceil(obj_.value)
        elif nodeName_ == 'rceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rceil'):
              self.add_rceil(obj_.value)
            elif hasattr(self, 'set_rceil'):
              self.set_rceil(obj_.value)
        elif nodeName_ == 'lfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lfloor'):
              self.add_lfloor(obj_.value)
            elif hasattr(self, 'set_lfloor'):
              self.set_lfloor(obj_.value)
        elif nodeName_ == 'rfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rfloor'):
              self.add_rfloor(obj_.value)
            elif hasattr(self, 'set_rfloor'):
              self.set_rfloor(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docTitleType


class docParaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ulink=None, bold=None, emphasis=None, computeroutput=None, subscript=None, superscript=None, center=None, small=None, htmlonly=None, manonly=None, xmlonly=None, rtfonly=None, latexonly=None, dot=None, anchor=None, formula=None, ref=None, copy=None, trademark=None, registered=None, lsquo=None, rsquo=None, ldquo=None, rdquo=None, ndash=None, mdash=None, umlaut=None, acute=None, grave=None, circ=None, slash=None, tilde=None, cedil=None, ring=None, szlig=None, nonbreakablespace=None, aelig=None, AElig=None, Gamma=None, Delta=None, Theta=None, Lambda=None, Xi=None, Pi=None, Sigma=None, Upsilon=None, Phi=None, Psi=None, Omega=None, alpha=None, beta=None, gamma=None, delta=None, epsilon=None, zeta=None, eta=None, theta=None, iota=None, kappa=None, lambda_=None, mu=None, nu=None, xi=None, pi=None, rho=None, sigma=None, tau=None, upsilon=None, phi=None, chi=None, psi=None, omega=None, sigmaf=None, sect=None, deg=None, prime=None, Prime=None, infin=None, empty=None, plusmn=None, times=None, minus=None, sdot=None, part=None, nabla=None, radic=None, perp=None, sum=None, int=None, prod=None, sim=None, asymp=None, ne=None, equiv=None, prop=None, le=None, ge=None, larr=None, rarr=None, isin=None, notin=None, lceil=None, rceil=None, lfloor=None, rfloor=None, linebreak=None, hruler=None, preformatted=None, programlisting=None, verbatim=None, indexentry=None, orderedlist=None, itemizedlist=None, simplesect=None, title=None, variablelist=None, table=None, heading=None, image=None, dotfile=None, toclist=None, language=None, parameterlist=None, xrefsect=None, copydoc=None, blockquote=None, valueOf_=None, mixedclass_=None, content_=None):
        if ulink is None:
            self.ulink = []
        else:
            self.ulink = ulink
        if bold is None:
            self.bold = []
        else:
            self.bold = bold
        if emphasis is None:
            self.emphasis = []
        else:
            self.emphasis = emphasis
        if computeroutput is None:
            self.computeroutput = []
        else:
            self.computeroutput = computeroutput
        if subscript is None:
            self.subscript = []
        else:
            self.subscript = subscript
        if superscript is None:
            self.superscript = []
        else:
            self.superscript = superscript
        if center is None:
            self.center = []
        else:
            self.center = center
        if small is None:
            self.small = []
        else:
            self.small = small
        if htmlonly is None:
            self.htmlonly = []
        else:
            self.htmlonly = htmlonly
        if manonly is None:
            self.manonly = []
        else:
            self.manonly = manonly
        if xmlonly is None:
            self.xmlonly = []
        else:
            self.xmlonly = xmlonly
        if rtfonly is None:
            self.rtfonly = []
        else:
            self.rtfonly = rtfonly
        if latexonly is None:
            self.latexonly = []
        else:
            self.latexonly = latexonly
        if dot is None:
            self.dot = []
        else:
            self.dot = dot
        if anchor is None:
            self.anchor = []
        else:
            self.anchor = anchor
        if formula is None:
            self.formula = []
        else:
            self.formula = formula
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        if copy is None:
            self.copy = []
        else:
            self.copy = copy
        if trademark is None:
            self.trademark = []
        else:
            self.trademark = trademark
        if registered is None:
            self.registered = []
        else:
            self.registered = registered
        if lsquo is None:
            self.lsquo = []
        else:
            self.lsquo = lsquo
        if rsquo is None:
            self.rsquo = []
        else:
            self.rsquo = rsquo
        if ldquo is None:
            self.ldquo = []
        else:
            self.ldquo = ldquo
        if rdquo is None:
            self.rdquo = []
        else:
            self.rdquo = rdquo
        if ndash is None:
            self.ndash = []
        else:
            self.ndash = ndash
        if mdash is None:
            self.mdash = []
        else:
            self.mdash = mdash
        if umlaut is None:
            self.umlaut = []
        else:
            self.umlaut = umlaut
        if acute is None:
            self.acute = []
        else:
            self.acute = acute
        if grave is None:
            self.grave = []
        else:
            self.grave = grave
        if circ is None:
            self.circ = []
        else:
            self.circ = circ
        if slash is None:
            self.slash = []
        else:
            self.slash = slash
        if tilde is None:
            self.tilde = []
        else:
            self.tilde = tilde
        if cedil is None:
            self.cedil = []
        else:
            self.cedil = cedil
        if ring is None:
            self.ring = []
        else:
            self.ring = ring
        if szlig is None:
            self.szlig = []
        else:
            self.szlig = szlig
        if nonbreakablespace is None:
            self.nonbreakablespace = []
        else:
            self.nonbreakablespace = nonbreakablespace
        if aelig is None:
            self.aelig = []
        else:
            self.aelig = aelig
        if AElig is None:
            self.AElig = []
        else:
            self.AElig = AElig
        if Gamma is None:
            self.Gamma = []
        else:
            self.Gamma = Gamma
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Theta is None:
            self.Theta = []
        else:
            self.Theta = Theta
        if Lambda is None:
            self.Lambda = []
        else:
            self.Lambda = Lambda
        if Xi is None:
            self.Xi = []
        else:
            self.Xi = Xi
        if Pi is None:
            self.Pi = []
        else:
            self.Pi = Pi
        if Sigma is None:
            self.Sigma = []
        else:
            self.Sigma = Sigma
        if Upsilon is None:
            self.Upsilon = []
        else:
            self.Upsilon = Upsilon
        if Phi is None:
            self.Phi = []
        else:
            self.Phi = Phi
        if Psi is None:
            self.Psi = []
        else:
            self.Psi = Psi
        if Omega is None:
            self.Omega = []
        else:
            self.Omega = Omega
        if alpha is None:
            self.alpha = []
        else:
            self.alpha = alpha
        if beta is None:
            self.beta = []
        else:
            self.beta = beta
        if gamma is None:
            self.gamma = []
        else:
            self.gamma = gamma
        if delta is None:
            self.delta = []
        else:
            self.delta = delta
        if epsilon is None:
            self.epsilon = []
        else:
            self.epsilon = epsilon
        if zeta is None:
            self.zeta = []
        else:
            self.zeta = zeta
        if eta is None:
            self.eta = []
        else:
            self.eta = eta
        if theta is None:
            self.theta = []
        else:
            self.theta = theta
        if iota is None:
            self.iota = []
        else:
            self.iota = iota
        if kappa is None:
            self.kappa = []
        else:
            self.kappa = kappa
        if lambda_ is None:
            self.lambda_ = []
        else:
            self.lambda_ = lambda_
        if mu is None:
            self.mu = []
        else:
            self.mu = mu
        if nu is None:
            self.nu = []
        else:
            self.nu = nu
        if xi is None:
            self.xi = []
        else:
            self.xi = xi
        if pi is None:
            self.pi = []
        else:
            self.pi = pi
        if rho is None:
            self.rho = []
        else:
            self.rho = rho
        if sigma is None:
            self.sigma = []
        else:
            self.sigma = sigma
        if tau is None:
            self.tau = []
        else:
            self.tau = tau
        if upsilon is None:
            self.upsilon = []
        else:
            self.upsilon = upsilon
        if phi is None:
            self.phi = []
        else:
            self.phi = phi
        if chi is None:
            self.chi = []
        else:
            self.chi = chi
        if psi is None:
            self.psi = []
        else:
            self.psi = psi
        if omega is None:
            self.omega = []
        else:
            self.omega = omega
        if sigmaf is None:
            self.sigmaf = []
        else:
            self.sigmaf = sigmaf
        if sect is None:
            self.sect = []
        else:
            self.sect = sect
        if deg is None:
            self.deg = []
        else:
            self.deg = deg
        if prime is None:
            self.prime = []
        else:
            self.prime = prime
        if Prime is None:
            self.Prime = []
        else:
            self.Prime = Prime
        if infin is None:
            self.infin = []
        else:
            self.infin = infin
        if empty is None:
            self.empty = []
        else:
            self.empty = empty
        if plusmn is None:
            self.plusmn = []
        else:
            self.plusmn = plusmn
        if times is None:
            self.times = []
        else:
            self.times = times
        if minus is None:
            self.minus = []
        else:
            self.minus = minus
        if sdot is None:
            self.sdot = []
        else:
            self.sdot = sdot
        if part is None:
            self.part = []
        else:
            self.part = part
        if nabla is None:
            self.nabla = []
        else:
            self.nabla = nabla
        if radic is None:
            self.radic = []
        else:
            self.radic = radic
        if perp is None:
            self.perp = []
        else:
            self.perp = perp
        if sum is None:
            self.sum = []
        else:
            self.sum = sum
        if int is None:
            self.int = []
        else:
            self.int = int
        if prod is None:
            self.prod = []
        else:
            self.prod = prod
        if sim is None:
            self.sim = []
        else:
            self.sim = sim
        if asymp is None:
            self.asymp = []
        else:
            self.asymp = asymp
        if ne is None:
            self.ne = []
        else:
            self.ne = ne
        if equiv is None:
            self.equiv = []
        else:
            self.equiv = equiv
        if prop is None:
            self.prop = []
        else:
            self.prop = prop
        if le is None:
            self.le = []
        else:
            self.le = le
        if ge is None:
            self.ge = []
        else:
            self.ge = ge
        if larr is None:
            self.larr = []
        else:
            self.larr = larr
        if rarr is None:
            self.rarr = []
        else:
            self.rarr = rarr
        if isin is None:
            self.isin = []
        else:
            self.isin = isin
        if notin is None:
            self.notin = []
        else:
            self.notin = notin
        if lceil is None:
            self.lceil = []
        else:
            self.lceil = lceil
        if rceil is None:
            self.rceil = []
        else:
            self.rceil = rceil
        if lfloor is None:
            self.lfloor = []
        else:
            self.lfloor = lfloor
        if rfloor is None:
            self.rfloor = []
        else:
            self.rfloor = rfloor
        if linebreak is None:
            self.linebreak = []
        else:
            self.linebreak = linebreak
        if hruler is None:
            self.hruler = []
        else:
            self.hruler = hruler
        if preformatted is None:
            self.preformatted = []
        else:
            self.preformatted = preformatted
        if programlisting is None:
            self.programlisting = []
        else:
            self.programlisting = programlisting
        if verbatim is None:
            self.verbatim = []
        else:
            self.verbatim = verbatim
        if indexentry is None:
            self.indexentry = []
        else:
            self.indexentry = indexentry
        if orderedlist is None:
            self.orderedlist = []
        else:
            self.orderedlist = orderedlist
        if itemizedlist is None:
            self.itemizedlist = []
        else:
            self.itemizedlist = itemizedlist
        if simplesect is None:
            self.simplesect = []
        else:
            self.simplesect = simplesect
        if title is None:
            self.title = []
        else:
            self.title = title
        if variablelist is None:
            self.variablelist = []
        else:
            self.variablelist = variablelist
        if table is None:
            self.table = []
        else:
            self.table = table
        if heading is None:
            self.heading = []
        else:
            self.heading = heading
        if image is None:
            self.image = []
        else:
            self.image = image
        if dotfile is None:
            self.dotfile = []
        else:
            self.dotfile = dotfile
        if toclist is None:
            self.toclist = []
        else:
            self.toclist = toclist
        if language is None:
            self.language = []
        else:
            self.language = language
        if parameterlist is None:
            self.parameterlist = []
        else:
            self.parameterlist = parameterlist
        if xrefsect is None:
            self.xrefsect = []
        else:
            self.xrefsect = xrefsect
        if copydoc is None:
            self.copydoc = []
        else:
            self.copydoc = copydoc
        if blockquote is None:
            self.blockquote = []
        else:
            self.blockquote = blockquote
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docParaType.subclass:
            return docParaType.subclass(*args_, **kwargs_)
        else:
            return docParaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ulink(self): return self.ulink
    def set_ulink(self, ulink): self.ulink = ulink
    def add_ulink(self, value): self.ulink.append(value)
    def insert_ulink(self, index, value): self.ulink[index] = value
    def get_bold(self): return self.bold
    def set_bold(self, bold): self.bold = bold
    def add_bold(self, value): self.bold.append(value)
    def insert_bold(self, index, value): self.bold[index] = value
    def get_emphasis(self): return self.emphasis
    def set_emphasis(self, emphasis): self.emphasis = emphasis
    def add_emphasis(self, value): self.emphasis.append(value)
    def insert_emphasis(self, index, value): self.emphasis[index] = value
    def get_computeroutput(self): return self.computeroutput
    def set_computeroutput(self, computeroutput): self.computeroutput = computeroutput
    def add_computeroutput(self, value): self.computeroutput.append(value)
    def insert_computeroutput(self, index, value): self.computeroutput[index] = value
    def get_subscript(self): return self.subscript
    def set_subscript(self, subscript): self.subscript = subscript
    def add_subscript(self, value): self.subscript.append(value)
    def insert_subscript(self, index, value): self.subscript[index] = value
    def get_superscript(self): return self.superscript
    def set_superscript(self, superscript): self.superscript = superscript
    def add_superscript(self, value): self.superscript.append(value)
    def insert_superscript(self, index, value): self.superscript[index] = value
    def get_center(self): return self.center
    def set_center(self, center): self.center = center
    def add_center(self, value): self.center.append(value)
    def insert_center(self, index, value): self.center[index] = value
    def get_small(self): return self.small
    def set_small(self, small): self.small = small
    def add_small(self, value): self.small.append(value)
    def insert_small(self, index, value): self.small[index] = value
    def get_htmlonly(self): return self.htmlonly
    def set_htmlonly(self, htmlonly): self.htmlonly = htmlonly
    def add_htmlonly(self, value): self.htmlonly.append(value)
    def insert_htmlonly(self, index, value): self.htmlonly[index] = value
    def get_manonly(self): return self.manonly
    def set_manonly(self, manonly): self.manonly = manonly
    def add_manonly(self, value): self.manonly.append(value)
    def insert_manonly(self, index, value): self.manonly[index] = value
    def get_xmlonly(self): return self.xmlonly
    def set_xmlonly(self, xmlonly): self.xmlonly = xmlonly
    def add_xmlonly(self, value): self.xmlonly.append(value)
    def insert_xmlonly(self, index, value): self.xmlonly[index] = value
    def get_rtfonly(self): return self.rtfonly
    def set_rtfonly(self, rtfonly): self.rtfonly = rtfonly
    def add_rtfonly(self, value): self.rtfonly.append(value)
    def insert_rtfonly(self, index, value): self.rtfonly[index] = value
    def get_latexonly(self): return self.latexonly
    def set_latexonly(self, latexonly): self.latexonly = latexonly
    def add_latexonly(self, value): self.latexonly.append(value)
    def insert_latexonly(self, index, value): self.latexonly[index] = value
    def get_dot(self): return self.dot
    def set_dot(self, dot): self.dot = dot
    def add_dot(self, value): self.dot.append(value)
    def insert_dot(self, index, value): self.dot[index] = value
    def get_anchor(self): return self.anchor
    def set_anchor(self, anchor): self.anchor = anchor
    def add_anchor(self, value): self.anchor.append(value)
    def insert_anchor(self, index, value): self.anchor[index] = value
    def get_formula(self): return self.formula
    def set_formula(self, formula): self.formula = formula
    def add_formula(self, value): self.formula.append(value)
    def insert_formula(self, index, value): self.formula[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_copy(self): return self.copy
    def set_copy(self, copy): self.copy = copy
    def add_copy(self, value): self.copy.append(value)
    def insert_copy(self, index, value): self.copy[index] = value
    def get_trademark(self): return self.trademark
    def set_trademark(self, trademark): self.trademark = trademark
    def add_trademark(self, value): self.trademark.append(value)
    def insert_trademark(self, index, value): self.trademark[index] = value
    def get_registered(self): return self.registered
    def set_registered(self, registered): self.registered = registered
    def add_registered(self, value): self.registered.append(value)
    def insert_registered(self, index, value): self.registered[index] = value
    def get_lsquo(self): return self.lsquo
    def set_lsquo(self, lsquo): self.lsquo = lsquo
    def add_lsquo(self, value): self.lsquo.append(value)
    def insert_lsquo(self, index, value): self.lsquo[index] = value
    def get_rsquo(self): return self.rsquo
    def set_rsquo(self, rsquo): self.rsquo = rsquo
    def add_rsquo(self, value): self.rsquo.append(value)
    def insert_rsquo(self, index, value): self.rsquo[index] = value
    def get_ldquo(self): return self.ldquo
    def set_ldquo(self, ldquo): self.ldquo = ldquo
    def add_ldquo(self, value): self.ldquo.append(value)
    def insert_ldquo(self, index, value): self.ldquo[index] = value
    def get_rdquo(self): return self.rdquo
    def set_rdquo(self, rdquo): self.rdquo = rdquo
    def add_rdquo(self, value): self.rdquo.append(value)
    def insert_rdquo(self, index, value): self.rdquo[index] = value
    def get_ndash(self): return self.ndash
    def set_ndash(self, ndash): self.ndash = ndash
    def add_ndash(self, value): self.ndash.append(value)
    def insert_ndash(self, index, value): self.ndash[index] = value
    def get_mdash(self): return self.mdash
    def set_mdash(self, mdash): self.mdash = mdash
    def add_mdash(self, value): self.mdash.append(value)
    def insert_mdash(self, index, value): self.mdash[index] = value
    def get_umlaut(self): return self.umlaut
    def set_umlaut(self, umlaut): self.umlaut = umlaut
    def add_umlaut(self, value): self.umlaut.append(value)
    def insert_umlaut(self, index, value): self.umlaut[index] = value
    def get_acute(self): return self.acute
    def set_acute(self, acute): self.acute = acute
    def add_acute(self, value): self.acute.append(value)
    def insert_acute(self, index, value): self.acute[index] = value
    def get_grave(self): return self.grave
    def set_grave(self, grave): self.grave = grave
    def add_grave(self, value): self.grave.append(value)
    def insert_grave(self, index, value): self.grave[index] = value
    def get_circ(self): return self.circ
    def set_circ(self, circ): self.circ = circ
    def add_circ(self, value): self.circ.append(value)
    def insert_circ(self, index, value): self.circ[index] = value
    def get_slash(self): return self.slash
    def set_slash(self, slash): self.slash = slash
    def add_slash(self, value): self.slash.append(value)
    def insert_slash(self, index, value): self.slash[index] = value
    def get_tilde(self): return self.tilde
    def set_tilde(self, tilde): self.tilde = tilde
    def add_tilde(self, value): self.tilde.append(value)
    def insert_tilde(self, index, value): self.tilde[index] = value
    def get_cedil(self): return self.cedil
    def set_cedil(self, cedil): self.cedil = cedil
    def add_cedil(self, value): self.cedil.append(value)
    def insert_cedil(self, index, value): self.cedil[index] = value
    def get_ring(self): return self.ring
    def set_ring(self, ring): self.ring = ring
    def add_ring(self, value): self.ring.append(value)
    def insert_ring(self, index, value): self.ring[index] = value
    def get_szlig(self): return self.szlig
    def set_szlig(self, szlig): self.szlig = szlig
    def add_szlig(self, value): self.szlig.append(value)
    def insert_szlig(self, index, value): self.szlig[index] = value
    def get_nonbreakablespace(self): return self.nonbreakablespace
    def set_nonbreakablespace(self, nonbreakablespace): self.nonbreakablespace = nonbreakablespace
    def add_nonbreakablespace(self, value): self.nonbreakablespace.append(value)
    def insert_nonbreakablespace(self, index, value): self.nonbreakablespace[index] = value
    def get_aelig(self): return self.aelig
    def set_aelig(self, aelig): self.aelig = aelig
    def add_aelig(self, value): self.aelig.append(value)
    def insert_aelig(self, index, value): self.aelig[index] = value
    def get_AElig(self): return self.AElig
    def set_AElig(self, AElig): self.AElig = AElig
    def add_AElig(self, value): self.AElig.append(value)
    def insert_AElig(self, index, value): self.AElig[index] = value
    def get_Gamma(self): return self.Gamma
    def set_Gamma(self, Gamma): self.Gamma = Gamma
    def add_Gamma(self, value): self.Gamma.append(value)
    def insert_Gamma(self, index, value): self.Gamma[index] = value
    def get_Delta(self): return self.Delta
    def set_Delta(self, Delta): self.Delta = Delta
    def add_Delta(self, value): self.Delta.append(value)
    def insert_Delta(self, index, value): self.Delta[index] = value
    def get_Theta(self): return self.Theta
    def set_Theta(self, Theta): self.Theta = Theta
    def add_Theta(self, value): self.Theta.append(value)
    def insert_Theta(self, index, value): self.Theta[index] = value
    def get_Lambda(self): return self.Lambda
    def set_Lambda(self, Lambda): self.Lambda = Lambda
    def add_Lambda(self, value): self.Lambda.append(value)
    def insert_Lambda(self, index, value): self.Lambda[index] = value
    def get_Xi(self): return self.Xi
    def set_Xi(self, Xi): self.Xi = Xi
    def add_Xi(self, value): self.Xi.append(value)
    def insert_Xi(self, index, value): self.Xi[index] = value
    def get_Pi(self): return self.Pi
    def set_Pi(self, Pi): self.Pi = Pi
    def add_Pi(self, value): self.Pi.append(value)
    def insert_Pi(self, index, value): self.Pi[index] = value
    def get_Sigma(self): return self.Sigma
    def set_Sigma(self, Sigma): self.Sigma = Sigma
    def add_Sigma(self, value): self.Sigma.append(value)
    def insert_Sigma(self, index, value): self.Sigma[index] = value
    def get_Upsilon(self): return self.Upsilon
    def set_Upsilon(self, Upsilon): self.Upsilon = Upsilon
    def add_Upsilon(self, value): self.Upsilon.append(value)
    def insert_Upsilon(self, index, value): self.Upsilon[index] = value
    def get_Phi(self): return self.Phi
    def set_Phi(self, Phi): self.Phi = Phi
    def add_Phi(self, value): self.Phi.append(value)
    def insert_Phi(self, index, value): self.Phi[index] = value
    def get_Psi(self): return self.Psi
    def set_Psi(self, Psi): self.Psi = Psi
    def add_Psi(self, value): self.Psi.append(value)
    def insert_Psi(self, index, value): self.Psi[index] = value
    def get_Omega(self): return self.Omega
    def set_Omega(self, Omega): self.Omega = Omega
    def add_Omega(self, value): self.Omega.append(value)
    def insert_Omega(self, index, value): self.Omega[index] = value
    def get_alpha(self): return self.alpha
    def set_alpha(self, alpha): self.alpha = alpha
    def add_alpha(self, value): self.alpha.append(value)
    def insert_alpha(self, index, value): self.alpha[index] = value
    def get_beta(self): return self.beta
    def set_beta(self, beta): self.beta = beta
    def add_beta(self, value): self.beta.append(value)
    def insert_beta(self, index, value): self.beta[index] = value
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def add_gamma(self, value): self.gamma.append(value)
    def insert_gamma(self, index, value): self.gamma[index] = value
    def get_delta(self): return self.delta
    def set_delta(self, delta): self.delta = delta
    def add_delta(self, value): self.delta.append(value)
    def insert_delta(self, index, value): self.delta[index] = value
    def get_epsilon(self): return self.epsilon
    def set_epsilon(self, epsilon): self.epsilon = epsilon
    def add_epsilon(self, value): self.epsilon.append(value)
    def insert_epsilon(self, index, value): self.epsilon[index] = value
    def get_zeta(self): return self.zeta
    def set_zeta(self, zeta): self.zeta = zeta
    def add_zeta(self, value): self.zeta.append(value)
    def insert_zeta(self, index, value): self.zeta[index] = value
    def get_eta(self): return self.eta
    def set_eta(self, eta): self.eta = eta
    def add_eta(self, value): self.eta.append(value)
    def insert_eta(self, index, value): self.eta[index] = value
    def get_theta(self): return self.theta
    def set_theta(self, theta): self.theta = theta
    def add_theta(self, value): self.theta.append(value)
    def insert_theta(self, index, value): self.theta[index] = value
    def get_iota(self): return self.iota
    def set_iota(self, iota): self.iota = iota
    def add_iota(self, value): self.iota.append(value)
    def insert_iota(self, index, value): self.iota[index] = value
    def get_kappa(self): return self.kappa
    def set_kappa(self, kappa): self.kappa = kappa
    def add_kappa(self, value): self.kappa.append(value)
    def insert_kappa(self, index, value): self.kappa[index] = value
    def get_lambda(self): return self.lambda_
    def set_lambda(self, lambda_): self.lambda_ = lambda_
    def add_lambda(self, value): self.lambda_.append(value)
    def insert_lambda(self, index, value): self.lambda_[index] = value
    def get_mu(self): return self.mu
    def set_mu(self, mu): self.mu = mu
    def add_mu(self, value): self.mu.append(value)
    def insert_mu(self, index, value): self.mu[index] = value
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def add_nu(self, value): self.nu.append(value)
    def insert_nu(self, index, value): self.nu[index] = value
    def get_xi(self): return self.xi
    def set_xi(self, xi): self.xi = xi
    def add_xi(self, value): self.xi.append(value)
    def insert_xi(self, index, value): self.xi[index] = value
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def add_pi(self, value): self.pi.append(value)
    def insert_pi(self, index, value): self.pi[index] = value
    def get_rho(self): return self.rho
    def set_rho(self, rho): self.rho = rho
    def add_rho(self, value): self.rho.append(value)
    def insert_rho(self, index, value): self.rho[index] = value
    def get_sigma(self): return self.sigma
    def set_sigma(self, sigma): self.sigma = sigma
    def add_sigma(self, value): self.sigma.append(value)
    def insert_sigma(self, index, value): self.sigma[index] = value
    def get_tau(self): return self.tau
    def set_tau(self, tau): self.tau = tau
    def add_tau(self, value): self.tau.append(value)
    def insert_tau(self, index, value): self.tau[index] = value
    def get_upsilon(self): return self.upsilon
    def set_upsilon(self, upsilon): self.upsilon = upsilon
    def add_upsilon(self, value): self.upsilon.append(value)
    def insert_upsilon(self, index, value): self.upsilon[index] = value
    def get_phi(self): return self.phi
    def set_phi(self, phi): self.phi = phi
    def add_phi(self, value): self.phi.append(value)
    def insert_phi(self, index, value): self.phi[index] = value
    def get_chi(self): return self.chi
    def set_chi(self, chi): self.chi = chi
    def add_chi(self, value): self.chi.append(value)
    def insert_chi(self, index, value): self.chi[index] = value
    def get_psi(self): return self.psi
    def set_psi(self, psi): self.psi = psi
    def add_psi(self, value): self.psi.append(value)
    def insert_psi(self, index, value): self.psi[index] = value
    def get_omega(self): return self.omega
    def set_omega(self, omega): self.omega = omega
    def add_omega(self, value): self.omega.append(value)
    def insert_omega(self, index, value): self.omega[index] = value
    def get_sigmaf(self): return self.sigmaf
    def set_sigmaf(self, sigmaf): self.sigmaf = sigmaf
    def add_sigmaf(self, value): self.sigmaf.append(value)
    def insert_sigmaf(self, index, value): self.sigmaf[index] = value
    def get_sect(self): return self.sect
    def set_sect(self, sect): self.sect = sect
    def add_sect(self, value): self.sect.append(value)
    def insert_sect(self, index, value): self.sect[index] = value
    def get_deg(self): return self.deg
    def set_deg(self, deg): self.deg = deg
    def add_deg(self, value): self.deg.append(value)
    def insert_deg(self, index, value): self.deg[index] = value
    def get_prime(self): return self.prime
    def set_prime(self, prime): self.prime = prime
    def add_prime(self, value): self.prime.append(value)
    def insert_prime(self, index, value): self.prime[index] = value
    def get_Prime(self): return self.Prime
    def set_Prime(self, Prime): self.Prime = Prime
    def add_Prime(self, value): self.Prime.append(value)
    def insert_Prime(self, index, value): self.Prime[index] = value
    def get_infin(self): return self.infin
    def set_infin(self, infin): self.infin = infin
    def add_infin(self, value): self.infin.append(value)
    def insert_infin(self, index, value): self.infin[index] = value
    def get_empty(self): return self.empty
    def set_empty(self, empty): self.empty = empty
    def add_empty(self, value): self.empty.append(value)
    def insert_empty(self, index, value): self.empty[index] = value
    def get_plusmn(self): return self.plusmn
    def set_plusmn(self, plusmn): self.plusmn = plusmn
    def add_plusmn(self, value): self.plusmn.append(value)
    def insert_plusmn(self, index, value): self.plusmn[index] = value
    def get_times(self): return self.times
    def set_times(self, times): self.times = times
    def add_times(self, value): self.times.append(value)
    def insert_times(self, index, value): self.times[index] = value
    def get_minus(self): return self.minus
    def set_minus(self, minus): self.minus = minus
    def add_minus(self, value): self.minus.append(value)
    def insert_minus(self, index, value): self.minus[index] = value
    def get_sdot(self): return self.sdot
    def set_sdot(self, sdot): self.sdot = sdot
    def add_sdot(self, value): self.sdot.append(value)
    def insert_sdot(self, index, value): self.sdot[index] = value
    def get_part(self): return self.part
    def set_part(self, part): self.part = part
    def add_part(self, value): self.part.append(value)
    def insert_part(self, index, value): self.part[index] = value
    def get_nabla(self): return self.nabla
    def set_nabla(self, nabla): self.nabla = nabla
    def add_nabla(self, value): self.nabla.append(value)
    def insert_nabla(self, index, value): self.nabla[index] = value
    def get_radic(self): return self.radic
    def set_radic(self, radic): self.radic = radic
    def add_radic(self, value): self.radic.append(value)
    def insert_radic(self, index, value): self.radic[index] = value
    def get_perp(self): return self.perp
    def set_perp(self, perp): self.perp = perp
    def add_perp(self, value): self.perp.append(value)
    def insert_perp(self, index, value): self.perp[index] = value
    def get_sum(self): return self.sum
    def set_sum(self, sum): self.sum = sum
    def add_sum(self, value): self.sum.append(value)
    def insert_sum(self, index, value): self.sum[index] = value
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def add_int(self, value): self.int.append(value)
    def insert_int(self, index, value): self.int[index] = value
    def get_prod(self): return self.prod
    def set_prod(self, prod): self.prod = prod
    def add_prod(self, value): self.prod.append(value)
    def insert_prod(self, index, value): self.prod[index] = value
    def get_sim(self): return self.sim
    def set_sim(self, sim): self.sim = sim
    def add_sim(self, value): self.sim.append(value)
    def insert_sim(self, index, value): self.sim[index] = value
    def get_asymp(self): return self.asymp
    def set_asymp(self, asymp): self.asymp = asymp
    def add_asymp(self, value): self.asymp.append(value)
    def insert_asymp(self, index, value): self.asymp[index] = value
    def get_ne(self): return self.ne
    def set_ne(self, ne): self.ne = ne
    def add_ne(self, value): self.ne.append(value)
    def insert_ne(self, index, value): self.ne[index] = value
    def get_equiv(self): return self.equiv
    def set_equiv(self, equiv): self.equiv = equiv
    def add_equiv(self, value): self.equiv.append(value)
    def insert_equiv(self, index, value): self.equiv[index] = value
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def add_prop(self, value): self.prop.append(value)
    def insert_prop(self, index, value): self.prop[index] = value
    def get_le(self): return self.le
    def set_le(self, le): self.le = le
    def add_le(self, value): self.le.append(value)
    def insert_le(self, index, value): self.le[index] = value
    def get_ge(self): return self.ge
    def set_ge(self, ge): self.ge = ge
    def add_ge(self, value): self.ge.append(value)
    def insert_ge(self, index, value): self.ge[index] = value
    def get_larr(self): return self.larr
    def set_larr(self, larr): self.larr = larr
    def add_larr(self, value): self.larr.append(value)
    def insert_larr(self, index, value): self.larr[index] = value
    def get_rarr(self): return self.rarr
    def set_rarr(self, rarr): self.rarr = rarr
    def add_rarr(self, value): self.rarr.append(value)
    def insert_rarr(self, index, value): self.rarr[index] = value
    def get_isin(self): return self.isin
    def set_isin(self, isin): self.isin = isin
    def add_isin(self, value): self.isin.append(value)
    def insert_isin(self, index, value): self.isin[index] = value
    def get_notin(self): return self.notin
    def set_notin(self, notin): self.notin = notin
    def add_notin(self, value): self.notin.append(value)
    def insert_notin(self, index, value): self.notin[index] = value
    def get_lceil(self): return self.lceil
    def set_lceil(self, lceil): self.lceil = lceil
    def add_lceil(self, value): self.lceil.append(value)
    def insert_lceil(self, index, value): self.lceil[index] = value
    def get_rceil(self): return self.rceil
    def set_rceil(self, rceil): self.rceil = rceil
    def add_rceil(self, value): self.rceil.append(value)
    def insert_rceil(self, index, value): self.rceil[index] = value
    def get_lfloor(self): return self.lfloor
    def set_lfloor(self, lfloor): self.lfloor = lfloor
    def add_lfloor(self, value): self.lfloor.append(value)
    def insert_lfloor(self, index, value): self.lfloor[index] = value
    def get_rfloor(self): return self.rfloor
    def set_rfloor(self, rfloor): self.rfloor = rfloor
    def add_rfloor(self, value): self.rfloor.append(value)
    def insert_rfloor(self, index, value): self.rfloor[index] = value
    def get_linebreak(self): return self.linebreak
    def set_linebreak(self, linebreak): self.linebreak = linebreak
    def add_linebreak(self, value): self.linebreak.append(value)
    def insert_linebreak(self, index, value): self.linebreak[index] = value
    def get_hruler(self): return self.hruler
    def set_hruler(self, hruler): self.hruler = hruler
    def add_hruler(self, value): self.hruler.append(value)
    def insert_hruler(self, index, value): self.hruler[index] = value
    def get_preformatted(self): return self.preformatted
    def set_preformatted(self, preformatted): self.preformatted = preformatted
    def add_preformatted(self, value): self.preformatted.append(value)
    def insert_preformatted(self, index, value): self.preformatted[index] = value
    def get_programlisting(self): return self.programlisting
    def set_programlisting(self, programlisting): self.programlisting = programlisting
    def add_programlisting(self, value): self.programlisting.append(value)
    def insert_programlisting(self, index, value): self.programlisting[index] = value
    def get_verbatim(self): return self.verbatim
    def set_verbatim(self, verbatim): self.verbatim = verbatim
    def add_verbatim(self, value): self.verbatim.append(value)
    def insert_verbatim(self, index, value): self.verbatim[index] = value
    def get_indexentry(self): return self.indexentry
    def set_indexentry(self, indexentry): self.indexentry = indexentry
    def add_indexentry(self, value): self.indexentry.append(value)
    def insert_indexentry(self, index, value): self.indexentry[index] = value
    def get_orderedlist(self): return self.orderedlist
    def set_orderedlist(self, orderedlist): self.orderedlist = orderedlist
    def add_orderedlist(self, value): self.orderedlist.append(value)
    def insert_orderedlist(self, index, value): self.orderedlist[index] = value
    def get_itemizedlist(self): return self.itemizedlist
    def set_itemizedlist(self, itemizedlist): self.itemizedlist = itemizedlist
    def add_itemizedlist(self, value): self.itemizedlist.append(value)
    def insert_itemizedlist(self, index, value): self.itemizedlist[index] = value
    def get_simplesect(self): return self.simplesect
    def set_simplesect(self, simplesect): self.simplesect = simplesect
    def add_simplesect(self, value): self.simplesect.append(value)
    def insert_simplesect(self, index, value): self.simplesect[index] = value
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def add_title(self, value): self.title.append(value)
    def insert_title(self, index, value): self.title[index] = value
    def get_variablelist(self): return self.variablelist
    def set_variablelist(self, variablelist): self.variablelist = variablelist
    def add_variablelist(self, value): self.variablelist.append(value)
    def insert_variablelist(self, index, value): self.variablelist[index] = value
    def get_table(self): return self.table
    def set_table(self, table): self.table = table
    def add_table(self, value): self.table.append(value)
    def insert_table(self, index, value): self.table[index] = value
    def get_heading(self): return self.heading
    def set_heading(self, heading): self.heading = heading
    def add_heading(self, value): self.heading.append(value)
    def insert_heading(self, index, value): self.heading[index] = value
    def get_image(self): return self.image
    def set_image(self, image): self.image = image
    def add_image(self, value): self.image.append(value)
    def insert_image(self, index, value): self.image[index] = value
    def get_dotfile(self): return self.dotfile
    def set_dotfile(self, dotfile): self.dotfile = dotfile
    def add_dotfile(self, value): self.dotfile.append(value)
    def insert_dotfile(self, index, value): self.dotfile[index] = value
    def get_toclist(self): return self.toclist
    def set_toclist(self, toclist): self.toclist = toclist
    def add_toclist(self, value): self.toclist.append(value)
    def insert_toclist(self, index, value): self.toclist[index] = value
    def get_language(self): return self.language
    def set_language(self, language): self.language = language
    def add_language(self, value): self.language.append(value)
    def insert_language(self, index, value): self.language[index] = value
    def get_parameterlist(self): return self.parameterlist
    def set_parameterlist(self, parameterlist): self.parameterlist = parameterlist
    def add_parameterlist(self, value): self.parameterlist.append(value)
    def insert_parameterlist(self, index, value): self.parameterlist[index] = value
    def get_xrefsect(self): return self.xrefsect
    def set_xrefsect(self, xrefsect): self.xrefsect = xrefsect
    def add_xrefsect(self, value): self.xrefsect.append(value)
    def insert_xrefsect(self, index, value): self.xrefsect[index] = value
    def get_copydoc(self): return self.copydoc
    def set_copydoc(self, copydoc): self.copydoc = copydoc
    def add_copydoc(self, value): self.copydoc.append(value)
    def insert_copydoc(self, index, value): self.copydoc[index] = value
    def get_blockquote(self): return self.blockquote
    def set_blockquote(self, blockquote): self.blockquote = blockquote
    def add_blockquote(self, value): self.blockquote.append(value)
    def insert_blockquote(self, index, value): self.blockquote[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ulink or
            self.bold or
            self.emphasis or
            self.computeroutput or
            self.subscript or
            self.superscript or
            self.center or
            self.small or
            self.htmlonly or
            self.manonly or
            self.xmlonly or
            self.rtfonly or
            self.latexonly or
            self.dot or
            self.anchor or
            self.formula or
            self.ref or
            self.copy or
            self.trademark or
            self.registered or
            self.lsquo or
            self.rsquo or
            self.ldquo or
            self.rdquo or
            self.ndash or
            self.mdash or
            self.umlaut or
            self.acute or
            self.grave or
            self.circ or
            self.slash or
            self.tilde or
            self.cedil or
            self.ring or
            self.szlig or
            self.nonbreakablespace or
            self.aelig or
            self.AElig or
            self.Gamma or
            self.Delta or
            self.Theta or
            self.Lambda or
            self.Xi or
            self.Pi or
            self.Sigma or
            self.Upsilon or
            self.Phi or
            self.Psi or
            self.Omega or
            self.alpha or
            self.beta or
            self.gamma or
            self.delta or
            self.epsilon or
            self.zeta or
            self.eta or
            self.theta or
            self.iota or
            self.kappa or
            self.lambda_ or
            self.mu or
            self.nu or
            self.xi or
            self.pi or
            self.rho or
            self.sigma or
            self.tau or
            self.upsilon or
            self.phi or
            self.chi or
            self.psi or
            self.omega or
            self.sigmaf or
            self.sect or
            self.deg or
            self.prime or
            self.Prime or
            self.infin or
            self.empty or
            self.plusmn or
            self.times or
            self.minus or
            self.sdot or
            self.part or
            self.nabla or
            self.radic or
            self.perp or
            self.sum or
            self.int or
            self.prod or
            self.sim or
            self.asymp or
            self.ne or
            self.equiv or
            self.prop or
            self.le or
            self.ge or
            self.larr or
            self.rarr or
            self.isin or
            self.notin or
            self.lceil or
            self.rceil or
            self.lfloor or
            self.rfloor or
            self.linebreak or
            self.hruler or
            self.preformatted or
            self.programlisting or
            self.verbatim or
            self.indexentry or
            self.orderedlist or
            self.itemizedlist or
            self.simplesect or
            self.title or
            self.variablelist or
            self.table or
            self.heading or
            self.image or
            self.dotfile or
            self.toclist or
            self.language or
            self.parameterlist or
            self.xrefsect or
            self.copydoc or
            self.blockquote or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docParaType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docParaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docParaType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docParaType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docParaType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ulink':
            obj_ = docURLLink.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ulink', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ulink'):
              self.add_ulink(obj_.value)
            elif hasattr(self, 'set_ulink'):
              self.set_ulink(obj_.value)
        elif nodeName_ == 'bold':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'bold', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_bold'):
              self.add_bold(obj_.value)
            elif hasattr(self, 'set_bold'):
              self.set_bold(obj_.value)
        elif nodeName_ == 'emphasis':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'emphasis', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_emphasis'):
              self.add_emphasis(obj_.value)
            elif hasattr(self, 'set_emphasis'):
              self.set_emphasis(obj_.value)
        elif nodeName_ == 'computeroutput':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'computeroutput', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_computeroutput'):
              self.add_computeroutput(obj_.value)
            elif hasattr(self, 'set_computeroutput'):
              self.set_computeroutput(obj_.value)
        elif nodeName_ == 'subscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'subscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_subscript'):
              self.add_subscript(obj_.value)
            elif hasattr(self, 'set_subscript'):
              self.set_subscript(obj_.value)
        elif nodeName_ == 'superscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'superscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_superscript'):
              self.add_superscript(obj_.value)
            elif hasattr(self, 'set_superscript'):
              self.set_superscript(obj_.value)
        elif nodeName_ == 'center':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'center', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_center'):
              self.add_center(obj_.value)
            elif hasattr(self, 'set_center'):
              self.set_center(obj_.value)
        elif nodeName_ == 'small':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'small', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_small'):
              self.add_small(obj_.value)
            elif hasattr(self, 'set_small'):
              self.set_small(obj_.value)
        elif nodeName_ == 'htmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'htmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'manonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'manonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'xmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'xmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'rtfonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'rtfonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'latexonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'latexonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'dot' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'dot', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'anchor':
            obj_ = docAnchorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'anchor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_anchor'):
              self.add_anchor(obj_.value)
            elif hasattr(self, 'set_anchor'):
              self.set_anchor(obj_.value)
        elif nodeName_ == 'formula':
            obj_ = docFormulaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'formula', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_formula'):
              self.add_formula(obj_.value)
            elif hasattr(self, 'set_formula'):
              self.set_formula(obj_.value)
        elif nodeName_ == 'ref':
            obj_ = docRefTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        elif nodeName_ == 'copy':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copy', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copy'):
              self.add_copy(obj_.value)
            elif hasattr(self, 'set_copy'):
              self.set_copy(obj_.value)
        elif nodeName_ == 'trademark':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'trademark', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_trademark'):
              self.add_trademark(obj_.value)
            elif hasattr(self, 'set_trademark'):
              self.set_trademark(obj_.value)
        elif nodeName_ == 'registered':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'registered', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_registered'):
              self.add_registered(obj_.value)
            elif hasattr(self, 'set_registered'):
              self.set_registered(obj_.value)
        elif nodeName_ == 'lsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lsquo'):
              self.add_lsquo(obj_.value)
            elif hasattr(self, 'set_lsquo'):
              self.set_lsquo(obj_.value)
        elif nodeName_ == 'rsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rsquo'):
              self.add_rsquo(obj_.value)
            elif hasattr(self, 'set_rsquo'):
              self.set_rsquo(obj_.value)
        elif nodeName_ == 'ldquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ldquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ldquo'):
              self.add_ldquo(obj_.value)
            elif hasattr(self, 'set_ldquo'):
              self.set_ldquo(obj_.value)
        elif nodeName_ == 'rdquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rdquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rdquo'):
              self.add_rdquo(obj_.value)
            elif hasattr(self, 'set_rdquo'):
              self.set_rdquo(obj_.value)
        elif nodeName_ == 'ndash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ndash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ndash'):
              self.add_ndash(obj_.value)
            elif hasattr(self, 'set_ndash'):
              self.set_ndash(obj_.value)
        elif nodeName_ == 'mdash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mdash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mdash'):
              self.add_mdash(obj_.value)
            elif hasattr(self, 'set_mdash'):
              self.set_mdash(obj_.value)
        elif nodeName_ == 'umlaut':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'umlaut', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_umlaut'):
              self.add_umlaut(obj_.value)
            elif hasattr(self, 'set_umlaut'):
              self.set_umlaut(obj_.value)
        elif nodeName_ == 'acute':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'acute', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_acute'):
              self.add_acute(obj_.value)
            elif hasattr(self, 'set_acute'):
              self.set_acute(obj_.value)
        elif nodeName_ == 'grave':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'grave', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_grave'):
              self.add_grave(obj_.value)
            elif hasattr(self, 'set_grave'):
              self.set_grave(obj_.value)
        elif nodeName_ == 'circ':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circ', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_circ'):
              self.add_circ(obj_.value)
            elif hasattr(self, 'set_circ'):
              self.set_circ(obj_.value)
        elif nodeName_ == 'slash':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'slash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_slash'):
              self.add_slash(obj_.value)
            elif hasattr(self, 'set_slash'):
              self.set_slash(obj_.value)
        elif nodeName_ == 'tilde':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tilde', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tilde'):
              self.add_tilde(obj_.value)
            elif hasattr(self, 'set_tilde'):
              self.set_tilde(obj_.value)
        elif nodeName_ == 'cedil':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cedil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_cedil'):
              self.add_cedil(obj_.value)
            elif hasattr(self, 'set_cedil'):
              self.set_cedil(obj_.value)
        elif nodeName_ == 'ring':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ring', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ring'):
              self.add_ring(obj_.value)
            elif hasattr(self, 'set_ring'):
              self.set_ring(obj_.value)
        elif nodeName_ == 'szlig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'szlig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_szlig'):
              self.add_szlig(obj_.value)
            elif hasattr(self, 'set_szlig'):
              self.set_szlig(obj_.value)
        elif nodeName_ == 'nonbreakablespace':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nonbreakablespace', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nonbreakablespace'):
              self.add_nonbreakablespace(obj_.value)
            elif hasattr(self, 'set_nonbreakablespace'):
              self.set_nonbreakablespace(obj_.value)
        elif nodeName_ == 'aelig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'aelig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_aelig'):
              self.add_aelig(obj_.value)
            elif hasattr(self, 'set_aelig'):
              self.set_aelig(obj_.value)
        elif nodeName_ == 'AElig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AElig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AElig'):
              self.add_AElig(obj_.value)
            elif hasattr(self, 'set_AElig'):
              self.set_AElig(obj_.value)
        elif nodeName_ == 'Gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Gamma'):
              self.add_Gamma(obj_.value)
            elif hasattr(self, 'set_Gamma'):
              self.set_Gamma(obj_.value)
        elif nodeName_ == 'Delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Delta'):
              self.add_Delta(obj_.value)
            elif hasattr(self, 'set_Delta'):
              self.set_Delta(obj_.value)
        elif nodeName_ == 'Theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Theta'):
              self.add_Theta(obj_.value)
            elif hasattr(self, 'set_Theta'):
              self.set_Theta(obj_.value)
        elif nodeName_ == 'Lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Lambda'):
              self.add_Lambda(obj_.value)
            elif hasattr(self, 'set_Lambda'):
              self.set_Lambda(obj_.value)
        elif nodeName_ == 'Xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Xi'):
              self.add_Xi(obj_.value)
            elif hasattr(self, 'set_Xi'):
              self.set_Xi(obj_.value)
        elif nodeName_ == 'Pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Pi'):
              self.add_Pi(obj_.value)
            elif hasattr(self, 'set_Pi'):
              self.set_Pi(obj_.value)
        elif nodeName_ == 'Sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Sigma'):
              self.add_Sigma(obj_.value)
            elif hasattr(self, 'set_Sigma'):
              self.set_Sigma(obj_.value)
        elif nodeName_ == 'Upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Upsilon'):
              self.add_Upsilon(obj_.value)
            elif hasattr(self, 'set_Upsilon'):
              self.set_Upsilon(obj_.value)
        elif nodeName_ == 'Phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Phi'):
              self.add_Phi(obj_.value)
            elif hasattr(self, 'set_Phi'):
              self.set_Phi(obj_.value)
        elif nodeName_ == 'Psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Psi'):
              self.add_Psi(obj_.value)
            elif hasattr(self, 'set_Psi'):
              self.set_Psi(obj_.value)
        elif nodeName_ == 'Omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Omega'):
              self.add_Omega(obj_.value)
            elif hasattr(self, 'set_Omega'):
              self.set_Omega(obj_.value)
        elif nodeName_ == 'alpha':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'alpha', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_alpha'):
              self.add_alpha(obj_.value)
            elif hasattr(self, 'set_alpha'):
              self.set_alpha(obj_.value)
        elif nodeName_ == 'beta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'beta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_beta'):
              self.add_beta(obj_.value)
            elif hasattr(self, 'set_beta'):
              self.set_beta(obj_.value)
        elif nodeName_ == 'gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_gamma'):
              self.add_gamma(obj_.value)
            elif hasattr(self, 'set_gamma'):
              self.set_gamma(obj_.value)
        elif nodeName_ == 'delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_delta'):
              self.add_delta(obj_.value)
            elif hasattr(self, 'set_delta'):
              self.set_delta(obj_.value)
        elif nodeName_ == 'epsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'epsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_epsilon'):
              self.add_epsilon(obj_.value)
            elif hasattr(self, 'set_epsilon'):
              self.set_epsilon(obj_.value)
        elif nodeName_ == 'zeta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'zeta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_zeta'):
              self.add_zeta(obj_.value)
            elif hasattr(self, 'set_zeta'):
              self.set_zeta(obj_.value)
        elif nodeName_ == 'eta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'eta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_eta'):
              self.add_eta(obj_.value)
            elif hasattr(self, 'set_eta'):
              self.set_eta(obj_.value)
        elif nodeName_ == 'theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_theta'):
              self.add_theta(obj_.value)
            elif hasattr(self, 'set_theta'):
              self.set_theta(obj_.value)
        elif nodeName_ == 'iota':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'iota', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_iota'):
              self.add_iota(obj_.value)
            elif hasattr(self, 'set_iota'):
              self.set_iota(obj_.value)
        elif nodeName_ == 'kappa':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'kappa', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_kappa'):
              self.add_kappa(obj_.value)
            elif hasattr(self, 'set_kappa'):
              self.set_kappa(obj_.value)
        elif nodeName_ == 'lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lambda'):
              self.add_lambda(obj_.value)
            elif hasattr(self, 'set_lambda'):
              self.set_lambda(obj_.value)
        elif nodeName_ == 'mu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mu'):
              self.add_mu(obj_.value)
            elif hasattr(self, 'set_mu'):
              self.set_mu(obj_.value)
        elif nodeName_ == 'nu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nu'):
              self.add_nu(obj_.value)
            elif hasattr(self, 'set_nu'):
              self.set_nu(obj_.value)
        elif nodeName_ == 'xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xi'):
              self.add_xi(obj_.value)
            elif hasattr(self, 'set_xi'):
              self.set_xi(obj_.value)
        elif nodeName_ == 'pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_pi'):
              self.add_pi(obj_.value)
            elif hasattr(self, 'set_pi'):
              self.set_pi(obj_.value)
        elif nodeName_ == 'rho':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rho', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rho'):
              self.add_rho(obj_.value)
            elif hasattr(self, 'set_rho'):
              self.set_rho(obj_.value)
        elif nodeName_ == 'sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigma'):
              self.add_sigma(obj_.value)
            elif hasattr(self, 'set_sigma'):
              self.set_sigma(obj_.value)
        elif nodeName_ == 'tau':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tau', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tau'):
              self.add_tau(obj_.value)
            elif hasattr(self, 'set_tau'):
              self.set_tau(obj_.value)
        elif nodeName_ == 'upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_upsilon'):
              self.add_upsilon(obj_.value)
            elif hasattr(self, 'set_upsilon'):
              self.set_upsilon(obj_.value)
        elif nodeName_ == 'phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_phi'):
              self.add_phi(obj_.value)
            elif hasattr(self, 'set_phi'):
              self.set_phi(obj_.value)
        elif nodeName_ == 'chi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'chi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_chi'):
              self.add_chi(obj_.value)
            elif hasattr(self, 'set_chi'):
              self.set_chi(obj_.value)
        elif nodeName_ == 'psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_psi'):
              self.add_psi(obj_.value)
            elif hasattr(self, 'set_psi'):
              self.set_psi(obj_.value)
        elif nodeName_ == 'omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_omega'):
              self.add_omega(obj_.value)
            elif hasattr(self, 'set_omega'):
              self.set_omega(obj_.value)
        elif nodeName_ == 'sigmaf':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigmaf', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigmaf'):
              self.add_sigmaf(obj_.value)
            elif hasattr(self, 'set_sigmaf'):
              self.set_sigmaf(obj_.value)
        elif nodeName_ == 'sect':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect'):
              self.add_sect(obj_.value)
            elif hasattr(self, 'set_sect'):
              self.set_sect(obj_.value)
        elif nodeName_ == 'deg':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'deg', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_deg'):
              self.add_deg(obj_.value)
            elif hasattr(self, 'set_deg'):
              self.set_deg(obj_.value)
        elif nodeName_ == 'prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prime'):
              self.add_prime(obj_.value)
            elif hasattr(self, 'set_prime'):
              self.set_prime(obj_.value)
        elif nodeName_ == 'Prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Prime'):
              self.add_Prime(obj_.value)
            elif hasattr(self, 'set_Prime'):
              self.set_Prime(obj_.value)
        elif nodeName_ == 'infin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'infin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_infin'):
              self.add_infin(obj_.value)
            elif hasattr(self, 'set_infin'):
              self.set_infin(obj_.value)
        elif nodeName_ == 'empty':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'empty', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_empty'):
              self.add_empty(obj_.value)
            elif hasattr(self, 'set_empty'):
              self.set_empty(obj_.value)
        elif nodeName_ == 'plusmn':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'plusmn', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_plusmn'):
              self.add_plusmn(obj_.value)
            elif hasattr(self, 'set_plusmn'):
              self.set_plusmn(obj_.value)
        elif nodeName_ == 'times':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'times', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_times'):
              self.add_times(obj_.value)
            elif hasattr(self, 'set_times'):
              self.set_times(obj_.value)
        elif nodeName_ == 'minus':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'minus', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_minus'):
              self.add_minus(obj_.value)
            elif hasattr(self, 'set_minus'):
              self.set_minus(obj_.value)
        elif nodeName_ == 'sdot':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sdot', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sdot'):
              self.add_sdot(obj_.value)
            elif hasattr(self, 'set_sdot'):
              self.set_sdot(obj_.value)
        elif nodeName_ == 'part':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'part', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_part'):
              self.add_part(obj_.value)
            elif hasattr(self, 'set_part'):
              self.set_part(obj_.value)
        elif nodeName_ == 'nabla':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nabla', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nabla'):
              self.add_nabla(obj_.value)
            elif hasattr(self, 'set_nabla'):
              self.set_nabla(obj_.value)
        elif nodeName_ == 'radic':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radic', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_radic'):
              self.add_radic(obj_.value)
            elif hasattr(self, 'set_radic'):
              self.set_radic(obj_.value)
        elif nodeName_ == 'perp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'perp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_perp'):
              self.add_perp(obj_.value)
            elif hasattr(self, 'set_perp'):
              self.set_perp(obj_.value)
        elif nodeName_ == 'sum':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sum', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sum'):
              self.add_sum(obj_.value)
            elif hasattr(self, 'set_sum'):
              self.set_sum(obj_.value)
        elif nodeName_ == 'int':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'int', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_int'):
              self.add_int(obj_.value)
            elif hasattr(self, 'set_int'):
              self.set_int(obj_.value)
        elif nodeName_ == 'prod':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prod'):
              self.add_prod(obj_.value)
            elif hasattr(self, 'set_prod'):
              self.set_prod(obj_.value)
        elif nodeName_ == 'sim':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sim', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sim'):
              self.add_sim(obj_.value)
            elif hasattr(self, 'set_sim'):
              self.set_sim(obj_.value)
        elif nodeName_ == 'asymp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'asymp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_asymp'):
              self.add_asymp(obj_.value)
            elif hasattr(self, 'set_asymp'):
              self.set_asymp(obj_.value)
        elif nodeName_ == 'ne':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ne', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ne'):
              self.add_ne(obj_.value)
            elif hasattr(self, 'set_ne'):
              self.set_ne(obj_.value)
        elif nodeName_ == 'equiv':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'equiv', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_equiv'):
              self.add_equiv(obj_.value)
            elif hasattr(self, 'set_equiv'):
              self.set_equiv(obj_.value)
        elif nodeName_ == 'prop':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prop', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prop'):
              self.add_prop(obj_.value)
            elif hasattr(self, 'set_prop'):
              self.set_prop(obj_.value)
        elif nodeName_ == 'le':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'le', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_le'):
              self.add_le(obj_.value)
            elif hasattr(self, 'set_le'):
              self.set_le(obj_.value)
        elif nodeName_ == 'ge':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ge', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ge'):
              self.add_ge(obj_.value)
            elif hasattr(self, 'set_ge'):
              self.set_ge(obj_.value)
        elif nodeName_ == 'larr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'larr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_larr'):
              self.add_larr(obj_.value)
            elif hasattr(self, 'set_larr'):
              self.set_larr(obj_.value)
        elif nodeName_ == 'rarr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rarr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rarr'):
              self.add_rarr(obj_.value)
            elif hasattr(self, 'set_rarr'):
              self.set_rarr(obj_.value)
        elif nodeName_ == 'isin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'isin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_isin'):
              self.add_isin(obj_.value)
            elif hasattr(self, 'set_isin'):
              self.set_isin(obj_.value)
        elif nodeName_ == 'notin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'notin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_notin'):
              self.add_notin(obj_.value)
            elif hasattr(self, 'set_notin'):
              self.set_notin(obj_.value)
        elif nodeName_ == 'lceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lceil'):
              self.add_lceil(obj_.value)
            elif hasattr(self, 'set_lceil'):
              self.set_lceil(obj_.value)
        elif nodeName_ == 'rceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rceil'):
              self.add_rceil(obj_.value)
            elif hasattr(self, 'set_rceil'):
              self.set_rceil(obj_.value)
        elif nodeName_ == 'lfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lfloor'):
              self.add_lfloor(obj_.value)
            elif hasattr(self, 'set_lfloor'):
              self.set_lfloor(obj_.value)
        elif nodeName_ == 'rfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rfloor'):
              self.add_rfloor(obj_.value)
            elif hasattr(self, 'set_rfloor'):
              self.set_rfloor(obj_.value)
        elif nodeName_ == 'linebreak':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'linebreak', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_linebreak'):
              self.add_linebreak(obj_.value)
            elif hasattr(self, 'set_linebreak'):
              self.set_linebreak(obj_.value)
        elif nodeName_ == 'hruler':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'hruler', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_hruler'):
              self.add_hruler(obj_.value)
            elif hasattr(self, 'set_hruler'):
              self.set_hruler(obj_.value)
        elif nodeName_ == 'preformatted':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'preformatted', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_preformatted'):
              self.add_preformatted(obj_.value)
            elif hasattr(self, 'set_preformatted'):
              self.set_preformatted(obj_.value)
        elif nodeName_ == 'programlisting':
            obj_ = listingType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'programlisting', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_programlisting'):
              self.add_programlisting(obj_.value)
            elif hasattr(self, 'set_programlisting'):
              self.set_programlisting(obj_.value)
        elif nodeName_ == 'verbatim' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'verbatim', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'indexentry':
            obj_ = docIndexEntryType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'indexentry', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_indexentry'):
              self.add_indexentry(obj_.value)
            elif hasattr(self, 'set_indexentry'):
              self.set_indexentry(obj_.value)
        elif nodeName_ == 'orderedlist':
            obj_ = docListType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'orderedlist', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_orderedlist'):
              self.add_orderedlist(obj_.value)
            elif hasattr(self, 'set_orderedlist'):
              self.set_orderedlist(obj_.value)
        elif nodeName_ == 'itemizedlist':
            obj_ = docListType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'itemizedlist', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_itemizedlist'):
              self.add_itemizedlist(obj_.value)
            elif hasattr(self, 'set_itemizedlist'):
              self.set_itemizedlist(obj_.value)
        elif nodeName_ == 'simplesect':
            obj_ = docSimpleSectType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'simplesect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_simplesect'):
              self.add_simplesect(obj_.value)
            elif hasattr(self, 'set_simplesect'):
              self.set_simplesect(obj_.value)
        elif nodeName_ == 'title':
            obj_ = docTitleType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'title', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_title'):
              self.add_title(obj_.value)
            elif hasattr(self, 'set_title'):
              self.set_title(obj_.value)
        elif nodeName_ == 'variablelist':
            obj_ = docVariableListType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'variablelist', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_variablelist'):
              self.add_variablelist(obj_.value)
            elif hasattr(self, 'set_variablelist'):
              self.set_variablelist(obj_.value)
        elif nodeName_ == 'table':
            obj_ = docTableType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'table', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_table'):
              self.add_table(obj_.value)
            elif hasattr(self, 'set_table'):
              self.set_table(obj_.value)
        elif nodeName_ == 'heading':
            obj_ = docHeadingType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'heading', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_heading'):
              self.add_heading(obj_.value)
            elif hasattr(self, 'set_heading'):
              self.set_heading(obj_.value)
        elif nodeName_ == 'image':
            obj_ = docImageType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'image', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_image'):
              self.add_image(obj_.value)
            elif hasattr(self, 'set_image'):
              self.set_image(obj_.value)
        elif nodeName_ == 'dotfile':
            obj_ = docDotFileType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'dotfile', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_dotfile'):
              self.add_dotfile(obj_.value)
            elif hasattr(self, 'set_dotfile'):
              self.set_dotfile(obj_.value)
        elif nodeName_ == 'toclist':
            obj_ = docTocListType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'toclist', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_toclist'):
              self.add_toclist(obj_.value)
            elif hasattr(self, 'set_toclist'):
              self.set_toclist(obj_.value)
        elif nodeName_ == 'language':
            obj_ = docLanguageType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'language', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_language'):
              self.add_language(obj_.value)
            elif hasattr(self, 'set_language'):
              self.set_language(obj_.value)
        elif nodeName_ == 'parameterlist':
            obj_ = docParamListType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'parameterlist', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_parameterlist'):
              self.add_parameterlist(obj_.value)
            elif hasattr(self, 'set_parameterlist'):
              self.set_parameterlist(obj_.value)
        elif nodeName_ == 'xrefsect':
            obj_ = docXRefSectType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xrefsect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xrefsect'):
              self.add_xrefsect(obj_.value)
            elif hasattr(self, 'set_xrefsect'):
              self.set_xrefsect(obj_.value)
        elif nodeName_ == 'copydoc':
            obj_ = docCopyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copydoc', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copydoc'):
              self.add_copydoc(obj_.value)
            elif hasattr(self, 'set_copydoc'):
              self.set_copydoc(obj_.value)
        elif nodeName_ == 'blockquote':
            obj_ = docBlockQuoteType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'blockquote', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_blockquote'):
              self.add_blockquote(obj_.value)
            elif hasattr(self, 'set_blockquote'):
              self.set_blockquote(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docParaType


class docMarkupType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ulink=None, bold=None, emphasis=None, computeroutput=None, subscript=None, superscript=None, center=None, small=None, htmlonly=None, manonly=None, xmlonly=None, rtfonly=None, latexonly=None, dot=None, anchor=None, formula=None, ref=None, copy=None, trademark=None, registered=None, lsquo=None, rsquo=None, ldquo=None, rdquo=None, ndash=None, mdash=None, umlaut=None, acute=None, grave=None, circ=None, slash=None, tilde=None, cedil=None, ring=None, szlig=None, nonbreakablespace=None, aelig=None, AElig=None, Gamma=None, Delta=None, Theta=None, Lambda=None, Xi=None, Pi=None, Sigma=None, Upsilon=None, Phi=None, Psi=None, Omega=None, alpha=None, beta=None, gamma=None, delta=None, epsilon=None, zeta=None, eta=None, theta=None, iota=None, kappa=None, lambda_=None, mu=None, nu=None, xi=None, pi=None, rho=None, sigma=None, tau=None, upsilon=None, phi=None, chi=None, psi=None, omega=None, sigmaf=None, sect=None, deg=None, prime=None, Prime=None, infin=None, empty=None, plusmn=None, times=None, minus=None, sdot=None, part=None, nabla=None, radic=None, perp=None, sum=None, int=None, prod=None, sim=None, asymp=None, ne=None, equiv=None, prop=None, le=None, ge=None, larr=None, rarr=None, isin=None, notin=None, lceil=None, rceil=None, lfloor=None, rfloor=None, linebreak=None, hruler=None, preformatted=None, programlisting=None, verbatim=None, indexentry=None, orderedlist=None, itemizedlist=None, simplesect=None, title=None, variablelist=None, table=None, heading=None, image=None, dotfile=None, toclist=None, language=None, parameterlist=None, xrefsect=None, copydoc=None, blockquote=None, valueOf_=None, mixedclass_=None, content_=None):
        if ulink is None:
            self.ulink = []
        else:
            self.ulink = ulink
        if bold is None:
            self.bold = []
        else:
            self.bold = bold
        if emphasis is None:
            self.emphasis = []
        else:
            self.emphasis = emphasis
        if computeroutput is None:
            self.computeroutput = []
        else:
            self.computeroutput = computeroutput
        if subscript is None:
            self.subscript = []
        else:
            self.subscript = subscript
        if superscript is None:
            self.superscript = []
        else:
            self.superscript = superscript
        if center is None:
            self.center = []
        else:
            self.center = center
        if small is None:
            self.small = []
        else:
            self.small = small
        if htmlonly is None:
            self.htmlonly = []
        else:
            self.htmlonly = htmlonly
        if manonly is None:
            self.manonly = []
        else:
            self.manonly = manonly
        if xmlonly is None:
            self.xmlonly = []
        else:
            self.xmlonly = xmlonly
        if rtfonly is None:
            self.rtfonly = []
        else:
            self.rtfonly = rtfonly
        if latexonly is None:
            self.latexonly = []
        else:
            self.latexonly = latexonly
        if dot is None:
            self.dot = []
        else:
            self.dot = dot
        if anchor is None:
            self.anchor = []
        else:
            self.anchor = anchor
        if formula is None:
            self.formula = []
        else:
            self.formula = formula
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        if copy is None:
            self.copy = []
        else:
            self.copy = copy
        if trademark is None:
            self.trademark = []
        else:
            self.trademark = trademark
        if registered is None:
            self.registered = []
        else:
            self.registered = registered
        if lsquo is None:
            self.lsquo = []
        else:
            self.lsquo = lsquo
        if rsquo is None:
            self.rsquo = []
        else:
            self.rsquo = rsquo
        if ldquo is None:
            self.ldquo = []
        else:
            self.ldquo = ldquo
        if rdquo is None:
            self.rdquo = []
        else:
            self.rdquo = rdquo
        if ndash is None:
            self.ndash = []
        else:
            self.ndash = ndash
        if mdash is None:
            self.mdash = []
        else:
            self.mdash = mdash
        if umlaut is None:
            self.umlaut = []
        else:
            self.umlaut = umlaut
        if acute is None:
            self.acute = []
        else:
            self.acute = acute
        if grave is None:
            self.grave = []
        else:
            self.grave = grave
        if circ is None:
            self.circ = []
        else:
            self.circ = circ
        if slash is None:
            self.slash = []
        else:
            self.slash = slash
        if tilde is None:
            self.tilde = []
        else:
            self.tilde = tilde
        if cedil is None:
            self.cedil = []
        else:
            self.cedil = cedil
        if ring is None:
            self.ring = []
        else:
            self.ring = ring
        if szlig is None:
            self.szlig = []
        else:
            self.szlig = szlig
        if nonbreakablespace is None:
            self.nonbreakablespace = []
        else:
            self.nonbreakablespace = nonbreakablespace
        if aelig is None:
            self.aelig = []
        else:
            self.aelig = aelig
        if AElig is None:
            self.AElig = []
        else:
            self.AElig = AElig
        if Gamma is None:
            self.Gamma = []
        else:
            self.Gamma = Gamma
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Theta is None:
            self.Theta = []
        else:
            self.Theta = Theta
        if Lambda is None:
            self.Lambda = []
        else:
            self.Lambda = Lambda
        if Xi is None:
            self.Xi = []
        else:
            self.Xi = Xi
        if Pi is None:
            self.Pi = []
        else:
            self.Pi = Pi
        if Sigma is None:
            self.Sigma = []
        else:
            self.Sigma = Sigma
        if Upsilon is None:
            self.Upsilon = []
        else:
            self.Upsilon = Upsilon
        if Phi is None:
            self.Phi = []
        else:
            self.Phi = Phi
        if Psi is None:
            self.Psi = []
        else:
            self.Psi = Psi
        if Omega is None:
            self.Omega = []
        else:
            self.Omega = Omega
        if alpha is None:
            self.alpha = []
        else:
            self.alpha = alpha
        if beta is None:
            self.beta = []
        else:
            self.beta = beta
        if gamma is None:
            self.gamma = []
        else:
            self.gamma = gamma
        if delta is None:
            self.delta = []
        else:
            self.delta = delta
        if epsilon is None:
            self.epsilon = []
        else:
            self.epsilon = epsilon
        if zeta is None:
            self.zeta = []
        else:
            self.zeta = zeta
        if eta is None:
            self.eta = []
        else:
            self.eta = eta
        if theta is None:
            self.theta = []
        else:
            self.theta = theta
        if iota is None:
            self.iota = []
        else:
            self.iota = iota
        if kappa is None:
            self.kappa = []
        else:
            self.kappa = kappa
        if lambda_ is None:
            self.lambda_ = []
        else:
            self.lambda_ = lambda_
        if mu is None:
            self.mu = []
        else:
            self.mu = mu
        if nu is None:
            self.nu = []
        else:
            self.nu = nu
        if xi is None:
            self.xi = []
        else:
            self.xi = xi
        if pi is None:
            self.pi = []
        else:
            self.pi = pi
        if rho is None:
            self.rho = []
        else:
            self.rho = rho
        if sigma is None:
            self.sigma = []
        else:
            self.sigma = sigma
        if tau is None:
            self.tau = []
        else:
            self.tau = tau
        if upsilon is None:
            self.upsilon = []
        else:
            self.upsilon = upsilon
        if phi is None:
            self.phi = []
        else:
            self.phi = phi
        if chi is None:
            self.chi = []
        else:
            self.chi = chi
        if psi is None:
            self.psi = []
        else:
            self.psi = psi
        if omega is None:
            self.omega = []
        else:
            self.omega = omega
        if sigmaf is None:
            self.sigmaf = []
        else:
            self.sigmaf = sigmaf
        if sect is None:
            self.sect = []
        else:
            self.sect = sect
        if deg is None:
            self.deg = []
        else:
            self.deg = deg
        if prime is None:
            self.prime = []
        else:
            self.prime = prime
        if Prime is None:
            self.Prime = []
        else:
            self.Prime = Prime
        if infin is None:
            self.infin = []
        else:
            self.infin = infin
        if empty is None:
            self.empty = []
        else:
            self.empty = empty
        if plusmn is None:
            self.plusmn = []
        else:
            self.plusmn = plusmn
        if times is None:
            self.times = []
        else:
            self.times = times
        if minus is None:
            self.minus = []
        else:
            self.minus = minus
        if sdot is None:
            self.sdot = []
        else:
            self.sdot = sdot
        if part is None:
            self.part = []
        else:
            self.part = part
        if nabla is None:
            self.nabla = []
        else:
            self.nabla = nabla
        if radic is None:
            self.radic = []
        else:
            self.radic = radic
        if perp is None:
            self.perp = []
        else:
            self.perp = perp
        if sum is None:
            self.sum = []
        else:
            self.sum = sum
        if int is None:
            self.int = []
        else:
            self.int = int
        if prod is None:
            self.prod = []
        else:
            self.prod = prod
        if sim is None:
            self.sim = []
        else:
            self.sim = sim
        if asymp is None:
            self.asymp = []
        else:
            self.asymp = asymp
        if ne is None:
            self.ne = []
        else:
            self.ne = ne
        if equiv is None:
            self.equiv = []
        else:
            self.equiv = equiv
        if prop is None:
            self.prop = []
        else:
            self.prop = prop
        if le is None:
            self.le = []
        else:
            self.le = le
        if ge is None:
            self.ge = []
        else:
            self.ge = ge
        if larr is None:
            self.larr = []
        else:
            self.larr = larr
        if rarr is None:
            self.rarr = []
        else:
            self.rarr = rarr
        if isin is None:
            self.isin = []
        else:
            self.isin = isin
        if notin is None:
            self.notin = []
        else:
            self.notin = notin
        if lceil is None:
            self.lceil = []
        else:
            self.lceil = lceil
        if rceil is None:
            self.rceil = []
        else:
            self.rceil = rceil
        if lfloor is None:
            self.lfloor = []
        else:
            self.lfloor = lfloor
        if rfloor is None:
            self.rfloor = []
        else:
            self.rfloor = rfloor
        if linebreak is None:
            self.linebreak = []
        else:
            self.linebreak = linebreak
        if hruler is None:
            self.hruler = []
        else:
            self.hruler = hruler
        if preformatted is None:
            self.preformatted = []
        else:
            self.preformatted = preformatted
        if programlisting is None:
            self.programlisting = []
        else:
            self.programlisting = programlisting
        if verbatim is None:
            self.verbatim = []
        else:
            self.verbatim = verbatim
        if indexentry is None:
            self.indexentry = []
        else:
            self.indexentry = indexentry
        if orderedlist is None:
            self.orderedlist = []
        else:
            self.orderedlist = orderedlist
        if itemizedlist is None:
            self.itemizedlist = []
        else:
            self.itemizedlist = itemizedlist
        if simplesect is None:
            self.simplesect = []
        else:
            self.simplesect = simplesect
        if title is None:
            self.title = []
        else:
            self.title = title
        if variablelist is None:
            self.variablelist = []
        else:
            self.variablelist = variablelist
        if table is None:
            self.table = []
        else:
            self.table = table
        if heading is None:
            self.heading = []
        else:
            self.heading = heading
        if image is None:
            self.image = []
        else:
            self.image = image
        if dotfile is None:
            self.dotfile = []
        else:
            self.dotfile = dotfile
        if toclist is None:
            self.toclist = []
        else:
            self.toclist = toclist
        if language is None:
            self.language = []
        else:
            self.language = language
        if parameterlist is None:
            self.parameterlist = []
        else:
            self.parameterlist = parameterlist
        if xrefsect is None:
            self.xrefsect = []
        else:
            self.xrefsect = xrefsect
        if copydoc is None:
            self.copydoc = []
        else:
            self.copydoc = copydoc
        if blockquote is None:
            self.blockquote = []
        else:
            self.blockquote = blockquote
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docMarkupType.subclass:
            return docMarkupType.subclass(*args_, **kwargs_)
        else:
            return docMarkupType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ulink(self): return self.ulink
    def set_ulink(self, ulink): self.ulink = ulink
    def add_ulink(self, value): self.ulink.append(value)
    def insert_ulink(self, index, value): self.ulink[index] = value
    def get_bold(self): return self.bold
    def set_bold(self, bold): self.bold = bold
    def add_bold(self, value): self.bold.append(value)
    def insert_bold(self, index, value): self.bold[index] = value
    def get_emphasis(self): return self.emphasis
    def set_emphasis(self, emphasis): self.emphasis = emphasis
    def add_emphasis(self, value): self.emphasis.append(value)
    def insert_emphasis(self, index, value): self.emphasis[index] = value
    def get_computeroutput(self): return self.computeroutput
    def set_computeroutput(self, computeroutput): self.computeroutput = computeroutput
    def add_computeroutput(self, value): self.computeroutput.append(value)
    def insert_computeroutput(self, index, value): self.computeroutput[index] = value
    def get_subscript(self): return self.subscript
    def set_subscript(self, subscript): self.subscript = subscript
    def add_subscript(self, value): self.subscript.append(value)
    def insert_subscript(self, index, value): self.subscript[index] = value
    def get_superscript(self): return self.superscript
    def set_superscript(self, superscript): self.superscript = superscript
    def add_superscript(self, value): self.superscript.append(value)
    def insert_superscript(self, index, value): self.superscript[index] = value
    def get_center(self): return self.center
    def set_center(self, center): self.center = center
    def add_center(self, value): self.center.append(value)
    def insert_center(self, index, value): self.center[index] = value
    def get_small(self): return self.small
    def set_small(self, small): self.small = small
    def add_small(self, value): self.small.append(value)
    def insert_small(self, index, value): self.small[index] = value
    def get_htmlonly(self): return self.htmlonly
    def set_htmlonly(self, htmlonly): self.htmlonly = htmlonly
    def add_htmlonly(self, value): self.htmlonly.append(value)
    def insert_htmlonly(self, index, value): self.htmlonly[index] = value
    def get_manonly(self): return self.manonly
    def set_manonly(self, manonly): self.manonly = manonly
    def add_manonly(self, value): self.manonly.append(value)
    def insert_manonly(self, index, value): self.manonly[index] = value
    def get_xmlonly(self): return self.xmlonly
    def set_xmlonly(self, xmlonly): self.xmlonly = xmlonly
    def add_xmlonly(self, value): self.xmlonly.append(value)
    def insert_xmlonly(self, index, value): self.xmlonly[index] = value
    def get_rtfonly(self): return self.rtfonly
    def set_rtfonly(self, rtfonly): self.rtfonly = rtfonly
    def add_rtfonly(self, value): self.rtfonly.append(value)
    def insert_rtfonly(self, index, value): self.rtfonly[index] = value
    def get_latexonly(self): return self.latexonly
    def set_latexonly(self, latexonly): self.latexonly = latexonly
    def add_latexonly(self, value): self.latexonly.append(value)
    def insert_latexonly(self, index, value): self.latexonly[index] = value
    def get_dot(self): return self.dot
    def set_dot(self, dot): self.dot = dot
    def add_dot(self, value): self.dot.append(value)
    def insert_dot(self, index, value): self.dot[index] = value
    def get_anchor(self): return self.anchor
    def set_anchor(self, anchor): self.anchor = anchor
    def add_anchor(self, value): self.anchor.append(value)
    def insert_anchor(self, index, value): self.anchor[index] = value
    def get_formula(self): return self.formula
    def set_formula(self, formula): self.formula = formula
    def add_formula(self, value): self.formula.append(value)
    def insert_formula(self, index, value): self.formula[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_copy(self): return self.copy
    def set_copy(self, copy): self.copy = copy
    def add_copy(self, value): self.copy.append(value)
    def insert_copy(self, index, value): self.copy[index] = value
    def get_trademark(self): return self.trademark
    def set_trademark(self, trademark): self.trademark = trademark
    def add_trademark(self, value): self.trademark.append(value)
    def insert_trademark(self, index, value): self.trademark[index] = value
    def get_registered(self): return self.registered
    def set_registered(self, registered): self.registered = registered
    def add_registered(self, value): self.registered.append(value)
    def insert_registered(self, index, value): self.registered[index] = value
    def get_lsquo(self): return self.lsquo
    def set_lsquo(self, lsquo): self.lsquo = lsquo
    def add_lsquo(self, value): self.lsquo.append(value)
    def insert_lsquo(self, index, value): self.lsquo[index] = value
    def get_rsquo(self): return self.rsquo
    def set_rsquo(self, rsquo): self.rsquo = rsquo
    def add_rsquo(self, value): self.rsquo.append(value)
    def insert_rsquo(self, index, value): self.rsquo[index] = value
    def get_ldquo(self): return self.ldquo
    def set_ldquo(self, ldquo): self.ldquo = ldquo
    def add_ldquo(self, value): self.ldquo.append(value)
    def insert_ldquo(self, index, value): self.ldquo[index] = value
    def get_rdquo(self): return self.rdquo
    def set_rdquo(self, rdquo): self.rdquo = rdquo
    def add_rdquo(self, value): self.rdquo.append(value)
    def insert_rdquo(self, index, value): self.rdquo[index] = value
    def get_ndash(self): return self.ndash
    def set_ndash(self, ndash): self.ndash = ndash
    def add_ndash(self, value): self.ndash.append(value)
    def insert_ndash(self, index, value): self.ndash[index] = value
    def get_mdash(self): return self.mdash
    def set_mdash(self, mdash): self.mdash = mdash
    def add_mdash(self, value): self.mdash.append(value)
    def insert_mdash(self, index, value): self.mdash[index] = value
    def get_umlaut(self): return self.umlaut
    def set_umlaut(self, umlaut): self.umlaut = umlaut
    def add_umlaut(self, value): self.umlaut.append(value)
    def insert_umlaut(self, index, value): self.umlaut[index] = value
    def get_acute(self): return self.acute
    def set_acute(self, acute): self.acute = acute
    def add_acute(self, value): self.acute.append(value)
    def insert_acute(self, index, value): self.acute[index] = value
    def get_grave(self): return self.grave
    def set_grave(self, grave): self.grave = grave
    def add_grave(self, value): self.grave.append(value)
    def insert_grave(self, index, value): self.grave[index] = value
    def get_circ(self): return self.circ
    def set_circ(self, circ): self.circ = circ
    def add_circ(self, value): self.circ.append(value)
    def insert_circ(self, index, value): self.circ[index] = value
    def get_slash(self): return self.slash
    def set_slash(self, slash): self.slash = slash
    def add_slash(self, value): self.slash.append(value)
    def insert_slash(self, index, value): self.slash[index] = value
    def get_tilde(self): return self.tilde
    def set_tilde(self, tilde): self.tilde = tilde
    def add_tilde(self, value): self.tilde.append(value)
    def insert_tilde(self, index, value): self.tilde[index] = value
    def get_cedil(self): return self.cedil
    def set_cedil(self, cedil): self.cedil = cedil
    def add_cedil(self, value): self.cedil.append(value)
    def insert_cedil(self, index, value): self.cedil[index] = value
    def get_ring(self): return self.ring
    def set_ring(self, ring): self.ring = ring
    def add_ring(self, value): self.ring.append(value)
    def insert_ring(self, index, value): self.ring[index] = value
    def get_szlig(self): return self.szlig
    def set_szlig(self, szlig): self.szlig = szlig
    def add_szlig(self, value): self.szlig.append(value)
    def insert_szlig(self, index, value): self.szlig[index] = value
    def get_nonbreakablespace(self): return self.nonbreakablespace
    def set_nonbreakablespace(self, nonbreakablespace): self.nonbreakablespace = nonbreakablespace
    def add_nonbreakablespace(self, value): self.nonbreakablespace.append(value)
    def insert_nonbreakablespace(self, index, value): self.nonbreakablespace[index] = value
    def get_aelig(self): return self.aelig
    def set_aelig(self, aelig): self.aelig = aelig
    def add_aelig(self, value): self.aelig.append(value)
    def insert_aelig(self, index, value): self.aelig[index] = value
    def get_AElig(self): return self.AElig
    def set_AElig(self, AElig): self.AElig = AElig
    def add_AElig(self, value): self.AElig.append(value)
    def insert_AElig(self, index, value): self.AElig[index] = value
    def get_Gamma(self): return self.Gamma
    def set_Gamma(self, Gamma): self.Gamma = Gamma
    def add_Gamma(self, value): self.Gamma.append(value)
    def insert_Gamma(self, index, value): self.Gamma[index] = value
    def get_Delta(self): return self.Delta
    def set_Delta(self, Delta): self.Delta = Delta
    def add_Delta(self, value): self.Delta.append(value)
    def insert_Delta(self, index, value): self.Delta[index] = value
    def get_Theta(self): return self.Theta
    def set_Theta(self, Theta): self.Theta = Theta
    def add_Theta(self, value): self.Theta.append(value)
    def insert_Theta(self, index, value): self.Theta[index] = value
    def get_Lambda(self): return self.Lambda
    def set_Lambda(self, Lambda): self.Lambda = Lambda
    def add_Lambda(self, value): self.Lambda.append(value)
    def insert_Lambda(self, index, value): self.Lambda[index] = value
    def get_Xi(self): return self.Xi
    def set_Xi(self, Xi): self.Xi = Xi
    def add_Xi(self, value): self.Xi.append(value)
    def insert_Xi(self, index, value): self.Xi[index] = value
    def get_Pi(self): return self.Pi
    def set_Pi(self, Pi): self.Pi = Pi
    def add_Pi(self, value): self.Pi.append(value)
    def insert_Pi(self, index, value): self.Pi[index] = value
    def get_Sigma(self): return self.Sigma
    def set_Sigma(self, Sigma): self.Sigma = Sigma
    def add_Sigma(self, value): self.Sigma.append(value)
    def insert_Sigma(self, index, value): self.Sigma[index] = value
    def get_Upsilon(self): return self.Upsilon
    def set_Upsilon(self, Upsilon): self.Upsilon = Upsilon
    def add_Upsilon(self, value): self.Upsilon.append(value)
    def insert_Upsilon(self, index, value): self.Upsilon[index] = value
    def get_Phi(self): return self.Phi
    def set_Phi(self, Phi): self.Phi = Phi
    def add_Phi(self, value): self.Phi.append(value)
    def insert_Phi(self, index, value): self.Phi[index] = value
    def get_Psi(self): return self.Psi
    def set_Psi(self, Psi): self.Psi = Psi
    def add_Psi(self, value): self.Psi.append(value)
    def insert_Psi(self, index, value): self.Psi[index] = value
    def get_Omega(self): return self.Omega
    def set_Omega(self, Omega): self.Omega = Omega
    def add_Omega(self, value): self.Omega.append(value)
    def insert_Omega(self, index, value): self.Omega[index] = value
    def get_alpha(self): return self.alpha
    def set_alpha(self, alpha): self.alpha = alpha
    def add_alpha(self, value): self.alpha.append(value)
    def insert_alpha(self, index, value): self.alpha[index] = value
    def get_beta(self): return self.beta
    def set_beta(self, beta): self.beta = beta
    def add_beta(self, value): self.beta.append(value)
    def insert_beta(self, index, value): self.beta[index] = value
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def add_gamma(self, value): self.gamma.append(value)
    def insert_gamma(self, index, value): self.gamma[index] = value
    def get_delta(self): return self.delta
    def set_delta(self, delta): self.delta = delta
    def add_delta(self, value): self.delta.append(value)
    def insert_delta(self, index, value): self.delta[index] = value
    def get_epsilon(self): return self.epsilon
    def set_epsilon(self, epsilon): self.epsilon = epsilon
    def add_epsilon(self, value): self.epsilon.append(value)
    def insert_epsilon(self, index, value): self.epsilon[index] = value
    def get_zeta(self): return self.zeta
    def set_zeta(self, zeta): self.zeta = zeta
    def add_zeta(self, value): self.zeta.append(value)
    def insert_zeta(self, index, value): self.zeta[index] = value
    def get_eta(self): return self.eta
    def set_eta(self, eta): self.eta = eta
    def add_eta(self, value): self.eta.append(value)
    def insert_eta(self, index, value): self.eta[index] = value
    def get_theta(self): return self.theta
    def set_theta(self, theta): self.theta = theta
    def add_theta(self, value): self.theta.append(value)
    def insert_theta(self, index, value): self.theta[index] = value
    def get_iota(self): return self.iota
    def set_iota(self, iota): self.iota = iota
    def add_iota(self, value): self.iota.append(value)
    def insert_iota(self, index, value): self.iota[index] = value
    def get_kappa(self): return self.kappa
    def set_kappa(self, kappa): self.kappa = kappa
    def add_kappa(self, value): self.kappa.append(value)
    def insert_kappa(self, index, value): self.kappa[index] = value
    def get_lambda(self): return self.lambda_
    def set_lambda(self, lambda_): self.lambda_ = lambda_
    def add_lambda(self, value): self.lambda_.append(value)
    def insert_lambda(self, index, value): self.lambda_[index] = value
    def get_mu(self): return self.mu
    def set_mu(self, mu): self.mu = mu
    def add_mu(self, value): self.mu.append(value)
    def insert_mu(self, index, value): self.mu[index] = value
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def add_nu(self, value): self.nu.append(value)
    def insert_nu(self, index, value): self.nu[index] = value
    def get_xi(self): return self.xi
    def set_xi(self, xi): self.xi = xi
    def add_xi(self, value): self.xi.append(value)
    def insert_xi(self, index, value): self.xi[index] = value
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def add_pi(self, value): self.pi.append(value)
    def insert_pi(self, index, value): self.pi[index] = value
    def get_rho(self): return self.rho
    def set_rho(self, rho): self.rho = rho
    def add_rho(self, value): self.rho.append(value)
    def insert_rho(self, index, value): self.rho[index] = value
    def get_sigma(self): return self.sigma
    def set_sigma(self, sigma): self.sigma = sigma
    def add_sigma(self, value): self.sigma.append(value)
    def insert_sigma(self, index, value): self.sigma[index] = value
    def get_tau(self): return self.tau
    def set_tau(self, tau): self.tau = tau
    def add_tau(self, value): self.tau.append(value)
    def insert_tau(self, index, value): self.tau[index] = value
    def get_upsilon(self): return self.upsilon
    def set_upsilon(self, upsilon): self.upsilon = upsilon
    def add_upsilon(self, value): self.upsilon.append(value)
    def insert_upsilon(self, index, value): self.upsilon[index] = value
    def get_phi(self): return self.phi
    def set_phi(self, phi): self.phi = phi
    def add_phi(self, value): self.phi.append(value)
    def insert_phi(self, index, value): self.phi[index] = value
    def get_chi(self): return self.chi
    def set_chi(self, chi): self.chi = chi
    def add_chi(self, value): self.chi.append(value)
    def insert_chi(self, index, value): self.chi[index] = value
    def get_psi(self): return self.psi
    def set_psi(self, psi): self.psi = psi
    def add_psi(self, value): self.psi.append(value)
    def insert_psi(self, index, value): self.psi[index] = value
    def get_omega(self): return self.omega
    def set_omega(self, omega): self.omega = omega
    def add_omega(self, value): self.omega.append(value)
    def insert_omega(self, index, value): self.omega[index] = value
    def get_sigmaf(self): return self.sigmaf
    def set_sigmaf(self, sigmaf): self.sigmaf = sigmaf
    def add_sigmaf(self, value): self.sigmaf.append(value)
    def insert_sigmaf(self, index, value): self.sigmaf[index] = value
    def get_sect(self): return self.sect
    def set_sect(self, sect): self.sect = sect
    def add_sect(self, value): self.sect.append(value)
    def insert_sect(self, index, value): self.sect[index] = value
    def get_deg(self): return self.deg
    def set_deg(self, deg): self.deg = deg
    def add_deg(self, value): self.deg.append(value)
    def insert_deg(self, index, value): self.deg[index] = value
    def get_prime(self): return self.prime
    def set_prime(self, prime): self.prime = prime
    def add_prime(self, value): self.prime.append(value)
    def insert_prime(self, index, value): self.prime[index] = value
    def get_Prime(self): return self.Prime
    def set_Prime(self, Prime): self.Prime = Prime
    def add_Prime(self, value): self.Prime.append(value)
    def insert_Prime(self, index, value): self.Prime[index] = value
    def get_infin(self): return self.infin
    def set_infin(self, infin): self.infin = infin
    def add_infin(self, value): self.infin.append(value)
    def insert_infin(self, index, value): self.infin[index] = value
    def get_empty(self): return self.empty
    def set_empty(self, empty): self.empty = empty
    def add_empty(self, value): self.empty.append(value)
    def insert_empty(self, index, value): self.empty[index] = value
    def get_plusmn(self): return self.plusmn
    def set_plusmn(self, plusmn): self.plusmn = plusmn
    def add_plusmn(self, value): self.plusmn.append(value)
    def insert_plusmn(self, index, value): self.plusmn[index] = value
    def get_times(self): return self.times
    def set_times(self, times): self.times = times
    def add_times(self, value): self.times.append(value)
    def insert_times(self, index, value): self.times[index] = value
    def get_minus(self): return self.minus
    def set_minus(self, minus): self.minus = minus
    def add_minus(self, value): self.minus.append(value)
    def insert_minus(self, index, value): self.minus[index] = value
    def get_sdot(self): return self.sdot
    def set_sdot(self, sdot): self.sdot = sdot
    def add_sdot(self, value): self.sdot.append(value)
    def insert_sdot(self, index, value): self.sdot[index] = value
    def get_part(self): return self.part
    def set_part(self, part): self.part = part
    def add_part(self, value): self.part.append(value)
    def insert_part(self, index, value): self.part[index] = value
    def get_nabla(self): return self.nabla
    def set_nabla(self, nabla): self.nabla = nabla
    def add_nabla(self, value): self.nabla.append(value)
    def insert_nabla(self, index, value): self.nabla[index] = value
    def get_radic(self): return self.radic
    def set_radic(self, radic): self.radic = radic
    def add_radic(self, value): self.radic.append(value)
    def insert_radic(self, index, value): self.radic[index] = value
    def get_perp(self): return self.perp
    def set_perp(self, perp): self.perp = perp
    def add_perp(self, value): self.perp.append(value)
    def insert_perp(self, index, value): self.perp[index] = value
    def get_sum(self): return self.sum
    def set_sum(self, sum): self.sum = sum
    def add_sum(self, value): self.sum.append(value)
    def insert_sum(self, index, value): self.sum[index] = value
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def add_int(self, value): self.int.append(value)
    def insert_int(self, index, value): self.int[index] = value
    def get_prod(self): return self.prod
    def set_prod(self, prod): self.prod = prod
    def add_prod(self, value): self.prod.append(value)
    def insert_prod(self, index, value): self.prod[index] = value
    def get_sim(self): return self.sim
    def set_sim(self, sim): self.sim = sim
    def add_sim(self, value): self.sim.append(value)
    def insert_sim(self, index, value): self.sim[index] = value
    def get_asymp(self): return self.asymp
    def set_asymp(self, asymp): self.asymp = asymp
    def add_asymp(self, value): self.asymp.append(value)
    def insert_asymp(self, index, value): self.asymp[index] = value
    def get_ne(self): return self.ne
    def set_ne(self, ne): self.ne = ne
    def add_ne(self, value): self.ne.append(value)
    def insert_ne(self, index, value): self.ne[index] = value
    def get_equiv(self): return self.equiv
    def set_equiv(self, equiv): self.equiv = equiv
    def add_equiv(self, value): self.equiv.append(value)
    def insert_equiv(self, index, value): self.equiv[index] = value
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def add_prop(self, value): self.prop.append(value)
    def insert_prop(self, index, value): self.prop[index] = value
    def get_le(self): return self.le
    def set_le(self, le): self.le = le
    def add_le(self, value): self.le.append(value)
    def insert_le(self, index, value): self.le[index] = value
    def get_ge(self): return self.ge
    def set_ge(self, ge): self.ge = ge
    def add_ge(self, value): self.ge.append(value)
    def insert_ge(self, index, value): self.ge[index] = value
    def get_larr(self): return self.larr
    def set_larr(self, larr): self.larr = larr
    def add_larr(self, value): self.larr.append(value)
    def insert_larr(self, index, value): self.larr[index] = value
    def get_rarr(self): return self.rarr
    def set_rarr(self, rarr): self.rarr = rarr
    def add_rarr(self, value): self.rarr.append(value)
    def insert_rarr(self, index, value): self.rarr[index] = value
    def get_isin(self): return self.isin
    def set_isin(self, isin): self.isin = isin
    def add_isin(self, value): self.isin.append(value)
    def insert_isin(self, index, value): self.isin[index] = value
    def get_notin(self): return self.notin
    def set_notin(self, notin): self.notin = notin
    def add_notin(self, value): self.notin.append(value)
    def insert_notin(self, index, value): self.notin[index] = value
    def get_lceil(self): return self.lceil
    def set_lceil(self, lceil): self.lceil = lceil
    def add_lceil(self, value): self.lceil.append(value)
    def insert_lceil(self, index, value): self.lceil[index] = value
    def get_rceil(self): return self.rceil
    def set_rceil(self, rceil): self.rceil = rceil
    def add_rceil(self, value): self.rceil.append(value)
    def insert_rceil(self, index, value): self.rceil[index] = value
    def get_lfloor(self): return self.lfloor
    def set_lfloor(self, lfloor): self.lfloor = lfloor
    def add_lfloor(self, value): self.lfloor.append(value)
    def insert_lfloor(self, index, value): self.lfloor[index] = value
    def get_rfloor(self): return self.rfloor
    def set_rfloor(self, rfloor): self.rfloor = rfloor
    def add_rfloor(self, value): self.rfloor.append(value)
    def insert_rfloor(self, index, value): self.rfloor[index] = value
    def get_linebreak(self): return self.linebreak
    def set_linebreak(self, linebreak): self.linebreak = linebreak
    def add_linebreak(self, value): self.linebreak.append(value)
    def insert_linebreak(self, index, value): self.linebreak[index] = value
    def get_hruler(self): return self.hruler
    def set_hruler(self, hruler): self.hruler = hruler
    def add_hruler(self, value): self.hruler.append(value)
    def insert_hruler(self, index, value): self.hruler[index] = value
    def get_preformatted(self): return self.preformatted
    def set_preformatted(self, preformatted): self.preformatted = preformatted
    def add_preformatted(self, value): self.preformatted.append(value)
    def insert_preformatted(self, index, value): self.preformatted[index] = value
    def get_programlisting(self): return self.programlisting
    def set_programlisting(self, programlisting): self.programlisting = programlisting
    def add_programlisting(self, value): self.programlisting.append(value)
    def insert_programlisting(self, index, value): self.programlisting[index] = value
    def get_verbatim(self): return self.verbatim
    def set_verbatim(self, verbatim): self.verbatim = verbatim
    def add_verbatim(self, value): self.verbatim.append(value)
    def insert_verbatim(self, index, value): self.verbatim[index] = value
    def get_indexentry(self): return self.indexentry
    def set_indexentry(self, indexentry): self.indexentry = indexentry
    def add_indexentry(self, value): self.indexentry.append(value)
    def insert_indexentry(self, index, value): self.indexentry[index] = value
    def get_orderedlist(self): return self.orderedlist
    def set_orderedlist(self, orderedlist): self.orderedlist = orderedlist
    def add_orderedlist(self, value): self.orderedlist.append(value)
    def insert_orderedlist(self, index, value): self.orderedlist[index] = value
    def get_itemizedlist(self): return self.itemizedlist
    def set_itemizedlist(self, itemizedlist): self.itemizedlist = itemizedlist
    def add_itemizedlist(self, value): self.itemizedlist.append(value)
    def insert_itemizedlist(self, index, value): self.itemizedlist[index] = value
    def get_simplesect(self): return self.simplesect
    def set_simplesect(self, simplesect): self.simplesect = simplesect
    def add_simplesect(self, value): self.simplesect.append(value)
    def insert_simplesect(self, index, value): self.simplesect[index] = value
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def add_title(self, value): self.title.append(value)
    def insert_title(self, index, value): self.title[index] = value
    def get_variablelist(self): return self.variablelist
    def set_variablelist(self, variablelist): self.variablelist = variablelist
    def add_variablelist(self, value): self.variablelist.append(value)
    def insert_variablelist(self, index, value): self.variablelist[index] = value
    def get_table(self): return self.table
    def set_table(self, table): self.table = table
    def add_table(self, value): self.table.append(value)
    def insert_table(self, index, value): self.table[index] = value
    def get_heading(self): return self.heading
    def set_heading(self, heading): self.heading = heading
    def add_heading(self, value): self.heading.append(value)
    def insert_heading(self, index, value): self.heading[index] = value
    def get_image(self): return self.image
    def set_image(self, image): self.image = image
    def add_image(self, value): self.image.append(value)
    def insert_image(self, index, value): self.image[index] = value
    def get_dotfile(self): return self.dotfile
    def set_dotfile(self, dotfile): self.dotfile = dotfile
    def add_dotfile(self, value): self.dotfile.append(value)
    def insert_dotfile(self, index, value): self.dotfile[index] = value
    def get_toclist(self): return self.toclist
    def set_toclist(self, toclist): self.toclist = toclist
    def add_toclist(self, value): self.toclist.append(value)
    def insert_toclist(self, index, value): self.toclist[index] = value
    def get_language(self): return self.language
    def set_language(self, language): self.language = language
    def add_language(self, value): self.language.append(value)
    def insert_language(self, index, value): self.language[index] = value
    def get_parameterlist(self): return self.parameterlist
    def set_parameterlist(self, parameterlist): self.parameterlist = parameterlist
    def add_parameterlist(self, value): self.parameterlist.append(value)
    def insert_parameterlist(self, index, value): self.parameterlist[index] = value
    def get_xrefsect(self): return self.xrefsect
    def set_xrefsect(self, xrefsect): self.xrefsect = xrefsect
    def add_xrefsect(self, value): self.xrefsect.append(value)
    def insert_xrefsect(self, index, value): self.xrefsect[index] = value
    def get_copydoc(self): return self.copydoc
    def set_copydoc(self, copydoc): self.copydoc = copydoc
    def add_copydoc(self, value): self.copydoc.append(value)
    def insert_copydoc(self, index, value): self.copydoc[index] = value
    def get_blockquote(self): return self.blockquote
    def set_blockquote(self, blockquote): self.blockquote = blockquote
    def add_blockquote(self, value): self.blockquote.append(value)
    def insert_blockquote(self, index, value): self.blockquote[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ulink or
            self.bold or
            self.emphasis or
            self.computeroutput or
            self.subscript or
            self.superscript or
            self.center or
            self.small or
            self.htmlonly or
            self.manonly or
            self.xmlonly or
            self.rtfonly or
            self.latexonly or
            self.dot or
            self.anchor or
            self.formula or
            self.ref or
            self.copy or
            self.trademark or
            self.registered or
            self.lsquo or
            self.rsquo or
            self.ldquo or
            self.rdquo or
            self.ndash or
            self.mdash or
            self.umlaut or
            self.acute or
            self.grave or
            self.circ or
            self.slash or
            self.tilde or
            self.cedil or
            self.ring or
            self.szlig or
            self.nonbreakablespace or
            self.aelig or
            self.AElig or
            self.Gamma or
            self.Delta or
            self.Theta or
            self.Lambda or
            self.Xi or
            self.Pi or
            self.Sigma or
            self.Upsilon or
            self.Phi or
            self.Psi or
            self.Omega or
            self.alpha or
            self.beta or
            self.gamma or
            self.delta or
            self.epsilon or
            self.zeta or
            self.eta or
            self.theta or
            self.iota or
            self.kappa or
            self.lambda_ or
            self.mu or
            self.nu or
            self.xi or
            self.pi or
            self.rho or
            self.sigma or
            self.tau or
            self.upsilon or
            self.phi or
            self.chi or
            self.psi or
            self.omega or
            self.sigmaf or
            self.sect or
            self.deg or
            self.prime or
            self.Prime or
            self.infin or
            self.empty or
            self.plusmn or
            self.times or
            self.minus or
            self.sdot or
            self.part or
            self.nabla or
            self.radic or
            self.perp or
            self.sum or
            self.int or
            self.prod or
            self.sim or
            self.asymp or
            self.ne or
            self.equiv or
            self.prop or
            self.le or
            self.ge or
            self.larr or
            self.rarr or
            self.isin or
            self.notin or
            self.lceil or
            self.rceil or
            self.lfloor or
            self.rfloor or
            self.linebreak or
            self.hruler or
            self.preformatted or
            self.programlisting or
            self.verbatim or
            self.indexentry or
            self.orderedlist or
            self.itemizedlist or
            self.simplesect or
            self.title or
            self.variablelist or
            self.table or
            self.heading or
            self.image or
            self.dotfile or
            self.toclist or
            self.language or
            self.parameterlist or
            self.xrefsect or
            self.copydoc or
            self.blockquote or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docMarkupType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docMarkupType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docMarkupType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docMarkupType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docMarkupType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ulink':
            obj_ = docURLLink.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ulink', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ulink'):
              self.add_ulink(obj_.value)
            elif hasattr(self, 'set_ulink'):
              self.set_ulink(obj_.value)
        elif nodeName_ == 'bold':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'bold', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_bold'):
              self.add_bold(obj_.value)
            elif hasattr(self, 'set_bold'):
              self.set_bold(obj_.value)
        elif nodeName_ == 'emphasis':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'emphasis', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_emphasis'):
              self.add_emphasis(obj_.value)
            elif hasattr(self, 'set_emphasis'):
              self.set_emphasis(obj_.value)
        elif nodeName_ == 'computeroutput':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'computeroutput', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_computeroutput'):
              self.add_computeroutput(obj_.value)
            elif hasattr(self, 'set_computeroutput'):
              self.set_computeroutput(obj_.value)
        elif nodeName_ == 'subscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'subscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_subscript'):
              self.add_subscript(obj_.value)
            elif hasattr(self, 'set_subscript'):
              self.set_subscript(obj_.value)
        elif nodeName_ == 'superscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'superscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_superscript'):
              self.add_superscript(obj_.value)
            elif hasattr(self, 'set_superscript'):
              self.set_superscript(obj_.value)
        elif nodeName_ == 'center':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'center', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_center'):
              self.add_center(obj_.value)
            elif hasattr(self, 'set_center'):
              self.set_center(obj_.value)
        elif nodeName_ == 'small':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'small', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_small'):
              self.add_small(obj_.value)
            elif hasattr(self, 'set_small'):
              self.set_small(obj_.value)
        elif nodeName_ == 'htmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'htmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'manonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'manonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'xmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'xmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'rtfonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'rtfonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'latexonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'latexonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'dot' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'dot', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'anchor':
            obj_ = docAnchorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'anchor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_anchor'):
              self.add_anchor(obj_.value)
            elif hasattr(self, 'set_anchor'):
              self.set_anchor(obj_.value)
        elif nodeName_ == 'formula':
            obj_ = docFormulaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'formula', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_formula'):
              self.add_formula(obj_.value)
            elif hasattr(self, 'set_formula'):
              self.set_formula(obj_.value)
        elif nodeName_ == 'ref':
            obj_ = docRefTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        elif nodeName_ == 'copy':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copy', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copy'):
              self.add_copy(obj_.value)
            elif hasattr(self, 'set_copy'):
              self.set_copy(obj_.value)
        elif nodeName_ == 'trademark':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'trademark', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_trademark'):
              self.add_trademark(obj_.value)
            elif hasattr(self, 'set_trademark'):
              self.set_trademark(obj_.value)
        elif nodeName_ == 'registered':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'registered', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_registered'):
              self.add_registered(obj_.value)
            elif hasattr(self, 'set_registered'):
              self.set_registered(obj_.value)
        elif nodeName_ == 'lsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lsquo'):
              self.add_lsquo(obj_.value)
            elif hasattr(self, 'set_lsquo'):
              self.set_lsquo(obj_.value)
        elif nodeName_ == 'rsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rsquo'):
              self.add_rsquo(obj_.value)
            elif hasattr(self, 'set_rsquo'):
              self.set_rsquo(obj_.value)
        elif nodeName_ == 'ldquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ldquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ldquo'):
              self.add_ldquo(obj_.value)
            elif hasattr(self, 'set_ldquo'):
              self.set_ldquo(obj_.value)
        elif nodeName_ == 'rdquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rdquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rdquo'):
              self.add_rdquo(obj_.value)
            elif hasattr(self, 'set_rdquo'):
              self.set_rdquo(obj_.value)
        elif nodeName_ == 'ndash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ndash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ndash'):
              self.add_ndash(obj_.value)
            elif hasattr(self, 'set_ndash'):
              self.set_ndash(obj_.value)
        elif nodeName_ == 'mdash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mdash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mdash'):
              self.add_mdash(obj_.value)
            elif hasattr(self, 'set_mdash'):
              self.set_mdash(obj_.value)
        elif nodeName_ == 'umlaut':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'umlaut', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_umlaut'):
              self.add_umlaut(obj_.value)
            elif hasattr(self, 'set_umlaut'):
              self.set_umlaut(obj_.value)
        elif nodeName_ == 'acute':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'acute', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_acute'):
              self.add_acute(obj_.value)
            elif hasattr(self, 'set_acute'):
              self.set_acute(obj_.value)
        elif nodeName_ == 'grave':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'grave', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_grave'):
              self.add_grave(obj_.value)
            elif hasattr(self, 'set_grave'):
              self.set_grave(obj_.value)
        elif nodeName_ == 'circ':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circ', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_circ'):
              self.add_circ(obj_.value)
            elif hasattr(self, 'set_circ'):
              self.set_circ(obj_.value)
        elif nodeName_ == 'slash':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'slash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_slash'):
              self.add_slash(obj_.value)
            elif hasattr(self, 'set_slash'):
              self.set_slash(obj_.value)
        elif nodeName_ == 'tilde':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tilde', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tilde'):
              self.add_tilde(obj_.value)
            elif hasattr(self, 'set_tilde'):
              self.set_tilde(obj_.value)
        elif nodeName_ == 'cedil':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cedil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_cedil'):
              self.add_cedil(obj_.value)
            elif hasattr(self, 'set_cedil'):
              self.set_cedil(obj_.value)
        elif nodeName_ == 'ring':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ring', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ring'):
              self.add_ring(obj_.value)
            elif hasattr(self, 'set_ring'):
              self.set_ring(obj_.value)
        elif nodeName_ == 'szlig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'szlig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_szlig'):
              self.add_szlig(obj_.value)
            elif hasattr(self, 'set_szlig'):
              self.set_szlig(obj_.value)
        elif nodeName_ == 'nonbreakablespace':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nonbreakablespace', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nonbreakablespace'):
              self.add_nonbreakablespace(obj_.value)
            elif hasattr(self, 'set_nonbreakablespace'):
              self.set_nonbreakablespace(obj_.value)
        elif nodeName_ == 'aelig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'aelig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_aelig'):
              self.add_aelig(obj_.value)
            elif hasattr(self, 'set_aelig'):
              self.set_aelig(obj_.value)
        elif nodeName_ == 'AElig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AElig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AElig'):
              self.add_AElig(obj_.value)
            elif hasattr(self, 'set_AElig'):
              self.set_AElig(obj_.value)
        elif nodeName_ == 'Gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Gamma'):
              self.add_Gamma(obj_.value)
            elif hasattr(self, 'set_Gamma'):
              self.set_Gamma(obj_.value)
        elif nodeName_ == 'Delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Delta'):
              self.add_Delta(obj_.value)
            elif hasattr(self, 'set_Delta'):
              self.set_Delta(obj_.value)
        elif nodeName_ == 'Theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Theta'):
              self.add_Theta(obj_.value)
            elif hasattr(self, 'set_Theta'):
              self.set_Theta(obj_.value)
        elif nodeName_ == 'Lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Lambda'):
              self.add_Lambda(obj_.value)
            elif hasattr(self, 'set_Lambda'):
              self.set_Lambda(obj_.value)
        elif nodeName_ == 'Xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Xi'):
              self.add_Xi(obj_.value)
            elif hasattr(self, 'set_Xi'):
              self.set_Xi(obj_.value)
        elif nodeName_ == 'Pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Pi'):
              self.add_Pi(obj_.value)
            elif hasattr(self, 'set_Pi'):
              self.set_Pi(obj_.value)
        elif nodeName_ == 'Sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Sigma'):
              self.add_Sigma(obj_.value)
            elif hasattr(self, 'set_Sigma'):
              self.set_Sigma(obj_.value)
        elif nodeName_ == 'Upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Upsilon'):
              self.add_Upsilon(obj_.value)
            elif hasattr(self, 'set_Upsilon'):
              self.set_Upsilon(obj_.value)
        elif nodeName_ == 'Phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Phi'):
              self.add_Phi(obj_.value)
            elif hasattr(self, 'set_Phi'):
              self.set_Phi(obj_.value)
        elif nodeName_ == 'Psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Psi'):
              self.add_Psi(obj_.value)
            elif hasattr(self, 'set_Psi'):
              self.set_Psi(obj_.value)
        elif nodeName_ == 'Omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Omega'):
              self.add_Omega(obj_.value)
            elif hasattr(self, 'set_Omega'):
              self.set_Omega(obj_.value)
        elif nodeName_ == 'alpha':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'alpha', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_alpha'):
              self.add_alpha(obj_.value)
            elif hasattr(self, 'set_alpha'):
              self.set_alpha(obj_.value)
        elif nodeName_ == 'beta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'beta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_beta'):
              self.add_beta(obj_.value)
            elif hasattr(self, 'set_beta'):
              self.set_beta(obj_.value)
        elif nodeName_ == 'gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_gamma'):
              self.add_gamma(obj_.value)
            elif hasattr(self, 'set_gamma'):
              self.set_gamma(obj_.value)
        elif nodeName_ == 'delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_delta'):
              self.add_delta(obj_.value)
            elif hasattr(self, 'set_delta'):
              self.set_delta(obj_.value)
        elif nodeName_ == 'epsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'epsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_epsilon'):
              self.add_epsilon(obj_.value)
            elif hasattr(self, 'set_epsilon'):
              self.set_epsilon(obj_.value)
        elif nodeName_ == 'zeta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'zeta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_zeta'):
              self.add_zeta(obj_.value)
            elif hasattr(self, 'set_zeta'):
              self.set_zeta(obj_.value)
        elif nodeName_ == 'eta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'eta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_eta'):
              self.add_eta(obj_.value)
            elif hasattr(self, 'set_eta'):
              self.set_eta(obj_.value)
        elif nodeName_ == 'theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_theta'):
              self.add_theta(obj_.value)
            elif hasattr(self, 'set_theta'):
              self.set_theta(obj_.value)
        elif nodeName_ == 'iota':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'iota', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_iota'):
              self.add_iota(obj_.value)
            elif hasattr(self, 'set_iota'):
              self.set_iota(obj_.value)
        elif nodeName_ == 'kappa':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'kappa', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_kappa'):
              self.add_kappa(obj_.value)
            elif hasattr(self, 'set_kappa'):
              self.set_kappa(obj_.value)
        elif nodeName_ == 'lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lambda'):
              self.add_lambda(obj_.value)
            elif hasattr(self, 'set_lambda'):
              self.set_lambda(obj_.value)
        elif nodeName_ == 'mu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mu'):
              self.add_mu(obj_.value)
            elif hasattr(self, 'set_mu'):
              self.set_mu(obj_.value)
        elif nodeName_ == 'nu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nu'):
              self.add_nu(obj_.value)
            elif hasattr(self, 'set_nu'):
              self.set_nu(obj_.value)
        elif nodeName_ == 'xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xi'):
              self.add_xi(obj_.value)
            elif hasattr(self, 'set_xi'):
              self.set_xi(obj_.value)
        elif nodeName_ == 'pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_pi'):
              self.add_pi(obj_.value)
            elif hasattr(self, 'set_pi'):
              self.set_pi(obj_.value)
        elif nodeName_ == 'rho':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rho', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rho'):
              self.add_rho(obj_.value)
            elif hasattr(self, 'set_rho'):
              self.set_rho(obj_.value)
        elif nodeName_ == 'sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigma'):
              self.add_sigma(obj_.value)
            elif hasattr(self, 'set_sigma'):
              self.set_sigma(obj_.value)
        elif nodeName_ == 'tau':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tau', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tau'):
              self.add_tau(obj_.value)
            elif hasattr(self, 'set_tau'):
              self.set_tau(obj_.value)
        elif nodeName_ == 'upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_upsilon'):
              self.add_upsilon(obj_.value)
            elif hasattr(self, 'set_upsilon'):
              self.set_upsilon(obj_.value)
        elif nodeName_ == 'phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_phi'):
              self.add_phi(obj_.value)
            elif hasattr(self, 'set_phi'):
              self.set_phi(obj_.value)
        elif nodeName_ == 'chi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'chi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_chi'):
              self.add_chi(obj_.value)
            elif hasattr(self, 'set_chi'):
              self.set_chi(obj_.value)
        elif nodeName_ == 'psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_psi'):
              self.add_psi(obj_.value)
            elif hasattr(self, 'set_psi'):
              self.set_psi(obj_.value)
        elif nodeName_ == 'omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_omega'):
              self.add_omega(obj_.value)
            elif hasattr(self, 'set_omega'):
              self.set_omega(obj_.value)
        elif nodeName_ == 'sigmaf':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigmaf', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigmaf'):
              self.add_sigmaf(obj_.value)
            elif hasattr(self, 'set_sigmaf'):
              self.set_sigmaf(obj_.value)
        elif nodeName_ == 'sect':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect'):
              self.add_sect(obj_.value)
            elif hasattr(self, 'set_sect'):
              self.set_sect(obj_.value)
        elif nodeName_ == 'deg':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'deg', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_deg'):
              self.add_deg(obj_.value)
            elif hasattr(self, 'set_deg'):
              self.set_deg(obj_.value)
        elif nodeName_ == 'prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prime'):
              self.add_prime(obj_.value)
            elif hasattr(self, 'set_prime'):
              self.set_prime(obj_.value)
        elif nodeName_ == 'Prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Prime'):
              self.add_Prime(obj_.value)
            elif hasattr(self, 'set_Prime'):
              self.set_Prime(obj_.value)
        elif nodeName_ == 'infin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'infin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_infin'):
              self.add_infin(obj_.value)
            elif hasattr(self, 'set_infin'):
              self.set_infin(obj_.value)
        elif nodeName_ == 'empty':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'empty', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_empty'):
              self.add_empty(obj_.value)
            elif hasattr(self, 'set_empty'):
              self.set_empty(obj_.value)
        elif nodeName_ == 'plusmn':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'plusmn', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_plusmn'):
              self.add_plusmn(obj_.value)
            elif hasattr(self, 'set_plusmn'):
              self.set_plusmn(obj_.value)
        elif nodeName_ == 'times':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'times', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_times'):
              self.add_times(obj_.value)
            elif hasattr(self, 'set_times'):
              self.set_times(obj_.value)
        elif nodeName_ == 'minus':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'minus', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_minus'):
              self.add_minus(obj_.value)
            elif hasattr(self, 'set_minus'):
              self.set_minus(obj_.value)
        elif nodeName_ == 'sdot':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sdot', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sdot'):
              self.add_sdot(obj_.value)
            elif hasattr(self, 'set_sdot'):
              self.set_sdot(obj_.value)
        elif nodeName_ == 'part':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'part', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_part'):
              self.add_part(obj_.value)
            elif hasattr(self, 'set_part'):
              self.set_part(obj_.value)
        elif nodeName_ == 'nabla':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nabla', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nabla'):
              self.add_nabla(obj_.value)
            elif hasattr(self, 'set_nabla'):
              self.set_nabla(obj_.value)
        elif nodeName_ == 'radic':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radic', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_radic'):
              self.add_radic(obj_.value)
            elif hasattr(self, 'set_radic'):
              self.set_radic(obj_.value)
        elif nodeName_ == 'perp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'perp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_perp'):
              self.add_perp(obj_.value)
            elif hasattr(self, 'set_perp'):
              self.set_perp(obj_.value)
        elif nodeName_ == 'sum':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sum', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sum'):
              self.add_sum(obj_.value)
            elif hasattr(self, 'set_sum'):
              self.set_sum(obj_.value)
        elif nodeName_ == 'int':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'int', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_int'):
              self.add_int(obj_.value)
            elif hasattr(self, 'set_int'):
              self.set_int(obj_.value)
        elif nodeName_ == 'prod':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prod'):
              self.add_prod(obj_.value)
            elif hasattr(self, 'set_prod'):
              self.set_prod(obj_.value)
        elif nodeName_ == 'sim':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sim', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sim'):
              self.add_sim(obj_.value)
            elif hasattr(self, 'set_sim'):
              self.set_sim(obj_.value)
        elif nodeName_ == 'asymp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'asymp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_asymp'):
              self.add_asymp(obj_.value)
            elif hasattr(self, 'set_asymp'):
              self.set_asymp(obj_.value)
        elif nodeName_ == 'ne':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ne', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ne'):
              self.add_ne(obj_.value)
            elif hasattr(self, 'set_ne'):
              self.set_ne(obj_.value)
        elif nodeName_ == 'equiv':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'equiv', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_equiv'):
              self.add_equiv(obj_.value)
            elif hasattr(self, 'set_equiv'):
              self.set_equiv(obj_.value)
        elif nodeName_ == 'prop':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prop', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prop'):
              self.add_prop(obj_.value)
            elif hasattr(self, 'set_prop'):
              self.set_prop(obj_.value)
        elif nodeName_ == 'le':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'le', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_le'):
              self.add_le(obj_.value)
            elif hasattr(self, 'set_le'):
              self.set_le(obj_.value)
        elif nodeName_ == 'ge':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ge', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ge'):
              self.add_ge(obj_.value)
            elif hasattr(self, 'set_ge'):
              self.set_ge(obj_.value)
        elif nodeName_ == 'larr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'larr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_larr'):
              self.add_larr(obj_.value)
            elif hasattr(self, 'set_larr'):
              self.set_larr(obj_.value)
        elif nodeName_ == 'rarr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rarr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rarr'):
              self.add_rarr(obj_.value)
            elif hasattr(self, 'set_rarr'):
              self.set_rarr(obj_.value)
        elif nodeName_ == 'isin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'isin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_isin'):
              self.add_isin(obj_.value)
            elif hasattr(self, 'set_isin'):
              self.set_isin(obj_.value)
        elif nodeName_ == 'notin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'notin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_notin'):
              self.add_notin(obj_.value)
            elif hasattr(self, 'set_notin'):
              self.set_notin(obj_.value)
        elif nodeName_ == 'lceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lceil'):
              self.add_lceil(obj_.value)
            elif hasattr(self, 'set_lceil'):
              self.set_lceil(obj_.value)
        elif nodeName_ == 'rceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rceil'):
              self.add_rceil(obj_.value)
            elif hasattr(self, 'set_rceil'):
              self.set_rceil(obj_.value)
        elif nodeName_ == 'lfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lfloor'):
              self.add_lfloor(obj_.value)
            elif hasattr(self, 'set_lfloor'):
              self.set_lfloor(obj_.value)
        elif nodeName_ == 'rfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rfloor'):
              self.add_rfloor(obj_.value)
            elif hasattr(self, 'set_rfloor'):
              self.set_rfloor(obj_.value)
        elif nodeName_ == 'linebreak':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'linebreak', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_linebreak'):
              self.add_linebreak(obj_.value)
            elif hasattr(self, 'set_linebreak'):
              self.set_linebreak(obj_.value)
        elif nodeName_ == 'hruler':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'hruler', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_hruler'):
              self.add_hruler(obj_.value)
            elif hasattr(self, 'set_hruler'):
              self.set_hruler(obj_.value)
        elif nodeName_ == 'preformatted':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'preformatted', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_preformatted'):
              self.add_preformatted(obj_.value)
            elif hasattr(self, 'set_preformatted'):
              self.set_preformatted(obj_.value)
        elif nodeName_ == 'programlisting':
            obj_ = listingType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'programlisting', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_programlisting'):
              self.add_programlisting(obj_.value)
            elif hasattr(self, 'set_programlisting'):
              self.set_programlisting(obj_.value)
        elif nodeName_ == 'verbatim' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'verbatim', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'indexentry':
            obj_ = docIndexEntryType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'indexentry', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_indexentry'):
              self.add_indexentry(obj_.value)
            elif hasattr(self, 'set_indexentry'):
              self.set_indexentry(obj_.value)
        elif nodeName_ == 'orderedlist':
            obj_ = docListType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'orderedlist', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_orderedlist'):
              self.add_orderedlist(obj_.value)
            elif hasattr(self, 'set_orderedlist'):
              self.set_orderedlist(obj_.value)
        elif nodeName_ == 'itemizedlist':
            obj_ = docListType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'itemizedlist', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_itemizedlist'):
              self.add_itemizedlist(obj_.value)
            elif hasattr(self, 'set_itemizedlist'):
              self.set_itemizedlist(obj_.value)
        elif nodeName_ == 'simplesect':
            obj_ = docSimpleSectType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'simplesect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_simplesect'):
              self.add_simplesect(obj_.value)
            elif hasattr(self, 'set_simplesect'):
              self.set_simplesect(obj_.value)
        elif nodeName_ == 'title':
            obj_ = docTitleType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'title', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_title'):
              self.add_title(obj_.value)
            elif hasattr(self, 'set_title'):
              self.set_title(obj_.value)
        elif nodeName_ == 'variablelist':
            obj_ = docVariableListType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'variablelist', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_variablelist'):
              self.add_variablelist(obj_.value)
            elif hasattr(self, 'set_variablelist'):
              self.set_variablelist(obj_.value)
        elif nodeName_ == 'table':
            obj_ = docTableType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'table', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_table'):
              self.add_table(obj_.value)
            elif hasattr(self, 'set_table'):
              self.set_table(obj_.value)
        elif nodeName_ == 'heading':
            obj_ = docHeadingType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'heading', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_heading'):
              self.add_heading(obj_.value)
            elif hasattr(self, 'set_heading'):
              self.set_heading(obj_.value)
        elif nodeName_ == 'image':
            obj_ = docImageType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'image', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_image'):
              self.add_image(obj_.value)
            elif hasattr(self, 'set_image'):
              self.set_image(obj_.value)
        elif nodeName_ == 'dotfile':
            obj_ = docDotFileType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'dotfile', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_dotfile'):
              self.add_dotfile(obj_.value)
            elif hasattr(self, 'set_dotfile'):
              self.set_dotfile(obj_.value)
        elif nodeName_ == 'toclist':
            obj_ = docTocListType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'toclist', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_toclist'):
              self.add_toclist(obj_.value)
            elif hasattr(self, 'set_toclist'):
              self.set_toclist(obj_.value)
        elif nodeName_ == 'language':
            obj_ = docLanguageType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'language', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_language'):
              self.add_language(obj_.value)
            elif hasattr(self, 'set_language'):
              self.set_language(obj_.value)
        elif nodeName_ == 'parameterlist':
            obj_ = docParamListType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'parameterlist', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_parameterlist'):
              self.add_parameterlist(obj_.value)
            elif hasattr(self, 'set_parameterlist'):
              self.set_parameterlist(obj_.value)
        elif nodeName_ == 'xrefsect':
            obj_ = docXRefSectType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xrefsect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xrefsect'):
              self.add_xrefsect(obj_.value)
            elif hasattr(self, 'set_xrefsect'):
              self.set_xrefsect(obj_.value)
        elif nodeName_ == 'copydoc':
            obj_ = docCopyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copydoc', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copydoc'):
              self.add_copydoc(obj_.value)
            elif hasattr(self, 'set_copydoc'):
              self.set_copydoc(obj_.value)
        elif nodeName_ == 'blockquote':
            obj_ = docBlockQuoteType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'blockquote', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_blockquote'):
              self.add_blockquote(obj_.value)
            elif hasattr(self, 'set_blockquote'):
              self.set_blockquote(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docMarkupType


class docURLLink(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, url=None, ulink=None, bold=None, emphasis=None, computeroutput=None, subscript=None, superscript=None, center=None, small=None, htmlonly=None, manonly=None, xmlonly=None, rtfonly=None, latexonly=None, dot=None, anchor=None, formula=None, ref=None, copy=None, trademark=None, registered=None, lsquo=None, rsquo=None, ldquo=None, rdquo=None, ndash=None, mdash=None, umlaut=None, acute=None, grave=None, circ=None, slash=None, tilde=None, cedil=None, ring=None, szlig=None, nonbreakablespace=None, aelig=None, AElig=None, Gamma=None, Delta=None, Theta=None, Lambda=None, Xi=None, Pi=None, Sigma=None, Upsilon=None, Phi=None, Psi=None, Omega=None, alpha=None, beta=None, gamma=None, delta=None, epsilon=None, zeta=None, eta=None, theta=None, iota=None, kappa=None, lambda_=None, mu=None, nu=None, xi=None, pi=None, rho=None, sigma=None, tau=None, upsilon=None, phi=None, chi=None, psi=None, omega=None, sigmaf=None, sect=None, deg=None, prime=None, Prime=None, infin=None, empty=None, plusmn=None, times=None, minus=None, sdot=None, part=None, nabla=None, radic=None, perp=None, sum=None, int=None, prod=None, sim=None, asymp=None, ne=None, equiv=None, prop=None, le=None, ge=None, larr=None, rarr=None, isin=None, notin=None, lceil=None, rceil=None, lfloor=None, rfloor=None, valueOf_=None, mixedclass_=None, content_=None):
        self.url = _cast(None, url)
        if ulink is None:
            self.ulink = []
        else:
            self.ulink = ulink
        if bold is None:
            self.bold = []
        else:
            self.bold = bold
        if emphasis is None:
            self.emphasis = []
        else:
            self.emphasis = emphasis
        if computeroutput is None:
            self.computeroutput = []
        else:
            self.computeroutput = computeroutput
        if subscript is None:
            self.subscript = []
        else:
            self.subscript = subscript
        if superscript is None:
            self.superscript = []
        else:
            self.superscript = superscript
        if center is None:
            self.center = []
        else:
            self.center = center
        if small is None:
            self.small = []
        else:
            self.small = small
        if htmlonly is None:
            self.htmlonly = []
        else:
            self.htmlonly = htmlonly
        if manonly is None:
            self.manonly = []
        else:
            self.manonly = manonly
        if xmlonly is None:
            self.xmlonly = []
        else:
            self.xmlonly = xmlonly
        if rtfonly is None:
            self.rtfonly = []
        else:
            self.rtfonly = rtfonly
        if latexonly is None:
            self.latexonly = []
        else:
            self.latexonly = latexonly
        if dot is None:
            self.dot = []
        else:
            self.dot = dot
        if anchor is None:
            self.anchor = []
        else:
            self.anchor = anchor
        if formula is None:
            self.formula = []
        else:
            self.formula = formula
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        if copy is None:
            self.copy = []
        else:
            self.copy = copy
        if trademark is None:
            self.trademark = []
        else:
            self.trademark = trademark
        if registered is None:
            self.registered = []
        else:
            self.registered = registered
        if lsquo is None:
            self.lsquo = []
        else:
            self.lsquo = lsquo
        if rsquo is None:
            self.rsquo = []
        else:
            self.rsquo = rsquo
        if ldquo is None:
            self.ldquo = []
        else:
            self.ldquo = ldquo
        if rdquo is None:
            self.rdquo = []
        else:
            self.rdquo = rdquo
        if ndash is None:
            self.ndash = []
        else:
            self.ndash = ndash
        if mdash is None:
            self.mdash = []
        else:
            self.mdash = mdash
        if umlaut is None:
            self.umlaut = []
        else:
            self.umlaut = umlaut
        if acute is None:
            self.acute = []
        else:
            self.acute = acute
        if grave is None:
            self.grave = []
        else:
            self.grave = grave
        if circ is None:
            self.circ = []
        else:
            self.circ = circ
        if slash is None:
            self.slash = []
        else:
            self.slash = slash
        if tilde is None:
            self.tilde = []
        else:
            self.tilde = tilde
        if cedil is None:
            self.cedil = []
        else:
            self.cedil = cedil
        if ring is None:
            self.ring = []
        else:
            self.ring = ring
        if szlig is None:
            self.szlig = []
        else:
            self.szlig = szlig
        if nonbreakablespace is None:
            self.nonbreakablespace = []
        else:
            self.nonbreakablespace = nonbreakablespace
        if aelig is None:
            self.aelig = []
        else:
            self.aelig = aelig
        if AElig is None:
            self.AElig = []
        else:
            self.AElig = AElig
        if Gamma is None:
            self.Gamma = []
        else:
            self.Gamma = Gamma
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Theta is None:
            self.Theta = []
        else:
            self.Theta = Theta
        if Lambda is None:
            self.Lambda = []
        else:
            self.Lambda = Lambda
        if Xi is None:
            self.Xi = []
        else:
            self.Xi = Xi
        if Pi is None:
            self.Pi = []
        else:
            self.Pi = Pi
        if Sigma is None:
            self.Sigma = []
        else:
            self.Sigma = Sigma
        if Upsilon is None:
            self.Upsilon = []
        else:
            self.Upsilon = Upsilon
        if Phi is None:
            self.Phi = []
        else:
            self.Phi = Phi
        if Psi is None:
            self.Psi = []
        else:
            self.Psi = Psi
        if Omega is None:
            self.Omega = []
        else:
            self.Omega = Omega
        if alpha is None:
            self.alpha = []
        else:
            self.alpha = alpha
        if beta is None:
            self.beta = []
        else:
            self.beta = beta
        if gamma is None:
            self.gamma = []
        else:
            self.gamma = gamma
        if delta is None:
            self.delta = []
        else:
            self.delta = delta
        if epsilon is None:
            self.epsilon = []
        else:
            self.epsilon = epsilon
        if zeta is None:
            self.zeta = []
        else:
            self.zeta = zeta
        if eta is None:
            self.eta = []
        else:
            self.eta = eta
        if theta is None:
            self.theta = []
        else:
            self.theta = theta
        if iota is None:
            self.iota = []
        else:
            self.iota = iota
        if kappa is None:
            self.kappa = []
        else:
            self.kappa = kappa
        if lambda_ is None:
            self.lambda_ = []
        else:
            self.lambda_ = lambda_
        if mu is None:
            self.mu = []
        else:
            self.mu = mu
        if nu is None:
            self.nu = []
        else:
            self.nu = nu
        if xi is None:
            self.xi = []
        else:
            self.xi = xi
        if pi is None:
            self.pi = []
        else:
            self.pi = pi
        if rho is None:
            self.rho = []
        else:
            self.rho = rho
        if sigma is None:
            self.sigma = []
        else:
            self.sigma = sigma
        if tau is None:
            self.tau = []
        else:
            self.tau = tau
        if upsilon is None:
            self.upsilon = []
        else:
            self.upsilon = upsilon
        if phi is None:
            self.phi = []
        else:
            self.phi = phi
        if chi is None:
            self.chi = []
        else:
            self.chi = chi
        if psi is None:
            self.psi = []
        else:
            self.psi = psi
        if omega is None:
            self.omega = []
        else:
            self.omega = omega
        if sigmaf is None:
            self.sigmaf = []
        else:
            self.sigmaf = sigmaf
        if sect is None:
            self.sect = []
        else:
            self.sect = sect
        if deg is None:
            self.deg = []
        else:
            self.deg = deg
        if prime is None:
            self.prime = []
        else:
            self.prime = prime
        if Prime is None:
            self.Prime = []
        else:
            self.Prime = Prime
        if infin is None:
            self.infin = []
        else:
            self.infin = infin
        if empty is None:
            self.empty = []
        else:
            self.empty = empty
        if plusmn is None:
            self.plusmn = []
        else:
            self.plusmn = plusmn
        if times is None:
            self.times = []
        else:
            self.times = times
        if minus is None:
            self.minus = []
        else:
            self.minus = minus
        if sdot is None:
            self.sdot = []
        else:
            self.sdot = sdot
        if part is None:
            self.part = []
        else:
            self.part = part
        if nabla is None:
            self.nabla = []
        else:
            self.nabla = nabla
        if radic is None:
            self.radic = []
        else:
            self.radic = radic
        if perp is None:
            self.perp = []
        else:
            self.perp = perp
        if sum is None:
            self.sum = []
        else:
            self.sum = sum
        if int is None:
            self.int = []
        else:
            self.int = int
        if prod is None:
            self.prod = []
        else:
            self.prod = prod
        if sim is None:
            self.sim = []
        else:
            self.sim = sim
        if asymp is None:
            self.asymp = []
        else:
            self.asymp = asymp
        if ne is None:
            self.ne = []
        else:
            self.ne = ne
        if equiv is None:
            self.equiv = []
        else:
            self.equiv = equiv
        if prop is None:
            self.prop = []
        else:
            self.prop = prop
        if le is None:
            self.le = []
        else:
            self.le = le
        if ge is None:
            self.ge = []
        else:
            self.ge = ge
        if larr is None:
            self.larr = []
        else:
            self.larr = larr
        if rarr is None:
            self.rarr = []
        else:
            self.rarr = rarr
        if isin is None:
            self.isin = []
        else:
            self.isin = isin
        if notin is None:
            self.notin = []
        else:
            self.notin = notin
        if lceil is None:
            self.lceil = []
        else:
            self.lceil = lceil
        if rceil is None:
            self.rceil = []
        else:
            self.rceil = rceil
        if lfloor is None:
            self.lfloor = []
        else:
            self.lfloor = lfloor
        if rfloor is None:
            self.rfloor = []
        else:
            self.rfloor = rfloor
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docURLLink.subclass:
            return docURLLink.subclass(*args_, **kwargs_)
        else:
            return docURLLink(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ulink(self): return self.ulink
    def set_ulink(self, ulink): self.ulink = ulink
    def add_ulink(self, value): self.ulink.append(value)
    def insert_ulink(self, index, value): self.ulink[index] = value
    def get_bold(self): return self.bold
    def set_bold(self, bold): self.bold = bold
    def add_bold(self, value): self.bold.append(value)
    def insert_bold(self, index, value): self.bold[index] = value
    def get_emphasis(self): return self.emphasis
    def set_emphasis(self, emphasis): self.emphasis = emphasis
    def add_emphasis(self, value): self.emphasis.append(value)
    def insert_emphasis(self, index, value): self.emphasis[index] = value
    def get_computeroutput(self): return self.computeroutput
    def set_computeroutput(self, computeroutput): self.computeroutput = computeroutput
    def add_computeroutput(self, value): self.computeroutput.append(value)
    def insert_computeroutput(self, index, value): self.computeroutput[index] = value
    def get_subscript(self): return self.subscript
    def set_subscript(self, subscript): self.subscript = subscript
    def add_subscript(self, value): self.subscript.append(value)
    def insert_subscript(self, index, value): self.subscript[index] = value
    def get_superscript(self): return self.superscript
    def set_superscript(self, superscript): self.superscript = superscript
    def add_superscript(self, value): self.superscript.append(value)
    def insert_superscript(self, index, value): self.superscript[index] = value
    def get_center(self): return self.center
    def set_center(self, center): self.center = center
    def add_center(self, value): self.center.append(value)
    def insert_center(self, index, value): self.center[index] = value
    def get_small(self): return self.small
    def set_small(self, small): self.small = small
    def add_small(self, value): self.small.append(value)
    def insert_small(self, index, value): self.small[index] = value
    def get_htmlonly(self): return self.htmlonly
    def set_htmlonly(self, htmlonly): self.htmlonly = htmlonly
    def add_htmlonly(self, value): self.htmlonly.append(value)
    def insert_htmlonly(self, index, value): self.htmlonly[index] = value
    def get_manonly(self): return self.manonly
    def set_manonly(self, manonly): self.manonly = manonly
    def add_manonly(self, value): self.manonly.append(value)
    def insert_manonly(self, index, value): self.manonly[index] = value
    def get_xmlonly(self): return self.xmlonly
    def set_xmlonly(self, xmlonly): self.xmlonly = xmlonly
    def add_xmlonly(self, value): self.xmlonly.append(value)
    def insert_xmlonly(self, index, value): self.xmlonly[index] = value
    def get_rtfonly(self): return self.rtfonly
    def set_rtfonly(self, rtfonly): self.rtfonly = rtfonly
    def add_rtfonly(self, value): self.rtfonly.append(value)
    def insert_rtfonly(self, index, value): self.rtfonly[index] = value
    def get_latexonly(self): return self.latexonly
    def set_latexonly(self, latexonly): self.latexonly = latexonly
    def add_latexonly(self, value): self.latexonly.append(value)
    def insert_latexonly(self, index, value): self.latexonly[index] = value
    def get_dot(self): return self.dot
    def set_dot(self, dot): self.dot = dot
    def add_dot(self, value): self.dot.append(value)
    def insert_dot(self, index, value): self.dot[index] = value
    def get_anchor(self): return self.anchor
    def set_anchor(self, anchor): self.anchor = anchor
    def add_anchor(self, value): self.anchor.append(value)
    def insert_anchor(self, index, value): self.anchor[index] = value
    def get_formula(self): return self.formula
    def set_formula(self, formula): self.formula = formula
    def add_formula(self, value): self.formula.append(value)
    def insert_formula(self, index, value): self.formula[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_copy(self): return self.copy
    def set_copy(self, copy): self.copy = copy
    def add_copy(self, value): self.copy.append(value)
    def insert_copy(self, index, value): self.copy[index] = value
    def get_trademark(self): return self.trademark
    def set_trademark(self, trademark): self.trademark = trademark
    def add_trademark(self, value): self.trademark.append(value)
    def insert_trademark(self, index, value): self.trademark[index] = value
    def get_registered(self): return self.registered
    def set_registered(self, registered): self.registered = registered
    def add_registered(self, value): self.registered.append(value)
    def insert_registered(self, index, value): self.registered[index] = value
    def get_lsquo(self): return self.lsquo
    def set_lsquo(self, lsquo): self.lsquo = lsquo
    def add_lsquo(self, value): self.lsquo.append(value)
    def insert_lsquo(self, index, value): self.lsquo[index] = value
    def get_rsquo(self): return self.rsquo
    def set_rsquo(self, rsquo): self.rsquo = rsquo
    def add_rsquo(self, value): self.rsquo.append(value)
    def insert_rsquo(self, index, value): self.rsquo[index] = value
    def get_ldquo(self): return self.ldquo
    def set_ldquo(self, ldquo): self.ldquo = ldquo
    def add_ldquo(self, value): self.ldquo.append(value)
    def insert_ldquo(self, index, value): self.ldquo[index] = value
    def get_rdquo(self): return self.rdquo
    def set_rdquo(self, rdquo): self.rdquo = rdquo
    def add_rdquo(self, value): self.rdquo.append(value)
    def insert_rdquo(self, index, value): self.rdquo[index] = value
    def get_ndash(self): return self.ndash
    def set_ndash(self, ndash): self.ndash = ndash
    def add_ndash(self, value): self.ndash.append(value)
    def insert_ndash(self, index, value): self.ndash[index] = value
    def get_mdash(self): return self.mdash
    def set_mdash(self, mdash): self.mdash = mdash
    def add_mdash(self, value): self.mdash.append(value)
    def insert_mdash(self, index, value): self.mdash[index] = value
    def get_umlaut(self): return self.umlaut
    def set_umlaut(self, umlaut): self.umlaut = umlaut
    def add_umlaut(self, value): self.umlaut.append(value)
    def insert_umlaut(self, index, value): self.umlaut[index] = value
    def get_acute(self): return self.acute
    def set_acute(self, acute): self.acute = acute
    def add_acute(self, value): self.acute.append(value)
    def insert_acute(self, index, value): self.acute[index] = value
    def get_grave(self): return self.grave
    def set_grave(self, grave): self.grave = grave
    def add_grave(self, value): self.grave.append(value)
    def insert_grave(self, index, value): self.grave[index] = value
    def get_circ(self): return self.circ
    def set_circ(self, circ): self.circ = circ
    def add_circ(self, value): self.circ.append(value)
    def insert_circ(self, index, value): self.circ[index] = value
    def get_slash(self): return self.slash
    def set_slash(self, slash): self.slash = slash
    def add_slash(self, value): self.slash.append(value)
    def insert_slash(self, index, value): self.slash[index] = value
    def get_tilde(self): return self.tilde
    def set_tilde(self, tilde): self.tilde = tilde
    def add_tilde(self, value): self.tilde.append(value)
    def insert_tilde(self, index, value): self.tilde[index] = value
    def get_cedil(self): return self.cedil
    def set_cedil(self, cedil): self.cedil = cedil
    def add_cedil(self, value): self.cedil.append(value)
    def insert_cedil(self, index, value): self.cedil[index] = value
    def get_ring(self): return self.ring
    def set_ring(self, ring): self.ring = ring
    def add_ring(self, value): self.ring.append(value)
    def insert_ring(self, index, value): self.ring[index] = value
    def get_szlig(self): return self.szlig
    def set_szlig(self, szlig): self.szlig = szlig
    def add_szlig(self, value): self.szlig.append(value)
    def insert_szlig(self, index, value): self.szlig[index] = value
    def get_nonbreakablespace(self): return self.nonbreakablespace
    def set_nonbreakablespace(self, nonbreakablespace): self.nonbreakablespace = nonbreakablespace
    def add_nonbreakablespace(self, value): self.nonbreakablespace.append(value)
    def insert_nonbreakablespace(self, index, value): self.nonbreakablespace[index] = value
    def get_aelig(self): return self.aelig
    def set_aelig(self, aelig): self.aelig = aelig
    def add_aelig(self, value): self.aelig.append(value)
    def insert_aelig(self, index, value): self.aelig[index] = value
    def get_AElig(self): return self.AElig
    def set_AElig(self, AElig): self.AElig = AElig
    def add_AElig(self, value): self.AElig.append(value)
    def insert_AElig(self, index, value): self.AElig[index] = value
    def get_Gamma(self): return self.Gamma
    def set_Gamma(self, Gamma): self.Gamma = Gamma
    def add_Gamma(self, value): self.Gamma.append(value)
    def insert_Gamma(self, index, value): self.Gamma[index] = value
    def get_Delta(self): return self.Delta
    def set_Delta(self, Delta): self.Delta = Delta
    def add_Delta(self, value): self.Delta.append(value)
    def insert_Delta(self, index, value): self.Delta[index] = value
    def get_Theta(self): return self.Theta
    def set_Theta(self, Theta): self.Theta = Theta
    def add_Theta(self, value): self.Theta.append(value)
    def insert_Theta(self, index, value): self.Theta[index] = value
    def get_Lambda(self): return self.Lambda
    def set_Lambda(self, Lambda): self.Lambda = Lambda
    def add_Lambda(self, value): self.Lambda.append(value)
    def insert_Lambda(self, index, value): self.Lambda[index] = value
    def get_Xi(self): return self.Xi
    def set_Xi(self, Xi): self.Xi = Xi
    def add_Xi(self, value): self.Xi.append(value)
    def insert_Xi(self, index, value): self.Xi[index] = value
    def get_Pi(self): return self.Pi
    def set_Pi(self, Pi): self.Pi = Pi
    def add_Pi(self, value): self.Pi.append(value)
    def insert_Pi(self, index, value): self.Pi[index] = value
    def get_Sigma(self): return self.Sigma
    def set_Sigma(self, Sigma): self.Sigma = Sigma
    def add_Sigma(self, value): self.Sigma.append(value)
    def insert_Sigma(self, index, value): self.Sigma[index] = value
    def get_Upsilon(self): return self.Upsilon
    def set_Upsilon(self, Upsilon): self.Upsilon = Upsilon
    def add_Upsilon(self, value): self.Upsilon.append(value)
    def insert_Upsilon(self, index, value): self.Upsilon[index] = value
    def get_Phi(self): return self.Phi
    def set_Phi(self, Phi): self.Phi = Phi
    def add_Phi(self, value): self.Phi.append(value)
    def insert_Phi(self, index, value): self.Phi[index] = value
    def get_Psi(self): return self.Psi
    def set_Psi(self, Psi): self.Psi = Psi
    def add_Psi(self, value): self.Psi.append(value)
    def insert_Psi(self, index, value): self.Psi[index] = value
    def get_Omega(self): return self.Omega
    def set_Omega(self, Omega): self.Omega = Omega
    def add_Omega(self, value): self.Omega.append(value)
    def insert_Omega(self, index, value): self.Omega[index] = value
    def get_alpha(self): return self.alpha
    def set_alpha(self, alpha): self.alpha = alpha
    def add_alpha(self, value): self.alpha.append(value)
    def insert_alpha(self, index, value): self.alpha[index] = value
    def get_beta(self): return self.beta
    def set_beta(self, beta): self.beta = beta
    def add_beta(self, value): self.beta.append(value)
    def insert_beta(self, index, value): self.beta[index] = value
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def add_gamma(self, value): self.gamma.append(value)
    def insert_gamma(self, index, value): self.gamma[index] = value
    def get_delta(self): return self.delta
    def set_delta(self, delta): self.delta = delta
    def add_delta(self, value): self.delta.append(value)
    def insert_delta(self, index, value): self.delta[index] = value
    def get_epsilon(self): return self.epsilon
    def set_epsilon(self, epsilon): self.epsilon = epsilon
    def add_epsilon(self, value): self.epsilon.append(value)
    def insert_epsilon(self, index, value): self.epsilon[index] = value
    def get_zeta(self): return self.zeta
    def set_zeta(self, zeta): self.zeta = zeta
    def add_zeta(self, value): self.zeta.append(value)
    def insert_zeta(self, index, value): self.zeta[index] = value
    def get_eta(self): return self.eta
    def set_eta(self, eta): self.eta = eta
    def add_eta(self, value): self.eta.append(value)
    def insert_eta(self, index, value): self.eta[index] = value
    def get_theta(self): return self.theta
    def set_theta(self, theta): self.theta = theta
    def add_theta(self, value): self.theta.append(value)
    def insert_theta(self, index, value): self.theta[index] = value
    def get_iota(self): return self.iota
    def set_iota(self, iota): self.iota = iota
    def add_iota(self, value): self.iota.append(value)
    def insert_iota(self, index, value): self.iota[index] = value
    def get_kappa(self): return self.kappa
    def set_kappa(self, kappa): self.kappa = kappa
    def add_kappa(self, value): self.kappa.append(value)
    def insert_kappa(self, index, value): self.kappa[index] = value
    def get_lambda(self): return self.lambda_
    def set_lambda(self, lambda_): self.lambda_ = lambda_
    def add_lambda(self, value): self.lambda_.append(value)
    def insert_lambda(self, index, value): self.lambda_[index] = value
    def get_mu(self): return self.mu
    def set_mu(self, mu): self.mu = mu
    def add_mu(self, value): self.mu.append(value)
    def insert_mu(self, index, value): self.mu[index] = value
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def add_nu(self, value): self.nu.append(value)
    def insert_nu(self, index, value): self.nu[index] = value
    def get_xi(self): return self.xi
    def set_xi(self, xi): self.xi = xi
    def add_xi(self, value): self.xi.append(value)
    def insert_xi(self, index, value): self.xi[index] = value
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def add_pi(self, value): self.pi.append(value)
    def insert_pi(self, index, value): self.pi[index] = value
    def get_rho(self): return self.rho
    def set_rho(self, rho): self.rho = rho
    def add_rho(self, value): self.rho.append(value)
    def insert_rho(self, index, value): self.rho[index] = value
    def get_sigma(self): return self.sigma
    def set_sigma(self, sigma): self.sigma = sigma
    def add_sigma(self, value): self.sigma.append(value)
    def insert_sigma(self, index, value): self.sigma[index] = value
    def get_tau(self): return self.tau
    def set_tau(self, tau): self.tau = tau
    def add_tau(self, value): self.tau.append(value)
    def insert_tau(self, index, value): self.tau[index] = value
    def get_upsilon(self): return self.upsilon
    def set_upsilon(self, upsilon): self.upsilon = upsilon
    def add_upsilon(self, value): self.upsilon.append(value)
    def insert_upsilon(self, index, value): self.upsilon[index] = value
    def get_phi(self): return self.phi
    def set_phi(self, phi): self.phi = phi
    def add_phi(self, value): self.phi.append(value)
    def insert_phi(self, index, value): self.phi[index] = value
    def get_chi(self): return self.chi
    def set_chi(self, chi): self.chi = chi
    def add_chi(self, value): self.chi.append(value)
    def insert_chi(self, index, value): self.chi[index] = value
    def get_psi(self): return self.psi
    def set_psi(self, psi): self.psi = psi
    def add_psi(self, value): self.psi.append(value)
    def insert_psi(self, index, value): self.psi[index] = value
    def get_omega(self): return self.omega
    def set_omega(self, omega): self.omega = omega
    def add_omega(self, value): self.omega.append(value)
    def insert_omega(self, index, value): self.omega[index] = value
    def get_sigmaf(self): return self.sigmaf
    def set_sigmaf(self, sigmaf): self.sigmaf = sigmaf
    def add_sigmaf(self, value): self.sigmaf.append(value)
    def insert_sigmaf(self, index, value): self.sigmaf[index] = value
    def get_sect(self): return self.sect
    def set_sect(self, sect): self.sect = sect
    def add_sect(self, value): self.sect.append(value)
    def insert_sect(self, index, value): self.sect[index] = value
    def get_deg(self): return self.deg
    def set_deg(self, deg): self.deg = deg
    def add_deg(self, value): self.deg.append(value)
    def insert_deg(self, index, value): self.deg[index] = value
    def get_prime(self): return self.prime
    def set_prime(self, prime): self.prime = prime
    def add_prime(self, value): self.prime.append(value)
    def insert_prime(self, index, value): self.prime[index] = value
    def get_Prime(self): return self.Prime
    def set_Prime(self, Prime): self.Prime = Prime
    def add_Prime(self, value): self.Prime.append(value)
    def insert_Prime(self, index, value): self.Prime[index] = value
    def get_infin(self): return self.infin
    def set_infin(self, infin): self.infin = infin
    def add_infin(self, value): self.infin.append(value)
    def insert_infin(self, index, value): self.infin[index] = value
    def get_empty(self): return self.empty
    def set_empty(self, empty): self.empty = empty
    def add_empty(self, value): self.empty.append(value)
    def insert_empty(self, index, value): self.empty[index] = value
    def get_plusmn(self): return self.plusmn
    def set_plusmn(self, plusmn): self.plusmn = plusmn
    def add_plusmn(self, value): self.plusmn.append(value)
    def insert_plusmn(self, index, value): self.plusmn[index] = value
    def get_times(self): return self.times
    def set_times(self, times): self.times = times
    def add_times(self, value): self.times.append(value)
    def insert_times(self, index, value): self.times[index] = value
    def get_minus(self): return self.minus
    def set_minus(self, minus): self.minus = minus
    def add_minus(self, value): self.minus.append(value)
    def insert_minus(self, index, value): self.minus[index] = value
    def get_sdot(self): return self.sdot
    def set_sdot(self, sdot): self.sdot = sdot
    def add_sdot(self, value): self.sdot.append(value)
    def insert_sdot(self, index, value): self.sdot[index] = value
    def get_part(self): return self.part
    def set_part(self, part): self.part = part
    def add_part(self, value): self.part.append(value)
    def insert_part(self, index, value): self.part[index] = value
    def get_nabla(self): return self.nabla
    def set_nabla(self, nabla): self.nabla = nabla
    def add_nabla(self, value): self.nabla.append(value)
    def insert_nabla(self, index, value): self.nabla[index] = value
    def get_radic(self): return self.radic
    def set_radic(self, radic): self.radic = radic
    def add_radic(self, value): self.radic.append(value)
    def insert_radic(self, index, value): self.radic[index] = value
    def get_perp(self): return self.perp
    def set_perp(self, perp): self.perp = perp
    def add_perp(self, value): self.perp.append(value)
    def insert_perp(self, index, value): self.perp[index] = value
    def get_sum(self): return self.sum
    def set_sum(self, sum): self.sum = sum
    def add_sum(self, value): self.sum.append(value)
    def insert_sum(self, index, value): self.sum[index] = value
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def add_int(self, value): self.int.append(value)
    def insert_int(self, index, value): self.int[index] = value
    def get_prod(self): return self.prod
    def set_prod(self, prod): self.prod = prod
    def add_prod(self, value): self.prod.append(value)
    def insert_prod(self, index, value): self.prod[index] = value
    def get_sim(self): return self.sim
    def set_sim(self, sim): self.sim = sim
    def add_sim(self, value): self.sim.append(value)
    def insert_sim(self, index, value): self.sim[index] = value
    def get_asymp(self): return self.asymp
    def set_asymp(self, asymp): self.asymp = asymp
    def add_asymp(self, value): self.asymp.append(value)
    def insert_asymp(self, index, value): self.asymp[index] = value
    def get_ne(self): return self.ne
    def set_ne(self, ne): self.ne = ne
    def add_ne(self, value): self.ne.append(value)
    def insert_ne(self, index, value): self.ne[index] = value
    def get_equiv(self): return self.equiv
    def set_equiv(self, equiv): self.equiv = equiv
    def add_equiv(self, value): self.equiv.append(value)
    def insert_equiv(self, index, value): self.equiv[index] = value
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def add_prop(self, value): self.prop.append(value)
    def insert_prop(self, index, value): self.prop[index] = value
    def get_le(self): return self.le
    def set_le(self, le): self.le = le
    def add_le(self, value): self.le.append(value)
    def insert_le(self, index, value): self.le[index] = value
    def get_ge(self): return self.ge
    def set_ge(self, ge): self.ge = ge
    def add_ge(self, value): self.ge.append(value)
    def insert_ge(self, index, value): self.ge[index] = value
    def get_larr(self): return self.larr
    def set_larr(self, larr): self.larr = larr
    def add_larr(self, value): self.larr.append(value)
    def insert_larr(self, index, value): self.larr[index] = value
    def get_rarr(self): return self.rarr
    def set_rarr(self, rarr): self.rarr = rarr
    def add_rarr(self, value): self.rarr.append(value)
    def insert_rarr(self, index, value): self.rarr[index] = value
    def get_isin(self): return self.isin
    def set_isin(self, isin): self.isin = isin
    def add_isin(self, value): self.isin.append(value)
    def insert_isin(self, index, value): self.isin[index] = value
    def get_notin(self): return self.notin
    def set_notin(self, notin): self.notin = notin
    def add_notin(self, value): self.notin.append(value)
    def insert_notin(self, index, value): self.notin[index] = value
    def get_lceil(self): return self.lceil
    def set_lceil(self, lceil): self.lceil = lceil
    def add_lceil(self, value): self.lceil.append(value)
    def insert_lceil(self, index, value): self.lceil[index] = value
    def get_rceil(self): return self.rceil
    def set_rceil(self, rceil): self.rceil = rceil
    def add_rceil(self, value): self.rceil.append(value)
    def insert_rceil(self, index, value): self.rceil[index] = value
    def get_lfloor(self): return self.lfloor
    def set_lfloor(self, lfloor): self.lfloor = lfloor
    def add_lfloor(self, value): self.lfloor.append(value)
    def insert_lfloor(self, index, value): self.lfloor[index] = value
    def get_rfloor(self): return self.rfloor
    def set_rfloor(self, rfloor): self.rfloor = rfloor
    def add_rfloor(self, value): self.rfloor.append(value)
    def insert_rfloor(self, index, value): self.rfloor[index] = value
    def get_url(self): return self.url
    def set_url(self, url): self.url = url
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ulink or
            self.bold or
            self.emphasis or
            self.computeroutput or
            self.subscript or
            self.superscript or
            self.center or
            self.small or
            self.htmlonly or
            self.manonly or
            self.xmlonly or
            self.rtfonly or
            self.latexonly or
            self.dot or
            self.anchor or
            self.formula or
            self.ref or
            self.copy or
            self.trademark or
            self.registered or
            self.lsquo or
            self.rsquo or
            self.ldquo or
            self.rdquo or
            self.ndash or
            self.mdash or
            self.umlaut or
            self.acute or
            self.grave or
            self.circ or
            self.slash or
            self.tilde or
            self.cedil or
            self.ring or
            self.szlig or
            self.nonbreakablespace or
            self.aelig or
            self.AElig or
            self.Gamma or
            self.Delta or
            self.Theta or
            self.Lambda or
            self.Xi or
            self.Pi or
            self.Sigma or
            self.Upsilon or
            self.Phi or
            self.Psi or
            self.Omega or
            self.alpha or
            self.beta or
            self.gamma or
            self.delta or
            self.epsilon or
            self.zeta or
            self.eta or
            self.theta or
            self.iota or
            self.kappa or
            self.lambda_ or
            self.mu or
            self.nu or
            self.xi or
            self.pi or
            self.rho or
            self.sigma or
            self.tau or
            self.upsilon or
            self.phi or
            self.chi or
            self.psi or
            self.omega or
            self.sigmaf or
            self.sect or
            self.deg or
            self.prime or
            self.Prime or
            self.infin or
            self.empty or
            self.plusmn or
            self.times or
            self.minus or
            self.sdot or
            self.part or
            self.nabla or
            self.radic or
            self.perp or
            self.sum or
            self.int or
            self.prod or
            self.sim or
            self.asymp or
            self.ne or
            self.equiv or
            self.prop or
            self.le or
            self.ge or
            self.larr or
            self.rarr or
            self.isin or
            self.notin or
            self.lceil or
            self.rceil or
            self.lfloor or
            self.rfloor or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docURLLink', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docURLLink')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docURLLink'):
        if self.url is not None and 'url' not in already_processed:
            already_processed.add('url')
            outfile.write(' url=%s' % (self.gds_format_string(quote_attrib(self.url).encode(ExternalEncoding), input_name='url'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docURLLink', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docURLLink'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.url is not None and 'url' not in already_processed:
            already_processed.add('url')
            showIndent(outfile, level)
            outfile.write('url="%s",\n' % (self.url,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('url', node)
        if value is not None and 'url' not in already_processed:
            already_processed.add('url')
            self.url = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ulink':
            obj_ = docURLLink.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ulink', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ulink'):
              self.add_ulink(obj_.value)
            elif hasattr(self, 'set_ulink'):
              self.set_ulink(obj_.value)
        elif nodeName_ == 'bold':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'bold', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_bold'):
              self.add_bold(obj_.value)
            elif hasattr(self, 'set_bold'):
              self.set_bold(obj_.value)
        elif nodeName_ == 'emphasis':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'emphasis', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_emphasis'):
              self.add_emphasis(obj_.value)
            elif hasattr(self, 'set_emphasis'):
              self.set_emphasis(obj_.value)
        elif nodeName_ == 'computeroutput':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'computeroutput', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_computeroutput'):
              self.add_computeroutput(obj_.value)
            elif hasattr(self, 'set_computeroutput'):
              self.set_computeroutput(obj_.value)
        elif nodeName_ == 'subscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'subscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_subscript'):
              self.add_subscript(obj_.value)
            elif hasattr(self, 'set_subscript'):
              self.set_subscript(obj_.value)
        elif nodeName_ == 'superscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'superscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_superscript'):
              self.add_superscript(obj_.value)
            elif hasattr(self, 'set_superscript'):
              self.set_superscript(obj_.value)
        elif nodeName_ == 'center':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'center', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_center'):
              self.add_center(obj_.value)
            elif hasattr(self, 'set_center'):
              self.set_center(obj_.value)
        elif nodeName_ == 'small':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'small', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_small'):
              self.add_small(obj_.value)
            elif hasattr(self, 'set_small'):
              self.set_small(obj_.value)
        elif nodeName_ == 'htmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'htmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'manonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'manonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'xmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'xmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'rtfonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'rtfonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'latexonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'latexonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'dot' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'dot', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'anchor':
            obj_ = docAnchorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'anchor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_anchor'):
              self.add_anchor(obj_.value)
            elif hasattr(self, 'set_anchor'):
              self.set_anchor(obj_.value)
        elif nodeName_ == 'formula':
            obj_ = docFormulaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'formula', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_formula'):
              self.add_formula(obj_.value)
            elif hasattr(self, 'set_formula'):
              self.set_formula(obj_.value)
        elif nodeName_ == 'ref':
            obj_ = docRefTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        elif nodeName_ == 'copy':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copy', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copy'):
              self.add_copy(obj_.value)
            elif hasattr(self, 'set_copy'):
              self.set_copy(obj_.value)
        elif nodeName_ == 'trademark':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'trademark', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_trademark'):
              self.add_trademark(obj_.value)
            elif hasattr(self, 'set_trademark'):
              self.set_trademark(obj_.value)
        elif nodeName_ == 'registered':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'registered', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_registered'):
              self.add_registered(obj_.value)
            elif hasattr(self, 'set_registered'):
              self.set_registered(obj_.value)
        elif nodeName_ == 'lsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lsquo'):
              self.add_lsquo(obj_.value)
            elif hasattr(self, 'set_lsquo'):
              self.set_lsquo(obj_.value)
        elif nodeName_ == 'rsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rsquo'):
              self.add_rsquo(obj_.value)
            elif hasattr(self, 'set_rsquo'):
              self.set_rsquo(obj_.value)
        elif nodeName_ == 'ldquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ldquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ldquo'):
              self.add_ldquo(obj_.value)
            elif hasattr(self, 'set_ldquo'):
              self.set_ldquo(obj_.value)
        elif nodeName_ == 'rdquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rdquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rdquo'):
              self.add_rdquo(obj_.value)
            elif hasattr(self, 'set_rdquo'):
              self.set_rdquo(obj_.value)
        elif nodeName_ == 'ndash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ndash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ndash'):
              self.add_ndash(obj_.value)
            elif hasattr(self, 'set_ndash'):
              self.set_ndash(obj_.value)
        elif nodeName_ == 'mdash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mdash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mdash'):
              self.add_mdash(obj_.value)
            elif hasattr(self, 'set_mdash'):
              self.set_mdash(obj_.value)
        elif nodeName_ == 'umlaut':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'umlaut', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_umlaut'):
              self.add_umlaut(obj_.value)
            elif hasattr(self, 'set_umlaut'):
              self.set_umlaut(obj_.value)
        elif nodeName_ == 'acute':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'acute', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_acute'):
              self.add_acute(obj_.value)
            elif hasattr(self, 'set_acute'):
              self.set_acute(obj_.value)
        elif nodeName_ == 'grave':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'grave', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_grave'):
              self.add_grave(obj_.value)
            elif hasattr(self, 'set_grave'):
              self.set_grave(obj_.value)
        elif nodeName_ == 'circ':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circ', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_circ'):
              self.add_circ(obj_.value)
            elif hasattr(self, 'set_circ'):
              self.set_circ(obj_.value)
        elif nodeName_ == 'slash':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'slash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_slash'):
              self.add_slash(obj_.value)
            elif hasattr(self, 'set_slash'):
              self.set_slash(obj_.value)
        elif nodeName_ == 'tilde':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tilde', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tilde'):
              self.add_tilde(obj_.value)
            elif hasattr(self, 'set_tilde'):
              self.set_tilde(obj_.value)
        elif nodeName_ == 'cedil':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cedil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_cedil'):
              self.add_cedil(obj_.value)
            elif hasattr(self, 'set_cedil'):
              self.set_cedil(obj_.value)
        elif nodeName_ == 'ring':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ring', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ring'):
              self.add_ring(obj_.value)
            elif hasattr(self, 'set_ring'):
              self.set_ring(obj_.value)
        elif nodeName_ == 'szlig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'szlig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_szlig'):
              self.add_szlig(obj_.value)
            elif hasattr(self, 'set_szlig'):
              self.set_szlig(obj_.value)
        elif nodeName_ == 'nonbreakablespace':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nonbreakablespace', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nonbreakablespace'):
              self.add_nonbreakablespace(obj_.value)
            elif hasattr(self, 'set_nonbreakablespace'):
              self.set_nonbreakablespace(obj_.value)
        elif nodeName_ == 'aelig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'aelig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_aelig'):
              self.add_aelig(obj_.value)
            elif hasattr(self, 'set_aelig'):
              self.set_aelig(obj_.value)
        elif nodeName_ == 'AElig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AElig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AElig'):
              self.add_AElig(obj_.value)
            elif hasattr(self, 'set_AElig'):
              self.set_AElig(obj_.value)
        elif nodeName_ == 'Gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Gamma'):
              self.add_Gamma(obj_.value)
            elif hasattr(self, 'set_Gamma'):
              self.set_Gamma(obj_.value)
        elif nodeName_ == 'Delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Delta'):
              self.add_Delta(obj_.value)
            elif hasattr(self, 'set_Delta'):
              self.set_Delta(obj_.value)
        elif nodeName_ == 'Theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Theta'):
              self.add_Theta(obj_.value)
            elif hasattr(self, 'set_Theta'):
              self.set_Theta(obj_.value)
        elif nodeName_ == 'Lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Lambda'):
              self.add_Lambda(obj_.value)
            elif hasattr(self, 'set_Lambda'):
              self.set_Lambda(obj_.value)
        elif nodeName_ == 'Xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Xi'):
              self.add_Xi(obj_.value)
            elif hasattr(self, 'set_Xi'):
              self.set_Xi(obj_.value)
        elif nodeName_ == 'Pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Pi'):
              self.add_Pi(obj_.value)
            elif hasattr(self, 'set_Pi'):
              self.set_Pi(obj_.value)
        elif nodeName_ == 'Sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Sigma'):
              self.add_Sigma(obj_.value)
            elif hasattr(self, 'set_Sigma'):
              self.set_Sigma(obj_.value)
        elif nodeName_ == 'Upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Upsilon'):
              self.add_Upsilon(obj_.value)
            elif hasattr(self, 'set_Upsilon'):
              self.set_Upsilon(obj_.value)
        elif nodeName_ == 'Phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Phi'):
              self.add_Phi(obj_.value)
            elif hasattr(self, 'set_Phi'):
              self.set_Phi(obj_.value)
        elif nodeName_ == 'Psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Psi'):
              self.add_Psi(obj_.value)
            elif hasattr(self, 'set_Psi'):
              self.set_Psi(obj_.value)
        elif nodeName_ == 'Omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Omega'):
              self.add_Omega(obj_.value)
            elif hasattr(self, 'set_Omega'):
              self.set_Omega(obj_.value)
        elif nodeName_ == 'alpha':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'alpha', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_alpha'):
              self.add_alpha(obj_.value)
            elif hasattr(self, 'set_alpha'):
              self.set_alpha(obj_.value)
        elif nodeName_ == 'beta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'beta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_beta'):
              self.add_beta(obj_.value)
            elif hasattr(self, 'set_beta'):
              self.set_beta(obj_.value)
        elif nodeName_ == 'gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_gamma'):
              self.add_gamma(obj_.value)
            elif hasattr(self, 'set_gamma'):
              self.set_gamma(obj_.value)
        elif nodeName_ == 'delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_delta'):
              self.add_delta(obj_.value)
            elif hasattr(self, 'set_delta'):
              self.set_delta(obj_.value)
        elif nodeName_ == 'epsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'epsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_epsilon'):
              self.add_epsilon(obj_.value)
            elif hasattr(self, 'set_epsilon'):
              self.set_epsilon(obj_.value)
        elif nodeName_ == 'zeta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'zeta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_zeta'):
              self.add_zeta(obj_.value)
            elif hasattr(self, 'set_zeta'):
              self.set_zeta(obj_.value)
        elif nodeName_ == 'eta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'eta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_eta'):
              self.add_eta(obj_.value)
            elif hasattr(self, 'set_eta'):
              self.set_eta(obj_.value)
        elif nodeName_ == 'theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_theta'):
              self.add_theta(obj_.value)
            elif hasattr(self, 'set_theta'):
              self.set_theta(obj_.value)
        elif nodeName_ == 'iota':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'iota', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_iota'):
              self.add_iota(obj_.value)
            elif hasattr(self, 'set_iota'):
              self.set_iota(obj_.value)
        elif nodeName_ == 'kappa':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'kappa', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_kappa'):
              self.add_kappa(obj_.value)
            elif hasattr(self, 'set_kappa'):
              self.set_kappa(obj_.value)
        elif nodeName_ == 'lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lambda'):
              self.add_lambda(obj_.value)
            elif hasattr(self, 'set_lambda'):
              self.set_lambda(obj_.value)
        elif nodeName_ == 'mu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mu'):
              self.add_mu(obj_.value)
            elif hasattr(self, 'set_mu'):
              self.set_mu(obj_.value)
        elif nodeName_ == 'nu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nu'):
              self.add_nu(obj_.value)
            elif hasattr(self, 'set_nu'):
              self.set_nu(obj_.value)
        elif nodeName_ == 'xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xi'):
              self.add_xi(obj_.value)
            elif hasattr(self, 'set_xi'):
              self.set_xi(obj_.value)
        elif nodeName_ == 'pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_pi'):
              self.add_pi(obj_.value)
            elif hasattr(self, 'set_pi'):
              self.set_pi(obj_.value)
        elif nodeName_ == 'rho':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rho', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rho'):
              self.add_rho(obj_.value)
            elif hasattr(self, 'set_rho'):
              self.set_rho(obj_.value)
        elif nodeName_ == 'sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigma'):
              self.add_sigma(obj_.value)
            elif hasattr(self, 'set_sigma'):
              self.set_sigma(obj_.value)
        elif nodeName_ == 'tau':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tau', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tau'):
              self.add_tau(obj_.value)
            elif hasattr(self, 'set_tau'):
              self.set_tau(obj_.value)
        elif nodeName_ == 'upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_upsilon'):
              self.add_upsilon(obj_.value)
            elif hasattr(self, 'set_upsilon'):
              self.set_upsilon(obj_.value)
        elif nodeName_ == 'phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_phi'):
              self.add_phi(obj_.value)
            elif hasattr(self, 'set_phi'):
              self.set_phi(obj_.value)
        elif nodeName_ == 'chi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'chi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_chi'):
              self.add_chi(obj_.value)
            elif hasattr(self, 'set_chi'):
              self.set_chi(obj_.value)
        elif nodeName_ == 'psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_psi'):
              self.add_psi(obj_.value)
            elif hasattr(self, 'set_psi'):
              self.set_psi(obj_.value)
        elif nodeName_ == 'omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_omega'):
              self.add_omega(obj_.value)
            elif hasattr(self, 'set_omega'):
              self.set_omega(obj_.value)
        elif nodeName_ == 'sigmaf':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigmaf', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigmaf'):
              self.add_sigmaf(obj_.value)
            elif hasattr(self, 'set_sigmaf'):
              self.set_sigmaf(obj_.value)
        elif nodeName_ == 'sect':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect'):
              self.add_sect(obj_.value)
            elif hasattr(self, 'set_sect'):
              self.set_sect(obj_.value)
        elif nodeName_ == 'deg':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'deg', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_deg'):
              self.add_deg(obj_.value)
            elif hasattr(self, 'set_deg'):
              self.set_deg(obj_.value)
        elif nodeName_ == 'prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prime'):
              self.add_prime(obj_.value)
            elif hasattr(self, 'set_prime'):
              self.set_prime(obj_.value)
        elif nodeName_ == 'Prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Prime'):
              self.add_Prime(obj_.value)
            elif hasattr(self, 'set_Prime'):
              self.set_Prime(obj_.value)
        elif nodeName_ == 'infin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'infin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_infin'):
              self.add_infin(obj_.value)
            elif hasattr(self, 'set_infin'):
              self.set_infin(obj_.value)
        elif nodeName_ == 'empty':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'empty', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_empty'):
              self.add_empty(obj_.value)
            elif hasattr(self, 'set_empty'):
              self.set_empty(obj_.value)
        elif nodeName_ == 'plusmn':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'plusmn', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_plusmn'):
              self.add_plusmn(obj_.value)
            elif hasattr(self, 'set_plusmn'):
              self.set_plusmn(obj_.value)
        elif nodeName_ == 'times':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'times', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_times'):
              self.add_times(obj_.value)
            elif hasattr(self, 'set_times'):
              self.set_times(obj_.value)
        elif nodeName_ == 'minus':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'minus', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_minus'):
              self.add_minus(obj_.value)
            elif hasattr(self, 'set_minus'):
              self.set_minus(obj_.value)
        elif nodeName_ == 'sdot':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sdot', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sdot'):
              self.add_sdot(obj_.value)
            elif hasattr(self, 'set_sdot'):
              self.set_sdot(obj_.value)
        elif nodeName_ == 'part':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'part', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_part'):
              self.add_part(obj_.value)
            elif hasattr(self, 'set_part'):
              self.set_part(obj_.value)
        elif nodeName_ == 'nabla':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nabla', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nabla'):
              self.add_nabla(obj_.value)
            elif hasattr(self, 'set_nabla'):
              self.set_nabla(obj_.value)
        elif nodeName_ == 'radic':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radic', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_radic'):
              self.add_radic(obj_.value)
            elif hasattr(self, 'set_radic'):
              self.set_radic(obj_.value)
        elif nodeName_ == 'perp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'perp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_perp'):
              self.add_perp(obj_.value)
            elif hasattr(self, 'set_perp'):
              self.set_perp(obj_.value)
        elif nodeName_ == 'sum':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sum', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sum'):
              self.add_sum(obj_.value)
            elif hasattr(self, 'set_sum'):
              self.set_sum(obj_.value)
        elif nodeName_ == 'int':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'int', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_int'):
              self.add_int(obj_.value)
            elif hasattr(self, 'set_int'):
              self.set_int(obj_.value)
        elif nodeName_ == 'prod':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prod'):
              self.add_prod(obj_.value)
            elif hasattr(self, 'set_prod'):
              self.set_prod(obj_.value)
        elif nodeName_ == 'sim':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sim', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sim'):
              self.add_sim(obj_.value)
            elif hasattr(self, 'set_sim'):
              self.set_sim(obj_.value)
        elif nodeName_ == 'asymp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'asymp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_asymp'):
              self.add_asymp(obj_.value)
            elif hasattr(self, 'set_asymp'):
              self.set_asymp(obj_.value)
        elif nodeName_ == 'ne':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ne', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ne'):
              self.add_ne(obj_.value)
            elif hasattr(self, 'set_ne'):
              self.set_ne(obj_.value)
        elif nodeName_ == 'equiv':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'equiv', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_equiv'):
              self.add_equiv(obj_.value)
            elif hasattr(self, 'set_equiv'):
              self.set_equiv(obj_.value)
        elif nodeName_ == 'prop':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prop', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prop'):
              self.add_prop(obj_.value)
            elif hasattr(self, 'set_prop'):
              self.set_prop(obj_.value)
        elif nodeName_ == 'le':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'le', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_le'):
              self.add_le(obj_.value)
            elif hasattr(self, 'set_le'):
              self.set_le(obj_.value)
        elif nodeName_ == 'ge':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ge', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ge'):
              self.add_ge(obj_.value)
            elif hasattr(self, 'set_ge'):
              self.set_ge(obj_.value)
        elif nodeName_ == 'larr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'larr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_larr'):
              self.add_larr(obj_.value)
            elif hasattr(self, 'set_larr'):
              self.set_larr(obj_.value)
        elif nodeName_ == 'rarr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rarr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rarr'):
              self.add_rarr(obj_.value)
            elif hasattr(self, 'set_rarr'):
              self.set_rarr(obj_.value)
        elif nodeName_ == 'isin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'isin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_isin'):
              self.add_isin(obj_.value)
            elif hasattr(self, 'set_isin'):
              self.set_isin(obj_.value)
        elif nodeName_ == 'notin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'notin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_notin'):
              self.add_notin(obj_.value)
            elif hasattr(self, 'set_notin'):
              self.set_notin(obj_.value)
        elif nodeName_ == 'lceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lceil'):
              self.add_lceil(obj_.value)
            elif hasattr(self, 'set_lceil'):
              self.set_lceil(obj_.value)
        elif nodeName_ == 'rceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rceil'):
              self.add_rceil(obj_.value)
            elif hasattr(self, 'set_rceil'):
              self.set_rceil(obj_.value)
        elif nodeName_ == 'lfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lfloor'):
              self.add_lfloor(obj_.value)
            elif hasattr(self, 'set_lfloor'):
              self.set_lfloor(obj_.value)
        elif nodeName_ == 'rfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rfloor'):
              self.add_rfloor(obj_.value)
            elif hasattr(self, 'set_rfloor'):
              self.set_rfloor(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docURLLink


class docAnchorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, valueOf_=None, mixedclass_=None, content_=None):
        self.id = _cast(None, id)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docAnchorType.subclass:
            return docAnchorType.subclass(*args_, **kwargs_)
        else:
            return docAnchorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docAnchorType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docAnchorType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
        outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docAnchorType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docAnchorType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='docAnchorType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class docAnchorType


class docFormulaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, valueOf_=None, mixedclass_=None, content_=None):
        self.id = _cast(None, id)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docFormulaType.subclass:
            return docFormulaType.subclass(*args_, **kwargs_)
        else:
            return docFormulaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docFormulaType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docFormulaType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
        outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docFormulaType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docFormulaType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='docFormulaType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class docFormulaType


class docIndexEntryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, primaryie=None, secondaryie=None):
        self.primaryie = primaryie
        self.secondaryie = secondaryie
    def factory(*args_, **kwargs_):
        if docIndexEntryType.subclass:
            return docIndexEntryType.subclass(*args_, **kwargs_)
        else:
            return docIndexEntryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_primaryie(self): return self.primaryie
    def set_primaryie(self, primaryie): self.primaryie = primaryie
    def get_secondaryie(self): return self.secondaryie
    def set_secondaryie(self, secondaryie): self.secondaryie = secondaryie
    def hasContent_(self):
        if (
            self.primaryie is not None or
            self.secondaryie is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docIndexEntryType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docIndexEntryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docIndexEntryType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docIndexEntryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.primaryie is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprimaryie>%s</%sprimaryie>%s' % (namespace_, self.gds_format_string(quote_xml(self.primaryie).encode(ExternalEncoding), input_name='primaryie'), namespace_, eol_))
        if self.secondaryie is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssecondaryie>%s</%ssecondaryie>%s' % (namespace_, self.gds_format_string(quote_xml(self.secondaryie).encode(ExternalEncoding), input_name='secondaryie'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='docIndexEntryType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.primaryie is not None:
            showIndent(outfile, level)
            outfile.write('primaryie=%s,\n' % quote_python(self.primaryie).encode(ExternalEncoding))
        if self.secondaryie is not None:
            showIndent(outfile, level)
            outfile.write('secondaryie=%s,\n' % quote_python(self.secondaryie).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'primaryie':
            primaryie_ = child_.text
            primaryie_ = self.gds_validate_string(primaryie_, node, 'primaryie')
            self.primaryie = primaryie_
        elif nodeName_ == 'secondaryie':
            secondaryie_ = child_.text
            secondaryie_ = self.gds_validate_string(secondaryie_, node, 'secondaryie')
            self.secondaryie = secondaryie_
# end class docIndexEntryType


class docListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, listitem=None):
        if listitem is None:
            self.listitem = []
        else:
            self.listitem = listitem
    def factory(*args_, **kwargs_):
        if docListType.subclass:
            return docListType.subclass(*args_, **kwargs_)
        else:
            return docListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_listitem(self): return self.listitem
    def set_listitem(self, listitem): self.listitem = listitem
    def add_listitem(self, value): self.listitem.append(value)
    def insert_listitem(self, index, value): self.listitem[index] = value
    def hasContent_(self):
        if (
            self.listitem
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docListType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for listitem_ in self.listitem:
            listitem_.export(outfile, level, namespace_, name_='listitem', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docListType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('listitem=[\n')
        level += 1
        for listitem_ in self.listitem:
            showIndent(outfile, level)
            outfile.write('model_.docListItemType(\n')
            listitem_.exportLiteral(outfile, level, name_='docListItemType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'listitem':
            obj_ = docListItemType.factory()
            obj_.build(child_)
            self.listitem.append(obj_)
# end class docListType


class docListItemType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, para=None):
        if para is None:
            self.para = []
        else:
            self.para = para
    def factory(*args_, **kwargs_):
        if docListItemType.subclass:
            return docListItemType.subclass(*args_, **kwargs_)
        else:
            return docListItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def hasContent_(self):
        if (
            self.para
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docListItemType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docListItemType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docListItemType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docListItemType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for para_ in self.para:
            para_.export(outfile, level, namespace_, name_='para', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docListItemType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('para=[\n')
        level += 1
        for para_ in self.para:
            showIndent(outfile, level)
            outfile.write('model_.docParaType(\n')
            para_.exportLiteral(outfile, level, name_='docParaType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            self.para.append(obj_)
# end class docListItemType


class docSimpleSectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, kind=None, title=None, para=None, simplesectsep=None):
        self.kind = _cast(None, kind)
        self.title = title
        if para is None:
            self.para = []
        else:
            self.para = para
        self.simplesectsep = simplesectsep
    def factory(*args_, **kwargs_):
        if docSimpleSectType.subclass:
            return docSimpleSectType.subclass(*args_, **kwargs_)
        else:
            return docSimpleSectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_simplesectsep(self): return self.simplesectsep
    def set_simplesectsep(self, simplesectsep): self.simplesectsep = simplesectsep
    def get_kind(self): return self.kind
    def set_kind(self, kind): self.kind = kind
    def validate_DoxSimpleSectKind(self, value):
        # Validate type DoxSimpleSectKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.title is not None or
            self.para or
            self.simplesectsep is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docSimpleSectType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docSimpleSectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docSimpleSectType'):
        if self.kind is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            outfile.write(' kind=%s' % (quote_attrib(self.kind), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docSimpleSectType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.title is not None:
            self.title.export(outfile, level, namespace_, name_='title', pretty_print=pretty_print)
        for para_ in self.para:
            para_.export(outfile, level, namespace_, name_='para', pretty_print=pretty_print)
        if self.simplesectsep is not None:
            self.simplesectsep.export(outfile, level, namespace_, name_='simplesectsep', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docSimpleSectType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.kind is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            showIndent(outfile, level)
            outfile.write('kind="%s",\n' % (self.kind,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.title is not None:
            showIndent(outfile, level)
            outfile.write('title=model_.docTitleType(\n')
            self.title.exportLiteral(outfile, level, name_='title')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('para=[\n')
        level += 1
        for para_ in self.para:
            showIndent(outfile, level)
            outfile.write('model_.docParaType(\n')
            para_.exportLiteral(outfile, level, name_='docParaType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.simplesectsep is not None:
            showIndent(outfile, level)
            outfile.write('simplesectsep=model_.docEmptyType(\n')
            self.simplesectsep.exportLiteral(outfile, level, name_='simplesectsep')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('kind', node)
        if value is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            self.kind = value
            self.validate_DoxSimpleSectKind(self.kind)    # validate type DoxSimpleSectKind
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'title':
            obj_ = docTitleType.factory()
            obj_.build(child_)
            self.title = obj_
        elif nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            self.para.append(obj_)
        elif nodeName_ == 'simplesectsep':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            self.simplesectsep = obj_
# end class docSimpleSectType


class docVarListEntryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, term=None):
        self.term = term
    def factory(*args_, **kwargs_):
        if docVarListEntryType.subclass:
            return docVarListEntryType.subclass(*args_, **kwargs_)
        else:
            return docVarListEntryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_term(self): return self.term
    def set_term(self, term): self.term = term
    def hasContent_(self):
        if (
            self.term is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docVarListEntryType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docVarListEntryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docVarListEntryType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docVarListEntryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.term is not None:
            self.term.export(outfile, level, namespace_, name_='term', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docVarListEntryType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.term is not None:
            showIndent(outfile, level)
            outfile.write('term=model_.docTitleType(\n')
            self.term.exportLiteral(outfile, level, name_='term')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'term':
            obj_ = docTitleType.factory()
            obj_.build(child_)
            self.term = obj_
# end class docVarListEntryType


class docVariableListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, varlistentry=None, listitem=None):
        if varlistentry is None:
            self.varlistentry = []
        else:
            self.varlistentry = varlistentry
        if listitem is None:
            self.listitem = []
        else:
            self.listitem = listitem
    def factory(*args_, **kwargs_):
        if docVariableListType.subclass:
            return docVariableListType.subclass(*args_, **kwargs_)
        else:
            return docVariableListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_varlistentry(self): return self.varlistentry
    def set_varlistentry(self, varlistentry): self.varlistentry = varlistentry
    def add_varlistentry(self, value): self.varlistentry.append(value)
    def insert_varlistentry(self, index, value): self.varlistentry[index] = value
    def get_listitem(self): return self.listitem
    def set_listitem(self, listitem): self.listitem = listitem
    def add_listitem(self, value): self.listitem.append(value)
    def insert_listitem(self, index, value): self.listitem[index] = value
    def hasContent_(self):
        if (
            self.varlistentry or
            self.listitem
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docVariableListType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docVariableListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docVariableListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docVariableListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for varlistentry_ in self.varlistentry:
            varlistentry_.export(outfile, level, namespace_, name_='varlistentry', pretty_print=pretty_print)
        for listitem_ in self.listitem:
            listitem_.export(outfile, level, namespace_, name_='listitem', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docVariableListType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('varlistentry=[\n')
        level += 1
        for varlistentry_ in self.varlistentry:
            showIndent(outfile, level)
            outfile.write('model_.docVarListEntryType(\n')
            varlistentry_.exportLiteral(outfile, level, name_='docVarListEntryType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('listitem=[\n')
        level += 1
        for listitem_ in self.listitem:
            showIndent(outfile, level)
            outfile.write('model_.docListItemType(\n')
            listitem_.exportLiteral(outfile, level, name_='docListItemType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'varlistentry':
            obj_ = docVarListEntryType.factory()
            obj_.build(child_)
            self.varlistentry.append(obj_)
        elif nodeName_ == 'listitem':
            obj_ = docListItemType.factory()
            obj_.build(child_)
            self.listitem.append(obj_)
# end class docVariableListType


class docRefTextType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, kindref=None, external=None, ulink=None, bold=None, emphasis=None, computeroutput=None, subscript=None, superscript=None, center=None, small=None, htmlonly=None, manonly=None, xmlonly=None, rtfonly=None, latexonly=None, dot=None, anchor=None, formula=None, ref=None, copy=None, trademark=None, registered=None, lsquo=None, rsquo=None, ldquo=None, rdquo=None, ndash=None, mdash=None, umlaut=None, acute=None, grave=None, circ=None, slash=None, tilde=None, cedil=None, ring=None, szlig=None, nonbreakablespace=None, aelig=None, AElig=None, Gamma=None, Delta=None, Theta=None, Lambda=None, Xi=None, Pi=None, Sigma=None, Upsilon=None, Phi=None, Psi=None, Omega=None, alpha=None, beta=None, gamma=None, delta=None, epsilon=None, zeta=None, eta=None, theta=None, iota=None, kappa=None, lambda_=None, mu=None, nu=None, xi=None, pi=None, rho=None, sigma=None, tau=None, upsilon=None, phi=None, chi=None, psi=None, omega=None, sigmaf=None, sect=None, deg=None, prime=None, Prime=None, infin=None, empty=None, plusmn=None, times=None, minus=None, sdot=None, part=None, nabla=None, radic=None, perp=None, sum=None, int=None, prod=None, sim=None, asymp=None, ne=None, equiv=None, prop=None, le=None, ge=None, larr=None, rarr=None, isin=None, notin=None, lceil=None, rceil=None, lfloor=None, rfloor=None, valueOf_=None, mixedclass_=None, content_=None):
        self.refid = _cast(None, refid)
        self.kindref = _cast(None, kindref)
        self.external = _cast(None, external)
        if ulink is None:
            self.ulink = []
        else:
            self.ulink = ulink
        if bold is None:
            self.bold = []
        else:
            self.bold = bold
        if emphasis is None:
            self.emphasis = []
        else:
            self.emphasis = emphasis
        if computeroutput is None:
            self.computeroutput = []
        else:
            self.computeroutput = computeroutput
        if subscript is None:
            self.subscript = []
        else:
            self.subscript = subscript
        if superscript is None:
            self.superscript = []
        else:
            self.superscript = superscript
        if center is None:
            self.center = []
        else:
            self.center = center
        if small is None:
            self.small = []
        else:
            self.small = small
        if htmlonly is None:
            self.htmlonly = []
        else:
            self.htmlonly = htmlonly
        if manonly is None:
            self.manonly = []
        else:
            self.manonly = manonly
        if xmlonly is None:
            self.xmlonly = []
        else:
            self.xmlonly = xmlonly
        if rtfonly is None:
            self.rtfonly = []
        else:
            self.rtfonly = rtfonly
        if latexonly is None:
            self.latexonly = []
        else:
            self.latexonly = latexonly
        if dot is None:
            self.dot = []
        else:
            self.dot = dot
        if anchor is None:
            self.anchor = []
        else:
            self.anchor = anchor
        if formula is None:
            self.formula = []
        else:
            self.formula = formula
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        if copy is None:
            self.copy = []
        else:
            self.copy = copy
        if trademark is None:
            self.trademark = []
        else:
            self.trademark = trademark
        if registered is None:
            self.registered = []
        else:
            self.registered = registered
        if lsquo is None:
            self.lsquo = []
        else:
            self.lsquo = lsquo
        if rsquo is None:
            self.rsquo = []
        else:
            self.rsquo = rsquo
        if ldquo is None:
            self.ldquo = []
        else:
            self.ldquo = ldquo
        if rdquo is None:
            self.rdquo = []
        else:
            self.rdquo = rdquo
        if ndash is None:
            self.ndash = []
        else:
            self.ndash = ndash
        if mdash is None:
            self.mdash = []
        else:
            self.mdash = mdash
        if umlaut is None:
            self.umlaut = []
        else:
            self.umlaut = umlaut
        if acute is None:
            self.acute = []
        else:
            self.acute = acute
        if grave is None:
            self.grave = []
        else:
            self.grave = grave
        if circ is None:
            self.circ = []
        else:
            self.circ = circ
        if slash is None:
            self.slash = []
        else:
            self.slash = slash
        if tilde is None:
            self.tilde = []
        else:
            self.tilde = tilde
        if cedil is None:
            self.cedil = []
        else:
            self.cedil = cedil
        if ring is None:
            self.ring = []
        else:
            self.ring = ring
        if szlig is None:
            self.szlig = []
        else:
            self.szlig = szlig
        if nonbreakablespace is None:
            self.nonbreakablespace = []
        else:
            self.nonbreakablespace = nonbreakablespace
        if aelig is None:
            self.aelig = []
        else:
            self.aelig = aelig
        if AElig is None:
            self.AElig = []
        else:
            self.AElig = AElig
        if Gamma is None:
            self.Gamma = []
        else:
            self.Gamma = Gamma
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Theta is None:
            self.Theta = []
        else:
            self.Theta = Theta
        if Lambda is None:
            self.Lambda = []
        else:
            self.Lambda = Lambda
        if Xi is None:
            self.Xi = []
        else:
            self.Xi = Xi
        if Pi is None:
            self.Pi = []
        else:
            self.Pi = Pi
        if Sigma is None:
            self.Sigma = []
        else:
            self.Sigma = Sigma
        if Upsilon is None:
            self.Upsilon = []
        else:
            self.Upsilon = Upsilon
        if Phi is None:
            self.Phi = []
        else:
            self.Phi = Phi
        if Psi is None:
            self.Psi = []
        else:
            self.Psi = Psi
        if Omega is None:
            self.Omega = []
        else:
            self.Omega = Omega
        if alpha is None:
            self.alpha = []
        else:
            self.alpha = alpha
        if beta is None:
            self.beta = []
        else:
            self.beta = beta
        if gamma is None:
            self.gamma = []
        else:
            self.gamma = gamma
        if delta is None:
            self.delta = []
        else:
            self.delta = delta
        if epsilon is None:
            self.epsilon = []
        else:
            self.epsilon = epsilon
        if zeta is None:
            self.zeta = []
        else:
            self.zeta = zeta
        if eta is None:
            self.eta = []
        else:
            self.eta = eta
        if theta is None:
            self.theta = []
        else:
            self.theta = theta
        if iota is None:
            self.iota = []
        else:
            self.iota = iota
        if kappa is None:
            self.kappa = []
        else:
            self.kappa = kappa
        if lambda_ is None:
            self.lambda_ = []
        else:
            self.lambda_ = lambda_
        if mu is None:
            self.mu = []
        else:
            self.mu = mu
        if nu is None:
            self.nu = []
        else:
            self.nu = nu
        if xi is None:
            self.xi = []
        else:
            self.xi = xi
        if pi is None:
            self.pi = []
        else:
            self.pi = pi
        if rho is None:
            self.rho = []
        else:
            self.rho = rho
        if sigma is None:
            self.sigma = []
        else:
            self.sigma = sigma
        if tau is None:
            self.tau = []
        else:
            self.tau = tau
        if upsilon is None:
            self.upsilon = []
        else:
            self.upsilon = upsilon
        if phi is None:
            self.phi = []
        else:
            self.phi = phi
        if chi is None:
            self.chi = []
        else:
            self.chi = chi
        if psi is None:
            self.psi = []
        else:
            self.psi = psi
        if omega is None:
            self.omega = []
        else:
            self.omega = omega
        if sigmaf is None:
            self.sigmaf = []
        else:
            self.sigmaf = sigmaf
        if sect is None:
            self.sect = []
        else:
            self.sect = sect
        if deg is None:
            self.deg = []
        else:
            self.deg = deg
        if prime is None:
            self.prime = []
        else:
            self.prime = prime
        if Prime is None:
            self.Prime = []
        else:
            self.Prime = Prime
        if infin is None:
            self.infin = []
        else:
            self.infin = infin
        if empty is None:
            self.empty = []
        else:
            self.empty = empty
        if plusmn is None:
            self.plusmn = []
        else:
            self.plusmn = plusmn
        if times is None:
            self.times = []
        else:
            self.times = times
        if minus is None:
            self.minus = []
        else:
            self.minus = minus
        if sdot is None:
            self.sdot = []
        else:
            self.sdot = sdot
        if part is None:
            self.part = []
        else:
            self.part = part
        if nabla is None:
            self.nabla = []
        else:
            self.nabla = nabla
        if radic is None:
            self.radic = []
        else:
            self.radic = radic
        if perp is None:
            self.perp = []
        else:
            self.perp = perp
        if sum is None:
            self.sum = []
        else:
            self.sum = sum
        if int is None:
            self.int = []
        else:
            self.int = int
        if prod is None:
            self.prod = []
        else:
            self.prod = prod
        if sim is None:
            self.sim = []
        else:
            self.sim = sim
        if asymp is None:
            self.asymp = []
        else:
            self.asymp = asymp
        if ne is None:
            self.ne = []
        else:
            self.ne = ne
        if equiv is None:
            self.equiv = []
        else:
            self.equiv = equiv
        if prop is None:
            self.prop = []
        else:
            self.prop = prop
        if le is None:
            self.le = []
        else:
            self.le = le
        if ge is None:
            self.ge = []
        else:
            self.ge = ge
        if larr is None:
            self.larr = []
        else:
            self.larr = larr
        if rarr is None:
            self.rarr = []
        else:
            self.rarr = rarr
        if isin is None:
            self.isin = []
        else:
            self.isin = isin
        if notin is None:
            self.notin = []
        else:
            self.notin = notin
        if lceil is None:
            self.lceil = []
        else:
            self.lceil = lceil
        if rceil is None:
            self.rceil = []
        else:
            self.rceil = rceil
        if lfloor is None:
            self.lfloor = []
        else:
            self.lfloor = lfloor
        if rfloor is None:
            self.rfloor = []
        else:
            self.rfloor = rfloor
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docRefTextType.subclass:
            return docRefTextType.subclass(*args_, **kwargs_)
        else:
            return docRefTextType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ulink(self): return self.ulink
    def set_ulink(self, ulink): self.ulink = ulink
    def add_ulink(self, value): self.ulink.append(value)
    def insert_ulink(self, index, value): self.ulink[index] = value
    def get_bold(self): return self.bold
    def set_bold(self, bold): self.bold = bold
    def add_bold(self, value): self.bold.append(value)
    def insert_bold(self, index, value): self.bold[index] = value
    def get_emphasis(self): return self.emphasis
    def set_emphasis(self, emphasis): self.emphasis = emphasis
    def add_emphasis(self, value): self.emphasis.append(value)
    def insert_emphasis(self, index, value): self.emphasis[index] = value
    def get_computeroutput(self): return self.computeroutput
    def set_computeroutput(self, computeroutput): self.computeroutput = computeroutput
    def add_computeroutput(self, value): self.computeroutput.append(value)
    def insert_computeroutput(self, index, value): self.computeroutput[index] = value
    def get_subscript(self): return self.subscript
    def set_subscript(self, subscript): self.subscript = subscript
    def add_subscript(self, value): self.subscript.append(value)
    def insert_subscript(self, index, value): self.subscript[index] = value
    def get_superscript(self): return self.superscript
    def set_superscript(self, superscript): self.superscript = superscript
    def add_superscript(self, value): self.superscript.append(value)
    def insert_superscript(self, index, value): self.superscript[index] = value
    def get_center(self): return self.center
    def set_center(self, center): self.center = center
    def add_center(self, value): self.center.append(value)
    def insert_center(self, index, value): self.center[index] = value
    def get_small(self): return self.small
    def set_small(self, small): self.small = small
    def add_small(self, value): self.small.append(value)
    def insert_small(self, index, value): self.small[index] = value
    def get_htmlonly(self): return self.htmlonly
    def set_htmlonly(self, htmlonly): self.htmlonly = htmlonly
    def add_htmlonly(self, value): self.htmlonly.append(value)
    def insert_htmlonly(self, index, value): self.htmlonly[index] = value
    def get_manonly(self): return self.manonly
    def set_manonly(self, manonly): self.manonly = manonly
    def add_manonly(self, value): self.manonly.append(value)
    def insert_manonly(self, index, value): self.manonly[index] = value
    def get_xmlonly(self): return self.xmlonly
    def set_xmlonly(self, xmlonly): self.xmlonly = xmlonly
    def add_xmlonly(self, value): self.xmlonly.append(value)
    def insert_xmlonly(self, index, value): self.xmlonly[index] = value
    def get_rtfonly(self): return self.rtfonly
    def set_rtfonly(self, rtfonly): self.rtfonly = rtfonly
    def add_rtfonly(self, value): self.rtfonly.append(value)
    def insert_rtfonly(self, index, value): self.rtfonly[index] = value
    def get_latexonly(self): return self.latexonly
    def set_latexonly(self, latexonly): self.latexonly = latexonly
    def add_latexonly(self, value): self.latexonly.append(value)
    def insert_latexonly(self, index, value): self.latexonly[index] = value
    def get_dot(self): return self.dot
    def set_dot(self, dot): self.dot = dot
    def add_dot(self, value): self.dot.append(value)
    def insert_dot(self, index, value): self.dot[index] = value
    def get_anchor(self): return self.anchor
    def set_anchor(self, anchor): self.anchor = anchor
    def add_anchor(self, value): self.anchor.append(value)
    def insert_anchor(self, index, value): self.anchor[index] = value
    def get_formula(self): return self.formula
    def set_formula(self, formula): self.formula = formula
    def add_formula(self, value): self.formula.append(value)
    def insert_formula(self, index, value): self.formula[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_copy(self): return self.copy
    def set_copy(self, copy): self.copy = copy
    def add_copy(self, value): self.copy.append(value)
    def insert_copy(self, index, value): self.copy[index] = value
    def get_trademark(self): return self.trademark
    def set_trademark(self, trademark): self.trademark = trademark
    def add_trademark(self, value): self.trademark.append(value)
    def insert_trademark(self, index, value): self.trademark[index] = value
    def get_registered(self): return self.registered
    def set_registered(self, registered): self.registered = registered
    def add_registered(self, value): self.registered.append(value)
    def insert_registered(self, index, value): self.registered[index] = value
    def get_lsquo(self): return self.lsquo
    def set_lsquo(self, lsquo): self.lsquo = lsquo
    def add_lsquo(self, value): self.lsquo.append(value)
    def insert_lsquo(self, index, value): self.lsquo[index] = value
    def get_rsquo(self): return self.rsquo
    def set_rsquo(self, rsquo): self.rsquo = rsquo
    def add_rsquo(self, value): self.rsquo.append(value)
    def insert_rsquo(self, index, value): self.rsquo[index] = value
    def get_ldquo(self): return self.ldquo
    def set_ldquo(self, ldquo): self.ldquo = ldquo
    def add_ldquo(self, value): self.ldquo.append(value)
    def insert_ldquo(self, index, value): self.ldquo[index] = value
    def get_rdquo(self): return self.rdquo
    def set_rdquo(self, rdquo): self.rdquo = rdquo
    def add_rdquo(self, value): self.rdquo.append(value)
    def insert_rdquo(self, index, value): self.rdquo[index] = value
    def get_ndash(self): return self.ndash
    def set_ndash(self, ndash): self.ndash = ndash
    def add_ndash(self, value): self.ndash.append(value)
    def insert_ndash(self, index, value): self.ndash[index] = value
    def get_mdash(self): return self.mdash
    def set_mdash(self, mdash): self.mdash = mdash
    def add_mdash(self, value): self.mdash.append(value)
    def insert_mdash(self, index, value): self.mdash[index] = value
    def get_umlaut(self): return self.umlaut
    def set_umlaut(self, umlaut): self.umlaut = umlaut
    def add_umlaut(self, value): self.umlaut.append(value)
    def insert_umlaut(self, index, value): self.umlaut[index] = value
    def get_acute(self): return self.acute
    def set_acute(self, acute): self.acute = acute
    def add_acute(self, value): self.acute.append(value)
    def insert_acute(self, index, value): self.acute[index] = value
    def get_grave(self): return self.grave
    def set_grave(self, grave): self.grave = grave
    def add_grave(self, value): self.grave.append(value)
    def insert_grave(self, index, value): self.grave[index] = value
    def get_circ(self): return self.circ
    def set_circ(self, circ): self.circ = circ
    def add_circ(self, value): self.circ.append(value)
    def insert_circ(self, index, value): self.circ[index] = value
    def get_slash(self): return self.slash
    def set_slash(self, slash): self.slash = slash
    def add_slash(self, value): self.slash.append(value)
    def insert_slash(self, index, value): self.slash[index] = value
    def get_tilde(self): return self.tilde
    def set_tilde(self, tilde): self.tilde = tilde
    def add_tilde(self, value): self.tilde.append(value)
    def insert_tilde(self, index, value): self.tilde[index] = value
    def get_cedil(self): return self.cedil
    def set_cedil(self, cedil): self.cedil = cedil
    def add_cedil(self, value): self.cedil.append(value)
    def insert_cedil(self, index, value): self.cedil[index] = value
    def get_ring(self): return self.ring
    def set_ring(self, ring): self.ring = ring
    def add_ring(self, value): self.ring.append(value)
    def insert_ring(self, index, value): self.ring[index] = value
    def get_szlig(self): return self.szlig
    def set_szlig(self, szlig): self.szlig = szlig
    def add_szlig(self, value): self.szlig.append(value)
    def insert_szlig(self, index, value): self.szlig[index] = value
    def get_nonbreakablespace(self): return self.nonbreakablespace
    def set_nonbreakablespace(self, nonbreakablespace): self.nonbreakablespace = nonbreakablespace
    def add_nonbreakablespace(self, value): self.nonbreakablespace.append(value)
    def insert_nonbreakablespace(self, index, value): self.nonbreakablespace[index] = value
    def get_aelig(self): return self.aelig
    def set_aelig(self, aelig): self.aelig = aelig
    def add_aelig(self, value): self.aelig.append(value)
    def insert_aelig(self, index, value): self.aelig[index] = value
    def get_AElig(self): return self.AElig
    def set_AElig(self, AElig): self.AElig = AElig
    def add_AElig(self, value): self.AElig.append(value)
    def insert_AElig(self, index, value): self.AElig[index] = value
    def get_Gamma(self): return self.Gamma
    def set_Gamma(self, Gamma): self.Gamma = Gamma
    def add_Gamma(self, value): self.Gamma.append(value)
    def insert_Gamma(self, index, value): self.Gamma[index] = value
    def get_Delta(self): return self.Delta
    def set_Delta(self, Delta): self.Delta = Delta
    def add_Delta(self, value): self.Delta.append(value)
    def insert_Delta(self, index, value): self.Delta[index] = value
    def get_Theta(self): return self.Theta
    def set_Theta(self, Theta): self.Theta = Theta
    def add_Theta(self, value): self.Theta.append(value)
    def insert_Theta(self, index, value): self.Theta[index] = value
    def get_Lambda(self): return self.Lambda
    def set_Lambda(self, Lambda): self.Lambda = Lambda
    def add_Lambda(self, value): self.Lambda.append(value)
    def insert_Lambda(self, index, value): self.Lambda[index] = value
    def get_Xi(self): return self.Xi
    def set_Xi(self, Xi): self.Xi = Xi
    def add_Xi(self, value): self.Xi.append(value)
    def insert_Xi(self, index, value): self.Xi[index] = value
    def get_Pi(self): return self.Pi
    def set_Pi(self, Pi): self.Pi = Pi
    def add_Pi(self, value): self.Pi.append(value)
    def insert_Pi(self, index, value): self.Pi[index] = value
    def get_Sigma(self): return self.Sigma
    def set_Sigma(self, Sigma): self.Sigma = Sigma
    def add_Sigma(self, value): self.Sigma.append(value)
    def insert_Sigma(self, index, value): self.Sigma[index] = value
    def get_Upsilon(self): return self.Upsilon
    def set_Upsilon(self, Upsilon): self.Upsilon = Upsilon
    def add_Upsilon(self, value): self.Upsilon.append(value)
    def insert_Upsilon(self, index, value): self.Upsilon[index] = value
    def get_Phi(self): return self.Phi
    def set_Phi(self, Phi): self.Phi = Phi
    def add_Phi(self, value): self.Phi.append(value)
    def insert_Phi(self, index, value): self.Phi[index] = value
    def get_Psi(self): return self.Psi
    def set_Psi(self, Psi): self.Psi = Psi
    def add_Psi(self, value): self.Psi.append(value)
    def insert_Psi(self, index, value): self.Psi[index] = value
    def get_Omega(self): return self.Omega
    def set_Omega(self, Omega): self.Omega = Omega
    def add_Omega(self, value): self.Omega.append(value)
    def insert_Omega(self, index, value): self.Omega[index] = value
    def get_alpha(self): return self.alpha
    def set_alpha(self, alpha): self.alpha = alpha
    def add_alpha(self, value): self.alpha.append(value)
    def insert_alpha(self, index, value): self.alpha[index] = value
    def get_beta(self): return self.beta
    def set_beta(self, beta): self.beta = beta
    def add_beta(self, value): self.beta.append(value)
    def insert_beta(self, index, value): self.beta[index] = value
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def add_gamma(self, value): self.gamma.append(value)
    def insert_gamma(self, index, value): self.gamma[index] = value
    def get_delta(self): return self.delta
    def set_delta(self, delta): self.delta = delta
    def add_delta(self, value): self.delta.append(value)
    def insert_delta(self, index, value): self.delta[index] = value
    def get_epsilon(self): return self.epsilon
    def set_epsilon(self, epsilon): self.epsilon = epsilon
    def add_epsilon(self, value): self.epsilon.append(value)
    def insert_epsilon(self, index, value): self.epsilon[index] = value
    def get_zeta(self): return self.zeta
    def set_zeta(self, zeta): self.zeta = zeta
    def add_zeta(self, value): self.zeta.append(value)
    def insert_zeta(self, index, value): self.zeta[index] = value
    def get_eta(self): return self.eta
    def set_eta(self, eta): self.eta = eta
    def add_eta(self, value): self.eta.append(value)
    def insert_eta(self, index, value): self.eta[index] = value
    def get_theta(self): return self.theta
    def set_theta(self, theta): self.theta = theta
    def add_theta(self, value): self.theta.append(value)
    def insert_theta(self, index, value): self.theta[index] = value
    def get_iota(self): return self.iota
    def set_iota(self, iota): self.iota = iota
    def add_iota(self, value): self.iota.append(value)
    def insert_iota(self, index, value): self.iota[index] = value
    def get_kappa(self): return self.kappa
    def set_kappa(self, kappa): self.kappa = kappa
    def add_kappa(self, value): self.kappa.append(value)
    def insert_kappa(self, index, value): self.kappa[index] = value
    def get_lambda(self): return self.lambda_
    def set_lambda(self, lambda_): self.lambda_ = lambda_
    def add_lambda(self, value): self.lambda_.append(value)
    def insert_lambda(self, index, value): self.lambda_[index] = value
    def get_mu(self): return self.mu
    def set_mu(self, mu): self.mu = mu
    def add_mu(self, value): self.mu.append(value)
    def insert_mu(self, index, value): self.mu[index] = value
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def add_nu(self, value): self.nu.append(value)
    def insert_nu(self, index, value): self.nu[index] = value
    def get_xi(self): return self.xi
    def set_xi(self, xi): self.xi = xi
    def add_xi(self, value): self.xi.append(value)
    def insert_xi(self, index, value): self.xi[index] = value
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def add_pi(self, value): self.pi.append(value)
    def insert_pi(self, index, value): self.pi[index] = value
    def get_rho(self): return self.rho
    def set_rho(self, rho): self.rho = rho
    def add_rho(self, value): self.rho.append(value)
    def insert_rho(self, index, value): self.rho[index] = value
    def get_sigma(self): return self.sigma
    def set_sigma(self, sigma): self.sigma = sigma
    def add_sigma(self, value): self.sigma.append(value)
    def insert_sigma(self, index, value): self.sigma[index] = value
    def get_tau(self): return self.tau
    def set_tau(self, tau): self.tau = tau
    def add_tau(self, value): self.tau.append(value)
    def insert_tau(self, index, value): self.tau[index] = value
    def get_upsilon(self): return self.upsilon
    def set_upsilon(self, upsilon): self.upsilon = upsilon
    def add_upsilon(self, value): self.upsilon.append(value)
    def insert_upsilon(self, index, value): self.upsilon[index] = value
    def get_phi(self): return self.phi
    def set_phi(self, phi): self.phi = phi
    def add_phi(self, value): self.phi.append(value)
    def insert_phi(self, index, value): self.phi[index] = value
    def get_chi(self): return self.chi
    def set_chi(self, chi): self.chi = chi
    def add_chi(self, value): self.chi.append(value)
    def insert_chi(self, index, value): self.chi[index] = value
    def get_psi(self): return self.psi
    def set_psi(self, psi): self.psi = psi
    def add_psi(self, value): self.psi.append(value)
    def insert_psi(self, index, value): self.psi[index] = value
    def get_omega(self): return self.omega
    def set_omega(self, omega): self.omega = omega
    def add_omega(self, value): self.omega.append(value)
    def insert_omega(self, index, value): self.omega[index] = value
    def get_sigmaf(self): return self.sigmaf
    def set_sigmaf(self, sigmaf): self.sigmaf = sigmaf
    def add_sigmaf(self, value): self.sigmaf.append(value)
    def insert_sigmaf(self, index, value): self.sigmaf[index] = value
    def get_sect(self): return self.sect
    def set_sect(self, sect): self.sect = sect
    def add_sect(self, value): self.sect.append(value)
    def insert_sect(self, index, value): self.sect[index] = value
    def get_deg(self): return self.deg
    def set_deg(self, deg): self.deg = deg
    def add_deg(self, value): self.deg.append(value)
    def insert_deg(self, index, value): self.deg[index] = value
    def get_prime(self): return self.prime
    def set_prime(self, prime): self.prime = prime
    def add_prime(self, value): self.prime.append(value)
    def insert_prime(self, index, value): self.prime[index] = value
    def get_Prime(self): return self.Prime
    def set_Prime(self, Prime): self.Prime = Prime
    def add_Prime(self, value): self.Prime.append(value)
    def insert_Prime(self, index, value): self.Prime[index] = value
    def get_infin(self): return self.infin
    def set_infin(self, infin): self.infin = infin
    def add_infin(self, value): self.infin.append(value)
    def insert_infin(self, index, value): self.infin[index] = value
    def get_empty(self): return self.empty
    def set_empty(self, empty): self.empty = empty
    def add_empty(self, value): self.empty.append(value)
    def insert_empty(self, index, value): self.empty[index] = value
    def get_plusmn(self): return self.plusmn
    def set_plusmn(self, plusmn): self.plusmn = plusmn
    def add_plusmn(self, value): self.plusmn.append(value)
    def insert_plusmn(self, index, value): self.plusmn[index] = value
    def get_times(self): return self.times
    def set_times(self, times): self.times = times
    def add_times(self, value): self.times.append(value)
    def insert_times(self, index, value): self.times[index] = value
    def get_minus(self): return self.minus
    def set_minus(self, minus): self.minus = minus
    def add_minus(self, value): self.minus.append(value)
    def insert_minus(self, index, value): self.minus[index] = value
    def get_sdot(self): return self.sdot
    def set_sdot(self, sdot): self.sdot = sdot
    def add_sdot(self, value): self.sdot.append(value)
    def insert_sdot(self, index, value): self.sdot[index] = value
    def get_part(self): return self.part
    def set_part(self, part): self.part = part
    def add_part(self, value): self.part.append(value)
    def insert_part(self, index, value): self.part[index] = value
    def get_nabla(self): return self.nabla
    def set_nabla(self, nabla): self.nabla = nabla
    def add_nabla(self, value): self.nabla.append(value)
    def insert_nabla(self, index, value): self.nabla[index] = value
    def get_radic(self): return self.radic
    def set_radic(self, radic): self.radic = radic
    def add_radic(self, value): self.radic.append(value)
    def insert_radic(self, index, value): self.radic[index] = value
    def get_perp(self): return self.perp
    def set_perp(self, perp): self.perp = perp
    def add_perp(self, value): self.perp.append(value)
    def insert_perp(self, index, value): self.perp[index] = value
    def get_sum(self): return self.sum
    def set_sum(self, sum): self.sum = sum
    def add_sum(self, value): self.sum.append(value)
    def insert_sum(self, index, value): self.sum[index] = value
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def add_int(self, value): self.int.append(value)
    def insert_int(self, index, value): self.int[index] = value
    def get_prod(self): return self.prod
    def set_prod(self, prod): self.prod = prod
    def add_prod(self, value): self.prod.append(value)
    def insert_prod(self, index, value): self.prod[index] = value
    def get_sim(self): return self.sim
    def set_sim(self, sim): self.sim = sim
    def add_sim(self, value): self.sim.append(value)
    def insert_sim(self, index, value): self.sim[index] = value
    def get_asymp(self): return self.asymp
    def set_asymp(self, asymp): self.asymp = asymp
    def add_asymp(self, value): self.asymp.append(value)
    def insert_asymp(self, index, value): self.asymp[index] = value
    def get_ne(self): return self.ne
    def set_ne(self, ne): self.ne = ne
    def add_ne(self, value): self.ne.append(value)
    def insert_ne(self, index, value): self.ne[index] = value
    def get_equiv(self): return self.equiv
    def set_equiv(self, equiv): self.equiv = equiv
    def add_equiv(self, value): self.equiv.append(value)
    def insert_equiv(self, index, value): self.equiv[index] = value
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def add_prop(self, value): self.prop.append(value)
    def insert_prop(self, index, value): self.prop[index] = value
    def get_le(self): return self.le
    def set_le(self, le): self.le = le
    def add_le(self, value): self.le.append(value)
    def insert_le(self, index, value): self.le[index] = value
    def get_ge(self): return self.ge
    def set_ge(self, ge): self.ge = ge
    def add_ge(self, value): self.ge.append(value)
    def insert_ge(self, index, value): self.ge[index] = value
    def get_larr(self): return self.larr
    def set_larr(self, larr): self.larr = larr
    def add_larr(self, value): self.larr.append(value)
    def insert_larr(self, index, value): self.larr[index] = value
    def get_rarr(self): return self.rarr
    def set_rarr(self, rarr): self.rarr = rarr
    def add_rarr(self, value): self.rarr.append(value)
    def insert_rarr(self, index, value): self.rarr[index] = value
    def get_isin(self): return self.isin
    def set_isin(self, isin): self.isin = isin
    def add_isin(self, value): self.isin.append(value)
    def insert_isin(self, index, value): self.isin[index] = value
    def get_notin(self): return self.notin
    def set_notin(self, notin): self.notin = notin
    def add_notin(self, value): self.notin.append(value)
    def insert_notin(self, index, value): self.notin[index] = value
    def get_lceil(self): return self.lceil
    def set_lceil(self, lceil): self.lceil = lceil
    def add_lceil(self, value): self.lceil.append(value)
    def insert_lceil(self, index, value): self.lceil[index] = value
    def get_rceil(self): return self.rceil
    def set_rceil(self, rceil): self.rceil = rceil
    def add_rceil(self, value): self.rceil.append(value)
    def insert_rceil(self, index, value): self.rceil[index] = value
    def get_lfloor(self): return self.lfloor
    def set_lfloor(self, lfloor): self.lfloor = lfloor
    def add_lfloor(self, value): self.lfloor.append(value)
    def insert_lfloor(self, index, value): self.lfloor[index] = value
    def get_rfloor(self): return self.rfloor
    def set_rfloor(self, rfloor): self.rfloor = rfloor
    def add_rfloor(self, value): self.rfloor.append(value)
    def insert_rfloor(self, index, value): self.rfloor[index] = value
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    def get_kindref(self): return self.kindref
    def set_kindref(self, kindref): self.kindref = kindref
    def get_external(self): return self.external
    def set_external(self, external): self.external = external
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DoxRefKind(self, value):
        # Validate type DoxRefKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.ulink or
            self.bold or
            self.emphasis or
            self.computeroutput or
            self.subscript or
            self.superscript or
            self.center or
            self.small or
            self.htmlonly or
            self.manonly or
            self.xmlonly or
            self.rtfonly or
            self.latexonly or
            self.dot or
            self.anchor or
            self.formula or
            self.ref or
            self.copy or
            self.trademark or
            self.registered or
            self.lsquo or
            self.rsquo or
            self.ldquo or
            self.rdquo or
            self.ndash or
            self.mdash or
            self.umlaut or
            self.acute or
            self.grave or
            self.circ or
            self.slash or
            self.tilde or
            self.cedil or
            self.ring or
            self.szlig or
            self.nonbreakablespace or
            self.aelig or
            self.AElig or
            self.Gamma or
            self.Delta or
            self.Theta or
            self.Lambda or
            self.Xi or
            self.Pi or
            self.Sigma or
            self.Upsilon or
            self.Phi or
            self.Psi or
            self.Omega or
            self.alpha or
            self.beta or
            self.gamma or
            self.delta or
            self.epsilon or
            self.zeta or
            self.eta or
            self.theta or
            self.iota or
            self.kappa or
            self.lambda_ or
            self.mu or
            self.nu or
            self.xi or
            self.pi or
            self.rho or
            self.sigma or
            self.tau or
            self.upsilon or
            self.phi or
            self.chi or
            self.psi or
            self.omega or
            self.sigmaf or
            self.sect or
            self.deg or
            self.prime or
            self.Prime or
            self.infin or
            self.empty or
            self.plusmn or
            self.times or
            self.minus or
            self.sdot or
            self.part or
            self.nabla or
            self.radic or
            self.perp or
            self.sum or
            self.int or
            self.prod or
            self.sim or
            self.asymp or
            self.ne or
            self.equiv or
            self.prop or
            self.le or
            self.ge or
            self.larr or
            self.rarr or
            self.isin or
            self.notin or
            self.lceil or
            self.rceil or
            self.lfloor or
            self.rfloor or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docRefTextType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docRefTextType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docRefTextType'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
        if self.kindref is not None and 'kindref' not in already_processed:
            already_processed.add('kindref')
            outfile.write(' kindref=%s' % (quote_attrib(self.kindref), ))
        if self.external is not None and 'external' not in already_processed:
            already_processed.add('external')
            outfile.write(' external=%s' % (self.gds_format_string(quote_attrib(self.external).encode(ExternalEncoding), input_name='external'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docRefTextType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docRefTextType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            showIndent(outfile, level)
            outfile.write('refid="%s",\n' % (self.refid,))
        if self.kindref is not None and 'kindref' not in already_processed:
            already_processed.add('kindref')
            showIndent(outfile, level)
            outfile.write('kindref="%s",\n' % (self.kindref,))
        if self.external is not None and 'external' not in already_processed:
            already_processed.add('external')
            showIndent(outfile, level)
            outfile.write('external="%s",\n' % (self.external,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
        value = find_attr_value_('kindref', node)
        if value is not None and 'kindref' not in already_processed:
            already_processed.add('kindref')
            self.kindref = value
            self.validate_DoxRefKind(self.kindref)    # validate type DoxRefKind
        value = find_attr_value_('external', node)
        if value is not None and 'external' not in already_processed:
            already_processed.add('external')
            self.external = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ulink':
            obj_ = docURLLink.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ulink', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ulink'):
              self.add_ulink(obj_.value)
            elif hasattr(self, 'set_ulink'):
              self.set_ulink(obj_.value)
        elif nodeName_ == 'bold':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'bold', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_bold'):
              self.add_bold(obj_.value)
            elif hasattr(self, 'set_bold'):
              self.set_bold(obj_.value)
        elif nodeName_ == 'emphasis':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'emphasis', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_emphasis'):
              self.add_emphasis(obj_.value)
            elif hasattr(self, 'set_emphasis'):
              self.set_emphasis(obj_.value)
        elif nodeName_ == 'computeroutput':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'computeroutput', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_computeroutput'):
              self.add_computeroutput(obj_.value)
            elif hasattr(self, 'set_computeroutput'):
              self.set_computeroutput(obj_.value)
        elif nodeName_ == 'subscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'subscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_subscript'):
              self.add_subscript(obj_.value)
            elif hasattr(self, 'set_subscript'):
              self.set_subscript(obj_.value)
        elif nodeName_ == 'superscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'superscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_superscript'):
              self.add_superscript(obj_.value)
            elif hasattr(self, 'set_superscript'):
              self.set_superscript(obj_.value)
        elif nodeName_ == 'center':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'center', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_center'):
              self.add_center(obj_.value)
            elif hasattr(self, 'set_center'):
              self.set_center(obj_.value)
        elif nodeName_ == 'small':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'small', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_small'):
              self.add_small(obj_.value)
            elif hasattr(self, 'set_small'):
              self.set_small(obj_.value)
        elif nodeName_ == 'htmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'htmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'manonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'manonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'xmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'xmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'rtfonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'rtfonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'latexonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'latexonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'dot' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'dot', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'anchor':
            obj_ = docAnchorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'anchor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_anchor'):
              self.add_anchor(obj_.value)
            elif hasattr(self, 'set_anchor'):
              self.set_anchor(obj_.value)
        elif nodeName_ == 'formula':
            obj_ = docFormulaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'formula', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_formula'):
              self.add_formula(obj_.value)
            elif hasattr(self, 'set_formula'):
              self.set_formula(obj_.value)
        elif nodeName_ == 'ref':
            obj_ = docRefTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        elif nodeName_ == 'copy':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copy', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copy'):
              self.add_copy(obj_.value)
            elif hasattr(self, 'set_copy'):
              self.set_copy(obj_.value)
        elif nodeName_ == 'trademark':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'trademark', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_trademark'):
              self.add_trademark(obj_.value)
            elif hasattr(self, 'set_trademark'):
              self.set_trademark(obj_.value)
        elif nodeName_ == 'registered':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'registered', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_registered'):
              self.add_registered(obj_.value)
            elif hasattr(self, 'set_registered'):
              self.set_registered(obj_.value)
        elif nodeName_ == 'lsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lsquo'):
              self.add_lsquo(obj_.value)
            elif hasattr(self, 'set_lsquo'):
              self.set_lsquo(obj_.value)
        elif nodeName_ == 'rsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rsquo'):
              self.add_rsquo(obj_.value)
            elif hasattr(self, 'set_rsquo'):
              self.set_rsquo(obj_.value)
        elif nodeName_ == 'ldquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ldquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ldquo'):
              self.add_ldquo(obj_.value)
            elif hasattr(self, 'set_ldquo'):
              self.set_ldquo(obj_.value)
        elif nodeName_ == 'rdquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rdquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rdquo'):
              self.add_rdquo(obj_.value)
            elif hasattr(self, 'set_rdquo'):
              self.set_rdquo(obj_.value)
        elif nodeName_ == 'ndash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ndash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ndash'):
              self.add_ndash(obj_.value)
            elif hasattr(self, 'set_ndash'):
              self.set_ndash(obj_.value)
        elif nodeName_ == 'mdash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mdash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mdash'):
              self.add_mdash(obj_.value)
            elif hasattr(self, 'set_mdash'):
              self.set_mdash(obj_.value)
        elif nodeName_ == 'umlaut':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'umlaut', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_umlaut'):
              self.add_umlaut(obj_.value)
            elif hasattr(self, 'set_umlaut'):
              self.set_umlaut(obj_.value)
        elif nodeName_ == 'acute':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'acute', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_acute'):
              self.add_acute(obj_.value)
            elif hasattr(self, 'set_acute'):
              self.set_acute(obj_.value)
        elif nodeName_ == 'grave':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'grave', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_grave'):
              self.add_grave(obj_.value)
            elif hasattr(self, 'set_grave'):
              self.set_grave(obj_.value)
        elif nodeName_ == 'circ':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circ', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_circ'):
              self.add_circ(obj_.value)
            elif hasattr(self, 'set_circ'):
              self.set_circ(obj_.value)
        elif nodeName_ == 'slash':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'slash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_slash'):
              self.add_slash(obj_.value)
            elif hasattr(self, 'set_slash'):
              self.set_slash(obj_.value)
        elif nodeName_ == 'tilde':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tilde', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tilde'):
              self.add_tilde(obj_.value)
            elif hasattr(self, 'set_tilde'):
              self.set_tilde(obj_.value)
        elif nodeName_ == 'cedil':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cedil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_cedil'):
              self.add_cedil(obj_.value)
            elif hasattr(self, 'set_cedil'):
              self.set_cedil(obj_.value)
        elif nodeName_ == 'ring':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ring', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ring'):
              self.add_ring(obj_.value)
            elif hasattr(self, 'set_ring'):
              self.set_ring(obj_.value)
        elif nodeName_ == 'szlig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'szlig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_szlig'):
              self.add_szlig(obj_.value)
            elif hasattr(self, 'set_szlig'):
              self.set_szlig(obj_.value)
        elif nodeName_ == 'nonbreakablespace':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nonbreakablespace', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nonbreakablespace'):
              self.add_nonbreakablespace(obj_.value)
            elif hasattr(self, 'set_nonbreakablespace'):
              self.set_nonbreakablespace(obj_.value)
        elif nodeName_ == 'aelig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'aelig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_aelig'):
              self.add_aelig(obj_.value)
            elif hasattr(self, 'set_aelig'):
              self.set_aelig(obj_.value)
        elif nodeName_ == 'AElig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AElig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AElig'):
              self.add_AElig(obj_.value)
            elif hasattr(self, 'set_AElig'):
              self.set_AElig(obj_.value)
        elif nodeName_ == 'Gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Gamma'):
              self.add_Gamma(obj_.value)
            elif hasattr(self, 'set_Gamma'):
              self.set_Gamma(obj_.value)
        elif nodeName_ == 'Delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Delta'):
              self.add_Delta(obj_.value)
            elif hasattr(self, 'set_Delta'):
              self.set_Delta(obj_.value)
        elif nodeName_ == 'Theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Theta'):
              self.add_Theta(obj_.value)
            elif hasattr(self, 'set_Theta'):
              self.set_Theta(obj_.value)
        elif nodeName_ == 'Lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Lambda'):
              self.add_Lambda(obj_.value)
            elif hasattr(self, 'set_Lambda'):
              self.set_Lambda(obj_.value)
        elif nodeName_ == 'Xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Xi'):
              self.add_Xi(obj_.value)
            elif hasattr(self, 'set_Xi'):
              self.set_Xi(obj_.value)
        elif nodeName_ == 'Pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Pi'):
              self.add_Pi(obj_.value)
            elif hasattr(self, 'set_Pi'):
              self.set_Pi(obj_.value)
        elif nodeName_ == 'Sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Sigma'):
              self.add_Sigma(obj_.value)
            elif hasattr(self, 'set_Sigma'):
              self.set_Sigma(obj_.value)
        elif nodeName_ == 'Upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Upsilon'):
              self.add_Upsilon(obj_.value)
            elif hasattr(self, 'set_Upsilon'):
              self.set_Upsilon(obj_.value)
        elif nodeName_ == 'Phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Phi'):
              self.add_Phi(obj_.value)
            elif hasattr(self, 'set_Phi'):
              self.set_Phi(obj_.value)
        elif nodeName_ == 'Psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Psi'):
              self.add_Psi(obj_.value)
            elif hasattr(self, 'set_Psi'):
              self.set_Psi(obj_.value)
        elif nodeName_ == 'Omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Omega'):
              self.add_Omega(obj_.value)
            elif hasattr(self, 'set_Omega'):
              self.set_Omega(obj_.value)
        elif nodeName_ == 'alpha':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'alpha', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_alpha'):
              self.add_alpha(obj_.value)
            elif hasattr(self, 'set_alpha'):
              self.set_alpha(obj_.value)
        elif nodeName_ == 'beta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'beta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_beta'):
              self.add_beta(obj_.value)
            elif hasattr(self, 'set_beta'):
              self.set_beta(obj_.value)
        elif nodeName_ == 'gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_gamma'):
              self.add_gamma(obj_.value)
            elif hasattr(self, 'set_gamma'):
              self.set_gamma(obj_.value)
        elif nodeName_ == 'delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_delta'):
              self.add_delta(obj_.value)
            elif hasattr(self, 'set_delta'):
              self.set_delta(obj_.value)
        elif nodeName_ == 'epsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'epsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_epsilon'):
              self.add_epsilon(obj_.value)
            elif hasattr(self, 'set_epsilon'):
              self.set_epsilon(obj_.value)
        elif nodeName_ == 'zeta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'zeta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_zeta'):
              self.add_zeta(obj_.value)
            elif hasattr(self, 'set_zeta'):
              self.set_zeta(obj_.value)
        elif nodeName_ == 'eta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'eta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_eta'):
              self.add_eta(obj_.value)
            elif hasattr(self, 'set_eta'):
              self.set_eta(obj_.value)
        elif nodeName_ == 'theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_theta'):
              self.add_theta(obj_.value)
            elif hasattr(self, 'set_theta'):
              self.set_theta(obj_.value)
        elif nodeName_ == 'iota':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'iota', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_iota'):
              self.add_iota(obj_.value)
            elif hasattr(self, 'set_iota'):
              self.set_iota(obj_.value)
        elif nodeName_ == 'kappa':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'kappa', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_kappa'):
              self.add_kappa(obj_.value)
            elif hasattr(self, 'set_kappa'):
              self.set_kappa(obj_.value)
        elif nodeName_ == 'lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lambda'):
              self.add_lambda(obj_.value)
            elif hasattr(self, 'set_lambda'):
              self.set_lambda(obj_.value)
        elif nodeName_ == 'mu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mu'):
              self.add_mu(obj_.value)
            elif hasattr(self, 'set_mu'):
              self.set_mu(obj_.value)
        elif nodeName_ == 'nu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nu'):
              self.add_nu(obj_.value)
            elif hasattr(self, 'set_nu'):
              self.set_nu(obj_.value)
        elif nodeName_ == 'xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xi'):
              self.add_xi(obj_.value)
            elif hasattr(self, 'set_xi'):
              self.set_xi(obj_.value)
        elif nodeName_ == 'pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_pi'):
              self.add_pi(obj_.value)
            elif hasattr(self, 'set_pi'):
              self.set_pi(obj_.value)
        elif nodeName_ == 'rho':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rho', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rho'):
              self.add_rho(obj_.value)
            elif hasattr(self, 'set_rho'):
              self.set_rho(obj_.value)
        elif nodeName_ == 'sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigma'):
              self.add_sigma(obj_.value)
            elif hasattr(self, 'set_sigma'):
              self.set_sigma(obj_.value)
        elif nodeName_ == 'tau':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tau', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tau'):
              self.add_tau(obj_.value)
            elif hasattr(self, 'set_tau'):
              self.set_tau(obj_.value)
        elif nodeName_ == 'upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_upsilon'):
              self.add_upsilon(obj_.value)
            elif hasattr(self, 'set_upsilon'):
              self.set_upsilon(obj_.value)
        elif nodeName_ == 'phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_phi'):
              self.add_phi(obj_.value)
            elif hasattr(self, 'set_phi'):
              self.set_phi(obj_.value)
        elif nodeName_ == 'chi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'chi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_chi'):
              self.add_chi(obj_.value)
            elif hasattr(self, 'set_chi'):
              self.set_chi(obj_.value)
        elif nodeName_ == 'psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_psi'):
              self.add_psi(obj_.value)
            elif hasattr(self, 'set_psi'):
              self.set_psi(obj_.value)
        elif nodeName_ == 'omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_omega'):
              self.add_omega(obj_.value)
            elif hasattr(self, 'set_omega'):
              self.set_omega(obj_.value)
        elif nodeName_ == 'sigmaf':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigmaf', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigmaf'):
              self.add_sigmaf(obj_.value)
            elif hasattr(self, 'set_sigmaf'):
              self.set_sigmaf(obj_.value)
        elif nodeName_ == 'sect':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect'):
              self.add_sect(obj_.value)
            elif hasattr(self, 'set_sect'):
              self.set_sect(obj_.value)
        elif nodeName_ == 'deg':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'deg', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_deg'):
              self.add_deg(obj_.value)
            elif hasattr(self, 'set_deg'):
              self.set_deg(obj_.value)
        elif nodeName_ == 'prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prime'):
              self.add_prime(obj_.value)
            elif hasattr(self, 'set_prime'):
              self.set_prime(obj_.value)
        elif nodeName_ == 'Prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Prime'):
              self.add_Prime(obj_.value)
            elif hasattr(self, 'set_Prime'):
              self.set_Prime(obj_.value)
        elif nodeName_ == 'infin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'infin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_infin'):
              self.add_infin(obj_.value)
            elif hasattr(self, 'set_infin'):
              self.set_infin(obj_.value)
        elif nodeName_ == 'empty':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'empty', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_empty'):
              self.add_empty(obj_.value)
            elif hasattr(self, 'set_empty'):
              self.set_empty(obj_.value)
        elif nodeName_ == 'plusmn':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'plusmn', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_plusmn'):
              self.add_plusmn(obj_.value)
            elif hasattr(self, 'set_plusmn'):
              self.set_plusmn(obj_.value)
        elif nodeName_ == 'times':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'times', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_times'):
              self.add_times(obj_.value)
            elif hasattr(self, 'set_times'):
              self.set_times(obj_.value)
        elif nodeName_ == 'minus':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'minus', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_minus'):
              self.add_minus(obj_.value)
            elif hasattr(self, 'set_minus'):
              self.set_minus(obj_.value)
        elif nodeName_ == 'sdot':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sdot', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sdot'):
              self.add_sdot(obj_.value)
            elif hasattr(self, 'set_sdot'):
              self.set_sdot(obj_.value)
        elif nodeName_ == 'part':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'part', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_part'):
              self.add_part(obj_.value)
            elif hasattr(self, 'set_part'):
              self.set_part(obj_.value)
        elif nodeName_ == 'nabla':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nabla', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nabla'):
              self.add_nabla(obj_.value)
            elif hasattr(self, 'set_nabla'):
              self.set_nabla(obj_.value)
        elif nodeName_ == 'radic':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radic', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_radic'):
              self.add_radic(obj_.value)
            elif hasattr(self, 'set_radic'):
              self.set_radic(obj_.value)
        elif nodeName_ == 'perp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'perp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_perp'):
              self.add_perp(obj_.value)
            elif hasattr(self, 'set_perp'):
              self.set_perp(obj_.value)
        elif nodeName_ == 'sum':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sum', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sum'):
              self.add_sum(obj_.value)
            elif hasattr(self, 'set_sum'):
              self.set_sum(obj_.value)
        elif nodeName_ == 'int':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'int', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_int'):
              self.add_int(obj_.value)
            elif hasattr(self, 'set_int'):
              self.set_int(obj_.value)
        elif nodeName_ == 'prod':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prod'):
              self.add_prod(obj_.value)
            elif hasattr(self, 'set_prod'):
              self.set_prod(obj_.value)
        elif nodeName_ == 'sim':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sim', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sim'):
              self.add_sim(obj_.value)
            elif hasattr(self, 'set_sim'):
              self.set_sim(obj_.value)
        elif nodeName_ == 'asymp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'asymp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_asymp'):
              self.add_asymp(obj_.value)
            elif hasattr(self, 'set_asymp'):
              self.set_asymp(obj_.value)
        elif nodeName_ == 'ne':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ne', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ne'):
              self.add_ne(obj_.value)
            elif hasattr(self, 'set_ne'):
              self.set_ne(obj_.value)
        elif nodeName_ == 'equiv':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'equiv', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_equiv'):
              self.add_equiv(obj_.value)
            elif hasattr(self, 'set_equiv'):
              self.set_equiv(obj_.value)
        elif nodeName_ == 'prop':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prop', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prop'):
              self.add_prop(obj_.value)
            elif hasattr(self, 'set_prop'):
              self.set_prop(obj_.value)
        elif nodeName_ == 'le':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'le', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_le'):
              self.add_le(obj_.value)
            elif hasattr(self, 'set_le'):
              self.set_le(obj_.value)
        elif nodeName_ == 'ge':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ge', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ge'):
              self.add_ge(obj_.value)
            elif hasattr(self, 'set_ge'):
              self.set_ge(obj_.value)
        elif nodeName_ == 'larr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'larr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_larr'):
              self.add_larr(obj_.value)
            elif hasattr(self, 'set_larr'):
              self.set_larr(obj_.value)
        elif nodeName_ == 'rarr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rarr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rarr'):
              self.add_rarr(obj_.value)
            elif hasattr(self, 'set_rarr'):
              self.set_rarr(obj_.value)
        elif nodeName_ == 'isin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'isin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_isin'):
              self.add_isin(obj_.value)
            elif hasattr(self, 'set_isin'):
              self.set_isin(obj_.value)
        elif nodeName_ == 'notin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'notin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_notin'):
              self.add_notin(obj_.value)
            elif hasattr(self, 'set_notin'):
              self.set_notin(obj_.value)
        elif nodeName_ == 'lceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lceil'):
              self.add_lceil(obj_.value)
            elif hasattr(self, 'set_lceil'):
              self.set_lceil(obj_.value)
        elif nodeName_ == 'rceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rceil'):
              self.add_rceil(obj_.value)
            elif hasattr(self, 'set_rceil'):
              self.set_rceil(obj_.value)
        elif nodeName_ == 'lfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lfloor'):
              self.add_lfloor(obj_.value)
            elif hasattr(self, 'set_lfloor'):
              self.set_lfloor(obj_.value)
        elif nodeName_ == 'rfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rfloor'):
              self.add_rfloor(obj_.value)
            elif hasattr(self, 'set_rfloor'):
              self.set_rfloor(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docRefTextType


class docTableType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, rows=None, cols=None, row=None, caption=None):
        self.rows = _cast(int, rows)
        self.cols = _cast(int, cols)
        if row is None:
            self.row = []
        else:
            self.row = row
        self.caption = caption
    def factory(*args_, **kwargs_):
        if docTableType.subclass:
            return docTableType.subclass(*args_, **kwargs_)
        else:
            return docTableType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_row(self): return self.row
    def set_row(self, row): self.row = row
    def add_row(self, value): self.row.append(value)
    def insert_row(self, index, value): self.row[index] = value
    def get_caption(self): return self.caption
    def set_caption(self, caption): self.caption = caption
    def get_rows(self): return self.rows
    def set_rows(self, rows): self.rows = rows
    def get_cols(self): return self.cols
    def set_cols(self, cols): self.cols = cols
    def hasContent_(self):
        if (
            self.row or
            self.caption is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docTableType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docTableType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docTableType'):
        if self.rows is not None and 'rows' not in already_processed:
            already_processed.add('rows')
            outfile.write(' rows="%s"' % self.gds_format_integer(self.rows, input_name='rows'))
        if self.cols is not None and 'cols' not in already_processed:
            already_processed.add('cols')
            outfile.write(' cols="%s"' % self.gds_format_integer(self.cols, input_name='cols'))
    def exportChildren(self, outfile, level, namespace_='', name_='docTableType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for row_ in self.row:
            row_.export(outfile, level, namespace_, name_='row', pretty_print=pretty_print)
        if self.caption is not None:
            self.caption.export(outfile, level, namespace_, name_='caption', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docTableType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.rows is not None and 'rows' not in already_processed:
            already_processed.add('rows')
            showIndent(outfile, level)
            outfile.write('rows=%d,\n' % (self.rows,))
        if self.cols is not None and 'cols' not in already_processed:
            already_processed.add('cols')
            showIndent(outfile, level)
            outfile.write('cols=%d,\n' % (self.cols,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('row=[\n')
        level += 1
        for row_ in self.row:
            showIndent(outfile, level)
            outfile.write('model_.docRowType(\n')
            row_.exportLiteral(outfile, level, name_='docRowType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.caption is not None:
            showIndent(outfile, level)
            outfile.write('caption=model_.docCaptionType(\n')
            self.caption.exportLiteral(outfile, level, name_='caption')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('rows', node)
        if value is not None and 'rows' not in already_processed:
            already_processed.add('rows')
            try:
                self.rows = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('cols', node)
        if value is not None and 'cols' not in already_processed:
            already_processed.add('cols')
            try:
                self.cols = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'row':
            obj_ = docRowType.factory()
            obj_.build(child_)
            self.row.append(obj_)
        elif nodeName_ == 'caption':
            obj_ = docCaptionType.factory()
            obj_.build(child_)
            self.caption = obj_
# end class docTableType


class docRowType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, entry=None):
        if entry is None:
            self.entry = []
        else:
            self.entry = entry
    def factory(*args_, **kwargs_):
        if docRowType.subclass:
            return docRowType.subclass(*args_, **kwargs_)
        else:
            return docRowType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_entry(self): return self.entry
    def set_entry(self, entry): self.entry = entry
    def add_entry(self, value): self.entry.append(value)
    def insert_entry(self, index, value): self.entry[index] = value
    def hasContent_(self):
        if (
            self.entry
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docRowType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docRowType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docRowType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docRowType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for entry_ in self.entry:
            entry_.export(outfile, level, namespace_, name_='entry', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docRowType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('entry=[\n')
        level += 1
        for entry_ in self.entry:
            showIndent(outfile, level)
            outfile.write('model_.docEntryType(\n')
            entry_.exportLiteral(outfile, level, name_='docEntryType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'entry':
            obj_ = docEntryType.factory()
            obj_.build(child_)
            self.entry.append(obj_)
# end class docRowType


class docEntryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, thead=None, para=None):
        self.thead = _cast(None, thead)
        if para is None:
            self.para = []
        else:
            self.para = para
    def factory(*args_, **kwargs_):
        if docEntryType.subclass:
            return docEntryType.subclass(*args_, **kwargs_)
        else:
            return docEntryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_thead(self): return self.thead
    def set_thead(self, thead): self.thead = thead
    def validate_DoxBool(self, value):
        # Validate type DoxBool, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.para
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docEntryType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docEntryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docEntryType'):
        if self.thead is not None and 'thead' not in already_processed:
            already_processed.add('thead')
            outfile.write(' thead=%s' % (quote_attrib(self.thead), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docEntryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for para_ in self.para:
            para_.export(outfile, level, namespace_, name_='para', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docEntryType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.thead is not None and 'thead' not in already_processed:
            already_processed.add('thead')
            showIndent(outfile, level)
            outfile.write('thead="%s",\n' % (self.thead,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('para=[\n')
        level += 1
        for para_ in self.para:
            showIndent(outfile, level)
            outfile.write('model_.docParaType(\n')
            para_.exportLiteral(outfile, level, name_='docParaType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('thead', node)
        if value is not None and 'thead' not in already_processed:
            already_processed.add('thead')
            self.thead = value
            self.validate_DoxBool(self.thead)    # validate type DoxBool
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            self.para.append(obj_)
# end class docEntryType


class docCaptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ulink=None, bold=None, emphasis=None, computeroutput=None, subscript=None, superscript=None, center=None, small=None, htmlonly=None, manonly=None, xmlonly=None, rtfonly=None, latexonly=None, dot=None, anchor=None, formula=None, ref=None, copy=None, trademark=None, registered=None, lsquo=None, rsquo=None, ldquo=None, rdquo=None, ndash=None, mdash=None, umlaut=None, acute=None, grave=None, circ=None, slash=None, tilde=None, cedil=None, ring=None, szlig=None, nonbreakablespace=None, aelig=None, AElig=None, Gamma=None, Delta=None, Theta=None, Lambda=None, Xi=None, Pi=None, Sigma=None, Upsilon=None, Phi=None, Psi=None, Omega=None, alpha=None, beta=None, gamma=None, delta=None, epsilon=None, zeta=None, eta=None, theta=None, iota=None, kappa=None, lambda_=None, mu=None, nu=None, xi=None, pi=None, rho=None, sigma=None, tau=None, upsilon=None, phi=None, chi=None, psi=None, omega=None, sigmaf=None, sect=None, deg=None, prime=None, Prime=None, infin=None, empty=None, plusmn=None, times=None, minus=None, sdot=None, part=None, nabla=None, radic=None, perp=None, sum=None, int=None, prod=None, sim=None, asymp=None, ne=None, equiv=None, prop=None, le=None, ge=None, larr=None, rarr=None, isin=None, notin=None, lceil=None, rceil=None, lfloor=None, rfloor=None, valueOf_=None, mixedclass_=None, content_=None):
        if ulink is None:
            self.ulink = []
        else:
            self.ulink = ulink
        if bold is None:
            self.bold = []
        else:
            self.bold = bold
        if emphasis is None:
            self.emphasis = []
        else:
            self.emphasis = emphasis
        if computeroutput is None:
            self.computeroutput = []
        else:
            self.computeroutput = computeroutput
        if subscript is None:
            self.subscript = []
        else:
            self.subscript = subscript
        if superscript is None:
            self.superscript = []
        else:
            self.superscript = superscript
        if center is None:
            self.center = []
        else:
            self.center = center
        if small is None:
            self.small = []
        else:
            self.small = small
        if htmlonly is None:
            self.htmlonly = []
        else:
            self.htmlonly = htmlonly
        if manonly is None:
            self.manonly = []
        else:
            self.manonly = manonly
        if xmlonly is None:
            self.xmlonly = []
        else:
            self.xmlonly = xmlonly
        if rtfonly is None:
            self.rtfonly = []
        else:
            self.rtfonly = rtfonly
        if latexonly is None:
            self.latexonly = []
        else:
            self.latexonly = latexonly
        if dot is None:
            self.dot = []
        else:
            self.dot = dot
        if anchor is None:
            self.anchor = []
        else:
            self.anchor = anchor
        if formula is None:
            self.formula = []
        else:
            self.formula = formula
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        if copy is None:
            self.copy = []
        else:
            self.copy = copy
        if trademark is None:
            self.trademark = []
        else:
            self.trademark = trademark
        if registered is None:
            self.registered = []
        else:
            self.registered = registered
        if lsquo is None:
            self.lsquo = []
        else:
            self.lsquo = lsquo
        if rsquo is None:
            self.rsquo = []
        else:
            self.rsquo = rsquo
        if ldquo is None:
            self.ldquo = []
        else:
            self.ldquo = ldquo
        if rdquo is None:
            self.rdquo = []
        else:
            self.rdquo = rdquo
        if ndash is None:
            self.ndash = []
        else:
            self.ndash = ndash
        if mdash is None:
            self.mdash = []
        else:
            self.mdash = mdash
        if umlaut is None:
            self.umlaut = []
        else:
            self.umlaut = umlaut
        if acute is None:
            self.acute = []
        else:
            self.acute = acute
        if grave is None:
            self.grave = []
        else:
            self.grave = grave
        if circ is None:
            self.circ = []
        else:
            self.circ = circ
        if slash is None:
            self.slash = []
        else:
            self.slash = slash
        if tilde is None:
            self.tilde = []
        else:
            self.tilde = tilde
        if cedil is None:
            self.cedil = []
        else:
            self.cedil = cedil
        if ring is None:
            self.ring = []
        else:
            self.ring = ring
        if szlig is None:
            self.szlig = []
        else:
            self.szlig = szlig
        if nonbreakablespace is None:
            self.nonbreakablespace = []
        else:
            self.nonbreakablespace = nonbreakablespace
        if aelig is None:
            self.aelig = []
        else:
            self.aelig = aelig
        if AElig is None:
            self.AElig = []
        else:
            self.AElig = AElig
        if Gamma is None:
            self.Gamma = []
        else:
            self.Gamma = Gamma
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Theta is None:
            self.Theta = []
        else:
            self.Theta = Theta
        if Lambda is None:
            self.Lambda = []
        else:
            self.Lambda = Lambda
        if Xi is None:
            self.Xi = []
        else:
            self.Xi = Xi
        if Pi is None:
            self.Pi = []
        else:
            self.Pi = Pi
        if Sigma is None:
            self.Sigma = []
        else:
            self.Sigma = Sigma
        if Upsilon is None:
            self.Upsilon = []
        else:
            self.Upsilon = Upsilon
        if Phi is None:
            self.Phi = []
        else:
            self.Phi = Phi
        if Psi is None:
            self.Psi = []
        else:
            self.Psi = Psi
        if Omega is None:
            self.Omega = []
        else:
            self.Omega = Omega
        if alpha is None:
            self.alpha = []
        else:
            self.alpha = alpha
        if beta is None:
            self.beta = []
        else:
            self.beta = beta
        if gamma is None:
            self.gamma = []
        else:
            self.gamma = gamma
        if delta is None:
            self.delta = []
        else:
            self.delta = delta
        if epsilon is None:
            self.epsilon = []
        else:
            self.epsilon = epsilon
        if zeta is None:
            self.zeta = []
        else:
            self.zeta = zeta
        if eta is None:
            self.eta = []
        else:
            self.eta = eta
        if theta is None:
            self.theta = []
        else:
            self.theta = theta
        if iota is None:
            self.iota = []
        else:
            self.iota = iota
        if kappa is None:
            self.kappa = []
        else:
            self.kappa = kappa
        if lambda_ is None:
            self.lambda_ = []
        else:
            self.lambda_ = lambda_
        if mu is None:
            self.mu = []
        else:
            self.mu = mu
        if nu is None:
            self.nu = []
        else:
            self.nu = nu
        if xi is None:
            self.xi = []
        else:
            self.xi = xi
        if pi is None:
            self.pi = []
        else:
            self.pi = pi
        if rho is None:
            self.rho = []
        else:
            self.rho = rho
        if sigma is None:
            self.sigma = []
        else:
            self.sigma = sigma
        if tau is None:
            self.tau = []
        else:
            self.tau = tau
        if upsilon is None:
            self.upsilon = []
        else:
            self.upsilon = upsilon
        if phi is None:
            self.phi = []
        else:
            self.phi = phi
        if chi is None:
            self.chi = []
        else:
            self.chi = chi
        if psi is None:
            self.psi = []
        else:
            self.psi = psi
        if omega is None:
            self.omega = []
        else:
            self.omega = omega
        if sigmaf is None:
            self.sigmaf = []
        else:
            self.sigmaf = sigmaf
        if sect is None:
            self.sect = []
        else:
            self.sect = sect
        if deg is None:
            self.deg = []
        else:
            self.deg = deg
        if prime is None:
            self.prime = []
        else:
            self.prime = prime
        if Prime is None:
            self.Prime = []
        else:
            self.Prime = Prime
        if infin is None:
            self.infin = []
        else:
            self.infin = infin
        if empty is None:
            self.empty = []
        else:
            self.empty = empty
        if plusmn is None:
            self.plusmn = []
        else:
            self.plusmn = plusmn
        if times is None:
            self.times = []
        else:
            self.times = times
        if minus is None:
            self.minus = []
        else:
            self.minus = minus
        if sdot is None:
            self.sdot = []
        else:
            self.sdot = sdot
        if part is None:
            self.part = []
        else:
            self.part = part
        if nabla is None:
            self.nabla = []
        else:
            self.nabla = nabla
        if radic is None:
            self.radic = []
        else:
            self.radic = radic
        if perp is None:
            self.perp = []
        else:
            self.perp = perp
        if sum is None:
            self.sum = []
        else:
            self.sum = sum
        if int is None:
            self.int = []
        else:
            self.int = int
        if prod is None:
            self.prod = []
        else:
            self.prod = prod
        if sim is None:
            self.sim = []
        else:
            self.sim = sim
        if asymp is None:
            self.asymp = []
        else:
            self.asymp = asymp
        if ne is None:
            self.ne = []
        else:
            self.ne = ne
        if equiv is None:
            self.equiv = []
        else:
            self.equiv = equiv
        if prop is None:
            self.prop = []
        else:
            self.prop = prop
        if le is None:
            self.le = []
        else:
            self.le = le
        if ge is None:
            self.ge = []
        else:
            self.ge = ge
        if larr is None:
            self.larr = []
        else:
            self.larr = larr
        if rarr is None:
            self.rarr = []
        else:
            self.rarr = rarr
        if isin is None:
            self.isin = []
        else:
            self.isin = isin
        if notin is None:
            self.notin = []
        else:
            self.notin = notin
        if lceil is None:
            self.lceil = []
        else:
            self.lceil = lceil
        if rceil is None:
            self.rceil = []
        else:
            self.rceil = rceil
        if lfloor is None:
            self.lfloor = []
        else:
            self.lfloor = lfloor
        if rfloor is None:
            self.rfloor = []
        else:
            self.rfloor = rfloor
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docCaptionType.subclass:
            return docCaptionType.subclass(*args_, **kwargs_)
        else:
            return docCaptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ulink(self): return self.ulink
    def set_ulink(self, ulink): self.ulink = ulink
    def add_ulink(self, value): self.ulink.append(value)
    def insert_ulink(self, index, value): self.ulink[index] = value
    def get_bold(self): return self.bold
    def set_bold(self, bold): self.bold = bold
    def add_bold(self, value): self.bold.append(value)
    def insert_bold(self, index, value): self.bold[index] = value
    def get_emphasis(self): return self.emphasis
    def set_emphasis(self, emphasis): self.emphasis = emphasis
    def add_emphasis(self, value): self.emphasis.append(value)
    def insert_emphasis(self, index, value): self.emphasis[index] = value
    def get_computeroutput(self): return self.computeroutput
    def set_computeroutput(self, computeroutput): self.computeroutput = computeroutput
    def add_computeroutput(self, value): self.computeroutput.append(value)
    def insert_computeroutput(self, index, value): self.computeroutput[index] = value
    def get_subscript(self): return self.subscript
    def set_subscript(self, subscript): self.subscript = subscript
    def add_subscript(self, value): self.subscript.append(value)
    def insert_subscript(self, index, value): self.subscript[index] = value
    def get_superscript(self): return self.superscript
    def set_superscript(self, superscript): self.superscript = superscript
    def add_superscript(self, value): self.superscript.append(value)
    def insert_superscript(self, index, value): self.superscript[index] = value
    def get_center(self): return self.center
    def set_center(self, center): self.center = center
    def add_center(self, value): self.center.append(value)
    def insert_center(self, index, value): self.center[index] = value
    def get_small(self): return self.small
    def set_small(self, small): self.small = small
    def add_small(self, value): self.small.append(value)
    def insert_small(self, index, value): self.small[index] = value
    def get_htmlonly(self): return self.htmlonly
    def set_htmlonly(self, htmlonly): self.htmlonly = htmlonly
    def add_htmlonly(self, value): self.htmlonly.append(value)
    def insert_htmlonly(self, index, value): self.htmlonly[index] = value
    def get_manonly(self): return self.manonly
    def set_manonly(self, manonly): self.manonly = manonly
    def add_manonly(self, value): self.manonly.append(value)
    def insert_manonly(self, index, value): self.manonly[index] = value
    def get_xmlonly(self): return self.xmlonly
    def set_xmlonly(self, xmlonly): self.xmlonly = xmlonly
    def add_xmlonly(self, value): self.xmlonly.append(value)
    def insert_xmlonly(self, index, value): self.xmlonly[index] = value
    def get_rtfonly(self): return self.rtfonly
    def set_rtfonly(self, rtfonly): self.rtfonly = rtfonly
    def add_rtfonly(self, value): self.rtfonly.append(value)
    def insert_rtfonly(self, index, value): self.rtfonly[index] = value
    def get_latexonly(self): return self.latexonly
    def set_latexonly(self, latexonly): self.latexonly = latexonly
    def add_latexonly(self, value): self.latexonly.append(value)
    def insert_latexonly(self, index, value): self.latexonly[index] = value
    def get_dot(self): return self.dot
    def set_dot(self, dot): self.dot = dot
    def add_dot(self, value): self.dot.append(value)
    def insert_dot(self, index, value): self.dot[index] = value
    def get_anchor(self): return self.anchor
    def set_anchor(self, anchor): self.anchor = anchor
    def add_anchor(self, value): self.anchor.append(value)
    def insert_anchor(self, index, value): self.anchor[index] = value
    def get_formula(self): return self.formula
    def set_formula(self, formula): self.formula = formula
    def add_formula(self, value): self.formula.append(value)
    def insert_formula(self, index, value): self.formula[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_copy(self): return self.copy
    def set_copy(self, copy): self.copy = copy
    def add_copy(self, value): self.copy.append(value)
    def insert_copy(self, index, value): self.copy[index] = value
    def get_trademark(self): return self.trademark
    def set_trademark(self, trademark): self.trademark = trademark
    def add_trademark(self, value): self.trademark.append(value)
    def insert_trademark(self, index, value): self.trademark[index] = value
    def get_registered(self): return self.registered
    def set_registered(self, registered): self.registered = registered
    def add_registered(self, value): self.registered.append(value)
    def insert_registered(self, index, value): self.registered[index] = value
    def get_lsquo(self): return self.lsquo
    def set_lsquo(self, lsquo): self.lsquo = lsquo
    def add_lsquo(self, value): self.lsquo.append(value)
    def insert_lsquo(self, index, value): self.lsquo[index] = value
    def get_rsquo(self): return self.rsquo
    def set_rsquo(self, rsquo): self.rsquo = rsquo
    def add_rsquo(self, value): self.rsquo.append(value)
    def insert_rsquo(self, index, value): self.rsquo[index] = value
    def get_ldquo(self): return self.ldquo
    def set_ldquo(self, ldquo): self.ldquo = ldquo
    def add_ldquo(self, value): self.ldquo.append(value)
    def insert_ldquo(self, index, value): self.ldquo[index] = value
    def get_rdquo(self): return self.rdquo
    def set_rdquo(self, rdquo): self.rdquo = rdquo
    def add_rdquo(self, value): self.rdquo.append(value)
    def insert_rdquo(self, index, value): self.rdquo[index] = value
    def get_ndash(self): return self.ndash
    def set_ndash(self, ndash): self.ndash = ndash
    def add_ndash(self, value): self.ndash.append(value)
    def insert_ndash(self, index, value): self.ndash[index] = value
    def get_mdash(self): return self.mdash
    def set_mdash(self, mdash): self.mdash = mdash
    def add_mdash(self, value): self.mdash.append(value)
    def insert_mdash(self, index, value): self.mdash[index] = value
    def get_umlaut(self): return self.umlaut
    def set_umlaut(self, umlaut): self.umlaut = umlaut
    def add_umlaut(self, value): self.umlaut.append(value)
    def insert_umlaut(self, index, value): self.umlaut[index] = value
    def get_acute(self): return self.acute
    def set_acute(self, acute): self.acute = acute
    def add_acute(self, value): self.acute.append(value)
    def insert_acute(self, index, value): self.acute[index] = value
    def get_grave(self): return self.grave
    def set_grave(self, grave): self.grave = grave
    def add_grave(self, value): self.grave.append(value)
    def insert_grave(self, index, value): self.grave[index] = value
    def get_circ(self): return self.circ
    def set_circ(self, circ): self.circ = circ
    def add_circ(self, value): self.circ.append(value)
    def insert_circ(self, index, value): self.circ[index] = value
    def get_slash(self): return self.slash
    def set_slash(self, slash): self.slash = slash
    def add_slash(self, value): self.slash.append(value)
    def insert_slash(self, index, value): self.slash[index] = value
    def get_tilde(self): return self.tilde
    def set_tilde(self, tilde): self.tilde = tilde
    def add_tilde(self, value): self.tilde.append(value)
    def insert_tilde(self, index, value): self.tilde[index] = value
    def get_cedil(self): return self.cedil
    def set_cedil(self, cedil): self.cedil = cedil
    def add_cedil(self, value): self.cedil.append(value)
    def insert_cedil(self, index, value): self.cedil[index] = value
    def get_ring(self): return self.ring
    def set_ring(self, ring): self.ring = ring
    def add_ring(self, value): self.ring.append(value)
    def insert_ring(self, index, value): self.ring[index] = value
    def get_szlig(self): return self.szlig
    def set_szlig(self, szlig): self.szlig = szlig
    def add_szlig(self, value): self.szlig.append(value)
    def insert_szlig(self, index, value): self.szlig[index] = value
    def get_nonbreakablespace(self): return self.nonbreakablespace
    def set_nonbreakablespace(self, nonbreakablespace): self.nonbreakablespace = nonbreakablespace
    def add_nonbreakablespace(self, value): self.nonbreakablespace.append(value)
    def insert_nonbreakablespace(self, index, value): self.nonbreakablespace[index] = value
    def get_aelig(self): return self.aelig
    def set_aelig(self, aelig): self.aelig = aelig
    def add_aelig(self, value): self.aelig.append(value)
    def insert_aelig(self, index, value): self.aelig[index] = value
    def get_AElig(self): return self.AElig
    def set_AElig(self, AElig): self.AElig = AElig
    def add_AElig(self, value): self.AElig.append(value)
    def insert_AElig(self, index, value): self.AElig[index] = value
    def get_Gamma(self): return self.Gamma
    def set_Gamma(self, Gamma): self.Gamma = Gamma
    def add_Gamma(self, value): self.Gamma.append(value)
    def insert_Gamma(self, index, value): self.Gamma[index] = value
    def get_Delta(self): return self.Delta
    def set_Delta(self, Delta): self.Delta = Delta
    def add_Delta(self, value): self.Delta.append(value)
    def insert_Delta(self, index, value): self.Delta[index] = value
    def get_Theta(self): return self.Theta
    def set_Theta(self, Theta): self.Theta = Theta
    def add_Theta(self, value): self.Theta.append(value)
    def insert_Theta(self, index, value): self.Theta[index] = value
    def get_Lambda(self): return self.Lambda
    def set_Lambda(self, Lambda): self.Lambda = Lambda
    def add_Lambda(self, value): self.Lambda.append(value)
    def insert_Lambda(self, index, value): self.Lambda[index] = value
    def get_Xi(self): return self.Xi
    def set_Xi(self, Xi): self.Xi = Xi
    def add_Xi(self, value): self.Xi.append(value)
    def insert_Xi(self, index, value): self.Xi[index] = value
    def get_Pi(self): return self.Pi
    def set_Pi(self, Pi): self.Pi = Pi
    def add_Pi(self, value): self.Pi.append(value)
    def insert_Pi(self, index, value): self.Pi[index] = value
    def get_Sigma(self): return self.Sigma
    def set_Sigma(self, Sigma): self.Sigma = Sigma
    def add_Sigma(self, value): self.Sigma.append(value)
    def insert_Sigma(self, index, value): self.Sigma[index] = value
    def get_Upsilon(self): return self.Upsilon
    def set_Upsilon(self, Upsilon): self.Upsilon = Upsilon
    def add_Upsilon(self, value): self.Upsilon.append(value)
    def insert_Upsilon(self, index, value): self.Upsilon[index] = value
    def get_Phi(self): return self.Phi
    def set_Phi(self, Phi): self.Phi = Phi
    def add_Phi(self, value): self.Phi.append(value)
    def insert_Phi(self, index, value): self.Phi[index] = value
    def get_Psi(self): return self.Psi
    def set_Psi(self, Psi): self.Psi = Psi
    def add_Psi(self, value): self.Psi.append(value)
    def insert_Psi(self, index, value): self.Psi[index] = value
    def get_Omega(self): return self.Omega
    def set_Omega(self, Omega): self.Omega = Omega
    def add_Omega(self, value): self.Omega.append(value)
    def insert_Omega(self, index, value): self.Omega[index] = value
    def get_alpha(self): return self.alpha
    def set_alpha(self, alpha): self.alpha = alpha
    def add_alpha(self, value): self.alpha.append(value)
    def insert_alpha(self, index, value): self.alpha[index] = value
    def get_beta(self): return self.beta
    def set_beta(self, beta): self.beta = beta
    def add_beta(self, value): self.beta.append(value)
    def insert_beta(self, index, value): self.beta[index] = value
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def add_gamma(self, value): self.gamma.append(value)
    def insert_gamma(self, index, value): self.gamma[index] = value
    def get_delta(self): return self.delta
    def set_delta(self, delta): self.delta = delta
    def add_delta(self, value): self.delta.append(value)
    def insert_delta(self, index, value): self.delta[index] = value
    def get_epsilon(self): return self.epsilon
    def set_epsilon(self, epsilon): self.epsilon = epsilon
    def add_epsilon(self, value): self.epsilon.append(value)
    def insert_epsilon(self, index, value): self.epsilon[index] = value
    def get_zeta(self): return self.zeta
    def set_zeta(self, zeta): self.zeta = zeta
    def add_zeta(self, value): self.zeta.append(value)
    def insert_zeta(self, index, value): self.zeta[index] = value
    def get_eta(self): return self.eta
    def set_eta(self, eta): self.eta = eta
    def add_eta(self, value): self.eta.append(value)
    def insert_eta(self, index, value): self.eta[index] = value
    def get_theta(self): return self.theta
    def set_theta(self, theta): self.theta = theta
    def add_theta(self, value): self.theta.append(value)
    def insert_theta(self, index, value): self.theta[index] = value
    def get_iota(self): return self.iota
    def set_iota(self, iota): self.iota = iota
    def add_iota(self, value): self.iota.append(value)
    def insert_iota(self, index, value): self.iota[index] = value
    def get_kappa(self): return self.kappa
    def set_kappa(self, kappa): self.kappa = kappa
    def add_kappa(self, value): self.kappa.append(value)
    def insert_kappa(self, index, value): self.kappa[index] = value
    def get_lambda(self): return self.lambda_
    def set_lambda(self, lambda_): self.lambda_ = lambda_
    def add_lambda(self, value): self.lambda_.append(value)
    def insert_lambda(self, index, value): self.lambda_[index] = value
    def get_mu(self): return self.mu
    def set_mu(self, mu): self.mu = mu
    def add_mu(self, value): self.mu.append(value)
    def insert_mu(self, index, value): self.mu[index] = value
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def add_nu(self, value): self.nu.append(value)
    def insert_nu(self, index, value): self.nu[index] = value
    def get_xi(self): return self.xi
    def set_xi(self, xi): self.xi = xi
    def add_xi(self, value): self.xi.append(value)
    def insert_xi(self, index, value): self.xi[index] = value
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def add_pi(self, value): self.pi.append(value)
    def insert_pi(self, index, value): self.pi[index] = value
    def get_rho(self): return self.rho
    def set_rho(self, rho): self.rho = rho
    def add_rho(self, value): self.rho.append(value)
    def insert_rho(self, index, value): self.rho[index] = value
    def get_sigma(self): return self.sigma
    def set_sigma(self, sigma): self.sigma = sigma
    def add_sigma(self, value): self.sigma.append(value)
    def insert_sigma(self, index, value): self.sigma[index] = value
    def get_tau(self): return self.tau
    def set_tau(self, tau): self.tau = tau
    def add_tau(self, value): self.tau.append(value)
    def insert_tau(self, index, value): self.tau[index] = value
    def get_upsilon(self): return self.upsilon
    def set_upsilon(self, upsilon): self.upsilon = upsilon
    def add_upsilon(self, value): self.upsilon.append(value)
    def insert_upsilon(self, index, value): self.upsilon[index] = value
    def get_phi(self): return self.phi
    def set_phi(self, phi): self.phi = phi
    def add_phi(self, value): self.phi.append(value)
    def insert_phi(self, index, value): self.phi[index] = value
    def get_chi(self): return self.chi
    def set_chi(self, chi): self.chi = chi
    def add_chi(self, value): self.chi.append(value)
    def insert_chi(self, index, value): self.chi[index] = value
    def get_psi(self): return self.psi
    def set_psi(self, psi): self.psi = psi
    def add_psi(self, value): self.psi.append(value)
    def insert_psi(self, index, value): self.psi[index] = value
    def get_omega(self): return self.omega
    def set_omega(self, omega): self.omega = omega
    def add_omega(self, value): self.omega.append(value)
    def insert_omega(self, index, value): self.omega[index] = value
    def get_sigmaf(self): return self.sigmaf
    def set_sigmaf(self, sigmaf): self.sigmaf = sigmaf
    def add_sigmaf(self, value): self.sigmaf.append(value)
    def insert_sigmaf(self, index, value): self.sigmaf[index] = value
    def get_sect(self): return self.sect
    def set_sect(self, sect): self.sect = sect
    def add_sect(self, value): self.sect.append(value)
    def insert_sect(self, index, value): self.sect[index] = value
    def get_deg(self): return self.deg
    def set_deg(self, deg): self.deg = deg
    def add_deg(self, value): self.deg.append(value)
    def insert_deg(self, index, value): self.deg[index] = value
    def get_prime(self): return self.prime
    def set_prime(self, prime): self.prime = prime
    def add_prime(self, value): self.prime.append(value)
    def insert_prime(self, index, value): self.prime[index] = value
    def get_Prime(self): return self.Prime
    def set_Prime(self, Prime): self.Prime = Prime
    def add_Prime(self, value): self.Prime.append(value)
    def insert_Prime(self, index, value): self.Prime[index] = value
    def get_infin(self): return self.infin
    def set_infin(self, infin): self.infin = infin
    def add_infin(self, value): self.infin.append(value)
    def insert_infin(self, index, value): self.infin[index] = value
    def get_empty(self): return self.empty
    def set_empty(self, empty): self.empty = empty
    def add_empty(self, value): self.empty.append(value)
    def insert_empty(self, index, value): self.empty[index] = value
    def get_plusmn(self): return self.plusmn
    def set_plusmn(self, plusmn): self.plusmn = plusmn
    def add_plusmn(self, value): self.plusmn.append(value)
    def insert_plusmn(self, index, value): self.plusmn[index] = value
    def get_times(self): return self.times
    def set_times(self, times): self.times = times
    def add_times(self, value): self.times.append(value)
    def insert_times(self, index, value): self.times[index] = value
    def get_minus(self): return self.minus
    def set_minus(self, minus): self.minus = minus
    def add_minus(self, value): self.minus.append(value)
    def insert_minus(self, index, value): self.minus[index] = value
    def get_sdot(self): return self.sdot
    def set_sdot(self, sdot): self.sdot = sdot
    def add_sdot(self, value): self.sdot.append(value)
    def insert_sdot(self, index, value): self.sdot[index] = value
    def get_part(self): return self.part
    def set_part(self, part): self.part = part
    def add_part(self, value): self.part.append(value)
    def insert_part(self, index, value): self.part[index] = value
    def get_nabla(self): return self.nabla
    def set_nabla(self, nabla): self.nabla = nabla
    def add_nabla(self, value): self.nabla.append(value)
    def insert_nabla(self, index, value): self.nabla[index] = value
    def get_radic(self): return self.radic
    def set_radic(self, radic): self.radic = radic
    def add_radic(self, value): self.radic.append(value)
    def insert_radic(self, index, value): self.radic[index] = value
    def get_perp(self): return self.perp
    def set_perp(self, perp): self.perp = perp
    def add_perp(self, value): self.perp.append(value)
    def insert_perp(self, index, value): self.perp[index] = value
    def get_sum(self): return self.sum
    def set_sum(self, sum): self.sum = sum
    def add_sum(self, value): self.sum.append(value)
    def insert_sum(self, index, value): self.sum[index] = value
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def add_int(self, value): self.int.append(value)
    def insert_int(self, index, value): self.int[index] = value
    def get_prod(self): return self.prod
    def set_prod(self, prod): self.prod = prod
    def add_prod(self, value): self.prod.append(value)
    def insert_prod(self, index, value): self.prod[index] = value
    def get_sim(self): return self.sim
    def set_sim(self, sim): self.sim = sim
    def add_sim(self, value): self.sim.append(value)
    def insert_sim(self, index, value): self.sim[index] = value
    def get_asymp(self): return self.asymp
    def set_asymp(self, asymp): self.asymp = asymp
    def add_asymp(self, value): self.asymp.append(value)
    def insert_asymp(self, index, value): self.asymp[index] = value
    def get_ne(self): return self.ne
    def set_ne(self, ne): self.ne = ne
    def add_ne(self, value): self.ne.append(value)
    def insert_ne(self, index, value): self.ne[index] = value
    def get_equiv(self): return self.equiv
    def set_equiv(self, equiv): self.equiv = equiv
    def add_equiv(self, value): self.equiv.append(value)
    def insert_equiv(self, index, value): self.equiv[index] = value
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def add_prop(self, value): self.prop.append(value)
    def insert_prop(self, index, value): self.prop[index] = value
    def get_le(self): return self.le
    def set_le(self, le): self.le = le
    def add_le(self, value): self.le.append(value)
    def insert_le(self, index, value): self.le[index] = value
    def get_ge(self): return self.ge
    def set_ge(self, ge): self.ge = ge
    def add_ge(self, value): self.ge.append(value)
    def insert_ge(self, index, value): self.ge[index] = value
    def get_larr(self): return self.larr
    def set_larr(self, larr): self.larr = larr
    def add_larr(self, value): self.larr.append(value)
    def insert_larr(self, index, value): self.larr[index] = value
    def get_rarr(self): return self.rarr
    def set_rarr(self, rarr): self.rarr = rarr
    def add_rarr(self, value): self.rarr.append(value)
    def insert_rarr(self, index, value): self.rarr[index] = value
    def get_isin(self): return self.isin
    def set_isin(self, isin): self.isin = isin
    def add_isin(self, value): self.isin.append(value)
    def insert_isin(self, index, value): self.isin[index] = value
    def get_notin(self): return self.notin
    def set_notin(self, notin): self.notin = notin
    def add_notin(self, value): self.notin.append(value)
    def insert_notin(self, index, value): self.notin[index] = value
    def get_lceil(self): return self.lceil
    def set_lceil(self, lceil): self.lceil = lceil
    def add_lceil(self, value): self.lceil.append(value)
    def insert_lceil(self, index, value): self.lceil[index] = value
    def get_rceil(self): return self.rceil
    def set_rceil(self, rceil): self.rceil = rceil
    def add_rceil(self, value): self.rceil.append(value)
    def insert_rceil(self, index, value): self.rceil[index] = value
    def get_lfloor(self): return self.lfloor
    def set_lfloor(self, lfloor): self.lfloor = lfloor
    def add_lfloor(self, value): self.lfloor.append(value)
    def insert_lfloor(self, index, value): self.lfloor[index] = value
    def get_rfloor(self): return self.rfloor
    def set_rfloor(self, rfloor): self.rfloor = rfloor
    def add_rfloor(self, value): self.rfloor.append(value)
    def insert_rfloor(self, index, value): self.rfloor[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ulink or
            self.bold or
            self.emphasis or
            self.computeroutput or
            self.subscript or
            self.superscript or
            self.center or
            self.small or
            self.htmlonly or
            self.manonly or
            self.xmlonly or
            self.rtfonly or
            self.latexonly or
            self.dot or
            self.anchor or
            self.formula or
            self.ref or
            self.copy or
            self.trademark or
            self.registered or
            self.lsquo or
            self.rsquo or
            self.ldquo or
            self.rdquo or
            self.ndash or
            self.mdash or
            self.umlaut or
            self.acute or
            self.grave or
            self.circ or
            self.slash or
            self.tilde or
            self.cedil or
            self.ring or
            self.szlig or
            self.nonbreakablespace or
            self.aelig or
            self.AElig or
            self.Gamma or
            self.Delta or
            self.Theta or
            self.Lambda or
            self.Xi or
            self.Pi or
            self.Sigma or
            self.Upsilon or
            self.Phi or
            self.Psi or
            self.Omega or
            self.alpha or
            self.beta or
            self.gamma or
            self.delta or
            self.epsilon or
            self.zeta or
            self.eta or
            self.theta or
            self.iota or
            self.kappa or
            self.lambda_ or
            self.mu or
            self.nu or
            self.xi or
            self.pi or
            self.rho or
            self.sigma or
            self.tau or
            self.upsilon or
            self.phi or
            self.chi or
            self.psi or
            self.omega or
            self.sigmaf or
            self.sect or
            self.deg or
            self.prime or
            self.Prime or
            self.infin or
            self.empty or
            self.plusmn or
            self.times or
            self.minus or
            self.sdot or
            self.part or
            self.nabla or
            self.radic or
            self.perp or
            self.sum or
            self.int or
            self.prod or
            self.sim or
            self.asymp or
            self.ne or
            self.equiv or
            self.prop or
            self.le or
            self.ge or
            self.larr or
            self.rarr or
            self.isin or
            self.notin or
            self.lceil or
            self.rceil or
            self.lfloor or
            self.rfloor or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docCaptionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docCaptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docCaptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docCaptionType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docCaptionType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ulink':
            obj_ = docURLLink.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ulink', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ulink'):
              self.add_ulink(obj_.value)
            elif hasattr(self, 'set_ulink'):
              self.set_ulink(obj_.value)
        elif nodeName_ == 'bold':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'bold', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_bold'):
              self.add_bold(obj_.value)
            elif hasattr(self, 'set_bold'):
              self.set_bold(obj_.value)
        elif nodeName_ == 'emphasis':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'emphasis', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_emphasis'):
              self.add_emphasis(obj_.value)
            elif hasattr(self, 'set_emphasis'):
              self.set_emphasis(obj_.value)
        elif nodeName_ == 'computeroutput':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'computeroutput', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_computeroutput'):
              self.add_computeroutput(obj_.value)
            elif hasattr(self, 'set_computeroutput'):
              self.set_computeroutput(obj_.value)
        elif nodeName_ == 'subscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'subscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_subscript'):
              self.add_subscript(obj_.value)
            elif hasattr(self, 'set_subscript'):
              self.set_subscript(obj_.value)
        elif nodeName_ == 'superscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'superscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_superscript'):
              self.add_superscript(obj_.value)
            elif hasattr(self, 'set_superscript'):
              self.set_superscript(obj_.value)
        elif nodeName_ == 'center':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'center', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_center'):
              self.add_center(obj_.value)
            elif hasattr(self, 'set_center'):
              self.set_center(obj_.value)
        elif nodeName_ == 'small':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'small', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_small'):
              self.add_small(obj_.value)
            elif hasattr(self, 'set_small'):
              self.set_small(obj_.value)
        elif nodeName_ == 'htmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'htmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'manonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'manonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'xmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'xmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'rtfonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'rtfonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'latexonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'latexonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'dot' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'dot', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'anchor':
            obj_ = docAnchorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'anchor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_anchor'):
              self.add_anchor(obj_.value)
            elif hasattr(self, 'set_anchor'):
              self.set_anchor(obj_.value)
        elif nodeName_ == 'formula':
            obj_ = docFormulaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'formula', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_formula'):
              self.add_formula(obj_.value)
            elif hasattr(self, 'set_formula'):
              self.set_formula(obj_.value)
        elif nodeName_ == 'ref':
            obj_ = docRefTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        elif nodeName_ == 'copy':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copy', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copy'):
              self.add_copy(obj_.value)
            elif hasattr(self, 'set_copy'):
              self.set_copy(obj_.value)
        elif nodeName_ == 'trademark':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'trademark', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_trademark'):
              self.add_trademark(obj_.value)
            elif hasattr(self, 'set_trademark'):
              self.set_trademark(obj_.value)
        elif nodeName_ == 'registered':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'registered', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_registered'):
              self.add_registered(obj_.value)
            elif hasattr(self, 'set_registered'):
              self.set_registered(obj_.value)
        elif nodeName_ == 'lsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lsquo'):
              self.add_lsquo(obj_.value)
            elif hasattr(self, 'set_lsquo'):
              self.set_lsquo(obj_.value)
        elif nodeName_ == 'rsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rsquo'):
              self.add_rsquo(obj_.value)
            elif hasattr(self, 'set_rsquo'):
              self.set_rsquo(obj_.value)
        elif nodeName_ == 'ldquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ldquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ldquo'):
              self.add_ldquo(obj_.value)
            elif hasattr(self, 'set_ldquo'):
              self.set_ldquo(obj_.value)
        elif nodeName_ == 'rdquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rdquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rdquo'):
              self.add_rdquo(obj_.value)
            elif hasattr(self, 'set_rdquo'):
              self.set_rdquo(obj_.value)
        elif nodeName_ == 'ndash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ndash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ndash'):
              self.add_ndash(obj_.value)
            elif hasattr(self, 'set_ndash'):
              self.set_ndash(obj_.value)
        elif nodeName_ == 'mdash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mdash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mdash'):
              self.add_mdash(obj_.value)
            elif hasattr(self, 'set_mdash'):
              self.set_mdash(obj_.value)
        elif nodeName_ == 'umlaut':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'umlaut', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_umlaut'):
              self.add_umlaut(obj_.value)
            elif hasattr(self, 'set_umlaut'):
              self.set_umlaut(obj_.value)
        elif nodeName_ == 'acute':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'acute', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_acute'):
              self.add_acute(obj_.value)
            elif hasattr(self, 'set_acute'):
              self.set_acute(obj_.value)
        elif nodeName_ == 'grave':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'grave', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_grave'):
              self.add_grave(obj_.value)
            elif hasattr(self, 'set_grave'):
              self.set_grave(obj_.value)
        elif nodeName_ == 'circ':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circ', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_circ'):
              self.add_circ(obj_.value)
            elif hasattr(self, 'set_circ'):
              self.set_circ(obj_.value)
        elif nodeName_ == 'slash':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'slash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_slash'):
              self.add_slash(obj_.value)
            elif hasattr(self, 'set_slash'):
              self.set_slash(obj_.value)
        elif nodeName_ == 'tilde':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tilde', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tilde'):
              self.add_tilde(obj_.value)
            elif hasattr(self, 'set_tilde'):
              self.set_tilde(obj_.value)
        elif nodeName_ == 'cedil':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cedil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_cedil'):
              self.add_cedil(obj_.value)
            elif hasattr(self, 'set_cedil'):
              self.set_cedil(obj_.value)
        elif nodeName_ == 'ring':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ring', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ring'):
              self.add_ring(obj_.value)
            elif hasattr(self, 'set_ring'):
              self.set_ring(obj_.value)
        elif nodeName_ == 'szlig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'szlig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_szlig'):
              self.add_szlig(obj_.value)
            elif hasattr(self, 'set_szlig'):
              self.set_szlig(obj_.value)
        elif nodeName_ == 'nonbreakablespace':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nonbreakablespace', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nonbreakablespace'):
              self.add_nonbreakablespace(obj_.value)
            elif hasattr(self, 'set_nonbreakablespace'):
              self.set_nonbreakablespace(obj_.value)
        elif nodeName_ == 'aelig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'aelig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_aelig'):
              self.add_aelig(obj_.value)
            elif hasattr(self, 'set_aelig'):
              self.set_aelig(obj_.value)
        elif nodeName_ == 'AElig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AElig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AElig'):
              self.add_AElig(obj_.value)
            elif hasattr(self, 'set_AElig'):
              self.set_AElig(obj_.value)
        elif nodeName_ == 'Gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Gamma'):
              self.add_Gamma(obj_.value)
            elif hasattr(self, 'set_Gamma'):
              self.set_Gamma(obj_.value)
        elif nodeName_ == 'Delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Delta'):
              self.add_Delta(obj_.value)
            elif hasattr(self, 'set_Delta'):
              self.set_Delta(obj_.value)
        elif nodeName_ == 'Theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Theta'):
              self.add_Theta(obj_.value)
            elif hasattr(self, 'set_Theta'):
              self.set_Theta(obj_.value)
        elif nodeName_ == 'Lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Lambda'):
              self.add_Lambda(obj_.value)
            elif hasattr(self, 'set_Lambda'):
              self.set_Lambda(obj_.value)
        elif nodeName_ == 'Xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Xi'):
              self.add_Xi(obj_.value)
            elif hasattr(self, 'set_Xi'):
              self.set_Xi(obj_.value)
        elif nodeName_ == 'Pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Pi'):
              self.add_Pi(obj_.value)
            elif hasattr(self, 'set_Pi'):
              self.set_Pi(obj_.value)
        elif nodeName_ == 'Sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Sigma'):
              self.add_Sigma(obj_.value)
            elif hasattr(self, 'set_Sigma'):
              self.set_Sigma(obj_.value)
        elif nodeName_ == 'Upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Upsilon'):
              self.add_Upsilon(obj_.value)
            elif hasattr(self, 'set_Upsilon'):
              self.set_Upsilon(obj_.value)
        elif nodeName_ == 'Phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Phi'):
              self.add_Phi(obj_.value)
            elif hasattr(self, 'set_Phi'):
              self.set_Phi(obj_.value)
        elif nodeName_ == 'Psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Psi'):
              self.add_Psi(obj_.value)
            elif hasattr(self, 'set_Psi'):
              self.set_Psi(obj_.value)
        elif nodeName_ == 'Omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Omega'):
              self.add_Omega(obj_.value)
            elif hasattr(self, 'set_Omega'):
              self.set_Omega(obj_.value)
        elif nodeName_ == 'alpha':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'alpha', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_alpha'):
              self.add_alpha(obj_.value)
            elif hasattr(self, 'set_alpha'):
              self.set_alpha(obj_.value)
        elif nodeName_ == 'beta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'beta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_beta'):
              self.add_beta(obj_.value)
            elif hasattr(self, 'set_beta'):
              self.set_beta(obj_.value)
        elif nodeName_ == 'gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_gamma'):
              self.add_gamma(obj_.value)
            elif hasattr(self, 'set_gamma'):
              self.set_gamma(obj_.value)
        elif nodeName_ == 'delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_delta'):
              self.add_delta(obj_.value)
            elif hasattr(self, 'set_delta'):
              self.set_delta(obj_.value)
        elif nodeName_ == 'epsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'epsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_epsilon'):
              self.add_epsilon(obj_.value)
            elif hasattr(self, 'set_epsilon'):
              self.set_epsilon(obj_.value)
        elif nodeName_ == 'zeta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'zeta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_zeta'):
              self.add_zeta(obj_.value)
            elif hasattr(self, 'set_zeta'):
              self.set_zeta(obj_.value)
        elif nodeName_ == 'eta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'eta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_eta'):
              self.add_eta(obj_.value)
            elif hasattr(self, 'set_eta'):
              self.set_eta(obj_.value)
        elif nodeName_ == 'theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_theta'):
              self.add_theta(obj_.value)
            elif hasattr(self, 'set_theta'):
              self.set_theta(obj_.value)
        elif nodeName_ == 'iota':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'iota', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_iota'):
              self.add_iota(obj_.value)
            elif hasattr(self, 'set_iota'):
              self.set_iota(obj_.value)
        elif nodeName_ == 'kappa':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'kappa', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_kappa'):
              self.add_kappa(obj_.value)
            elif hasattr(self, 'set_kappa'):
              self.set_kappa(obj_.value)
        elif nodeName_ == 'lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lambda'):
              self.add_lambda(obj_.value)
            elif hasattr(self, 'set_lambda'):
              self.set_lambda(obj_.value)
        elif nodeName_ == 'mu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mu'):
              self.add_mu(obj_.value)
            elif hasattr(self, 'set_mu'):
              self.set_mu(obj_.value)
        elif nodeName_ == 'nu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nu'):
              self.add_nu(obj_.value)
            elif hasattr(self, 'set_nu'):
              self.set_nu(obj_.value)
        elif nodeName_ == 'xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xi'):
              self.add_xi(obj_.value)
            elif hasattr(self, 'set_xi'):
              self.set_xi(obj_.value)
        elif nodeName_ == 'pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_pi'):
              self.add_pi(obj_.value)
            elif hasattr(self, 'set_pi'):
              self.set_pi(obj_.value)
        elif nodeName_ == 'rho':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rho', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rho'):
              self.add_rho(obj_.value)
            elif hasattr(self, 'set_rho'):
              self.set_rho(obj_.value)
        elif nodeName_ == 'sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigma'):
              self.add_sigma(obj_.value)
            elif hasattr(self, 'set_sigma'):
              self.set_sigma(obj_.value)
        elif nodeName_ == 'tau':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tau', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tau'):
              self.add_tau(obj_.value)
            elif hasattr(self, 'set_tau'):
              self.set_tau(obj_.value)
        elif nodeName_ == 'upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_upsilon'):
              self.add_upsilon(obj_.value)
            elif hasattr(self, 'set_upsilon'):
              self.set_upsilon(obj_.value)
        elif nodeName_ == 'phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_phi'):
              self.add_phi(obj_.value)
            elif hasattr(self, 'set_phi'):
              self.set_phi(obj_.value)
        elif nodeName_ == 'chi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'chi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_chi'):
              self.add_chi(obj_.value)
            elif hasattr(self, 'set_chi'):
              self.set_chi(obj_.value)
        elif nodeName_ == 'psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_psi'):
              self.add_psi(obj_.value)
            elif hasattr(self, 'set_psi'):
              self.set_psi(obj_.value)
        elif nodeName_ == 'omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_omega'):
              self.add_omega(obj_.value)
            elif hasattr(self, 'set_omega'):
              self.set_omega(obj_.value)
        elif nodeName_ == 'sigmaf':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigmaf', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigmaf'):
              self.add_sigmaf(obj_.value)
            elif hasattr(self, 'set_sigmaf'):
              self.set_sigmaf(obj_.value)
        elif nodeName_ == 'sect':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect'):
              self.add_sect(obj_.value)
            elif hasattr(self, 'set_sect'):
              self.set_sect(obj_.value)
        elif nodeName_ == 'deg':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'deg', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_deg'):
              self.add_deg(obj_.value)
            elif hasattr(self, 'set_deg'):
              self.set_deg(obj_.value)
        elif nodeName_ == 'prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prime'):
              self.add_prime(obj_.value)
            elif hasattr(self, 'set_prime'):
              self.set_prime(obj_.value)
        elif nodeName_ == 'Prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Prime'):
              self.add_Prime(obj_.value)
            elif hasattr(self, 'set_Prime'):
              self.set_Prime(obj_.value)
        elif nodeName_ == 'infin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'infin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_infin'):
              self.add_infin(obj_.value)
            elif hasattr(self, 'set_infin'):
              self.set_infin(obj_.value)
        elif nodeName_ == 'empty':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'empty', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_empty'):
              self.add_empty(obj_.value)
            elif hasattr(self, 'set_empty'):
              self.set_empty(obj_.value)
        elif nodeName_ == 'plusmn':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'plusmn', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_plusmn'):
              self.add_plusmn(obj_.value)
            elif hasattr(self, 'set_plusmn'):
              self.set_plusmn(obj_.value)
        elif nodeName_ == 'times':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'times', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_times'):
              self.add_times(obj_.value)
            elif hasattr(self, 'set_times'):
              self.set_times(obj_.value)
        elif nodeName_ == 'minus':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'minus', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_minus'):
              self.add_minus(obj_.value)
            elif hasattr(self, 'set_minus'):
              self.set_minus(obj_.value)
        elif nodeName_ == 'sdot':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sdot', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sdot'):
              self.add_sdot(obj_.value)
            elif hasattr(self, 'set_sdot'):
              self.set_sdot(obj_.value)
        elif nodeName_ == 'part':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'part', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_part'):
              self.add_part(obj_.value)
            elif hasattr(self, 'set_part'):
              self.set_part(obj_.value)
        elif nodeName_ == 'nabla':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nabla', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nabla'):
              self.add_nabla(obj_.value)
            elif hasattr(self, 'set_nabla'):
              self.set_nabla(obj_.value)
        elif nodeName_ == 'radic':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radic', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_radic'):
              self.add_radic(obj_.value)
            elif hasattr(self, 'set_radic'):
              self.set_radic(obj_.value)
        elif nodeName_ == 'perp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'perp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_perp'):
              self.add_perp(obj_.value)
            elif hasattr(self, 'set_perp'):
              self.set_perp(obj_.value)
        elif nodeName_ == 'sum':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sum', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sum'):
              self.add_sum(obj_.value)
            elif hasattr(self, 'set_sum'):
              self.set_sum(obj_.value)
        elif nodeName_ == 'int':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'int', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_int'):
              self.add_int(obj_.value)
            elif hasattr(self, 'set_int'):
              self.set_int(obj_.value)
        elif nodeName_ == 'prod':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prod'):
              self.add_prod(obj_.value)
            elif hasattr(self, 'set_prod'):
              self.set_prod(obj_.value)
        elif nodeName_ == 'sim':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sim', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sim'):
              self.add_sim(obj_.value)
            elif hasattr(self, 'set_sim'):
              self.set_sim(obj_.value)
        elif nodeName_ == 'asymp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'asymp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_asymp'):
              self.add_asymp(obj_.value)
            elif hasattr(self, 'set_asymp'):
              self.set_asymp(obj_.value)
        elif nodeName_ == 'ne':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ne', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ne'):
              self.add_ne(obj_.value)
            elif hasattr(self, 'set_ne'):
              self.set_ne(obj_.value)
        elif nodeName_ == 'equiv':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'equiv', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_equiv'):
              self.add_equiv(obj_.value)
            elif hasattr(self, 'set_equiv'):
              self.set_equiv(obj_.value)
        elif nodeName_ == 'prop':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prop', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prop'):
              self.add_prop(obj_.value)
            elif hasattr(self, 'set_prop'):
              self.set_prop(obj_.value)
        elif nodeName_ == 'le':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'le', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_le'):
              self.add_le(obj_.value)
            elif hasattr(self, 'set_le'):
              self.set_le(obj_.value)
        elif nodeName_ == 'ge':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ge', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ge'):
              self.add_ge(obj_.value)
            elif hasattr(self, 'set_ge'):
              self.set_ge(obj_.value)
        elif nodeName_ == 'larr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'larr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_larr'):
              self.add_larr(obj_.value)
            elif hasattr(self, 'set_larr'):
              self.set_larr(obj_.value)
        elif nodeName_ == 'rarr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rarr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rarr'):
              self.add_rarr(obj_.value)
            elif hasattr(self, 'set_rarr'):
              self.set_rarr(obj_.value)
        elif nodeName_ == 'isin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'isin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_isin'):
              self.add_isin(obj_.value)
            elif hasattr(self, 'set_isin'):
              self.set_isin(obj_.value)
        elif nodeName_ == 'notin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'notin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_notin'):
              self.add_notin(obj_.value)
            elif hasattr(self, 'set_notin'):
              self.set_notin(obj_.value)
        elif nodeName_ == 'lceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lceil'):
              self.add_lceil(obj_.value)
            elif hasattr(self, 'set_lceil'):
              self.set_lceil(obj_.value)
        elif nodeName_ == 'rceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rceil'):
              self.add_rceil(obj_.value)
            elif hasattr(self, 'set_rceil'):
              self.set_rceil(obj_.value)
        elif nodeName_ == 'lfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lfloor'):
              self.add_lfloor(obj_.value)
            elif hasattr(self, 'set_lfloor'):
              self.set_lfloor(obj_.value)
        elif nodeName_ == 'rfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rfloor'):
              self.add_rfloor(obj_.value)
            elif hasattr(self, 'set_rfloor'):
              self.set_rfloor(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docCaptionType


class docHeadingType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, level=None, ulink=None, bold=None, emphasis=None, computeroutput=None, subscript=None, superscript=None, center=None, small=None, htmlonly=None, manonly=None, xmlonly=None, rtfonly=None, latexonly=None, dot=None, anchor=None, formula=None, ref=None, copy=None, trademark=None, registered=None, lsquo=None, rsquo=None, ldquo=None, rdquo=None, ndash=None, mdash=None, umlaut=None, acute=None, grave=None, circ=None, slash=None, tilde=None, cedil=None, ring=None, szlig=None, nonbreakablespace=None, aelig=None, AElig=None, Gamma=None, Delta=None, Theta=None, Lambda=None, Xi=None, Pi=None, Sigma=None, Upsilon=None, Phi=None, Psi=None, Omega=None, alpha=None, beta=None, gamma=None, delta=None, epsilon=None, zeta=None, eta=None, theta=None, iota=None, kappa=None, lambda_=None, mu=None, nu=None, xi=None, pi=None, rho=None, sigma=None, tau=None, upsilon=None, phi=None, chi=None, psi=None, omega=None, sigmaf=None, sect=None, deg=None, prime=None, Prime=None, infin=None, empty=None, plusmn=None, times=None, minus=None, sdot=None, part=None, nabla=None, radic=None, perp=None, sum=None, int=None, prod=None, sim=None, asymp=None, ne=None, equiv=None, prop=None, le=None, ge=None, larr=None, rarr=None, isin=None, notin=None, lceil=None, rceil=None, lfloor=None, rfloor=None, valueOf_=None, mixedclass_=None, content_=None):
        self.level = _cast(int, level)
        if ulink is None:
            self.ulink = []
        else:
            self.ulink = ulink
        if bold is None:
            self.bold = []
        else:
            self.bold = bold
        if emphasis is None:
            self.emphasis = []
        else:
            self.emphasis = emphasis
        if computeroutput is None:
            self.computeroutput = []
        else:
            self.computeroutput = computeroutput
        if subscript is None:
            self.subscript = []
        else:
            self.subscript = subscript
        if superscript is None:
            self.superscript = []
        else:
            self.superscript = superscript
        if center is None:
            self.center = []
        else:
            self.center = center
        if small is None:
            self.small = []
        else:
            self.small = small
        if htmlonly is None:
            self.htmlonly = []
        else:
            self.htmlonly = htmlonly
        if manonly is None:
            self.manonly = []
        else:
            self.manonly = manonly
        if xmlonly is None:
            self.xmlonly = []
        else:
            self.xmlonly = xmlonly
        if rtfonly is None:
            self.rtfonly = []
        else:
            self.rtfonly = rtfonly
        if latexonly is None:
            self.latexonly = []
        else:
            self.latexonly = latexonly
        if dot is None:
            self.dot = []
        else:
            self.dot = dot
        if anchor is None:
            self.anchor = []
        else:
            self.anchor = anchor
        if formula is None:
            self.formula = []
        else:
            self.formula = formula
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        if copy is None:
            self.copy = []
        else:
            self.copy = copy
        if trademark is None:
            self.trademark = []
        else:
            self.trademark = trademark
        if registered is None:
            self.registered = []
        else:
            self.registered = registered
        if lsquo is None:
            self.lsquo = []
        else:
            self.lsquo = lsquo
        if rsquo is None:
            self.rsquo = []
        else:
            self.rsquo = rsquo
        if ldquo is None:
            self.ldquo = []
        else:
            self.ldquo = ldquo
        if rdquo is None:
            self.rdquo = []
        else:
            self.rdquo = rdquo
        if ndash is None:
            self.ndash = []
        else:
            self.ndash = ndash
        if mdash is None:
            self.mdash = []
        else:
            self.mdash = mdash
        if umlaut is None:
            self.umlaut = []
        else:
            self.umlaut = umlaut
        if acute is None:
            self.acute = []
        else:
            self.acute = acute
        if grave is None:
            self.grave = []
        else:
            self.grave = grave
        if circ is None:
            self.circ = []
        else:
            self.circ = circ
        if slash is None:
            self.slash = []
        else:
            self.slash = slash
        if tilde is None:
            self.tilde = []
        else:
            self.tilde = tilde
        if cedil is None:
            self.cedil = []
        else:
            self.cedil = cedil
        if ring is None:
            self.ring = []
        else:
            self.ring = ring
        if szlig is None:
            self.szlig = []
        else:
            self.szlig = szlig
        if nonbreakablespace is None:
            self.nonbreakablespace = []
        else:
            self.nonbreakablespace = nonbreakablespace
        if aelig is None:
            self.aelig = []
        else:
            self.aelig = aelig
        if AElig is None:
            self.AElig = []
        else:
            self.AElig = AElig
        if Gamma is None:
            self.Gamma = []
        else:
            self.Gamma = Gamma
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Theta is None:
            self.Theta = []
        else:
            self.Theta = Theta
        if Lambda is None:
            self.Lambda = []
        else:
            self.Lambda = Lambda
        if Xi is None:
            self.Xi = []
        else:
            self.Xi = Xi
        if Pi is None:
            self.Pi = []
        else:
            self.Pi = Pi
        if Sigma is None:
            self.Sigma = []
        else:
            self.Sigma = Sigma
        if Upsilon is None:
            self.Upsilon = []
        else:
            self.Upsilon = Upsilon
        if Phi is None:
            self.Phi = []
        else:
            self.Phi = Phi
        if Psi is None:
            self.Psi = []
        else:
            self.Psi = Psi
        if Omega is None:
            self.Omega = []
        else:
            self.Omega = Omega
        if alpha is None:
            self.alpha = []
        else:
            self.alpha = alpha
        if beta is None:
            self.beta = []
        else:
            self.beta = beta
        if gamma is None:
            self.gamma = []
        else:
            self.gamma = gamma
        if delta is None:
            self.delta = []
        else:
            self.delta = delta
        if epsilon is None:
            self.epsilon = []
        else:
            self.epsilon = epsilon
        if zeta is None:
            self.zeta = []
        else:
            self.zeta = zeta
        if eta is None:
            self.eta = []
        else:
            self.eta = eta
        if theta is None:
            self.theta = []
        else:
            self.theta = theta
        if iota is None:
            self.iota = []
        else:
            self.iota = iota
        if kappa is None:
            self.kappa = []
        else:
            self.kappa = kappa
        if lambda_ is None:
            self.lambda_ = []
        else:
            self.lambda_ = lambda_
        if mu is None:
            self.mu = []
        else:
            self.mu = mu
        if nu is None:
            self.nu = []
        else:
            self.nu = nu
        if xi is None:
            self.xi = []
        else:
            self.xi = xi
        if pi is None:
            self.pi = []
        else:
            self.pi = pi
        if rho is None:
            self.rho = []
        else:
            self.rho = rho
        if sigma is None:
            self.sigma = []
        else:
            self.sigma = sigma
        if tau is None:
            self.tau = []
        else:
            self.tau = tau
        if upsilon is None:
            self.upsilon = []
        else:
            self.upsilon = upsilon
        if phi is None:
            self.phi = []
        else:
            self.phi = phi
        if chi is None:
            self.chi = []
        else:
            self.chi = chi
        if psi is None:
            self.psi = []
        else:
            self.psi = psi
        if omega is None:
            self.omega = []
        else:
            self.omega = omega
        if sigmaf is None:
            self.sigmaf = []
        else:
            self.sigmaf = sigmaf
        if sect is None:
            self.sect = []
        else:
            self.sect = sect
        if deg is None:
            self.deg = []
        else:
            self.deg = deg
        if prime is None:
            self.prime = []
        else:
            self.prime = prime
        if Prime is None:
            self.Prime = []
        else:
            self.Prime = Prime
        if infin is None:
            self.infin = []
        else:
            self.infin = infin
        if empty is None:
            self.empty = []
        else:
            self.empty = empty
        if plusmn is None:
            self.plusmn = []
        else:
            self.plusmn = plusmn
        if times is None:
            self.times = []
        else:
            self.times = times
        if minus is None:
            self.minus = []
        else:
            self.minus = minus
        if sdot is None:
            self.sdot = []
        else:
            self.sdot = sdot
        if part is None:
            self.part = []
        else:
            self.part = part
        if nabla is None:
            self.nabla = []
        else:
            self.nabla = nabla
        if radic is None:
            self.radic = []
        else:
            self.radic = radic
        if perp is None:
            self.perp = []
        else:
            self.perp = perp
        if sum is None:
            self.sum = []
        else:
            self.sum = sum
        if int is None:
            self.int = []
        else:
            self.int = int
        if prod is None:
            self.prod = []
        else:
            self.prod = prod
        if sim is None:
            self.sim = []
        else:
            self.sim = sim
        if asymp is None:
            self.asymp = []
        else:
            self.asymp = asymp
        if ne is None:
            self.ne = []
        else:
            self.ne = ne
        if equiv is None:
            self.equiv = []
        else:
            self.equiv = equiv
        if prop is None:
            self.prop = []
        else:
            self.prop = prop
        if le is None:
            self.le = []
        else:
            self.le = le
        if ge is None:
            self.ge = []
        else:
            self.ge = ge
        if larr is None:
            self.larr = []
        else:
            self.larr = larr
        if rarr is None:
            self.rarr = []
        else:
            self.rarr = rarr
        if isin is None:
            self.isin = []
        else:
            self.isin = isin
        if notin is None:
            self.notin = []
        else:
            self.notin = notin
        if lceil is None:
            self.lceil = []
        else:
            self.lceil = lceil
        if rceil is None:
            self.rceil = []
        else:
            self.rceil = rceil
        if lfloor is None:
            self.lfloor = []
        else:
            self.lfloor = lfloor
        if rfloor is None:
            self.rfloor = []
        else:
            self.rfloor = rfloor
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docHeadingType.subclass:
            return docHeadingType.subclass(*args_, **kwargs_)
        else:
            return docHeadingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ulink(self): return self.ulink
    def set_ulink(self, ulink): self.ulink = ulink
    def add_ulink(self, value): self.ulink.append(value)
    def insert_ulink(self, index, value): self.ulink[index] = value
    def get_bold(self): return self.bold
    def set_bold(self, bold): self.bold = bold
    def add_bold(self, value): self.bold.append(value)
    def insert_bold(self, index, value): self.bold[index] = value
    def get_emphasis(self): return self.emphasis
    def set_emphasis(self, emphasis): self.emphasis = emphasis
    def add_emphasis(self, value): self.emphasis.append(value)
    def insert_emphasis(self, index, value): self.emphasis[index] = value
    def get_computeroutput(self): return self.computeroutput
    def set_computeroutput(self, computeroutput): self.computeroutput = computeroutput
    def add_computeroutput(self, value): self.computeroutput.append(value)
    def insert_computeroutput(self, index, value): self.computeroutput[index] = value
    def get_subscript(self): return self.subscript
    def set_subscript(self, subscript): self.subscript = subscript
    def add_subscript(self, value): self.subscript.append(value)
    def insert_subscript(self, index, value): self.subscript[index] = value
    def get_superscript(self): return self.superscript
    def set_superscript(self, superscript): self.superscript = superscript
    def add_superscript(self, value): self.superscript.append(value)
    def insert_superscript(self, index, value): self.superscript[index] = value
    def get_center(self): return self.center
    def set_center(self, center): self.center = center
    def add_center(self, value): self.center.append(value)
    def insert_center(self, index, value): self.center[index] = value
    def get_small(self): return self.small
    def set_small(self, small): self.small = small
    def add_small(self, value): self.small.append(value)
    def insert_small(self, index, value): self.small[index] = value
    def get_htmlonly(self): return self.htmlonly
    def set_htmlonly(self, htmlonly): self.htmlonly = htmlonly
    def add_htmlonly(self, value): self.htmlonly.append(value)
    def insert_htmlonly(self, index, value): self.htmlonly[index] = value
    def get_manonly(self): return self.manonly
    def set_manonly(self, manonly): self.manonly = manonly
    def add_manonly(self, value): self.manonly.append(value)
    def insert_manonly(self, index, value): self.manonly[index] = value
    def get_xmlonly(self): return self.xmlonly
    def set_xmlonly(self, xmlonly): self.xmlonly = xmlonly
    def add_xmlonly(self, value): self.xmlonly.append(value)
    def insert_xmlonly(self, index, value): self.xmlonly[index] = value
    def get_rtfonly(self): return self.rtfonly
    def set_rtfonly(self, rtfonly): self.rtfonly = rtfonly
    def add_rtfonly(self, value): self.rtfonly.append(value)
    def insert_rtfonly(self, index, value): self.rtfonly[index] = value
    def get_latexonly(self): return self.latexonly
    def set_latexonly(self, latexonly): self.latexonly = latexonly
    def add_latexonly(self, value): self.latexonly.append(value)
    def insert_latexonly(self, index, value): self.latexonly[index] = value
    def get_dot(self): return self.dot
    def set_dot(self, dot): self.dot = dot
    def add_dot(self, value): self.dot.append(value)
    def insert_dot(self, index, value): self.dot[index] = value
    def get_anchor(self): return self.anchor
    def set_anchor(self, anchor): self.anchor = anchor
    def add_anchor(self, value): self.anchor.append(value)
    def insert_anchor(self, index, value): self.anchor[index] = value
    def get_formula(self): return self.formula
    def set_formula(self, formula): self.formula = formula
    def add_formula(self, value): self.formula.append(value)
    def insert_formula(self, index, value): self.formula[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_copy(self): return self.copy
    def set_copy(self, copy): self.copy = copy
    def add_copy(self, value): self.copy.append(value)
    def insert_copy(self, index, value): self.copy[index] = value
    def get_trademark(self): return self.trademark
    def set_trademark(self, trademark): self.trademark = trademark
    def add_trademark(self, value): self.trademark.append(value)
    def insert_trademark(self, index, value): self.trademark[index] = value
    def get_registered(self): return self.registered
    def set_registered(self, registered): self.registered = registered
    def add_registered(self, value): self.registered.append(value)
    def insert_registered(self, index, value): self.registered[index] = value
    def get_lsquo(self): return self.lsquo
    def set_lsquo(self, lsquo): self.lsquo = lsquo
    def add_lsquo(self, value): self.lsquo.append(value)
    def insert_lsquo(self, index, value): self.lsquo[index] = value
    def get_rsquo(self): return self.rsquo
    def set_rsquo(self, rsquo): self.rsquo = rsquo
    def add_rsquo(self, value): self.rsquo.append(value)
    def insert_rsquo(self, index, value): self.rsquo[index] = value
    def get_ldquo(self): return self.ldquo
    def set_ldquo(self, ldquo): self.ldquo = ldquo
    def add_ldquo(self, value): self.ldquo.append(value)
    def insert_ldquo(self, index, value): self.ldquo[index] = value
    def get_rdquo(self): return self.rdquo
    def set_rdquo(self, rdquo): self.rdquo = rdquo
    def add_rdquo(self, value): self.rdquo.append(value)
    def insert_rdquo(self, index, value): self.rdquo[index] = value
    def get_ndash(self): return self.ndash
    def set_ndash(self, ndash): self.ndash = ndash
    def add_ndash(self, value): self.ndash.append(value)
    def insert_ndash(self, index, value): self.ndash[index] = value
    def get_mdash(self): return self.mdash
    def set_mdash(self, mdash): self.mdash = mdash
    def add_mdash(self, value): self.mdash.append(value)
    def insert_mdash(self, index, value): self.mdash[index] = value
    def get_umlaut(self): return self.umlaut
    def set_umlaut(self, umlaut): self.umlaut = umlaut
    def add_umlaut(self, value): self.umlaut.append(value)
    def insert_umlaut(self, index, value): self.umlaut[index] = value
    def get_acute(self): return self.acute
    def set_acute(self, acute): self.acute = acute
    def add_acute(self, value): self.acute.append(value)
    def insert_acute(self, index, value): self.acute[index] = value
    def get_grave(self): return self.grave
    def set_grave(self, grave): self.grave = grave
    def add_grave(self, value): self.grave.append(value)
    def insert_grave(self, index, value): self.grave[index] = value
    def get_circ(self): return self.circ
    def set_circ(self, circ): self.circ = circ
    def add_circ(self, value): self.circ.append(value)
    def insert_circ(self, index, value): self.circ[index] = value
    def get_slash(self): return self.slash
    def set_slash(self, slash): self.slash = slash
    def add_slash(self, value): self.slash.append(value)
    def insert_slash(self, index, value): self.slash[index] = value
    def get_tilde(self): return self.tilde
    def set_tilde(self, tilde): self.tilde = tilde
    def add_tilde(self, value): self.tilde.append(value)
    def insert_tilde(self, index, value): self.tilde[index] = value
    def get_cedil(self): return self.cedil
    def set_cedil(self, cedil): self.cedil = cedil
    def add_cedil(self, value): self.cedil.append(value)
    def insert_cedil(self, index, value): self.cedil[index] = value
    def get_ring(self): return self.ring
    def set_ring(self, ring): self.ring = ring
    def add_ring(self, value): self.ring.append(value)
    def insert_ring(self, index, value): self.ring[index] = value
    def get_szlig(self): return self.szlig
    def set_szlig(self, szlig): self.szlig = szlig
    def add_szlig(self, value): self.szlig.append(value)
    def insert_szlig(self, index, value): self.szlig[index] = value
    def get_nonbreakablespace(self): return self.nonbreakablespace
    def set_nonbreakablespace(self, nonbreakablespace): self.nonbreakablespace = nonbreakablespace
    def add_nonbreakablespace(self, value): self.nonbreakablespace.append(value)
    def insert_nonbreakablespace(self, index, value): self.nonbreakablespace[index] = value
    def get_aelig(self): return self.aelig
    def set_aelig(self, aelig): self.aelig = aelig
    def add_aelig(self, value): self.aelig.append(value)
    def insert_aelig(self, index, value): self.aelig[index] = value
    def get_AElig(self): return self.AElig
    def set_AElig(self, AElig): self.AElig = AElig
    def add_AElig(self, value): self.AElig.append(value)
    def insert_AElig(self, index, value): self.AElig[index] = value
    def get_Gamma(self): return self.Gamma
    def set_Gamma(self, Gamma): self.Gamma = Gamma
    def add_Gamma(self, value): self.Gamma.append(value)
    def insert_Gamma(self, index, value): self.Gamma[index] = value
    def get_Delta(self): return self.Delta
    def set_Delta(self, Delta): self.Delta = Delta
    def add_Delta(self, value): self.Delta.append(value)
    def insert_Delta(self, index, value): self.Delta[index] = value
    def get_Theta(self): return self.Theta
    def set_Theta(self, Theta): self.Theta = Theta
    def add_Theta(self, value): self.Theta.append(value)
    def insert_Theta(self, index, value): self.Theta[index] = value
    def get_Lambda(self): return self.Lambda
    def set_Lambda(self, Lambda): self.Lambda = Lambda
    def add_Lambda(self, value): self.Lambda.append(value)
    def insert_Lambda(self, index, value): self.Lambda[index] = value
    def get_Xi(self): return self.Xi
    def set_Xi(self, Xi): self.Xi = Xi
    def add_Xi(self, value): self.Xi.append(value)
    def insert_Xi(self, index, value): self.Xi[index] = value
    def get_Pi(self): return self.Pi
    def set_Pi(self, Pi): self.Pi = Pi
    def add_Pi(self, value): self.Pi.append(value)
    def insert_Pi(self, index, value): self.Pi[index] = value
    def get_Sigma(self): return self.Sigma
    def set_Sigma(self, Sigma): self.Sigma = Sigma
    def add_Sigma(self, value): self.Sigma.append(value)
    def insert_Sigma(self, index, value): self.Sigma[index] = value
    def get_Upsilon(self): return self.Upsilon
    def set_Upsilon(self, Upsilon): self.Upsilon = Upsilon
    def add_Upsilon(self, value): self.Upsilon.append(value)
    def insert_Upsilon(self, index, value): self.Upsilon[index] = value
    def get_Phi(self): return self.Phi
    def set_Phi(self, Phi): self.Phi = Phi
    def add_Phi(self, value): self.Phi.append(value)
    def insert_Phi(self, index, value): self.Phi[index] = value
    def get_Psi(self): return self.Psi
    def set_Psi(self, Psi): self.Psi = Psi
    def add_Psi(self, value): self.Psi.append(value)
    def insert_Psi(self, index, value): self.Psi[index] = value
    def get_Omega(self): return self.Omega
    def set_Omega(self, Omega): self.Omega = Omega
    def add_Omega(self, value): self.Omega.append(value)
    def insert_Omega(self, index, value): self.Omega[index] = value
    def get_alpha(self): return self.alpha
    def set_alpha(self, alpha): self.alpha = alpha
    def add_alpha(self, value): self.alpha.append(value)
    def insert_alpha(self, index, value): self.alpha[index] = value
    def get_beta(self): return self.beta
    def set_beta(self, beta): self.beta = beta
    def add_beta(self, value): self.beta.append(value)
    def insert_beta(self, index, value): self.beta[index] = value
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def add_gamma(self, value): self.gamma.append(value)
    def insert_gamma(self, index, value): self.gamma[index] = value
    def get_delta(self): return self.delta
    def set_delta(self, delta): self.delta = delta
    def add_delta(self, value): self.delta.append(value)
    def insert_delta(self, index, value): self.delta[index] = value
    def get_epsilon(self): return self.epsilon
    def set_epsilon(self, epsilon): self.epsilon = epsilon
    def add_epsilon(self, value): self.epsilon.append(value)
    def insert_epsilon(self, index, value): self.epsilon[index] = value
    def get_zeta(self): return self.zeta
    def set_zeta(self, zeta): self.zeta = zeta
    def add_zeta(self, value): self.zeta.append(value)
    def insert_zeta(self, index, value): self.zeta[index] = value
    def get_eta(self): return self.eta
    def set_eta(self, eta): self.eta = eta
    def add_eta(self, value): self.eta.append(value)
    def insert_eta(self, index, value): self.eta[index] = value
    def get_theta(self): return self.theta
    def set_theta(self, theta): self.theta = theta
    def add_theta(self, value): self.theta.append(value)
    def insert_theta(self, index, value): self.theta[index] = value
    def get_iota(self): return self.iota
    def set_iota(self, iota): self.iota = iota
    def add_iota(self, value): self.iota.append(value)
    def insert_iota(self, index, value): self.iota[index] = value
    def get_kappa(self): return self.kappa
    def set_kappa(self, kappa): self.kappa = kappa
    def add_kappa(self, value): self.kappa.append(value)
    def insert_kappa(self, index, value): self.kappa[index] = value
    def get_lambda(self): return self.lambda_
    def set_lambda(self, lambda_): self.lambda_ = lambda_
    def add_lambda(self, value): self.lambda_.append(value)
    def insert_lambda(self, index, value): self.lambda_[index] = value
    def get_mu(self): return self.mu
    def set_mu(self, mu): self.mu = mu
    def add_mu(self, value): self.mu.append(value)
    def insert_mu(self, index, value): self.mu[index] = value
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def add_nu(self, value): self.nu.append(value)
    def insert_nu(self, index, value): self.nu[index] = value
    def get_xi(self): return self.xi
    def set_xi(self, xi): self.xi = xi
    def add_xi(self, value): self.xi.append(value)
    def insert_xi(self, index, value): self.xi[index] = value
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def add_pi(self, value): self.pi.append(value)
    def insert_pi(self, index, value): self.pi[index] = value
    def get_rho(self): return self.rho
    def set_rho(self, rho): self.rho = rho
    def add_rho(self, value): self.rho.append(value)
    def insert_rho(self, index, value): self.rho[index] = value
    def get_sigma(self): return self.sigma
    def set_sigma(self, sigma): self.sigma = sigma
    def add_sigma(self, value): self.sigma.append(value)
    def insert_sigma(self, index, value): self.sigma[index] = value
    def get_tau(self): return self.tau
    def set_tau(self, tau): self.tau = tau
    def add_tau(self, value): self.tau.append(value)
    def insert_tau(self, index, value): self.tau[index] = value
    def get_upsilon(self): return self.upsilon
    def set_upsilon(self, upsilon): self.upsilon = upsilon
    def add_upsilon(self, value): self.upsilon.append(value)
    def insert_upsilon(self, index, value): self.upsilon[index] = value
    def get_phi(self): return self.phi
    def set_phi(self, phi): self.phi = phi
    def add_phi(self, value): self.phi.append(value)
    def insert_phi(self, index, value): self.phi[index] = value
    def get_chi(self): return self.chi
    def set_chi(self, chi): self.chi = chi
    def add_chi(self, value): self.chi.append(value)
    def insert_chi(self, index, value): self.chi[index] = value
    def get_psi(self): return self.psi
    def set_psi(self, psi): self.psi = psi
    def add_psi(self, value): self.psi.append(value)
    def insert_psi(self, index, value): self.psi[index] = value
    def get_omega(self): return self.omega
    def set_omega(self, omega): self.omega = omega
    def add_omega(self, value): self.omega.append(value)
    def insert_omega(self, index, value): self.omega[index] = value
    def get_sigmaf(self): return self.sigmaf
    def set_sigmaf(self, sigmaf): self.sigmaf = sigmaf
    def add_sigmaf(self, value): self.sigmaf.append(value)
    def insert_sigmaf(self, index, value): self.sigmaf[index] = value
    def get_sect(self): return self.sect
    def set_sect(self, sect): self.sect = sect
    def add_sect(self, value): self.sect.append(value)
    def insert_sect(self, index, value): self.sect[index] = value
    def get_deg(self): return self.deg
    def set_deg(self, deg): self.deg = deg
    def add_deg(self, value): self.deg.append(value)
    def insert_deg(self, index, value): self.deg[index] = value
    def get_prime(self): return self.prime
    def set_prime(self, prime): self.prime = prime
    def add_prime(self, value): self.prime.append(value)
    def insert_prime(self, index, value): self.prime[index] = value
    def get_Prime(self): return self.Prime
    def set_Prime(self, Prime): self.Prime = Prime
    def add_Prime(self, value): self.Prime.append(value)
    def insert_Prime(self, index, value): self.Prime[index] = value
    def get_infin(self): return self.infin
    def set_infin(self, infin): self.infin = infin
    def add_infin(self, value): self.infin.append(value)
    def insert_infin(self, index, value): self.infin[index] = value
    def get_empty(self): return self.empty
    def set_empty(self, empty): self.empty = empty
    def add_empty(self, value): self.empty.append(value)
    def insert_empty(self, index, value): self.empty[index] = value
    def get_plusmn(self): return self.plusmn
    def set_plusmn(self, plusmn): self.plusmn = plusmn
    def add_plusmn(self, value): self.plusmn.append(value)
    def insert_plusmn(self, index, value): self.plusmn[index] = value
    def get_times(self): return self.times
    def set_times(self, times): self.times = times
    def add_times(self, value): self.times.append(value)
    def insert_times(self, index, value): self.times[index] = value
    def get_minus(self): return self.minus
    def set_minus(self, minus): self.minus = minus
    def add_minus(self, value): self.minus.append(value)
    def insert_minus(self, index, value): self.minus[index] = value
    def get_sdot(self): return self.sdot
    def set_sdot(self, sdot): self.sdot = sdot
    def add_sdot(self, value): self.sdot.append(value)
    def insert_sdot(self, index, value): self.sdot[index] = value
    def get_part(self): return self.part
    def set_part(self, part): self.part = part
    def add_part(self, value): self.part.append(value)
    def insert_part(self, index, value): self.part[index] = value
    def get_nabla(self): return self.nabla
    def set_nabla(self, nabla): self.nabla = nabla
    def add_nabla(self, value): self.nabla.append(value)
    def insert_nabla(self, index, value): self.nabla[index] = value
    def get_radic(self): return self.radic
    def set_radic(self, radic): self.radic = radic
    def add_radic(self, value): self.radic.append(value)
    def insert_radic(self, index, value): self.radic[index] = value
    def get_perp(self): return self.perp
    def set_perp(self, perp): self.perp = perp
    def add_perp(self, value): self.perp.append(value)
    def insert_perp(self, index, value): self.perp[index] = value
    def get_sum(self): return self.sum
    def set_sum(self, sum): self.sum = sum
    def add_sum(self, value): self.sum.append(value)
    def insert_sum(self, index, value): self.sum[index] = value
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def add_int(self, value): self.int.append(value)
    def insert_int(self, index, value): self.int[index] = value
    def get_prod(self): return self.prod
    def set_prod(self, prod): self.prod = prod
    def add_prod(self, value): self.prod.append(value)
    def insert_prod(self, index, value): self.prod[index] = value
    def get_sim(self): return self.sim
    def set_sim(self, sim): self.sim = sim
    def add_sim(self, value): self.sim.append(value)
    def insert_sim(self, index, value): self.sim[index] = value
    def get_asymp(self): return self.asymp
    def set_asymp(self, asymp): self.asymp = asymp
    def add_asymp(self, value): self.asymp.append(value)
    def insert_asymp(self, index, value): self.asymp[index] = value
    def get_ne(self): return self.ne
    def set_ne(self, ne): self.ne = ne
    def add_ne(self, value): self.ne.append(value)
    def insert_ne(self, index, value): self.ne[index] = value
    def get_equiv(self): return self.equiv
    def set_equiv(self, equiv): self.equiv = equiv
    def add_equiv(self, value): self.equiv.append(value)
    def insert_equiv(self, index, value): self.equiv[index] = value
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def add_prop(self, value): self.prop.append(value)
    def insert_prop(self, index, value): self.prop[index] = value
    def get_le(self): return self.le
    def set_le(self, le): self.le = le
    def add_le(self, value): self.le.append(value)
    def insert_le(self, index, value): self.le[index] = value
    def get_ge(self): return self.ge
    def set_ge(self, ge): self.ge = ge
    def add_ge(self, value): self.ge.append(value)
    def insert_ge(self, index, value): self.ge[index] = value
    def get_larr(self): return self.larr
    def set_larr(self, larr): self.larr = larr
    def add_larr(self, value): self.larr.append(value)
    def insert_larr(self, index, value): self.larr[index] = value
    def get_rarr(self): return self.rarr
    def set_rarr(self, rarr): self.rarr = rarr
    def add_rarr(self, value): self.rarr.append(value)
    def insert_rarr(self, index, value): self.rarr[index] = value
    def get_isin(self): return self.isin
    def set_isin(self, isin): self.isin = isin
    def add_isin(self, value): self.isin.append(value)
    def insert_isin(self, index, value): self.isin[index] = value
    def get_notin(self): return self.notin
    def set_notin(self, notin): self.notin = notin
    def add_notin(self, value): self.notin.append(value)
    def insert_notin(self, index, value): self.notin[index] = value
    def get_lceil(self): return self.lceil
    def set_lceil(self, lceil): self.lceil = lceil
    def add_lceil(self, value): self.lceil.append(value)
    def insert_lceil(self, index, value): self.lceil[index] = value
    def get_rceil(self): return self.rceil
    def set_rceil(self, rceil): self.rceil = rceil
    def add_rceil(self, value): self.rceil.append(value)
    def insert_rceil(self, index, value): self.rceil[index] = value
    def get_lfloor(self): return self.lfloor
    def set_lfloor(self, lfloor): self.lfloor = lfloor
    def add_lfloor(self, value): self.lfloor.append(value)
    def insert_lfloor(self, index, value): self.lfloor[index] = value
    def get_rfloor(self): return self.rfloor
    def set_rfloor(self, rfloor): self.rfloor = rfloor
    def add_rfloor(self, value): self.rfloor.append(value)
    def insert_rfloor(self, index, value): self.rfloor[index] = value
    def get_level(self): return self.level
    def set_level(self, level): self.level = level
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ulink or
            self.bold or
            self.emphasis or
            self.computeroutput or
            self.subscript or
            self.superscript or
            self.center or
            self.small or
            self.htmlonly or
            self.manonly or
            self.xmlonly or
            self.rtfonly or
            self.latexonly or
            self.dot or
            self.anchor or
            self.formula or
            self.ref or
            self.copy or
            self.trademark or
            self.registered or
            self.lsquo or
            self.rsquo or
            self.ldquo or
            self.rdquo or
            self.ndash or
            self.mdash or
            self.umlaut or
            self.acute or
            self.grave or
            self.circ or
            self.slash or
            self.tilde or
            self.cedil or
            self.ring or
            self.szlig or
            self.nonbreakablespace or
            self.aelig or
            self.AElig or
            self.Gamma or
            self.Delta or
            self.Theta or
            self.Lambda or
            self.Xi or
            self.Pi or
            self.Sigma or
            self.Upsilon or
            self.Phi or
            self.Psi or
            self.Omega or
            self.alpha or
            self.beta or
            self.gamma or
            self.delta or
            self.epsilon or
            self.zeta or
            self.eta or
            self.theta or
            self.iota or
            self.kappa or
            self.lambda_ or
            self.mu or
            self.nu or
            self.xi or
            self.pi or
            self.rho or
            self.sigma or
            self.tau or
            self.upsilon or
            self.phi or
            self.chi or
            self.psi or
            self.omega or
            self.sigmaf or
            self.sect or
            self.deg or
            self.prime or
            self.Prime or
            self.infin or
            self.empty or
            self.plusmn or
            self.times or
            self.minus or
            self.sdot or
            self.part or
            self.nabla or
            self.radic or
            self.perp or
            self.sum or
            self.int or
            self.prod or
            self.sim or
            self.asymp or
            self.ne or
            self.equiv or
            self.prop or
            self.le or
            self.ge or
            self.larr or
            self.rarr or
            self.isin or
            self.notin or
            self.lceil or
            self.rceil or
            self.lfloor or
            self.rfloor or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docHeadingType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docHeadingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docHeadingType'):
        if self.level is not None and 'level' not in already_processed:
            already_processed.add('level')
            outfile.write(' level="%s"' % self.gds_format_integer(self.level, input_name='level'))
    def exportChildren(self, outfile, level, namespace_='', name_='docHeadingType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docHeadingType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.level is not None and 'level' not in already_processed:
            already_processed.add('level')
            showIndent(outfile, level)
            outfile.write('level=%d,\n' % (self.level,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('level', node)
        if value is not None and 'level' not in already_processed:
            already_processed.add('level')
            try:
                self.level = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ulink':
            obj_ = docURLLink.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ulink', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ulink'):
              self.add_ulink(obj_.value)
            elif hasattr(self, 'set_ulink'):
              self.set_ulink(obj_.value)
        elif nodeName_ == 'bold':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'bold', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_bold'):
              self.add_bold(obj_.value)
            elif hasattr(self, 'set_bold'):
              self.set_bold(obj_.value)
        elif nodeName_ == 'emphasis':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'emphasis', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_emphasis'):
              self.add_emphasis(obj_.value)
            elif hasattr(self, 'set_emphasis'):
              self.set_emphasis(obj_.value)
        elif nodeName_ == 'computeroutput':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'computeroutput', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_computeroutput'):
              self.add_computeroutput(obj_.value)
            elif hasattr(self, 'set_computeroutput'):
              self.set_computeroutput(obj_.value)
        elif nodeName_ == 'subscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'subscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_subscript'):
              self.add_subscript(obj_.value)
            elif hasattr(self, 'set_subscript'):
              self.set_subscript(obj_.value)
        elif nodeName_ == 'superscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'superscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_superscript'):
              self.add_superscript(obj_.value)
            elif hasattr(self, 'set_superscript'):
              self.set_superscript(obj_.value)
        elif nodeName_ == 'center':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'center', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_center'):
              self.add_center(obj_.value)
            elif hasattr(self, 'set_center'):
              self.set_center(obj_.value)
        elif nodeName_ == 'small':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'small', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_small'):
              self.add_small(obj_.value)
            elif hasattr(self, 'set_small'):
              self.set_small(obj_.value)
        elif nodeName_ == 'htmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'htmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'manonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'manonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'xmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'xmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'rtfonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'rtfonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'latexonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'latexonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'dot' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'dot', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'anchor':
            obj_ = docAnchorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'anchor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_anchor'):
              self.add_anchor(obj_.value)
            elif hasattr(self, 'set_anchor'):
              self.set_anchor(obj_.value)
        elif nodeName_ == 'formula':
            obj_ = docFormulaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'formula', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_formula'):
              self.add_formula(obj_.value)
            elif hasattr(self, 'set_formula'):
              self.set_formula(obj_.value)
        elif nodeName_ == 'ref':
            obj_ = docRefTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        elif nodeName_ == 'copy':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copy', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copy'):
              self.add_copy(obj_.value)
            elif hasattr(self, 'set_copy'):
              self.set_copy(obj_.value)
        elif nodeName_ == 'trademark':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'trademark', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_trademark'):
              self.add_trademark(obj_.value)
            elif hasattr(self, 'set_trademark'):
              self.set_trademark(obj_.value)
        elif nodeName_ == 'registered':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'registered', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_registered'):
              self.add_registered(obj_.value)
            elif hasattr(self, 'set_registered'):
              self.set_registered(obj_.value)
        elif nodeName_ == 'lsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lsquo'):
              self.add_lsquo(obj_.value)
            elif hasattr(self, 'set_lsquo'):
              self.set_lsquo(obj_.value)
        elif nodeName_ == 'rsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rsquo'):
              self.add_rsquo(obj_.value)
            elif hasattr(self, 'set_rsquo'):
              self.set_rsquo(obj_.value)
        elif nodeName_ == 'ldquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ldquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ldquo'):
              self.add_ldquo(obj_.value)
            elif hasattr(self, 'set_ldquo'):
              self.set_ldquo(obj_.value)
        elif nodeName_ == 'rdquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rdquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rdquo'):
              self.add_rdquo(obj_.value)
            elif hasattr(self, 'set_rdquo'):
              self.set_rdquo(obj_.value)
        elif nodeName_ == 'ndash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ndash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ndash'):
              self.add_ndash(obj_.value)
            elif hasattr(self, 'set_ndash'):
              self.set_ndash(obj_.value)
        elif nodeName_ == 'mdash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mdash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mdash'):
              self.add_mdash(obj_.value)
            elif hasattr(self, 'set_mdash'):
              self.set_mdash(obj_.value)
        elif nodeName_ == 'umlaut':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'umlaut', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_umlaut'):
              self.add_umlaut(obj_.value)
            elif hasattr(self, 'set_umlaut'):
              self.set_umlaut(obj_.value)
        elif nodeName_ == 'acute':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'acute', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_acute'):
              self.add_acute(obj_.value)
            elif hasattr(self, 'set_acute'):
              self.set_acute(obj_.value)
        elif nodeName_ == 'grave':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'grave', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_grave'):
              self.add_grave(obj_.value)
            elif hasattr(self, 'set_grave'):
              self.set_grave(obj_.value)
        elif nodeName_ == 'circ':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circ', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_circ'):
              self.add_circ(obj_.value)
            elif hasattr(self, 'set_circ'):
              self.set_circ(obj_.value)
        elif nodeName_ == 'slash':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'slash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_slash'):
              self.add_slash(obj_.value)
            elif hasattr(self, 'set_slash'):
              self.set_slash(obj_.value)
        elif nodeName_ == 'tilde':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tilde', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tilde'):
              self.add_tilde(obj_.value)
            elif hasattr(self, 'set_tilde'):
              self.set_tilde(obj_.value)
        elif nodeName_ == 'cedil':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cedil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_cedil'):
              self.add_cedil(obj_.value)
            elif hasattr(self, 'set_cedil'):
              self.set_cedil(obj_.value)
        elif nodeName_ == 'ring':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ring', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ring'):
              self.add_ring(obj_.value)
            elif hasattr(self, 'set_ring'):
              self.set_ring(obj_.value)
        elif nodeName_ == 'szlig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'szlig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_szlig'):
              self.add_szlig(obj_.value)
            elif hasattr(self, 'set_szlig'):
              self.set_szlig(obj_.value)
        elif nodeName_ == 'nonbreakablespace':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nonbreakablespace', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nonbreakablespace'):
              self.add_nonbreakablespace(obj_.value)
            elif hasattr(self, 'set_nonbreakablespace'):
              self.set_nonbreakablespace(obj_.value)
        elif nodeName_ == 'aelig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'aelig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_aelig'):
              self.add_aelig(obj_.value)
            elif hasattr(self, 'set_aelig'):
              self.set_aelig(obj_.value)
        elif nodeName_ == 'AElig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AElig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AElig'):
              self.add_AElig(obj_.value)
            elif hasattr(self, 'set_AElig'):
              self.set_AElig(obj_.value)
        elif nodeName_ == 'Gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Gamma'):
              self.add_Gamma(obj_.value)
            elif hasattr(self, 'set_Gamma'):
              self.set_Gamma(obj_.value)
        elif nodeName_ == 'Delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Delta'):
              self.add_Delta(obj_.value)
            elif hasattr(self, 'set_Delta'):
              self.set_Delta(obj_.value)
        elif nodeName_ == 'Theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Theta'):
              self.add_Theta(obj_.value)
            elif hasattr(self, 'set_Theta'):
              self.set_Theta(obj_.value)
        elif nodeName_ == 'Lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Lambda'):
              self.add_Lambda(obj_.value)
            elif hasattr(self, 'set_Lambda'):
              self.set_Lambda(obj_.value)
        elif nodeName_ == 'Xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Xi'):
              self.add_Xi(obj_.value)
            elif hasattr(self, 'set_Xi'):
              self.set_Xi(obj_.value)
        elif nodeName_ == 'Pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Pi'):
              self.add_Pi(obj_.value)
            elif hasattr(self, 'set_Pi'):
              self.set_Pi(obj_.value)
        elif nodeName_ == 'Sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Sigma'):
              self.add_Sigma(obj_.value)
            elif hasattr(self, 'set_Sigma'):
              self.set_Sigma(obj_.value)
        elif nodeName_ == 'Upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Upsilon'):
              self.add_Upsilon(obj_.value)
            elif hasattr(self, 'set_Upsilon'):
              self.set_Upsilon(obj_.value)
        elif nodeName_ == 'Phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Phi'):
              self.add_Phi(obj_.value)
            elif hasattr(self, 'set_Phi'):
              self.set_Phi(obj_.value)
        elif nodeName_ == 'Psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Psi'):
              self.add_Psi(obj_.value)
            elif hasattr(self, 'set_Psi'):
              self.set_Psi(obj_.value)
        elif nodeName_ == 'Omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Omega'):
              self.add_Omega(obj_.value)
            elif hasattr(self, 'set_Omega'):
              self.set_Omega(obj_.value)
        elif nodeName_ == 'alpha':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'alpha', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_alpha'):
              self.add_alpha(obj_.value)
            elif hasattr(self, 'set_alpha'):
              self.set_alpha(obj_.value)
        elif nodeName_ == 'beta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'beta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_beta'):
              self.add_beta(obj_.value)
            elif hasattr(self, 'set_beta'):
              self.set_beta(obj_.value)
        elif nodeName_ == 'gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_gamma'):
              self.add_gamma(obj_.value)
            elif hasattr(self, 'set_gamma'):
              self.set_gamma(obj_.value)
        elif nodeName_ == 'delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_delta'):
              self.add_delta(obj_.value)
            elif hasattr(self, 'set_delta'):
              self.set_delta(obj_.value)
        elif nodeName_ == 'epsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'epsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_epsilon'):
              self.add_epsilon(obj_.value)
            elif hasattr(self, 'set_epsilon'):
              self.set_epsilon(obj_.value)
        elif nodeName_ == 'zeta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'zeta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_zeta'):
              self.add_zeta(obj_.value)
            elif hasattr(self, 'set_zeta'):
              self.set_zeta(obj_.value)
        elif nodeName_ == 'eta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'eta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_eta'):
              self.add_eta(obj_.value)
            elif hasattr(self, 'set_eta'):
              self.set_eta(obj_.value)
        elif nodeName_ == 'theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_theta'):
              self.add_theta(obj_.value)
            elif hasattr(self, 'set_theta'):
              self.set_theta(obj_.value)
        elif nodeName_ == 'iota':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'iota', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_iota'):
              self.add_iota(obj_.value)
            elif hasattr(self, 'set_iota'):
              self.set_iota(obj_.value)
        elif nodeName_ == 'kappa':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'kappa', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_kappa'):
              self.add_kappa(obj_.value)
            elif hasattr(self, 'set_kappa'):
              self.set_kappa(obj_.value)
        elif nodeName_ == 'lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lambda'):
              self.add_lambda(obj_.value)
            elif hasattr(self, 'set_lambda'):
              self.set_lambda(obj_.value)
        elif nodeName_ == 'mu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mu'):
              self.add_mu(obj_.value)
            elif hasattr(self, 'set_mu'):
              self.set_mu(obj_.value)
        elif nodeName_ == 'nu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nu'):
              self.add_nu(obj_.value)
            elif hasattr(self, 'set_nu'):
              self.set_nu(obj_.value)
        elif nodeName_ == 'xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xi'):
              self.add_xi(obj_.value)
            elif hasattr(self, 'set_xi'):
              self.set_xi(obj_.value)
        elif nodeName_ == 'pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_pi'):
              self.add_pi(obj_.value)
            elif hasattr(self, 'set_pi'):
              self.set_pi(obj_.value)
        elif nodeName_ == 'rho':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rho', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rho'):
              self.add_rho(obj_.value)
            elif hasattr(self, 'set_rho'):
              self.set_rho(obj_.value)
        elif nodeName_ == 'sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigma'):
              self.add_sigma(obj_.value)
            elif hasattr(self, 'set_sigma'):
              self.set_sigma(obj_.value)
        elif nodeName_ == 'tau':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tau', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tau'):
              self.add_tau(obj_.value)
            elif hasattr(self, 'set_tau'):
              self.set_tau(obj_.value)
        elif nodeName_ == 'upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_upsilon'):
              self.add_upsilon(obj_.value)
            elif hasattr(self, 'set_upsilon'):
              self.set_upsilon(obj_.value)
        elif nodeName_ == 'phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_phi'):
              self.add_phi(obj_.value)
            elif hasattr(self, 'set_phi'):
              self.set_phi(obj_.value)
        elif nodeName_ == 'chi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'chi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_chi'):
              self.add_chi(obj_.value)
            elif hasattr(self, 'set_chi'):
              self.set_chi(obj_.value)
        elif nodeName_ == 'psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_psi'):
              self.add_psi(obj_.value)
            elif hasattr(self, 'set_psi'):
              self.set_psi(obj_.value)
        elif nodeName_ == 'omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_omega'):
              self.add_omega(obj_.value)
            elif hasattr(self, 'set_omega'):
              self.set_omega(obj_.value)
        elif nodeName_ == 'sigmaf':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigmaf', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigmaf'):
              self.add_sigmaf(obj_.value)
            elif hasattr(self, 'set_sigmaf'):
              self.set_sigmaf(obj_.value)
        elif nodeName_ == 'sect':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect'):
              self.add_sect(obj_.value)
            elif hasattr(self, 'set_sect'):
              self.set_sect(obj_.value)
        elif nodeName_ == 'deg':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'deg', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_deg'):
              self.add_deg(obj_.value)
            elif hasattr(self, 'set_deg'):
              self.set_deg(obj_.value)
        elif nodeName_ == 'prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prime'):
              self.add_prime(obj_.value)
            elif hasattr(self, 'set_prime'):
              self.set_prime(obj_.value)
        elif nodeName_ == 'Prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Prime'):
              self.add_Prime(obj_.value)
            elif hasattr(self, 'set_Prime'):
              self.set_Prime(obj_.value)
        elif nodeName_ == 'infin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'infin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_infin'):
              self.add_infin(obj_.value)
            elif hasattr(self, 'set_infin'):
              self.set_infin(obj_.value)
        elif nodeName_ == 'empty':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'empty', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_empty'):
              self.add_empty(obj_.value)
            elif hasattr(self, 'set_empty'):
              self.set_empty(obj_.value)
        elif nodeName_ == 'plusmn':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'plusmn', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_plusmn'):
              self.add_plusmn(obj_.value)
            elif hasattr(self, 'set_plusmn'):
              self.set_plusmn(obj_.value)
        elif nodeName_ == 'times':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'times', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_times'):
              self.add_times(obj_.value)
            elif hasattr(self, 'set_times'):
              self.set_times(obj_.value)
        elif nodeName_ == 'minus':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'minus', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_minus'):
              self.add_minus(obj_.value)
            elif hasattr(self, 'set_minus'):
              self.set_minus(obj_.value)
        elif nodeName_ == 'sdot':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sdot', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sdot'):
              self.add_sdot(obj_.value)
            elif hasattr(self, 'set_sdot'):
              self.set_sdot(obj_.value)
        elif nodeName_ == 'part':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'part', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_part'):
              self.add_part(obj_.value)
            elif hasattr(self, 'set_part'):
              self.set_part(obj_.value)
        elif nodeName_ == 'nabla':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nabla', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nabla'):
              self.add_nabla(obj_.value)
            elif hasattr(self, 'set_nabla'):
              self.set_nabla(obj_.value)
        elif nodeName_ == 'radic':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radic', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_radic'):
              self.add_radic(obj_.value)
            elif hasattr(self, 'set_radic'):
              self.set_radic(obj_.value)
        elif nodeName_ == 'perp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'perp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_perp'):
              self.add_perp(obj_.value)
            elif hasattr(self, 'set_perp'):
              self.set_perp(obj_.value)
        elif nodeName_ == 'sum':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sum', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sum'):
              self.add_sum(obj_.value)
            elif hasattr(self, 'set_sum'):
              self.set_sum(obj_.value)
        elif nodeName_ == 'int':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'int', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_int'):
              self.add_int(obj_.value)
            elif hasattr(self, 'set_int'):
              self.set_int(obj_.value)
        elif nodeName_ == 'prod':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prod'):
              self.add_prod(obj_.value)
            elif hasattr(self, 'set_prod'):
              self.set_prod(obj_.value)
        elif nodeName_ == 'sim':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sim', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sim'):
              self.add_sim(obj_.value)
            elif hasattr(self, 'set_sim'):
              self.set_sim(obj_.value)
        elif nodeName_ == 'asymp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'asymp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_asymp'):
              self.add_asymp(obj_.value)
            elif hasattr(self, 'set_asymp'):
              self.set_asymp(obj_.value)
        elif nodeName_ == 'ne':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ne', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ne'):
              self.add_ne(obj_.value)
            elif hasattr(self, 'set_ne'):
              self.set_ne(obj_.value)
        elif nodeName_ == 'equiv':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'equiv', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_equiv'):
              self.add_equiv(obj_.value)
            elif hasattr(self, 'set_equiv'):
              self.set_equiv(obj_.value)
        elif nodeName_ == 'prop':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prop', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prop'):
              self.add_prop(obj_.value)
            elif hasattr(self, 'set_prop'):
              self.set_prop(obj_.value)
        elif nodeName_ == 'le':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'le', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_le'):
              self.add_le(obj_.value)
            elif hasattr(self, 'set_le'):
              self.set_le(obj_.value)
        elif nodeName_ == 'ge':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ge', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ge'):
              self.add_ge(obj_.value)
            elif hasattr(self, 'set_ge'):
              self.set_ge(obj_.value)
        elif nodeName_ == 'larr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'larr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_larr'):
              self.add_larr(obj_.value)
            elif hasattr(self, 'set_larr'):
              self.set_larr(obj_.value)
        elif nodeName_ == 'rarr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rarr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rarr'):
              self.add_rarr(obj_.value)
            elif hasattr(self, 'set_rarr'):
              self.set_rarr(obj_.value)
        elif nodeName_ == 'isin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'isin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_isin'):
              self.add_isin(obj_.value)
            elif hasattr(self, 'set_isin'):
              self.set_isin(obj_.value)
        elif nodeName_ == 'notin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'notin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_notin'):
              self.add_notin(obj_.value)
            elif hasattr(self, 'set_notin'):
              self.set_notin(obj_.value)
        elif nodeName_ == 'lceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lceil'):
              self.add_lceil(obj_.value)
            elif hasattr(self, 'set_lceil'):
              self.set_lceil(obj_.value)
        elif nodeName_ == 'rceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rceil'):
              self.add_rceil(obj_.value)
            elif hasattr(self, 'set_rceil'):
              self.set_rceil(obj_.value)
        elif nodeName_ == 'lfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lfloor'):
              self.add_lfloor(obj_.value)
            elif hasattr(self, 'set_lfloor'):
              self.set_lfloor(obj_.value)
        elif nodeName_ == 'rfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rfloor'):
              self.add_rfloor(obj_.value)
            elif hasattr(self, 'set_rfloor'):
              self.set_rfloor(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docHeadingType


class docImageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, width=None, type_=None, name=None, height=None, ulink=None, bold=None, emphasis=None, computeroutput=None, subscript=None, superscript=None, center=None, small=None, htmlonly=None, manonly=None, xmlonly=None, rtfonly=None, latexonly=None, dot=None, anchor=None, formula=None, ref=None, copy=None, trademark=None, registered=None, lsquo=None, rsquo=None, ldquo=None, rdquo=None, ndash=None, mdash=None, umlaut=None, acute=None, grave=None, circ=None, slash=None, tilde=None, cedil=None, ring=None, szlig=None, nonbreakablespace=None, aelig=None, AElig=None, Gamma=None, Delta=None, Theta=None, Lambda=None, Xi=None, Pi=None, Sigma=None, Upsilon=None, Phi=None, Psi=None, Omega=None, alpha=None, beta=None, gamma=None, delta=None, epsilon=None, zeta=None, eta=None, theta=None, iota=None, kappa=None, lambda_=None, mu=None, nu=None, xi=None, pi=None, rho=None, sigma=None, tau=None, upsilon=None, phi=None, chi=None, psi=None, omega=None, sigmaf=None, sect=None, deg=None, prime=None, Prime=None, infin=None, empty=None, plusmn=None, times=None, minus=None, sdot=None, part=None, nabla=None, radic=None, perp=None, sum=None, int=None, prod=None, sim=None, asymp=None, ne=None, equiv=None, prop=None, le=None, ge=None, larr=None, rarr=None, isin=None, notin=None, lceil=None, rceil=None, lfloor=None, rfloor=None, valueOf_=None, mixedclass_=None, content_=None):
        self.width = _cast(None, width)
        self.type_ = _cast(None, type_)
        self.name = _cast(None, name)
        self.height = _cast(None, height)
        if ulink is None:
            self.ulink = []
        else:
            self.ulink = ulink
        if bold is None:
            self.bold = []
        else:
            self.bold = bold
        if emphasis is None:
            self.emphasis = []
        else:
            self.emphasis = emphasis
        if computeroutput is None:
            self.computeroutput = []
        else:
            self.computeroutput = computeroutput
        if subscript is None:
            self.subscript = []
        else:
            self.subscript = subscript
        if superscript is None:
            self.superscript = []
        else:
            self.superscript = superscript
        if center is None:
            self.center = []
        else:
            self.center = center
        if small is None:
            self.small = []
        else:
            self.small = small
        if htmlonly is None:
            self.htmlonly = []
        else:
            self.htmlonly = htmlonly
        if manonly is None:
            self.manonly = []
        else:
            self.manonly = manonly
        if xmlonly is None:
            self.xmlonly = []
        else:
            self.xmlonly = xmlonly
        if rtfonly is None:
            self.rtfonly = []
        else:
            self.rtfonly = rtfonly
        if latexonly is None:
            self.latexonly = []
        else:
            self.latexonly = latexonly
        if dot is None:
            self.dot = []
        else:
            self.dot = dot
        if anchor is None:
            self.anchor = []
        else:
            self.anchor = anchor
        if formula is None:
            self.formula = []
        else:
            self.formula = formula
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        if copy is None:
            self.copy = []
        else:
            self.copy = copy
        if trademark is None:
            self.trademark = []
        else:
            self.trademark = trademark
        if registered is None:
            self.registered = []
        else:
            self.registered = registered
        if lsquo is None:
            self.lsquo = []
        else:
            self.lsquo = lsquo
        if rsquo is None:
            self.rsquo = []
        else:
            self.rsquo = rsquo
        if ldquo is None:
            self.ldquo = []
        else:
            self.ldquo = ldquo
        if rdquo is None:
            self.rdquo = []
        else:
            self.rdquo = rdquo
        if ndash is None:
            self.ndash = []
        else:
            self.ndash = ndash
        if mdash is None:
            self.mdash = []
        else:
            self.mdash = mdash
        if umlaut is None:
            self.umlaut = []
        else:
            self.umlaut = umlaut
        if acute is None:
            self.acute = []
        else:
            self.acute = acute
        if grave is None:
            self.grave = []
        else:
            self.grave = grave
        if circ is None:
            self.circ = []
        else:
            self.circ = circ
        if slash is None:
            self.slash = []
        else:
            self.slash = slash
        if tilde is None:
            self.tilde = []
        else:
            self.tilde = tilde
        if cedil is None:
            self.cedil = []
        else:
            self.cedil = cedil
        if ring is None:
            self.ring = []
        else:
            self.ring = ring
        if szlig is None:
            self.szlig = []
        else:
            self.szlig = szlig
        if nonbreakablespace is None:
            self.nonbreakablespace = []
        else:
            self.nonbreakablespace = nonbreakablespace
        if aelig is None:
            self.aelig = []
        else:
            self.aelig = aelig
        if AElig is None:
            self.AElig = []
        else:
            self.AElig = AElig
        if Gamma is None:
            self.Gamma = []
        else:
            self.Gamma = Gamma
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Theta is None:
            self.Theta = []
        else:
            self.Theta = Theta
        if Lambda is None:
            self.Lambda = []
        else:
            self.Lambda = Lambda
        if Xi is None:
            self.Xi = []
        else:
            self.Xi = Xi
        if Pi is None:
            self.Pi = []
        else:
            self.Pi = Pi
        if Sigma is None:
            self.Sigma = []
        else:
            self.Sigma = Sigma
        if Upsilon is None:
            self.Upsilon = []
        else:
            self.Upsilon = Upsilon
        if Phi is None:
            self.Phi = []
        else:
            self.Phi = Phi
        if Psi is None:
            self.Psi = []
        else:
            self.Psi = Psi
        if Omega is None:
            self.Omega = []
        else:
            self.Omega = Omega
        if alpha is None:
            self.alpha = []
        else:
            self.alpha = alpha
        if beta is None:
            self.beta = []
        else:
            self.beta = beta
        if gamma is None:
            self.gamma = []
        else:
            self.gamma = gamma
        if delta is None:
            self.delta = []
        else:
            self.delta = delta
        if epsilon is None:
            self.epsilon = []
        else:
            self.epsilon = epsilon
        if zeta is None:
            self.zeta = []
        else:
            self.zeta = zeta
        if eta is None:
            self.eta = []
        else:
            self.eta = eta
        if theta is None:
            self.theta = []
        else:
            self.theta = theta
        if iota is None:
            self.iota = []
        else:
            self.iota = iota
        if kappa is None:
            self.kappa = []
        else:
            self.kappa = kappa
        if lambda_ is None:
            self.lambda_ = []
        else:
            self.lambda_ = lambda_
        if mu is None:
            self.mu = []
        else:
            self.mu = mu
        if nu is None:
            self.nu = []
        else:
            self.nu = nu
        if xi is None:
            self.xi = []
        else:
            self.xi = xi
        if pi is None:
            self.pi = []
        else:
            self.pi = pi
        if rho is None:
            self.rho = []
        else:
            self.rho = rho
        if sigma is None:
            self.sigma = []
        else:
            self.sigma = sigma
        if tau is None:
            self.tau = []
        else:
            self.tau = tau
        if upsilon is None:
            self.upsilon = []
        else:
            self.upsilon = upsilon
        if phi is None:
            self.phi = []
        else:
            self.phi = phi
        if chi is None:
            self.chi = []
        else:
            self.chi = chi
        if psi is None:
            self.psi = []
        else:
            self.psi = psi
        if omega is None:
            self.omega = []
        else:
            self.omega = omega
        if sigmaf is None:
            self.sigmaf = []
        else:
            self.sigmaf = sigmaf
        if sect is None:
            self.sect = []
        else:
            self.sect = sect
        if deg is None:
            self.deg = []
        else:
            self.deg = deg
        if prime is None:
            self.prime = []
        else:
            self.prime = prime
        if Prime is None:
            self.Prime = []
        else:
            self.Prime = Prime
        if infin is None:
            self.infin = []
        else:
            self.infin = infin
        if empty is None:
            self.empty = []
        else:
            self.empty = empty
        if plusmn is None:
            self.plusmn = []
        else:
            self.plusmn = plusmn
        if times is None:
            self.times = []
        else:
            self.times = times
        if minus is None:
            self.minus = []
        else:
            self.minus = minus
        if sdot is None:
            self.sdot = []
        else:
            self.sdot = sdot
        if part is None:
            self.part = []
        else:
            self.part = part
        if nabla is None:
            self.nabla = []
        else:
            self.nabla = nabla
        if radic is None:
            self.radic = []
        else:
            self.radic = radic
        if perp is None:
            self.perp = []
        else:
            self.perp = perp
        if sum is None:
            self.sum = []
        else:
            self.sum = sum
        if int is None:
            self.int = []
        else:
            self.int = int
        if prod is None:
            self.prod = []
        else:
            self.prod = prod
        if sim is None:
            self.sim = []
        else:
            self.sim = sim
        if asymp is None:
            self.asymp = []
        else:
            self.asymp = asymp
        if ne is None:
            self.ne = []
        else:
            self.ne = ne
        if equiv is None:
            self.equiv = []
        else:
            self.equiv = equiv
        if prop is None:
            self.prop = []
        else:
            self.prop = prop
        if le is None:
            self.le = []
        else:
            self.le = le
        if ge is None:
            self.ge = []
        else:
            self.ge = ge
        if larr is None:
            self.larr = []
        else:
            self.larr = larr
        if rarr is None:
            self.rarr = []
        else:
            self.rarr = rarr
        if isin is None:
            self.isin = []
        else:
            self.isin = isin
        if notin is None:
            self.notin = []
        else:
            self.notin = notin
        if lceil is None:
            self.lceil = []
        else:
            self.lceil = lceil
        if rceil is None:
            self.rceil = []
        else:
            self.rceil = rceil
        if lfloor is None:
            self.lfloor = []
        else:
            self.lfloor = lfloor
        if rfloor is None:
            self.rfloor = []
        else:
            self.rfloor = rfloor
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docImageType.subclass:
            return docImageType.subclass(*args_, **kwargs_)
        else:
            return docImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ulink(self): return self.ulink
    def set_ulink(self, ulink): self.ulink = ulink
    def add_ulink(self, value): self.ulink.append(value)
    def insert_ulink(self, index, value): self.ulink[index] = value
    def get_bold(self): return self.bold
    def set_bold(self, bold): self.bold = bold
    def add_bold(self, value): self.bold.append(value)
    def insert_bold(self, index, value): self.bold[index] = value
    def get_emphasis(self): return self.emphasis
    def set_emphasis(self, emphasis): self.emphasis = emphasis
    def add_emphasis(self, value): self.emphasis.append(value)
    def insert_emphasis(self, index, value): self.emphasis[index] = value
    def get_computeroutput(self): return self.computeroutput
    def set_computeroutput(self, computeroutput): self.computeroutput = computeroutput
    def add_computeroutput(self, value): self.computeroutput.append(value)
    def insert_computeroutput(self, index, value): self.computeroutput[index] = value
    def get_subscript(self): return self.subscript
    def set_subscript(self, subscript): self.subscript = subscript
    def add_subscript(self, value): self.subscript.append(value)
    def insert_subscript(self, index, value): self.subscript[index] = value
    def get_superscript(self): return self.superscript
    def set_superscript(self, superscript): self.superscript = superscript
    def add_superscript(self, value): self.superscript.append(value)
    def insert_superscript(self, index, value): self.superscript[index] = value
    def get_center(self): return self.center
    def set_center(self, center): self.center = center
    def add_center(self, value): self.center.append(value)
    def insert_center(self, index, value): self.center[index] = value
    def get_small(self): return self.small
    def set_small(self, small): self.small = small
    def add_small(self, value): self.small.append(value)
    def insert_small(self, index, value): self.small[index] = value
    def get_htmlonly(self): return self.htmlonly
    def set_htmlonly(self, htmlonly): self.htmlonly = htmlonly
    def add_htmlonly(self, value): self.htmlonly.append(value)
    def insert_htmlonly(self, index, value): self.htmlonly[index] = value
    def get_manonly(self): return self.manonly
    def set_manonly(self, manonly): self.manonly = manonly
    def add_manonly(self, value): self.manonly.append(value)
    def insert_manonly(self, index, value): self.manonly[index] = value
    def get_xmlonly(self): return self.xmlonly
    def set_xmlonly(self, xmlonly): self.xmlonly = xmlonly
    def add_xmlonly(self, value): self.xmlonly.append(value)
    def insert_xmlonly(self, index, value): self.xmlonly[index] = value
    def get_rtfonly(self): return self.rtfonly
    def set_rtfonly(self, rtfonly): self.rtfonly = rtfonly
    def add_rtfonly(self, value): self.rtfonly.append(value)
    def insert_rtfonly(self, index, value): self.rtfonly[index] = value
    def get_latexonly(self): return self.latexonly
    def set_latexonly(self, latexonly): self.latexonly = latexonly
    def add_latexonly(self, value): self.latexonly.append(value)
    def insert_latexonly(self, index, value): self.latexonly[index] = value
    def get_dot(self): return self.dot
    def set_dot(self, dot): self.dot = dot
    def add_dot(self, value): self.dot.append(value)
    def insert_dot(self, index, value): self.dot[index] = value
    def get_anchor(self): return self.anchor
    def set_anchor(self, anchor): self.anchor = anchor
    def add_anchor(self, value): self.anchor.append(value)
    def insert_anchor(self, index, value): self.anchor[index] = value
    def get_formula(self): return self.formula
    def set_formula(self, formula): self.formula = formula
    def add_formula(self, value): self.formula.append(value)
    def insert_formula(self, index, value): self.formula[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_copy(self): return self.copy
    def set_copy(self, copy): self.copy = copy
    def add_copy(self, value): self.copy.append(value)
    def insert_copy(self, index, value): self.copy[index] = value
    def get_trademark(self): return self.trademark
    def set_trademark(self, trademark): self.trademark = trademark
    def add_trademark(self, value): self.trademark.append(value)
    def insert_trademark(self, index, value): self.trademark[index] = value
    def get_registered(self): return self.registered
    def set_registered(self, registered): self.registered = registered
    def add_registered(self, value): self.registered.append(value)
    def insert_registered(self, index, value): self.registered[index] = value
    def get_lsquo(self): return self.lsquo
    def set_lsquo(self, lsquo): self.lsquo = lsquo
    def add_lsquo(self, value): self.lsquo.append(value)
    def insert_lsquo(self, index, value): self.lsquo[index] = value
    def get_rsquo(self): return self.rsquo
    def set_rsquo(self, rsquo): self.rsquo = rsquo
    def add_rsquo(self, value): self.rsquo.append(value)
    def insert_rsquo(self, index, value): self.rsquo[index] = value
    def get_ldquo(self): return self.ldquo
    def set_ldquo(self, ldquo): self.ldquo = ldquo
    def add_ldquo(self, value): self.ldquo.append(value)
    def insert_ldquo(self, index, value): self.ldquo[index] = value
    def get_rdquo(self): return self.rdquo
    def set_rdquo(self, rdquo): self.rdquo = rdquo
    def add_rdquo(self, value): self.rdquo.append(value)
    def insert_rdquo(self, index, value): self.rdquo[index] = value
    def get_ndash(self): return self.ndash
    def set_ndash(self, ndash): self.ndash = ndash
    def add_ndash(self, value): self.ndash.append(value)
    def insert_ndash(self, index, value): self.ndash[index] = value
    def get_mdash(self): return self.mdash
    def set_mdash(self, mdash): self.mdash = mdash
    def add_mdash(self, value): self.mdash.append(value)
    def insert_mdash(self, index, value): self.mdash[index] = value
    def get_umlaut(self): return self.umlaut
    def set_umlaut(self, umlaut): self.umlaut = umlaut
    def add_umlaut(self, value): self.umlaut.append(value)
    def insert_umlaut(self, index, value): self.umlaut[index] = value
    def get_acute(self): return self.acute
    def set_acute(self, acute): self.acute = acute
    def add_acute(self, value): self.acute.append(value)
    def insert_acute(self, index, value): self.acute[index] = value
    def get_grave(self): return self.grave
    def set_grave(self, grave): self.grave = grave
    def add_grave(self, value): self.grave.append(value)
    def insert_grave(self, index, value): self.grave[index] = value
    def get_circ(self): return self.circ
    def set_circ(self, circ): self.circ = circ
    def add_circ(self, value): self.circ.append(value)
    def insert_circ(self, index, value): self.circ[index] = value
    def get_slash(self): return self.slash
    def set_slash(self, slash): self.slash = slash
    def add_slash(self, value): self.slash.append(value)
    def insert_slash(self, index, value): self.slash[index] = value
    def get_tilde(self): return self.tilde
    def set_tilde(self, tilde): self.tilde = tilde
    def add_tilde(self, value): self.tilde.append(value)
    def insert_tilde(self, index, value): self.tilde[index] = value
    def get_cedil(self): return self.cedil
    def set_cedil(self, cedil): self.cedil = cedil
    def add_cedil(self, value): self.cedil.append(value)
    def insert_cedil(self, index, value): self.cedil[index] = value
    def get_ring(self): return self.ring
    def set_ring(self, ring): self.ring = ring
    def add_ring(self, value): self.ring.append(value)
    def insert_ring(self, index, value): self.ring[index] = value
    def get_szlig(self): return self.szlig
    def set_szlig(self, szlig): self.szlig = szlig
    def add_szlig(self, value): self.szlig.append(value)
    def insert_szlig(self, index, value): self.szlig[index] = value
    def get_nonbreakablespace(self): return self.nonbreakablespace
    def set_nonbreakablespace(self, nonbreakablespace): self.nonbreakablespace = nonbreakablespace
    def add_nonbreakablespace(self, value): self.nonbreakablespace.append(value)
    def insert_nonbreakablespace(self, index, value): self.nonbreakablespace[index] = value
    def get_aelig(self): return self.aelig
    def set_aelig(self, aelig): self.aelig = aelig
    def add_aelig(self, value): self.aelig.append(value)
    def insert_aelig(self, index, value): self.aelig[index] = value
    def get_AElig(self): return self.AElig
    def set_AElig(self, AElig): self.AElig = AElig
    def add_AElig(self, value): self.AElig.append(value)
    def insert_AElig(self, index, value): self.AElig[index] = value
    def get_Gamma(self): return self.Gamma
    def set_Gamma(self, Gamma): self.Gamma = Gamma
    def add_Gamma(self, value): self.Gamma.append(value)
    def insert_Gamma(self, index, value): self.Gamma[index] = value
    def get_Delta(self): return self.Delta
    def set_Delta(self, Delta): self.Delta = Delta
    def add_Delta(self, value): self.Delta.append(value)
    def insert_Delta(self, index, value): self.Delta[index] = value
    def get_Theta(self): return self.Theta
    def set_Theta(self, Theta): self.Theta = Theta
    def add_Theta(self, value): self.Theta.append(value)
    def insert_Theta(self, index, value): self.Theta[index] = value
    def get_Lambda(self): return self.Lambda
    def set_Lambda(self, Lambda): self.Lambda = Lambda
    def add_Lambda(self, value): self.Lambda.append(value)
    def insert_Lambda(self, index, value): self.Lambda[index] = value
    def get_Xi(self): return self.Xi
    def set_Xi(self, Xi): self.Xi = Xi
    def add_Xi(self, value): self.Xi.append(value)
    def insert_Xi(self, index, value): self.Xi[index] = value
    def get_Pi(self): return self.Pi
    def set_Pi(self, Pi): self.Pi = Pi
    def add_Pi(self, value): self.Pi.append(value)
    def insert_Pi(self, index, value): self.Pi[index] = value
    def get_Sigma(self): return self.Sigma
    def set_Sigma(self, Sigma): self.Sigma = Sigma
    def add_Sigma(self, value): self.Sigma.append(value)
    def insert_Sigma(self, index, value): self.Sigma[index] = value
    def get_Upsilon(self): return self.Upsilon
    def set_Upsilon(self, Upsilon): self.Upsilon = Upsilon
    def add_Upsilon(self, value): self.Upsilon.append(value)
    def insert_Upsilon(self, index, value): self.Upsilon[index] = value
    def get_Phi(self): return self.Phi
    def set_Phi(self, Phi): self.Phi = Phi
    def add_Phi(self, value): self.Phi.append(value)
    def insert_Phi(self, index, value): self.Phi[index] = value
    def get_Psi(self): return self.Psi
    def set_Psi(self, Psi): self.Psi = Psi
    def add_Psi(self, value): self.Psi.append(value)
    def insert_Psi(self, index, value): self.Psi[index] = value
    def get_Omega(self): return self.Omega
    def set_Omega(self, Omega): self.Omega = Omega
    def add_Omega(self, value): self.Omega.append(value)
    def insert_Omega(self, index, value): self.Omega[index] = value
    def get_alpha(self): return self.alpha
    def set_alpha(self, alpha): self.alpha = alpha
    def add_alpha(self, value): self.alpha.append(value)
    def insert_alpha(self, index, value): self.alpha[index] = value
    def get_beta(self): return self.beta
    def set_beta(self, beta): self.beta = beta
    def add_beta(self, value): self.beta.append(value)
    def insert_beta(self, index, value): self.beta[index] = value
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def add_gamma(self, value): self.gamma.append(value)
    def insert_gamma(self, index, value): self.gamma[index] = value
    def get_delta(self): return self.delta
    def set_delta(self, delta): self.delta = delta
    def add_delta(self, value): self.delta.append(value)
    def insert_delta(self, index, value): self.delta[index] = value
    def get_epsilon(self): return self.epsilon
    def set_epsilon(self, epsilon): self.epsilon = epsilon
    def add_epsilon(self, value): self.epsilon.append(value)
    def insert_epsilon(self, index, value): self.epsilon[index] = value
    def get_zeta(self): return self.zeta
    def set_zeta(self, zeta): self.zeta = zeta
    def add_zeta(self, value): self.zeta.append(value)
    def insert_zeta(self, index, value): self.zeta[index] = value
    def get_eta(self): return self.eta
    def set_eta(self, eta): self.eta = eta
    def add_eta(self, value): self.eta.append(value)
    def insert_eta(self, index, value): self.eta[index] = value
    def get_theta(self): return self.theta
    def set_theta(self, theta): self.theta = theta
    def add_theta(self, value): self.theta.append(value)
    def insert_theta(self, index, value): self.theta[index] = value
    def get_iota(self): return self.iota
    def set_iota(self, iota): self.iota = iota
    def add_iota(self, value): self.iota.append(value)
    def insert_iota(self, index, value): self.iota[index] = value
    def get_kappa(self): return self.kappa
    def set_kappa(self, kappa): self.kappa = kappa
    def add_kappa(self, value): self.kappa.append(value)
    def insert_kappa(self, index, value): self.kappa[index] = value
    def get_lambda(self): return self.lambda_
    def set_lambda(self, lambda_): self.lambda_ = lambda_
    def add_lambda(self, value): self.lambda_.append(value)
    def insert_lambda(self, index, value): self.lambda_[index] = value
    def get_mu(self): return self.mu
    def set_mu(self, mu): self.mu = mu
    def add_mu(self, value): self.mu.append(value)
    def insert_mu(self, index, value): self.mu[index] = value
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def add_nu(self, value): self.nu.append(value)
    def insert_nu(self, index, value): self.nu[index] = value
    def get_xi(self): return self.xi
    def set_xi(self, xi): self.xi = xi
    def add_xi(self, value): self.xi.append(value)
    def insert_xi(self, index, value): self.xi[index] = value
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def add_pi(self, value): self.pi.append(value)
    def insert_pi(self, index, value): self.pi[index] = value
    def get_rho(self): return self.rho
    def set_rho(self, rho): self.rho = rho
    def add_rho(self, value): self.rho.append(value)
    def insert_rho(self, index, value): self.rho[index] = value
    def get_sigma(self): return self.sigma
    def set_sigma(self, sigma): self.sigma = sigma
    def add_sigma(self, value): self.sigma.append(value)
    def insert_sigma(self, index, value): self.sigma[index] = value
    def get_tau(self): return self.tau
    def set_tau(self, tau): self.tau = tau
    def add_tau(self, value): self.tau.append(value)
    def insert_tau(self, index, value): self.tau[index] = value
    def get_upsilon(self): return self.upsilon
    def set_upsilon(self, upsilon): self.upsilon = upsilon
    def add_upsilon(self, value): self.upsilon.append(value)
    def insert_upsilon(self, index, value): self.upsilon[index] = value
    def get_phi(self): return self.phi
    def set_phi(self, phi): self.phi = phi
    def add_phi(self, value): self.phi.append(value)
    def insert_phi(self, index, value): self.phi[index] = value
    def get_chi(self): return self.chi
    def set_chi(self, chi): self.chi = chi
    def add_chi(self, value): self.chi.append(value)
    def insert_chi(self, index, value): self.chi[index] = value
    def get_psi(self): return self.psi
    def set_psi(self, psi): self.psi = psi
    def add_psi(self, value): self.psi.append(value)
    def insert_psi(self, index, value): self.psi[index] = value
    def get_omega(self): return self.omega
    def set_omega(self, omega): self.omega = omega
    def add_omega(self, value): self.omega.append(value)
    def insert_omega(self, index, value): self.omega[index] = value
    def get_sigmaf(self): return self.sigmaf
    def set_sigmaf(self, sigmaf): self.sigmaf = sigmaf
    def add_sigmaf(self, value): self.sigmaf.append(value)
    def insert_sigmaf(self, index, value): self.sigmaf[index] = value
    def get_sect(self): return self.sect
    def set_sect(self, sect): self.sect = sect
    def add_sect(self, value): self.sect.append(value)
    def insert_sect(self, index, value): self.sect[index] = value
    def get_deg(self): return self.deg
    def set_deg(self, deg): self.deg = deg
    def add_deg(self, value): self.deg.append(value)
    def insert_deg(self, index, value): self.deg[index] = value
    def get_prime(self): return self.prime
    def set_prime(self, prime): self.prime = prime
    def add_prime(self, value): self.prime.append(value)
    def insert_prime(self, index, value): self.prime[index] = value
    def get_Prime(self): return self.Prime
    def set_Prime(self, Prime): self.Prime = Prime
    def add_Prime(self, value): self.Prime.append(value)
    def insert_Prime(self, index, value): self.Prime[index] = value
    def get_infin(self): return self.infin
    def set_infin(self, infin): self.infin = infin
    def add_infin(self, value): self.infin.append(value)
    def insert_infin(self, index, value): self.infin[index] = value
    def get_empty(self): return self.empty
    def set_empty(self, empty): self.empty = empty
    def add_empty(self, value): self.empty.append(value)
    def insert_empty(self, index, value): self.empty[index] = value
    def get_plusmn(self): return self.plusmn
    def set_plusmn(self, plusmn): self.plusmn = plusmn
    def add_plusmn(self, value): self.plusmn.append(value)
    def insert_plusmn(self, index, value): self.plusmn[index] = value
    def get_times(self): return self.times
    def set_times(self, times): self.times = times
    def add_times(self, value): self.times.append(value)
    def insert_times(self, index, value): self.times[index] = value
    def get_minus(self): return self.minus
    def set_minus(self, minus): self.minus = minus
    def add_minus(self, value): self.minus.append(value)
    def insert_minus(self, index, value): self.minus[index] = value
    def get_sdot(self): return self.sdot
    def set_sdot(self, sdot): self.sdot = sdot
    def add_sdot(self, value): self.sdot.append(value)
    def insert_sdot(self, index, value): self.sdot[index] = value
    def get_part(self): return self.part
    def set_part(self, part): self.part = part
    def add_part(self, value): self.part.append(value)
    def insert_part(self, index, value): self.part[index] = value
    def get_nabla(self): return self.nabla
    def set_nabla(self, nabla): self.nabla = nabla
    def add_nabla(self, value): self.nabla.append(value)
    def insert_nabla(self, index, value): self.nabla[index] = value
    def get_radic(self): return self.radic
    def set_radic(self, radic): self.radic = radic
    def add_radic(self, value): self.radic.append(value)
    def insert_radic(self, index, value): self.radic[index] = value
    def get_perp(self): return self.perp
    def set_perp(self, perp): self.perp = perp
    def add_perp(self, value): self.perp.append(value)
    def insert_perp(self, index, value): self.perp[index] = value
    def get_sum(self): return self.sum
    def set_sum(self, sum): self.sum = sum
    def add_sum(self, value): self.sum.append(value)
    def insert_sum(self, index, value): self.sum[index] = value
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def add_int(self, value): self.int.append(value)
    def insert_int(self, index, value): self.int[index] = value
    def get_prod(self): return self.prod
    def set_prod(self, prod): self.prod = prod
    def add_prod(self, value): self.prod.append(value)
    def insert_prod(self, index, value): self.prod[index] = value
    def get_sim(self): return self.sim
    def set_sim(self, sim): self.sim = sim
    def add_sim(self, value): self.sim.append(value)
    def insert_sim(self, index, value): self.sim[index] = value
    def get_asymp(self): return self.asymp
    def set_asymp(self, asymp): self.asymp = asymp
    def add_asymp(self, value): self.asymp.append(value)
    def insert_asymp(self, index, value): self.asymp[index] = value
    def get_ne(self): return self.ne
    def set_ne(self, ne): self.ne = ne
    def add_ne(self, value): self.ne.append(value)
    def insert_ne(self, index, value): self.ne[index] = value
    def get_equiv(self): return self.equiv
    def set_equiv(self, equiv): self.equiv = equiv
    def add_equiv(self, value): self.equiv.append(value)
    def insert_equiv(self, index, value): self.equiv[index] = value
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def add_prop(self, value): self.prop.append(value)
    def insert_prop(self, index, value): self.prop[index] = value
    def get_le(self): return self.le
    def set_le(self, le): self.le = le
    def add_le(self, value): self.le.append(value)
    def insert_le(self, index, value): self.le[index] = value
    def get_ge(self): return self.ge
    def set_ge(self, ge): self.ge = ge
    def add_ge(self, value): self.ge.append(value)
    def insert_ge(self, index, value): self.ge[index] = value
    def get_larr(self): return self.larr
    def set_larr(self, larr): self.larr = larr
    def add_larr(self, value): self.larr.append(value)
    def insert_larr(self, index, value): self.larr[index] = value
    def get_rarr(self): return self.rarr
    def set_rarr(self, rarr): self.rarr = rarr
    def add_rarr(self, value): self.rarr.append(value)
    def insert_rarr(self, index, value): self.rarr[index] = value
    def get_isin(self): return self.isin
    def set_isin(self, isin): self.isin = isin
    def add_isin(self, value): self.isin.append(value)
    def insert_isin(self, index, value): self.isin[index] = value
    def get_notin(self): return self.notin
    def set_notin(self, notin): self.notin = notin
    def add_notin(self, value): self.notin.append(value)
    def insert_notin(self, index, value): self.notin[index] = value
    def get_lceil(self): return self.lceil
    def set_lceil(self, lceil): self.lceil = lceil
    def add_lceil(self, value): self.lceil.append(value)
    def insert_lceil(self, index, value): self.lceil[index] = value
    def get_rceil(self): return self.rceil
    def set_rceil(self, rceil): self.rceil = rceil
    def add_rceil(self, value): self.rceil.append(value)
    def insert_rceil(self, index, value): self.rceil[index] = value
    def get_lfloor(self): return self.lfloor
    def set_lfloor(self, lfloor): self.lfloor = lfloor
    def add_lfloor(self, value): self.lfloor.append(value)
    def insert_lfloor(self, index, value): self.lfloor[index] = value
    def get_rfloor(self): return self.rfloor
    def set_rfloor(self, rfloor): self.rfloor = rfloor
    def add_rfloor(self, value): self.rfloor.append(value)
    def insert_rfloor(self, index, value): self.rfloor[index] = value
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DoxImageKind(self, value):
        # Validate type DoxImageKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.ulink or
            self.bold or
            self.emphasis or
            self.computeroutput or
            self.subscript or
            self.superscript or
            self.center or
            self.small or
            self.htmlonly or
            self.manonly or
            self.xmlonly or
            self.rtfonly or
            self.latexonly or
            self.dot or
            self.anchor or
            self.formula or
            self.ref or
            self.copy or
            self.trademark or
            self.registered or
            self.lsquo or
            self.rsquo or
            self.ldquo or
            self.rdquo or
            self.ndash or
            self.mdash or
            self.umlaut or
            self.acute or
            self.grave or
            self.circ or
            self.slash or
            self.tilde or
            self.cedil or
            self.ring or
            self.szlig or
            self.nonbreakablespace or
            self.aelig or
            self.AElig or
            self.Gamma or
            self.Delta or
            self.Theta or
            self.Lambda or
            self.Xi or
            self.Pi or
            self.Sigma or
            self.Upsilon or
            self.Phi or
            self.Psi or
            self.Omega or
            self.alpha or
            self.beta or
            self.gamma or
            self.delta or
            self.epsilon or
            self.zeta or
            self.eta or
            self.theta or
            self.iota or
            self.kappa or
            self.lambda_ or
            self.mu or
            self.nu or
            self.xi or
            self.pi or
            self.rho or
            self.sigma or
            self.tau or
            self.upsilon or
            self.phi or
            self.chi or
            self.psi or
            self.omega or
            self.sigmaf or
            self.sect or
            self.deg or
            self.prime or
            self.Prime or
            self.infin or
            self.empty or
            self.plusmn or
            self.times or
            self.minus or
            self.sdot or
            self.part or
            self.nabla or
            self.radic or
            self.perp or
            self.sum or
            self.int or
            self.prod or
            self.sim or
            self.asymp or
            self.ne or
            self.equiv or
            self.prop or
            self.le or
            self.ge or
            self.larr or
            self.rarr or
            self.isin or
            self.notin or
            self.lceil or
            self.rceil or
            self.lfloor or
            self.rfloor or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docImageType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docImageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docImageType'):
        if self.width is not None and 'width' not in already_processed:
            already_processed.add('width')
            outfile.write(' width=%s' % (self.gds_format_string(quote_attrib(self.width).encode(ExternalEncoding), input_name='width'), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.height is not None and 'height' not in already_processed:
            already_processed.add('height')
            outfile.write(' height=%s' % (self.gds_format_string(quote_attrib(self.height).encode(ExternalEncoding), input_name='height'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docImageType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docImageType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.width is not None and 'width' not in already_processed:
            already_processed.add('width')
            showIndent(outfile, level)
            outfile.write('width="%s",\n' % (self.width,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_="%s",\n' % (self.type_,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
        if self.height is not None and 'height' not in already_processed:
            already_processed.add('height')
            showIndent(outfile, level)
            outfile.write('height="%s",\n' % (self.height,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('width', node)
        if value is not None and 'width' not in already_processed:
            already_processed.add('width')
            self.width = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
            self.validate_DoxImageKind(self.type_)    # validate type DoxImageKind
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('height', node)
        if value is not None and 'height' not in already_processed:
            already_processed.add('height')
            self.height = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ulink':
            obj_ = docURLLink.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ulink', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ulink'):
              self.add_ulink(obj_.value)
            elif hasattr(self, 'set_ulink'):
              self.set_ulink(obj_.value)
        elif nodeName_ == 'bold':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'bold', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_bold'):
              self.add_bold(obj_.value)
            elif hasattr(self, 'set_bold'):
              self.set_bold(obj_.value)
        elif nodeName_ == 'emphasis':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'emphasis', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_emphasis'):
              self.add_emphasis(obj_.value)
            elif hasattr(self, 'set_emphasis'):
              self.set_emphasis(obj_.value)
        elif nodeName_ == 'computeroutput':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'computeroutput', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_computeroutput'):
              self.add_computeroutput(obj_.value)
            elif hasattr(self, 'set_computeroutput'):
              self.set_computeroutput(obj_.value)
        elif nodeName_ == 'subscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'subscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_subscript'):
              self.add_subscript(obj_.value)
            elif hasattr(self, 'set_subscript'):
              self.set_subscript(obj_.value)
        elif nodeName_ == 'superscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'superscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_superscript'):
              self.add_superscript(obj_.value)
            elif hasattr(self, 'set_superscript'):
              self.set_superscript(obj_.value)
        elif nodeName_ == 'center':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'center', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_center'):
              self.add_center(obj_.value)
            elif hasattr(self, 'set_center'):
              self.set_center(obj_.value)
        elif nodeName_ == 'small':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'small', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_small'):
              self.add_small(obj_.value)
            elif hasattr(self, 'set_small'):
              self.set_small(obj_.value)
        elif nodeName_ == 'htmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'htmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'manonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'manonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'xmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'xmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'rtfonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'rtfonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'latexonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'latexonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'dot' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'dot', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'anchor':
            obj_ = docAnchorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'anchor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_anchor'):
              self.add_anchor(obj_.value)
            elif hasattr(self, 'set_anchor'):
              self.set_anchor(obj_.value)
        elif nodeName_ == 'formula':
            obj_ = docFormulaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'formula', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_formula'):
              self.add_formula(obj_.value)
            elif hasattr(self, 'set_formula'):
              self.set_formula(obj_.value)
        elif nodeName_ == 'ref':
            obj_ = docRefTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        elif nodeName_ == 'copy':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copy', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copy'):
              self.add_copy(obj_.value)
            elif hasattr(self, 'set_copy'):
              self.set_copy(obj_.value)
        elif nodeName_ == 'trademark':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'trademark', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_trademark'):
              self.add_trademark(obj_.value)
            elif hasattr(self, 'set_trademark'):
              self.set_trademark(obj_.value)
        elif nodeName_ == 'registered':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'registered', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_registered'):
              self.add_registered(obj_.value)
            elif hasattr(self, 'set_registered'):
              self.set_registered(obj_.value)
        elif nodeName_ == 'lsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lsquo'):
              self.add_lsquo(obj_.value)
            elif hasattr(self, 'set_lsquo'):
              self.set_lsquo(obj_.value)
        elif nodeName_ == 'rsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rsquo'):
              self.add_rsquo(obj_.value)
            elif hasattr(self, 'set_rsquo'):
              self.set_rsquo(obj_.value)
        elif nodeName_ == 'ldquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ldquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ldquo'):
              self.add_ldquo(obj_.value)
            elif hasattr(self, 'set_ldquo'):
              self.set_ldquo(obj_.value)
        elif nodeName_ == 'rdquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rdquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rdquo'):
              self.add_rdquo(obj_.value)
            elif hasattr(self, 'set_rdquo'):
              self.set_rdquo(obj_.value)
        elif nodeName_ == 'ndash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ndash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ndash'):
              self.add_ndash(obj_.value)
            elif hasattr(self, 'set_ndash'):
              self.set_ndash(obj_.value)
        elif nodeName_ == 'mdash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mdash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mdash'):
              self.add_mdash(obj_.value)
            elif hasattr(self, 'set_mdash'):
              self.set_mdash(obj_.value)
        elif nodeName_ == 'umlaut':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'umlaut', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_umlaut'):
              self.add_umlaut(obj_.value)
            elif hasattr(self, 'set_umlaut'):
              self.set_umlaut(obj_.value)
        elif nodeName_ == 'acute':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'acute', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_acute'):
              self.add_acute(obj_.value)
            elif hasattr(self, 'set_acute'):
              self.set_acute(obj_.value)
        elif nodeName_ == 'grave':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'grave', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_grave'):
              self.add_grave(obj_.value)
            elif hasattr(self, 'set_grave'):
              self.set_grave(obj_.value)
        elif nodeName_ == 'circ':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circ', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_circ'):
              self.add_circ(obj_.value)
            elif hasattr(self, 'set_circ'):
              self.set_circ(obj_.value)
        elif nodeName_ == 'slash':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'slash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_slash'):
              self.add_slash(obj_.value)
            elif hasattr(self, 'set_slash'):
              self.set_slash(obj_.value)
        elif nodeName_ == 'tilde':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tilde', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tilde'):
              self.add_tilde(obj_.value)
            elif hasattr(self, 'set_tilde'):
              self.set_tilde(obj_.value)
        elif nodeName_ == 'cedil':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cedil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_cedil'):
              self.add_cedil(obj_.value)
            elif hasattr(self, 'set_cedil'):
              self.set_cedil(obj_.value)
        elif nodeName_ == 'ring':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ring', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ring'):
              self.add_ring(obj_.value)
            elif hasattr(self, 'set_ring'):
              self.set_ring(obj_.value)
        elif nodeName_ == 'szlig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'szlig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_szlig'):
              self.add_szlig(obj_.value)
            elif hasattr(self, 'set_szlig'):
              self.set_szlig(obj_.value)
        elif nodeName_ == 'nonbreakablespace':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nonbreakablespace', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nonbreakablespace'):
              self.add_nonbreakablespace(obj_.value)
            elif hasattr(self, 'set_nonbreakablespace'):
              self.set_nonbreakablespace(obj_.value)
        elif nodeName_ == 'aelig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'aelig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_aelig'):
              self.add_aelig(obj_.value)
            elif hasattr(self, 'set_aelig'):
              self.set_aelig(obj_.value)
        elif nodeName_ == 'AElig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AElig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AElig'):
              self.add_AElig(obj_.value)
            elif hasattr(self, 'set_AElig'):
              self.set_AElig(obj_.value)
        elif nodeName_ == 'Gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Gamma'):
              self.add_Gamma(obj_.value)
            elif hasattr(self, 'set_Gamma'):
              self.set_Gamma(obj_.value)
        elif nodeName_ == 'Delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Delta'):
              self.add_Delta(obj_.value)
            elif hasattr(self, 'set_Delta'):
              self.set_Delta(obj_.value)
        elif nodeName_ == 'Theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Theta'):
              self.add_Theta(obj_.value)
            elif hasattr(self, 'set_Theta'):
              self.set_Theta(obj_.value)
        elif nodeName_ == 'Lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Lambda'):
              self.add_Lambda(obj_.value)
            elif hasattr(self, 'set_Lambda'):
              self.set_Lambda(obj_.value)
        elif nodeName_ == 'Xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Xi'):
              self.add_Xi(obj_.value)
            elif hasattr(self, 'set_Xi'):
              self.set_Xi(obj_.value)
        elif nodeName_ == 'Pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Pi'):
              self.add_Pi(obj_.value)
            elif hasattr(self, 'set_Pi'):
              self.set_Pi(obj_.value)
        elif nodeName_ == 'Sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Sigma'):
              self.add_Sigma(obj_.value)
            elif hasattr(self, 'set_Sigma'):
              self.set_Sigma(obj_.value)
        elif nodeName_ == 'Upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Upsilon'):
              self.add_Upsilon(obj_.value)
            elif hasattr(self, 'set_Upsilon'):
              self.set_Upsilon(obj_.value)
        elif nodeName_ == 'Phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Phi'):
              self.add_Phi(obj_.value)
            elif hasattr(self, 'set_Phi'):
              self.set_Phi(obj_.value)
        elif nodeName_ == 'Psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Psi'):
              self.add_Psi(obj_.value)
            elif hasattr(self, 'set_Psi'):
              self.set_Psi(obj_.value)
        elif nodeName_ == 'Omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Omega'):
              self.add_Omega(obj_.value)
            elif hasattr(self, 'set_Omega'):
              self.set_Omega(obj_.value)
        elif nodeName_ == 'alpha':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'alpha', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_alpha'):
              self.add_alpha(obj_.value)
            elif hasattr(self, 'set_alpha'):
              self.set_alpha(obj_.value)
        elif nodeName_ == 'beta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'beta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_beta'):
              self.add_beta(obj_.value)
            elif hasattr(self, 'set_beta'):
              self.set_beta(obj_.value)
        elif nodeName_ == 'gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_gamma'):
              self.add_gamma(obj_.value)
            elif hasattr(self, 'set_gamma'):
              self.set_gamma(obj_.value)
        elif nodeName_ == 'delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_delta'):
              self.add_delta(obj_.value)
            elif hasattr(self, 'set_delta'):
              self.set_delta(obj_.value)
        elif nodeName_ == 'epsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'epsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_epsilon'):
              self.add_epsilon(obj_.value)
            elif hasattr(self, 'set_epsilon'):
              self.set_epsilon(obj_.value)
        elif nodeName_ == 'zeta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'zeta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_zeta'):
              self.add_zeta(obj_.value)
            elif hasattr(self, 'set_zeta'):
              self.set_zeta(obj_.value)
        elif nodeName_ == 'eta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'eta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_eta'):
              self.add_eta(obj_.value)
            elif hasattr(self, 'set_eta'):
              self.set_eta(obj_.value)
        elif nodeName_ == 'theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_theta'):
              self.add_theta(obj_.value)
            elif hasattr(self, 'set_theta'):
              self.set_theta(obj_.value)
        elif nodeName_ == 'iota':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'iota', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_iota'):
              self.add_iota(obj_.value)
            elif hasattr(self, 'set_iota'):
              self.set_iota(obj_.value)
        elif nodeName_ == 'kappa':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'kappa', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_kappa'):
              self.add_kappa(obj_.value)
            elif hasattr(self, 'set_kappa'):
              self.set_kappa(obj_.value)
        elif nodeName_ == 'lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lambda'):
              self.add_lambda(obj_.value)
            elif hasattr(self, 'set_lambda'):
              self.set_lambda(obj_.value)
        elif nodeName_ == 'mu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mu'):
              self.add_mu(obj_.value)
            elif hasattr(self, 'set_mu'):
              self.set_mu(obj_.value)
        elif nodeName_ == 'nu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nu'):
              self.add_nu(obj_.value)
            elif hasattr(self, 'set_nu'):
              self.set_nu(obj_.value)
        elif nodeName_ == 'xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xi'):
              self.add_xi(obj_.value)
            elif hasattr(self, 'set_xi'):
              self.set_xi(obj_.value)
        elif nodeName_ == 'pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_pi'):
              self.add_pi(obj_.value)
            elif hasattr(self, 'set_pi'):
              self.set_pi(obj_.value)
        elif nodeName_ == 'rho':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rho', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rho'):
              self.add_rho(obj_.value)
            elif hasattr(self, 'set_rho'):
              self.set_rho(obj_.value)
        elif nodeName_ == 'sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigma'):
              self.add_sigma(obj_.value)
            elif hasattr(self, 'set_sigma'):
              self.set_sigma(obj_.value)
        elif nodeName_ == 'tau':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tau', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tau'):
              self.add_tau(obj_.value)
            elif hasattr(self, 'set_tau'):
              self.set_tau(obj_.value)
        elif nodeName_ == 'upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_upsilon'):
              self.add_upsilon(obj_.value)
            elif hasattr(self, 'set_upsilon'):
              self.set_upsilon(obj_.value)
        elif nodeName_ == 'phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_phi'):
              self.add_phi(obj_.value)
            elif hasattr(self, 'set_phi'):
              self.set_phi(obj_.value)
        elif nodeName_ == 'chi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'chi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_chi'):
              self.add_chi(obj_.value)
            elif hasattr(self, 'set_chi'):
              self.set_chi(obj_.value)
        elif nodeName_ == 'psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_psi'):
              self.add_psi(obj_.value)
            elif hasattr(self, 'set_psi'):
              self.set_psi(obj_.value)
        elif nodeName_ == 'omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_omega'):
              self.add_omega(obj_.value)
            elif hasattr(self, 'set_omega'):
              self.set_omega(obj_.value)
        elif nodeName_ == 'sigmaf':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigmaf', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigmaf'):
              self.add_sigmaf(obj_.value)
            elif hasattr(self, 'set_sigmaf'):
              self.set_sigmaf(obj_.value)
        elif nodeName_ == 'sect':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect'):
              self.add_sect(obj_.value)
            elif hasattr(self, 'set_sect'):
              self.set_sect(obj_.value)
        elif nodeName_ == 'deg':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'deg', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_deg'):
              self.add_deg(obj_.value)
            elif hasattr(self, 'set_deg'):
              self.set_deg(obj_.value)
        elif nodeName_ == 'prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prime'):
              self.add_prime(obj_.value)
            elif hasattr(self, 'set_prime'):
              self.set_prime(obj_.value)
        elif nodeName_ == 'Prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Prime'):
              self.add_Prime(obj_.value)
            elif hasattr(self, 'set_Prime'):
              self.set_Prime(obj_.value)
        elif nodeName_ == 'infin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'infin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_infin'):
              self.add_infin(obj_.value)
            elif hasattr(self, 'set_infin'):
              self.set_infin(obj_.value)
        elif nodeName_ == 'empty':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'empty', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_empty'):
              self.add_empty(obj_.value)
            elif hasattr(self, 'set_empty'):
              self.set_empty(obj_.value)
        elif nodeName_ == 'plusmn':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'plusmn', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_plusmn'):
              self.add_plusmn(obj_.value)
            elif hasattr(self, 'set_plusmn'):
              self.set_plusmn(obj_.value)
        elif nodeName_ == 'times':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'times', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_times'):
              self.add_times(obj_.value)
            elif hasattr(self, 'set_times'):
              self.set_times(obj_.value)
        elif nodeName_ == 'minus':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'minus', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_minus'):
              self.add_minus(obj_.value)
            elif hasattr(self, 'set_minus'):
              self.set_minus(obj_.value)
        elif nodeName_ == 'sdot':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sdot', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sdot'):
              self.add_sdot(obj_.value)
            elif hasattr(self, 'set_sdot'):
              self.set_sdot(obj_.value)
        elif nodeName_ == 'part':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'part', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_part'):
              self.add_part(obj_.value)
            elif hasattr(self, 'set_part'):
              self.set_part(obj_.value)
        elif nodeName_ == 'nabla':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nabla', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nabla'):
              self.add_nabla(obj_.value)
            elif hasattr(self, 'set_nabla'):
              self.set_nabla(obj_.value)
        elif nodeName_ == 'radic':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radic', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_radic'):
              self.add_radic(obj_.value)
            elif hasattr(self, 'set_radic'):
              self.set_radic(obj_.value)
        elif nodeName_ == 'perp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'perp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_perp'):
              self.add_perp(obj_.value)
            elif hasattr(self, 'set_perp'):
              self.set_perp(obj_.value)
        elif nodeName_ == 'sum':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sum', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sum'):
              self.add_sum(obj_.value)
            elif hasattr(self, 'set_sum'):
              self.set_sum(obj_.value)
        elif nodeName_ == 'int':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'int', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_int'):
              self.add_int(obj_.value)
            elif hasattr(self, 'set_int'):
              self.set_int(obj_.value)
        elif nodeName_ == 'prod':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prod'):
              self.add_prod(obj_.value)
            elif hasattr(self, 'set_prod'):
              self.set_prod(obj_.value)
        elif nodeName_ == 'sim':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sim', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sim'):
              self.add_sim(obj_.value)
            elif hasattr(self, 'set_sim'):
              self.set_sim(obj_.value)
        elif nodeName_ == 'asymp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'asymp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_asymp'):
              self.add_asymp(obj_.value)
            elif hasattr(self, 'set_asymp'):
              self.set_asymp(obj_.value)
        elif nodeName_ == 'ne':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ne', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ne'):
              self.add_ne(obj_.value)
            elif hasattr(self, 'set_ne'):
              self.set_ne(obj_.value)
        elif nodeName_ == 'equiv':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'equiv', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_equiv'):
              self.add_equiv(obj_.value)
            elif hasattr(self, 'set_equiv'):
              self.set_equiv(obj_.value)
        elif nodeName_ == 'prop':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prop', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prop'):
              self.add_prop(obj_.value)
            elif hasattr(self, 'set_prop'):
              self.set_prop(obj_.value)
        elif nodeName_ == 'le':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'le', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_le'):
              self.add_le(obj_.value)
            elif hasattr(self, 'set_le'):
              self.set_le(obj_.value)
        elif nodeName_ == 'ge':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ge', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ge'):
              self.add_ge(obj_.value)
            elif hasattr(self, 'set_ge'):
              self.set_ge(obj_.value)
        elif nodeName_ == 'larr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'larr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_larr'):
              self.add_larr(obj_.value)
            elif hasattr(self, 'set_larr'):
              self.set_larr(obj_.value)
        elif nodeName_ == 'rarr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rarr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rarr'):
              self.add_rarr(obj_.value)
            elif hasattr(self, 'set_rarr'):
              self.set_rarr(obj_.value)
        elif nodeName_ == 'isin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'isin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_isin'):
              self.add_isin(obj_.value)
            elif hasattr(self, 'set_isin'):
              self.set_isin(obj_.value)
        elif nodeName_ == 'notin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'notin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_notin'):
              self.add_notin(obj_.value)
            elif hasattr(self, 'set_notin'):
              self.set_notin(obj_.value)
        elif nodeName_ == 'lceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lceil'):
              self.add_lceil(obj_.value)
            elif hasattr(self, 'set_lceil'):
              self.set_lceil(obj_.value)
        elif nodeName_ == 'rceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rceil'):
              self.add_rceil(obj_.value)
            elif hasattr(self, 'set_rceil'):
              self.set_rceil(obj_.value)
        elif nodeName_ == 'lfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lfloor'):
              self.add_lfloor(obj_.value)
            elif hasattr(self, 'set_lfloor'):
              self.set_lfloor(obj_.value)
        elif nodeName_ == 'rfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rfloor'):
              self.add_rfloor(obj_.value)
            elif hasattr(self, 'set_rfloor'):
              self.set_rfloor(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docImageType


class docDotFileType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, ulink=None, bold=None, emphasis=None, computeroutput=None, subscript=None, superscript=None, center=None, small=None, htmlonly=None, manonly=None, xmlonly=None, rtfonly=None, latexonly=None, dot=None, anchor=None, formula=None, ref=None, copy=None, trademark=None, registered=None, lsquo=None, rsquo=None, ldquo=None, rdquo=None, ndash=None, mdash=None, umlaut=None, acute=None, grave=None, circ=None, slash=None, tilde=None, cedil=None, ring=None, szlig=None, nonbreakablespace=None, aelig=None, AElig=None, Gamma=None, Delta=None, Theta=None, Lambda=None, Xi=None, Pi=None, Sigma=None, Upsilon=None, Phi=None, Psi=None, Omega=None, alpha=None, beta=None, gamma=None, delta=None, epsilon=None, zeta=None, eta=None, theta=None, iota=None, kappa=None, lambda_=None, mu=None, nu=None, xi=None, pi=None, rho=None, sigma=None, tau=None, upsilon=None, phi=None, chi=None, psi=None, omega=None, sigmaf=None, sect=None, deg=None, prime=None, Prime=None, infin=None, empty=None, plusmn=None, times=None, minus=None, sdot=None, part=None, nabla=None, radic=None, perp=None, sum=None, int=None, prod=None, sim=None, asymp=None, ne=None, equiv=None, prop=None, le=None, ge=None, larr=None, rarr=None, isin=None, notin=None, lceil=None, rceil=None, lfloor=None, rfloor=None, valueOf_=None, mixedclass_=None, content_=None):
        self.name = _cast(None, name)
        if ulink is None:
            self.ulink = []
        else:
            self.ulink = ulink
        if bold is None:
            self.bold = []
        else:
            self.bold = bold
        if emphasis is None:
            self.emphasis = []
        else:
            self.emphasis = emphasis
        if computeroutput is None:
            self.computeroutput = []
        else:
            self.computeroutput = computeroutput
        if subscript is None:
            self.subscript = []
        else:
            self.subscript = subscript
        if superscript is None:
            self.superscript = []
        else:
            self.superscript = superscript
        if center is None:
            self.center = []
        else:
            self.center = center
        if small is None:
            self.small = []
        else:
            self.small = small
        if htmlonly is None:
            self.htmlonly = []
        else:
            self.htmlonly = htmlonly
        if manonly is None:
            self.manonly = []
        else:
            self.manonly = manonly
        if xmlonly is None:
            self.xmlonly = []
        else:
            self.xmlonly = xmlonly
        if rtfonly is None:
            self.rtfonly = []
        else:
            self.rtfonly = rtfonly
        if latexonly is None:
            self.latexonly = []
        else:
            self.latexonly = latexonly
        if dot is None:
            self.dot = []
        else:
            self.dot = dot
        if anchor is None:
            self.anchor = []
        else:
            self.anchor = anchor
        if formula is None:
            self.formula = []
        else:
            self.formula = formula
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        if copy is None:
            self.copy = []
        else:
            self.copy = copy
        if trademark is None:
            self.trademark = []
        else:
            self.trademark = trademark
        if registered is None:
            self.registered = []
        else:
            self.registered = registered
        if lsquo is None:
            self.lsquo = []
        else:
            self.lsquo = lsquo
        if rsquo is None:
            self.rsquo = []
        else:
            self.rsquo = rsquo
        if ldquo is None:
            self.ldquo = []
        else:
            self.ldquo = ldquo
        if rdquo is None:
            self.rdquo = []
        else:
            self.rdquo = rdquo
        if ndash is None:
            self.ndash = []
        else:
            self.ndash = ndash
        if mdash is None:
            self.mdash = []
        else:
            self.mdash = mdash
        if umlaut is None:
            self.umlaut = []
        else:
            self.umlaut = umlaut
        if acute is None:
            self.acute = []
        else:
            self.acute = acute
        if grave is None:
            self.grave = []
        else:
            self.grave = grave
        if circ is None:
            self.circ = []
        else:
            self.circ = circ
        if slash is None:
            self.slash = []
        else:
            self.slash = slash
        if tilde is None:
            self.tilde = []
        else:
            self.tilde = tilde
        if cedil is None:
            self.cedil = []
        else:
            self.cedil = cedil
        if ring is None:
            self.ring = []
        else:
            self.ring = ring
        if szlig is None:
            self.szlig = []
        else:
            self.szlig = szlig
        if nonbreakablespace is None:
            self.nonbreakablespace = []
        else:
            self.nonbreakablespace = nonbreakablespace
        if aelig is None:
            self.aelig = []
        else:
            self.aelig = aelig
        if AElig is None:
            self.AElig = []
        else:
            self.AElig = AElig
        if Gamma is None:
            self.Gamma = []
        else:
            self.Gamma = Gamma
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Theta is None:
            self.Theta = []
        else:
            self.Theta = Theta
        if Lambda is None:
            self.Lambda = []
        else:
            self.Lambda = Lambda
        if Xi is None:
            self.Xi = []
        else:
            self.Xi = Xi
        if Pi is None:
            self.Pi = []
        else:
            self.Pi = Pi
        if Sigma is None:
            self.Sigma = []
        else:
            self.Sigma = Sigma
        if Upsilon is None:
            self.Upsilon = []
        else:
            self.Upsilon = Upsilon
        if Phi is None:
            self.Phi = []
        else:
            self.Phi = Phi
        if Psi is None:
            self.Psi = []
        else:
            self.Psi = Psi
        if Omega is None:
            self.Omega = []
        else:
            self.Omega = Omega
        if alpha is None:
            self.alpha = []
        else:
            self.alpha = alpha
        if beta is None:
            self.beta = []
        else:
            self.beta = beta
        if gamma is None:
            self.gamma = []
        else:
            self.gamma = gamma
        if delta is None:
            self.delta = []
        else:
            self.delta = delta
        if epsilon is None:
            self.epsilon = []
        else:
            self.epsilon = epsilon
        if zeta is None:
            self.zeta = []
        else:
            self.zeta = zeta
        if eta is None:
            self.eta = []
        else:
            self.eta = eta
        if theta is None:
            self.theta = []
        else:
            self.theta = theta
        if iota is None:
            self.iota = []
        else:
            self.iota = iota
        if kappa is None:
            self.kappa = []
        else:
            self.kappa = kappa
        if lambda_ is None:
            self.lambda_ = []
        else:
            self.lambda_ = lambda_
        if mu is None:
            self.mu = []
        else:
            self.mu = mu
        if nu is None:
            self.nu = []
        else:
            self.nu = nu
        if xi is None:
            self.xi = []
        else:
            self.xi = xi
        if pi is None:
            self.pi = []
        else:
            self.pi = pi
        if rho is None:
            self.rho = []
        else:
            self.rho = rho
        if sigma is None:
            self.sigma = []
        else:
            self.sigma = sigma
        if tau is None:
            self.tau = []
        else:
            self.tau = tau
        if upsilon is None:
            self.upsilon = []
        else:
            self.upsilon = upsilon
        if phi is None:
            self.phi = []
        else:
            self.phi = phi
        if chi is None:
            self.chi = []
        else:
            self.chi = chi
        if psi is None:
            self.psi = []
        else:
            self.psi = psi
        if omega is None:
            self.omega = []
        else:
            self.omega = omega
        if sigmaf is None:
            self.sigmaf = []
        else:
            self.sigmaf = sigmaf
        if sect is None:
            self.sect = []
        else:
            self.sect = sect
        if deg is None:
            self.deg = []
        else:
            self.deg = deg
        if prime is None:
            self.prime = []
        else:
            self.prime = prime
        if Prime is None:
            self.Prime = []
        else:
            self.Prime = Prime
        if infin is None:
            self.infin = []
        else:
            self.infin = infin
        if empty is None:
            self.empty = []
        else:
            self.empty = empty
        if plusmn is None:
            self.plusmn = []
        else:
            self.plusmn = plusmn
        if times is None:
            self.times = []
        else:
            self.times = times
        if minus is None:
            self.minus = []
        else:
            self.minus = minus
        if sdot is None:
            self.sdot = []
        else:
            self.sdot = sdot
        if part is None:
            self.part = []
        else:
            self.part = part
        if nabla is None:
            self.nabla = []
        else:
            self.nabla = nabla
        if radic is None:
            self.radic = []
        else:
            self.radic = radic
        if perp is None:
            self.perp = []
        else:
            self.perp = perp
        if sum is None:
            self.sum = []
        else:
            self.sum = sum
        if int is None:
            self.int = []
        else:
            self.int = int
        if prod is None:
            self.prod = []
        else:
            self.prod = prod
        if sim is None:
            self.sim = []
        else:
            self.sim = sim
        if asymp is None:
            self.asymp = []
        else:
            self.asymp = asymp
        if ne is None:
            self.ne = []
        else:
            self.ne = ne
        if equiv is None:
            self.equiv = []
        else:
            self.equiv = equiv
        if prop is None:
            self.prop = []
        else:
            self.prop = prop
        if le is None:
            self.le = []
        else:
            self.le = le
        if ge is None:
            self.ge = []
        else:
            self.ge = ge
        if larr is None:
            self.larr = []
        else:
            self.larr = larr
        if rarr is None:
            self.rarr = []
        else:
            self.rarr = rarr
        if isin is None:
            self.isin = []
        else:
            self.isin = isin
        if notin is None:
            self.notin = []
        else:
            self.notin = notin
        if lceil is None:
            self.lceil = []
        else:
            self.lceil = lceil
        if rceil is None:
            self.rceil = []
        else:
            self.rceil = rceil
        if lfloor is None:
            self.lfloor = []
        else:
            self.lfloor = lfloor
        if rfloor is None:
            self.rfloor = []
        else:
            self.rfloor = rfloor
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docDotFileType.subclass:
            return docDotFileType.subclass(*args_, **kwargs_)
        else:
            return docDotFileType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ulink(self): return self.ulink
    def set_ulink(self, ulink): self.ulink = ulink
    def add_ulink(self, value): self.ulink.append(value)
    def insert_ulink(self, index, value): self.ulink[index] = value
    def get_bold(self): return self.bold
    def set_bold(self, bold): self.bold = bold
    def add_bold(self, value): self.bold.append(value)
    def insert_bold(self, index, value): self.bold[index] = value
    def get_emphasis(self): return self.emphasis
    def set_emphasis(self, emphasis): self.emphasis = emphasis
    def add_emphasis(self, value): self.emphasis.append(value)
    def insert_emphasis(self, index, value): self.emphasis[index] = value
    def get_computeroutput(self): return self.computeroutput
    def set_computeroutput(self, computeroutput): self.computeroutput = computeroutput
    def add_computeroutput(self, value): self.computeroutput.append(value)
    def insert_computeroutput(self, index, value): self.computeroutput[index] = value
    def get_subscript(self): return self.subscript
    def set_subscript(self, subscript): self.subscript = subscript
    def add_subscript(self, value): self.subscript.append(value)
    def insert_subscript(self, index, value): self.subscript[index] = value
    def get_superscript(self): return self.superscript
    def set_superscript(self, superscript): self.superscript = superscript
    def add_superscript(self, value): self.superscript.append(value)
    def insert_superscript(self, index, value): self.superscript[index] = value
    def get_center(self): return self.center
    def set_center(self, center): self.center = center
    def add_center(self, value): self.center.append(value)
    def insert_center(self, index, value): self.center[index] = value
    def get_small(self): return self.small
    def set_small(self, small): self.small = small
    def add_small(self, value): self.small.append(value)
    def insert_small(self, index, value): self.small[index] = value
    def get_htmlonly(self): return self.htmlonly
    def set_htmlonly(self, htmlonly): self.htmlonly = htmlonly
    def add_htmlonly(self, value): self.htmlonly.append(value)
    def insert_htmlonly(self, index, value): self.htmlonly[index] = value
    def get_manonly(self): return self.manonly
    def set_manonly(self, manonly): self.manonly = manonly
    def add_manonly(self, value): self.manonly.append(value)
    def insert_manonly(self, index, value): self.manonly[index] = value
    def get_xmlonly(self): return self.xmlonly
    def set_xmlonly(self, xmlonly): self.xmlonly = xmlonly
    def add_xmlonly(self, value): self.xmlonly.append(value)
    def insert_xmlonly(self, index, value): self.xmlonly[index] = value
    def get_rtfonly(self): return self.rtfonly
    def set_rtfonly(self, rtfonly): self.rtfonly = rtfonly
    def add_rtfonly(self, value): self.rtfonly.append(value)
    def insert_rtfonly(self, index, value): self.rtfonly[index] = value
    def get_latexonly(self): return self.latexonly
    def set_latexonly(self, latexonly): self.latexonly = latexonly
    def add_latexonly(self, value): self.latexonly.append(value)
    def insert_latexonly(self, index, value): self.latexonly[index] = value
    def get_dot(self): return self.dot
    def set_dot(self, dot): self.dot = dot
    def add_dot(self, value): self.dot.append(value)
    def insert_dot(self, index, value): self.dot[index] = value
    def get_anchor(self): return self.anchor
    def set_anchor(self, anchor): self.anchor = anchor
    def add_anchor(self, value): self.anchor.append(value)
    def insert_anchor(self, index, value): self.anchor[index] = value
    def get_formula(self): return self.formula
    def set_formula(self, formula): self.formula = formula
    def add_formula(self, value): self.formula.append(value)
    def insert_formula(self, index, value): self.formula[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_copy(self): return self.copy
    def set_copy(self, copy): self.copy = copy
    def add_copy(self, value): self.copy.append(value)
    def insert_copy(self, index, value): self.copy[index] = value
    def get_trademark(self): return self.trademark
    def set_trademark(self, trademark): self.trademark = trademark
    def add_trademark(self, value): self.trademark.append(value)
    def insert_trademark(self, index, value): self.trademark[index] = value
    def get_registered(self): return self.registered
    def set_registered(self, registered): self.registered = registered
    def add_registered(self, value): self.registered.append(value)
    def insert_registered(self, index, value): self.registered[index] = value
    def get_lsquo(self): return self.lsquo
    def set_lsquo(self, lsquo): self.lsquo = lsquo
    def add_lsquo(self, value): self.lsquo.append(value)
    def insert_lsquo(self, index, value): self.lsquo[index] = value
    def get_rsquo(self): return self.rsquo
    def set_rsquo(self, rsquo): self.rsquo = rsquo
    def add_rsquo(self, value): self.rsquo.append(value)
    def insert_rsquo(self, index, value): self.rsquo[index] = value
    def get_ldquo(self): return self.ldquo
    def set_ldquo(self, ldquo): self.ldquo = ldquo
    def add_ldquo(self, value): self.ldquo.append(value)
    def insert_ldquo(self, index, value): self.ldquo[index] = value
    def get_rdquo(self): return self.rdquo
    def set_rdquo(self, rdquo): self.rdquo = rdquo
    def add_rdquo(self, value): self.rdquo.append(value)
    def insert_rdquo(self, index, value): self.rdquo[index] = value
    def get_ndash(self): return self.ndash
    def set_ndash(self, ndash): self.ndash = ndash
    def add_ndash(self, value): self.ndash.append(value)
    def insert_ndash(self, index, value): self.ndash[index] = value
    def get_mdash(self): return self.mdash
    def set_mdash(self, mdash): self.mdash = mdash
    def add_mdash(self, value): self.mdash.append(value)
    def insert_mdash(self, index, value): self.mdash[index] = value
    def get_umlaut(self): return self.umlaut
    def set_umlaut(self, umlaut): self.umlaut = umlaut
    def add_umlaut(self, value): self.umlaut.append(value)
    def insert_umlaut(self, index, value): self.umlaut[index] = value
    def get_acute(self): return self.acute
    def set_acute(self, acute): self.acute = acute
    def add_acute(self, value): self.acute.append(value)
    def insert_acute(self, index, value): self.acute[index] = value
    def get_grave(self): return self.grave
    def set_grave(self, grave): self.grave = grave
    def add_grave(self, value): self.grave.append(value)
    def insert_grave(self, index, value): self.grave[index] = value
    def get_circ(self): return self.circ
    def set_circ(self, circ): self.circ = circ
    def add_circ(self, value): self.circ.append(value)
    def insert_circ(self, index, value): self.circ[index] = value
    def get_slash(self): return self.slash
    def set_slash(self, slash): self.slash = slash
    def add_slash(self, value): self.slash.append(value)
    def insert_slash(self, index, value): self.slash[index] = value
    def get_tilde(self): return self.tilde
    def set_tilde(self, tilde): self.tilde = tilde
    def add_tilde(self, value): self.tilde.append(value)
    def insert_tilde(self, index, value): self.tilde[index] = value
    def get_cedil(self): return self.cedil
    def set_cedil(self, cedil): self.cedil = cedil
    def add_cedil(self, value): self.cedil.append(value)
    def insert_cedil(self, index, value): self.cedil[index] = value
    def get_ring(self): return self.ring
    def set_ring(self, ring): self.ring = ring
    def add_ring(self, value): self.ring.append(value)
    def insert_ring(self, index, value): self.ring[index] = value
    def get_szlig(self): return self.szlig
    def set_szlig(self, szlig): self.szlig = szlig
    def add_szlig(self, value): self.szlig.append(value)
    def insert_szlig(self, index, value): self.szlig[index] = value
    def get_nonbreakablespace(self): return self.nonbreakablespace
    def set_nonbreakablespace(self, nonbreakablespace): self.nonbreakablespace = nonbreakablespace
    def add_nonbreakablespace(self, value): self.nonbreakablespace.append(value)
    def insert_nonbreakablespace(self, index, value): self.nonbreakablespace[index] = value
    def get_aelig(self): return self.aelig
    def set_aelig(self, aelig): self.aelig = aelig
    def add_aelig(self, value): self.aelig.append(value)
    def insert_aelig(self, index, value): self.aelig[index] = value
    def get_AElig(self): return self.AElig
    def set_AElig(self, AElig): self.AElig = AElig
    def add_AElig(self, value): self.AElig.append(value)
    def insert_AElig(self, index, value): self.AElig[index] = value
    def get_Gamma(self): return self.Gamma
    def set_Gamma(self, Gamma): self.Gamma = Gamma
    def add_Gamma(self, value): self.Gamma.append(value)
    def insert_Gamma(self, index, value): self.Gamma[index] = value
    def get_Delta(self): return self.Delta
    def set_Delta(self, Delta): self.Delta = Delta
    def add_Delta(self, value): self.Delta.append(value)
    def insert_Delta(self, index, value): self.Delta[index] = value
    def get_Theta(self): return self.Theta
    def set_Theta(self, Theta): self.Theta = Theta
    def add_Theta(self, value): self.Theta.append(value)
    def insert_Theta(self, index, value): self.Theta[index] = value
    def get_Lambda(self): return self.Lambda
    def set_Lambda(self, Lambda): self.Lambda = Lambda
    def add_Lambda(self, value): self.Lambda.append(value)
    def insert_Lambda(self, index, value): self.Lambda[index] = value
    def get_Xi(self): return self.Xi
    def set_Xi(self, Xi): self.Xi = Xi
    def add_Xi(self, value): self.Xi.append(value)
    def insert_Xi(self, index, value): self.Xi[index] = value
    def get_Pi(self): return self.Pi
    def set_Pi(self, Pi): self.Pi = Pi
    def add_Pi(self, value): self.Pi.append(value)
    def insert_Pi(self, index, value): self.Pi[index] = value
    def get_Sigma(self): return self.Sigma
    def set_Sigma(self, Sigma): self.Sigma = Sigma
    def add_Sigma(self, value): self.Sigma.append(value)
    def insert_Sigma(self, index, value): self.Sigma[index] = value
    def get_Upsilon(self): return self.Upsilon
    def set_Upsilon(self, Upsilon): self.Upsilon = Upsilon
    def add_Upsilon(self, value): self.Upsilon.append(value)
    def insert_Upsilon(self, index, value): self.Upsilon[index] = value
    def get_Phi(self): return self.Phi
    def set_Phi(self, Phi): self.Phi = Phi
    def add_Phi(self, value): self.Phi.append(value)
    def insert_Phi(self, index, value): self.Phi[index] = value
    def get_Psi(self): return self.Psi
    def set_Psi(self, Psi): self.Psi = Psi
    def add_Psi(self, value): self.Psi.append(value)
    def insert_Psi(self, index, value): self.Psi[index] = value
    def get_Omega(self): return self.Omega
    def set_Omega(self, Omega): self.Omega = Omega
    def add_Omega(self, value): self.Omega.append(value)
    def insert_Omega(self, index, value): self.Omega[index] = value
    def get_alpha(self): return self.alpha
    def set_alpha(self, alpha): self.alpha = alpha
    def add_alpha(self, value): self.alpha.append(value)
    def insert_alpha(self, index, value): self.alpha[index] = value
    def get_beta(self): return self.beta
    def set_beta(self, beta): self.beta = beta
    def add_beta(self, value): self.beta.append(value)
    def insert_beta(self, index, value): self.beta[index] = value
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def add_gamma(self, value): self.gamma.append(value)
    def insert_gamma(self, index, value): self.gamma[index] = value
    def get_delta(self): return self.delta
    def set_delta(self, delta): self.delta = delta
    def add_delta(self, value): self.delta.append(value)
    def insert_delta(self, index, value): self.delta[index] = value
    def get_epsilon(self): return self.epsilon
    def set_epsilon(self, epsilon): self.epsilon = epsilon
    def add_epsilon(self, value): self.epsilon.append(value)
    def insert_epsilon(self, index, value): self.epsilon[index] = value
    def get_zeta(self): return self.zeta
    def set_zeta(self, zeta): self.zeta = zeta
    def add_zeta(self, value): self.zeta.append(value)
    def insert_zeta(self, index, value): self.zeta[index] = value
    def get_eta(self): return self.eta
    def set_eta(self, eta): self.eta = eta
    def add_eta(self, value): self.eta.append(value)
    def insert_eta(self, index, value): self.eta[index] = value
    def get_theta(self): return self.theta
    def set_theta(self, theta): self.theta = theta
    def add_theta(self, value): self.theta.append(value)
    def insert_theta(self, index, value): self.theta[index] = value
    def get_iota(self): return self.iota
    def set_iota(self, iota): self.iota = iota
    def add_iota(self, value): self.iota.append(value)
    def insert_iota(self, index, value): self.iota[index] = value
    def get_kappa(self): return self.kappa
    def set_kappa(self, kappa): self.kappa = kappa
    def add_kappa(self, value): self.kappa.append(value)
    def insert_kappa(self, index, value): self.kappa[index] = value
    def get_lambda(self): return self.lambda_
    def set_lambda(self, lambda_): self.lambda_ = lambda_
    def add_lambda(self, value): self.lambda_.append(value)
    def insert_lambda(self, index, value): self.lambda_[index] = value
    def get_mu(self): return self.mu
    def set_mu(self, mu): self.mu = mu
    def add_mu(self, value): self.mu.append(value)
    def insert_mu(self, index, value): self.mu[index] = value
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def add_nu(self, value): self.nu.append(value)
    def insert_nu(self, index, value): self.nu[index] = value
    def get_xi(self): return self.xi
    def set_xi(self, xi): self.xi = xi
    def add_xi(self, value): self.xi.append(value)
    def insert_xi(self, index, value): self.xi[index] = value
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def add_pi(self, value): self.pi.append(value)
    def insert_pi(self, index, value): self.pi[index] = value
    def get_rho(self): return self.rho
    def set_rho(self, rho): self.rho = rho
    def add_rho(self, value): self.rho.append(value)
    def insert_rho(self, index, value): self.rho[index] = value
    def get_sigma(self): return self.sigma
    def set_sigma(self, sigma): self.sigma = sigma
    def add_sigma(self, value): self.sigma.append(value)
    def insert_sigma(self, index, value): self.sigma[index] = value
    def get_tau(self): return self.tau
    def set_tau(self, tau): self.tau = tau
    def add_tau(self, value): self.tau.append(value)
    def insert_tau(self, index, value): self.tau[index] = value
    def get_upsilon(self): return self.upsilon
    def set_upsilon(self, upsilon): self.upsilon = upsilon
    def add_upsilon(self, value): self.upsilon.append(value)
    def insert_upsilon(self, index, value): self.upsilon[index] = value
    def get_phi(self): return self.phi
    def set_phi(self, phi): self.phi = phi
    def add_phi(self, value): self.phi.append(value)
    def insert_phi(self, index, value): self.phi[index] = value
    def get_chi(self): return self.chi
    def set_chi(self, chi): self.chi = chi
    def add_chi(self, value): self.chi.append(value)
    def insert_chi(self, index, value): self.chi[index] = value
    def get_psi(self): return self.psi
    def set_psi(self, psi): self.psi = psi
    def add_psi(self, value): self.psi.append(value)
    def insert_psi(self, index, value): self.psi[index] = value
    def get_omega(self): return self.omega
    def set_omega(self, omega): self.omega = omega
    def add_omega(self, value): self.omega.append(value)
    def insert_omega(self, index, value): self.omega[index] = value
    def get_sigmaf(self): return self.sigmaf
    def set_sigmaf(self, sigmaf): self.sigmaf = sigmaf
    def add_sigmaf(self, value): self.sigmaf.append(value)
    def insert_sigmaf(self, index, value): self.sigmaf[index] = value
    def get_sect(self): return self.sect
    def set_sect(self, sect): self.sect = sect
    def add_sect(self, value): self.sect.append(value)
    def insert_sect(self, index, value): self.sect[index] = value
    def get_deg(self): return self.deg
    def set_deg(self, deg): self.deg = deg
    def add_deg(self, value): self.deg.append(value)
    def insert_deg(self, index, value): self.deg[index] = value
    def get_prime(self): return self.prime
    def set_prime(self, prime): self.prime = prime
    def add_prime(self, value): self.prime.append(value)
    def insert_prime(self, index, value): self.prime[index] = value
    def get_Prime(self): return self.Prime
    def set_Prime(self, Prime): self.Prime = Prime
    def add_Prime(self, value): self.Prime.append(value)
    def insert_Prime(self, index, value): self.Prime[index] = value
    def get_infin(self): return self.infin
    def set_infin(self, infin): self.infin = infin
    def add_infin(self, value): self.infin.append(value)
    def insert_infin(self, index, value): self.infin[index] = value
    def get_empty(self): return self.empty
    def set_empty(self, empty): self.empty = empty
    def add_empty(self, value): self.empty.append(value)
    def insert_empty(self, index, value): self.empty[index] = value
    def get_plusmn(self): return self.plusmn
    def set_plusmn(self, plusmn): self.plusmn = plusmn
    def add_plusmn(self, value): self.plusmn.append(value)
    def insert_plusmn(self, index, value): self.plusmn[index] = value
    def get_times(self): return self.times
    def set_times(self, times): self.times = times
    def add_times(self, value): self.times.append(value)
    def insert_times(self, index, value): self.times[index] = value
    def get_minus(self): return self.minus
    def set_minus(self, minus): self.minus = minus
    def add_minus(self, value): self.minus.append(value)
    def insert_minus(self, index, value): self.minus[index] = value
    def get_sdot(self): return self.sdot
    def set_sdot(self, sdot): self.sdot = sdot
    def add_sdot(self, value): self.sdot.append(value)
    def insert_sdot(self, index, value): self.sdot[index] = value
    def get_part(self): return self.part
    def set_part(self, part): self.part = part
    def add_part(self, value): self.part.append(value)
    def insert_part(self, index, value): self.part[index] = value
    def get_nabla(self): return self.nabla
    def set_nabla(self, nabla): self.nabla = nabla
    def add_nabla(self, value): self.nabla.append(value)
    def insert_nabla(self, index, value): self.nabla[index] = value
    def get_radic(self): return self.radic
    def set_radic(self, radic): self.radic = radic
    def add_radic(self, value): self.radic.append(value)
    def insert_radic(self, index, value): self.radic[index] = value
    def get_perp(self): return self.perp
    def set_perp(self, perp): self.perp = perp
    def add_perp(self, value): self.perp.append(value)
    def insert_perp(self, index, value): self.perp[index] = value
    def get_sum(self): return self.sum
    def set_sum(self, sum): self.sum = sum
    def add_sum(self, value): self.sum.append(value)
    def insert_sum(self, index, value): self.sum[index] = value
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def add_int(self, value): self.int.append(value)
    def insert_int(self, index, value): self.int[index] = value
    def get_prod(self): return self.prod
    def set_prod(self, prod): self.prod = prod
    def add_prod(self, value): self.prod.append(value)
    def insert_prod(self, index, value): self.prod[index] = value
    def get_sim(self): return self.sim
    def set_sim(self, sim): self.sim = sim
    def add_sim(self, value): self.sim.append(value)
    def insert_sim(self, index, value): self.sim[index] = value
    def get_asymp(self): return self.asymp
    def set_asymp(self, asymp): self.asymp = asymp
    def add_asymp(self, value): self.asymp.append(value)
    def insert_asymp(self, index, value): self.asymp[index] = value
    def get_ne(self): return self.ne
    def set_ne(self, ne): self.ne = ne
    def add_ne(self, value): self.ne.append(value)
    def insert_ne(self, index, value): self.ne[index] = value
    def get_equiv(self): return self.equiv
    def set_equiv(self, equiv): self.equiv = equiv
    def add_equiv(self, value): self.equiv.append(value)
    def insert_equiv(self, index, value): self.equiv[index] = value
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def add_prop(self, value): self.prop.append(value)
    def insert_prop(self, index, value): self.prop[index] = value
    def get_le(self): return self.le
    def set_le(self, le): self.le = le
    def add_le(self, value): self.le.append(value)
    def insert_le(self, index, value): self.le[index] = value
    def get_ge(self): return self.ge
    def set_ge(self, ge): self.ge = ge
    def add_ge(self, value): self.ge.append(value)
    def insert_ge(self, index, value): self.ge[index] = value
    def get_larr(self): return self.larr
    def set_larr(self, larr): self.larr = larr
    def add_larr(self, value): self.larr.append(value)
    def insert_larr(self, index, value): self.larr[index] = value
    def get_rarr(self): return self.rarr
    def set_rarr(self, rarr): self.rarr = rarr
    def add_rarr(self, value): self.rarr.append(value)
    def insert_rarr(self, index, value): self.rarr[index] = value
    def get_isin(self): return self.isin
    def set_isin(self, isin): self.isin = isin
    def add_isin(self, value): self.isin.append(value)
    def insert_isin(self, index, value): self.isin[index] = value
    def get_notin(self): return self.notin
    def set_notin(self, notin): self.notin = notin
    def add_notin(self, value): self.notin.append(value)
    def insert_notin(self, index, value): self.notin[index] = value
    def get_lceil(self): return self.lceil
    def set_lceil(self, lceil): self.lceil = lceil
    def add_lceil(self, value): self.lceil.append(value)
    def insert_lceil(self, index, value): self.lceil[index] = value
    def get_rceil(self): return self.rceil
    def set_rceil(self, rceil): self.rceil = rceil
    def add_rceil(self, value): self.rceil.append(value)
    def insert_rceil(self, index, value): self.rceil[index] = value
    def get_lfloor(self): return self.lfloor
    def set_lfloor(self, lfloor): self.lfloor = lfloor
    def add_lfloor(self, value): self.lfloor.append(value)
    def insert_lfloor(self, index, value): self.lfloor[index] = value
    def get_rfloor(self): return self.rfloor
    def set_rfloor(self, rfloor): self.rfloor = rfloor
    def add_rfloor(self, value): self.rfloor.append(value)
    def insert_rfloor(self, index, value): self.rfloor[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ulink or
            self.bold or
            self.emphasis or
            self.computeroutput or
            self.subscript or
            self.superscript or
            self.center or
            self.small or
            self.htmlonly or
            self.manonly or
            self.xmlonly or
            self.rtfonly or
            self.latexonly or
            self.dot or
            self.anchor or
            self.formula or
            self.ref or
            self.copy or
            self.trademark or
            self.registered or
            self.lsquo or
            self.rsquo or
            self.ldquo or
            self.rdquo or
            self.ndash or
            self.mdash or
            self.umlaut or
            self.acute or
            self.grave or
            self.circ or
            self.slash or
            self.tilde or
            self.cedil or
            self.ring or
            self.szlig or
            self.nonbreakablespace or
            self.aelig or
            self.AElig or
            self.Gamma or
            self.Delta or
            self.Theta or
            self.Lambda or
            self.Xi or
            self.Pi or
            self.Sigma or
            self.Upsilon or
            self.Phi or
            self.Psi or
            self.Omega or
            self.alpha or
            self.beta or
            self.gamma or
            self.delta or
            self.epsilon or
            self.zeta or
            self.eta or
            self.theta or
            self.iota or
            self.kappa or
            self.lambda_ or
            self.mu or
            self.nu or
            self.xi or
            self.pi or
            self.rho or
            self.sigma or
            self.tau or
            self.upsilon or
            self.phi or
            self.chi or
            self.psi or
            self.omega or
            self.sigmaf or
            self.sect or
            self.deg or
            self.prime or
            self.Prime or
            self.infin or
            self.empty or
            self.plusmn or
            self.times or
            self.minus or
            self.sdot or
            self.part or
            self.nabla or
            self.radic or
            self.perp or
            self.sum or
            self.int or
            self.prod or
            self.sim or
            self.asymp or
            self.ne or
            self.equiv or
            self.prop or
            self.le or
            self.ge or
            self.larr or
            self.rarr or
            self.isin or
            self.notin or
            self.lceil or
            self.rceil or
            self.lfloor or
            self.rfloor or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docDotFileType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docDotFileType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docDotFileType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docDotFileType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docDotFileType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ulink':
            obj_ = docURLLink.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ulink', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ulink'):
              self.add_ulink(obj_.value)
            elif hasattr(self, 'set_ulink'):
              self.set_ulink(obj_.value)
        elif nodeName_ == 'bold':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'bold', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_bold'):
              self.add_bold(obj_.value)
            elif hasattr(self, 'set_bold'):
              self.set_bold(obj_.value)
        elif nodeName_ == 'emphasis':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'emphasis', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_emphasis'):
              self.add_emphasis(obj_.value)
            elif hasattr(self, 'set_emphasis'):
              self.set_emphasis(obj_.value)
        elif nodeName_ == 'computeroutput':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'computeroutput', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_computeroutput'):
              self.add_computeroutput(obj_.value)
            elif hasattr(self, 'set_computeroutput'):
              self.set_computeroutput(obj_.value)
        elif nodeName_ == 'subscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'subscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_subscript'):
              self.add_subscript(obj_.value)
            elif hasattr(self, 'set_subscript'):
              self.set_subscript(obj_.value)
        elif nodeName_ == 'superscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'superscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_superscript'):
              self.add_superscript(obj_.value)
            elif hasattr(self, 'set_superscript'):
              self.set_superscript(obj_.value)
        elif nodeName_ == 'center':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'center', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_center'):
              self.add_center(obj_.value)
            elif hasattr(self, 'set_center'):
              self.set_center(obj_.value)
        elif nodeName_ == 'small':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'small', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_small'):
              self.add_small(obj_.value)
            elif hasattr(self, 'set_small'):
              self.set_small(obj_.value)
        elif nodeName_ == 'htmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'htmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'manonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'manonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'xmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'xmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'rtfonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'rtfonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'latexonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'latexonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'dot' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'dot', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'anchor':
            obj_ = docAnchorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'anchor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_anchor'):
              self.add_anchor(obj_.value)
            elif hasattr(self, 'set_anchor'):
              self.set_anchor(obj_.value)
        elif nodeName_ == 'formula':
            obj_ = docFormulaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'formula', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_formula'):
              self.add_formula(obj_.value)
            elif hasattr(self, 'set_formula'):
              self.set_formula(obj_.value)
        elif nodeName_ == 'ref':
            obj_ = docRefTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        elif nodeName_ == 'copy':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copy', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copy'):
              self.add_copy(obj_.value)
            elif hasattr(self, 'set_copy'):
              self.set_copy(obj_.value)
        elif nodeName_ == 'trademark':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'trademark', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_trademark'):
              self.add_trademark(obj_.value)
            elif hasattr(self, 'set_trademark'):
              self.set_trademark(obj_.value)
        elif nodeName_ == 'registered':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'registered', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_registered'):
              self.add_registered(obj_.value)
            elif hasattr(self, 'set_registered'):
              self.set_registered(obj_.value)
        elif nodeName_ == 'lsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lsquo'):
              self.add_lsquo(obj_.value)
            elif hasattr(self, 'set_lsquo'):
              self.set_lsquo(obj_.value)
        elif nodeName_ == 'rsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rsquo'):
              self.add_rsquo(obj_.value)
            elif hasattr(self, 'set_rsquo'):
              self.set_rsquo(obj_.value)
        elif nodeName_ == 'ldquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ldquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ldquo'):
              self.add_ldquo(obj_.value)
            elif hasattr(self, 'set_ldquo'):
              self.set_ldquo(obj_.value)
        elif nodeName_ == 'rdquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rdquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rdquo'):
              self.add_rdquo(obj_.value)
            elif hasattr(self, 'set_rdquo'):
              self.set_rdquo(obj_.value)
        elif nodeName_ == 'ndash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ndash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ndash'):
              self.add_ndash(obj_.value)
            elif hasattr(self, 'set_ndash'):
              self.set_ndash(obj_.value)
        elif nodeName_ == 'mdash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mdash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mdash'):
              self.add_mdash(obj_.value)
            elif hasattr(self, 'set_mdash'):
              self.set_mdash(obj_.value)
        elif nodeName_ == 'umlaut':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'umlaut', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_umlaut'):
              self.add_umlaut(obj_.value)
            elif hasattr(self, 'set_umlaut'):
              self.set_umlaut(obj_.value)
        elif nodeName_ == 'acute':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'acute', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_acute'):
              self.add_acute(obj_.value)
            elif hasattr(self, 'set_acute'):
              self.set_acute(obj_.value)
        elif nodeName_ == 'grave':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'grave', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_grave'):
              self.add_grave(obj_.value)
            elif hasattr(self, 'set_grave'):
              self.set_grave(obj_.value)
        elif nodeName_ == 'circ':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circ', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_circ'):
              self.add_circ(obj_.value)
            elif hasattr(self, 'set_circ'):
              self.set_circ(obj_.value)
        elif nodeName_ == 'slash':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'slash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_slash'):
              self.add_slash(obj_.value)
            elif hasattr(self, 'set_slash'):
              self.set_slash(obj_.value)
        elif nodeName_ == 'tilde':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tilde', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tilde'):
              self.add_tilde(obj_.value)
            elif hasattr(self, 'set_tilde'):
              self.set_tilde(obj_.value)
        elif nodeName_ == 'cedil':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cedil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_cedil'):
              self.add_cedil(obj_.value)
            elif hasattr(self, 'set_cedil'):
              self.set_cedil(obj_.value)
        elif nodeName_ == 'ring':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ring', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ring'):
              self.add_ring(obj_.value)
            elif hasattr(self, 'set_ring'):
              self.set_ring(obj_.value)
        elif nodeName_ == 'szlig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'szlig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_szlig'):
              self.add_szlig(obj_.value)
            elif hasattr(self, 'set_szlig'):
              self.set_szlig(obj_.value)
        elif nodeName_ == 'nonbreakablespace':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nonbreakablespace', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nonbreakablespace'):
              self.add_nonbreakablespace(obj_.value)
            elif hasattr(self, 'set_nonbreakablespace'):
              self.set_nonbreakablespace(obj_.value)
        elif nodeName_ == 'aelig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'aelig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_aelig'):
              self.add_aelig(obj_.value)
            elif hasattr(self, 'set_aelig'):
              self.set_aelig(obj_.value)
        elif nodeName_ == 'AElig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AElig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AElig'):
              self.add_AElig(obj_.value)
            elif hasattr(self, 'set_AElig'):
              self.set_AElig(obj_.value)
        elif nodeName_ == 'Gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Gamma'):
              self.add_Gamma(obj_.value)
            elif hasattr(self, 'set_Gamma'):
              self.set_Gamma(obj_.value)
        elif nodeName_ == 'Delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Delta'):
              self.add_Delta(obj_.value)
            elif hasattr(self, 'set_Delta'):
              self.set_Delta(obj_.value)
        elif nodeName_ == 'Theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Theta'):
              self.add_Theta(obj_.value)
            elif hasattr(self, 'set_Theta'):
              self.set_Theta(obj_.value)
        elif nodeName_ == 'Lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Lambda'):
              self.add_Lambda(obj_.value)
            elif hasattr(self, 'set_Lambda'):
              self.set_Lambda(obj_.value)
        elif nodeName_ == 'Xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Xi'):
              self.add_Xi(obj_.value)
            elif hasattr(self, 'set_Xi'):
              self.set_Xi(obj_.value)
        elif nodeName_ == 'Pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Pi'):
              self.add_Pi(obj_.value)
            elif hasattr(self, 'set_Pi'):
              self.set_Pi(obj_.value)
        elif nodeName_ == 'Sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Sigma'):
              self.add_Sigma(obj_.value)
            elif hasattr(self, 'set_Sigma'):
              self.set_Sigma(obj_.value)
        elif nodeName_ == 'Upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Upsilon'):
              self.add_Upsilon(obj_.value)
            elif hasattr(self, 'set_Upsilon'):
              self.set_Upsilon(obj_.value)
        elif nodeName_ == 'Phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Phi'):
              self.add_Phi(obj_.value)
            elif hasattr(self, 'set_Phi'):
              self.set_Phi(obj_.value)
        elif nodeName_ == 'Psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Psi'):
              self.add_Psi(obj_.value)
            elif hasattr(self, 'set_Psi'):
              self.set_Psi(obj_.value)
        elif nodeName_ == 'Omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Omega'):
              self.add_Omega(obj_.value)
            elif hasattr(self, 'set_Omega'):
              self.set_Omega(obj_.value)
        elif nodeName_ == 'alpha':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'alpha', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_alpha'):
              self.add_alpha(obj_.value)
            elif hasattr(self, 'set_alpha'):
              self.set_alpha(obj_.value)
        elif nodeName_ == 'beta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'beta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_beta'):
              self.add_beta(obj_.value)
            elif hasattr(self, 'set_beta'):
              self.set_beta(obj_.value)
        elif nodeName_ == 'gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_gamma'):
              self.add_gamma(obj_.value)
            elif hasattr(self, 'set_gamma'):
              self.set_gamma(obj_.value)
        elif nodeName_ == 'delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_delta'):
              self.add_delta(obj_.value)
            elif hasattr(self, 'set_delta'):
              self.set_delta(obj_.value)
        elif nodeName_ == 'epsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'epsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_epsilon'):
              self.add_epsilon(obj_.value)
            elif hasattr(self, 'set_epsilon'):
              self.set_epsilon(obj_.value)
        elif nodeName_ == 'zeta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'zeta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_zeta'):
              self.add_zeta(obj_.value)
            elif hasattr(self, 'set_zeta'):
              self.set_zeta(obj_.value)
        elif nodeName_ == 'eta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'eta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_eta'):
              self.add_eta(obj_.value)
            elif hasattr(self, 'set_eta'):
              self.set_eta(obj_.value)
        elif nodeName_ == 'theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_theta'):
              self.add_theta(obj_.value)
            elif hasattr(self, 'set_theta'):
              self.set_theta(obj_.value)
        elif nodeName_ == 'iota':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'iota', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_iota'):
              self.add_iota(obj_.value)
            elif hasattr(self, 'set_iota'):
              self.set_iota(obj_.value)
        elif nodeName_ == 'kappa':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'kappa', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_kappa'):
              self.add_kappa(obj_.value)
            elif hasattr(self, 'set_kappa'):
              self.set_kappa(obj_.value)
        elif nodeName_ == 'lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lambda'):
              self.add_lambda(obj_.value)
            elif hasattr(self, 'set_lambda'):
              self.set_lambda(obj_.value)
        elif nodeName_ == 'mu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mu'):
              self.add_mu(obj_.value)
            elif hasattr(self, 'set_mu'):
              self.set_mu(obj_.value)
        elif nodeName_ == 'nu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nu'):
              self.add_nu(obj_.value)
            elif hasattr(self, 'set_nu'):
              self.set_nu(obj_.value)
        elif nodeName_ == 'xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xi'):
              self.add_xi(obj_.value)
            elif hasattr(self, 'set_xi'):
              self.set_xi(obj_.value)
        elif nodeName_ == 'pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_pi'):
              self.add_pi(obj_.value)
            elif hasattr(self, 'set_pi'):
              self.set_pi(obj_.value)
        elif nodeName_ == 'rho':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rho', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rho'):
              self.add_rho(obj_.value)
            elif hasattr(self, 'set_rho'):
              self.set_rho(obj_.value)
        elif nodeName_ == 'sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigma'):
              self.add_sigma(obj_.value)
            elif hasattr(self, 'set_sigma'):
              self.set_sigma(obj_.value)
        elif nodeName_ == 'tau':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tau', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tau'):
              self.add_tau(obj_.value)
            elif hasattr(self, 'set_tau'):
              self.set_tau(obj_.value)
        elif nodeName_ == 'upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_upsilon'):
              self.add_upsilon(obj_.value)
            elif hasattr(self, 'set_upsilon'):
              self.set_upsilon(obj_.value)
        elif nodeName_ == 'phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_phi'):
              self.add_phi(obj_.value)
            elif hasattr(self, 'set_phi'):
              self.set_phi(obj_.value)
        elif nodeName_ == 'chi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'chi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_chi'):
              self.add_chi(obj_.value)
            elif hasattr(self, 'set_chi'):
              self.set_chi(obj_.value)
        elif nodeName_ == 'psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_psi'):
              self.add_psi(obj_.value)
            elif hasattr(self, 'set_psi'):
              self.set_psi(obj_.value)
        elif nodeName_ == 'omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_omega'):
              self.add_omega(obj_.value)
            elif hasattr(self, 'set_omega'):
              self.set_omega(obj_.value)
        elif nodeName_ == 'sigmaf':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigmaf', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigmaf'):
              self.add_sigmaf(obj_.value)
            elif hasattr(self, 'set_sigmaf'):
              self.set_sigmaf(obj_.value)
        elif nodeName_ == 'sect':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect'):
              self.add_sect(obj_.value)
            elif hasattr(self, 'set_sect'):
              self.set_sect(obj_.value)
        elif nodeName_ == 'deg':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'deg', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_deg'):
              self.add_deg(obj_.value)
            elif hasattr(self, 'set_deg'):
              self.set_deg(obj_.value)
        elif nodeName_ == 'prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prime'):
              self.add_prime(obj_.value)
            elif hasattr(self, 'set_prime'):
              self.set_prime(obj_.value)
        elif nodeName_ == 'Prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Prime'):
              self.add_Prime(obj_.value)
            elif hasattr(self, 'set_Prime'):
              self.set_Prime(obj_.value)
        elif nodeName_ == 'infin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'infin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_infin'):
              self.add_infin(obj_.value)
            elif hasattr(self, 'set_infin'):
              self.set_infin(obj_.value)
        elif nodeName_ == 'empty':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'empty', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_empty'):
              self.add_empty(obj_.value)
            elif hasattr(self, 'set_empty'):
              self.set_empty(obj_.value)
        elif nodeName_ == 'plusmn':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'plusmn', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_plusmn'):
              self.add_plusmn(obj_.value)
            elif hasattr(self, 'set_plusmn'):
              self.set_plusmn(obj_.value)
        elif nodeName_ == 'times':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'times', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_times'):
              self.add_times(obj_.value)
            elif hasattr(self, 'set_times'):
              self.set_times(obj_.value)
        elif nodeName_ == 'minus':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'minus', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_minus'):
              self.add_minus(obj_.value)
            elif hasattr(self, 'set_minus'):
              self.set_minus(obj_.value)
        elif nodeName_ == 'sdot':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sdot', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sdot'):
              self.add_sdot(obj_.value)
            elif hasattr(self, 'set_sdot'):
              self.set_sdot(obj_.value)
        elif nodeName_ == 'part':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'part', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_part'):
              self.add_part(obj_.value)
            elif hasattr(self, 'set_part'):
              self.set_part(obj_.value)
        elif nodeName_ == 'nabla':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nabla', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nabla'):
              self.add_nabla(obj_.value)
            elif hasattr(self, 'set_nabla'):
              self.set_nabla(obj_.value)
        elif nodeName_ == 'radic':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radic', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_radic'):
              self.add_radic(obj_.value)
            elif hasattr(self, 'set_radic'):
              self.set_radic(obj_.value)
        elif nodeName_ == 'perp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'perp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_perp'):
              self.add_perp(obj_.value)
            elif hasattr(self, 'set_perp'):
              self.set_perp(obj_.value)
        elif nodeName_ == 'sum':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sum', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sum'):
              self.add_sum(obj_.value)
            elif hasattr(self, 'set_sum'):
              self.set_sum(obj_.value)
        elif nodeName_ == 'int':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'int', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_int'):
              self.add_int(obj_.value)
            elif hasattr(self, 'set_int'):
              self.set_int(obj_.value)
        elif nodeName_ == 'prod':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prod'):
              self.add_prod(obj_.value)
            elif hasattr(self, 'set_prod'):
              self.set_prod(obj_.value)
        elif nodeName_ == 'sim':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sim', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sim'):
              self.add_sim(obj_.value)
            elif hasattr(self, 'set_sim'):
              self.set_sim(obj_.value)
        elif nodeName_ == 'asymp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'asymp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_asymp'):
              self.add_asymp(obj_.value)
            elif hasattr(self, 'set_asymp'):
              self.set_asymp(obj_.value)
        elif nodeName_ == 'ne':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ne', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ne'):
              self.add_ne(obj_.value)
            elif hasattr(self, 'set_ne'):
              self.set_ne(obj_.value)
        elif nodeName_ == 'equiv':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'equiv', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_equiv'):
              self.add_equiv(obj_.value)
            elif hasattr(self, 'set_equiv'):
              self.set_equiv(obj_.value)
        elif nodeName_ == 'prop':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prop', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prop'):
              self.add_prop(obj_.value)
            elif hasattr(self, 'set_prop'):
              self.set_prop(obj_.value)
        elif nodeName_ == 'le':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'le', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_le'):
              self.add_le(obj_.value)
            elif hasattr(self, 'set_le'):
              self.set_le(obj_.value)
        elif nodeName_ == 'ge':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ge', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ge'):
              self.add_ge(obj_.value)
            elif hasattr(self, 'set_ge'):
              self.set_ge(obj_.value)
        elif nodeName_ == 'larr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'larr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_larr'):
              self.add_larr(obj_.value)
            elif hasattr(self, 'set_larr'):
              self.set_larr(obj_.value)
        elif nodeName_ == 'rarr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rarr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rarr'):
              self.add_rarr(obj_.value)
            elif hasattr(self, 'set_rarr'):
              self.set_rarr(obj_.value)
        elif nodeName_ == 'isin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'isin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_isin'):
              self.add_isin(obj_.value)
            elif hasattr(self, 'set_isin'):
              self.set_isin(obj_.value)
        elif nodeName_ == 'notin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'notin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_notin'):
              self.add_notin(obj_.value)
            elif hasattr(self, 'set_notin'):
              self.set_notin(obj_.value)
        elif nodeName_ == 'lceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lceil'):
              self.add_lceil(obj_.value)
            elif hasattr(self, 'set_lceil'):
              self.set_lceil(obj_.value)
        elif nodeName_ == 'rceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rceil'):
              self.add_rceil(obj_.value)
            elif hasattr(self, 'set_rceil'):
              self.set_rceil(obj_.value)
        elif nodeName_ == 'lfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lfloor'):
              self.add_lfloor(obj_.value)
            elif hasattr(self, 'set_lfloor'):
              self.set_lfloor(obj_.value)
        elif nodeName_ == 'rfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rfloor'):
              self.add_rfloor(obj_.value)
            elif hasattr(self, 'set_rfloor'):
              self.set_rfloor(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docDotFileType


class docTocItemType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, ulink=None, bold=None, emphasis=None, computeroutput=None, subscript=None, superscript=None, center=None, small=None, htmlonly=None, manonly=None, xmlonly=None, rtfonly=None, latexonly=None, dot=None, anchor=None, formula=None, ref=None, copy=None, trademark=None, registered=None, lsquo=None, rsquo=None, ldquo=None, rdquo=None, ndash=None, mdash=None, umlaut=None, acute=None, grave=None, circ=None, slash=None, tilde=None, cedil=None, ring=None, szlig=None, nonbreakablespace=None, aelig=None, AElig=None, Gamma=None, Delta=None, Theta=None, Lambda=None, Xi=None, Pi=None, Sigma=None, Upsilon=None, Phi=None, Psi=None, Omega=None, alpha=None, beta=None, gamma=None, delta=None, epsilon=None, zeta=None, eta=None, theta=None, iota=None, kappa=None, lambda_=None, mu=None, nu=None, xi=None, pi=None, rho=None, sigma=None, tau=None, upsilon=None, phi=None, chi=None, psi=None, omega=None, sigmaf=None, sect=None, deg=None, prime=None, Prime=None, infin=None, empty=None, plusmn=None, times=None, minus=None, sdot=None, part=None, nabla=None, radic=None, perp=None, sum=None, int=None, prod=None, sim=None, asymp=None, ne=None, equiv=None, prop=None, le=None, ge=None, larr=None, rarr=None, isin=None, notin=None, lceil=None, rceil=None, lfloor=None, rfloor=None, valueOf_=None, mixedclass_=None, content_=None):
        self.id = _cast(None, id)
        if ulink is None:
            self.ulink = []
        else:
            self.ulink = ulink
        if bold is None:
            self.bold = []
        else:
            self.bold = bold
        if emphasis is None:
            self.emphasis = []
        else:
            self.emphasis = emphasis
        if computeroutput is None:
            self.computeroutput = []
        else:
            self.computeroutput = computeroutput
        if subscript is None:
            self.subscript = []
        else:
            self.subscript = subscript
        if superscript is None:
            self.superscript = []
        else:
            self.superscript = superscript
        if center is None:
            self.center = []
        else:
            self.center = center
        if small is None:
            self.small = []
        else:
            self.small = small
        if htmlonly is None:
            self.htmlonly = []
        else:
            self.htmlonly = htmlonly
        if manonly is None:
            self.manonly = []
        else:
            self.manonly = manonly
        if xmlonly is None:
            self.xmlonly = []
        else:
            self.xmlonly = xmlonly
        if rtfonly is None:
            self.rtfonly = []
        else:
            self.rtfonly = rtfonly
        if latexonly is None:
            self.latexonly = []
        else:
            self.latexonly = latexonly
        if dot is None:
            self.dot = []
        else:
            self.dot = dot
        if anchor is None:
            self.anchor = []
        else:
            self.anchor = anchor
        if formula is None:
            self.formula = []
        else:
            self.formula = formula
        if ref is None:
            self.ref = []
        else:
            self.ref = ref
        if copy is None:
            self.copy = []
        else:
            self.copy = copy
        if trademark is None:
            self.trademark = []
        else:
            self.trademark = trademark
        if registered is None:
            self.registered = []
        else:
            self.registered = registered
        if lsquo is None:
            self.lsquo = []
        else:
            self.lsquo = lsquo
        if rsquo is None:
            self.rsquo = []
        else:
            self.rsquo = rsquo
        if ldquo is None:
            self.ldquo = []
        else:
            self.ldquo = ldquo
        if rdquo is None:
            self.rdquo = []
        else:
            self.rdquo = rdquo
        if ndash is None:
            self.ndash = []
        else:
            self.ndash = ndash
        if mdash is None:
            self.mdash = []
        else:
            self.mdash = mdash
        if umlaut is None:
            self.umlaut = []
        else:
            self.umlaut = umlaut
        if acute is None:
            self.acute = []
        else:
            self.acute = acute
        if grave is None:
            self.grave = []
        else:
            self.grave = grave
        if circ is None:
            self.circ = []
        else:
            self.circ = circ
        if slash is None:
            self.slash = []
        else:
            self.slash = slash
        if tilde is None:
            self.tilde = []
        else:
            self.tilde = tilde
        if cedil is None:
            self.cedil = []
        else:
            self.cedil = cedil
        if ring is None:
            self.ring = []
        else:
            self.ring = ring
        if szlig is None:
            self.szlig = []
        else:
            self.szlig = szlig
        if nonbreakablespace is None:
            self.nonbreakablespace = []
        else:
            self.nonbreakablespace = nonbreakablespace
        if aelig is None:
            self.aelig = []
        else:
            self.aelig = aelig
        if AElig is None:
            self.AElig = []
        else:
            self.AElig = AElig
        if Gamma is None:
            self.Gamma = []
        else:
            self.Gamma = Gamma
        if Delta is None:
            self.Delta = []
        else:
            self.Delta = Delta
        if Theta is None:
            self.Theta = []
        else:
            self.Theta = Theta
        if Lambda is None:
            self.Lambda = []
        else:
            self.Lambda = Lambda
        if Xi is None:
            self.Xi = []
        else:
            self.Xi = Xi
        if Pi is None:
            self.Pi = []
        else:
            self.Pi = Pi
        if Sigma is None:
            self.Sigma = []
        else:
            self.Sigma = Sigma
        if Upsilon is None:
            self.Upsilon = []
        else:
            self.Upsilon = Upsilon
        if Phi is None:
            self.Phi = []
        else:
            self.Phi = Phi
        if Psi is None:
            self.Psi = []
        else:
            self.Psi = Psi
        if Omega is None:
            self.Omega = []
        else:
            self.Omega = Omega
        if alpha is None:
            self.alpha = []
        else:
            self.alpha = alpha
        if beta is None:
            self.beta = []
        else:
            self.beta = beta
        if gamma is None:
            self.gamma = []
        else:
            self.gamma = gamma
        if delta is None:
            self.delta = []
        else:
            self.delta = delta
        if epsilon is None:
            self.epsilon = []
        else:
            self.epsilon = epsilon
        if zeta is None:
            self.zeta = []
        else:
            self.zeta = zeta
        if eta is None:
            self.eta = []
        else:
            self.eta = eta
        if theta is None:
            self.theta = []
        else:
            self.theta = theta
        if iota is None:
            self.iota = []
        else:
            self.iota = iota
        if kappa is None:
            self.kappa = []
        else:
            self.kappa = kappa
        if lambda_ is None:
            self.lambda_ = []
        else:
            self.lambda_ = lambda_
        if mu is None:
            self.mu = []
        else:
            self.mu = mu
        if nu is None:
            self.nu = []
        else:
            self.nu = nu
        if xi is None:
            self.xi = []
        else:
            self.xi = xi
        if pi is None:
            self.pi = []
        else:
            self.pi = pi
        if rho is None:
            self.rho = []
        else:
            self.rho = rho
        if sigma is None:
            self.sigma = []
        else:
            self.sigma = sigma
        if tau is None:
            self.tau = []
        else:
            self.tau = tau
        if upsilon is None:
            self.upsilon = []
        else:
            self.upsilon = upsilon
        if phi is None:
            self.phi = []
        else:
            self.phi = phi
        if chi is None:
            self.chi = []
        else:
            self.chi = chi
        if psi is None:
            self.psi = []
        else:
            self.psi = psi
        if omega is None:
            self.omega = []
        else:
            self.omega = omega
        if sigmaf is None:
            self.sigmaf = []
        else:
            self.sigmaf = sigmaf
        if sect is None:
            self.sect = []
        else:
            self.sect = sect
        if deg is None:
            self.deg = []
        else:
            self.deg = deg
        if prime is None:
            self.prime = []
        else:
            self.prime = prime
        if Prime is None:
            self.Prime = []
        else:
            self.Prime = Prime
        if infin is None:
            self.infin = []
        else:
            self.infin = infin
        if empty is None:
            self.empty = []
        else:
            self.empty = empty
        if plusmn is None:
            self.plusmn = []
        else:
            self.plusmn = plusmn
        if times is None:
            self.times = []
        else:
            self.times = times
        if minus is None:
            self.minus = []
        else:
            self.minus = minus
        if sdot is None:
            self.sdot = []
        else:
            self.sdot = sdot
        if part is None:
            self.part = []
        else:
            self.part = part
        if nabla is None:
            self.nabla = []
        else:
            self.nabla = nabla
        if radic is None:
            self.radic = []
        else:
            self.radic = radic
        if perp is None:
            self.perp = []
        else:
            self.perp = perp
        if sum is None:
            self.sum = []
        else:
            self.sum = sum
        if int is None:
            self.int = []
        else:
            self.int = int
        if prod is None:
            self.prod = []
        else:
            self.prod = prod
        if sim is None:
            self.sim = []
        else:
            self.sim = sim
        if asymp is None:
            self.asymp = []
        else:
            self.asymp = asymp
        if ne is None:
            self.ne = []
        else:
            self.ne = ne
        if equiv is None:
            self.equiv = []
        else:
            self.equiv = equiv
        if prop is None:
            self.prop = []
        else:
            self.prop = prop
        if le is None:
            self.le = []
        else:
            self.le = le
        if ge is None:
            self.ge = []
        else:
            self.ge = ge
        if larr is None:
            self.larr = []
        else:
            self.larr = larr
        if rarr is None:
            self.rarr = []
        else:
            self.rarr = rarr
        if isin is None:
            self.isin = []
        else:
            self.isin = isin
        if notin is None:
            self.notin = []
        else:
            self.notin = notin
        if lceil is None:
            self.lceil = []
        else:
            self.lceil = lceil
        if rceil is None:
            self.rceil = []
        else:
            self.rceil = rceil
        if lfloor is None:
            self.lfloor = []
        else:
            self.lfloor = lfloor
        if rfloor is None:
            self.rfloor = []
        else:
            self.rfloor = rfloor
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docTocItemType.subclass:
            return docTocItemType.subclass(*args_, **kwargs_)
        else:
            return docTocItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ulink(self): return self.ulink
    def set_ulink(self, ulink): self.ulink = ulink
    def add_ulink(self, value): self.ulink.append(value)
    def insert_ulink(self, index, value): self.ulink[index] = value
    def get_bold(self): return self.bold
    def set_bold(self, bold): self.bold = bold
    def add_bold(self, value): self.bold.append(value)
    def insert_bold(self, index, value): self.bold[index] = value
    def get_emphasis(self): return self.emphasis
    def set_emphasis(self, emphasis): self.emphasis = emphasis
    def add_emphasis(self, value): self.emphasis.append(value)
    def insert_emphasis(self, index, value): self.emphasis[index] = value
    def get_computeroutput(self): return self.computeroutput
    def set_computeroutput(self, computeroutput): self.computeroutput = computeroutput
    def add_computeroutput(self, value): self.computeroutput.append(value)
    def insert_computeroutput(self, index, value): self.computeroutput[index] = value
    def get_subscript(self): return self.subscript
    def set_subscript(self, subscript): self.subscript = subscript
    def add_subscript(self, value): self.subscript.append(value)
    def insert_subscript(self, index, value): self.subscript[index] = value
    def get_superscript(self): return self.superscript
    def set_superscript(self, superscript): self.superscript = superscript
    def add_superscript(self, value): self.superscript.append(value)
    def insert_superscript(self, index, value): self.superscript[index] = value
    def get_center(self): return self.center
    def set_center(self, center): self.center = center
    def add_center(self, value): self.center.append(value)
    def insert_center(self, index, value): self.center[index] = value
    def get_small(self): return self.small
    def set_small(self, small): self.small = small
    def add_small(self, value): self.small.append(value)
    def insert_small(self, index, value): self.small[index] = value
    def get_htmlonly(self): return self.htmlonly
    def set_htmlonly(self, htmlonly): self.htmlonly = htmlonly
    def add_htmlonly(self, value): self.htmlonly.append(value)
    def insert_htmlonly(self, index, value): self.htmlonly[index] = value
    def get_manonly(self): return self.manonly
    def set_manonly(self, manonly): self.manonly = manonly
    def add_manonly(self, value): self.manonly.append(value)
    def insert_manonly(self, index, value): self.manonly[index] = value
    def get_xmlonly(self): return self.xmlonly
    def set_xmlonly(self, xmlonly): self.xmlonly = xmlonly
    def add_xmlonly(self, value): self.xmlonly.append(value)
    def insert_xmlonly(self, index, value): self.xmlonly[index] = value
    def get_rtfonly(self): return self.rtfonly
    def set_rtfonly(self, rtfonly): self.rtfonly = rtfonly
    def add_rtfonly(self, value): self.rtfonly.append(value)
    def insert_rtfonly(self, index, value): self.rtfonly[index] = value
    def get_latexonly(self): return self.latexonly
    def set_latexonly(self, latexonly): self.latexonly = latexonly
    def add_latexonly(self, value): self.latexonly.append(value)
    def insert_latexonly(self, index, value): self.latexonly[index] = value
    def get_dot(self): return self.dot
    def set_dot(self, dot): self.dot = dot
    def add_dot(self, value): self.dot.append(value)
    def insert_dot(self, index, value): self.dot[index] = value
    def get_anchor(self): return self.anchor
    def set_anchor(self, anchor): self.anchor = anchor
    def add_anchor(self, value): self.anchor.append(value)
    def insert_anchor(self, index, value): self.anchor[index] = value
    def get_formula(self): return self.formula
    def set_formula(self, formula): self.formula = formula
    def add_formula(self, value): self.formula.append(value)
    def insert_formula(self, index, value): self.formula[index] = value
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def add_ref(self, value): self.ref.append(value)
    def insert_ref(self, index, value): self.ref[index] = value
    def get_copy(self): return self.copy
    def set_copy(self, copy): self.copy = copy
    def add_copy(self, value): self.copy.append(value)
    def insert_copy(self, index, value): self.copy[index] = value
    def get_trademark(self): return self.trademark
    def set_trademark(self, trademark): self.trademark = trademark
    def add_trademark(self, value): self.trademark.append(value)
    def insert_trademark(self, index, value): self.trademark[index] = value
    def get_registered(self): return self.registered
    def set_registered(self, registered): self.registered = registered
    def add_registered(self, value): self.registered.append(value)
    def insert_registered(self, index, value): self.registered[index] = value
    def get_lsquo(self): return self.lsquo
    def set_lsquo(self, lsquo): self.lsquo = lsquo
    def add_lsquo(self, value): self.lsquo.append(value)
    def insert_lsquo(self, index, value): self.lsquo[index] = value
    def get_rsquo(self): return self.rsquo
    def set_rsquo(self, rsquo): self.rsquo = rsquo
    def add_rsquo(self, value): self.rsquo.append(value)
    def insert_rsquo(self, index, value): self.rsquo[index] = value
    def get_ldquo(self): return self.ldquo
    def set_ldquo(self, ldquo): self.ldquo = ldquo
    def add_ldquo(self, value): self.ldquo.append(value)
    def insert_ldquo(self, index, value): self.ldquo[index] = value
    def get_rdquo(self): return self.rdquo
    def set_rdquo(self, rdquo): self.rdquo = rdquo
    def add_rdquo(self, value): self.rdquo.append(value)
    def insert_rdquo(self, index, value): self.rdquo[index] = value
    def get_ndash(self): return self.ndash
    def set_ndash(self, ndash): self.ndash = ndash
    def add_ndash(self, value): self.ndash.append(value)
    def insert_ndash(self, index, value): self.ndash[index] = value
    def get_mdash(self): return self.mdash
    def set_mdash(self, mdash): self.mdash = mdash
    def add_mdash(self, value): self.mdash.append(value)
    def insert_mdash(self, index, value): self.mdash[index] = value
    def get_umlaut(self): return self.umlaut
    def set_umlaut(self, umlaut): self.umlaut = umlaut
    def add_umlaut(self, value): self.umlaut.append(value)
    def insert_umlaut(self, index, value): self.umlaut[index] = value
    def get_acute(self): return self.acute
    def set_acute(self, acute): self.acute = acute
    def add_acute(self, value): self.acute.append(value)
    def insert_acute(self, index, value): self.acute[index] = value
    def get_grave(self): return self.grave
    def set_grave(self, grave): self.grave = grave
    def add_grave(self, value): self.grave.append(value)
    def insert_grave(self, index, value): self.grave[index] = value
    def get_circ(self): return self.circ
    def set_circ(self, circ): self.circ = circ
    def add_circ(self, value): self.circ.append(value)
    def insert_circ(self, index, value): self.circ[index] = value
    def get_slash(self): return self.slash
    def set_slash(self, slash): self.slash = slash
    def add_slash(self, value): self.slash.append(value)
    def insert_slash(self, index, value): self.slash[index] = value
    def get_tilde(self): return self.tilde
    def set_tilde(self, tilde): self.tilde = tilde
    def add_tilde(self, value): self.tilde.append(value)
    def insert_tilde(self, index, value): self.tilde[index] = value
    def get_cedil(self): return self.cedil
    def set_cedil(self, cedil): self.cedil = cedil
    def add_cedil(self, value): self.cedil.append(value)
    def insert_cedil(self, index, value): self.cedil[index] = value
    def get_ring(self): return self.ring
    def set_ring(self, ring): self.ring = ring
    def add_ring(self, value): self.ring.append(value)
    def insert_ring(self, index, value): self.ring[index] = value
    def get_szlig(self): return self.szlig
    def set_szlig(self, szlig): self.szlig = szlig
    def add_szlig(self, value): self.szlig.append(value)
    def insert_szlig(self, index, value): self.szlig[index] = value
    def get_nonbreakablespace(self): return self.nonbreakablespace
    def set_nonbreakablespace(self, nonbreakablespace): self.nonbreakablespace = nonbreakablespace
    def add_nonbreakablespace(self, value): self.nonbreakablespace.append(value)
    def insert_nonbreakablespace(self, index, value): self.nonbreakablespace[index] = value
    def get_aelig(self): return self.aelig
    def set_aelig(self, aelig): self.aelig = aelig
    def add_aelig(self, value): self.aelig.append(value)
    def insert_aelig(self, index, value): self.aelig[index] = value
    def get_AElig(self): return self.AElig
    def set_AElig(self, AElig): self.AElig = AElig
    def add_AElig(self, value): self.AElig.append(value)
    def insert_AElig(self, index, value): self.AElig[index] = value
    def get_Gamma(self): return self.Gamma
    def set_Gamma(self, Gamma): self.Gamma = Gamma
    def add_Gamma(self, value): self.Gamma.append(value)
    def insert_Gamma(self, index, value): self.Gamma[index] = value
    def get_Delta(self): return self.Delta
    def set_Delta(self, Delta): self.Delta = Delta
    def add_Delta(self, value): self.Delta.append(value)
    def insert_Delta(self, index, value): self.Delta[index] = value
    def get_Theta(self): return self.Theta
    def set_Theta(self, Theta): self.Theta = Theta
    def add_Theta(self, value): self.Theta.append(value)
    def insert_Theta(self, index, value): self.Theta[index] = value
    def get_Lambda(self): return self.Lambda
    def set_Lambda(self, Lambda): self.Lambda = Lambda
    def add_Lambda(self, value): self.Lambda.append(value)
    def insert_Lambda(self, index, value): self.Lambda[index] = value
    def get_Xi(self): return self.Xi
    def set_Xi(self, Xi): self.Xi = Xi
    def add_Xi(self, value): self.Xi.append(value)
    def insert_Xi(self, index, value): self.Xi[index] = value
    def get_Pi(self): return self.Pi
    def set_Pi(self, Pi): self.Pi = Pi
    def add_Pi(self, value): self.Pi.append(value)
    def insert_Pi(self, index, value): self.Pi[index] = value
    def get_Sigma(self): return self.Sigma
    def set_Sigma(self, Sigma): self.Sigma = Sigma
    def add_Sigma(self, value): self.Sigma.append(value)
    def insert_Sigma(self, index, value): self.Sigma[index] = value
    def get_Upsilon(self): return self.Upsilon
    def set_Upsilon(self, Upsilon): self.Upsilon = Upsilon
    def add_Upsilon(self, value): self.Upsilon.append(value)
    def insert_Upsilon(self, index, value): self.Upsilon[index] = value
    def get_Phi(self): return self.Phi
    def set_Phi(self, Phi): self.Phi = Phi
    def add_Phi(self, value): self.Phi.append(value)
    def insert_Phi(self, index, value): self.Phi[index] = value
    def get_Psi(self): return self.Psi
    def set_Psi(self, Psi): self.Psi = Psi
    def add_Psi(self, value): self.Psi.append(value)
    def insert_Psi(self, index, value): self.Psi[index] = value
    def get_Omega(self): return self.Omega
    def set_Omega(self, Omega): self.Omega = Omega
    def add_Omega(self, value): self.Omega.append(value)
    def insert_Omega(self, index, value): self.Omega[index] = value
    def get_alpha(self): return self.alpha
    def set_alpha(self, alpha): self.alpha = alpha
    def add_alpha(self, value): self.alpha.append(value)
    def insert_alpha(self, index, value): self.alpha[index] = value
    def get_beta(self): return self.beta
    def set_beta(self, beta): self.beta = beta
    def add_beta(self, value): self.beta.append(value)
    def insert_beta(self, index, value): self.beta[index] = value
    def get_gamma(self): return self.gamma
    def set_gamma(self, gamma): self.gamma = gamma
    def add_gamma(self, value): self.gamma.append(value)
    def insert_gamma(self, index, value): self.gamma[index] = value
    def get_delta(self): return self.delta
    def set_delta(self, delta): self.delta = delta
    def add_delta(self, value): self.delta.append(value)
    def insert_delta(self, index, value): self.delta[index] = value
    def get_epsilon(self): return self.epsilon
    def set_epsilon(self, epsilon): self.epsilon = epsilon
    def add_epsilon(self, value): self.epsilon.append(value)
    def insert_epsilon(self, index, value): self.epsilon[index] = value
    def get_zeta(self): return self.zeta
    def set_zeta(self, zeta): self.zeta = zeta
    def add_zeta(self, value): self.zeta.append(value)
    def insert_zeta(self, index, value): self.zeta[index] = value
    def get_eta(self): return self.eta
    def set_eta(self, eta): self.eta = eta
    def add_eta(self, value): self.eta.append(value)
    def insert_eta(self, index, value): self.eta[index] = value
    def get_theta(self): return self.theta
    def set_theta(self, theta): self.theta = theta
    def add_theta(self, value): self.theta.append(value)
    def insert_theta(self, index, value): self.theta[index] = value
    def get_iota(self): return self.iota
    def set_iota(self, iota): self.iota = iota
    def add_iota(self, value): self.iota.append(value)
    def insert_iota(self, index, value): self.iota[index] = value
    def get_kappa(self): return self.kappa
    def set_kappa(self, kappa): self.kappa = kappa
    def add_kappa(self, value): self.kappa.append(value)
    def insert_kappa(self, index, value): self.kappa[index] = value
    def get_lambda(self): return self.lambda_
    def set_lambda(self, lambda_): self.lambda_ = lambda_
    def add_lambda(self, value): self.lambda_.append(value)
    def insert_lambda(self, index, value): self.lambda_[index] = value
    def get_mu(self): return self.mu
    def set_mu(self, mu): self.mu = mu
    def add_mu(self, value): self.mu.append(value)
    def insert_mu(self, index, value): self.mu[index] = value
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def add_nu(self, value): self.nu.append(value)
    def insert_nu(self, index, value): self.nu[index] = value
    def get_xi(self): return self.xi
    def set_xi(self, xi): self.xi = xi
    def add_xi(self, value): self.xi.append(value)
    def insert_xi(self, index, value): self.xi[index] = value
    def get_pi(self): return self.pi
    def set_pi(self, pi): self.pi = pi
    def add_pi(self, value): self.pi.append(value)
    def insert_pi(self, index, value): self.pi[index] = value
    def get_rho(self): return self.rho
    def set_rho(self, rho): self.rho = rho
    def add_rho(self, value): self.rho.append(value)
    def insert_rho(self, index, value): self.rho[index] = value
    def get_sigma(self): return self.sigma
    def set_sigma(self, sigma): self.sigma = sigma
    def add_sigma(self, value): self.sigma.append(value)
    def insert_sigma(self, index, value): self.sigma[index] = value
    def get_tau(self): return self.tau
    def set_tau(self, tau): self.tau = tau
    def add_tau(self, value): self.tau.append(value)
    def insert_tau(self, index, value): self.tau[index] = value
    def get_upsilon(self): return self.upsilon
    def set_upsilon(self, upsilon): self.upsilon = upsilon
    def add_upsilon(self, value): self.upsilon.append(value)
    def insert_upsilon(self, index, value): self.upsilon[index] = value
    def get_phi(self): return self.phi
    def set_phi(self, phi): self.phi = phi
    def add_phi(self, value): self.phi.append(value)
    def insert_phi(self, index, value): self.phi[index] = value
    def get_chi(self): return self.chi
    def set_chi(self, chi): self.chi = chi
    def add_chi(self, value): self.chi.append(value)
    def insert_chi(self, index, value): self.chi[index] = value
    def get_psi(self): return self.psi
    def set_psi(self, psi): self.psi = psi
    def add_psi(self, value): self.psi.append(value)
    def insert_psi(self, index, value): self.psi[index] = value
    def get_omega(self): return self.omega
    def set_omega(self, omega): self.omega = omega
    def add_omega(self, value): self.omega.append(value)
    def insert_omega(self, index, value): self.omega[index] = value
    def get_sigmaf(self): return self.sigmaf
    def set_sigmaf(self, sigmaf): self.sigmaf = sigmaf
    def add_sigmaf(self, value): self.sigmaf.append(value)
    def insert_sigmaf(self, index, value): self.sigmaf[index] = value
    def get_sect(self): return self.sect
    def set_sect(self, sect): self.sect = sect
    def add_sect(self, value): self.sect.append(value)
    def insert_sect(self, index, value): self.sect[index] = value
    def get_deg(self): return self.deg
    def set_deg(self, deg): self.deg = deg
    def add_deg(self, value): self.deg.append(value)
    def insert_deg(self, index, value): self.deg[index] = value
    def get_prime(self): return self.prime
    def set_prime(self, prime): self.prime = prime
    def add_prime(self, value): self.prime.append(value)
    def insert_prime(self, index, value): self.prime[index] = value
    def get_Prime(self): return self.Prime
    def set_Prime(self, Prime): self.Prime = Prime
    def add_Prime(self, value): self.Prime.append(value)
    def insert_Prime(self, index, value): self.Prime[index] = value
    def get_infin(self): return self.infin
    def set_infin(self, infin): self.infin = infin
    def add_infin(self, value): self.infin.append(value)
    def insert_infin(self, index, value): self.infin[index] = value
    def get_empty(self): return self.empty
    def set_empty(self, empty): self.empty = empty
    def add_empty(self, value): self.empty.append(value)
    def insert_empty(self, index, value): self.empty[index] = value
    def get_plusmn(self): return self.plusmn
    def set_plusmn(self, plusmn): self.plusmn = plusmn
    def add_plusmn(self, value): self.plusmn.append(value)
    def insert_plusmn(self, index, value): self.plusmn[index] = value
    def get_times(self): return self.times
    def set_times(self, times): self.times = times
    def add_times(self, value): self.times.append(value)
    def insert_times(self, index, value): self.times[index] = value
    def get_minus(self): return self.minus
    def set_minus(self, minus): self.minus = minus
    def add_minus(self, value): self.minus.append(value)
    def insert_minus(self, index, value): self.minus[index] = value
    def get_sdot(self): return self.sdot
    def set_sdot(self, sdot): self.sdot = sdot
    def add_sdot(self, value): self.sdot.append(value)
    def insert_sdot(self, index, value): self.sdot[index] = value
    def get_part(self): return self.part
    def set_part(self, part): self.part = part
    def add_part(self, value): self.part.append(value)
    def insert_part(self, index, value): self.part[index] = value
    def get_nabla(self): return self.nabla
    def set_nabla(self, nabla): self.nabla = nabla
    def add_nabla(self, value): self.nabla.append(value)
    def insert_nabla(self, index, value): self.nabla[index] = value
    def get_radic(self): return self.radic
    def set_radic(self, radic): self.radic = radic
    def add_radic(self, value): self.radic.append(value)
    def insert_radic(self, index, value): self.radic[index] = value
    def get_perp(self): return self.perp
    def set_perp(self, perp): self.perp = perp
    def add_perp(self, value): self.perp.append(value)
    def insert_perp(self, index, value): self.perp[index] = value
    def get_sum(self): return self.sum
    def set_sum(self, sum): self.sum = sum
    def add_sum(self, value): self.sum.append(value)
    def insert_sum(self, index, value): self.sum[index] = value
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def add_int(self, value): self.int.append(value)
    def insert_int(self, index, value): self.int[index] = value
    def get_prod(self): return self.prod
    def set_prod(self, prod): self.prod = prod
    def add_prod(self, value): self.prod.append(value)
    def insert_prod(self, index, value): self.prod[index] = value
    def get_sim(self): return self.sim
    def set_sim(self, sim): self.sim = sim
    def add_sim(self, value): self.sim.append(value)
    def insert_sim(self, index, value): self.sim[index] = value
    def get_asymp(self): return self.asymp
    def set_asymp(self, asymp): self.asymp = asymp
    def add_asymp(self, value): self.asymp.append(value)
    def insert_asymp(self, index, value): self.asymp[index] = value
    def get_ne(self): return self.ne
    def set_ne(self, ne): self.ne = ne
    def add_ne(self, value): self.ne.append(value)
    def insert_ne(self, index, value): self.ne[index] = value
    def get_equiv(self): return self.equiv
    def set_equiv(self, equiv): self.equiv = equiv
    def add_equiv(self, value): self.equiv.append(value)
    def insert_equiv(self, index, value): self.equiv[index] = value
    def get_prop(self): return self.prop
    def set_prop(self, prop): self.prop = prop
    def add_prop(self, value): self.prop.append(value)
    def insert_prop(self, index, value): self.prop[index] = value
    def get_le(self): return self.le
    def set_le(self, le): self.le = le
    def add_le(self, value): self.le.append(value)
    def insert_le(self, index, value): self.le[index] = value
    def get_ge(self): return self.ge
    def set_ge(self, ge): self.ge = ge
    def add_ge(self, value): self.ge.append(value)
    def insert_ge(self, index, value): self.ge[index] = value
    def get_larr(self): return self.larr
    def set_larr(self, larr): self.larr = larr
    def add_larr(self, value): self.larr.append(value)
    def insert_larr(self, index, value): self.larr[index] = value
    def get_rarr(self): return self.rarr
    def set_rarr(self, rarr): self.rarr = rarr
    def add_rarr(self, value): self.rarr.append(value)
    def insert_rarr(self, index, value): self.rarr[index] = value
    def get_isin(self): return self.isin
    def set_isin(self, isin): self.isin = isin
    def add_isin(self, value): self.isin.append(value)
    def insert_isin(self, index, value): self.isin[index] = value
    def get_notin(self): return self.notin
    def set_notin(self, notin): self.notin = notin
    def add_notin(self, value): self.notin.append(value)
    def insert_notin(self, index, value): self.notin[index] = value
    def get_lceil(self): return self.lceil
    def set_lceil(self, lceil): self.lceil = lceil
    def add_lceil(self, value): self.lceil.append(value)
    def insert_lceil(self, index, value): self.lceil[index] = value
    def get_rceil(self): return self.rceil
    def set_rceil(self, rceil): self.rceil = rceil
    def add_rceil(self, value): self.rceil.append(value)
    def insert_rceil(self, index, value): self.rceil[index] = value
    def get_lfloor(self): return self.lfloor
    def set_lfloor(self, lfloor): self.lfloor = lfloor
    def add_lfloor(self, value): self.lfloor.append(value)
    def insert_lfloor(self, index, value): self.lfloor[index] = value
    def get_rfloor(self): return self.rfloor
    def set_rfloor(self, rfloor): self.rfloor = rfloor
    def add_rfloor(self, value): self.rfloor.append(value)
    def insert_rfloor(self, index, value): self.rfloor[index] = value
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ulink or
            self.bold or
            self.emphasis or
            self.computeroutput or
            self.subscript or
            self.superscript or
            self.center or
            self.small or
            self.htmlonly or
            self.manonly or
            self.xmlonly or
            self.rtfonly or
            self.latexonly or
            self.dot or
            self.anchor or
            self.formula or
            self.ref or
            self.copy or
            self.trademark or
            self.registered or
            self.lsquo or
            self.rsquo or
            self.ldquo or
            self.rdquo or
            self.ndash or
            self.mdash or
            self.umlaut or
            self.acute or
            self.grave or
            self.circ or
            self.slash or
            self.tilde or
            self.cedil or
            self.ring or
            self.szlig or
            self.nonbreakablespace or
            self.aelig or
            self.AElig or
            self.Gamma or
            self.Delta or
            self.Theta or
            self.Lambda or
            self.Xi or
            self.Pi or
            self.Sigma or
            self.Upsilon or
            self.Phi or
            self.Psi or
            self.Omega or
            self.alpha or
            self.beta or
            self.gamma or
            self.delta or
            self.epsilon or
            self.zeta or
            self.eta or
            self.theta or
            self.iota or
            self.kappa or
            self.lambda_ or
            self.mu or
            self.nu or
            self.xi or
            self.pi or
            self.rho or
            self.sigma or
            self.tau or
            self.upsilon or
            self.phi or
            self.chi or
            self.psi or
            self.omega or
            self.sigmaf or
            self.sect or
            self.deg or
            self.prime or
            self.Prime or
            self.infin or
            self.empty or
            self.plusmn or
            self.times or
            self.minus or
            self.sdot or
            self.part or
            self.nabla or
            self.radic or
            self.perp or
            self.sum or
            self.int or
            self.prod or
            self.sim or
            self.asymp or
            self.ne or
            self.equiv or
            self.prop or
            self.le or
            self.ge or
            self.larr or
            self.rarr or
            self.isin or
            self.notin or
            self.lceil or
            self.rceil or
            self.lfloor or
            self.rfloor or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docTocItemType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docTocItemType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docTocItemType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docTocItemType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docTocItemType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ulink':
            obj_ = docURLLink.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ulink', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ulink'):
              self.add_ulink(obj_.value)
            elif hasattr(self, 'set_ulink'):
              self.set_ulink(obj_.value)
        elif nodeName_ == 'bold':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'bold', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_bold'):
              self.add_bold(obj_.value)
            elif hasattr(self, 'set_bold'):
              self.set_bold(obj_.value)
        elif nodeName_ == 'emphasis':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'emphasis', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_emphasis'):
              self.add_emphasis(obj_.value)
            elif hasattr(self, 'set_emphasis'):
              self.set_emphasis(obj_.value)
        elif nodeName_ == 'computeroutput':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'computeroutput', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_computeroutput'):
              self.add_computeroutput(obj_.value)
            elif hasattr(self, 'set_computeroutput'):
              self.set_computeroutput(obj_.value)
        elif nodeName_ == 'subscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'subscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_subscript'):
              self.add_subscript(obj_.value)
            elif hasattr(self, 'set_subscript'):
              self.set_subscript(obj_.value)
        elif nodeName_ == 'superscript':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'superscript', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_superscript'):
              self.add_superscript(obj_.value)
            elif hasattr(self, 'set_superscript'):
              self.set_superscript(obj_.value)
        elif nodeName_ == 'center':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'center', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_center'):
              self.add_center(obj_.value)
            elif hasattr(self, 'set_center'):
              self.set_center(obj_.value)
        elif nodeName_ == 'small':
            obj_ = docMarkupType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'small', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_small'):
              self.add_small(obj_.value)
            elif hasattr(self, 'set_small'):
              self.set_small(obj_.value)
        elif nodeName_ == 'htmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'htmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'manonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'manonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'xmlonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'xmlonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'rtfonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'rtfonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'latexonly' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'latexonly', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'dot' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'dot', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'anchor':
            obj_ = docAnchorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'anchor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_anchor'):
              self.add_anchor(obj_.value)
            elif hasattr(self, 'set_anchor'):
              self.set_anchor(obj_.value)
        elif nodeName_ == 'formula':
            obj_ = docFormulaType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'formula', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_formula'):
              self.add_formula(obj_.value)
            elif hasattr(self, 'set_formula'):
              self.set_formula(obj_.value)
        elif nodeName_ == 'ref':
            obj_ = docRefTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        elif nodeName_ == 'copy':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'copy', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_copy'):
              self.add_copy(obj_.value)
            elif hasattr(self, 'set_copy'):
              self.set_copy(obj_.value)
        elif nodeName_ == 'trademark':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'trademark', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_trademark'):
              self.add_trademark(obj_.value)
            elif hasattr(self, 'set_trademark'):
              self.set_trademark(obj_.value)
        elif nodeName_ == 'registered':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'registered', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_registered'):
              self.add_registered(obj_.value)
            elif hasattr(self, 'set_registered'):
              self.set_registered(obj_.value)
        elif nodeName_ == 'lsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lsquo'):
              self.add_lsquo(obj_.value)
            elif hasattr(self, 'set_lsquo'):
              self.set_lsquo(obj_.value)
        elif nodeName_ == 'rsquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rsquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rsquo'):
              self.add_rsquo(obj_.value)
            elif hasattr(self, 'set_rsquo'):
              self.set_rsquo(obj_.value)
        elif nodeName_ == 'ldquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ldquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ldquo'):
              self.add_ldquo(obj_.value)
            elif hasattr(self, 'set_ldquo'):
              self.set_ldquo(obj_.value)
        elif nodeName_ == 'rdquo':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rdquo', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rdquo'):
              self.add_rdquo(obj_.value)
            elif hasattr(self, 'set_rdquo'):
              self.set_rdquo(obj_.value)
        elif nodeName_ == 'ndash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ndash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ndash'):
              self.add_ndash(obj_.value)
            elif hasattr(self, 'set_ndash'):
              self.set_ndash(obj_.value)
        elif nodeName_ == 'mdash':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mdash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mdash'):
              self.add_mdash(obj_.value)
            elif hasattr(self, 'set_mdash'):
              self.set_mdash(obj_.value)
        elif nodeName_ == 'umlaut':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'umlaut', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_umlaut'):
              self.add_umlaut(obj_.value)
            elif hasattr(self, 'set_umlaut'):
              self.set_umlaut(obj_.value)
        elif nodeName_ == 'acute':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'acute', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_acute'):
              self.add_acute(obj_.value)
            elif hasattr(self, 'set_acute'):
              self.set_acute(obj_.value)
        elif nodeName_ == 'grave':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'grave', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_grave'):
              self.add_grave(obj_.value)
            elif hasattr(self, 'set_grave'):
              self.set_grave(obj_.value)
        elif nodeName_ == 'circ':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'circ', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_circ'):
              self.add_circ(obj_.value)
            elif hasattr(self, 'set_circ'):
              self.set_circ(obj_.value)
        elif nodeName_ == 'slash':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'slash', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_slash'):
              self.add_slash(obj_.value)
            elif hasattr(self, 'set_slash'):
              self.set_slash(obj_.value)
        elif nodeName_ == 'tilde':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tilde', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tilde'):
              self.add_tilde(obj_.value)
            elif hasattr(self, 'set_tilde'):
              self.set_tilde(obj_.value)
        elif nodeName_ == 'cedil':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'cedil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_cedil'):
              self.add_cedil(obj_.value)
            elif hasattr(self, 'set_cedil'):
              self.set_cedil(obj_.value)
        elif nodeName_ == 'ring':
            obj_ = docCharType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ring', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ring'):
              self.add_ring(obj_.value)
            elif hasattr(self, 'set_ring'):
              self.set_ring(obj_.value)
        elif nodeName_ == 'szlig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'szlig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_szlig'):
              self.add_szlig(obj_.value)
            elif hasattr(self, 'set_szlig'):
              self.set_szlig(obj_.value)
        elif nodeName_ == 'nonbreakablespace':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nonbreakablespace', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nonbreakablespace'):
              self.add_nonbreakablespace(obj_.value)
            elif hasattr(self, 'set_nonbreakablespace'):
              self.set_nonbreakablespace(obj_.value)
        elif nodeName_ == 'aelig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'aelig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_aelig'):
              self.add_aelig(obj_.value)
            elif hasattr(self, 'set_aelig'):
              self.set_aelig(obj_.value)
        elif nodeName_ == 'AElig':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AElig', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AElig'):
              self.add_AElig(obj_.value)
            elif hasattr(self, 'set_AElig'):
              self.set_AElig(obj_.value)
        elif nodeName_ == 'Gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Gamma'):
              self.add_Gamma(obj_.value)
            elif hasattr(self, 'set_Gamma'):
              self.set_Gamma(obj_.value)
        elif nodeName_ == 'Delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Delta'):
              self.add_Delta(obj_.value)
            elif hasattr(self, 'set_Delta'):
              self.set_Delta(obj_.value)
        elif nodeName_ == 'Theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Theta'):
              self.add_Theta(obj_.value)
            elif hasattr(self, 'set_Theta'):
              self.set_Theta(obj_.value)
        elif nodeName_ == 'Lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Lambda'):
              self.add_Lambda(obj_.value)
            elif hasattr(self, 'set_Lambda'):
              self.set_Lambda(obj_.value)
        elif nodeName_ == 'Xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Xi'):
              self.add_Xi(obj_.value)
            elif hasattr(self, 'set_Xi'):
              self.set_Xi(obj_.value)
        elif nodeName_ == 'Pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Pi'):
              self.add_Pi(obj_.value)
            elif hasattr(self, 'set_Pi'):
              self.set_Pi(obj_.value)
        elif nodeName_ == 'Sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Sigma'):
              self.add_Sigma(obj_.value)
            elif hasattr(self, 'set_Sigma'):
              self.set_Sigma(obj_.value)
        elif nodeName_ == 'Upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Upsilon'):
              self.add_Upsilon(obj_.value)
            elif hasattr(self, 'set_Upsilon'):
              self.set_Upsilon(obj_.value)
        elif nodeName_ == 'Phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Phi'):
              self.add_Phi(obj_.value)
            elif hasattr(self, 'set_Phi'):
              self.set_Phi(obj_.value)
        elif nodeName_ == 'Psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Psi'):
              self.add_Psi(obj_.value)
            elif hasattr(self, 'set_Psi'):
              self.set_Psi(obj_.value)
        elif nodeName_ == 'Omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Omega'):
              self.add_Omega(obj_.value)
            elif hasattr(self, 'set_Omega'):
              self.set_Omega(obj_.value)
        elif nodeName_ == 'alpha':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'alpha', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_alpha'):
              self.add_alpha(obj_.value)
            elif hasattr(self, 'set_alpha'):
              self.set_alpha(obj_.value)
        elif nodeName_ == 'beta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'beta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_beta'):
              self.add_beta(obj_.value)
            elif hasattr(self, 'set_beta'):
              self.set_beta(obj_.value)
        elif nodeName_ == 'gamma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'gamma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_gamma'):
              self.add_gamma(obj_.value)
            elif hasattr(self, 'set_gamma'):
              self.set_gamma(obj_.value)
        elif nodeName_ == 'delta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'delta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_delta'):
              self.add_delta(obj_.value)
            elif hasattr(self, 'set_delta'):
              self.set_delta(obj_.value)
        elif nodeName_ == 'epsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'epsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_epsilon'):
              self.add_epsilon(obj_.value)
            elif hasattr(self, 'set_epsilon'):
              self.set_epsilon(obj_.value)
        elif nodeName_ == 'zeta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'zeta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_zeta'):
              self.add_zeta(obj_.value)
            elif hasattr(self, 'set_zeta'):
              self.set_zeta(obj_.value)
        elif nodeName_ == 'eta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'eta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_eta'):
              self.add_eta(obj_.value)
            elif hasattr(self, 'set_eta'):
              self.set_eta(obj_.value)
        elif nodeName_ == 'theta':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'theta', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_theta'):
              self.add_theta(obj_.value)
            elif hasattr(self, 'set_theta'):
              self.set_theta(obj_.value)
        elif nodeName_ == 'iota':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'iota', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_iota'):
              self.add_iota(obj_.value)
            elif hasattr(self, 'set_iota'):
              self.set_iota(obj_.value)
        elif nodeName_ == 'kappa':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'kappa', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_kappa'):
              self.add_kappa(obj_.value)
            elif hasattr(self, 'set_kappa'):
              self.set_kappa(obj_.value)
        elif nodeName_ == 'lambda':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lambda', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lambda'):
              self.add_lambda(obj_.value)
            elif hasattr(self, 'set_lambda'):
              self.set_lambda(obj_.value)
        elif nodeName_ == 'mu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'mu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_mu'):
              self.add_mu(obj_.value)
            elif hasattr(self, 'set_mu'):
              self.set_mu(obj_.value)
        elif nodeName_ == 'nu':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nu', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nu'):
              self.add_nu(obj_.value)
            elif hasattr(self, 'set_nu'):
              self.set_nu(obj_.value)
        elif nodeName_ == 'xi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'xi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_xi'):
              self.add_xi(obj_.value)
            elif hasattr(self, 'set_xi'):
              self.set_xi(obj_.value)
        elif nodeName_ == 'pi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'pi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_pi'):
              self.add_pi(obj_.value)
            elif hasattr(self, 'set_pi'):
              self.set_pi(obj_.value)
        elif nodeName_ == 'rho':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rho', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rho'):
              self.add_rho(obj_.value)
            elif hasattr(self, 'set_rho'):
              self.set_rho(obj_.value)
        elif nodeName_ == 'sigma':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigma', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigma'):
              self.add_sigma(obj_.value)
            elif hasattr(self, 'set_sigma'):
              self.set_sigma(obj_.value)
        elif nodeName_ == 'tau':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'tau', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_tau'):
              self.add_tau(obj_.value)
            elif hasattr(self, 'set_tau'):
              self.set_tau(obj_.value)
        elif nodeName_ == 'upsilon':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'upsilon', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_upsilon'):
              self.add_upsilon(obj_.value)
            elif hasattr(self, 'set_upsilon'):
              self.set_upsilon(obj_.value)
        elif nodeName_ == 'phi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'phi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_phi'):
              self.add_phi(obj_.value)
            elif hasattr(self, 'set_phi'):
              self.set_phi(obj_.value)
        elif nodeName_ == 'chi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'chi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_chi'):
              self.add_chi(obj_.value)
            elif hasattr(self, 'set_chi'):
              self.set_chi(obj_.value)
        elif nodeName_ == 'psi':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'psi', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_psi'):
              self.add_psi(obj_.value)
            elif hasattr(self, 'set_psi'):
              self.set_psi(obj_.value)
        elif nodeName_ == 'omega':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'omega', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_omega'):
              self.add_omega(obj_.value)
            elif hasattr(self, 'set_omega'):
              self.set_omega(obj_.value)
        elif nodeName_ == 'sigmaf':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sigmaf', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sigmaf'):
              self.add_sigmaf(obj_.value)
            elif hasattr(self, 'set_sigmaf'):
              self.set_sigmaf(obj_.value)
        elif nodeName_ == 'sect':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sect', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sect'):
              self.add_sect(obj_.value)
            elif hasattr(self, 'set_sect'):
              self.set_sect(obj_.value)
        elif nodeName_ == 'deg':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'deg', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_deg'):
              self.add_deg(obj_.value)
            elif hasattr(self, 'set_deg'):
              self.set_deg(obj_.value)
        elif nodeName_ == 'prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prime'):
              self.add_prime(obj_.value)
            elif hasattr(self, 'set_prime'):
              self.set_prime(obj_.value)
        elif nodeName_ == 'Prime':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Prime', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Prime'):
              self.add_Prime(obj_.value)
            elif hasattr(self, 'set_Prime'):
              self.set_Prime(obj_.value)
        elif nodeName_ == 'infin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'infin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_infin'):
              self.add_infin(obj_.value)
            elif hasattr(self, 'set_infin'):
              self.set_infin(obj_.value)
        elif nodeName_ == 'empty':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'empty', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_empty'):
              self.add_empty(obj_.value)
            elif hasattr(self, 'set_empty'):
              self.set_empty(obj_.value)
        elif nodeName_ == 'plusmn':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'plusmn', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_plusmn'):
              self.add_plusmn(obj_.value)
            elif hasattr(self, 'set_plusmn'):
              self.set_plusmn(obj_.value)
        elif nodeName_ == 'times':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'times', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_times'):
              self.add_times(obj_.value)
            elif hasattr(self, 'set_times'):
              self.set_times(obj_.value)
        elif nodeName_ == 'minus':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'minus', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_minus'):
              self.add_minus(obj_.value)
            elif hasattr(self, 'set_minus'):
              self.set_minus(obj_.value)
        elif nodeName_ == 'sdot':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sdot', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sdot'):
              self.add_sdot(obj_.value)
            elif hasattr(self, 'set_sdot'):
              self.set_sdot(obj_.value)
        elif nodeName_ == 'part':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'part', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_part'):
              self.add_part(obj_.value)
            elif hasattr(self, 'set_part'):
              self.set_part(obj_.value)
        elif nodeName_ == 'nabla':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'nabla', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_nabla'):
              self.add_nabla(obj_.value)
            elif hasattr(self, 'set_nabla'):
              self.set_nabla(obj_.value)
        elif nodeName_ == 'radic':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'radic', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_radic'):
              self.add_radic(obj_.value)
            elif hasattr(self, 'set_radic'):
              self.set_radic(obj_.value)
        elif nodeName_ == 'perp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'perp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_perp'):
              self.add_perp(obj_.value)
            elif hasattr(self, 'set_perp'):
              self.set_perp(obj_.value)
        elif nodeName_ == 'sum':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sum', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sum'):
              self.add_sum(obj_.value)
            elif hasattr(self, 'set_sum'):
              self.set_sum(obj_.value)
        elif nodeName_ == 'int':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'int', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_int'):
              self.add_int(obj_.value)
            elif hasattr(self, 'set_int'):
              self.set_int(obj_.value)
        elif nodeName_ == 'prod':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prod'):
              self.add_prod(obj_.value)
            elif hasattr(self, 'set_prod'):
              self.set_prod(obj_.value)
        elif nodeName_ == 'sim':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'sim', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_sim'):
              self.add_sim(obj_.value)
            elif hasattr(self, 'set_sim'):
              self.set_sim(obj_.value)
        elif nodeName_ == 'asymp':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'asymp', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_asymp'):
              self.add_asymp(obj_.value)
            elif hasattr(self, 'set_asymp'):
              self.set_asymp(obj_.value)
        elif nodeName_ == 'ne':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ne', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ne'):
              self.add_ne(obj_.value)
            elif hasattr(self, 'set_ne'):
              self.set_ne(obj_.value)
        elif nodeName_ == 'equiv':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'equiv', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_equiv'):
              self.add_equiv(obj_.value)
            elif hasattr(self, 'set_equiv'):
              self.set_equiv(obj_.value)
        elif nodeName_ == 'prop':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'prop', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_prop'):
              self.add_prop(obj_.value)
            elif hasattr(self, 'set_prop'):
              self.set_prop(obj_.value)
        elif nodeName_ == 'le':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'le', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_le'):
              self.add_le(obj_.value)
            elif hasattr(self, 'set_le'):
              self.set_le(obj_.value)
        elif nodeName_ == 'ge':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ge', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ge'):
              self.add_ge(obj_.value)
            elif hasattr(self, 'set_ge'):
              self.set_ge(obj_.value)
        elif nodeName_ == 'larr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'larr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_larr'):
              self.add_larr(obj_.value)
            elif hasattr(self, 'set_larr'):
              self.set_larr(obj_.value)
        elif nodeName_ == 'rarr':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rarr', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rarr'):
              self.add_rarr(obj_.value)
            elif hasattr(self, 'set_rarr'):
              self.set_rarr(obj_.value)
        elif nodeName_ == 'isin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'isin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_isin'):
              self.add_isin(obj_.value)
            elif hasattr(self, 'set_isin'):
              self.set_isin(obj_.value)
        elif nodeName_ == 'notin':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'notin', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_notin'):
              self.add_notin(obj_.value)
            elif hasattr(self, 'set_notin'):
              self.set_notin(obj_.value)
        elif nodeName_ == 'lceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lceil'):
              self.add_lceil(obj_.value)
            elif hasattr(self, 'set_lceil'):
              self.set_lceil(obj_.value)
        elif nodeName_ == 'rceil':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rceil', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rceil'):
              self.add_rceil(obj_.value)
            elif hasattr(self, 'set_rceil'):
              self.set_rceil(obj_.value)
        elif nodeName_ == 'lfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'lfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_lfloor'):
              self.add_lfloor(obj_.value)
            elif hasattr(self, 'set_lfloor'):
              self.set_lfloor(obj_.value)
        elif nodeName_ == 'rfloor':
            obj_ = docEmptyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'rfloor', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_rfloor'):
              self.add_rfloor(obj_.value)
            elif hasattr(self, 'set_rfloor'):
              self.set_rfloor(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docTocItemType


class docTocListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tocitem=None):
        if tocitem is None:
            self.tocitem = []
        else:
            self.tocitem = tocitem
    def factory(*args_, **kwargs_):
        if docTocListType.subclass:
            return docTocListType.subclass(*args_, **kwargs_)
        else:
            return docTocListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tocitem(self): return self.tocitem
    def set_tocitem(self, tocitem): self.tocitem = tocitem
    def add_tocitem(self, value): self.tocitem.append(value)
    def insert_tocitem(self, index, value): self.tocitem[index] = value
    def hasContent_(self):
        if (
            self.tocitem
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docTocListType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docTocListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docTocListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docTocListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for tocitem_ in self.tocitem:
            tocitem_.export(outfile, level, namespace_, name_='tocitem', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docTocListType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('tocitem=[\n')
        level += 1
        for tocitem_ in self.tocitem:
            showIndent(outfile, level)
            outfile.write('model_.docTocItemType(\n')
            tocitem_.exportLiteral(outfile, level, name_='docTocItemType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tocitem':
            obj_ = docTocItemType.factory()
            obj_.build(child_)
            self.tocitem.append(obj_)
# end class docTocListType


class docLanguageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, langid=None, para=None):
        self.langid = _cast(None, langid)
        if para is None:
            self.para = []
        else:
            self.para = para
    def factory(*args_, **kwargs_):
        if docLanguageType.subclass:
            return docLanguageType.subclass(*args_, **kwargs_)
        else:
            return docLanguageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_langid(self): return self.langid
    def set_langid(self, langid): self.langid = langid
    def hasContent_(self):
        if (
            self.para
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docLanguageType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docLanguageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docLanguageType'):
        if self.langid is not None and 'langid' not in already_processed:
            already_processed.add('langid')
            outfile.write(' langid=%s' % (self.gds_format_string(quote_attrib(self.langid).encode(ExternalEncoding), input_name='langid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docLanguageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for para_ in self.para:
            para_.export(outfile, level, namespace_, name_='para', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docLanguageType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.langid is not None and 'langid' not in already_processed:
            already_processed.add('langid')
            showIndent(outfile, level)
            outfile.write('langid="%s",\n' % (self.langid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('para=[\n')
        level += 1
        for para_ in self.para:
            showIndent(outfile, level)
            outfile.write('model_.docParaType(\n')
            para_.exportLiteral(outfile, level, name_='docParaType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('langid', node)
        if value is not None and 'langid' not in already_processed:
            already_processed.add('langid')
            self.langid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            self.para.append(obj_)
# end class docLanguageType


class docParamListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, kind=None, parameteritem=None):
        self.kind = _cast(None, kind)
        if parameteritem is None:
            self.parameteritem = []
        else:
            self.parameteritem = parameteritem
    def factory(*args_, **kwargs_):
        if docParamListType.subclass:
            return docParamListType.subclass(*args_, **kwargs_)
        else:
            return docParamListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_parameteritem(self): return self.parameteritem
    def set_parameteritem(self, parameteritem): self.parameteritem = parameteritem
    def add_parameteritem(self, value): self.parameteritem.append(value)
    def insert_parameteritem(self, index, value): self.parameteritem[index] = value
    def get_kind(self): return self.kind
    def set_kind(self, kind): self.kind = kind
    def validate_DoxParamListKind(self, value):
        # Validate type DoxParamListKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.parameteritem
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docParamListType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docParamListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docParamListType'):
        if self.kind is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            outfile.write(' kind=%s' % (quote_attrib(self.kind), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docParamListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for parameteritem_ in self.parameteritem:
            parameteritem_.export(outfile, level, namespace_, name_='parameteritem', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docParamListType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.kind is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            showIndent(outfile, level)
            outfile.write('kind="%s",\n' % (self.kind,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('parameteritem=[\n')
        level += 1
        for parameteritem_ in self.parameteritem:
            showIndent(outfile, level)
            outfile.write('model_.docParamListItem(\n')
            parameteritem_.exportLiteral(outfile, level, name_='docParamListItem')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('kind', node)
        if value is not None and 'kind' not in already_processed:
            already_processed.add('kind')
            self.kind = value
            self.validate_DoxParamListKind(self.kind)    # validate type DoxParamListKind
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'parameteritem':
            obj_ = docParamListItem.factory()
            obj_.build(child_)
            self.parameteritem.append(obj_)
# end class docParamListType


class docParamListItem(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, parameternamelist=None, parameterdescription=None):
        if parameternamelist is None:
            self.parameternamelist = []
        else:
            self.parameternamelist = parameternamelist
        self.parameterdescription = parameterdescription
    def factory(*args_, **kwargs_):
        if docParamListItem.subclass:
            return docParamListItem.subclass(*args_, **kwargs_)
        else:
            return docParamListItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_parameternamelist(self): return self.parameternamelist
    def set_parameternamelist(self, parameternamelist): self.parameternamelist = parameternamelist
    def add_parameternamelist(self, value): self.parameternamelist.append(value)
    def insert_parameternamelist(self, index, value): self.parameternamelist[index] = value
    def get_parameterdescription(self): return self.parameterdescription
    def set_parameterdescription(self, parameterdescription): self.parameterdescription = parameterdescription
    def hasContent_(self):
        if (
            self.parameternamelist or
            self.parameterdescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docParamListItem', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docParamListItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docParamListItem'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docParamListItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for parameternamelist_ in self.parameternamelist:
            parameternamelist_.export(outfile, level, namespace_, name_='parameternamelist', pretty_print=pretty_print)
        if self.parameterdescription is not None:
            self.parameterdescription.export(outfile, level, namespace_, name_='parameterdescription', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docParamListItem'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('parameternamelist=[\n')
        level += 1
        for parameternamelist_ in self.parameternamelist:
            showIndent(outfile, level)
            outfile.write('model_.docParamNameList(\n')
            parameternamelist_.exportLiteral(outfile, level, name_='docParamNameList')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.parameterdescription is not None:
            showIndent(outfile, level)
            outfile.write('parameterdescription=model_.descriptionType(\n')
            self.parameterdescription.exportLiteral(outfile, level, name_='parameterdescription')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'parameternamelist':
            obj_ = docParamNameList.factory()
            obj_.build(child_)
            self.parameternamelist.append(obj_)
        elif nodeName_ == 'parameterdescription':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            self.parameterdescription = obj_
# end class docParamListItem


class docParamNameList(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, parametertype=None, parametername=None):
        if parametertype is None:
            self.parametertype = []
        else:
            self.parametertype = parametertype
        if parametername is None:
            self.parametername = []
        else:
            self.parametername = parametername
    def factory(*args_, **kwargs_):
        if docParamNameList.subclass:
            return docParamNameList.subclass(*args_, **kwargs_)
        else:
            return docParamNameList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_parametertype(self): return self.parametertype
    def set_parametertype(self, parametertype): self.parametertype = parametertype
    def add_parametertype(self, value): self.parametertype.append(value)
    def insert_parametertype(self, index, value): self.parametertype[index] = value
    def get_parametername(self): return self.parametername
    def set_parametername(self, parametername): self.parametername = parametername
    def add_parametername(self, value): self.parametername.append(value)
    def insert_parametername(self, index, value): self.parametername[index] = value
    def hasContent_(self):
        if (
            self.parametertype or
            self.parametername
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docParamNameList', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docParamNameList')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docParamNameList'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docParamNameList', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for parametertype_ in self.parametertype:
            parametertype_.export(outfile, level, namespace_, name_='parametertype', pretty_print=pretty_print)
        for parametername_ in self.parametername:
            parametername_.export(outfile, level, namespace_, name_='parametername', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docParamNameList'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('parametertype=[\n')
        level += 1
        for parametertype_ in self.parametertype:
            showIndent(outfile, level)
            outfile.write('model_.docParamType(\n')
            parametertype_.exportLiteral(outfile, level, name_='docParamType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('parametername=[\n')
        level += 1
        for parametername_ in self.parametername:
            showIndent(outfile, level)
            outfile.write('model_.docParamName(\n')
            parametername_.exportLiteral(outfile, level, name_='docParamName')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'parametertype':
            obj_ = docParamType.factory()
            obj_.build(child_)
            self.parametertype.append(obj_)
        elif nodeName_ == 'parametername':
            obj_ = docParamName.factory()
            obj_.build(child_)
            self.parametername.append(obj_)
# end class docParamNameList


class docParamType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ref=None, valueOf_=None, mixedclass_=None, content_=None):
        self.ref = ref
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docParamType.subclass:
            return docParamType.subclass(*args_, **kwargs_)
        else:
            return docParamType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.ref is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docParamType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docParamType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docParamType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docParamType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docParamType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ref':
            obj_ = refTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docParamType


class docParamName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, direction=None, ref=None, valueOf_=None, mixedclass_=None, content_=None):
        self.direction = _cast(None, direction)
        self.ref = ref
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if docParamName.subclass:
            return docParamName.subclass(*args_, **kwargs_)
        else:
            return docParamName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DoxParamDir(self, value):
        # Validate type DoxParamDir, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.ref is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docParamName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docParamName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docParamName'):
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.add('direction')
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docParamName', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docParamName'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.add('direction')
            showIndent(outfile, level)
            outfile.write('direction="%s",\n' % (self.direction,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('direction', node)
        if value is not None and 'direction' not in already_processed:
            already_processed.add('direction')
            self.direction = value
            self.validate_DoxParamDir(self.direction)    # validate type DoxParamDir
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ref':
            obj_ = refTextType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'ref', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_ref'):
              self.add_ref(obj_.value)
            elif hasattr(self, 'set_ref'):
              self.set_ref(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class docParamName


class docXRefSectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, xreftitle=None, xrefdescription=None):
        self.id = _cast(None, id)
        if xreftitle is None:
            self.xreftitle = []
        else:
            self.xreftitle = xreftitle
        self.xrefdescription = xrefdescription
    def factory(*args_, **kwargs_):
        if docXRefSectType.subclass:
            return docXRefSectType.subclass(*args_, **kwargs_)
        else:
            return docXRefSectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_xreftitle(self): return self.xreftitle
    def set_xreftitle(self, xreftitle): self.xreftitle = xreftitle
    def add_xreftitle(self, value): self.xreftitle.append(value)
    def insert_xreftitle(self, index, value): self.xreftitle[index] = value
    def get_xrefdescription(self): return self.xrefdescription
    def set_xrefdescription(self, xrefdescription): self.xrefdescription = xrefdescription
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def hasContent_(self):
        if (
            self.xreftitle or
            self.xrefdescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docXRefSectType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docXRefSectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docXRefSectType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docXRefSectType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for xreftitle_ in self.xreftitle:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sxreftitle>%s</%sxreftitle>%s' % (namespace_, self.gds_format_string(quote_xml(xreftitle_).encode(ExternalEncoding), input_name='xreftitle'), namespace_, eol_))
        if self.xrefdescription is not None:
            self.xrefdescription.export(outfile, level, namespace_, name_='xrefdescription', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docXRefSectType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id="%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('xreftitle=[\n')
        level += 1
        for xreftitle_ in self.xreftitle:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(xreftitle_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.xrefdescription is not None:
            showIndent(outfile, level)
            outfile.write('xrefdescription=model_.descriptionType(\n')
            self.xrefdescription.exportLiteral(outfile, level, name_='xrefdescription')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'xreftitle':
            xreftitle_ = child_.text
            xreftitle_ = self.gds_validate_string(xreftitle_, node, 'xreftitle')
            self.xreftitle.append(xreftitle_)
        elif nodeName_ == 'xrefdescription':
            obj_ = descriptionType.factory()
            obj_.build(child_)
            self.xrefdescription = obj_
# end class docXRefSectType


class docCopyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, link=None, para=None, sect1=None, internal=None):
        self.link = _cast(None, link)
        if para is None:
            self.para = []
        else:
            self.para = para
        if sect1 is None:
            self.sect1 = []
        else:
            self.sect1 = sect1
        self.internal = internal
    def factory(*args_, **kwargs_):
        if docCopyType.subclass:
            return docCopyType.subclass(*args_, **kwargs_)
        else:
            return docCopyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def get_sect1(self): return self.sect1
    def set_sect1(self, sect1): self.sect1 = sect1
    def add_sect1(self, value): self.sect1.append(value)
    def insert_sect1(self, index, value): self.sect1[index] = value
    def get_internal(self): return self.internal
    def set_internal(self, internal): self.internal = internal
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def hasContent_(self):
        if (
            self.para or
            self.sect1 or
            self.internal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docCopyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docCopyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docCopyType'):
        if self.link is not None and 'link' not in already_processed:
            already_processed.add('link')
            outfile.write(' link=%s' % (self.gds_format_string(quote_attrib(self.link).encode(ExternalEncoding), input_name='link'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docCopyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for para_ in self.para:
            para_.export(outfile, level, namespace_, name_='para', pretty_print=pretty_print)
        for sect1_ in self.sect1:
            sect1_.export(outfile, level, namespace_, name_='sect1', pretty_print=pretty_print)
        if self.internal is not None:
            self.internal.export(outfile, level, namespace_, name_='internal', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docCopyType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.link is not None and 'link' not in already_processed:
            already_processed.add('link')
            showIndent(outfile, level)
            outfile.write('link="%s",\n' % (self.link,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('para=[\n')
        level += 1
        for para_ in self.para:
            showIndent(outfile, level)
            outfile.write('model_.docParaType(\n')
            para_.exportLiteral(outfile, level, name_='docParaType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('sect1=[\n')
        level += 1
        for sect1_ in self.sect1:
            showIndent(outfile, level)
            outfile.write('model_.docSect1Type(\n')
            sect1_.exportLiteral(outfile, level, name_='docSect1Type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.internal is not None:
            showIndent(outfile, level)
            outfile.write('internal=model_.docInternalType(\n')
            self.internal.exportLiteral(outfile, level, name_='internal')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('link', node)
        if value is not None and 'link' not in already_processed:
            already_processed.add('link')
            self.link = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            self.para.append(obj_)
        elif nodeName_ == 'sect1':
            obj_ = docSect1Type.factory()
            obj_.build(child_)
            self.sect1.append(obj_)
        elif nodeName_ == 'internal':
            obj_ = docInternalType.factory()
            obj_.build(child_)
            self.internal = obj_
# end class docCopyType


class docBlockQuoteType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, para=None):
        if para is None:
            self.para = []
        else:
            self.para = para
    def factory(*args_, **kwargs_):
        if docBlockQuoteType.subclass:
            return docBlockQuoteType.subclass(*args_, **kwargs_)
        else:
            return docBlockQuoteType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_para(self): return self.para
    def set_para(self, para): self.para = para
    def add_para(self, value): self.para.append(value)
    def insert_para(self, index, value): self.para[index] = value
    def hasContent_(self):
        if (
            self.para
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docBlockQuoteType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docBlockQuoteType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docBlockQuoteType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docBlockQuoteType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for para_ in self.para:
            para_.export(outfile, level, namespace_, name_='para', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='docBlockQuoteType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('para=[\n')
        level += 1
        for para_ in self.para:
            showIndent(outfile, level)
            outfile.write('model_.docParaType(\n')
            para_.exportLiteral(outfile, level, name_='docParaType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'para':
            obj_ = docParaType.factory()
            obj_.build(child_)
            self.para.append(obj_)
# end class docBlockQuoteType


class docCharType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, char=None):
        self.char = _cast(None, char)
        pass
    def factory(*args_, **kwargs_):
        if docCharType.subclass:
            return docCharType.subclass(*args_, **kwargs_)
        else:
            return docCharType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_char(self): return self.char
    def set_char(self, char): self.char = char
    def validate_DoxCharRange(self, value):
        # Validate type DoxCharRange, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docCharType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docCharType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docCharType'):
        if self.char is not None and 'char' not in already_processed:
            already_processed.add('char')
            outfile.write(' char=%s' % (quote_attrib(self.char), ))
    def exportChildren(self, outfile, level, namespace_='', name_='docCharType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='docCharType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.char is not None and 'char' not in already_processed:
            already_processed.add('char')
            showIndent(outfile, level)
            outfile.write('char="%s",\n' % (self.char,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('char', node)
        if value is not None and 'char' not in already_processed:
            already_processed.add('char')
            self.char = value
            self.validate_DoxCharRange(self.char)    # validate type DoxCharRange
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class docCharType


class docEmptyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if docEmptyType.subclass:
            return docEmptyType.subclass(*args_, **kwargs_)
        else:
            return docEmptyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='docEmptyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='docEmptyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='docEmptyType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='docEmptyType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='docEmptyType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class docEmptyType


GDSClassesMapping = {
    'linebreak': docEmptyType,
    'parameterlist': docParamListType,
    'ge': docEmptyType,
    'parameteritem': docParamListItem,
    'tilde': docCharType,
    'radic': docEmptyType,
    'aelig': docEmptyType,
    'equiv': docEmptyType,
    'sect4': docSect4Type,
    'Psi': docEmptyType,
    'sect2': docSect2Type,
    'sect3': docSect4Type,
    'sect1': docSect1Type,
    'indexentry': docIndexEntryType,
    'minus': docEmptyType,
    'param': paramType,
    'location': locationType,
    'Upsilon': docEmptyType,
    'ndash': docEmptyType,
    'parameterdescription': descriptionType,
    'Prime': docEmptyType,
    'psi': docEmptyType,
    'dotfile': docDotFileType,
    'slash': docCharType,
    'sigmaf': docEmptyType,
    'defval': linkedTextType,
    'term': docTitleType,
    'cedil': docCharType,
    'ulink': docURLLink,
    'detaileddescription': descriptionType,
    'theta': docEmptyType,
    'AElig': docEmptyType,
    'prime': docEmptyType,
    'acute': docCharType,
    'lceil': docEmptyType,
    'copydoc': docCopyType,
    'rdquo': docEmptyType,
    'hruler': docEmptyType,
    'lsquo': docEmptyType,
    'rarr': docEmptyType,
    'small': docMarkupType,
    'heading': docHeadingType,
    'lfloor': docEmptyType,
    'memberdef': memberdefType,
    'asymp': docEmptyType,
    'initializer': linkedTextType,
    'szlig': docEmptyType,
    'preformatted': docMarkupType,
    'inheritancegraph': graphType,
    'Theta': docEmptyType,
    'Pi': docEmptyType,
    'zeta': docEmptyType,
    'incdepgraph': graphType,
    'includedby': incType,
    'larr': docEmptyType,
    'sum': docEmptyType,
    'prop': docEmptyType,
    'circ': docCharType,
    'listitem': docListItemType,
    'computeroutput': docMarkupType,
    'formula': docFormulaType,
    'subscript': docMarkupType,
    'prod': docEmptyType,
    'ref': refTextType,
    'innerpage': refType,
    'bold': docMarkupType,
    'infin': docEmptyType,
    'parameternamelist': docParamNameList,
    'sdot': docEmptyType,
    'le': docEmptyType,
    'reimplements': reimplementType,
    'isin': docEmptyType,
    'Sigma': docEmptyType,
    'reimplementedby': reimplementType,
    'templateparamlist': templateparamlistType,
    'doxygen': DoxygenType,
    'language': docLanguageType,
    'row': docRowType,
    'nabla': docEmptyType,
    'mdash': docEmptyType,
    'times': docEmptyType,
    'caption': docCaptionType,
    'eta': docEmptyType,
    'briefdescription': descriptionType,
    'rceil': docEmptyType,
    'gamma': docEmptyType,
    'lambda': docEmptyType,
    'simplesectsep': docEmptyType,
    'programlisting': listingType,
    'xi': docEmptyType,
    'varlistentry': docVarListEntryType,
    'image': docImageType,
    'childnode': childnodeType,
    'references': referenceType,
    'parametername': docParamName,
    'table': docTableType,
    'ring': docCharType,
    'innergroup': refType,
    'nonbreakablespace': docEmptyType,
    'plusmn': docEmptyType,
    'innerdir': refType,
    'chi': docEmptyType,
    'trademark': docEmptyType,
    'enumvalue': enumvalueType,
    'int': docEmptyType,
    'perp': docEmptyType,
    'grave': docCharType,
    'Delta': docEmptyType,
    'pi': docEmptyType,
    'type': linkedTextType,
    'iota': docEmptyType,
    'empty': docEmptyType,
    'notin': docEmptyType,
    'para': docParaType,
    'epsilon': docEmptyType,
    'registered': docEmptyType,
    'tocitem': docTocItemType,
    'part': docEmptyType,
    'link': linkType,
    'delta': docEmptyType,
    'invincdepgraph': graphType,
    'upsilon': docEmptyType,
    'copy': docEmptyType,
    'orderedlist': docListType,
    'Lambda': docEmptyType,
    'Xi': docEmptyType,
    'kappa': docEmptyType,
    'xrefsect': docXRefSectType,
    'mu': docEmptyType,
    'exceptions': linkedTextType,
    'highlight': highlightType,
    'umlaut': docCharType,
    'innernamespace': refType,
    'anchor': docAnchorType,
    'deg': docEmptyType,
    'tau': docEmptyType,
    'simplesect': docSimpleSectType,
    'sectiondef': sectiondefType,
    'innerfile': refType,
    'rfloor': docEmptyType,
    'blockquote': docBlockQuoteType,
    'referencedby': referenceType,
    'innerclass': refType,
    'ne': docEmptyType,
    'member': memberRefType,
    'listofallmembers': listofallmembersType,
    'emphasis': docMarkupType,
    'internal': docInternalType,
    'derivedcompoundref': compoundRefType,
    'toclist': docTocListType,
    'Omega': docEmptyType,
    'nu': docEmptyType,
    'sim': docEmptyType,
    'node': nodeType,
    'phi': docEmptyType,
    'basecompoundref': compoundRefType,
    'description': descriptionType,
    'compounddef': compounddefType,
    'Phi': docEmptyType,
    'includes': incType,
    'beta': docEmptyType,
    'codeline': codelineType,
    'rho': docEmptyType,
    'entry': docEntryType,
    'alpha': docEmptyType,
    'omega': docEmptyType,
    'Gamma': docEmptyType,
    'parametertype': docParamType,
    'center': docMarkupType,
    'rsquo': docEmptyType,
    'inbodydescription': descriptionType,
    'xrefdescription': descriptionType,
    'variablelist': docVariableListType,
    'sect': docEmptyType,
    'itemizedlist': docListType,
    'ldquo': docEmptyType,
    'title': docTitleType,
    'collaborationgraph': graphType,
    'sigma': docEmptyType,
    'superscript': docMarkupType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'doxygen'
        rootClass = DoxygenType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(
##         sys.stdout, 0, name_=rootTag,
##         namespacedef_='',
##         pretty_print=True)
    return rootObj


def parseEtree(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'doxygen'
        rootClass = DoxygenType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
##     content = etree_.tostring(
##         rootElement, pretty_print=True,
##         xml_declaration=True, encoding="utf-8")
##     sys.stdout.write(content)
##     sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    roots = get_root_tag(rootNode)
    rootClass = roots[1]
    if rootClass is None:
        rootClass = DoxygenType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(
##         sys.stdout, 0, name_="doxygen",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'doxygen'
        rootClass = DoxygenType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('#from doxygen_compound import *\n\n')
##     sys.stdout.write('import doxygen_compound as model_\n\n')
##     sys.stdout.write('rootObj = model_.rootTag(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "DoxygenType",
    "argsstring",
    "array",
    "bitfield",
    "childnodeType",
    "codelineType",
    "compoundRefType",
    "compounddefType",
    "declname",
    "definition",
    "defname",
    "descriptionType",
    "docAnchorType",
    "docBlockQuoteType",
    "docCaptionType",
    "docCharType",
    "docCopyType",
    "docDotFileType",
    "docEmptyType",
    "docEntryType",
    "docFormulaType",
    "docHeadingType",
    "docImageType",
    "docIndexEntryType",
    "docInternalS1Type",
    "docInternalS2Type",
    "docInternalS3Type",
    "docInternalS4Type",
    "docInternalType",
    "docLanguageType",
    "docListItemType",
    "docListType",
    "docMarkupType",
    "docParaType",
    "docParamListItem",
    "docParamListType",
    "docParamName",
    "docParamNameList",
    "docParamType",
    "docRefTextType",
    "docRowType",
    "docSect1Type",
    "docSect2Type",
    "docSect3Type",
    "docSect4Type",
    "docSimpleSectType",
    "docTableType",
    "docTitleType",
    "docTocItemType",
    "docTocListType",
    "docURLLink",
    "docVarListEntryType",
    "docVariableListType",
    "docXRefSectType",
    "edgelabel",
    "enumvalueType",
    "graphType",
    "highlightType",
    "incType",
    "label",
    "linkType",
    "linkedTextType",
    "listingType",
    "listofallmembersType",
    "locationType",
    "memberRefType",
    "memberdefType",
    "name",
    "nodeType",
    "paramType",
    "read",
    "refTextType",
    "refType",
    "referenceType",
    "reimplementType",
    "scope",
    "sectiondefType",
    "sp",
    "templateparamlistType",
    "write"
]

########NEW FILE########
__FILENAME__ = generate_addons_index
import markdown_file
import copy
import sys

addons = markdown_file.list_all_addons()
block_list = []

def uniqify(seq):
    seen = set()
    seen_add = seen.add
    return [ x for x in seq if x not in seen and not seen_add(x)]
        
class Block(object):
    def __init__(self, source=""):
        self.source = source
        self.name = None
        self.classes = []
        self.mode = 'module'
        if source!="":
            self.__parse()
        
    
    def __parse(self):
        src_list = self.source.split('\n')
        for element in src_list:
            self.__parse_element(element)
        for clazz in self.classes:
            if 'methods' in clazz:
                clazz['methods'] = uniqify(clazz['methods']) #sets.Set(clazz['methods']) 
            if 'variables' in clazz:
                clazz['variables'] = uniqify(clazz['variables']) #sets.Set(clazz['variables'])
                
    def __parse_element(self, element):
        mode = self.mode
        if mode=='module' and element[:2]=='##':
            self.name = element[2:-2]
            self.mode = 'clazz'
        elif mode=='clazz' and element is not None and element != "" and element.find('__')==-1 and element.find('###')!=-1:
            #print element[3:-3]
            self.classes.append({'name':element[3:-3]})
        elif mode=='clazz' and element.find('__visible:')!=-1:
            if element.find('false')!=-1:
                self.classes[-1]['visible'] = False
            else:
                self.classes[-1]['visible'] = True
        elif mode=='clazz' and element.find('__advanced:')!=-1:
            if element.find('false')!=-1:
                self.classes[-1]['advanced'] = False
            else:
                self.classes[-1]['advanced'] = True
        elif mode=='clazz' and element.find('__methods__')!=-1:
            self.mode='methods'
            self.classes[-1]['methods']=[]
        elif mode=='methods' and element is not None and element != "" and element.find('__')==-1 and element.find('##')==-1:
            self.classes[-1]['methods'].append(element)
        elif mode=='methods' and element.find('__variables__')!=-1:
            self.mode='variables'
            self.classes[-1]['variables']=[]
        elif mode=='clazz' and element.find('__functions__')!=-1:
            self.mode='methods'
            self.classes[-1]['methods']=[]
        elif mode=='variables' and element is not None and element != "" and element.find('__')==-1 and element.find('##')==-1:
            self.classes[-1]['variables'].append(element)
        elif (mode=='methods' or mode=='variables') and element.find('##')!=-1:
            self.mode = 'clazz'
            self.__parse_element(element)

def get_class(name,block_list):
    for block in block_list:
        for clazz in block.classes:
            if clazz["name"] == name:
                return clazz
    return None

    
for addon in addons:
    block = Block()
    block.name = addon
    #print '//----------------------\n\n'
    #print "##" + addon + "##\n\n"
    files = markdown_file.list_all_addon_files(addon)
    for clazz in files:
        #print "###" + f + "###\n\n"
        #print "__visible: true__\n\n"
        #print "__advanced: false__\n\n"
        
        onlyfunctionsfile = False
        if clazz.endswith("_functions"):
            clazz = clazz[:-10]
            onlyfunctionsfile = True
        clazzname = clazz
        if clazz.endswith("_"):
            clazz = clazz[:-1]
            if clazz in files:
                continue
        current_class = get_class(clazz,block_list)
        append_class = False
        if current_class!=None:
            pass
            #current_class["methods"]=[]
        else:
            current_class = {"name":clazz,"visible":True,"advanced":False,"methods":[]}
            append_class = True
        
        if onlyfunctionsfile:    
            functionsfile = markdown_file.getfunctionsfile(clazz)
            prevfunction = ""
            for function in functionsfile.function_list:
                if prevfunction == function.name:
                    continue
                params = "()"
                current_class["methods"].append(function.name + params)
                prevfunction = function.name
        else:
            classfile = markdown_file.getclass(clazzname)
            prevfunction = ""
            for function in classfile.function_list:
                if prevfunction == function.name:
                    continue
                if function.access!='public' or function.advanced or not function.visible:
                    continue
                params = "()"
                current_class["methods"].append(function.name + params)
                prevfunction = function.name
        
        if append_class:        
            block.classes.append(current_class)
    
    block_list.append(block)
            
print '//----------------------\n\n'
for block in block_list:
    print "##" + block.name + "##\n\n"
    for clazz in block.classes:
        visible = "__visible: "
        if clazz['visible']:
            visible = visible + "true__\n"
        else:
            visible = visible + "false__\n"
        
        advanced = "__advanced: "
        if clazz['advanced']:
            advanced = advanced + "true__\n"
        else:
            advanced = advanced + "false__\n"
            
        print "###" + clazz['name'] + "###\n"
        print visible
        print advanced
        print '__functions__'
        for function in clazz['methods']:
            print function + '\n'
        if len(clazz['methods'])==0:
            print '\n\n\n'
    
    print '//----------------------\n\n'
    print '\n\n\n'


########NEW FILE########
__FILENAME__ = generate_index
import markdown_file
import copy
import sys

def uniqify(seq):
    seen = set()
    seen_add = seen.add
    return [ x for x in seq if x not in seen and not seen_add(x)]
        
class Block(object):
    def __init__(self, source=""):
        self.source = source
        self.name = None
        self.classes = []
        self.mode = 'module'
        if source!="":
            self.__parse()
        
    
    def __parse(self):
        src_list = self.source.split('\n')
        for element in src_list:
            self.__parse_element(element)
        for clazz in self.classes:
            if 'methods' in clazz:
                clazz['methods'] = uniqify(clazz['methods']) #sets.Set(clazz['methods']) 
            if 'variables' in clazz:
                clazz['variables'] = uniqify(clazz['variables']) #sets.Set(clazz['variables'])
                
    def __parse_element(self, element):
        mode = self.mode
        if mode=='module' and element[:2]=='##':
            self.name = element[2:-2]
            self.mode = 'clazz'
        elif mode=='clazz' and element is not None and element != "" and element.find('__')==-1 and element.find('###')!=-1:
            #print element[3:-3]
            self.classes.append({'name':element[3:-3]})
        elif mode=='clazz' and element.find('__visible:')!=-1:
            if element.find('false')!=-1:
                self.classes[-1]['visible'] = False
            else:
                self.classes[-1]['visible'] = True
        elif mode=='clazz' and element.find('__advanced:')!=-1:
            if element.find('false')!=-1:
                self.classes[-1]['advanced'] = False
            else:
                self.classes[-1]['advanced'] = True
        elif mode=='clazz' and element.find('__methods__')!=-1:
            self.mode='methods'
            self.classes[-1]['methods']=[]
        elif mode=='methods' and element is not None and element != "" and element.find('__')==-1 and element.find('##')==-1:
            self.classes[-1]['methods'].append(element)
        elif mode=='methods' and element.find('__variables__')!=-1:
            self.mode='variables'
            self.classes[-1]['variables']=[]
        elif mode=='clazz' and element.find('__functions__')!=-1:
            self.mode='methods'
            self.classes[-1]['methods']=[]
        elif mode=='variables' and element is not None and element != "" and element.find('__')==-1 and element.find('##')==-1:
            self.classes[-1]['variables'].append(element)
        elif (mode=='methods' or mode=='variables') and element.find('##')!=-1:
            self.mode = 'clazz'
            self.__parse_element(element)

def parse_index():
    indexhtml_file = open("_documentation/" + "index.markdown",'r')
    indexhtml = indexhtml_file.read()
    columns = []
    columns_src = indexhtml.split('___column___')
    blocks = []
    last_block_name = ""
    for column in columns_src:    
        blocks_src = column.split('//----------------------')
        for block in blocks_src:
            b = Block(block)
            if b.name is not None and b.name != "":
                blocks.append(b)
                last_block_name = b.name
        columns.append(last_block_name)
    return blocks,columns


def get_class(name,block_list):
    for block in block_list:
        for clazz in block.classes:
            if clazz["name"] == name:
                return clazz
    return None

def get_block(name,block_list):
    for block in block_list:
        if block.name == name:
            return block
    return None
    
def check_new_column(block_name,columns):
    for column in columns:
        if column==block_name:
            return True
            
    return False


# main

block_list,columns = parse_index()
new_block_list = []
modules = markdown_file.list_all_modules()
    

# parse current code + set correct visibility from old index
for module in modules:
    if module == "addons": 
        continue
    append_block = False
    block = get_block(module,block_list)
    if block==None:
        #sys.stderr.write (module + " not found, creating new\n")
        block = Block()
        block.name = module
        append_block = True
    
    files = markdown_file.list_all_files(module)
    for clazz in files:
        onlyfunctionsfile = False
        if clazz.endswith("_functions"):
            clazz = clazz[:-10]
            onlyfunctionsfile = True
        clazzname = clazz
        if clazz.endswith("_"):
            clazz = clazz[:-1]
            if clazz in files:
                continue
        current_class = get_class(clazz,block_list)
        append_class = False
        if current_class!=None:
            pass
            #current_class["methods"]=[]
        else:
            current_class = {"name":clazz,"visible":True,"advanced":False,"methods":[]}
            append_class = True
        
        if onlyfunctionsfile:    
            functionsfile = markdown_file.getfunctionsfile(clazz)
            prevfunction = ""
            for function in functionsfile.function_list:
                if prevfunction == function.name:
                    continue
                params = "()"
                current_class["methods"].append(function.name + params)
                prevfunction = function.name
        else:
            classfile = markdown_file.getclass(clazzname)
            prevfunction = ""
            for function in classfile.function_list:
                if prevfunction == function.name:
                    continue
                if function.access!='public' or function.advanced or not function.visible:
                    continue
                params = "()"
                current_class["methods"].append(function.name + params)
                prevfunction = function.name
        
        if append_class:        
            block.classes.append(current_class)
                
    if append_block:   
        block_list.append(block)
    
    
print '//----------------------\n\n'
for block in block_list:
    print "##" + block.name + "##\n\n"
    for clazz in block.classes:
        visible = "__visible: "
        if clazz['visible']:
            visible = visible + "true__\n"
        else:
            visible = visible + "false__\n"
        
        advanced = "__advanced: "
        if clazz['advanced']:
            advanced = advanced + "true__\n"
        else:
            advanced = advanced + "false__\n"
            
        print "###" + clazz['name'] + "###\n"
        print visible
        print advanced
        print '__functions__'
        for function in clazz['methods']:
            print function + '\n'
        if len(clazz['methods'])==0:
            print '\n\n\n'
    
    print '//----------------------\n\n'
    print '\n\n\n'
    if check_new_column(block.name,columns):
        print('___column___')
        print '\n\n\n'
                

"""ordered_modules_list = index()
for module in module_list.modules:
    new_module = index_module()
    new_module.name = module.name
    for functionsfile in module.functionsfiles_list:
        new_module.functionsfiles_list.append(get_functionsfile(functionsfile.name,new_module_list))
    for classfile in module.classfiles_list:
        new_module.classfiles_list.append(get_classfile(classfile.name,new_module_list))
    ordered_modules_list.modules.append(new_module)
    
        
ordered_modules_list = module_list

for module in ordered_modules_list.modules:
    print '//----------------------\n\n'
    print "##" + module.name + "##\n\n"
    for f in module.functionsfiles_list:
        print "###" + f.name + "###\n"
        visibility = "__visible: "
        if f.visible:
            visibility = visibility + "true__\n"
        else:
            visibility = visibility + "false__\n"
        
        advanced = "__advanced: "
        if f.advanced:
            advanced = advanced + "true__\n"
        else:
            advanced = advanced + "false__\n"
            
        print visibility
        print advanced
        print '__functions__'
        for function in f.function_list:
            print function + '\n'
        
    for f in module.classfiles_list:
        print "###" + f.name + "###\n"
        visibility = "__visible: "
        if f.visible:
            visibility = visibility + "true__\n"
        else:
            visibility = visibility + "false__\n"
        
        advanced = "__advanced: "
        if f.advanced:
            advanced = advanced + "true__\n"
        else:
            advanced = advanced + "false__\n"
            
        print visibility
        print advanced
        
    print '\n\n\n'
    if check_new_column(module.name,module_list):
        print('___column___')
        print '\n\n\n'"""
        

     
    

########NEW FILE########
__FILENAME__ = main
def application(environ, start_response):
    template = ""
    try:
        start_response('200 OK', [('Content-Type', 'text/html')])

        html = index()

    except Exception as inst:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        error = str(inst)           # __str__ allows args to printed directly
        error += "<br/>"
        error += repr(traceback.format_exception(exc_type, exc_value,
                                          exc_traceback))
        error.replace('\n',"<br/>")

        return "Unexpected error:<br/>", error
    return html

if __name__ == '__main__':
    from wsgiref.handlers import CGIHandler
    CGIHandler().run(application)

########NEW FILE########
__FILENAME__ = markdown_file
#import documentation_files
from documentation_members import DocsMethod
from documentation_members import DocsVar
from documentation_class import DocsClass
from documentation_function import DocsFunctionsFile, DocsFunction
import os

documentation_root = '_documentation/'

def list_all_addons():
    modules = []
    for root, dirs, files in os.walk(documentation_root+"addons"):
        for name in dirs:
            modules.append(name)
    return set(modules)
    
def list_all_modules():
    modules = []
    for root, dirs, files in os.walk(documentation_root):
        for name in dirs:
            if name.find("ofx")!=0:
                modules.append(name)
    return modules
    
def list_all_addon_files(addon=''):
    module_files = []
    for root, dirs, files in os.walk(os.path.join(documentation_root, 'addons', addon)):
        for name in files:
            file_split = os.path.splitext(name)
            if file_split[1]=='.markdown': 
                module_files.append(file_split[0])
    return module_files
            
def list_all_files(module=''):
    module_files = []
    for root, dirs, files in os.walk(os.path.join(documentation_root, module)):
        for name in files:
            file_split = os.path.splitext(name)
            if file_split[1]=='.markdown': 
                module_files.append(file_split[0])
    return module_files
    
def addfield(method,line):
    field = line.split(':')[0].lstrip('_').rstrip(' ')
    value = line.split(':')[1]
    if len(line.split(':'))>2:
        for text in line.split(':')[2:]:
            value = value + ":" + text
    
    value = value.lstrip(' ').rstrip('\n').rstrip('\r')[:-1]
    if field=='constant' or field=='advanced' or field=='visible' or field=='static' or field=='istemplated':
        value = ((value == '1') or (value == 'True') or (value=='true') or (value=='TRUE'))
    #print field, "=", value
    setattr(method,field,value)


def getfunctionsfiles_list():
    functionsfiles_list = []
    for root, dirs, files in os.walk(os.path.join(documentation_root)):
        for name in files:
            file_split = os.path.splitext(name)
            if file_split[1]=='.markdown':
                f = open(os.path.join(root,name),'rU')
                state = 'begin'
                for line in f:
                    if state == 'begin' and line.find('#functions') == 0:
                        functionsfile = file_split[0].replace('_functions','')                        
                        functionsfiles_list.append(functionsfile)
                        f.close()
                        break
    return functionsfiles_list
    
def getfunctionsfile(filename):
    functionsfile = DocsFunctionsFile(0)
    functionsfile.name = filename
    functionsfile.new = 1                        
    function = DocsFunction(0)
    prevBreakLine = False;
    for root, dirs, files in os.walk(os.path.join(documentation_root)):
        for name in files:
            file_split = os.path.splitext(name)
            if file_split[1]=='.markdown' and file_split[0] == filename+"_functions": 
                f = open(os.path.join(root,name),'rU')
                state = 'begin'
                linenum = 0
                for line in f:
                    line = line.decode("utf-8", "replace")
                    if state == 'begin' and line.find('#functions') == 0:
                        state = 'functionsfile'
                        functionsfile.module = os.path.basename(root)
                        functionsfile.new = False
                 
                    elif state == 'functionsfile' and line.find('_')==0:
                        addfield(functionsfile,line)
                        
                    elif state == 'functionsfile' and line.find('##Description') == 0:
                        state = 'filedescription'
                        prevBreakLine = False
                        
                    elif state == 'filedescription' and line.find('<!----------------------------------------------------------------------------->')==-1 and (line!='\n' or not prevBreakLine):
                        functionsfile.description = functionsfile.description + line
                        prevBreakLine = (line=='\n')     
                                           
                    elif state == 'filedescription' or state=='description' and line.find('###')==0:
                        if(state=='description'):
                            functionsfile.function_list.append(function)
                        state = 'function'
                        function = DocsFunction(0)
                        
                    elif state == 'function' and line.find('_')==0 and line.find('_inlined_description')==-1 and line.find('_description')==-1:
                        #print "##########field: " + line
                        addfield(function,line)
                        
                    elif state == 'function' and line.find('_inlined_description')==0:
                        state = 'inlined_description'
                        prevBreakLine = True
                        
                    elif (state == 'inlined_description' or state=='function') and line.find('_description')==0:
                        state = 'description'
                        prevBreakLine = False
                        
                    elif state == 'inlined_description' and line.find('##')!=0 and line.find('_description')==-1 and (line!='\n' or not prevBreakLine):
                        function.inlined_description = function.inlined_description + line
                        prevBreakLine = (line=='\n')
                        
                    elif state == 'description' and line.find('<!----------------------------------------------------------------------------->')==-1 and (line!='\n' or not prevBreakLine):
                        function.description = function.description + line
                        prevBreakLine = (line=='\n')                        
                                    
                if(state=='description'):
                    functionsfile.function_list.append(function)
                    
    functionsfile.function_list.sort(key=lambda function: function.name)
    return functionsfile

def getclass_list(getTemplated=True):
    class_list = []
    for root, dirs, files in os.walk(os.path.join(documentation_root)):
        for name in files:
            file_split = os.path.splitext(name)
            if file_split[1]=='.markdown':
                f = open(os.path.join(root,name),'rU')
                state = 'begin'
                for line in f:
                    if state == 'begin' and line.find('#class') == 0 and line.find(file_split[0])!=-1 :
                        if getTemplated or file_split[0][-1]!="_":
                            class_name = file_split[0]
                        elif file_split[0][-1]=="_":
                            class_name = file_split[0][:-1]
                        #print class_name
                        class_list.append(class_name)
                        f.close()
                        break
    return class_list
    
def sort_function(function):
    if (function.name==function.clazz) or (function.name == "~" + function.clazz):
        return "0"
    else:
        return function.name
      
def getclass(clazz):
    var = DocsVar(0)
    documentation_clazz = DocsClass(0)
    if clazz[-1]=="_":
        documentation_clazz.istemplated = True
        
    var.clazz  = clazz
    documentation_clazz.name = clazz
    documentation_clazz.new = True
    method = DocsMethod(0)
    method.clazz = documentation_clazz.name
    prevBreakLine = False;
    for root, dirs, files in os.walk(os.path.join(documentation_root)):
        for name in files:
            file_split = os.path.splitext(name)
            if file_split[1]=='.markdown' and file_split[0] == clazz: 
                f = open(os.path.join(root,name),'rU')
                state = 'begin'
                linenum = 0
                for line in f:
                    line = line.decode("utf-8", "replace")
                    if state == 'begin' and line.find('#class') == 0 and line.find(clazz)!=-1:
                        state = 'class'
                        documentation_clazz.module = os.path.basename(root)
                        documentation_clazz.new = False
                        
                    elif state == 'classdescription' and line.rstrip('\n').rstrip(' ') == '##Methods':
                        state = 'methods'
                        
                    elif state == 'methods' and line.find('###') == 0:
                        #print "##########method: " + line
                        state = 'method'
                        
                    elif state == 'method' and line.find('_')==0 and line.find('_description')==-1 and line.find('_inlined_description')==-1:
                        #print "##########field: " + line
                        addfield(method,line)
                        
                    elif state == 'method' and line.find('_inlined_description')==0:
                        state = 'inlined_description'
                        prevBreakLine = False
                        
                    elif (state == 'inlined_description' or state=='method') and line.find('_description')==0:
                        state = 'description'
                        prevBreakLine = False
                        
                    elif state == 'inlined_description' and line.find('##')!=0 and line.find('_description')==-1 and (line!='\n' or not prevBreakLine):
                        method.inlined_description = method.inlined_description + line
                        prevBreakLine = (line=='\n')
                        
                    elif state == 'description' and line.find('##')!=0 and line.find('<!----------------------------------------------------------------------------->')==-1 and (line!='\n' or not prevBreakLine):
                        method.description = method.description + line
                        prevBreakLine = (line=='\n')
                        
                    elif state == 'description' and line.find('###') == 0:
                        state = 'method'
                        documentation_clazz.function_list.append(method)
                        method = DocsMethod(0)
                        method.clazz = documentation_clazz.name
                        method.linenum = linenum
                        method.file = os.path.join(root,name)
                    
                    elif (state == 'description' or state == 'methods') and line.rstrip('\n').rstrip(' ') == '##Variables':
                        if state == 'description':
                            documentation_clazz.function_list.append(method)
                        state = 'vars'
                        
                    elif state == 'vars' and line.find('###') == 0:
                        #print line
                        state = 'var'
                        
                    elif state == 'var' and line.find('_')==0 and line.find('_description')==-1:
                        addfield(var,line)
                        
                    elif state == 'var' and line.find('_description') == 0:
                        state = 'vardescription'
                        prevBreakLine = False
                        
                    elif state == 'vardescription' and line.find('##')!=0 and line.find('<!----------------------------------------------------------------------------->')==-1 and (line!='\n' or not prevBreakLine):
                        var.description = var.description + line
                        prevBreakLine = (line=='\n')
                        
                    elif state == 'vardescription' and line.find('###') == 0:
                        #print line
                        state = 'var'
                        documentation_clazz.var_list.append(var)
                        var = DocsVar(0)
                        var.clazz  = documentation_clazz.name
                        var.linenum = linenum
                        var.file = os.path.join(root,name)
                        
                    elif state == 'class' and line.find('_')==0:
                        addfield(documentation_clazz,line)
                        
                    elif state == 'class' and line.find('##InlineDescription')==0:
                        state = 'classinlinedescription'
                        documentation_clazz.detailed_inline_description = ""
                        
                    elif state == 'classinlinedescription' and line.find('##Description')==-1 and line.find('##InlineDescription')==-1 and (line!='\n' or not prevBreakLine):
                        documentation_clazz.detailed_inline_description  = documentation_clazz.detailed_inline_description + line
                        prevBreakLine = (line=='\n')
                        
                    elif (state == 'classinlinedescription' or state == 'class') and line.rstrip('\n').rstrip(' ') == '##Description':
                        state = "classdescription"
                        
                    elif state == 'classdescription' and (line!='\n' or not prevBreakLine):
                        documentation_clazz.reference  = documentation_clazz.reference + line
                        prevBreakLine = (line=='\n')
                        
                    linenum = linenum + 1
                if state == 'vardescription':
                    documentation_clazz.var_list.append(var)
                f.close()
                
                """if getTemplated:
                    templatedClazz = getclass(clazz+"_")
                    if not templatedClazz.new:
                        #print "found templated class " + clazz + "_"
                        if documentation_clazz.new:
                            documentation_clazz.id = templatedClazz.id
                            documentation_clazz.module = templatedClazz.module
                            documentation_clazz.new = False
                            documentation_clazz.advanced = templatedClazz.advanced
                            documentation_clazz.visible = templatedClazz.visible
                            documentation_clazz.example = templatedClazz.example
                            documentation_clazz.reference = templatedClazz.reference
                            documentation_clazz.addons = templatedClazz.addons
                            documentation_clazz.function_list = templatedClazz.function_list
                            documentation_clazz.var_list = templatedClazz.var_list
                            documentation_clazz.istemplated = True
                        else:
                            documentation_clazz.function_list.extend(templatedClazz.function_list)
                            documentation_clazz.var_list.extend(templatedClazz.var_list)
                            documentation_clazz.reference = documentation_clazz.reference + templatedClazz.reference
                            documentation_clazz.example = documentation_clazz.example + templatedClazz.example
                            documentation_clazz.istemplated = True"""
                            
                documentation_clazz.function_list.sort(key=lambda function: function.name)
                documentation_clazz.var_list.sort(key=lambda variable: variable.name)
                #documentation_clazz.function_list.sort(key= sort_function)
                return documentation_clazz   


    """if getTemplated:
        templatedClazz = getclass(clazz+"_")
        if not templatedClazz.new:
            #print "found templated class " + clazz + "_"
            if documentation_clazz.new:
                documentation_clazz.id = templatedClazz.id
                documentation_clazz.module = templatedClazz.module
                documentation_clazz.new = False
                documentation_clazz.advanced = templatedClazz.advanced
                documentation_clazz.visible = templatedClazz.visible
                documentation_clazz.example = templatedClazz.example
                documentation_clazz.reference = templatedClazz.reference
                documentation_clazz.addons = templatedClazz.addons
                documentation_clazz.function_list = templatedClazz.function_list
                documentation_clazz.var_list = templatedClazz.var_list
                documentation_clazz.istemplated = True
            else:
                documentation_clazz.function_list.extend(templatedClazz.function_list)
                documentation_clazz.var_list.extend(templatedClazz.var_list)
                documentation_clazz.reference = documentation_clazz.reference + templatedClazz.reference
                documentation_clazz.example = documentation_clazz.example + templatedClazz.example
                documentation_clazz.istemplated = True"""
    
    #documentation_clazz.function_list.sort(key= sort_function)
    documentation_clazz.function_list.sort(key=lambda function: function.name)
    documentation_clazz.var_list.sort(key=lambda variable: variable.name)
    return documentation_clazz
    
    
def serialize_function(f,function,member):
    f.write('###' + function.returns + " " + function.syntax + "\n\n")
    f.write("<!--\n");
    f.write("_syntax: " + function.syntax + "_\n")
    f.write("_name: " + function.name + "_\n")
    f.write("_returns: " + function.returns + "_\n")
    f.write("_returns_description: " + function.returns_description + "_\n")
    f.write("_parameters: " + function.parameters + "_\n")
    if(member):
        f.write("_access: " + function.access + "_\n")
    f.write("_version_started: " + function.version_started + "_\n")
    f.write("_version_deprecated: " + function.version_deprecated + "_\n")
    f.write("_summary: " + function.summary + "_\n")
    f.write("_constant: " + str(function.constant) + "_\n")
    f.write("_static: " + str(function.static) + "_\n")
    f.write("_visible: " + str(function.visible) + "_\n")
    f.write("_advanced: " + str(function.advanced)  + "_\n")
    f.write("-->\n\n");
    f.write("_inlined_description: _\n\n")
    f.write(function.inlined_description.encode('utf-8'))
    f.write('\n\n\n\n\n\n')
    f.write("_description: _\n\n")
    f.write(function.description.encode('utf-8'))
    f.write('\n\n\n\n\n\n')
    f.write('<!----------------------------------------------------------------------------->\n\n')

def serialize_var(f,var):
    f.write('###' + var.type + " " + var.name + "\n\n")
    f.write("<!--\n");
    f.write("_name: " + var.name + "_\n")
    f.write("_type: " + var.type + "_\n")
    f.write("_access: " + var.access + "_\n")
    f.write("_version_started: " + var.version_started + "_\n")
    f.write("_version_deprecated: " + var.version_deprecated + "_\n")
    f.write("_summary: " + var.summary + "_\n")
    f.write("_visible: " + str(var.visible) + "_\n")
    f.write("_constant: " + str(var.constant) + "_\n")
    f.write("_advanced: " + str(var.advanced) + "_\n")
    f.write("-->\n\n");
    f.write("_description: _\n\n")
    f.write(var.description.encode('utf-8'))  
    f.write("\n\n\n\n\n\n")
    f.write('<!----------------------------------------------------------------------------->\n\n')
    
def setclass(clazz,is_addon=False):
    path = ""
    if is_addon:
        path = os.path.join(documentation_root,"addons",clazz.module)
    else:
        path = os.path.join(documentation_root,clazz.module)
        
    try:
        os.mkdir(path)
    except:
        pass
        
    f = open(os.path.join(path,clazz.name)+".markdown",'w')
    f.write('#class ' + clazz.name + '\n\n\n')
    f.write("<!--\n");
    f.write("_visible: " + str(clazz.visible) + "_\n")
    f.write("_advanced: " + str(clazz.advanced) + "_\n")
    f.write("_istemplated: " + str(clazz.istemplated) + "_\n")
    f.write("-->\n\n");
    
    #f.write('//----------------------\n\n')
    #f.write('##Example\n\n' + clazz.example + '\n\n\n\n')
    f.write('##InlineDescription\n\n' + clazz.detailed_inline_description.encode('utf-8') + '\n\n\n\n')
    
    #f.write('//----------------------\n\n')
    f.write('##Description\n\n' + clazz.reference.encode('utf-8') + '\n\n\n\n')

    #f.write('//----------------------\n\n')
    f.write('##Methods\n\n\n\n')
    
    #f.write('//----------------------\n\n')
    for method in clazz.function_list:
        serialize_function(f,method,True)

    f.write('##Variables\n\n\n\n')
    
    #f.write('//----------------------\n\n')
    for var in clazz.var_list:
        serialize_var(f,var)
    f.close()
    return
    
def setfunctionsfile(functionfile,is_addon=False):
    path = ""
    if is_addon:
        path = os.path.join(documentation_root,"addons",functionfile.module)
    else:
        path = os.path.join(documentation_root,functionfile.module)
        
    try:
        os.mkdir(path)
    except:
        pass
        
    f = open(os.path.join(path,functionfile.name)+"_functions.markdown",'w')
    f.write('#functions\n\n\n')
    f.write("<!--\n");
    f.write("_visible: " + str(functionfile.visible) + "_\n")
    f.write("_advanced: " + str(functionfile.advanced) + "_\n")
    f.write("-->\n\n");
    f.write('##Description\n\n' + functionfile.description + '\n\n\n\n')
    
    f.write('<!----------------------------------------------------------------------------->\n\n')
    for function in functionfile.function_list:
        if function.name.find('OF_DEPRECATED_MSG')==-1:
            serialize_function(f,function,False)
        

########NEW FILE########
__FILENAME__ = ofReference2markdown
from markdown_file import getclass, setclass
import os
from documentation_members import DocsMethod, DocsVar
import re
import shutil
import codecs

ofReference_path = '/home/arturo/Documentos/ofReference'
documentation_root = '/home/arturo/Documentos/new_of_site/_documentation/'

def remove_links(string):
    ret = ""
    state = 'normal'
    for c in string:
        if state == 'normal' and c =='[':
            state = 'link_name'
        elif state == 'link_name' and c!=']':
            ret = ret + c
        elif state == 'link_name' and c==']':
            state = 'link_end_name'
        elif state == 'link_end_name' and c=='(':
            state = 'link_url'
        elif state == 'link_url' and c==')':
            state = 'normal'
        elif state == 'normal':
            ret = ret + c
    return ret


def parse_function(element):
    if re.match('.*operator\s*\[\s*\]',element) is None: 
        clean_element = remove_links(element)
    else:
        clean_element = element
    clean_element = html_encode_templates(clean_element)
    #print re.match('operator\b*\[\b*\]\b*\(.*\)',element) is None
    #print clean_element
    m = DocsMethod(0)
    function_name = "" 
    function_return = ""
    function = clean_element.split('(')[0].lstrip(' ').rstrip(' ').split(' ')
    print str(function) + ": " + str(len(function)) + ": " + function[len(function)-1]
    
    #print function
    if len(function)>1:
        if element.find("operator")!=-1 and len(function)>2:
            function_name = function[len(function)-2] + function[len(function)-1]
        else:
            function_name = function[len(function)-1]
            print function_name
        for r in function[:len(function)-1]:
            if r == 'static':
                m.static = True
                continue
            if r == 'operator':
                continue
            if r == 'virtual':
                continue

            function_return = function_return + " " + r
    else:
        function_name = function[0]
    #print clean_element
    
    if clean_element.rfind('const') > clean_element.rfind(')'):
        clean_element = clean_element[:clean_element.rfind('const')]
        m.constant = True
        
    function_parameters = clean_element.split('(')[1].strip('\n').strip(' ').strip(')').strip(' ')
        
    m.name = function_name
    m.returns = function_return
    m.parameters = function_parameters
    m.syntax = function_name + "("
    for p in get_parameter_names(function_parameters):
        m.syntax = m.syntax + p + ", "
    m.syntax = m.syntax.rstrip(', ')
    m.syntax = m.syntax + ")"
    return m
        
def get_parameter_types(parameters_list):
    parameters_types = []
    if len(parameters_list.strip(' '))==0:
        return parameters_types
    for p in parameters_list.split(','):
        parameter = ""
        for e in p.split(' ')[:len(p.split(' '))-1]:
            parameter = parameter + " " + e
        parameters_types.append(parameter)
    return parameters_types
    
def get_parameter_names(parameters_list):
    parameters_names = []
    if len(parameters_list.strip(' '))==0:
        return parameters_names
    for p in parameters_list.split(','):
        p = p.strip(' ')
        if p.find('=')!=-1:
            e = p.split('=')[0].strip(' ')
            parameters_names.append(e.split(' ')[len(e.split(' '))-1] + ' = ' + p.split('=')[1])
        else:
            parameters_names.append(p.split(' ')[len(p.split(' '))-1])
    return parameters_names
    
def html_encode_templates(line):
    return line.replace('<','&lt;').replace('>','&gt;')

def ofReferenceConvert():
    method = DocsMethod(0)  #from ofReference
    var = DocsVar(0)
    clazzmethod = DocsMethod(0)  #from markdown

    for root, dirs, files in os.walk(os.path.join(ofReference_path)):
        for name in files:
            file_split = os.path.splitext(name)
            if file_split[1]==".jpeg" or file_split[1]==".jpg" or file_split[1]==".gif" or file_split[1]==".png":
                try:
                    os.mkdir(os.path.join(documentation_root,os.path.basename(root)))
                except:
                    pass
                shutil.copyfile(os.path.join(root,name), os.path.join(documentation_root,os.path.basename(root),name))
            if file_split[1]=='.markdown': 
                print '###################get_class ' + file_split[0]
                clazz = getclass(file_split[0])
                clazztosave = getclass(file_split[0])
                if clazztosave.new:
                    clazztosave.module = root
                    print os.path.basename(root)

                f = open(os.path.join(root,name),'r')
                state = 'clazz'
                for line in f:
                    if state == 'clazz' and line.find('## Functions')==0:
                        state = 'functions'
                        
                    elif (state == 'clazz' or state=='method' or state=='var' or state=='functions') and line.find('###')==0:
                        element = line.replace("const ### ","const ").split('###')[1].rstrip('#').strip(' ')
                        if element.find('(')!=-1 and element.find(')')!=-1:
                            method = parse_function(element)
                            clazzmethod = clazztosave.function_by_signature(method.name,method.returns,method.parameters)
                            state = 'method'
                        else:
                            state = 'var'
                    
                    elif (state == 'clazz' or state=='method' or state=='var' or state=='functions') and line.find('##')==0:
                        #print 'class: ' + line.strip('\n')
                        clazz_name = line.split('##')[1].rstrip('#').strip(' ').strip('\n')
                        clazz = getclass(clazz_name)
                        clazztosave = getclass(file_split[0])
                        if clazztosave.new:
                            clazztosave.module = os.path.basename(root)
                            print clazztosave.module
                        state = 'clazz'
                        print clazz_name + '\n\n'
                    
                    
                    elif state == 'clazz':
                        if line.find("//----------------------")==0:
                            continue
                        line = line.replace('```cpp','$$code(lang=c++)')
                        line = line.replace('```','$$/code')
                        print unicode(line,errors='ignore')
                        clazztosave.reference = clazztosave.reference + unicode(line, errors='ignore') #.decode('cp1252'))
                        
                    elif state == 'method':
                        if line.find("//----------------------")==0:
                            continue
                        line = line.replace('```cpp','$$code(lang=c++)')
                        line = line.replace('```','$$/code')
                        clazzmethod.description = clazzmethod.description + unicode(line, errors='ignore')
                    
                    elif state == 'function':
                        pass
                    elif state == 'functions' and line.find('###')==0:
                        pass
                    
                f.close()
                setclass(clazztosave)

ofReferenceConvert()


########NEW FILE########
__FILENAME__ = testwsgi
#!/usr/bin/python

import sys
sys.path.append( "/var/www/test_new_documentation/" )

import os
import fileinput
import documentation_group

import MySQLdb
import traceback
from HTMLTemplate import Template


def renderFunction(functionLink, function):
    functionLink.link.content = function.name
    functionLink.link.atts['href'] = 'function?id' + str(function.id)
    if function.new:
        functionLink.link.atts['class'] += ' new'

def renderClass(htmlclass, doc_class):
    htmlclass.name.content = doc_class.name
    htmlclass.name.atts['href'] = 'class?id' + str(doc_class.id)
    htmlclass.function.repeat(renderFunction, doc_class.functions())

def renderGroup(htmlgroup, group):
    htmlgroup.name.content = group.name
    htmlgroup.doc_class.repeat(renderClass, group.classes())
    htmlgroup.function.repeat(renderFunction, group.functions())

def renderIndex(tem, groups):
    tem.group.repeat(renderGroup, groups)

def index():
    try:
        templates_path = str(os.path.join(os.path.dirname(__file__), 'templates'))

        file = open(templates_path + '/index.html')
        db=MySQLdb.connect(host='localhost',user='root',passwd='asdqwe34',db='of_site09')

        template = Template(renderIndex, str(file.read()))
        groups = documentation_group.list_all(db,"core", 0)
        html = str(template.render(groups))

    except Exception as inst:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        error = str(inst)           # __str__ allows args to printed directly
        error += "<br/>"
        error += str(traceback.format_exception(exc_type, exc_value,
                                          exc_traceback))
        error.replace('\n',"<br/>")

        return "Unexpected error:<br/>", error
    return [html]

def application(environ, start_response):
    template = ""
    try:
        start_response('200 OK', [('Content-Type', 'text/html')])

        html = index()

    except Exception as inst:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        error = str(inst)           # __str__ allows args to printed directly
        error += "<br/>"
        error += repr(traceback.format_exception(exc_type, exc_value,
                                          exc_traceback))
        error.replace('\n',"<br/>")

        return "Unexpected error:<br/>", error
    return html

if __name__ == '__main__':
    from wsgiref.handlers import CGIHandler
    CGIHandler().run(application)


########NEW FILE########
__FILENAME__ = _version
currentVersion = '0.8.1'


########NEW FILE########
