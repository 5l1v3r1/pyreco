
DJANGO EXAMPLE PACKAGE
======================

This package implements an example consumer and server for the Django
Python web framework.  You can get Django (and learn more about it) at

  http://www.djangoproject.com/

SETUP
=====

 1. Install the OpenID library, version 2.0.0 or later.

 2. Install Django 0.95.1.

    If you find that the examples run on even newer versions of
    Django, please let us know!

 3. Modify djopenid/settings.py appropriately; you may wish to change
    the database type or path, although the default settings should be
    sufficient for most systems.

 4. In examples/djopenid/ run:

    python manage.py syncdb

 5. To run the example consumer or server, run

    python manage.py runserver PORT

    where PORT is the port number on which to listen.

    Note that if you want to try both the consumer and server at the
    same time, run the command twice with two different values for
    PORT.

 6. Point your web browser at the server at

    http://localhost:PORT/

    to begin.

ABOUT THE CODE
==============

The example server and consumer code provided in this package are
intended to be instructional in the use of this OpenID library.  While
it is not recommended to use the example code in production, the code
should be sufficient to explain the general use of the library.

If you aren't familiar with the Django web framework, you can quickly
start looking at the important code by looking in the 'views' modules:

  djopenid.consumer.views
  djopenid.server.views

Each view is a python callable that responds to an HTTP request.
Regardless of whether you use a framework, your application should
look similar to these example applications.

CONTACT
=======

Please send bug reports, patches, and other feedback to

  http://openid.net/developers/dev-mailing-lists/

Python OpenID library example code
==================================

The examples directory contains working code illustrating the use of
the library for performing OpenID authentication, both as a consumer
and a server. There are two kinds of examples, one that can run
without any external dependencies, and one that uses the Django Web
framework. The examples do not illustrate how to use all of the
features of the library, but they should be a good starting point to
see how to use this library with your code.

Both the Django libraries and the BaseHTTPServer examples require that
the OpenID library is installed or that it has been added to Python's
search path (PYTHONPATH environment variable or sys.path).

The Django example is probably a good place to start reading the
code. There is little that is Django-specific about the OpenID logic
in the example, and it should be easy to port to any framework. To run
the django examples, see the README file in the djopenid subdirectory.

The other examples use Python's built-in BaseHTTPServer and have a
good deal of ad-hoc dispatching and rendering code mixed in

Using the BaseHTTPServer examples
=================================

This directory contains a working server and consumer that use this
OpenID library. They are both written using python's standard
BaseHTTPServer.


To run the example system:

1. Make sure you've installed the library, as explained in the
   installation instructions.

2. Start the consumer server:

        python consumer.py --port 8001


3. In another terminal, start the identity server:

        python server.py --port 8000

   (Hit Ctrl-C in either server's window to stop that server.)


4. Open your web broswer, and go to the consumer server:

        http://localhost:8001/

   Note that all pages the consumer server shows will have "Python OpenID
   Consumer Example" across the top.


5. Enter an identity url managed by the sample identity server:

        http://localhost:8000/id/bob


6. The browser will be redirected to the sample server, which will be
   requesting that you log in to proceed.  Enter the username for the
   identity URL into the login box:

        bob

   Note that all pages the identity server shows will have "Python
   OpenID Server Example" across the top.


7. After you log in as bob, the server example will ask you if you
   want to allow http://localhost:8001/ to know your identity.  Say
   yes.


8. You should end up back on the consumer site, at a page indicating
   you've logged in successfully.


That's a basic OpenID login procedure.  You can continue through it,
playing with variations to see how they work.  The python code is
intended to be a straightforward example of how to use the python
OpenID library to function as either an identity server or consumer.

Getting help
============

Please send bug reports, patches, and other feedback to

  http://openid.net/developers/dev-mailing-lists/

delegated-20060809.xrds    - results from proxy.xri.net, determined by 
                             Drummond and Kevin to be incorrect.
delegated-20060809-r1.xrds - Drummond's 1st correction
delegated-20060809-r2.xrds - Drummond's 2nd correction

spoofs: keturn's (=!E4)'s attempts to log in with Drummond's i-number (=!D2)
spoof1.xrds
spoof2.xrds
spoof3.xrds - attempt to steal @!C0!D2 by having "at least one" CanonicalID
    match the $res service ProviderID.

ref.xrds - resolving @ootao*test.ref, which refers to a neustar XRI.

This is the Python OpenID library.

[![Build Status][travis-image]][travis-link]

[travis-image]: https://secure.travis-ci.org/openid/python-openid.png?branch=master
[travis-link]: http://travis-ci.org/openid/python-openid


REQUIREMENTS
============

 - Python 2.3, 2.4, or 2.5.

 - ElementTree.  This is included in the Python 2.5 standard library,
   but users of earlier versions of Python may need to install it
   seperately.

 - pycrypto, if on Python 2.3 and without /dev/urandom, or on Python
   2.3 or 2.4 and you want SHA256.


INSTALLATION
============

To install the base library, just run the following command:

python setup.py install

To run setup.py you need the distutils module from the Python standard
library; some distributions package this seperately in a "python-dev"
package.


GETTING STARTED
===============

The examples directory includes an example server and consumer
implementation.  See the README file in that directory for more
information on running the examples.

Library documentation is available in html form in the doc directory.


LOGGING
=======

This library offers a logging hook that will record unexpected
conditions that occur in library code. If a condition is recoverable,
the library will recover and issue a log message. If it is not
recoverable, the library will raise an exception. See the
documentation for the openid.oidutil module for more on the logging
hook.


DOCUMENTATION
=============

The documentation in this library is in Epydoc format, which is
detailed at:

  http://epydoc.sourceforge.net/


CONTACT
=======

Send bug reports, suggestions, comments, and questions to
http://openid.net/developers/dev-mailing-lists/.

If you have a bugfix or feature you'd like to contribute, don't
hesitate to send it to us.  For more detailed information on how to
contribute, see

  http://openidenabled.com/contribute/

