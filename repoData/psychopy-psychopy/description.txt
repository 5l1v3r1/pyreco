Balloon Analogue Risk Task (BART) 
------------------------------------------------------------------

The experiment: 
    
    This is a simplified (and prettified) version of the BART task by 
    Lejuez et al (2002). Participants have to blow up a balloon that they know
    will burst at some point. They 'earn' rewards for getting the balloons to be
    larger, but increase the risk of bursting it, in which case they earn no 
    reward for that balloon. The question is, how many times does someone pump
    each balloon trying to optimise their rewards. 
    
    The measure is designed to quantify individual differences in risk-taking.

Analysing your data:

    You should filter out data where the balloon burst and measure the number of 
    pumps made for the remaining trials.

Notes: 
    
    THIS IS AN ADVANCED DEMO INVOLVING LOTS OF CODE COMPONENTS
    
    NB this could be extended to be more similar to the original paper by adding
    further colours of balloons with different bursting profiles.
Branching in a PsychoPy Builder experiment
------------------------------------------------------------------

The experiment: 
    
    This isn't really an experiment

Analysing your data:

    n/a
    
Notes: 
    
    There are two ways to stop a set of trials from running. The method
    used here is to set the `finished` attribute of a particular loop to
    be True. This allows you to abort a set of trials even during a run
    (e.g. based on the outcome of the previous trials).
    
    The second, simpler, method is to set the nReps of a loop to be zero.
    This is handy while testing you experiment to run only a subset of the
    trials (e.g. to skip the practice trials).
Stroop - with ioHub Eye Tracking Device via Custom Code Component.
------------------------------------------------------------------

This is a lot like the original Stroop task provided in the PsychoPy demos. 

We just added a Code Component to add ioHub eye tracking features:
    1) check that fixation was maintained throughout the trial. 
    2) calculate a moving window average for pupil size
    3) During a trial, display a gaze cursor for eye position if the 'g' key is pressed.
    4) If displayed, the gaze cursor is scaled based on the latest pupil size calculation.
    
To enable the eye tracking functionality in the demo, you need to add the name of an eye-tracker config file during the experiment settings dialog. The default is for the SMI iView system. If using another eye tracker type, replace the default text with the name of the appropriate ET config yaml file.

Please edit the config file to set the display parameters and eye tracking parameters so they are valid for your setup.


Stroop - with ioHub Keyboard Device via Custom Code Component.
------------------------------------------------------------------

This is a lot like the original Stroop task provided in the PsychoPy demos. 

We just added a Code Component to add access to ioHub Keyboard events, for keydown time info.

Please edit the iohub_config.yaml file to set the display device parameters so they are valid for your setup.


                                Mental Rotation

Letter version of a classic cognitive task. Works well in individual subjects, and
group settings; classroom-tested 2013.

The time taken to decide if two images are the same or different depends ~linearly on
the angle of rotation. So the longest time should be at 180 degress, and the expected
result is a peak-shape graph of RT as a function of rotation angle.

Illustrates saving data into a temporary file, parsing it at the end of the run (using
pandas), display results in a plot (using matplotlib).

Authors: Jeremy R. Gray & Nathaniel R. Pasmanter

Copyright (c) 2013 MICHIGAN STATE UNIVERSITY BOARD OF TRUSTEES
All rights reserved.
Released under a licence quite compatible with GPL. See "license" (its in a routine).
Navon (1977) - global/local processing
------------------------------------------------------------------

The experiment: 
    
    This is another interference-based cognitive psychology experiment.
    Large letters are presented that are made up of smaller letters
    and the small and large letters may be the same (congruent) or different.
    The question is whether the incongruence affects your reaction time to detect
    the large letter, or the small letter.
    
    In this version you need to respond as quickly as possible to report the
    identity of the small letters.

Analysing your data:

    After the experiment a data/ folder will have been created for you, and it
    will contain an excel file with your data. Sort your data by congruence and
    see how your mean reaction time compares for congruent and incongruent trials
    
Notes: 
    
    This study includes a feedback Routine and the trial has several stimuli
    coming on and off at different times
        A practical IAT in PsychoPy: Creative-Practical x Good-Bad

Copyright (C) Jeremy R. Gray, 2014. Released under the terms of the GPLv3.
Contact jrgray@gmail.com

Authors: Jeremy R. Gray, Nathaniel Pasmanter

Task modeled after that reported by JS Mueller, et al.,â€Ž2011, Psych Science.

To obtain a bias score, use the script provided in the "Practical IAT" directory:
% python scoreIAT.py data/data_file_name.csv
data_file_name.csv 0.081

A positive D value (e.g., 0.081) indicates a bias in favor of "practical good / creative bad".

Uses scoring procedure outlined in Nosek et al. (2007), developed by Greenwald Nosek & Banaji (2003), except that RT on incorrect responses do not contribute to average RT (and there's no RT penalty for incorrect responses).

Checks for following exclusionary criteria:
 - 25% of responses too fast in any one of the critical blocks
 - going too fast (<300 ms) on more than 10% of responses across all critical blocks
 - 35% too fast in any one of the practice blocks
 - making more than 30% erroneous responses across the critical blocks
 - 40% errors in any one of the critical blocks
 - 40% errors across all of the practice blocks
 - 50% errors in any one of the practice blocks

Detection threshold with a staircase
------------------------------------------------------------------

The experiment: 
    
    This experiment presents a Gabor (a sinusoid in a Gaussian window) with
    an orientation of your choosing. On each trial the subject reports whether
    or not they saw the stimulus with the up/down cursor keys. If they did see
    it 3 times in a row then the stimulus reduces in contrast, if they fail to
    see it, the stimulus immediately increases in contrast.

Analysing your data:

    After the experiment a data/ folder will have been created for you, and it
    will contain an excel file with your data.
    
    For a staircase the data file contains a numebr of things that could be used
    in the analysis; the intensity of the stimulus at each of the reversal points,
    the intensity on every trial and the response (correct or incorrect) on every
    trial too.
    
    Commonly people analyse staircase data by taking the average of the last few
    (e.g. 4) reversal intensities. A more advanced analysis is provided as a 
    Coder demo called JND_staircase analysis. This collapses data across all
    the levels presented during the run(s) and fits a psychometric curve to this
    averaged data.
    
Notes: 
    
    The current value of the staircase can be found using the variable name 'level'
    or, equivalently, 'thisXXXX' where XXXX is the singular name of the loop
    (e.g. if you have a staircase loop called trials you could access thisTrial).
    For this demo you can see the use of 'level' by looking at the advanced
    properties>color of the gabor stimulus.
Measuring detection threshold using 2AFC task with interleaved adaptive staircases
=====================================================================================

The experiment
--------------------

    Measure your detection thresholds for two different spatial frequencies of grating. See notes about the staircases below. It's 160 trials long (4 staircases of 40 reps each) so it will take. Respond as quickly as you can and it will be over in about 5 mins!

Notes
--------------------

    1) This has been set up to use the 'testMonitor' with units of degrees. To make this work YOU NEED TO GO TO MONITOR CENTRE and set up the dimension and distance for testMonitor. You can see in the Experiment Settings that the default units for the experiment are then set to be 'deg' (which means spatial frequency is going to be in c/deg).

    2) To decide whether the stimulus appears on the left or right a Code Component called `setSide`has been used to determine which is the correct key to press and the position of the grating.

    3) The fixation point goes off between trials to alert the subject that the next trial is occuring
    
    4) Right now the experiment uses seconds for timing (for simplicity) but to be precise N frames would be better, particularly for the grating stimulus duration.
    
    5) This experiment obviously isn't using any precise way to control contrast (like a CRS Bits# box with a CRT screen), so the estimates of your 
    
The staircases
--------------------

    The experiment uses 4 adaptive staircases with interleaved trials. The set up of the stairs can be seen in the excel file in this folder: there a 2 spatial frequencies and for each there are two staircases, one starting at a very low contrast and another starting at a high contrast. The step size for the staircase is changing each time the staircase reverses in its direction, as determined by the stepSize column in the conditions file.
This file contains a series of demonstration experiments to be used with the 
Builder interface of PsychoPy (www.psychopy.org).

To run these demos you need to unzip the file to a new folder (on windows you may
be viewing this file from within the zip file, but you should copy the enclosed  
folders to a new directory).

Each demo has further notes about its use and analysis within its folder.

Feel free to submit demos of your own studies to the PsychoPy list so they can be
included here.

Note that the demos presented are generally adaptations from classic studies, 
in which timings and details are likely to differ from the originals.


Cognitive psychology
------------------------

 - Stroop - measuring reaction times to incongruent stimuli
    NB: simple first experiment
    
 - Stroop Extended
    NB: similar to Stroop but shows how to provide feedback and practice trials
    
 - Sternberg (1966) - serial/parallel search in short term memory

 - Navon (1977) - global/local processing in perception

 - branchedExp - OK, this one isn't really an experiment. It just shows how to do branching in the builder

Psychophysics studies
--------------------------

 - Psychophysics staircase - using a staircase to get a detection threshold


Social Psychology
--------------------------

 - BART - Balloon analogue risk task
    NB: This is a *advanced* demo with lot's of Code Components. It shows how
    flexible PsychoPy can be with some python scripting mixed in.
Sternberg (1968) - serial/parallel search of short-term memory
------------------------------------------------------------------

The experiment: 
    
    In this task subjects must report whether or not a given target was present
    in a previous set of items. The set of values varies in length and the target
    can occur at any position in the set (or not at all). If participants
    search their memory of the set in a 'serial' fashion then their average 
    response time will increase with increasing set size. If memory can be 
    searched in a 'parallel' fashion then RT will be independent of set size.

Analysing your data:

    In the Excel file, in the data/ folder after running the experiment, sort
    the data by set size. Take the RT (the column resp.rt_mean) for all
    the rows with a given set size and calculate the mean. Compare these means
    for different set sizes.
    You could also break the data down by trials where the target was actually
    present or actually absent to investigate whether the search was 'self-
    terminating'.

Notes: 
    
    This study provides a slightly more rich temporal setup; multiple objects 
    must be manipulated and presented at different times on each trial and with 
    a precise time.
Stroop - measuring reaction times to incongruent stimuli
------------------------------------------------------------------

The experiment: 
    
    In this task subjects must report the colour of the letters spelling each
    word, but letters themselves also spell a colour name and this may be the
    same or different to the colour of the letters. Stroop (1935) reports that
    reaction times are slower the letters spell a colour that is incongruent
    with the colour of the letters, indicating a compulsory automated reading of
    the word.

Analysing your data:

    After you run the study, look in the data/ folder next to where the 
    experiment was saved. There will be an xlsx file there that can be opened
    with Microsoft Excel or similar spreadsheet package. Each row represents
    one condition (trial type) and each column is one variable of your experiment
    or type of data collected. 
    Take the average of the resp.mean_rt column for the 3 congruent conditions 
    and compare them with the 3 incongruent conditions. In most cases the 
    incongruent conditions will have larger reactions times. 

Notes: 
    
    This version of the Stroop effect is a very simple experiment, good for 
    explaining how the PsychoPy Builder interface works with minimal clutter. 
    You could (as a challenge) add practice trials and feedback if you liked...
    or you could go to the StroopExtended demo and see how to do it there!
Stroop Extended - a better implementation of the Stroop task
------------------------------------------------------------------

The experiment: 
    
    The experiment is much like that in the Stroop demo (with some minor changes
    to the trial list file and to timing).
    
    What differs is that there are now practice trials, with feedback provided.
    There is also a 'reverseStroop' version of the experiment, whereby subjects
    must report the colour spelled out by the word, instead of the letter colour
    used in the normal Stroop effect.

Analysing your data:

    Exactly as with the Stroop demo, except that, because there are two loops in
    the flow (for practice trials and main trials) there are now two worksheets
    in the Excel document.

Notes: 
    
    This version demonstrates more of the flexibility of PsychoPy. You can have
    multiple loops and they can span multiple Routines. A single Routine (e.g.
    trial) can be included in multiple places in the Flow, but beware that the
    trial list will need to have the same entries.
    
    Also have a look at the 'feedback' Routine. This is a little more involved
    than some other Routines because it does require a Code Component containing
    python scripting code. But the *good news* is that this Routine can be 
    copied and pasted to other experiments (see the Experiment menu) 
    and will work in most cases where the keyboard has been used with 'store 
    correct answer' turned on.
Thanks for downloading PsychoPy!

MORE INFO:
See the documantation at
	http://www.psychopy.org
and run the included demos.

FEEDBACK:
I would really appreciate your feedback. What things would you like added? What should be done differently?

Join the mailing list at:
    http://groups.google.com/group/psychopy-users
Report bugs at:
    http://code.google.com/p/psychopy/issues

# PsychoPy

PsychoPy is an open-source package for creating psychology stimuli in Python (A real and free alternative to Matlab). PsychoPy combines the graphical strengths of OpenGL with the easy Python syntax to give psychophysics a free and simple stimulus presentation and control package.

The goal is to provide, for the busy scientist (including me!), tools to control timing and windowing and a simple set of pre-packaged stimuli and methods. The code is platform independent, using Python and C libraries that are widely available.

## Contributions

To contribute, please fork the repository, hack in a feature branch, and send a pull request.  For more, see http://www.psychopy.org/developers/repository.html.

## Code status

* [![tests status](https://secure.travis-ci.org/psychopy/psychopy.png?branch=master)](https://travis-ci.org/psychopy/psychopy) travis-ci.org (master branch)

* [![coverage status](https://coveralls.io/repos/psychopy/psychopy/badge.png?branch=master)](https://coveralls.io/r/psychopy/psychopy) coveralls.io (master branch)

## More information

- Homepage: http://www.psychopy.org
- Mailing list: https://groups.google.com/forum/?fromgroups#!forum/psychopy-users

