Cryptography
============

.. image:: https://pypip.in/version/cryptography/badge.svg
    :target: https://pypi.python.org/pypi/cryptography/
    :alt: Latest Version

.. image:: https://travis-ci.org/pyca/cryptography.svg?branch=master
    :target: https://travis-ci.org/pyca/cryptography

.. image:: https://coveralls.io/repos/pyca/cryptography/badge.png?branch=master
    :target: https://coveralls.io/r/pyca/cryptography?branch=master


``cryptography`` is a package which provides cryptographic recipes and
primitives to Python developers.  Our goal is for it to be your "cryptographic
standard library". It supports Python 2.6-2.7, Python 3.2+, and PyPy.

``cryptography`` includes both high level recipes, and low level interfaces to
common cryptographic algorithms such as symmetric ciphers, message digests and
key derivation functions. For example, to encrypt something with
``cryptography``'s high level symmetric encryption recipe:

.. code-block:: pycon

    >>> from cryptography.fernet import Fernet
    >>> # Put this somewhere safe!
    >>> key = Fernet.generate_key()
    >>> f = Fernet(key)
    >>> token = f.encrypt(b"A really secret message. Not for prying eyes.")
    >>> token
    '...'
    >>> f.decrypt(token)
    'A really secret message. Not for prying eyes.'

You can find more information in the `documentation`_.

Discussion
~~~~~~~~~~

If you run into bugs, you can file them in our `issue tracker`_.

We maintain a `cryptography-dev`_ mailing list for development discussion.

You can also join ``#cryptography-dev`` on Freenode to ask questions or get
involved.


.. _`documentation`: https://cryptography.io/
.. _`issue tracker`: https://github.com/pyca/cryptography/issues
.. _`cryptography-dev`: https://mail.python.org/mailman/listinfo/cryptography-dev

Example test files for FIPS 186-2 DSA

1. The files with extension '.rsp' are response files in the proper format for CAVS validation.

2. The file PQGGen.txt contains values for DSA domain parameter generation with intermediate results for generating the
prime p according to Appendix 2, section 2.2 "Generation of Primes."

3. The file SigGen.txt contains values for DSA signature generation with the
following additional values needed to calculate r and s as in Section 5:
	a. 'x' -- The private key.
	
	b. 'k' -- A randomly-generated parameter, unique for each message, used to
	compute r and s.  See Section 4 and Appendix 3 for more information on k.
Example test files for FIPS 186-3 DSA

1. The files with extension '.rsp' are response files in the proper format for
CAVS validation.

2. The file PQGGen.txt contains values for DSA domain parameter generation with
intermediate results for the following:

    a. For 'A.1.1.2 Generation of the Probable Primes p and q Using an Approved
	Hash Function', the value of the prime 'p' after step 11.5 for the first
	five values of counter (i.e., 0 to 4) is printed out.
	
	b. For 'A.1.2.1 Construction of the Primes p and q Using the Shawe-Taylor
	Algorithm', three sets of intermediate values are provided:
	    1. All values of 'q' and 'qgen_counter' computed with 'C.6 Shawe-Taylor'
		are printed.
		
		2. All values of 'p0' with corresponding value of 'pgen_counter'
		computed with Shawe-Taylor are printed.
		
		3. The first five intermediate values of the prime 'p' at Step 13 of
		A.1.2.1.2, with corresponding value of 'pgen_counter', are printed.

3. The file SigGen.txt contains values for DSA signature generation with the
following additional values needed to calculate r and s as in Section 4.6:
	a. 'x' -- The private key.
	
	b. 'k' -- The Per-message secret number (PMSN) used to compute R and S.
	See Section 4.5 and Appendix B.2 for more information on the PMSN.
Example test files for FIPS 186-2 ECDSA

1. The files with extension '.rsp' are response files in the proper format for
CAVS validation.

2. The file SigGen.txt contains values for ECDSA signature generation with the
following additional values needed to calculate r and s as in X9.62:
	a. 'd' -- The private key.
	
	b. 'k' -- The random value used in calculating signature (r, s).
	See ANS X9.62.
Example test files for FIPS 186-3 ECDSA

1. The files with extension '.rsp' are response files in the proper format for
CAVS validation.

2. The file SigGen.txt contains values for ECDSA signature generation with the
following additional values needed to calculate r and s as in Section 6.4:
	a. 'd' -- The private key.
	
	b. 'k' -- The Per-message secret number (PMSN) used to compute (r, s).
	See Section 6.3 and Appendix B.5 for more information on the PMSN.
Example test files for FIPS 186-2 RSA

1. The files with extension '.rsp' are response files in the proper format for CAVS validation.

2. The file SigGenRSA_186-2.txt contains values for X9.31RSA signature generation with the additional value d added to the file for testing purposes.

3.  The file SigGen15_186-2.txt contains values for RSA PKCS#1 Ver 1.5 signature geenration with the additional value d added to the file for testing purposes.

4.  The file SigGenPSS_186-2.txt contains values for RSA PKCS#1 RSASSA-PSS signature generation with the additional value d and Saltvalue added to the file for testing purposes.
====================
pkcs-1v2-1d2-vec.zip
====================

This directory contains test vectors for RSA-OAEP and RSA-PSS 
as defined in the second draft of PKCS #1 v2.1.

The files:

readme.txt              This file.
oaep-vect.txt           Test vectors for RSA-OAEP encryption.
oaep-int.txt            Intermediate values for RSA-OAEP 
                        encryption and RSA decryption with CRT. 
                        Also, BER-encoded RSAPrivateKey and 
                        RSAPublicKey types.
pss-vect.txt            Test vectors for RSA-PSS signing.
pss-int.txt             Intermediate values for RSA-PSS signing.

There are two sets of SHA example files:

1. The response (.rsp) files contain properly formatted CAVS response files.

2. The intermediate value (.txt) files for the Monte Carlo tests contain
   values for the inner loop as shown in the pseudocode in Figure 1 on page 9
   of the SHA Validation System.  The inner loop variable 'i' ranges in value
   from 3 to 1002.  The intermediate values for the first five iterations of
   the inner loop therefore correspond to 'i' values of 3 to 7. The message (M)
   and the message digest (MDi) for each of these i are printed out, indented
   by one tab space.  The final message digest (MD), not indented, is the last
   value printed for each count.

   
The SHA Validation System document can be found at:

http://csrc.nist.gov/groups/STM/cavp/documents/shs/SHAVS.pdf.
There are two sets of SHA example files:

1. The response (.rsp) files contain properly formatted CAVS response files.

2. The intermediate value (.txt) files for the Monte Carlo tests contain
   values for the inner loop as shown in the pseudocode in Figure 1 on page 9
   of the SHA Validation System.  The inner loop variable 'i' ranges in value
   from 3 to 1002.  The intermediate values for the first five iterations of
   the inner loop therefore correspond to 'i' values of 3 to 7. The message (M)
   and the message digest (MDi) for each of these i are printed out, indented
   by one tab space.  The final message digest (MD), not indented, is the last
   value printed for each count.

   
The SHA Validation System document can be found at:

http://csrc.nist.gov/groups/STM/cavp/documents/shs/SHAVS.pdf.
