This is the pyOpenSSL documentation source.  It uses Sphinx.  To build the
documentation, install Sphinx 1.0 and run:

    $ make html

I've finally gotten around to writing some examples :-)

They aren't many, but at least it's something. If you write any, feel free to
send them to me and I will add themn.


certgen.py - Certificate generation module
==========================================

Example module with three functions:
  createKeyPair     - Create a public/private key pair
  createCertRequest - Create a certificate request
  createCertificate - Create a certificate given a cert request
In fact, I created the certificates and keys in the 'simple' directory with
the script mk_simple_certs.py


simple - Simple client/server example
=====================================

Start the server with
    python server.py PORT
and start clients with
    python client.py HOST PORT

The server is a simple echo server, anything a client sends, it sends back.


proxy.py - Example of an SSL-enabled proxy
==========================================

The proxy example demonstrate how to use set_connect_state to start
talking SSL over an already connected socket.

Usage: python proxy.py server[:port] proxy[:port]

Contributed by Mihai Ibanescu


SecureXMLRPCServer.py - SSL-enabled version of SimpleXMLRPCServer
=================================================================

This acts exactly like SimpleXMLRPCServer from the standard python library,
but uses secure connections. The technique and classes should work for any
SocketServer style server. However, the code has not been extensively tested.

Contributed by Michal Wallace


To use this example, first generate keys and certificates for both the
client and the server.  You can do this with the script in the directory
above this one, mk_simple_certs.py.

This directory contains client and server examples for the "Server Name
Indication" (SNI) feature.

Run server.py with no arguments.  It will accept one client connection and
then exit.  It has two certificates it can use, one for "example.invalid"
and another for "another.invalid".  If a client indicates one of these names
to it, it will use the corresponding certificate for that connection (if a
client doesn't indicate a name or indicates another name, it won't try to
use any certificate).

Run client.py with one argument, the server name to indicate.  For example:

  $ python client.py example.invalid
  Connecting... connected ('127.0.0.1', 8443)
  Server subject is <X509Name object '/OU=Security/O=pyOpenSSL/CN=example.invalid/ST=New York/C=US/emailAddress=invalid@example.invalid/L=New York'>
  $

Depending on what hostname is supplied, the server will select a different
certificate to use and the client output will be different.

These tests are meant to be run using twisted's "trial" command.

See http://twistedmatrix.com/trac/wiki/TwistedTrial

For example...

$ sudo python ./setup install
$ trial OpenSSL


pyOpenSSL - A Python wrapper around the OpenSSL library
------------------------------------------------------------------------------

See the file INSTALL for installation instructions.

See http://github.com/pyca/pyopenssl for development.

See https://mail.python.org/mailman/listinfo/pyopenssl-users for the discussion mailing list.

.. image:: https://coveralls.io/repos/pyca/pyopenssl/badge.png
  :target: https://coveralls.io/r/pyca/pyopenssl

