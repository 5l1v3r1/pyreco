Authors (Ordered by date of first contribution)
===============================================

* Alejandro Conty Estevez (aconty AT gmail.com)
* Conrad Wong
* Jeff Terrace (jterrace AT gmail.com)
* Rehno Lindeque
* Dusan Maliarik
* Ewen Cheslack-Postava
* Ole Laursen
* Andrey Nechypurenko (andreynech AT gmail.com)
* Guohui Xiao (xiao AT kr.tuwien.ac.at)


This example illustrates how to visualize COLLADA model using
OpenGL. As a Python wrapper for OpenGL API the pyglet library
(http://www.pyglet.org/) is used. Please see some more details
regarding pyglet in the requirements.txt file.

There are two renderers implemented:
* GLSLRenderer which uses OpenGL shaders and VBOs.
* OldStyleRenderer which uses now deprecated display lists to draw the
  model.

By default, this example uses GLSLRenderer which is fast and is the
way to go with modern OpenGL API. However, most probably because of
bug in our shaders code, there are some visualization artifacts when
using GLSLRenderer.

In contrast, OldStyleRenderer is slower but it produces more correct
results. Also, the code is quite straight forward and should be easy
to understand. OldStyleRenderer works fine on Windows but throws error
on Linux and OSX. So please feel free to experiment and find out which
one works for you.

To switch between two renderes, just comment/uncomment corresponding
code at line 64-65 in daeview.py. For example, to use
OldStyleRenderer:
  #daerender = renderer.GLSLRenderer(collada_file)
  daerender = renderer.OldStyleRenderer(collada_file, window)

To run the example, simply execute daeview.py <dae_file_name>. There
are some models to test in the data/ directory. If started without
parameters, cockpit.zip will be displayed.

This example is not intended to be complete DAE viewer and might fail
to display some files. The main purpose of this example is to help
understand how to get access to the important information and traverse
the data structures created by pycollada after parsing certain dae
file.

Regards,
Andrey Nechypurenko (andreynech@gmail.com)

# pycollada

pycollada is a python module for creating, editing and loading
[COLLADA](http://www.collada.org/), which is a COLLAborative Design Activity
for establishing an interchange file format for interactive 3D applications.

The library allows you to load a COLLADA file and interact with it as a python
object. In addition, it supports creating a collada python object from scratch,
as well as in-place editing.

You can get help at the [pycollada mailing list](https://groups.google.com/d/forum/pycollada).

See the [pycollada Documentation](http://pycollada.readthedocs.org/) for more
information.

[![Build Status](https://secure.travis-ci.org/pycollada/pycollada.png)](http://travis-ci.org/#!/pycollada/pycollada)

## Projects using pycollada

* [FreeCAD COLLADA Import/Export](http://sourceforge.net/apps/mediawiki/free-cad/index.php?title=Main_Page)
* [Blender COLLADA Importer](https://github.com/skrat/bpycollada)
* [Meshtool](https://github.com/pycollada/meshtool)
* [SceneJS COLLADA Import](https://github.com/xeolabs/scenejs-pycollada)
* [Faces in Relief](https://itunes.apple.com/us/app/faces-in-relief/id571820477?ls=1&mt=8)

