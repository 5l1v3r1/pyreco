__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-profiletools documentation build configuration file, created by
# sphinx-quickstart on Thu Aug  9 06:38:45 2012.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-profiletools'
copyright = u'2012, Daniel Greenfeld'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '0.2.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'proBlue'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = ["."]

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-profiletoolsdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-profiletools.tex', u'django-profiletools Documentation',
   u'Daniel Greenfeld', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-profiletools', u'django-profiletools Documentation',
     [u'Daniel Greenfeld'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'django-profiletools', u'django-profiletools Documentation',
   u'Daniel Greenfeld', 'django-profiletools', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

########NEW FILE########
__FILENAME__ = context_processors
from profiletools.utils import get_my_profile_module_name


def fetch_profile(request):
    """ attaches the user.profile object into the request object"""

    context = {}
    if request.user.is_authenticated():
        profile_module_name = get_my_profile_module_name()
        profile = getattr(request, profile_module_name, None)
        if profile != None:
            context[profile_module_name] = profile
    return context

########NEW FILE########
__FILENAME__ = forms
from django import forms

from profiletools.utils import get_profile_model

PROFILE_MODEL = get_profile_model()


class ProfileForm(forms.ModelForm):

    class Meta:
        model = PROFILE_MODEL
        exclude = getattr(PROFILE_MODEL, "exclude", ('user', ))
        fields = getattr(PROFILE_MODEL, "fields", ())        

########NEW FILE########
__FILENAME__ = middleware
from django.utils.functional import SimpleLazyObject

from profiletools.utils import get_profile, get_my_profile_module_name

# preload this variable
my_profile_module_name = get_my_profile_module_name()


class LazyProfileMiddleware(object):
    """Middleware to attach a lazy .profile value to all requests.
        This reduces the number of queries per request substantially
    """

    def process_request(self, request):
        self.user = request.user
        setattr(request.__class__,
                my_profile_module_name,
                SimpleLazyObject(lambda: get_profile(request.user)))


########NEW FILE########
__FILENAME__ = models
# Django boilerplate here

########NEW FILE########
__FILENAME__ = utils
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist
from django.db.models import get_model


def get_profile(user):

    """ Rather than throw an error on get_profile, we just return None.
        Makes handling of anonymous users in non-loggedin areas easier.
    """
    if user.is_anonymous():
        return None

    try:
        return user.get_profile()
    except ObjectDoesNotExist:
        return None


def get_my_profile_module_name():
    """ Figures out the name of the profile model name from the AUTH_PROFILE_MODULE setting

        Examples:

            my_profile = profiles.Profile
            my_membership = members.Membership
    """
    my_profile_module_name = settings.AUTH_PROFILE_MODULE.split('.')[-1].lower()
    return "my_{0}".format(my_profile_module_name)


def get_profile_model():

    app_name = settings.AUTH_PROFILE_MODULE.split('.')[-2]
    model_name = settings.AUTH_PROFILE_MODULE.split('.')[-1]
    return get_model(app_name, model_name)

########NEW FILE########
__FILENAME__ = views
from django.views.generic import DetailView, UpdateView, ListView

from braces.views import LoginRequiredMixin

from profiletools.forms import ProfileForm
from profiletools.utils import get_profile_model

PROFILE_MODEL = get_profile_model()


class ProfileDetailView(LoginRequiredMixin, DetailView):
    """ Called thus with an ID::

        url(regex=r'^/(?P<pk>\d+)/$',
            view=views.ProfileDetailView.as_view(),
            name='profile_update'),

    """
    model = PROFILE_MODEL


class ProfileUpdateView(LoginRequiredMixin, UpdateView):
    """ Called thus with a slug::

            url(regex=r'^/(?P<slug>[\_-\w]+)/$',
                view=views.ProfileUpdateView.as_view(
                    success_url="/",
                ),
                name='profile_update'),

        Or thus with an ID::

            url(regex=r'^/(?P<pk>\d+)/$',
                view=views.ProfileUpdateView.as_view(
                    success_url="/",
                ),
                name='profile_update'),

    """

    model = PROFILE_MODEL
    form_class = ProfileForm


class ProfileUpdateNoSlugView(ProfileUpdateView):
    """ Called thus::
            url(regex=r'^edit-my-crazy-profile/$',
                view=views.ProfileUpdateView.as_view(
                    success_url="edit-my-crazy-profile",
                ),
                name='profile_update'),
    """

    def get_object(self):
        return PROFILE_MODEL.objects.get(user=self.request.user)


class DefaultProfileUpdateNoSlugView(ProfileUpdateView):

    def get_object(self):
        profile, created = PROFILE_MODEL.objects.get_or_create(
            user=self.request.user
        )
        return profile


class ProfileListView(ListView):
    """ Called thus::

        url(regex=r'^$',
            view=views.ProfileListView.as_view(),
            name='profile_list'),
    """
    model = PROFILE_MODEL


class LoginRequireProfileListView(LoginRequiredMixin, ListView):
    """ Called thus::

        url(regex=r'^$',
            view=views.LoginRequireProfileListView.as_view(),
            name='profile_list'),
    """
    model = PROFILE_MODEL

########NEW FILE########
