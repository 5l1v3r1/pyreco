__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# pydanny-event-notes documentation build configuration file, created by
# sphinx-quickstart on Fri Jul  8 17:06:36 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

from datetime import datetime
import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'pydanny-event-notes'
copyright = u'2007-%s, Daniel Greenfeld. Some rights reserved: http://creativecommons.org/licenses/by/3.0/us/' % datetime.now().year

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '45'
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'pydanny-event-notesdoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'pydanny-event-notes.tex', u'pydanny-event-notes Documentation',
   u'Daniel Greenfeld', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'pydanny-event-notes', u'pydanny-event-notes Documentation',
     [u'Daniel Greenfeld'], 1)
]

########NEW FILE########
__FILENAME__ = blitz_inline_compare
""" weave_blitz_compare

    This example takes the numpy expression used in the filter_image
    exercise and compares the speed of numpy to that of weave.blitz.
    
    Read in the lena image and use an averging filter
    to "smooth" the image.  Use a "5 point stencil" where
    you average the current pixel with its neighboring pixels

                   0 0 0 0 0 0 0
                   0 0 0 x 0 0 0
                   0 0 x x x 0 0
                   0 0 0 x 0 0 0 
                   0 0 0 0 0 0 0
    
    Once you have a numpy expression that works correctly, time it
    using time.time (or time.clock on windows).
    
    Use scipy.weave.blitz to run the same expression.  Again time it.
    
    Compare the speeds of the two function and calculate the speed-up 
    (numpy_time/weave_time).
    
    Plot two images that result from the two approaches and compare them.
"""

import time
from numpy import empty, float64
from scipy import lena
from scipy import weave
from matplotlib.pylab import subplot, imshow, title, show, gray, figure

img = lena()

expr = """avg_img =(  img[1:-1 ,1:-1]  # center
                    + img[ :-2 ,1:-1]  # left
                    + img[2:   ,1:-1]  # right
                    + img[1:-1 , :-2]  # top
                    + img[1:-1 ,2:  ]  # bottom
                    ) / 5.0"""


########NEW FILE########
__FILENAME__ = blitz_inline_compare_solution
""" weave_blitz_compare

    This example takes the numpy expression used in the filter_image
    exercise and compares the speed of numpy to that of weave.blitz.
    
    Read in the lena image and use an averging filter
    to "smooth" the image.  Use a "5 point stencil" where
    you average the current pixel with its neighboring pixels

                   0 0 0 0 0 0 0
                   0 0 0 x 0 0 0
                   0 0 x x x 0 0
                   0 0 0 x 0 0 0 
                   0 0 0 0 0 0 0
    
    Once you have a numpy expression that works correctly, time it
    using time.time (or time.clock on windows).
    
    Use scipy.weave.blitz to run the same expression.  Again time it.
    
    Compare the speeds of the two function and calculate the speed-up 
    (numpy_time/weave_time).
    
    Plot two images that result from the two approaches and compare them.
"""

from numpy import empty, float64
from scipy import lena
from scipy import weave
from matplotlib.pylab import subplot, imshow, title, show, gray, figure

img = lena()

expr = """avg_img =(  img[1:-1 ,1:-1]  # center
                    + img[ :-2 ,1:-1]  # left
                    + img[2:   ,1:-1]  # right
                    + img[1:-1 , :-2]  # top
                    + img[1:-1 ,2:  ]  # bottom
                    ) / 5.0"""

import time
t1 = time.clock()
for i in range(10):
    exec expr
t2 = time.clock()                         
numpy_time = t2-t1
numpy_avg_img = avg_img

avg_img = empty((img.shape[0]-2, img.shape[1]-2), dtype=float64)

# Run it once so that it gets compiled.
weave.blitz(expr)

import time
t1 = time.clock()
for i in range(10):
    weave.blitz(expr)
t2 = time.clock()                         
blitz_time = t2-t1
blitz_avg_img = avg_img

avg_img = empty((img.shape[0]-2, img.shape[1]-2), dtype=float64)
code = """for (int i=0; i<Navg_img[0];i++)
          { 
            for (int j=0; j<Navg_img[1];j++)  
            {
              AVG_IMG2(i,j) =(  IMG2(i+1 ,j+1)  // center
                              + IMG2(i ,  j+1)  // left
                              + IMG2(i+2, j+1)  // right
                              + IMG2(i+1 ,j  )  // top
                              + IMG2(i+1 ,j+2)  // bottom
                              ) / 5.0;
            }
          }                    
       """

weave.inline(code,['avg_img', 'img'],compiler='gcc')
t1 = time.clock()
for i in range(10):
    weave.inline(code,['avg_img', 'img'],compiler='gcc')
t2 = time.clock()                         
inline_time = t2-t1

inline_avg_img = avg_img

print 'numpy, blitz, speed-up:', numpy_time, blitz_time, numpy_time/blitz_time
print 'numpy, inline, speed-up:', numpy_time, inline_time, numpy_time/inline_time
# Set colormap so that images are plotted in gray scale.
gray()

# Plot the original image first
figure()
subplot(2,3,1)
imshow(numpy_avg_img)
title('numpy filtered image')

# Now the filtered image.
subplot(2,3,2)
imshow(blitz_avg_img)
title('blitz filtered image')

# Now the filtered image.
subplot(2,3,3)
imshow(inline_avg_img)
title('inline filtered image')

# And finally the difference between the two.
subplot(2,3,5)
imshow(numpy_avg_img - blitz_avg_img)
title('blitz difference')    

# And finally the difference between the two.
subplot(2,3,6)
imshow(numpy_avg_img - inline_avg_img)
title('inline difference')    

show()

########NEW FILE########
__FILENAME__ = calc_derivative
# Caluculate the numerical derivative of sin from 0-2*pi.
# Plot the resulting values and compare to cos.
#
# Bonus points: Implement integration of the same function
#               using reimann sums or the trapazoidal rule.

from numpy import linspace, pi, sin, cos, cumsum
from matplotlib.pylab import plot, show, subplot, legend, title

# calculate the sin() function on evenly spaced data.
x = linspace(0,2*pi,101)
y = sin(x)

plot(x,y)
show()
########NEW FILE########
__FILENAME__ = calc_derivative_solution
# Caluculate the numerical derivative of sin from 0-2*pi.
# Plot the resulting values and compare to cos.
#
# Bonus points: Implement integration of the same function
#               using reimann sums or the trapazoidal rule.

from numpy import linspace, pi, sin, cos, cumsum
from matplotlib.pylab import plot, show, subplot, legend, title

# calculate the sin() function on evenly spaced data.
x = linspace(0,2*pi,101)
y = sin(x)

# calculate the derivative dy/dx numerically.
# First, calculate the distance between adjacent pairs of
# x and y values.
dy = y[1:]-y[:-1]
dx = x[1:]-x[:-1]

# Now divide to get "rise" over "run" for each interval.
dy_dx = dy/dx

# Assuming central differences, these derivative values
# centered in-between our original sample points.
centers_x = (x[1:]+x[:-1])/2.0

# Plot our derivative calculation.  It should match up
# with the cos function since the derivative of sin is
# cos.    
subplot(1,2,1)
plot(centers_x, dy_dx,'rx', centers_x, cos(centers_x),'b-')
title(r"$\rm{Derivative\ of}\ sin(x)$")

# Trapazoidal rule integration.
avg_height = (y[1:]+y[:-1])/2.0
int_sin = cumsum(dx * avg_height)

# Plot our integration against -cos(x) - -cos(0)  
closed_form = -cos(x)+cos(0)
subplot(1,2,2)
plot(x[1:], int_sin,'rx', x, closed_form,'b-')
legend(['numerical', 'actual'])
title("Integration of sin(x)")
show()

########NEW FILE########
__FILENAME__ = data_fitting
""" This example looks at fitting data.
    Note: Adapted from py4science examples.
    
    It has multiple parts:
    
    1. Create a function with exponential decay and plot it.
       
        y = a*exp(-b*x) + c
        
        where a=2.0, b = 0.76, c=0.1

    2. Now add some gaussian noise with 
        mean=0.0 and std=.2
       hint: from numpy.random import normal
             # use normal? to see its documentation.

    3. Calculate 1st, 2nd and 3rd degree polynomial fit to the data.
       hint: from numpy import polyfit, poly1d
   
    4. Bonus: Do a least squares fit to the orignal 
       exponential function using optimize.leastsq.
       Note: If you get to this one, ask for help or
             refer to the solution...
"""
from matplotlib.pylab import figure, plot, title, show, hold, legend, subplot

# 1. Create the signal.
from numpy import exp, linspace


a = 2.0
b = 0.76
c = 0.1
x = linspace(0, 4.0, 1000)


########NEW FILE########
__FILENAME__ = data_fitting_solution
""" This example looks at fitting data.
    Note: Adapted from py4science examples.
    
    It has multiple parts:
    
    1. Create a function with exponential decay and plot it.
       
        y = a*exp(-b*x) + c
        
        where a=2.0, b = 0.76, c=0.1

    2. Now add some gaussian noise with 
        mean=0.0 and std=.2
       hint: from numpy.random import normal
             # use normal? to see its documentation.

    3. Calculate 1st, 2nd and 3rd degree polynomial fit to the data.
       hint: from numpy import polyfit, poly1d
   
    4. Bonus: Do a least squares fit to the orignal 
       exponential function using optimize.leastsq.
       Note: If you get to this one, ask for help or
             refer to the solution...
"""
from matplotlib.pylab import figure, plot, title, show, hold, legend, subplot

# 1. Create the signal.
from numpy import exp, linspace


a = 2.0
b = 0.76
c = 0.1
x = linspace(0, 4.0, 1000)

def function(x, a, b, c):
    return a*exp(-b*x) + c

y = function(x, a, b, c)

# Plot original data.
#plot(x,y)
#title("Clean signal")
#show()

# 2. Now add some noise.
from numpy.random import normal

noisy_y = y + normal(0,.1,size=y.shape)

subplot(1,3,1)
plot(x,noisy_y,label="Noisy")
plot(x,y,label="Clean",linewidth=2)
title("%3.2fexp(-%3.2fx)+%3.2f" % (a,b,c))
legend()

# 3. polynomial fit for 1st, 2nd, and 3rd degree.
from numpy import polyfit, poly1d

subplot(1,3,2)
plot(x,noisy_y)
hold('on')
for deg in [1,2,3]:
    coef = polyfit(x, noisy_y, deg)
    poly = poly1d(coef)
    poly_y = poly(x)
    plot(x, poly_y,
         linewidth=2,
         label="order=%d" % deg)
title("Polynomial Fit")
legend()
show()

# 4. Use numpy.leastsq to fit the actual function.
from scipy.optimize import leastsq

def error_func(guess, x, data, function):
    return data - function(x, *guess)
        
best, msg = leastsq(error_func, x0=[0.0, 0.0, 0.0], 
                    args=(x,noisy_y,function))        
                    
leastsq_y = function(x,*best)

subplot(1,3,3)
plot(x,y, 'b', label="Actual", lw=5)
label=r"$%3.2fe^{-%3.2fx}+%3.2f$" % tuple(best)
plot(x,leastsq_y, 'r', label=label, lw=2) 
title("Exponential Fit")
legend()
show()
########NEW FILE########
__FILENAME__ = fcopy2_test
from numpy import array, complex64, alltrue

import fcopy2

a = array((1.0+1j, 2.0, 3.0),dtype=complex64)
b = fcopy2.fcopy(a)

print 'a==b:', alltrue(a==b)
print "a:", a
print "b:", b
print b.dtype
########NEW FILE########
__FILENAME__ = fcopy_test
from numpy import array, complex128, zeros, alltrue

import fcopy

a = array((1.0+1j, 2.0, 3.0),dtype=complex128)
b = zeros(3,dtype=complex128)
fcopy.fcopy(a,len(a),b)

print 'a==b:', alltrue(a==b)
print "a:", a
print "b:", b
########NEW FILE########
__FILENAME__ = filter_image
# Read in the lena image and use an averging filter
# to "smooth" the image.  Use a "5 point stencil" where
# you average the current pixel with its neighboring pixels
#
#               0 0 0 0 0 0 0
#               0 0 0 x 0 0 0
#               0 0 x x x 0 0
#               0 0 0 x 0 0 0 
#               0 0 0 0 0 0 0
#
# Plot the image, the smoothed image, and the difference between the
# two.
#
# Bonus: Re-filter the image by passing the result image
#        through the filter again.  Do this 50 times and plot
#        the resulting image.


from scipy import lena
from matplotlib.pylab import subplot, imshow, title, show, gray, cm

img = lena()
imshow(img, cmap=cm.gray)
show()
########NEW FILE########
__FILENAME__ = filter_image_blitz_solution
""" weave_blitz_compare

    This example takes the numpy expression used in the filter_image
    exercise and compares the speed of numpy to that of weave.blitz.
    
    Read in the lena image and use an averging filter
    to "smooth" the image.  Use a "5 point stencil" where
    you average the current pixel with its neighboring pixels

                   0 0 0 0 0 0 0
                   0 0 0 x 0 0 0
                   0 0 x x x 0 0
                   0 0 0 x 0 0 0 
                   0 0 0 0 0 0 0
    
    Once you have a numpy expression that works correctly, time it
    using time.time (or time.clock on windows).
    
    Use scipy.weave.blitz to run the same expression.  Again time it.
    
    Compare the speeds of the two function and calculate the speed-up 
    (numpy_time/weave_time).
    
    Plot two images that result from the two approaches and compare them.
"""

from numpy import empty, float64
from scipy import lena
from scipy import weave
from matplotlib.pylab import subplot, imshow, title, show, gray, figure

img = lena()

expr = """avg_img =(  img[1:-1 ,1:-1]  # center
                    + img[ :-2 ,1:-1]  # left
                    + img[2:   ,1:-1]  # right
                    + img[1:-1 , :-2]  # top
                    + img[1:-1 ,2:  ]  # bottom
                    ) / 5.0"""

import time
t1 = time.clock()
for i in range(10):
    exec expr
t2 = time.clock()                         
numpy_time = t2-t1
numpy_avg_img = avg_img

avg_img = empty((img.shape[0]-2, img.shape[1]-2), dtype=float64)

# Run it once so that it gets compiled.
weave.blitz(expr)

import time
t1 = time.clock()
for i in range(10):
    weave.blitz(expr)
t2 = time.clock()                         
blitz_time = t2-t1
blitz_avg_img = avg_img

avg_img = empty((img.shape[0]-2, img.shape[1]-2), dtype=float64)
code = """for (int i=0; i<Navg_img[0];i++)
          { 
            for (int j=0; j<Navg_img[1];j++)  
            {
              AVG_IMG2(i,j) =(  IMG2(i+1 ,j+1)  // center
                              + IMG2(i ,  j+1)  // left
                              + IMG2(i+2, j+1)  // right
                              + IMG2(i+1 ,j  )  // top
                              + IMG2(i+1 ,j+2)  // bottom
                              ) / 5.0;
            }
          }                    
       """

weave.inline(code,['avg_img', 'img'],compiler='gcc')
t1 = time.clock()
for i in range(10):
    weave.inline(code,['avg_img', 'img'],compiler='gcc')
t2 = time.clock()                         
inline_time = t2-t1

inline_avg_img = avg_img

print 'numpy, blitz, speed-up:', numpy_time, blitz_time, numpy_time/blitz_time
print 'numpy, inline, speed-up:', numpy_time, inline_time, numpy_time/inline_time
# Set colormap so that images are plotted in gray scale.
gray()

# Plot the original image first
figure()
subplot(2,3,1)
imshow(numpy_avg_img)
title('numpy filtered image')

# Now the filtered image.
subplot(2,3,2)
imshow(blitz_avg_img)
title('blitz filtered image')

# Now the filtered image.
subplot(2,3,3)
imshow(inline_avg_img)
title('inline filtered image')

# And finally the difference between the two.
subplot(2,3,5)
imshow(numpy_avg_img - blitz_avg_img)
title('blitz difference')    

# And finally the difference between the two.
subplot(2,3,6)
imshow(numpy_avg_img - inline_avg_img)
title('inline difference')    

show()

########NEW FILE########
__FILENAME__ = filter_image_solution
# Read in the lena image and use an averging filter
# to "smooth" the image.  Use a "5 point stencil" where
# you average the current pixel with its neighboring pixels
#
#               0 0 0 0 0 0 0
#               0 0 0 x 0 0 0
#               0 0 x x x 0 0
#               0 0 0 x 0 0 0 
#               0 0 0 0 0 0 0
#
# Plot the image, the smoothed image, and the difference between the
# two.
#
# Bonus: Re-filter the image by passing the result image
#        through the filter again.  Do this 50 times and plot
#        the resulting image.


from scipy import lena
from matplotlib.pylab import subplot, imshow, title, show, gray, figure

img = lena()

avg_img =(  img[1:-1 ,1:-1]  # center
          + img[ :-2 ,1:-1]  # top
          + img[2:   ,1:-1]  # bottom
          + img[1:-1 , :-2]  # left
          + img[1:-1 ,2:  ]  # right
         ) / 5.0
                         
                         
# Set colormap so that images are plotted in gray scale.
gray()

# Plot the original image first
subplot(1,3,1)
imshow(img)
title('original')

# Now the filtered image.
subplot(1,3,2)
imshow(avg_img)
title('smooth')

# And finally the difference between the two.
subplot(1,3,3)
imshow(img[1:-1,1:-1] - avg_img)
title('difference')    
show()

# Bonus: Re-filter the image by passing the result image
#        through the filter again.  Do this 50 times and plot
#        the resulting image.

########NEW FILE########
__FILENAME__ = integrate_function
""" Integrate sin using scipy.integrate.quad.
    Topics: SciPy's integration library, vectorization.

    A. Use scipy.integrate.quad to integrate sin from 
       0 to pi/4.  Print out the result.  
       hint: from scipy import integrate
             integrate.quad?
    
    B. Integrate sin from 0 to x where x is a range of
       values from 0 to 2*pi.  Compare this to the exact
       solution, -cos(x) + cos(0), on a plot.  Also plot
       the error between the two.
       hint: use vectorize so that integrate.quad works
             with arrays as inputs and produces arrays
             as outputs.    
"""
from numpy import linspace, vectorize, sin, cos, pi
from scipy import integrate
from matplotlib.pylab import plot, legend, show, subplot, xlabel, ylabel, \
                             title

# A. integrate sin from 0->2pi

# B. Integrate sin from 0 to x where x is a range of
#    values from 0, 2*pi
x = linspace(0, 2*pi, 101)

########NEW FILE########
__FILENAME__ = integrate_function_solution
""" Integrate sin using scipy.integrate.quad.
    Topics: SciPy's integration library, vectorization.

    A. Use scipy.integrate.quad to integrate sin from 
       0 to pi/4.  Print out the result.  
       hint: from scipy import integrate
             integrate.quad?
    
    B. Integrate sin from 0 to x where x is a range of
       values from 0 to 2*pi.  Compare this to the exact
       solution, -cos(x) + cos(0), on a plot.  Also plot
       the error between the two.
       hint: use vectorize so that integrate.quad works
             with arrays as inputs and produces arrays
             as outputs.    
"""
from numpy import linspace, vectorize, sin, cos, pi
from scipy import integrate
from matplotlib.pylab import plot, legend, show, subplot, xlabel, ylabel, \
                             title

# A. integrate sin from 0->2pi
result, error = integrate.quad(sin,0, pi/2)
print "integral(sin 0->pi/2):", result

# B. Integrate sin from 0 to x where x is a range of
#    values from 0, 2*pi

x = linspace(0, 2*pi, 101)

# 1. quad needs to be vectorized before you can call it with an array.
vquad = vectorize(integrate.quad)

# 2. Now calculate the integral using the vectorized function. 
approx, error_est = vquad(sin, 0, x)

# 3. Evaluate the actual integral value for x.
exact = -cos(x) + cos(0)

# 4. Plot the comparison.
subplot(121)
plot(x, approx, label="Approx")
plot(x, exact, label="Exact")
xlabel('x')
ylabel('integral(sin)')
title('Integral of sin from 0 to x')
legend()

subplot(122)
plot(x, exact-approx)
title('Error in approximation')
show()
########NEW FILE########
__FILENAME__ = sinc_function
""" sinc_function
    
    Topics: Broadcasting, Fancy Indexing
    
    Calculate the sinc function, sin(r)/r.  Use a cartesian x,y grid
    and calculate r = sqrt(x**2+y**2) with 0 in the center of the grid.
    Calculate the function for -15,15 for both x and y.
"""    

from numpy import linspace, sin, sqrt
from matplotlib.pylab import imshow, gray, show


########NEW FILE########
__FILENAME__ = sinc_function_solution
""" sinc_function
    
    Topics: Broadcasting, Fancy Indexing
    
    Calculate the sinc function, sin(r)/r.  Use a cartesian x,y grid
    and calculate r = sqrt(x**2+y**2) with 0 in the center of the grid.
    Calculate the function for -15,15 for both x and y.
"""    

from numpy import linspace, sin, sqrt
from matplotlib.pylab import imshow, gray, show

x = linspace(-15,15,101)
# flip y up so that it is a "column" vector.
y = linspace(-15,15,101)[:,None]

# because of broadcasting rules, r is 2D.    
r = sqrt(x**2+y**2)    

# calculate our function.
sinc = sin(r)/r

# replace any location where r is 0 with 1.0
sinc[r==0] = 1.0

imshow(sinc, extent=[-15,15,-15,15])
gray()
show()
########NEW FILE########
__FILENAME__ = structured_array
""" structured_array

    1. Read all the logs out of a file and into 1D array.
    2. Create a "structured array" view of this 1D data that has
       a field for each log.
    3. Create a mask for the "good" values in the array that
       will mask a "row" of the array if *any* of the measured logs
       have a NULL value (-999.25).
       hint: It is easier to do this with a 2D "view" of the array.
             The alltrue function is also useful here.
       
       Also, replace all -999.25 values with NaNs.             
    4. plot the VP vs VS logs.
    5. compare nansum and sum on both of these logs.    
"""
from pylab import plot, show
import numpy

# Open the file.
log_file = open('data.dat')

# The first line is a header that has all the log names.
header = log_file.readline()
log_names = header.split()

########NEW FILE########
__FILENAME__ = structured_array_solution
""" structured_array

    1. Read all the logs out of a file and into 1D array.
    2. Create a "structured array" view of this 1D data that has
       a field for each log.
    3. Create a mask for the "good" values in the array that
       will mask a "row" of the array if *any* of the measured logs
       have a NULL value (-999.25).
       hint: It is easier to do this with a 2D "view" of the array.
             The alltrue function is also useful here.
       
       Also, replace all -999.25 values with NaNs.             
    4. plot the VP vs VS logs.
    5. compare nansum and sum on both of these logs.    
"""
from pylab import plot, show, hold
import numpy

# 1. and 2.
# Open the file.
log_file = open('data.dat')

# The first line is a header that has all the log names.
header = log_file.readline()
log_names = header.split()

# Construct the array "dtype" that describes the data.  All fields
# are 8 byte (64 bit) floating point.
fields = zip(log_names, ['f8']*len(log_names))
#fields = [(name, 'f8') for name in log_names]
fields_dtype = numpy.dtype(fields)
        
# Now, read in all of the data in one fail swoop, translating
# it into floating point values as we go.  Use the dtype 
# we created above so that the logs can be addressed by index or field.
value_text = log_file.read()
lst = [float(val) for val in value_text.split()]
values = numpy.array(lst)
logs = values.view(fields_dtype)

values.shape = len(values)/len(fields), len(fields)

# 3.
# Use the "2D array" view of logs to find any log samples
# with missing values (-999.25).  We'll use this mask
# to pull out the samples that don't have *any* missing values.
data_mask = numpy.alltrue(values!=-999.25, axis=-1)
good_logs = logs[data_mask]

# Create a 2nd log with all the missing values removed.

# Also, mark all NULL values with NaNs in the orginal log for good measure.
values[values==-999.25] = numpy.NaN

# 4.
# Plotting will ignore NaNs, so this looks the same as plotting
# good logs.
plot(good_logs['VP'], good_logs['VS'], 'o')
hold(True)
plot(logs['VP'], logs['VS'], '+')
show()   

# 5.
# However, not all calculations.  sum(), mean(), etc. do not 
# ignore nans.  There are some functions that do (nansum(), etc.)
# Note that nansum values are different than sum because
# not all the VP values that are non-nan are in the good_logs.
print 'sum good_logs:', numpy.sum(good_logs['VP'])
print 'sum of logs:', numpy.sum(logs['VP'])
print 'nansum of logs:', numpy.nansum(logs['VP'])
########NEW FILE########
__FILENAME__ = weave_compare
""" Compare the speed of numpy, weave.blitz and weave.inline
    for the following equation:
    
        result=a+b*(c-d)
    
    Set up all arrays so that they are 1 dimensional and have 1 million 
    element in them.
"""
import time

from numpy import arange, empty, float64
from scipy import weave

N = 1000000

a = arange(N,dtype=float64)
b = arange(N,dtype=float64)
c = arange(N,dtype=float64)
d = arange(N,dtype=float64)

result = empty(N,dtype=float64)

t1= time.clock()
result = a + b*(c-d)
t2=time.clock()
numpy_time = t2-t1

# Now do the weave.blitz and weave.inline versions.


    
    
########NEW FILE########
__FILENAME__ = weave_compare_solution
""" Compare the speed of numpy, weave.blitz and weave.inline
    for the following equation:
    
        result=a+b*(c-d)
    
    Set up all arrays so that they are 1 dimensional and have 1 million 
    element in them.
"""
import time

from numpy import arange, empty, float64
from scipy import weave

N = 1000000

a = arange(N,dtype=float64)
b = arange(N,dtype=float64)
c = arange(N,dtype=float64)
d = arange(N,dtype=float64)

result = empty(N,dtype=float64)

t1= time.clock()
result = a + b*(c-d)
t2=time.clock()
numpy_time = t2-t1

t1= time.clock()
weave.blitz("result = a+b*(c-d)")
t2=time.clock()
blitz_time = t2-t1
print N, numpy_time, blitz_time, numpy_time/blitz_time


code = """
       for(int i=0;i<Na[0];i++)
       {
           result[i] = a[i]+b[i]*(c[i]-d[i]);
       }
       """


t1= time.clock()
weave.inline(code,['a','b','c','d','result'], compiler='gcc')
t2=time.clock()
inline_time = t2-t1

print N, numpy_time, blitz_time, inline_time
print numpy_time/blitz_time, numpy_time/inline_time


    
    
########NEW FILE########
__FILENAME__ = short_time_fft
# Short-time Fourier Transform
#   
#   The short-time Fourier Transform is implemented
#      by multiplying a segment of the data by some kind
#      of window function (boxcar, triangular, hamming, hanning, 
#      blackman, etc.) and then taking the Fourier transform.
#      This process is repeated on a shifted segment of the data
#      until all the data has been processed. 
#
#   In this excercise you will:
#  
#      1.  Read audio data from scale.wav (it takes the filename as 
#            input and returns the sample rate (in samples/sec) and 
#            waveform data as output.
#      2.  Perform the short-time Fourier transform on every 50 ms
#            of data.
#      3.  Create an image showing the frequency on the horizontal 
#            axis and the center-point window time on the 
#            vertical axis. 
#      4.  (Bonus):  Label the axes with correct units and labels.
#


# Possibly useful functions
from scipy.io.wavfile import read
from scipy.fftpack import fft, fftfreq, fftshift
from scipy.signal import get_window  # useful for creating a window
from math import ceil
from pylab import figure, imshow, clf, gray, xlabel, ylabel

# Read in a wav file 
#   returns sample rate (samples / sec) and data
rate, data = read('scale.wav')




########NEW FILE########
__FILENAME__ = short_time_fft_solution
# Short-time Fourier Transform
#   
#   The short-time Fourier Transform is implemented
#      by multiplying a segment of the data by some kind
#      of window function (boxcar, triangular, hamming, hanning, 
#      blackman, etc.) and then taking the Fourier transform.
#      This process is repeated on a shifted segment of the data
#      until all the data has been processed. 
#
#   In this excercise you will:
#  
#      1.  Read audio data from scale.wav (it takes the filename as 
#            input and returns the sample rate (in samples/sec) and 
#            waveform data as output.
#      2.  Perform the short-time Fourier transform on every 50 ms
#            of data.
#      3.  Create an image showing the frequency on the horizontal 
#            axis and the center-point window time on the 
#            vertical axis. 
#      4.  (Bonus):  Label the axes with correct units and labels.
#

# Import the required functions
from scipy.io.wavfile import read
from scipy.fftpack import fft, fftfreq, fftshift
from scipy.signal import get_window
from math import ceil
from pylab import figure, imshow, clf, gray, xlabel, ylabel

# Read in a wav file 
#   returns sample rate (samples / sec) and data
rate, data = read('scale.wav')

# Define the sample spacing and window size.
dT = 1.0/rate
T_window = 50e-3
N_window = int(T_window * rate)
N_data = len(data)

# 1. Get the window profile
window = get_window('hamming', N_window)

# 2. Set up the FFT
result = []
start = 0
while (start < N_data - N_window):
    end = start + N_window
    result.append(fftshift(fft(window*data[start:end])))
    start = end

result.append(fftshift(fft(window*data[-N_window:])))
result = array(result,result[0].dtype)

# Display results
freqscale = fftshift(fftfreq(N_window,dT))[150:-150]/1e3
figure(1)
clf()
imshow(abs(result[:,150:-150]),extent=(freqscale[-1],freqscale[0],(N_data*dT-T_window/2.0),T_window/2.0))
xlabel('Frequency (kHz)')
ylabel('Time (sec.)')
gray()





########NEW FILE########
__FILENAME__ = foo
print 'spam'
########NEW FILE########
__FILENAME__ = test
def test():
    assert True    
    
class TestClass(object):
    
    def setUp(self):
        'Sets up per test'
        pass
        
    def tearDown(self):
        'Tears down per test'        
        pass
        
    def test2(self):
        assert False
        
    def test(self):
        assert False
########NEW FILE########
__FILENAME__ = bootstrap
##############################################################################
#
# Copyright (c) 2006 Zope Corporation and Contributors.
# All Rights Reserved.
#
# This software is subject to the provisions of the Zope Public License,
# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
# FOR A PARTICULAR PURPOSE.
#
##############################################################################
"""Bootstrap a buildout-based project

Simply run this script in a directory containing a buildout.cfg.
The script accepts buildout command-line options, so you can
use the -c option to specify an alternate configuration file.

$Id: bootstrap.py 85041 2008-03-31 15:57:30Z andreasjung $
"""

import os, shutil, sys, tempfile, urllib2

tmpeggs = tempfile.mkdtemp()

try:
    import pkg_resources
except ImportError:
    ez = {}
    exec urllib2.urlopen('http://peak.telecommunity.com/dist/ez_setup.py'
                         ).read() in ez
    ez['use_setuptools'](to_dir=tmpeggs, download_delay=0)

    import pkg_resources

if sys.platform == 'win32':
    def quote(c):
        if ' ' in c:
            return '"%s"' % c # work around spawn lamosity on windows
        else:
            return c
else:
    def quote (c):
        return c

cmd = 'from setuptools.command.easy_install import main; main()'
ws  = pkg_resources.working_set
assert os.spawnle(
    os.P_WAIT, sys.executable, quote (sys.executable),
    '-c', quote (cmd), '-mqNxd', quote (tmpeggs), 'zc.buildout',
    dict(os.environ,
         PYTHONPATH=
         ws.find(pkg_resources.Requirement.parse('setuptools')).location
         ),
    ) == 0

ws.add_entry(tmpeggs)
ws.require('zc.buildout')
import zc.buildout.buildout
zc.buildout.buildout.main(sys.argv[1:] + ['bootstrap'])
shutil.rmtree(tmpeggs)

########NEW FILE########
__FILENAME__ = cell_access
from xlrd import open_workbook,XL_CELL_TEXT

book = open_workbook('odd.xls')
sheet = book.sheet_by_index(1)

cell = sheet.cell(0,0)
print cell
print cell.value
print cell.ctype==XL_CELL_TEXT

for i in range(sheet.ncols):
    print sheet.cell_type(1,i),sheet.cell_value(1,i)

########NEW FILE########
__FILENAME__ = dates
from datetime import date,datetime,time
from xlrd import open_workbook,xldate_as_tuple

book = open_workbook('types.xls')
sheet = book.sheet_by_index(0)

date_value = xldate_as_tuple(sheet.cell(3,2).value,book.datemode)
print datetime(*date_value),date(*date_value[:3])
datetime_value = xldate_as_tuple(sheet.cell(3,3).value,book.datemode)
print datetime(*datetime_value)
time_value = xldate_as_tuple(sheet.cell(3,4).value,book.datemode)
print time(*time_value[3:])
print datetime(*time_value)

########NEW FILE########
__FILENAME__ = emptyblank
from xlrd import open_workbook,empty_cell

print empty_cell.value

book = open_workbook('types.xls')
sheet = book.sheet_by_index(0)
empty = sheet.cell(6,2)
blank = sheet.cell(7,2)
print empty is blank, empty is empty_cell, blank is empty_cell

book = open_workbook('types.xls',formatting_info=True)
sheet = book.sheet_by_index(0)
empty = sheet.cell(6,2)
blank = sheet.cell(7,2)
print empty.ctype,repr(empty.value)
print blank.ctype,repr(blank.value)

########NEW FILE########
__FILENAME__ = errors
from xlrd import open_workbook,error_text_from_code

book = open_workbook('types.xls')
sheet = book.sheet_by_index(0)

print error_text_from_code[sheet.cell(5,2).value]
print error_text_from_code[sheet.cell(5,3).value]


########NEW FILE########
__FILENAME__ = introspect_book
from xlrd import open_workbook

book = open_workbook('simple.xls')

print book.nsheets

for sheet_index in range(book.nsheets):
    print book.sheet_by_index(sheet_index)

print book.sheet_names()
for sheet_name in book.sheet_names():
    print book.sheet_by_name(sheet_name)

for sheet in book.sheets():
    print sheet

########NEW FILE########
__FILENAME__ = introspect_sheet
from xlrd import open_workbook,cellname

book = open_workbook('odd.xls')
sheet = book.sheet_by_index(0)

print sheet.name

print sheet.nrows
print sheet.ncols

for row_index in range(sheet.nrows):
    for col_index in range(sheet.ncols):
        print cellname(row_index,col_index),'-',
        print sheet.cell(row_index,col_index).value

########NEW FILE########
__FILENAME__ = open
from mmap import mmap,ACCESS_READ
from xlrd import open_workbook

print open_workbook('simple.xls')

with open('simple.xls', 'rb') as f:
    print open_workbook(
        file_contents=mmap(f.fileno(),0,access=ACCESS_READ)
        )

aString = open('simple.xls','rb').read()
print open_workbook(file_contents=aString)

    

########NEW FILE########
__FILENAME__ = sheet_iteration
from xlrd import open_workbook

book = open_workbook('odd.xls')
sheet0 = book.sheet_by_index(0)
sheet1 = book.sheet_by_index(1)

print sheet0.row(0)
print sheet0.col(0)
print
print sheet0.row_slice(0,1)
print sheet0.row_slice(0,1,2)
print sheet0.row_values(0,1)
print sheet0.row_values(0,1,2)
print sheet0.row_types(0,1)
print sheet0.row_types(0,1,2)
print
print sheet1.col_slice(0,1)
print sheet0.col_slice(0,1,2)
print sheet1.col_values(0,1)
print sheet0.col_values(0,1,2)
print sheet1.col_types(0,1)
print sheet0.col_types(0,1,2)

########NEW FILE########
__FILENAME__ = simple
from xlrd import open_workbook

wb = open_workbook('simple.xls')

for s in wb.sheets():
    print 'Sheet:',s.name
    for row in range(s.nrows):
        values = []
        for col in range(s.ncols):
            values.append(s.cell(row,col).value)
        print ','.join(values)
    print

########NEW FILE########
__FILENAME__ = types
from xlrd import open_workbook

def cell_contents(sheet,row_x):
    result = []
    for col_x in range(2,sheet.ncols):
        cell = sheet.cell(row_x,col_x)
        result.append((cell.ctype,cell,cell.value))
    return result

sheet = open_workbook('types.xls').sheet_by_index(0)

print 'XL_CELL_TEXT',cell_contents(sheet,1)
print 'XL_CELL_NUMBER',cell_contents(sheet,2)
print 'XL_CELL_DATE',cell_contents(sheet,3)
print 'XL_CELL_BOOLEAN',cell_contents(sheet,4)
print 'XL_CELL_ERROR',cell_contents(sheet,5)
print 'XL_CELL_BLANK',cell_contents(sheet,6)
print 'XL_CELL_EMPTY',cell_contents(sheet,7)

print
sheet = open_workbook('types.xls',formatting_info=True).sheet_by_index(0)

print 'XL_CELL_TEXT',cell_contents(sheet,1)
print 'XL_CELL_NUMBER',cell_contents(sheet,2)
print 'XL_CELL_DATE',cell_contents(sheet,3)
print 'XL_CELL_BOOLEAN',cell_contents(sheet,4)
print 'XL_CELL_ERROR',cell_contents(sheet,5)
print 'XL_CELL_BLANK',cell_contents(sheet,6)
print 'XL_CELL_EMPTY',cell_contents(sheet,7)


########NEW FILE########
__FILENAME__ = utilities
from xlrd import cellname, cellnameabs, colname

print cellname(0,0),cellname(10,10),cellname(100,100)
print cellnameabs(3,1),cellnameabs(41,59),cellnameabs(265,358)
print colname(0),colname(10),colname(100)

########NEW FILE########
__FILENAME__ = copy
from xlrd import open_workbook
from xlwt import easyxf
from xlutils.copy import copy

rb = open_workbook('source.xls',formatting_info=True)
rs = rb.sheet_by_index(0)
wb = copy(rb)
ws = wb.get_sheet(0)

plain = easyxf('')
for i,cell in enumerate(rs.col(2)):
    if not i:
        continue
    ws.write(i,2,cell.value,plain)

for i,cell in enumerate(rs.col(4)):
    if not i:
        continue
    ws.write(i,4,cell.value-1000)

wb.save('output.xls')

########NEW FILE########
__FILENAME__ = display
from xlrd import open_workbook
from xlutils.display import quoted_sheet_name
from xlutils.display import cell_display

wb = open_workbook('source.xls')

print quoted_sheet_name(wb.sheet_names()[0])
print repr(quoted_sheet_name(u'Price(\xa3)','utf-8'))
print quoted_sheet_name(u'My Sheet')
print quoted_sheet_name(u"John's Sheet")

sheet = wb.sheet_by_index(0)
print cell_display(sheet.cell(1,1))
print cell_display(sheet.cell(1,3),wb.datemode)

########NEW FILE########
__FILENAME__ = filter
import os

from xlutils.filter import BaseReader,BaseFilter,BaseWriter,process

class Reader(BaseReader):
    def get_filepaths(self):
        return [os.path.abspath('source.xls')]

class Writer(BaseWriter):
    def get_stream(self,filename):
        return file(filename,'wb')

class Filter(BaseFilter):

    pending_row = None
    wtrowxi = 0
    
    def workbook(self,rdbook,wtbook_name):
        self.next.workbook(rdbook,'filtered-'+wtbook_name)
        
    def row(self,rdrowx,wtrowx):
        self.pending_row = (rdrowx,wtrowx)
        
    def cell(self,rdrowx,rdcolx,wtrowx,wtcolx):
        if rdcolx==0:
            value = self.rdsheet.cell(rdrowx,rdcolx).value
            if value.strip().lower()=='x':
                self.ignore_row = True
                self.wtrowxi -= 1
            else:
                self.ignore_row = False
                rdrowx, wtrowx = self.pending_row
                self.next.row(rdrowx,wtrowx+self.wtrowxi)
        elif not self.ignore_row:
            self.next.cell(
                rdrowx,rdcolx,wtrowx+self.wtrowxi,wtcolx-1
                )        

process(Reader(),Filter(),Writer())

########NEW FILE########
__FILENAME__ = styles
from xlrd import open_workbook
from xlutils.styles import Styles

book = open_workbook('source.xls',formatting_info=True)
styles = Styles(book)
sheet = book.sheet_by_index(0)

print styles[sheet.cell(1,1)].name
print styles[sheet.cell(1,2)].name

A1_style = styles[sheet.cell(0,0)]
A1_font = book.font_list[A1_style.xf.font_index]
print book.colour_map[A1_font.colour_index]

########NEW FILE########
__FILENAME__ = borders
from xlwt import Workbook,easyxf
tl = easyxf('border: left thick, top thick')
t = easyxf('border: top thick')
tr = easyxf('border: right thick, top thick')
r = easyxf('border: right thick')
br = easyxf('border: right thick, bottom thick')
b = easyxf('border: bottom thick')
bl = easyxf('border: left thick, bottom thick')
l = easyxf('border: left thick')

w = Workbook()
ws = w.add_sheet('Border')
ws.write(1,1,style=tl)
ws.write(1,2,style=t)
ws.write(1,3,style=tr)
ws.write(2,3,style=r)
ws.write(3,3,style=br)
ws.write(3,2,style=b)
ws.write(3,1,style=bl)
ws.write(2,1,style=l)

w.save('borders.xls')

########NEW FILE########
__FILENAME__ = easyxf_format
from datetime import date
from xlwt import Workbook, easyxf

book = Workbook()
sheet = book.add_sheet('A Date')

sheet.write(1,1,date(2009,3,18),easyxf(
    'font: name Arial;'
    'borders: left thick, right thick, top thick, bottom thick;'
    'pattern: pattern solid, fore_colour red;',
    num_format_str='YYYY-MM-DD'
    ))

book.save('date.xls')

########NEW FILE########
__FILENAME__ = format_rowscols
from xlwt import Workbook, easyxf
from xlwt.Utils import rowcol_to_cell

row = easyxf('pattern: pattern solid, fore_colour blue')
col = easyxf('pattern: pattern solid, fore_colour green')
cell = easyxf('pattern: pattern solid, fore_colour red')

book = Workbook()

sheet = book.add_sheet('Precedence')
for i in range(0,10,2):
    sheet.row(i).set_style(row)
for i in range(0,10,2):
    sheet.col(i).set_style(col)
for i in range(10):
    sheet.write(i,i,None,cell)

sheet = book.add_sheet('Hiding')
for rowx in range(10):
    for colx in range(10):
        sheet.write(rowx,colx,rowcol_to_cell(rowx,colx))                    
for i in range(0,10,2):
    sheet.row(i).hidden = True
    sheet.col(i).hidden = True

sheet = book.add_sheet('Row height and Column width')
for i in range(10):
    sheet.write(0,i,0)
for i in range(10):
    sheet.row(i).set_style(easyxf('font:height '+str(200*i)))
    sheet.col(i).width = 256*i

book.save('format_rowscols.xls')

########NEW FILE########
__FILENAME__ = formulae
from xlwt import Workbook, Formula

book = Workbook()

sheet1 = book.add_sheet('Sheet 1')
sheet1.write(0,0,10)
sheet1.write(0,1,20)
sheet1.write(1,0,Formula('A1/B1'))

sheet2 = book.add_sheet('Sheet 2')
row = sheet2.row(0)
row.write(0,Formula('sum(1,2,3)'))
row.write(1,Formula('SuM(1;2;3)'))
row.write(2,Formula("$A$1+$B$1*SUM('ShEEt 1'!$A$1:$b$2)"))

book.save('formula.xls')

########NEW FILE########
__FILENAME__ = hyperlinks
from xlwt import Workbook,easyxf,Formula

style = easyxf('font: underline single')

book = Workbook()
sheet = book.add_sheet('Hyperlinks')

sheet.write(
    0, 0,
    Formula('HYPERLINK("http://www.python.org";"Python")'),
    style)

sheet.write(
    1,0,
    Formula('HYPERLINK("mailto:python-excel@googlegroups.com";"help")'),
    style)

book.save("hyperlinks.xls")

########NEW FILE########
__FILENAME__ = images
from xlwt import Workbook
w = Workbook()
ws = w.add_sheet('Image')
ws.insert_bitmap('python.bmp', 0, 0)
w.save('images.xls')

########NEW FILE########
__FILENAME__ = merged
from xlwt import Workbook,easyxf
style = easyxf(
    'pattern: pattern solid, fore_colour red;'
    'align: vertical center, horizontal center;'
    )
w = Workbook()
ws = w.add_sheet('Merged')
ws.write_merge(1,5,1,5,'Merged',style)
w.save('merged.xls')

########NEW FILE########
__FILENAME__ = outlines
from xlwt import Workbook

data = [
    ['','','2008','','2009'],
    ['','','Jan','Feb','Jan','Feb'],
    ['Company X'],
    ['','Division A'],
    ['','',100,200,300,400],
    ['','Division B'],
    ['','',100,99,98,50],
    ['Company Y'],
    ['','Division A'],
    ['','',100,100,100,100],
    ['','Division B'],
    ['','',100,101,102,103],
    ]

w = Workbook()
ws = w.add_sheet('Outlines')
for i,row in enumerate(data):
    for j,cell in enumerate(row):
        ws.write(i,j,cell)

ws.row(2).level = 1
ws.row(3).level = 2
ws.row(4).level = 3
ws.row(5).level = 2
ws.row(6).level = 3
ws.row(7).level = 1
ws.row(8).level = 2
ws.row(9).level = 3
ws.row(10).level = 2
ws.row(11).level = 3

ws.col(2).level = 1
ws.col(3).level = 2
ws.col(4).level = 1
ws.col(5).level = 2

w.save('outlines.xls')

########NEW FILE########
__FILENAME__ = overwriting
from xlwt import Workbook

book = Workbook()
sheet1 = book.add_sheet('Sheet 1',cell_overwrite_ok=True)
sheet1.write(0,0,'original')
sheet = book.get_sheet(0)
sheet.write(0,0,'new')

sheet2 = book.add_sheet('Sheet 2')
sheet2.write(0,0,'original')
sheet2.write(0,0,'new')

########NEW FILE########
__FILENAME__ = panes
from xlwt import Workbook
from xlwt.Utils import rowcol_to_cell

def setup_sheet(sheet):
    for col in range(20):
        for row in range(80):
            sheet.write(row,col,rowcol_to_cell(row,col))
    sheet.vert_split_pos = 2
    sheet.horz_split_pos = 10
    sheet.vert_split_first_visible = 5
    sheet.horz_split_first_visible = 40
    
w = Workbook()
ws = w.add_sheet('Split')
setup_sheet(ws)
ws = w.add_sheet('Freeze')
setup_sheet(ws)
ws.panes_frozen = True

w.save('panes.xls')

########NEW FILE########
__FILENAME__ = simple
from tempfile import TemporaryFile
from xlwt import Workbook

book = Workbook()
sheet1 = book.add_sheet('Sheet 1')
book.add_sheet('Sheet 2')

sheet1.write(0,0,'A1')
sheet1.write(0,1,'B1')
row1 = sheet1.row(1)
row1.write(0,'A2')
row1.write(1,'B2')
sheet1.col(0).width = 10000

sheet2 = book.get_sheet(1)
sheet2.row(0).write(0,'Sheet 2 A1')
sheet2.row(0).write(1,'Sheet 2 B1')
sheet2.flush_row_data()
sheet2.write(1,0,'Sheet 2 A3')
sheet2.col(0).width = 5000
sheet2.col(0).hidden = True

book.save('simple.xls')
book.save(TemporaryFile())

########NEW FILE########
__FILENAME__ = stylecompression
from xlwt import Workbook, easyxf

style1 = easyxf('font: name Times New Roman')
style2 = easyxf('font: name Times New Roman')
style3 = easyxf('font: name Times New Roman')

def write_cells(book):
    sheet = book.add_sheet('Content')
    sheet.write(0,0,'A1',style1)
    sheet.write(0,1,'B1',style2)
    sheet.write(0,2,'C1',style3)
    
book = Workbook()
write_cells(book)
book.save('3xf3fonts.xls')

book = Workbook(style_compression=1)
write_cells(book)
book.save('3xf1font.xls')

book = Workbook(style_compression=2)
write_cells(book)
book.save('1xf1font.xls')

########NEW FILE########
__FILENAME__ = types
from datetime import date,time,datetime
from decimal import Decimal
from xlwt import Workbook,Style

wb = Workbook()

ws = wb.add_sheet('Type examples')

ws.row(0).write(0,u'\xa3')
ws.row(0).write(1,'Text')

ws.row(1).write(0,3.1415)
ws.row(1).write(1,15)
ws.row(1).write(2,265L)
ws.row(1).write(3,Decimal('3.65'))
ws.row(2).set_cell_number(0,3.1415)
ws.row(2).set_cell_number(1,15)
ws.row(2).set_cell_number(2,265L)
ws.row(2).set_cell_number(3,Decimal('3.65'))

ws.row(3).write(0,date(2009,3,18))
ws.row(3).write(1,datetime(2009,3,18,17,0,1))
ws.row(3).write(2,time(17,1))
ws.row(4).set_cell_date(0,date(2009,3,18))
ws.row(4).set_cell_date(1,datetime(2009,3,18,17,0,1))
ws.row(4).set_cell_date(2,time(17,1))

ws.row(5).write(0,False)
ws.row(5).write(1,True)
ws.row(6).set_cell_boolean(0,False)
ws.row(6).set_cell_boolean(1,True)

ws.row(7).set_cell_error(0,0x17)
ws.row(7).set_cell_error(1,'#NULL!')

ws.row(8).write(
    0,'',Style.easyxf('pattern: pattern solid, fore_colour green;'))
ws.row(8).write(
    1,None,Style.easyxf('pattern: pattern solid, fore_colour blue;'))
ws.row(9).set_cell_blank(
    0,Style.easyxf('pattern: pattern solid, fore_colour yellow;'))

ws.row(10).set_cell_mulblanks(
    5,10,Style.easyxf('pattern: pattern solid, fore_colour red;')
    )

wb.save('types.xls')

########NEW FILE########
__FILENAME__ = utilities
from xlwt import Utils

print Utils.col_by_name('AA')
print Utils.col_by_name('A')

print Utils.cell_to_rowcol('A1')
print Utils.cell_to_rowcol('$A$1')

print Utils.cell_to_rowcol2('A1')

print Utils.rowcol_to_cell(0,0)
print Utils.rowcol_to_cell(0,0,False,True)
print Utils.rowcol_to_cell(
    row=0,col=0,row_abs=True,col_abs=True
    )

print Utils.cellrange_to_rowcol_pair('1:3')
print Utils.cellrange_to_rowcol_pair('B:G')
print Utils.cellrange_to_rowcol_pair('A2:B7')
print Utils.cellrange_to_rowcol_pair('A1')

print Utils.valid_sheet_name('')
print Utils.valid_sheet_name("'quoted'")
print Utils.valid_sheet_name("O'hare")
print Utils.valid_sheet_name("X"*32)
print Utils.valid_sheet_name("[]:\\?/*\x00")

########NEW FILE########
__FILENAME__ = xfstyle_format
from datetime import date
from xlwt import Workbook, XFStyle, Borders, Pattern, Font

fnt = Font()
fnt.name = 'Arial'

borders = Borders()
borders.left = Borders.THICK
borders.right = Borders.THICK
borders.top = Borders.THICK
borders.bottom = Borders.THICK

pattern = Pattern()
pattern.pattern = Pattern.SOLID_PATTERN
pattern.pattern_fore_colour = 0x0A

style = XFStyle()
style.num_format_str='YYYY-MM-DD'
style.font = fnt
style.borders = borders
style.pattern = pattern

book = Workbook()
sheet = book.add_sheet('A Date')
sheet.write(1,1,date(2009,3,18),style)

book.save('date.xls')

########NEW FILE########
__FILENAME__ = zoom
from xlwt import Workbook

w = Workbook()

ws = w.add_sheet('Normal')
ws.write(0,0,'Some text')
ws.normal_magn = 75

ws = w.add_sheet('Page Break Preview')
ws.write(0,0,'Some text')
ws.preview_magn = 150
ws.page_preview = True

w.save('zoom.xls')

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

class BlogPost(models.Model):
    title = models.CharField(max_length=150)
    body = models.TextField()
    timestamp = models.DateTimeField()
########NEW FILE########
__FILENAME__ = views
# Create your views here.

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
from django.core.management import execute_manager
try:
    import settings # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = settings
# Django settings for crazy project.

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

MANAGERS = ADMINS

DATABASE_ENGINE = 'sqlite3'           # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
DATABASE_NAME = 'creazy.db'             # Or path to database file if using sqlite3.
DATABASE_USER = ''             # Not used with sqlite3.
DATABASE_PASSWORD = ''         # Not used with sqlite3.
DATABASE_HOST = ''             # Set to empty string for localhost. Not used with sqlite3.
DATABASE_PORT = ''             # Set to empty string for default. Not used with sqlite3.

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = ''

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/media/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = '@74q#lw6!tvjk@#ep()2*j(9@_o=o31t8@+q_-v*%_cy_q39m@'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = 'crazy.urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'blogs'
)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

# Uncomment the next two lines to enable the admin:
# from django.contrib import admin
# admin.autodiscover()

urlpatterns = patterns('',
    # Example:
    # (r'^crazy/', include('crazy.foo.urls')),

    # Uncomment the admin/doc line below and add 'django.contrib.admindocs' 
    # to INSTALLED_APPS to enable admin documentation:
    # (r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    # (r'^admin/(.*)', admin.site.root),
)

########NEW FILE########
__FILENAME__ = danny

########NEW FILE########
__FILENAME__ = email
import smtplib
from settings import *

def pop():
    from poplib import POP3_SSL as POP3
    from settings import *

    s = POP3('pop.gmail.com', 995)
    s.user(un)
    s.pass_(pw)
    rv, msg, sz = s.retr(336)

    print '-' * 25
    for line in msg:
        print line
    print  '-' * 25
    s.quit()


###################

def imap():
    from imaplib import IMAP4_SSL as IMAP4
    from settings import *
    s = IMAP4('imap.gmail.com', 993)
    s.login(un, pw)
    s.select()
    typ, data = s.fetch('264', '(RFC822)')
    print '-' * 25
    for line in data[0][1].splitlines():
        print line
    print '-' * 25
    s.close()
    s.logout()

######################
# sending to gmail

def smtp():
    


    from_ = 'pydanny@gmail.com'
    to = [from_]

    s = smtplib.SMTP('smtp.gmail.com', 587)
    s.ehlo()
    s.starttls()
    s.ehlo()
    s.login(un,pw)
    s.sendmail(from_, to, 'I am danny')
    s.close()
    
smtp()
########NEW FILE########
__FILENAME__ = makeTextFile
#!/usr/bin/env python

'makeTextFile.py -- create text file'

import os

# get filename
while True:
    fname = raw_input('Enter file name: ')
    if os.path.exists(fname):
        print"*** ERROR: '%s' already exists" % fname
    else:
        break

# get file content (text) lines
all = []
print "\nEnter lines ('.' by itself to quit).\n"

# loop until user terminates input
while True:
    entry = raw_input('> ')
    if entry == '.':
        break
    else:
        all.append(entry)

# write lines to file with NEWLINE line terminator
fobj = open(fname, 'w')
fobj.write('\n'.join(all))
fobj.close()
print 'DONE!'

########NEW FILE########
__FILENAME__ = makeTextFile0
#!/usr/bin/env python

'makeTextFile.py -- create text file'

import os
ls = os.linesep

# get filename
while True:

    if os.path.exists(fname):
        print"*** ERROR: '%s' already exists" % fname
    else:
        break

# get file content (text) lines
all = []
print "\nEnter lines ('.' by itself to quit).\n"

# loop until user terminates input
while True:
    entry = raw_input('> ')
    if entry == '.':
        break
    else:
        all.append(entry)

# write lines to file with proper line-ending
fobj = open(fname, 'w')
fobj.writelines(['%s%s' % (x, ls) for x in all])
fobj.close()
print 'DONE!'

########NEW FILE########
__FILENAME__ = makeTextFile1
#!/usr/bin/env python

'makeTextFile.py -- create text file'

import os
ls = os.linesep

# get filename
while True:
    fname = raw_input('Enter file name: ')
    if os.path.exists(fname):
        print"*** ERROR: '%s' already exists" % fname
    else:
        break

# get file content (text) lines
all = []
print "\nEnter lines ('.' by itself to quit).\n"

# loop until user terminates input
while True:
    entry = raw_input('> ')
    if entry == '.':
        break
    else:
        all.append(entry)

# write lines to file with proper line-ending
fobj = open(fname, 'w')
fobj.writelines(['%s%s' % (x, ls) for x in all])
fobj.close()
print 'DONE!'

########NEW FILE########
__FILENAME__ = readTextFile
#!/usr/bin/env python

'readTextFile.py -- read and display text file'

# get filename
fname = raw_input('Enter file name: ')
print

# attempt to open file for reading
try:
    fobj = open(fname, 'r')
except IOError, e:
    print"*** file open error:", e
else:
    # display contents to the screen
    for eachLine in fobj:
        print eachLine,
    fobj.close()

########NEW FILE########
__FILENAME__ = typechk
#!/usr/bin/env python

def displayNumType(num):
    print num, 'is',
    if isinstance(num, (int, long, float, complex)):
        print 'a number of type:', type(num).__name__
    else:
        print 'not a number at all!!'

displayNumType(-69)
displayNumType(9999999999999999999999L)
displayNumType(98.6)
displayNumType(-5.2+1.9j)
displayNumType('xxx')

########NEW FILE########
__FILENAME__ = idcheck
#!/usr/bin/env python
'''
$Id$

idcheck.py -- checks identifiers for validity

This application is limited in that it currently only supports
checking identifiers with length > 1 (does not process identifiers
of length greater than 1.  This application also does not recognize
do keywords.

Exercise:

    6-2) update this script to process identifiers of length 1
        as well as recognizing keywords as invalid identifiers
        (for use by the programmer; they are valid Python
        identifiers otherwise).
'''

import string        # string utility module

# create alphabet and number sets
alphas = string.letters + '_'
nums = string.digits

# salutation message and input prompt
print 'Welcome to the Identifier Checker v1.0'
print 'Testees must be at least 2 chars long.'
inp = raw_input('Identifier to test? ')

# only take action for identifiers with length > 1
if len(inp) > 1:

    # first character must be alphabetic
    if inp[0] not in alphas:
        print 'invalid: first symbol must be alphabetic'

    # remaning characters can be alphanumeric
    else:
        for otherChar in inp[1:]:
            if otherChar not in alphas + nums:
                print 'invalid: remaining symbols must be alphanumeric'
                break
        else:
            print "okay as an identifier"
else:
    print 'invalid: length must be > 1'

########NEW FILE########
__FILENAME__ = idcheck2
#!/usr/bin/env python

from keyword import kwlist
import string

ALPHAS = string.ascii_letters + '_'
NUMS = string.digits

def main():
    print 'Welcome to the Identifier Checker v2.0'
    myInput = raw_input('Identifier to test? ').strip()

    if len(myInput) == 0:
	print "ERROR: no identifier candidate entered"
	return

    if myInput in kwlist:
	print "ERROR: %r is a keyword" % myInput
	return

    alnums = ALPHAS + NUMS
    for i, c in enumerate(myInput):
	if i == 0 and c not in ALPHAS:
	    print 'ERROR: first symbol must be alphabetic'
	    break
	if c not in alnums:
	    print 'ERROR: remaining symbols must be alphanumeric'
	    break
    else:
	print "okay as an identifier"

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = insertVsColonZero
#!/usr/bin/python

from time import time
REPS = 17500

def insert():
    m = [None]
    i = 0
    now = time()
    while i < REPS:
	m.insert(0, i)
	i += 1
    print 'Elapsed (insert):', time() - now

def colonZero():
    m = [None]
    i = 0
    now = time()
    while i < REPS:
	m[:0] = [i]
	i += 1
    print 'Elapsed (colon-0):', time() - now

def main():
    insert()
    colonZero()

if __name__ == '__main__':
    main()
    raw_input()

########NEW FILE########
__FILENAME__ = NoneIndex
#!/usr/bin/python

s = 'abcde'

#for x,y in enumerate(s):
#    print s[x:], s[:x]
#for i in range(len(s), -1, -1):
    #print s[i:], s[:i], s[i::-1], s[:i:-1]

s = 'abcde'
for i in [None] + range(-1, -len(s), -1):
    print s[:i]

raw_input()

########NEW FILE########
__FILENAME__ = queue
#!/usr/bin/env python
'''
$Id$

queue.py -- simulate queue data structures using lists

NOTE:  as of the time of publication, there is a bug in JPython1.1
    that does not recognize arguments for the list pop() method:
    TypeError: pop(): expected 0 args; got 1

Exercises:

    13-9) create a Queue class

    13-10) create a class similar to arrays in Perl which have
            both queue- and stack-like qualities and features
'''

# create our data structure
queue = []

#
# enQ() -- add string to end of queue
#
def enQ():
    queue.append(raw_input('Enter new queue element: '))

#
# deQ() -- remove string from front of queue
#
def deQ():
    if len(queue) == 0:
        print 'Cannot dequeue from empty queue!'
    else:
        print 'Removed [', queue.pop(0), ']'

#
# viewQ() -- display queue contents
#
def viewQ():
    print str(queue)

#
# showmenu() -- interactive portion of application
#        displays menu to prompt user and takes
#        action based on user response
#
def showmenu():
    prompt = """
(E)nqueue
(D)equeue
(V)iew
(Q)uit

Enter choice: """

    # loop until user quits
    done = 0
    while not done:

        # loop until user choses valid option
        chosen = 0
        while not chosen:

            # if user hits ^C or ^D (EOF),
            # pretend they typed 'q' to quit
            try:
                choice = raw_input(prompt)[0]
            except (IndexError, EOFError, KeyboardInterrupt):
                choice = 'q'
            print '\nYou picked: [%s]' % choice

            # validate option chosen
            if choice not in 'devq':
                print 'invalid option, try again'
            else:
                chosen = 1

        # take appropriate action
        if choice == 'q':
            done = 1
        if choice == 'e':
            enQ()
        if choice == 'd':
            deQ()
        if choice == 'v':
            viewQ()

# run showmenu() as the application
if __name__ == '__main__':
    showmenu()

########NEW FILE########
__FILENAME__ = reversedSorted
>>> reversed('abc')
<reversed object at 0x00B42BD0>
>>> sorted('abc')
['a', 'b', 'c']
>>> sorted('wesley foo bar')
[' ', ' ', 'a', 'b', 'e', 'e', 'f', 'l', 'o', 'o', 'r', 's', 'w', 'y']
>>> for i in reversed('wesley foo bar'):
	print i,

	
r a b   o o f   y e l s e w
>>> for i in reversed(['wesley', 'foo', 'bar']):
	print i,

	
bar foo wesley
>>> sorted(['wesley', 'foo', 'bar'])
['bar', 'foo', 'wesley']
>>> 

>>> s = 'thequickbrownfoxjumpedoverthelazydog'
>>> reversed(s)
<reversed object at 0x38bef0>
>>> for t in reversed(s):
...  print t,
...
g o d y z a l e h t r e v o d e p m u j x o f n w o r b k c i u q e h t
>>> sorted(s)
['a', 'b', 'c', 'd', 'd', 'e', 'e', 'e', 'e', 'f', 'g', 'h', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'o', 'o', 'o', 'p', 'q', 'r', 'r', 't', 't', 'u', 'u', 'v', 'w', 'x', 'y', 'z']
>>>
>>> s = 'foobar'
>>> for t in reversed(s):
...  print t,
...
r a b o o f
>>> sorted(s)
['a', 'b', 'f', 'o', 'o', 'r']
>>> s = ['They', 'stamp', 'them', 'when', "they're", 'small']
>>> for t in reversed(s):
...  print t,
...
small they're when them stamp They
>>> sorted(s)
['They', 'small', 'stamp', 'them', "they're", 'when']


########NEW FILE########
__FILENAME__ = stack
#!/usr/bin/env python
'''
$Id$

stack.py -- simulate stack data structures using lists

Exercises:

    13-8) create a Stack class

    13-10) create a class similar to arrays in Perl which have
            both queue- and stack-like qualities and features
'''

# create our data structure
stack = []

#
# pushit() -- adds stirng to the stack
#
def pushit():
    stack.append(raw_input('Enter new string: '))

#
# popit() -- removes stirng from the stack
#
def popit():
    if len(stack) == 0:
        print 'Cannot pop from an empty stack!'
    else:
        print 'Removed [', stack.pop(), ']'

#
# viewstack() -- display stack contents
#
def viewstack():
    print str(stack)

#
# showmenu() -- interactive portion of application
#        displays menu to prompt user and takes
#        action based on user response
#
def showmenu():

    # using triple quotes to help us put together
    # the multi-line string prompt to display
    prompt = """
p(U)sh
p(O)p
(V)iew
(Q)uit

Enter choice: """

    # loop until user quits
    done = 0
    while not done:

        # loop until user choses valid option
        chosen = 0
        while not chosen:

            # if user hits RETURN/Enter, ^C, or ^D (EOF),
            # pretend they typed 'q' to quit normally
            try:
                choice = raw_input(prompt)[0]
            except (IndexError, EOFError, KeyboardInterrupt):
                choice = 'q'
            print '\nYou picked: [%s]' % choice

            # validate option chosen
            if choice not in 'uovq':
                print 'invalid option, try again'
            else:
                chosen = 1

        # take appropriate action
        if choice == 'q':
            done = 1
        if choice == 'u':
            pushit()
        if choice == 'o':
            popit()
        if choice == 'v':
            viewstack()

# run showmenu() as the application
if __name__ == '__main__':
    showmenu()

########NEW FILE########
__FILENAME__ = stringTemplates
#!/usr/bin/python

from string import Template
s = Template('There are ${howmany} ${lang} Quotation Symbols')
print s.substitute(lang='Python', howmany=3)
print s.substitute(lang='Python')
print s.safe_substitute(lang='Python')
raw_input()

########NEW FILE########
__FILENAME__ = buggy
#!/usr/bin/env python

#
import string

#
while 1:

    #
    num_str = raw_input('Enter a number: ')

    #
    try:
        #
        num_num = string.atoi(num_str)

        #
        break

    #
    except ValueError:
        print "invalid input... try again"

#
fac_list = range(1, num_num+1)
print "BEFORE:", `fac_list`

#
i = 0

#
while i < len(fac_list):

    #
    if num_num % fac_list[i] == 0:
        del fac_list[i]

    #
    i = i+1

#
print "AFTER:", `fac_list`

########NEW FILE########
__FILENAME__ = idcheck
#!/usr/bin/env python

import string

alphas = string.letters + '_'
nums = string.digits

print 'Welcome to the Identifier Checker v1.0'
print 'Testees must be at least 2 chars long.'
inp = raw_input('Identifier to test? ')

if len(inp) > 1:

    if inp[0] not in alphas:
        print '''invalid: first symbol must be
	  alphabetic'''
    else:
        for otherChar in inp[1:]:

            if otherChar not in alphas + nums:
                print '''invalid: remaining
		  symbols must be alphanumeric'''
                break
        else:
            print "okay as an identifier"

########NEW FILE########
__FILENAME__ = queue
#!/usr/bin/env python

queue = []

def enQ():
    queue.append(raw_input('Enter new queue element: '))

def deQ():
    if len(queue) == 0:
        print 'Cannot dequeue from empty queue!'
    else:
        print 'Removed [', queue.pop(0), ']'

def viewQ():
    print str(queue)

def showmenu():
    prompt = """
(E)nqueue
(D)equeue
(V)iew
(Q)uit

Enter choice: """

    done = 0
    while not done:

        chosen = 0
        while not chosen:
            try:
                choice = raw_input(prompt)[0]
            except (IndexError, EOFError, KeyboardInterrupt):
                choice = 'q'
            print '\nYou picked: [%s]' % choice
            if choice not in 'devq':
                print 'invalid option, try again'
            else:
                chosen = 1

        if choice == 'q': done = 1
        if choice == 'e': enQ()
        if choice == 'd': deQ()
        if choice == 'v': viewQ()

if __name__ == '__main__':
    showmenu()

########NEW FILE########
__FILENAME__ = stack
#!/usr/bin/env python

stack = []

def pushit():
    stack.append(raw_input('Enter new string: '))

def popit():
    if len(stack) == 0:
        print 'Cannot pop from an empty stack!'
    else:
        print 'Removed [', stack.pop(), ']'

def viewstack():
    print str(stack)

def showmenu():
    prompt = """
p(U)sh
p(O)p
(V)iew
(Q)uit

Enter choice: """

    done = 0
    while not done:

        chosen = 0
        while not chosen:
            try:
                choice = raw_input(prompt)[0]
            except (IndexError, EOFError, KeyboardInterrupt):
                choice = 'q'
            print '\nYou picked: [%s]' % choice
            if choice not in 'uovq':
                print 'invalid option, try again'
            else:
                chosen = 1

        if choice == 'q': done = 1
        if choice == 'u': pushit()
        if choice == 'o': popit()
        if choice == 'v': viewstack()

if __name__ == '__main__':
    showmenu()

########NEW FILE########
__FILENAME__ = uniFile
#!/usr/bin/env python
'''
An example of reading and writing Unicode strings: Writes
a Unicode string to a file in utf-8 and reads it back in.
'''
CODEC = 'utf-8'
FILE = 'unicode.txt'

hello_out = u"Hello world\n"
bytes_out = hello_out.encode(CODEC)
f = open(FILE, "w")
f.write(bytes_out)
f.close()

f = open(FILE, "r")
bytes_in = f.read()
f.close()
hello_in = bytes_in.decode(CODEC)
print hello_in,

########NEW FILE########
__FILENAME__ = userpw
#!/usr/bin/env python
'''
$Id$

userpw.py -- maintain a "user database" consisting of a set
of login names and corresponding passwords

Exercises:

    7-5a) add a timestamp to the data stored so that the
            user is informed of last successful login

    7-5b) add an "administrative user" which can remove
            users from the database as well as view the
            entire list of current users

    7-5c) add a level of security by encrypting passwords

    7-5d) at a GUI interface if you are familiar with one
            such as Tkinter

    9-13a) store the data base to a disk file so that you
            do not have to "recreate" the database every
            time you run your application

    9-13b) use the pickle module to store the database
            object directly as opposed to writing out the
            data one line at a time
'''
# clear database dictionary
db = {}

#
# newuser() -- create new user and add to database
#
def newuser():
    prompt = 'login desired: '
    while 1:
        name = raw_input(prompt)
        if db.has_key(name):
            prompt = 'name taken, try another: '
            continue
        else:
            break
    pwd = raw_input('passwd: ')
    db[name] = pwd


#
# olduser() -- verify password to login existing users
#
def olduser():
    name = raw_input('login: ')
    pwd = raw_input('passwd: ')
    passwd = db.get(name)
    if passwd == pwd:
        pass
    else:
        print 'login incorrect'
        return

    print 'welcome back', name


#
# showmenu() -- interactive portion of application
#        displays menu to prompt user and takes
#        action based on user response
#
def showmenu():
    prompt = """
(N)ew User Login
(E)xisting User Login
(Q)uit

Enter choice: """

    # loop until user quits
    done = 0
    while not done:

        # loop until user choses valid option
        chosen = 0
        while not chosen:

            # if user hits RETURN/Enter, ^C, or ^D (EOF),
            # pretend they typed 'q' to quit normally
            try:
                choice = raw_input(prompt)[0]
            except (EOFError, KeyboardInterrupt):
                choice = 'q'
            print '\nYou picked: [%s]' % choice

            # validate option chosen
            if choice not in 'neq':
                print 'invalid menu option, try again'
            else:
                chosen = 1

        # take appropriate action
        if choice == 'q':
            done = 1
        if choice == 'n':
            newuser()
        if choice == 'e':
            olduser()


# run showmenu() as the application
if __name__ == '__main__':
    showmenu()

########NEW FILE########
__FILENAME__ = userpw
#!/usr/bin/env python

db = {}

def newuser():
    prompt = 'login desired: '
    while 1:
        name = raw_input(prompt)
        if db.has_key(name):
            prompt = 'name taken, try another: '
            continue
        else:
            break
    pwd = raw_input('passwd: ')
    db[name] = pwd

def olduser():
    name = raw_input('login: ')
    pwd = raw_input('passwd: ')
    passwd = db.get(name)
    if passwd == pwd:
        pass
    else:
        print 'login incorrect'
        return

    print 'welcome back', name

def showmenu():
    prompt = """
(N)ew User Login
(E)xisting User Login
(Q)uit

Enter choice: """

    done = 0
    while not done:
        chosen = 0
        while not chosen:
            try:
                choice = raw_input(prompt)[0]
            except (EOFError, KeyboardInterrupt):
                choice = 'q'
            print '\nYou picked: [%s]' % choice

            if choice not in 'neq':
                print 'invalid menu option, try again'
            else:
                chosen = 1

        if choice == 'q': done = 1
        if choice == 'n': newuser()
        if choice == 'e': olduser()

if __name__ == '__main__':
    showmenu()

########NEW FILE########
__FILENAME__ = maxFact
#!/usr/bin/env python
'''
$Id: maxFact.py,v 1.1 2000/03/16 02:33:40 wesc Exp $

maxFact.py -- calculates the largest factor of a number
    (or indicate that it is prime)
'''

#
# calcMaxFac(num) -- return -1 if prime, largest factor otherwise
#
def calcMaxFac(num):
    # composite smallest possible factor is 2
    count = num / 2

    # count backwards to 0 looking for first factor
    while count > 1:

        # break if factor found...
        if (num % count == 0):
            break

        # otherwise decrement and continue
        else:
            count = count - 1

    # reached 1 without finding a factor, ergo prime;
    # (example of while-else statement)
    else:
        return -1

    # return largest factor found
    return count


#
# showMaxFac(x, y) -- return largest factors of numbers from x to y,
#        or an indication a number if prime if applicable
#
def showMaxFacs(x, y):
    for eachNum in range(x, y):
        res = calcMaxFac(eachNum)
        if res == -1:
            print eachNum, 'is prime'
        else:
            print eachNum, 'has a largest factor of', res


# show the largest factors of values 10 - 20 as a test
if __name__ == '__main__':
    showMaxFacs(10, 21)

########NEW FILE########
__FILENAME__ = maxFact
#!/usr/bin/env python

def showMaxFactor(num):
    count = num / 2
    while count > 1:
        if (num % count == 0): break
	    print 'largest factor of %d is %d' % \
		(num, count)
	    break
        count = count - 1
    else:
	print eachNum, 'is prime'

for eachNum in range(10, 21):
    showMaxFactor(eachNum)

########NEW FILE########
__FILENAME__ = ospathex
#!/usr/bin/env python
'''
$Id$

ospathex.py -- OS path example

    This script test drives many of the operating system module file
    and file path functions.  The temporary directory is chosen by
    the tempfile module.  If that does not exist, then there is a
    limited set of directory names that are hard-coded as part of
    this application.  Please add one for your system if this script
    cannot find a temporary directory for you.
'''

import os        # operating system module (import real OS module, i.e., posix, nt, etc.)

def testOSmod(tmpdir):
    'testOSmod(tmpdir) -- test the "os" module with given temporary directory'

    # set working directory
    wd = os.path.join(tmpdir, 'example')

    # create and display test subdirectory name
    print '*** creating example directory...'
    os.mkdir(wd)
    print '*** new working directory:'
    print wd

    # display test subdirectory listing
    print '*** working directory listing:'
    print os.listdir(wd)

    # create test file and show updated directory listing
    print '*** creating test file...'
    testfile = os.path.join(wd, 'test')
    file = open(testfile, 'w')
    file.write('foo\n')
    file.write('bar\n')
    file.close()
    print '*** updated directory listing:'
    print os.listdir(wd)

    # test file rename using os.rename()
    print "*** renaming 'test' to 'filetest.txt'"
    newtestfile = os.path.join(wd, 'filetest.txt')
    os.rename(testfile, newtestfile)
    print '*** updated directory listing:'
    print os.listdir(wd)

    # test file pathname component join function (os.path.join())
    # (join directory name and only file [our test file] in directory)
    path = os.path.join(wd, os.listdir(wd)[0])
    print '*** full file pathname:'
    print path

    # test file pathname split and extension split
    print '*** (pathname, basename) == '
    print os.path.split(path)
    print '*** (filename, extension) == '
    print os.path.splitext(os.path.basename(path))

    # display test file contents
    print '*** displaying file contents:'
    file = open(path)
    allLines = file.readlines()
    file.close()
    for eachLine in allLines:
        print eachLine,

    # remove test file, show updated directory listing
    print '*** deleting test file'
    os.remove(path)
    print '*** updated directory listing:'
    print os.listdir(wd)

    # delete test directory
    print '*** deleting test directory'
    os.rmdir(wd)
    print '*** DONE'


def main():
    'main() -- look for temporary directory and run test'

    # look for a temporary directory; try tempfile module first
    try:
        from tempfile import gettempdir
        tmpdir = gettempdir()

    # if tempfile not available, try a few selected directories
    except:
        for tmpdir in ('/tmp', 'c:/windows/temp'):
            if os.path.isdir(tmpdir):
                break

        # otherwise no temporary directory found
        else:
            print 'no temp directory available'
            return

    testOSmod(tmpdir)


# run main() if invoked as script
if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = ospathex
#!/usr/bin/env python

import os
for tmpdir in ('/tmp', 'c:/windows/temp'):
    if os.path.isdir(tmpdir):
	break
else:
    print 'no temp directory available'
    tmpdir = ''

if tmpdir:
    os.chdir(tmpdir)
    cwd = os.getcwd()
    print '*** current temporary directory'
    print cwd

    print '*** creating example directory...'
    os.mkdir('example')
    os.chdir('example')
    cwd = os.getcwd()
    print '*** new working directory:'
    print cwd
    print '*** original directory listing:'
    print os.listdir(cwd)

    print '*** creating test file...'
    file = open('test', 'w')
    file.write('foo\n')
    file.write('bar\n')
    file.close()
    print '*** updated directory listing:'
    print os.listdir(cwd)

    print "*** renaming 'test' to 'filetest.txt'"
    os.rename('test', 'filetest.txt')
    print '*** updated directory listing:'
    print os.listdir(cwd)

    path = os.path.join(cwd, os.listdir(cwd)[0])
    print '*** full file pathname:'
    print path
    print '*** (pathname, basename) == '
    print os.path.split(path)
    print '*** (filename, extension) == '
    print os.path.splitext(os.path.basename(path))

    print '*** displaying file contents:'
    file = open(path)
    allLines = file.readlines()
    file.close()
    for eachLine in allLines:
	print eachLine,

    print '*** deleting test file'
    os.remove(path)
    print '*** updated directory listing:'
    print os.listdir(cwd)
    os.chdir(os.pardir)
    print '*** deleting test directory'
    os.rmdir('example')
    print '*** DONE'

########NEW FILE########
__FILENAME__ = cardrun
#!/usr/bin/env python
'''
$Id$

cardrun.py -- "credit card run" script serves as a demo for a
    ficticious credit card transaction processing application
    which reads data in from a file and uses the safe_float()
    function along with try-except to safely "ignore bad data" 
    such as string text as opposed to strictly numerical input.
'''

# safe_float() --> float
def safe_float(object):
    'safe_float() converts strings to floats "safely"'

    # attempt to convert object using float()
    try:
        retval = float(object)

    # failure return value is error reason
    except (TypeError, ValueError), e:
        retval = str(e)

    return retval


# main() --> None
def main():
    'main() handles all the data processing'

    # attempt to open data file
    try:
        ccfile = open('carddata.txt', 'r')

    # display error reason on failure
    except IOError, e:
        print 'file open failed:', e
        return

    # otherwise show a diagnostic 'ok'
    else:
        print 'file opened successfully'

    # read all data and close file
    txns = ccfile.readlines()
    ccfile.close()

    # processing setup
    total = 0.00
    print 'processing new account, log:'

    # look at each transaction
    for eachTxn in txns:
        result = safe_float(eachTxn)

        # string indicates failure ...
        if isinstance(result, basestring):
            if eachTxn[0] == '#':
                print 'comment... ignored'
            else:
                print '\ncategory:', eachTxn

        # ... while float means success
        elif isinstance(result, float):
            total += result
            print 'processing transaction of: %.2f' % result

        # unknown return type from safe_float()
        else:
            print 'invalid return type from safe_float()... ignored'

    # display final totals
    print 'new balance: $%.2f' % (total)

# call main() if invoked as script
if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = myexc
#!/usr/bin/env python
'''
$Id$

myexc.py -- "my exceptions" demo which highlights user-created
    exceptions.  NOTE:  this example does not currently work with
    JPython as neither the errno nor tempfile modules have been
    implemented, and also, the socket module is incomplete.
'''

# import all our needed modules
import os, socket, errno, types, tempfile

# create our a new NetworkError exception, derived from IOError
class NetworkError(IOError):
    pass

# create our a new FileError exception, derived from IOError
class FileError(IOError):
    pass

# updArgs --> tuple
def updArgs(args, newarg=None):
    '''updArgs(args, newarg=None) -- if instance, grab each exception
        instance argument and place them in a list; otherwise, just
        convert given args sequence to a list for mutability; add
        newarg if necessary; then convert the whole thing to a tuple.'''

    if isinstance(args, IOError):
        myargs = []
	myargs.extend([arg for arg in args])
    else:
        myargs = list(args)

    if newarg:
        myargs.append(newarg)

    return tuple(myargs)


# fileArgs --> tuple
def fileArgs(fn, mode, args):
    '''fileArgs(fn, mode, args) -- similar to updArgs() except made
        specifically for files; creates small permission string and
        formats error to be similar to other IOError exceptions.'''

    if args[0] == errno.EACCES and \
            'access' in dir(os):
        perms = ''
        permd = { 'r': os.R_OK, 'w': os.W_OK, \
                    'x': os.X_OK }
        pkeys = permd.keys()
        pkeys.sort()
        pkeys.reverse()

        for eachPerm in 'rwx':
            if os.access(fn, permd[eachPerm]):
                perms = perms + eachPerm
            else:
                perms = perms + '-'

        if isinstance(args, IOError):
            myargs = []
	    myargs.extend([arg for arg in args])
        else:
            myargs = list(args)

        myargs[1] = "'%s' %s (perms: '%s')" % \
                    (mode, myargs[1], perms)

        myargs.append(args.filename)

    else:
        myargs = args

    return tuple(myargs)

# myconnect() --> None (raises exception on error)
def myconnect(sock, host, port):
    '''myconnect(sock, host, port) -- attempt to make a network connection
    with the given socket and host-port pair; raises our new NetworkError
    exception and collates error number and reason.'''

    try:
        sock.connect(host, port)

    except socket.error, args:
        myargs = updArgs(args)        # convert inst to tuple
        if len(myargs) == 1:        # no #s on some errors
            myargs = (errno.ENXIO, myargs[0])

        raise NetworkError, \
            updArgs(myargs, host + ':' + str(port))


# myopen() --> file object
def myopen(fn, mode='r'):
    '''myopen(fn, mode) -- wrapper around the open() built-in function
    such that we raise our new FileError exception on an error situation
    and collate a set of FileError exception arguments to pass to the user'''

    try:
        fo = open(fn, mode)

    except IOError, args:
        raise FileError, fileArgs(fn, mode, args)

    return fo


# testfile() --> None
def testfile():
    '''testfile() -- runs the file tester, setting a variety of test files
    which should generate FileError exceptions'''

    fn = tempfile.mktemp()
    f = open(fn, 'w')
    f.close()

    for eachTest in ((0, 'r'), (0100, 'r'), (0400, 'w'), (0500, 'w')):
        try:
            os.chmod(fn, eachTest[0])
            f = myopen(fn, eachTest[1])

        except FileError, args:
            print "%s: %s" % \
                    (args.__class__.__name__, args)
        else:
            print fn, "opened ok... perms ignored"
            f.close()

    os.chmod(fn, 0777)
    os.unlink(fn)


# testnet() --> None
def testnet():
    '''testfile() -- runs the network tester, making various connections
    which should generate NetworkError exceptions'''
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    for eachHost in (YOUR HOSTS HERE):
        try:
            myconnect(s, eachHost, 80)
        except NetworkError, args:
            print "%s: %s" % (args.__class__.__name__, args)
        else:
            print "network connection successful to", `eachHost`
            s.close()


# run tests if invoked as a script
if __name__ == '__main__':
    testfile()
    testnet()

########NEW FILE########
__FILENAME__ = cardrun
#!/usr/bin/env python

def safe_float(object):
    'safe version of float()'
    try:
        retval = float(object)
    except (TypeError, ValueError), diag:
        retval = str(diag)
    return retval

def main():
    'handles all the data processing'
    log = open('cardlog.txt', 'w')
    try:
        ccfile = open('carddata.txt', 'r')
    except IOError, e:
        log.write('no txns this month\n')
	log.close()
        return

    txns = ccfile.readlines()
    ccfile.close()
    total = 0.00
    log.write('account log:\n')

    for eachTxn in txns:
        result = safe_float(eachTxn)
        if isinstance(result, float):
            total += result
            log.write('data... processed\n')
	else:
	    log.write('ignored: %s' % result)
    print '$%.2f (new balance)' % (total)
    log.close()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = myexc
#!/usr/bin/env python

import os, socket, errno, types, tempfile

class NetworkError(IOError):
    pass

class FileError(IOError):
    pass

def updArgs(args, newarg=None):
    if isinstance(args, IOError):
        myargs = []
	myargs.extend([arg for arg in args])
    else:
        myargs = list(args)

    if newarg:
        myargs.append(newarg)

    return tuple(myargs)

def fileArgs(fn, mode, args):
    if args[0] == errno.EACCES and \
	    'access' in dir(os):
        perms = ''
        permd = {'r': os.R_OK, 'w': os.W_OK,
	    'x': os.X_OK}
        pkeys = permd.keys()
        pkeys.sort()
        pkeys.reverse()

        for eachPerm in 'rwx':
            if os.access(fn, permd[eachPerm]):
                perms = perms + eachPerm
            else:
                perms = perms + '-'

        if isinstance(args, IOError):
            myargs = []
	    myargs.extend([arg for arg in args])
        else:
            myargs = list(args)

        myargs[1] = "'%s' %s (perms: '%s')" % \
                    (mode, myargs[1], perms)

        myargs.append(args.filename)

    else:
        myargs = args

    return tuple(myargs)

def myconnect(sock, host, port):
    try:
        sock.connect((host, port))

    except socket.error, args:
        myargs = updArgs(args)        # convert inst to tuple
        if len(myargs) == 1:        # no #s on some errors
            myargs = (errno.ENXIO, myargs[0])

        raise NetworkError, \
	    updArgs(myargs, host + ':' + str(port))

def myopen(fn, mode='r'):
    try:
        fo = open(fn, mode)
    except IOError, args:
        raise FileError, fileArgs(fn, mode, args)

    return fo

def testfile():

    fn = tempfile.mktemp()
    f = open(fn, 'w')
    f.close()

    for eachTest in ((0, 'r'), (0100, 'r'), \
	    (0400, 'w'), (0500, 'w')):
        try:
            os.chmod(fn, eachTest[0])
            f = myopen(fn, eachTest[1])

        except FileError, args:
            print "%s: %s" % \
		(args.__class__.__name__, args)
        else:
            print fn, "opened ok... perms ignored"
            f.close()

    os.chmod(fn, 0777)	# enable all perms
    os.unlink(fn)

def testnet():
    s = socket.socket(socket.AF_INET,
	socket.SOCK_STREAM)

    for eachHost in (YOUR HOSTS HERE)
        try:
            myconnect(s, eachHost, 80)
        except NetworkError, args:
            print "%s: %s" % \
                (args.__class__.__name__, args)

if __name__ == '__main__':
    testfile()
    testnet()

########NEW FILE########
__FILENAME__ = counter
#!/usr/bin/env python

def counter(start_at=0):
    count = start_at
    while True:
	val = (yield count)
	if val is not None:
	    count = val
	else:
	    count += 1

if __name__ == '__main__':
    print 'initializing counter to start counting at 5'
    count = counter(5)
    print 'calling count.next():', count.next()
    print 'calling count.next():', count.next()
    print 'calling count.send(9):', count.send(9)
    print 'calling count.next():', count.next()
    print 'calling count.close():', count.close()
    print 'calling count.next():', count.next()

########NEW FILE########
__FILENAME__ = deco
#!/usr/bin/env python

from time import ctime, sleep

'''
def counter(func):
    if not hasattr(func, 'ncalls'):
        print '*** initializing ctr'
        func.ncalls = [0]
    def wrappedFunc():
        func.ncalls[0] += 1
        print '*** incrementing ctr to', func.ncalls
        print 'INSIDE: id(func) =', id(func)
        return func()
    print 'id(func) =', id(func)
    print 'id(wrappedfunc) =', id(wrappedFunc)
    wrappedFunc.ncalls = func.ncalls
    return wrappedFunc
'''

def tsfunc(func):
    def wrappedFunc():
        print '[%s] %s() called' % (
            ctime(), func.__name__)
        return func()
    return wrappedFunc

@tsfunc
def foo():
    pass

foo()
sleep(4)

for i in range(2):
    sleep(1)
    foo()

'''
#exer
update example XXX to:
- write the timestamp to a logfile instead of screen output
- time how long it takes to exec the given function, i.e., see the timeit() exercise above
- create a function registry:
    track the number of functions which have registered with your system,
    how many times those functions have been called,
    and what are the avg time of each execution and total time of execution

- write a memoizer... for small recursive functions or just for simple functions that are called a lot, cache the results given a set of arguments (must be hashable, i.e, immutable objects), so that if the same function is called again with the same args, then just return the previously saved value instead of (re)running the function from scratch.  There are many examples online (use a search engine), so that even if you are inspired by an existing piece of code, customize that code by making an improvement that is truly your own.

'''

########NEW FILE########
__FILENAME__ = randGen
#!/usr/bin/env python

from random import randrange as rr

def randGen(aList):
    while aList:
	yield aList.pop(rr(len(aList)))

if __name__ == '__main__':
    for item in randGen(['rock', 'paper', 'scissors']):
	print item

########NEW FILE########
__FILENAME__ = scope
#!/usr/bin/env python
# $Id$
#
# scope.py -- variable scope example
#

"""This script highlights some elements of variable scope
and how it relates to Python programming.  Global and local
variables and the changing of their values are used to
illustrate which variables are active in various execution
scopes.

main() contains global variables and calls proc1() and proc2().
"""

j, k = 1, 2                # global


def proc1():               # proc1()
    "proc1() includes local variables"

    j, k = 3, 4            # local
    
    print "j == %d and k == %d" % (j, k)

    k = 5


def proc2():               # proc2()
    'proc2() includes a local variable and calls proc1()'

    #global j              # use global not local 'j'
    j = 6                  # local

    proc1()

    print "j == %d and k == %d" % (j, k)


k = 7

proc1()

print "j == %d and k == %d" % (j, k)

j = 8

proc2()

print "j == %d and k == %d" % (j, k)

########NEW FILE########
__FILENAME__ = simpleGen
#!/usr/bin/env python

def simpleGen():
    yield 1
    yield '2 --> punch!'

if __name__ == '__main__':
    for item in simpleGen():
	print item

########NEW FILE########
__FILENAME__ = closureVars
#!/usr/bin/env python

output = '<int %r id=%#0x value=%d>'
w = x = y = z = 1

def f1():
    x = y = z = 2

    def f2():
	y = z = 3

	def f3():
	    z = 4
	    print output % ('w', id(w), w)
	    print output % ('x', id(x), x)
	    print output % ('y', id(y), y)
	    print output % ('z', id(z), z)

	clo = f3.func_closure
	if clo:
	    print "f3 closure vars:", [str(c) for c in clo]
	else:
	    print "no f3 closure vars"
	f3()

    clo = f2.func_closure
    if clo:
	print "f2 closure vars:", [str(c) for c in clo]
    else:
	print "no f2 closure vars"
    f2()

clo = f1.func_closure
if clo:
    print "f1 closure vars:", [str(c) for c in clo]
else:
    print "no f1 closure vars"
f1()

########NEW FILE########
__FILENAME__ = deco
#!/usr/bin/env python

from time import ctime, sleep

def tsfunc(func):
    def wrappedFunc():
        print '[%s] %s() called' % (
            ctime(), func.__name__)
        return func()
    return wrappedFunc

@tsfunc
def foo():
    pass

foo()
sleep(4)

for i in range(2):
    sleep(1)
    foo()

########NEW FILE########
__FILENAME__ = easyMath
#!/usr/bin/env python

from operator import add, sub
from random import randint, choice

ops = {'+': add, '-': sub}
MAXTRIES = 2

def doprob():
    op = choice('+-')
    nums = [ randint(1,10) for i in range(2) ]
    nums.sort(reverse=True)
    ans = ops[op](*nums)
    pr = '%d %s %s = ' % (nums[0], op, nums[1])
    oops = 0
    while True:
        try:
            if int(raw_input(pr)) == ans:
                print 'correct'
                break
            if oops == MAXTRIES:
                print 'sorry... the answer is\n%s%d' % (pr, ans)
            else:
                print 'incorrect... try again'
                oops += 1
        except (KeyboardInterrupt,
                EOFError, ValueError):
            print 'invalid input... try again'

def main():
    while True:
        doprob()
        try:
            opt = raw_input('Again? [y] ').lower()
            if opt and opt[0] == 'n':
                break
        except (KeyboardInterrupt, EOFError):
            break

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = funcLog
#!/usr/bin/env python

from time import time

def logged(when):
    def log(f, *args, **kargs):
        print """Called:
function: %s
args: %r
kargs: %r""" % (f, args, kargs)

    def pre_logged(f):
        def wrapper(*args, **kargs):
            log(f, *args, **kargs)
            return f(*args, **kargs)
        return wrapper

    def post_logged(f):
        def wrapper(*args, **kargs):
            now = time()
            try:
                return f(*args, **kargs)
            finally:
                log(f, *args, **kargs)
                print "    time delta: %s" % (time()-now)
        return wrapper

    try:
        return {"pre": pre_logged,
		"post": post_logged}[when]
    except KeyError, e:
        raise ValueError(e), 'must be "pre" or "post"'

@logged("post")
def hello(name):
    print "Hello,", name

hello("World!")

########NEW FILE########
__FILENAME__ = grabWeb
#!/usr/bin/env python

from urllib import urlretrieve

def firstNonBlank(lines):
    for eachLine in lines:
        if not eachLine.strip():
            continue
        else:
            return eachLine

def firstLast(webpage):
    f = open(webpage)
    lines = f.readlines()
    f.close()
    print firstnonblank(lines),
    lines.reverse()
    print firstnonblank(lines),

def download(url='http://www',
            process=firstLast):
    try:
        retval = urlretrieve(url)[0]
    except IOError:
        retval = None
    if retval:		# do some processing
        process(retval)

if __name__ == '__main__':
    download()

########NEW FILE########
__FILENAME__ = numConv
#!/usr/bin/env python

def convert(func, seq):
	'conv. sequence of numbers to same type'
	return [func(eachNum) for eachNum in seq]

myseq = (123, 45.67, -6.2e8, 999999999L)
print convert(int, myseq)
print convert(long, myseq)
print convert(float, myseq)

########NEW FILE########
__FILENAME__ = pfaGUI
#!/usr/local/bin/python2.5

from functools import partial
import Tkinter

root = Tkinter.Tk()
MyButton = partial(Tkinter.Button,
    root, fg='white', bg='blue')
b1 = MyButton(text='Button 1')
b2 = MyButton(text='Button 2')
qb = MyButton(text='QUIT', bg='red',
    command=root.quit)
b1.pack()
b2.pack()
qb.pack(fill=Tkinter.X, expand=True)
root.title('PFAs!')
root.mainloop()

########NEW FILE########
__FILENAME__ = scope
#!/usr/bin/env python
j, k = 1, 2

def proc1():

    j, k = 3, 4
    print "j == %d and k == %d" % (j, k)
    k = 5

def proc2():

    #global j
    j = 6
    proc1()
    print "j == %d and k == %d" % (j, k)

k = 7
proc1()
print "j == %d and k == %d" % (j, k)

j = 8
proc2()
print "j == %d and k == %d" % (j, k)

########NEW FILE########
__FILENAME__ = testit
#!/usr/bin/env python

def testit(func, *nkwargs, **kwargs):

   try:
       retval = func(*nkwargs, **kwargs)
       result = (True, retval)
   except Exception, diag:
       result = (False, str(diag))
   return result

def test():
    funcs = (int, long, float)
    vals = (1234, 12.34, '1234', '12.34')

    for eachFunc in funcs:
        print '-' * 20
        for eachVal in vals:
            retval = testit(eachFunc,
                            eachVal)
            if retval[0]:
                print '%s(%s) =' % \
    (eachFunc.__name__, `eachVal`), retval[1]
            else:
                print '%s(%s) = FAILED:' % \
    (eachFunc.__name__, `eachVal`), retval[1]

if __name__ == '__main__':
    test()

########NEW FILE########
__FILENAME__ = anyIter
#!/usr/bin/env python

class AnyIter:  # any number of items iterator
    def __init__(self, data, safe=0):
        self.safe = safe        # play it safe
        self.iter = iter(data)  # our iterator

    def __iter__(self):         # class iterator
        return self

    def next(self, howmany=1):  # special next()
        retval = []
        for eachItem in range(howmany):
            try:
                retval.append(self.iter.next())
            except StopIteration:
                # reraise if asking for too
                # many items
                if self.safe == 0:
                    raise
                # "safe" mode: return less than
                # requested
                else:
                    break
        return retval

########NEW FILE########
__FILENAME__ = capOpen
#!/usr/bin/env python
# $Id: capOpen.py,v 1.1 2000/07/01 23:10:01 wesc Exp $
#
# capOpen.py -- short delegation example with files
#
# created on 00/06/01 by wesc
#

from string import upper	# import string.upper()

class capOpen:

    # constructor
    def __init__(self, fn, mode='r', buf=-1):
        self.file = open(fn, mode, buf)

    # str() calls this
    def __str__(self):
        return str(self.file)

    # repr() and `` call this
    def __repr__(self):
        return `self.file`

    # implement/override write() (which calls the real write())
    def write(self, line):
        self.file.write(upper(line))

    # delegation happens here, i.e., delegate all other methods
    def __getattr__(self, attr):
        return getattr(self.file, attr)

########NEW FILE########
__FILENAME__ = descr-tef
#!/usr/bin/env python

import os
import pickle

class FileDescr(object):
    saved = []

    def __init__(self, name=None):
        self.name = name

    def __get__(self, obj, typ=None):
        if self.name not in FileDescr.saved:
            raise AttributeError, \
                "%r used before assignment" % self.name

        try:
            f = open(self.name, 'r')
            val = pickle.load(f)
            f.close()
            return val
        except (pickle.UnpicklingError, IOError,
                EOFError, AttributeError,
                ImportError, IndexError), e:
            raise AttributeError, \
                "could not read %r: %s" % self.name

    def __set__(self, obj, val):
        f = open(self.name, 'w')
        try:
	    pickle.dump(val, f)
	    FileDescr.saved.append(self.name)
	except (TypeError, pickle.PicklingError), e:
	    raise AttributeError, \
		"could not pickle %r" % self.name
        finally:
            f.close()

    def __delete__(self, obj):
        try:
            os.unlink(self.name)
            FileDescr.saved.remove(self.name)
        except (OSError, ValueError), e:
            pass

########NEW FILE########
__FILENAME__ = descr-with
#!/usr/bin/env python

import os
import pickle

class FileDescr(object):
    saved = []

    def __init__(self, name=None):
        self.name = name

    def __get__(self, obj, typ=None):
        if self.name not in FileDescr.saved:
            raise AttributeError, \
                "%r used before assignment" % self.name

        try:
            f = open(self.name, 'r')
            val = pickle.load(f)
            f.close()
            return val
        except (pickle.UnpicklingError, IOError,
                EOFError, AttributeError,
                ImportError, IndexError), e:
            raise AttributeError, \
                "could not read %r: %s" % self.name

    def __set__(self, obj, val):
        with open(self.name, 'w') as f:
            try:
                pickle.dump(val, f)
                FileDescr.saved.append(self.name)
            except (TypeError, pickle.PicklingError), e:
                raise AttributeError, \
                    "could not pickle %r" % self.name

    def __delete__(self, obj):
        try:
            os.unlink(self.name)
            FileDescr.saved.remove(self.name)
        except (OSError, ValueError), e:
            pass

########NEW FILE########
__FILENAME__ = descr
#!/usr/bin/env python

import os
import pickle

class FileDescr(object):
    '''
    FileDescr -- description which uses the file
    system to archive instance attributes
    '''
    saved = []

    def __init__(self, name):
	'__init__() -- saves the attribute name'
        self.name = name

    def __get__(self, obj, typ=None):
	'__get__() -- retrives attribute from disk'
        self.name = name
        if self.name not in FileDescr.saved:
            raise AttributeError, \
                "%r used before assignment" % self.name

	# open pickle file and load object; choke on failure
        try:
            f = open(self.name, 'r')
            val = pickle.load(f)
            f.close()
            return val
        except (pickle.UnpicklingError, IOError,
                EOFError, AttributeError,
                ImportError, IndexError), e:
            raise AttributeError, \
                "could not read %r: %s" % self.name

    def __set__(self, obj, val):
	'__set__() -- saves attribute to disk'
        try:
            try:
		f = open(self.name, 'w')
                pickle.dump(val, f)
                FileDescr.saved.append(self.name)
            except (IOError, TypeError, pickle.PicklingError), e:
                raise AttributeError, \
                    "could not pickle %r" % self.name
        finally:
            f.close()

    def __delete__(self, obj):
	'__set__() -- removes instance attribute'
        try:
            os.unlink(self.name)
            FileDescr.saved.remove(self.name)
        except (OSError, ValueError), e:
            pass

########NEW FILE########
__FILENAME__ = hotel
#!/usr/bin/env python

class HotelRoomCalc:
    'Hotel room rate calculator'
   
    # constructor, set default sales and room tax rates
    def __init__(self, rt, sales=0.085, rm=0.1):
        'HotelRoolCalc default args: sales tax == 8.5% & room tax == 10%'
        self.salesTax = sales	# set sales tax rate
        self.roomTax = rm	# set room tax rate
        self.roomRate = rt	# set daily room rate

    # calculate total due, defaulting to a 1-day stay
    def calcTotal(self, days=1):
        'Calculate total; default to daily rate'

	# calculate total... take room rate, add sales
	# and room taxes and round to 2 decimal places
        daily = round((self.roomRate * (1 + self.roomTax + self.salesTax)), 2)

	# now multiply by length of stay and return
        return float(days) * daily

########NEW FILE########
__FILENAME__ = metaIntro
#!/usr/bin/env python

from time import ctime

print '*** Welcome to Metaclasses!'
print '\tMetaclass declaration first.'

class MetaC(type):
	def __init__(cls, name, bases, attrd):
		super(MetaC, cls).__init__(name, bases, attrd)
		print '*** Created class %r at: %s' % (
				name, ctime())

print '\tClass "Foo" declaration next.'

class Foo(object):
	__metaclass__ = MetaC
	def __init__(self):
		print '*** Instantiated class %r at: %s' % (
				self.__class__.__name__, ctime())

print '\tClass "Foo" instantiation next.'
f = Foo()
print '\tDONE'
raw_input()

########NEW FILE########
__FILENAME__ = moneyfmt
#!/usr/bin/env python
# $Id: moneyfmt.py,v 1.2 2000/02/07 07:46:09 wesc Exp $
#
# moneyfmt.py -- create a class that prints a floating-point
#        value in a financial format
#
# created 00/02/07 by wesc
#

"""Implements the Dollar class for displaying a financial
    format for single floating-point values.  Also see
    moneyfmt.MoneyFmt.__doc__.
"""

class MoneyFmt(object):

    """This class...

        x = dollar.Dollar(amount)        # amount is a float

        NOTE:  str() will give the formatted display while repr() and `` will
            give the raw float value.  This allows for both pretty-printing
            output as well as the ability to still manipulate the values.

        Methods:

            x.update([amount]) -- updates the value of the number
    """

    def __init__(self, value=0.):                # constructor

        self.value = float(value)


    def update(self, value=None):                # allow updates

        """x.update([amount])
                You can update the amount with this method.
                If the value is missing, the value is not updated.
                Also see moneyfmt.MoneyFmt.__doc__.
        """

        ###
        ###        (a) FILL THIS IN
        ###


    def __nonzero__(self):                        # boolean test (same as float)

            return int(self.value)


    def __repr__(self):                                # standalone, as a float number

        return str(self.value)


    def __str__(self):                                # display in requested format

        val = ''

        ###
        ###        (b) FILL THIS IN... don't forget about negative numbers too!!
        ###

        return val

########NEW FILE########
__FILENAME__ = twrapme
#!/usr/bin/env python
# $Id: twrapme.py,v 1.1 2000/06/02 08:14:55 wesc Exp $
#
# twrapme.py -- another simple wrapping example
#
# created on 00/04/26 by wesc
#

from time import time, ctime	# import time.time(), time.ctime()

class TimedWrapMe:

    # constructor, sets data item to wrap and
    # updates create, modify, and access times
    def __init__(self, obj):
        self.__data = obj
        self.__ctime = self.__mtime = self.__atime = time()

    # sets new data value, updates modify and access times
    def set(self, obj):
        self.__data = obj
        self.__mtime = self.__atime = time()

    # gets current data value, updates access time
    def get(self):
        self.__atime = time()
        return self.__data

    # get request time value
    def gettimeval(self, t_type):
        if type(t_type) != type('') or t_type[0] not in 'cma':
            raise TypeError, "gettime() requires argument of 'c', 'm', or 'a'"
        return eval('self._%s__%stime' % (self.__class__.__name__, t_type[0]))

    # get request time string
    def gettimestr(self, t_type):
        return ctime(self.gettimeval(t_type))

    # repr() and `` call this
    def __repr__(self):
        self.__atime = time()
        return `self.__data`

    # str() calls this
    def __str__(self):
        self.__atime = time()
        return str(self.__data)

    # delegate all other functionality to object's native methods
    def __getattr__(self, attr):
        self.__atime = time()
        return getattr(self.__data, attr)

########NEW FILE########
__FILENAME__ = anyIter
#!/usr/bin/env python

class AnyIter(object):
    def __init__(self, data, safe=0):
        self.safe = safe
        self.iter = iter(data)

    def __iter__(self):
        return self

    def next(self, howmany=1):
        retval = []
        for eachItem in range(howmany):
            try:
                retval.append(self.iter.next())
            except StopIteration:
                if self.safe:
                    break
                else:
                    raise
        return retval

########NEW FILE########
__FILENAME__ = capOpen
#!/usr/bin/env python

class CapOpen(object):
    def __init__(self, fn, mode='r', buf=-1):
        self.file = open(fn, mode, buf)

    def __str__(self):
        return str(self.file)

    def __repr__(self):
        return `self.file`

    def write(self, line):
        return self.file.write(line.upper())

    def __getattr__(self, attr):
        return getattr(self.file, attr)

########NEW FILE########
__FILENAME__ = descr
#!/usr/bin/env python

import os
import pickle

class FileDescr(object):
    saved = []

    def __init__(self, name):
        self.name = name

    def __get__(self, obj, typ=None):
        if self.name not in FileDescr.saved:
            raise AttributeError, \
                "%r used before assignment" % self.name

        try:
            f = open(self.name, 'r')
            val = pickle.load(f)
            f.close()
            return val
        except (pickle.UnpicklingError, IOError,
                EOFError, AttributeError,
                ImportError, IndexError), e:
            raise AttributeError, \
                "could not read %r: %s" % self.name

    def __set__(self, obj, val):
        try:
            f = open(self.name, 'w')
            pickle.dump(val, f)
            FileDescr.saved.append(self.name)
        except (IOError, TypeError, pickle.PicklingError), e:
            raise AttributeError, \
                "could not pickle %r" % self.name
        finally:
            f.close()

    def __delete__(self, obj):
        try:
            os.unlink(self.name)
            FileDescr.saved.remove(self.name)
        except (OSError, ValueError), e:
            pass

########NEW FILE########
__FILENAME__ = descr0
#!/usr/bin/env python

import os
import pickle

class FileDescr(object):
    saved = []

    def __init__(self, name=None):
        self.name = name

    def __get__(self, obj, typ=None):
        if self.name not in FileDescr.saved:
            raise AttributeError, \
                "%r used before assignment" % self.name

        try:
            f = open(self.name, 'r')
            val = pickle.load(f)
            f.close()
            return val
        except (pickle.UnpicklingError, IOError,
                EOFError, AttributeError,
                ImportError, IndexError), e:
            raise AttributeError, \
                "could not read %r: %s" % self.name

    def __set__(self, obj, val):
        f = open(self.name, 'w')
        try:
            try:
                pickle.dump(val, f)
                FileDescr.saved.append(self.name)
            except (TypeError, pickle.PicklingError), e:
                raise AttributeError, \
                    "could not pickle %r" % self.name
        finally:
            f.close()

    def __delete__(self, obj):
        try:
            os.unlink(self.name)
            FileDescr.saved.remove(self.name)
        except (OSError, ValueError), e:
            pass

########NEW FILE########
__FILENAME__ = descrPRE25
#!/usr/bin/env python

import os
import pickle

class FileDescr(object):
    saved = []

    def __init__(self, name):
        self.name = name

    def __get__(self, obj, typ=None):
        if self.name not in FileDescr.saved:
            raise AttributeError, \
                "%r used before assignment" % self.name

        try:
            f = open(self.name, 'r')
            val = pickle.load(f)
            f.close()
            return val
        except (pickle.UnpicklingError, IOError,
                EOFError, AttributeError,
                ImportError, IndexError), e:
            raise AttributeError, \
                "could not read %r: %s" % self.name

    def __set__(self, obj, val):
        try:
            try:
                f = open(self.name, 'w')
                pickle.dump(val, f)
                FileDescr.saved.append(self.name)
            except (IOError, TypeError, pickle.PicklingError), e:
                raise AttributeError, \
                    "could not pickle %r" % self.name
        finally:
            f.close()

    def __delete__(self, obj):
        try:
            os.unlink(self.name)
            FileDescr.saved.remove(self.name)
        except (OSError, ValueError), e:
            pass

########NEW FILE########
__FILENAME__ = hotel
class HotelRoomCalc:
    'Hotel room rate calculator'
   
    def __init__(self, rt, sales=0.085, rm=0.1):
        '''HotelRoolCalc default arguments:
        sales tax == 8.5% and room tax == 10%'''
        self.salesTax = sales
        self.roomTax = rm
        self.roomRate = rt

    def calcTotal(self, days=1):
        'Calculate total; default to daily rate'
        daily = round((self.roomRate * \
            (1 + self.roomTax + self.salesTax)), 2)
        return float(days) * daily

########NEW FILE########
__FILENAME__ = meta
#!/usr/bin/env python

from warnings import warn

class ReqStrSugRepr(object):

    def __init__(cls, name, bases, attrd):
        super(ReqStrSugRepr, cls).__init__(
            name, bases, attrd)

        if '__str__' not in attrd:
            raise TypeError(
                "Class requires overriding of __str__()")

        if '__repr__' not in attrd:
            warn(
            'Class suggests overriding of __repr__()\n',
                stacklevel=3)

print '*** Defined ReqStrSugRepr (meta)class\n'

class Foo(object):
    __metaclass__ = ReqStrSugRepr

    def __str__(self):
        return 'Instance of class:', \
            self.__class__.__name__

    def __repr__(self):
        return self.__class__.__name__

print '*** Defined Foo class\n'

class Bar(object):
    __metaclass__ = ReqStrSugRepr

    def __str__(self):
        return 'Instance of class:', \
            self.__class__.__name__

print '*** Defined Bar class\n'

class FooBar(object):
    __metaclass__ = ReqStrSugRepr

print '*** Defined FooBar class\n'

########NEW FILE########
__FILENAME__ = moneyfmt
#!/usr/bin/env python

class MoneyFmt(object):
    def __init__(self, value=0.0):		# constructor
        self.value = float(value)

    def update(self, value=None):		# allow updates
        ###
        ### (a) complete this function
        ###

    def __repr__(self):				# display as a float
        return `self.value`

    def __str__(self):				# formatted display
        val = ''

        ###
        ### (b) complete this function... do NOT
        ###     forget about negative numbers too!!
        ###

        return val

    def __nonzero__(self):			# boolean test
        ###
        ### (c) find and fix the bug
        ###

	return int(self.value)

########NEW FILE########
__FILENAME__ = numstr
#!/usr/bin/env python

class NumStr(object):

    def __init__(self, num=0, string=''):
        self.__num = num
        self.__string = string

    def __str__(self):			# define for str()
        return '[%d :: %r]' % \
            (self.__num, self.__string)
    __repr__ = __str__

    def __add__(self, other):           # define for s+o
        if isinstance(other, NumStr):
            return self.__class__(self.__num + \
                other.__num,
                self.__string + other.__string)
        else:
            raise TypeError, \
'Illegal argument type for built-in operation'

    def __mul__(self, num):           # define for s*o
        if isinstance(num, int):
            return self.__class__(self.__num * num,
                self.__string * num)
        else:
            raise TypeError, \
'Illegal argument type for built-in operation'

    def __nonzero__(self):              # reveal tautology
        return self.__num or len(self.__string)

    def __norm_cval(self, cmpres):      # normalize cmp()
        return cmp(cmpres, 0)

    def __cmp__(self, other):           # define for cmp()
        return self.__norm_cval(
                cmp(self.__num, other.__num)) + \
            self.__norm_cval(
                cmp(self.__string, other.__string))

########NEW FILE########
__FILENAME__ = randSeq
#!/usr/bin/env python

from random import choice

class RandSeq(object):
    def __init__(self, seq):
        self.data = seq

    def __iter__(self):
        return self

    def next(self):
        return choice(self.data)

########NEW FILE########
__FILENAME__ = roundFloat2
#!/usr/bin/env python

class RoundFloatManual(object):
    def __init__(self, val):
        assert isinstance(val, float), \
            "Value must be a float!"
        self.value = round(val, 2)

    def __str__(self):
        return '%.2f' % self.value

    __repr__ = __str__

########NEW FILE########
__FILENAME__ = time60
#!/usr/bin/env python

class Time60(object):
    'Time60 - track hours and minutes'

    def __init__(self, hr, min):
        'Time60 constructor - takes hours and minutes'
        self.hr = hr
        self.min = min

    def __str__(self):
        'Time60 - string representation'
        return '%d:%d' % (self.hr, self.min)

    __repr__ = __str__

    def __add__(self, other):
        'Time60 - overloading the addition operator'
        return self.__class__(self.hr + other.hr,
            self.min + other.min)

    def __iadd__(self, other):
        'Time60 - overloading in-place addition'
        self.hr += other.hr
        self.min += other.min
        return self

########NEW FILE########
__FILENAME__ = twrapme
#!/usr/bin/env python

from time import time, ctime

class TimedWrapMe(object):

    def __init__(self, obj):
        self.__data = obj
        self.__ctime = self.__mtime = \
            self.__atime = time()

    def set(self, obj):
        self.__data = obj
        self.__mtime = self.__atime = time()

    def get(self):
        self.__atime = time()
        return self.__data

    def gettimeval(self, t_type):
        if type(t_type) != type('') or \
                t_type[0] not in 'cma':
            raise TypeError, \
                "argument of 'c', 'm', or 'a' req'd"
        return eval('self._%s__%stime' % \
            (self.__class__.__name__, t_type[0]))

    def gettimestr(self, t_type):
        return ctime(self.gettimeval(t_type))

    def __repr__(self):
        self.__atime = time()
        return `self.__data`

    def __str__(self):
        self.__atime = time()
        return str(self.__data)

    def __getattr__(self, attr): # delegation
        self.__atime = time()
        return getattr(self.__data, attr)

########NEW FILE########
__FILENAME__ = loopmake
#!/usr/bin/env python
# $Id: loopmaker.py,v 1.7 2000/04/22 01:44:26 wesc Exp $
#
# loopmaker.py -- CASE script: creates Python loops given parameters
#
# created on 00/04/21 by wesc
#

from keyword import iskeyword

# setup exec_str dictionary
exec_dict = {

# FOR loop
'f': '''
for %s in %s:
    print %s
''',

# WHILE loop (sequences)
's': '''
%s = 0
%s = %s
while %s < len(%s):
    print %s[%s]
    %s = %s + 1
''',

# WHILE loop (numbers)
'n': '''
%s = %d
while %s < %d:
    print %s
    %s = %s + %d
'''
}

dashes = '\n' + ('-' * 50)
def dashedprint(data, dashes=dashes):
    print data + dashes

def main():

    # prompt for loop type
    while 1:
        ltype = raw_input('Loop type? ([F]or/While) ')
        if not ltype: ltype = 'f'
        if ltype[0] in 'fw':
            break

    # prompt for data type
    while 1:
        dtype = raw_input('Data type? ([N]umber/Sequence [str,list,tuple]) ')
        if not dtype: dtype = 'n'
        if dtype[0] in 'ns':
            break

    # NUMBER type
    if dtype == 'n':
        while 1:
            start = raw_input('Starting value? [0] ')
            if not start:
                start = 0
            else:
                start = int(start)
            while 1:
                stop = input('Ending value (non-inclusive)? ')
                if type(stop) != type(0):
                    print '*** Ending value must be an integer\n'
                else:
                    break
            step = raw_input('Stepping value? [1] ')
            if not step:
                step = 1
            else:
                step = int(step)
            seq = str(range(start, stop, step))
            if seq == '[]':
                ans = raw_input('*** Invalid range; change your values? ([y]/n) ')
                if not ans or ans[0] == 'y':
                    continue
                print
            break

    # SEQUENCE type
    else:
        while 1:
            seq = raw_input('Enter sequence (string, list, or tuple): ')

            try:
                test = eval(seq)

            # invalid sequence... reprompt
            except SyntaxError:
                # keyword can be a string
                if iskeyword(seq):
                    test = seq = `seq`
                else:
                    print "*** Invalid Python sequence data '%s'\n" % seq
                    continue

            # user typed in string without the quotes... add the quotes using repr()
            except NameError:
                test = seq = `seq`

            # must be string, list, or tuple
            if type(test) != type('') and type(test) != type([]) and type(test) != type(()):
                print "*** Invalid Python sequence data '%s'\n" % seq
                continue

            break

    # iterator variable
    while 1:
        var = raw_input('Enter iterative variable name? ')
        if not var:
            print '*** Identifier name is required!\n'
        elif iskeyword(var) or var in dir(__builtins__):
            print "*** Identifier '%s' name is a keyword or built-in!\n" % var
        else:
            try:
                exec var + '=0'
            except SyntaxError:
                print "*** Invalid identifier '%s'!\n" % var
                continue
            break

    # FOR loop
    if ltype == 'f':
        exec_str = exec_dict['f'] % (var, seq, var)

    # WHILE loop
    elif ltype == 'w':

        # sequence length variable (only for sequences)
        if dtype == 's':
            while 1:
                svar = raw_input('Enter sequence name? ')
                if not svar:
                    print '*** Identifier name is required for while loops!\n'
                elif iskeyword(svar) or svar in dir(__builtins__):
                    print "*** Identifier '%s' name is a keyword or built-in!\n" % svar
                else:
                    break
        else:
            svar = None

        # must assign to sequence var if using sequences
        if dtype == 's':
            exec_str = exec_dict['s'] % (var, svar, seq, var, svar, svar, var, var, var)

        # use range() values for loop if using numbers
        elif dtype == 'n':
            exec_str = exec_dict['n'] % (var, start, var, stop, var, var, var, step)

    # EXECUTE code
    dashedprint('')
    dashedprint('The custom-generated code for you is:')
    dashedprint(exec_str)
    dashedprint('Test execution of the code:')
    exec exec_str
    dashedprint('')


# top-level executes main()
if __name__ == '__main__':
    print 'Welcome to Loop Maker v1.0\n'

    while 1:
        main()
        try:
            again = raw_input('Try again? ([Y]es/No) ')
        except:
            print
            break
        if again and again[0] != 'y':
            break

########NEW FILE########
__FILENAME__ = xcount
#!/usr/bin/env python

x = 0
print 'x is currently:', x
while x < 5:
    x += 1
    print 'incrementing x to:', x

########NEW FILE########
__FILENAME__ = args
#!/usr/bin/env python

import sys

def usage():
    print 'At least 2 arguments (incl. cmd name).'
    print 'usage: args.py arg1 arg2 [arg3... ]'
    sys.exit(1)

argc = len(sys.argv)
if argc < 3:
    usage()
print "number of args entered:", argc
print "args (incl. cmd name) were:", sys.argv

########NEW FILE########
__FILENAME__ = funcAttrs
#!/usr/bin/env python

def foo():
    return True

def bar():
    'bar() does not do much'
    return True

foo.__doc__ = 'foo() does not do much'
foo.tester = '''
if foo():
    print 'PASSED'
else:
    print 'FAILED'
'''

for eachAttr in dir():
    obj = eval(eachAttr)
    if isinstance(obj, type(foo)):
	if hasattr(obj, '__doc__'):
	    print '\nFunction "%s" has a doc string:\n\t%s' % (eachAttr, obj.__doc__)
	if hasattr(obj, 'tester'):
	    print 'Function "%s" has a tester... executing' % eachAttr
	    exec obj.tester 
	else:
	    print 'Function "%s" has no tester... skipping' % eachAttr
    else:
	print '"%s" is not a function' % eachAttr

########NEW FILE########
__FILENAME__ = loopmake
#!/usr/bin/env python

dashes = '\n' + '-' * 50
exec_dict = {

'f': """                        # for loop
for %s in %s:
    print %s
""",

's': """                        # sequence while loop
%s = 0
%s = %s
while %s < len(%s):
    print %s[%s]
    %s = %s + 1
""",

'n': """                        # counting while loop
%s = %d
while %s < %d:
    print %s
    %s = %s + %d
"""
}

def main():

    ltype = raw_input('Loop type? (For/While) ')
    dtype = raw_input('Data type? (Number/Sequence) ')

    if dtype == 'n':
        start = input('Starting value? ')
        stop = input('Ending value (non-inclusive)? ')
        step = input('Stepping value? ')
        seq = str(range(start, stop, step))

    else:
        seq = raw_input('Enter sequence: ')

    var = raw_input('Iterative variable name? ')

    if ltype == 'f':
        exec_str = exec_dict['f'] % (var, seq, var)

    elif ltype == 'w':
        if dtype == 's':
            svar = raw_input('Enter sequence name? ')
            exec_str = exec_dict['s'] % \
                (var, svar, seq, var, svar, svar, var, var, var)

        elif dtype == 'n':
            exec_str = exec_dict['n'] % \
                (var, start, var, stop, var, var, var, step)

    print dashes
    print 'The custom-generated code for you is:' + dashes
    print exec_str + dashes
    print 'Test execution of the code:' + dashes
    exec exec_str
    print dashes

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = gendata
#!/usr/bin/env python
# $Id$
#
# gendata.py -- generates test data
#
# created on 00/05/19 by wesc
#

from random import randint, choice
from time import ctime
from sys import maxint                        # (value, not function)
from string import lowercase
from os.path import exists

doms = ( 'com', 'edu', 'net', 'org', 'gov' )

def main():

    # this long version saves output to files which
    # can be directly used with regular expressions
    # (it does not write the strings to the screen)

    # open new test file
    i = 0
    fn = '/tmp/data%d.txt' % i
    while exists(fn):
        i = i + 1
        fn = '/tmp/data%d.txt' % i
    f = open(fn, 'w')

    # write test data and close file
    for i in range(randint(5, 10)):

        # randomly choose a date integer and
        # calculate the corresponding date string
        dtint = randint(0, maxint-1)
        dtstr = ctime(dtint)

        # the login should be between 4 and 7 chars in length;
        # the domain should be 
        loginlen = randint(4, 7)
        login = ''
        for j in range(loginlen):
            login = login + choice(lowercase)

        domainlen = randint(loginlen, 12)
        dom = ''
        for j in range(domainlen):
            dom = dom + choice(lowercase)
        f.write('%s:%s@%s.%s:%d-%d-%d\n' % (dtstr, login,
            dom, choice(doms), dtint, loginlen, domainlen))

    # close test file
    f.close()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = rewho
#!/usr/bin/env python

from os import popen                # import os.popen()
from re import split                # import re.split() [not string.split()]
from string import strip        # import string.strip()

f = popen('who', 'r')                # call the 'who' cmd and read from it

# read all output from 'who' and strip the leading & trailing whitespaces
for eachLine in map(strip, f.readlines()):
    print split('\s\s+|\t', eachLine)        # split on TAB or multiple SPACEs
f.close()                        # close input channel

########NEW FILE########
__FILENAME__ = gendata
#!/usr/bin/env python

from random import randint, choice
from string import lowercase        
from sys import maxint
from time import ctime

doms = ( 'com', 'edu', 'net', 'org', 'gov' )
    
for i in range(randint(5, 10)):
    dtint = randint(0, maxint-1) # pick date
    dtstr = ctime(dtint)        # date string

    shorter = randint(4, 7)        # login shorter
    em = ''
    for j in range(shorter):        # generate login
        em += choice(lowercase)

    longer = randint(shorter, 12) # domain longer
    dn = ''
    for j in range(longer):         # create domain
        dn += choice(lowercase)

    print '%s::%s@%s.%s::%d-%d-%d' % (dtstr, em,
        dn, choice(doms), dtint, shorter, longer)

########NEW FILE########
__FILENAME__ = rewho
#!/usr/bin/env python

from os import popen
from re import split

f = popen('who', 'r')
for eachLine in f:
    print split('\s\s+|\t', eachLine.strip())
f.close()

########NEW FILE########
__FILENAME__ = tsTclntNew
#!/usr/bin/env python

from socket import *

HOST = 'localhost'
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

tcpCliSock = socket(AF_INET, SOCK_STREAM)
tcpCliSock.connect(ADDR)

while True:
	data = raw_input('> ')
	if not data:
		break
	tcpCliSock.send(data)
	print "    ... waiting for reply ..."
	data = tcpCliSock.recv(BUFSIZ)
	if not data:
		break
	print data

tcpCliSock.close()

########NEW FILE########
__FILENAME__ = tsTclntSSBRH
#!/usr/bin/env python

from socket import *

HOST = 'localhost'
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

while True:
	tcpCliSock = socket(AF_INET, SOCK_STREAM)
	tcpCliSock.connect(ADDR)
	data = raw_input('> ')
	if not data:
		break
	tcpCliSock.send(data)
	data = tcpCliSock.recv(BUFSIZ)
	if not data:
		break
	print data
	tcpCliSock.close()

########NEW FILE########
__FILENAME__ = tsTserv
#!/usr/bin/env python

from socket import *
from time import ctime

HOST = ''
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

tcpSerSock = socket(AF_INET, SOCK_STREAM)
tcpSerSock.setsockopt(SOL_SOCKET, SO_REUSEADDR, True)
tcpSerSock.setsockopt(SOL_SOCKET, SO_REUSEPORT, True)
tcpSerSock.bind(ADDR)
tcpSerSock.listen(5)

while True:
    print 'waiting for connection...'
    tcpCliSock, addr = tcpSerSock.accept()
    print '...connected from:', addr

    while True:
        data = tcpCliSock.recv(BUFSIZ)
        if not data:
            break
        tcpCliSock.send('[%s] %s' % (
            ctime(), data))

    tcpCliSock.close()
tcpSerSock.close()

########NEW FILE########
__FILENAME__ = tsTservNew
#!/usr/bin/env python

from socket import *
from time import ctime

HOST = ''
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

tcpSerSock = socket(AF_INET, SOCK_STREAM)
tcpSerSock.setsockopt(SOL_SOCKET, SO_REUSEADDR, True)
tcpSerSock.setsockopt(SOL_SOCKET, SO_REUSEPORT, True)
tcpSerSock.bind(ADDR)
tcpSerSock.listen(5)

while True:
	print 'waiting for connection...'
	tcpCliSock, addr = tcpSerSock.accept()
	print '...connected from:', addr

	while True:
		data = tcpCliSock.recv(BUFSIZ)
		if not data:
			break
		print data
		data = raw_input('> ')
		if not data:
			break
		tcpCliSock.send(data)
		print "    ... waiting for reply ..."

	tcpCliSock.close()
tcpSerSock.close()

########NEW FILE########
__FILENAME__ = tsTservSS
#!/usr/bin/env python

from SocketServer import (TCPServer as TCP,
    StreamRequestHandler as SRH)
from time import ctime

HOST = ''
PORT = 21567
ADDR = (HOST, PORT)

class MyRequestHandler(SRH):
    def handle(self):
        print '...connected from:', self.client_address
        self.wfile.write('[%s] %s' % (ctime(),
	    self.rfile.readline()))

tcpServ = TCP(ADDR, MyRequestHandler)
tcpServ.allow_reuse_address = True
print 'waiting for connection...'
tcpServ.serve_forever()

########NEW FILE########
__FILENAME__ = tsTservSSBRH
#!/usr/bin/env python

from SocketServer import BaseRequestHandler as BRH, TCPServer as TCP
from time import ctime

HOST = ''
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

class MyRequestHandler(BRH):
	def handle(self):
		print '...connected from:', self.client_address
		self.request.send('[%s] %s' % (ctime(),
		    self.request.recv(BUFSIZ)))

tcpServ = TCP(ADDR, MyRequestHandler)
tcpServ.allow_reuse_address = True
print 'waiting for connection...'
tcpServ.serve_forever()

########NEW FILE########
__FILENAME__ = tsUserv
#!/usr/bin/env python

from socket import *
from time import ctime

HOST = ''
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

udpSerSock = socket(AF_INET, SOCK_DGRAM)
udpSerSock.setsockopt(SOL_SOCKET, SO_REUSEADDR, True)
udpSerSock.setsockopt(SOL_SOCKET, SO_REUSEPORT, True)
udpSerSock.bind(ADDR)

while True:
    print 'waiting for message...'
    data, addr = udpSerSock.recvfrom(BUFSIZ)
    udpSerSock.sendto('[%s] %s' % (
        ctime(), data), addr)
    print '...received from and returned to:', addr

udpSerSock.close()

########NEW FILE########
__FILENAME__ = tsTclnt
#!/usr/bin/env python

from socket import *

HOST = 'localhost'
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

tcpCliSock = socket(AF_INET, SOCK_STREAM)
tcpCliSock.connect(ADDR)

while True:
    data = raw_input('> ')
    if not data:
        break
    tcpCliSock.send(data)
    data = tcpCliSock.recv(BUFSIZ)
    if not data:
        break
    print data

tcpCliSock.close()

########NEW FILE########
__FILENAME__ = tsTclntSS
#!/usr/bin/env python

from socket import *

HOST = 'localhost'
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

while True:
    tcpCliSock = socket(AF_INET, SOCK_STREAM)
    tcpCliSock.connect(ADDR)
    data = raw_input('> ')
    if not data:
        break
    tcpCliSock.send('%s\r\n' % data)
    data = tcpCliSock.recv(BUFSIZ)
    if not data:
        break
    print data.strip()
    tcpCliSock.close()

########NEW FILE########
__FILENAME__ = tsTclntTW
#!/usr/bin/env python

from twisted.internet import protocol, reactor

HOST = 'localhost'
PORT = 21567

class TSClntProtocol(protocol.Protocol):
    def sendData(self):
        data = raw_input('> ')
        if data:
            print '...sending %s...' % data
            self.transport.write(data)
        else:
            self.transport.loseConnection()

    def connectionMade(self):
        self.sendData()

    def dataReceived(self, data):
        print data
        self.sendData()

class TSClntFactory(protocol.ClientFactory):
    protocol = TSClntProtocol
    clientConnectionLost = clientConnectionFailed = \
        lambda self, connector, reason: reactor.stop()

reactor.connectTCP(HOST, PORT, TSClntFactory())
reactor.run()

########NEW FILE########
__FILENAME__ = tsTserv
#!/usr/bin/env python

from socket import *
from time import ctime

HOST = ''
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

tcpSerSock = socket(AF_INET, SOCK_STREAM)
tcpSerSock.bind(ADDR)
tcpSerSock.listen(5)

while True:
    print 'waiting for connection...'
    tcpCliSock, addr = tcpSerSock.accept()
    print '...connected from:', addr

    while True:
        data = tcpCliSock.recv(BUFSIZ)
        if not data:
            break
        tcpCliSock.send('[%s] %s' % (
            ctime(), data))

    tcpCliSock.close()
tcpSerSock.close()

########NEW FILE########
__FILENAME__ = tsTservSS
#!/usr/bin/env python

from SocketServer import (TCPServer as TCP,
    StreamRequestHandler as SRH)
from time import ctime

HOST = ''
PORT = 21567
ADDR = (HOST, PORT)

class MyRequestHandler(SRH):
    def handle(self):
        print '...connected from:', self.client_address
        self.wfile.write('[%s] %s' % (ctime(),
	    self.rfile.readline()))

tcpServ = TCP(ADDR, MyRequestHandler)
print 'waiting for connection...'
tcpServ.serve_forever()

########NEW FILE########
__FILENAME__ = tsTservTW
#!/usr/bin/env python

from twisted.internet import protocol, reactor
from time import ctime

PORT = 21567

class TSServProtocol(protocol.Protocol):
    def connectionMade(self):
        clnt = self.clnt = self.transport.getPeer().host
        print '...connected from:', clnt
    def dataReceived(self, data):
        self.transport.write('[%s] %s' % (
	    ctime(), data))

factory = protocol.Factory()
factory.protocol = TSServProtocol
print 'waiting for connection...'
reactor.listenTCP(PORT, factory)
reactor.run()

########NEW FILE########
__FILENAME__ = tsUclnt
#!/usr/bin/env python

from socket import *

HOST = 'localhost'
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

udpCliSock = socket(AF_INET, SOCK_DGRAM)

while True:
    data = raw_input('> ')
    if not data:
        break
    udpCliSock.sendto(data, ADDR)
    data, ADDR = udpCliSock.recvfrom(BUFSIZ)
    if not data:
        break
    print data

udpCliSock.close()

########NEW FILE########
__FILENAME__ = tsUserv
#!/usr/bin/env python

from socket import *
from time import ctime

HOST = ''
PORT = 21567
BUFSIZ = 1024
ADDR = (HOST, PORT)

udpSerSock = socket(AF_INET, SOCK_DGRAM)
udpSerSock.bind(ADDR)

while True:
    print 'waiting for message...'
    data, addr = udpSerSock.recvfrom(BUFSIZ)
    udpSerSock.sendto('[%s] %s' % (
        ctime(), data), addr)
    print '...received from and returned to:', addr

udpSerSock.close()

########NEW FILE########
__FILENAME__ = getLatestFTP
#!/usr/bin/env python

import ftplib
import os
import socket

HOST = 'ftp.mozilla.org'
DIRN = 'pub/mozilla.org/webtools'
FILE = 'bugzilla-LATEST.tar.gz'

def main():
    try:
        f = ftplib.FTP(HOST)
    except (socket.error, socket.gaierror), e:
        print 'ERROR: cannot reach "%s"' % HOST
        return 
    print '*** Connected to host "%s"' % HOST

    try:
        f.login()
    except ftplib.error_perm:
        print 'ERROR: cannot login anonymously'
        f.quit()
        return 
    print '*** Logged in as "anonymous"'

    try:
        f.cwd(DIRN)
    except ftplib.error_perm:
        print 'ERROR: cannot CD to "%s" folder' % DIRN
        f.quit()
        return 
    print '*** Changed to "%s" folder' % DIRN

    try:
        f.retrbinary('RETR %s' % FILE,
            open(FILE, 'wb').write)
    except ftplib.error_perm:
        print 'ERROR: cannot read file "%s"' % FILE
        if os.path.exists(FILE): os.unlink(FILE)
    else:
        print '*** Downloaded "%s" to CWD' % FILE
    f.quit()
    return 

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = getLatestNNTP
#!/usr/bin/env python

import nntplib
import socket

HOST = 'your.nntp.sersper'
GRNM = 'comp.lang.python'
USER = 'wesley'
PASS = "you'llNeverGuess"

def main():

    try:
        n = nntplib.NNTP(HOST)
        #user=USER, password=PASS)
    except socket.gaierror, e:
        print 'ERROR: cannot reach host "%s"' % HOST
        print '    ("%s")' % eval(str(e))[1]
        return 
    except nntplib.NNTPPermanentError, e:
        print 'ERROR: access denied on "%s"' % HOST
        print '    ("%s")' % str(e)
        return 
    print '*** Connected to host "%s"' % HOST

    try:
        rsp, ct, fst, lst, grp = n.group(GRNM)
    except nntplib.NNTPTemporaryError, e:
        print 'ERROR: cannot connect to group "%s"' % GRNM
        print '    ("%s")' % str(e)
        print '    Server may require authentication'
        print '    Uncomment/edit login line above'
        n.quit()
        return 
    except nntplib.NNTPTemporaryError, e:
        print 'ERROR: group "%s" unavailable' % GRNM
        print '    ("%s")' % str(e)
        n.quit()
        return 
    print '*** Found newsgroup "%s"' % GRNM

    rng = '%s-%s' % (lst, lst)
    rsp, frm = n.xhdr('from', rng)
    rsp, sub = n.xhdr('subject', rng)
    rsp, dat = n.xhdr('date', rng)
    print '''*** Found last article (#%s):

    From: %s
    Subject: %s
    Date: %s
'''% (lst, frm[0][1], sub[0][1], dat[0][1])

    rsp, anum, mid, data = n.body(lst)
        displayFirst20(data)
    n.quit()

def displayFirst20(data):
    print '*** First (<= 20) meaningful lines:\n'
    count = 0
    lines = (line.rstrip() for line in data)
    lastBlank = True
    for line in lines:
        if line:
            lower = line.lower()
            if (lower.startswith('>') and not \
                                lower.startswith('>>>')) or \
                lower.startswith('|') or \
                lower.startswith('in article') or \
                lower.endswith('writes:') or \
                lower.endswith('wrote:'):
                continue
        if not lastBlank or (lastBlank and line):
            print '    %s' % line
            if line:
                count += 1
                lastBlank = False
            else:
                lastBlank = True
        if count == 20:
            break

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = myMail
#!/usr/bin/env python

from smtplib import SMTP
from poplib import POP3
from time import sleep

SMTPSVR = 'smtp.python.is.cool'
POP3SVR = 'pop.python.is.cool'

origHdrs = ['From: wesley@python.is.cool',
    'To: wesley@python.is.cool',
    'Subject: test msg']
origBody = ['xxx', 'yyy', 'zzz']
origMsg = '\r\n\r\n'.join(['\r\n'.join(origHdrs), '\r\n'.join(origBody)])

sendSvr = SMTP(SMTPSVR)
errs = sendSvr.sendmail('wesley@python.is.cool',
    ('wesley@python.is.cool', ), origMsg)
sendSvr.quit()
assert len(errs) == 0, errs
sleep(10)    # wait for mail to be delivered

recvSvr = POP3(POP3SVR)
recvSvr.user('wesley')
recvSvr.pass_('youllNeverGuess')
rsp, msg, siz = recvSvr.retr(recvSvr.stat()[0])
# strip headers and compare to orig msg
sep = msg.index('')
recvBody = msg[sep+1:]
assert origBody == recvBody # assert identical

########NEW FILE########
__FILENAME__ = mtfacfib
#!/usr/bin/env python

from myThread import MyThread
from time import ctime, sleep

def fib(x):
    sleep(0.005)
    if x < 2: return 1
    return (fib(x-2) + fib(x-1))

def fac(x):
    sleep(0.1)
    if x < 2: return 1
    return (x * fac(x-1))

def sum(x):
    sleep(0.1)
    if x < 2: return 1
    return (x + sum(x-1))

funcs = (fib, fac, sum)
n = 12

def main():
    nfuncs = range(len(funcs))

    print '*** SINGLE THREAD'
    for i in nfuncs:
        print 'starting', funcs[i].__name__, \
	    'at:', ctime()
        print funcs[i](n)
        print funcs[i].__name__, 'finished at:', \
	    ctime()

    print '\n*** MULTIPLE THREADS'
    threads = []
    for i in nfuncs:
        t = MyThread(funcs[i], (n,),
	    funcs[i].__name__)
        threads.append(t)

    for i in nfuncs:
        threads[i].start()

    for i in nfuncs:
        threads[i].join()
        print threads[i].getResult()

    print 'all DONE at:', ctime()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = mtfacfib
#!/usr/bin/env python

from myThread import MyThread
from time import ctime, sleep

def fib(x):
    sleep(0.005)
    if x < 2: return 1
    return (fib(x-2) + fib(x-1))

def fac(x):
    sleep(0.1)
    if x < 2: return 1
    return (x * fac(x-1))

def sum(x):
    sleep(0.1)
    if x < 2: return 1
    return (x + sum(x-1))

funcs = (fib, fac, sum)
n = 12

def main():
    nfuncs = range(len(funcs))

    print '*** SINGLE THREAD'
    for i in nfuncs:
        print 'starting', funcs[i].__name__, \
	    'at:', ctime()
        print funcs[i](n)
        print funcs[i].__name__, 'finished at:', \
	    ctime()

    print '\n*** MULTIPLE THREADS'
    threads = []
    for i in nfuncs:
        t = MyThread(funcs[i], (n,),
	    funcs[i].__name__)
        threads.append(t)

    for i in nfuncs:
        threads[i].start()

    for i in nfuncs:
        threads[i].join()
        print threads[i].getResult()

    print 'all DONE'

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = mtsleep1
#!/usr/bin/env python

import thread
from time import sleep, ctime

def loop0():
    print 'start loop 0 at:', ctime()
    sleep(4)
    print 'loop 0 done at:', ctime()

def loop1():
    print 'start loop 1 at:', ctime()
    sleep(2)
    print 'loop 1 done at:', ctime()

def main():
    print 'starting at:', ctime()
    thread.start_new_thread(loop0, ())
    thread.start_new_thread(loop1, ())
    sleep(6)
    print 'all DONE at:', ctime()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = mtsleep2
#!/usr/bin/env python

import thread
from time import sleep, ctime

loops = [4, 2]

def loop(nloop, nsec, lock):
    print 'start loop', nloop, 'at:', ctime()
    sleep(nsec)
    print 'loop', nloop, 'done at:', ctime()
    lock.release()

def main():
    print 'starting threads...'
    locks = []
    nloops = range(len(loops))

    for i in nloops:
        lock = thread.allocate_lock()
        lock.acquire()
        locks.append(lock)

    for i in nloops:
        thread.start_new_thread(loop, 
            (i, loops[i], locks[i]))

    for i in nloops:
        while locks[i].locked(): pass

    print 'all DONE at:', ctime()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = mtsleep3
#!/usr/bin/env python

import threading
from time import sleep, ctime

loops = [ 4, 2 ]

def loop(nloop, nsec):
    print 'start loop', nloop, 'at:', ctime()
    sleep(nsec)
    print 'loop', nloop, 'done at:', ctime()

def main():
    print 'starting at:', ctime()
    threads = []
    nloops = range(len(loops))

    for i in nloops:
        t = threading.Thread(target=loop,
	    args=(i, loops[i]))
        threads.append(t)

    for i in nloops:            # start threads
        threads[i].start()

    for i in nloops:            # wait for all
        threads[i].join()       # threads to finish

    print 'all DONE at:', ctime()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = mtsleep4
#!/usr/bin/env python

import threading
from time import sleep, ctime

loops = [ 4, 2 ]

class ThreadFunc(object):

    def __init__(self, func, args, name=''):
        self.name = name
        self.func = func
        self.args = args

    def __call__(self):
        apply(self.func, self.args)

def loop(nloop, nsec):
    print 'start loop', nloop, 'at:', ctime()
    sleep(nsec)
    print 'loop', nloop, 'done at:', ctime()

def main():
    print 'starting at:', ctime()
    threads = []
    nloops = range(len(loops))

    for i in nloops:	# create all threads
        t = threading.Thread(
	    target=ThreadFunc(loop, (i, loops[i]),
	    loop.__name__))
        threads.append(t)

    for i in nloops:	# start all threads
        threads[i].start()

    for i in nloops:	# wait for completion
        threads[i].join()

    print 'all DONE at:', ctime()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = mtsleep5
#!/usr/bin/env python

import threading
from time import sleep, ctime

loops = [ 4, 2 ]

class MyThread(threading.Thread):
    def __init__(self, func, args, name=''):
        threading.Thread.__init__(self)
        self.name = name
        self.func = func
        self.args = args

    def run(self):
        apply(self.func, self.args)

def loop(nloop, nsec):
    print 'start loop', nloop, 'at:', ctime()
    sleep(nsec)
    print 'loop', nloop, 'done at:', ctime()

def main():
    print 'starting at:', ctime()
    threads = []
    nloops = range(len(loops))

    for i in nloops:
        t = MyThread(loop, (i, loops[i]),
	    loop.__name__)
        threads.append(t)

    for i in nloops:
        threads[i].start()

    for i in nloops:
        threads[i].join()

    print 'all DONE at:', ctime()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = myThread
#!/usr/bin/env python

import threading
from time import time, ctime

class MyThread(threading.Thread):
    def __init__(self, func, args, name=''):
        threading.Thread.__init__(self)
        self.name = name
        self.func = func
        self.args = args

    def getResult(self):
        return self.res

    def run(self):
        print 'starting', self.name, 'at:', \
	    ctime()
        self.res = apply(self.func, self.args)
        print self.name, 'finished at:', \
	    ctime()

########NEW FILE########
__FILENAME__ = onethr
#!/usr/bin/env python

from time import sleep, ctime

def loop0():
    print 'start loop 0 at:', ctime()
    sleep(4)
    print 'loop 0 done at:', ctime()

def loop1():
    print 'start loop 1 at:', ctime()
    sleep(2)
    print 'loop 1 done at:', ctime()

def main():
    print 'starting at:', ctime()
    loop0()
    loop1()
    print 'all DONE at:', ctime()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = prodcons
#!/usr/bin/env python

from random import randint
from time import sleep
from Queue import Queue
from myThread import MyThread

def writeQ(queue):
    print 'producing object for Q...',
    queue.put('xxx', 1)
    print "size now", queue.qsize()

def readQ(queue):
    val = queue.get(1)
    print 'consumed object from Q... size now', \
        queue.qsize()

def writer(queue, loops):
    for i in range(loops):
        writeQ(queue)
        sleep(randint(1, 3))

def reader(queue, loops):
    for i in range(loops):
        readQ(queue)
        sleep(randint(2, 5))

funcs = [writer, reader]
nfuncs = range(len(funcs))

def main():
    nloops = randint(2, 5)
    q = Queue(32)

    threads = []
    for i in nfuncs:
        t = MyThread(funcs[i], (q, nloops), \
            funcs[i].__name__)
        threads.append(t)

    for i in nfuncs:
        threads[i].start()

    for i in nfuncs:
        threads[i].join()

    print 'all DONE'

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = listdir
#!/usr/bin/env python
# $Id: listdir.py,v 1.8 2000/05/26 10:19:30 wesc Exp $
#
# listdir.py -- traverse directory tree
#
# created by wesc 00/02/20
#

import Tkinter, os, time, string
__version__ = string.split('$Revision: 1.8 $')[1]

class DirList:

    # do everything!
    def __init__(self, initdir=None):
	self.top = Tkinter.Tk()
	self.label = Tkinter.Label(self.top, text='Directory Lister' + ' v' + __version__)
	self.label.pack()
	self.cwd=Tkinter.StringVar(self.top)
	self.dirl = Tkinter.Label(self.top, fg='blue', font=('Helvetica', 12, 'bold'))
	self.dirl.pack()

	self.dirfm = Tkinter.Frame(self.top)
	self.dirsb = Tkinter.Scrollbar(self.dirfm)
	self.dirsb.pack(side=Tkinter.RIGHT, fill=Tkinter.Y)

	self.dirs = Tkinter.Listbox(self.dirfm, height=15, width=50, yscrollcommand=self.dirsb.set)
	self.dirs.bind('<Double-1>', self.setdirandgo)
	self.dirsb.config(command=self.dirs.yview)
	self.dirs.pack(side=Tkinter.LEFT, fill=Tkinter.BOTH)
	self.dirfm.pack()

	self.dirn = Tkinter.Entry(self.top, width=50, textvariable=self.cwd)
	self.dirn.bind('<Return>', self.dols)
	self.dirn.pack()

	self.bfm = Tkinter.Frame(self.top)
	self.clr = Tkinter.Button(self.bfm, text='Clear', command=self.clrdir, activeforeground='white', activebackground='blue')
	self.ls = Tkinter.Button(self.bfm, text='List Directory', command=self.dols, activeforeground='white', activebackground='green')
	self.quit = Tkinter.Button(self.bfm, text='Quit', command=self.top.quit, activeforeground='white', activebackground='red')
	self.clr.pack(side=Tkinter.LEFT)
	self.ls.pack(side=Tkinter.LEFT)
	self.quit.pack(side=Tkinter.LEFT)
	self.bfm.pack()

	if initdir:
	    # put selection in entry and do it
	    self.cwd.set(os.curdir)
	    self.dols()


    # clear entry
    def clrdir(self, ev=None):
	self.cwd.set('')

    # set dir entry
    def setdirandgo(self, ev=None):

	# save last search
	self.last = self.cwd.get()

	# set red bg while searching
	self.dirs.config(selectbackground='red')

	# grab listbox selection, default to ('.') os.curdir if not there
	check = self.dirs.get(self.dirs.curselection())
	if not check:
	    check = os.curdir

	# grab selection and strip any extra chars (a la 'ls -F')
	if check[-1] in '@/*': check = check[:-1]

	# set entry and run
	self.cwd.set(check)
	self.dols()


    def dols(self, ev=None):

	error = ''
	# check if a exist and if directory
	tdir = self.cwd.get()
	vi = 0
	if not tdir:
	    tdir = os.curdir
	if not os.path.exists(tdir):
	    error = tdir + ': no such file'
	elif not os.path.isdir(tdir):
	    if os.name == 'posix':
		vi = 1
		error = tdir + ': starting "vi" in xterm...'
	    else:
		error = tdir + ': not a directory'
	if error:
	    self.cwd.set(error)
	    self.top.update()
	    time.sleep(2)
	    if not (hasattr(self, 'last') and self.last):
		self.last = os.curdir
	    self.cwd.set(self.last)
	    self.dirs.config(selectbackground='LightSkyBlue')
	    self.top.update()
	    if vi:
		os.system("xterm -rv -e vi " + tdir)
	    return

	# get listing
	self.cwd.set('FETCHING DIRECTORY CONTENTS...')
	self.top.update()
	dirlist = os.listdir(tdir)

	# go there to for relativity
	os.chdir(tdir)
	self.dirl.config(text=os.getcwd())

	# replace old file listing
	self.dirs.delete(0, Tkinter.END)
	self.dirs.insert(Tkinter.END, os.curdir)
	self.dirs.insert(Tkinter.END, os.pardir)
	for eachFile in dirlist:
	    self.dirs.insert(Tkinter.END, eachFile)
	self.cwd.set(tdir)
	self.dirs.config(selectbackground='LightSkyBlue')

d = DirList(os.curdir)
Tkinter.mainloop()

########NEW FILE########
__FILENAME__ = tkhello0
#!/usr/bin/env python
# $Id: tkhello0.py,v 1.1 2000/02/21 09:04:25 wesc Exp $
#
# tkhello0.py -- "Hello World!" 0 in Tkinter:
#	- "Hello World!" label (need to close window to quit)
#	- just like tkhello1.py except for no toplevel
#
# created by wesc 00/02/20
#

import Tkinter
label = Tkinter.Label(text='Hello World!')
label.pack()
label.mainloop()

########NEW FILE########
__FILENAME__ = tkhello1
#!/usr/bin/env python
# $Id: tkhello1.py,v 1.1 2000/02/21 09:04:25 wesc Exp $
#
# tkhello1.py -- "Hello World!" 1 in Tkinter:
#        - "Hello World!" label (need to close window to quit)
#
# created by wesc 00/02/20
#

# import Tkinter module
import Tkinter

# create toplevel window
top = Tkinter.Tk()

# create label
label = Tkinter.Label(top, text='Hello World!')

# pack label
label.pack()

# enter main loop
Tkinter.mainloop()

"""
same as:

import Tkinter
Tkinter.Label(Tkinter.Tk(), text='Hello World!').pack()
Tkinter.mainloop()
"""

########NEW FILE########
__FILENAME__ = tkhello2
#!/usr/bin/env python
# $Id: tkhello2.py,v 1.1 2000/02/21 09:04:25 wesc Exp $
#
# tkhello2.py -- "Hello World!" 2 in Tkinter:
#        - "Hello World!" with just a button (which quits the app)
#
# created by wesc 00/02/20
#

# import Tkinter module
import Tkinter

# create toplevel window
top = Tkinter.Tk()

# create button
quit = Tkinter.Button(top, text='Hello World!', command=top.quit)

# pack button
quit.pack()

# enter main loop
Tkinter.mainloop()

########NEW FILE########
__FILENAME__ = tkhello4
#!/usr/bin/env python
# $Id: tkhello4.py,v 1.2 2000/02/21 10:56:50 wesc Exp $
#
# tkhello4.py -- "Hello World!" 4 in Tkinter:
#        - label, button, and scale widgets
#
# created by wesc 00/02/21
#

# import all Tkinter module attributes
from Tkinter import *

# callback function to resize label when Scale is slid
def resize(ev=None):
    label.config(font='Helvetica -%d bold' % scale.get())

# create toplevel window with a 250x150 pixel geometry
top = Tk()
top.geometry('250x150')

# create and pack label
label = Label(top, text='Hello World!', font='Helvetica -12 bold')
label.pack(fill=Y, expand=1)

# create and pack Scale/slider
scale = Scale(top, from_=10, to=40, orient=HORIZONTAL, command=resize)
scale.set(12)
scale.pack(fill=X, expand=1)

# create and pack button
quit = Button(top, text='QUIT', command=top.quit, activeforeground='white', activebackground='red')
quit.pack()

# enter main loop
mainloop()

########NEW FILE########
__FILENAME__ = listdir
#!/usr/bin/env python

import os
from time import sleep
from Tkinter import *

class DirList:

    def __init__(self, initdir=None):
        self.top = Tk()
        self.label = Label(self.top, \
            text='Directory Lister' + ' v1.1')
        self.label.pack()

        self.cwd=StringVar(self.top)

        self.dirl = Label(self.top, fg='blue', 
            font=('Helvetica', 12, 'bold'))
        self.dirl.pack()

        self.dirfm = Frame(self.top)
        self.dirsb = Scrollbar(self.dirfm)
        self.dirsb.pack(side=RIGHT, fill=Y)
        self.dirs = Listbox(self.dirfm, height=15, \
            width=50, yscrollcommand=self.dirsb.set)
        self.dirs.bind('<Double-1>', self.setdirandgo)
        self.dirsb.config(command=self.dirs.yview)
        self.dirs.pack(side=LEFT, fill=BOTH)
        self.dirfm.pack()

        self.dirn = Entry(self.top, width=50, \
            textvariable=self.cwd)
        self.dirn.bind('<Return>', self.dols)
        self.dirn.pack()

        self.bfm = Frame(self.top)
        self.clr = Button(self.bfm, text='Clear', \
            command=self.clrdir, \
            activeforeground='white', \
            activebackground='blue')
        self.ls = Button(self.bfm, \
            text='List Directory', \
            command=self.dols, \
            activeforeground='white', \
            activebackground='green')
        self.quit = Button(self.bfm, text='Quit', \
            command=self.top.quit, \
            activeforeground='white', \
            activebackground='red')
        self.clr.pack(side=LEFT)
        self.ls.pack(side=LEFT)
        self.quit.pack(side=LEFT)
        self.bfm.pack()

        if initdir:
            self.cwd.set(os.curdir)
            self.dols()

    def clrdir(self, ev=None):
        self.cwd.set('')

    def setdirandgo(self, ev=None):
        self.last = self.cwd.get()
        self.dirs.config(selectbackground='red')
        check = self.dirs.get(self.dirs.curselection())
        if not check:
            check = os.curdir
        self.cwd.set(check)
        self.dols()

    def dols(self, ev=None):
        error = ''
        tdir = self.cwd.get()
        if not tdir: tdir = os.curdir

        if not os.path.exists(tdir):
            error = tdir + ': no such file'
        elif not os.path.isdir(tdir):
            error = tdir + ': not a directory'

        if error:
            self.cwd.set(error)
            self.top.update()
            sleep(2)
            if not (hasattr(self, 'last') \
		and self.last):
		    self.last = os.curdir
            self.cwd.set(self.last)
            self.dirs.config( \
		selectbackground='LightSkyBlue')
            self.top.update()
            return

        self.cwd.set( \
	    'FETCHING DIRECTORY CONTENTS...')
        self.top.update()
        dirlist = os.listdir(tdir)
        dirlist.sort()
        os.chdir(tdir)
        self.dirl.config(text=os.getcwd())
        self.dirs.delete(0, END)
        self.dirs.insert(END, os.curdir)
        self.dirs.insert(END, os.pardir)
        for eachFile in dirlist:
            self.dirs.insert(END, eachFile)
        self.cwd.set(os.curdir)
        self.dirs.config( \
	    selectbackground='LightSkyBlue')

def main():
    d = DirList(os.curdir)
    mainloop()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = pfaGUI2
#!/usr/bin/env python2.5

from functools import partial as pto
from Tkinter import Tk, Button, X
from tkMessageBox import showinfo, showwarning, showerror

WARN = 'warn'
CRIT = 'crit'
REGU = 'regu'

SIGNS = {
    'do not enter': CRIT,
    'railroad crossing': WARN,
    '55\nspeed limit': REGU,
    'wrong way': CRIT,
    'merging traffic': WARN,
    'one way': REGU,
}

critCB = lambda : showerror('Error', 'Error Button Pressed!')
warnCB = lambda : showwarning('Warning',
    'Warning Button Pressed!')
infoCB = lambda : showinfo('Info', 'Info Button Pressed!')

top = Tk()   
top.title('Road Signs')
Button(top, text='QUIT', command=top.quit,
    bg='red', fg='white').pack()

MyButton = pto(Button, top)
CritButton = pto(MyButton, command=critCB, bg='white', fg='red')
WarnButton = pto(MyButton, command=warnCB, bg='goldenrod1')
ReguButton = pto(MyButton, command=infoCB, bg='white')

for eachSign in SIGNS:
    signType = SIGNS[eachSign]
    cmd = '%sButton(text=%r%s).pack(fill=X, expand=True)' % (
        signType.title(), eachSign,
        '.upper()' if signType == CRIT else '.title()')
    eval(cmd)

top.mainloop()

########NEW FILE########
__FILENAME__ = tkhello1
#!/usr/bin/env python

import Tkinter

top = Tkinter.Tk()
label = Tkinter.Label(top, text='Hello World!')
label.pack()
Tkinter.mainloop()

########NEW FILE########
__FILENAME__ = tkhello2
#!/usr/bin/env python

import Tkinter

top = Tkinter.Tk()
quit = Tkinter.Button(top, text='Hello World!',
    command=top.quit)
quit.pack()
Tkinter.mainloop()

########NEW FILE########
__FILENAME__ = tkhello3
#!/usr/bin/env python

import Tkinter
top = Tkinter.Tk()

hello = Tkinter.Label(top, text='Hello World!')
hello.pack()

quit = Tkinter.Button(top, text='QUIT',
    command=top.quit, bg='red', fg='white')
quit.pack(fill=Tkinter.X, expand=1)

Tkinter.mainloop()

########NEW FILE########
__FILENAME__ = tkhello4
#!/usr/bin/env python

from Tkinter import *

def resize(ev=None):
    label.config(font='Helvetica -%d bold' % \
        scale.get())

top = Tk()
top.geometry('250x150')

label = Label(top, text='Hello World!',
    font='Helvetica -12 bold')
label.pack(fill=Y, expand=1)

scale = Scale(top, from_=10, to=40,
    orient=HORIZONTAL, command=resize)
scale.set(12)
scale.pack(fill=X, expand=1)

quit = Button(top, text='QUIT',
    command=top.quit, activeforeground='white',
    activebackground='red')
quit.pack()

mainloop()

########NEW FILE########
__FILENAME__ = advcgi
#!/usr/bin/env python

from cgi import FieldStorage
from os import environ
from cStringIO import StringIO
from urllib import quote, unquote
from string import capwords, strip, split, join

class AdvCGI:

    header = 'Content-Type: text/html\n\n'
    url = '/py/advcgi.py'

    formhtml = '''<HTML><HEAD><TITLE>
Advanced CGI Demo</TITLE></HEAD>
<BODY><H2>Advanced CGI Demo Form</H2>
<FORM METHOD=post ACTION="%s" ENCTYPE="multipart/form-data">
<H3>My Cookie Setting</H3>
<LI> <CODE><B>CPPuser = %s</B></CODE>
<H3>Enter cookie value<BR>
<INPUT NAME=cookie value="%s"> (<I>optional</I>)</H3>
<H3>Enter your name<BR>
<INPUT NAME=person VALUE="%s"> (<I>required</I>)</H3>
<H3>What languages can you program in?
(<I>at least one required</I>)</H3>
%s
<H3>Enter file to upload</H3>
<INPUT TYPE=file NAME=upfile VALUE="%s" SIZE=45>
<P><INPUT TYPE=submit>
</FORM></BODY></HTML>'''

    langSet = ('Python', 'PERL', 'Java', 'C++', 'PHP',
                    'C', 'JavaScript')
    langItem = \
        '<INPUT TYPE=checkbox NAME=lang VALUE="%s"%s> %s\n'

    def getCPPCookies(self):                # reads cookies from client
        if environ.has_key('HTTP_COOKIE'):
            for eachCookie in map(strip, \
                    split(environ['HTTP_COOKIE'], ';')):
                if len(eachCookie) > 6 and \
                        eachCookie[:3] == 'CPP':
                    tag = eachCookie[3:7]
                    try:
                        self.cookies[tag] = \
                            eval(unquote(eachCookie[8:]))
                    except (NameError, SyntaxError):
                        self.cookies[tag] = \
                            unquote(eachCookie[8:])
        else:
            self.cookies['info'] = self.cookies['user'] = ''

        if self.cookies['info'] != '':
            self.who, langStr, self.fn = \
                split(self.cookies['info'], ':')
            self.langs = split(langStr, ',')
        else:
            self.who = self.fn = ''
            self.langs = ['Python']

    def showForm(self):                        # show fill-out form
        self.getCPPCookies()
        langStr = ''
        for eachLang in AdvCGI.langSet:
            if eachLang in self.langs:
                langStr = langStr + AdvCGI.langItem % \
                    (eachLang, ' CHECKED', eachLang)
            else:
                langStr = langStr + AdvCGI.langItem % \
                    (eachLang, '', eachLang)

        if not self.cookies.has_key('user') or \
                self.cookies['user'] == '':
            cookieStatus = '<I>(cookie has not been set yet)</I>'
            userCook = ''
        else:
            userCook = cookieStatus = self.cookies['user']

        print AdvCGI.header + AdvCGI.formhtml % (AdvCGI.url,
            cookieStatus, userCook, self.who, langStr, self.fn)

    errhtml = '''<HTML><HEAD><TITLE>
Advanced CGI Demo</TITLE></HEAD>
<BODY><H3>ERROR</H3>
<B>%s</B><P>
<FORM><INPUT TYPE=button VALUE=Back
ONCLICK="window.history.back()"></FORM>
</BODY></HTML>'''

    def showError(self):
        print AdvCGI.header + AdvCGI.errhtml % (self.error)

    reshtml = '''<HTML><HEAD><TITLE>
Advanced CGI Demo</TITLE></HEAD>
<BODY><H2>Your Uploaded Data</H2>
<H3>Your cookie value is: <B>%s</B></H3>
<H3>Your name is: <B>%s</B></H3>
<H3>You can program in the following languages:</H3>
<UL>%s</UL>
<H3>Your uploaded file...<BR>
Name: <I>%s</I><BR>
Contents:</H3>
<PRE>%s</PRE>
Click <A HREF="%s"><B>here</B></A> to return to form.
</BODY></HTML>'''

    def setCPPCookies(self):
        for eachCookie in self.cookies.keys():
            print 'Set-Cookie: CPP%s=%s; path=/' % \
                (eachCookie, quote(self.cookies[eachCookie]))

    def doResults(self):
        MAXBYTES = 1024
        langlist = ''
        for eachLang in self.langs:
            langlist = langlist + '<LI>%s<BR>' % eachLang

        filedata = ''
        while len(filedata) < MAXBYTES:        # read file chunks
            data = self.fp.readline()
            if data == '': break
            filedata = filedata + data
        else:                                # truncate if too long
            filedata = filedata + \
                '... <B><I>(file truncated due to size)</I></B>'
        self.fp.close()
        if filedata == '':
            filedata = \
                '<B><I>(file upload error or file not given)</I></B>'
        filename = self.fn

        if not self.cookies.has_key('user') or \
                self.cookies['user'] == '':
            cookieStatus = '<I>(cookie has not been set yet)</I>'
            userCook = ''
        else:
            userCook = cookieStatus = self.cookies['user']

        self.cookies['info'] = join([self.who, \
            join(self.langs, ','), filename], ':')
        self.setCPPCookies()
        print AdvCGI.header + AdvCGI.reshtml % \
            (cookieStatus, self.who, langlist,
            filename, filedata, AdvCGI.url)

    def go(self):                # determine which page to return
        self.cookies = {}
        self.error = ''
        form = FieldStorage()
        if form.keys() == []:
            self.showForm()
            return

        if form.has_key('person'):
            self.who = capwords(strip(form['person'].value))
            if self.who == '':
                self.error = 'Your name is required. (blank)'
        else:
            self.error = 'Your name is required. (missing)'

        if form.has_key('cookie'):
            self.cookies['user'] = unquote(strip( \
                form['cookie'].value))
        else:
            self.cookies['user'] = ''

        self.langs = []
        if form.has_key('lang'):
            langdata = form['lang']
            if type(langdata) == type([]):
                for eachLang in langdata:
                    self.langs.append(eachLang.value)
            else:
                self.langs.append(langdata.value)
        else:
            self.error = 'At least one language required.'

        if form.has_key('upfile'):
            upfile = form["upfile"]
            self.fn = upfile.filename or ''
            if upfile.file:
                self.fp = upfile.file
            else:
                self.fp = StringIO('(no data)')
        else:
            self.fp = StringIO('(no file)')
            self.fn = ''

        if not self.error:
            self.doResults()
        else:
            self.showError()

if __name__ == '__main__':
    page = AdvCGI()
    page.go()

########NEW FILE########
__FILENAME__ = advcgi
#!/usr/bin/env python
'''
$Id: advcgi.py,v 1.1 2000/12/31 01:32:45 wesc Exp $

advcgi.py -- tests CGI file uploads and multi-valued CGI variables

Advanced CGI demo

created by wesc on 00/07/25
'''

from cgi import FieldStorage
from os import environ
from StringIO import StringIO
from urllib import quote, unquote
from string import capwords, strip, split, join
#from sys import stderr
#s = stderr.write

class AdvCGI:

        header = 'Content-Type: text/html\n\n'
        url = '/py/advcgi.py'

        formhtml = '''<HTML><HEAD><TITLE>
Advanced CGI Demo</TITLE></HEAD>
<BODY><H2>Advanced CGI Demo Form</H2>
<FORM METHOD=post ACTION="%s" ENCTYPE="multipart/form-data">
<H3>My Cookie Setting</H3>
<LI> <CODE><B>CPPuser = %s</B></CODE>
<H3>Enter cookie value<BR>
<INPUT NAME=cookie value="%s"> (<I>optional</I>)</H3>
<H3>Enter your name<BR>
<INPUT NAME=person VALUE="%s"> (<I>required</I>)</H3>
<H3>What languages can you program in?
(<I>at least one required</I>)</H3>
%s
<H3>Enter file to upload</H3>
<INPUT TYPE=file NAME=upfile VALUE="%s" SIZE=45>
<P><INPUT TYPE=submit>
</FORM></BODY></HTML>'''

        langSet = ('Python', 'PERL', 'Java', 'C++', 'PHP', 'C', 'JavaScript')
        langItem = '<INPUT TYPE=checkbox NAME=lang VALUE="%s"%s> %s\n'


        # reads cookies from client, creates cookies, who, langs
        def getCPPCookies(self):
                if environ.has_key('HTTP_COOKIE'):
                        #s('reading cookies from server...\n')
                        for eachCookie in map(strip, split(environ['HTTP_COOKIE'], ';')):
                                if len(eachCookie) > 6 and eachCookie[:3] == 'CPP':
                                        tag = eachCookie[3:7]
                                        try:
                                                self.cookies[tag] = eval(unquote(eachCookie[8:]))
                                        except (NameError, SyntaxError):
                                                self.cookies[tag] = unquote(eachCookie[8:])
                else:
                        #s('no cookies on server...\n')
                        self.cookies['info'] = self.cookies['user'] = ''

                #s('cookies: %s\n' % str(self.cookies))
                if self.cookies['info'] != '':
                        self.who, langStr, self.fn = split(self.cookies['info'], ':')
                        self.langs = split(langStr, ',')
                else:
                        self.who = self.fn = ''
                        self.langs = ['Python']


        def showForm(self):
                self.getCPPCookies()                # get cookies

                # put together lang checkboxes
                langStr = ''
                for eachLang in AdvCGI.langSet:
                        if eachLang in self.langs:
                                langStr = langStr + AdvCGI.langItem % (eachLang, ' CHECKED', eachLang)
                        else:
                                langStr = langStr + AdvCGI.langItem % (eachLang, '', eachLang)

                # see if user cookie set up yet
                if not self.cookies.has_key('user') or self.cookies['user'] == '':
                        cookieStatus = '<I>(cookie has not been set yet)</I>'
                        userCook = ''
                else:
                        userCook = cookieStatus = self.cookies['user']

                # output results
                #s('filename: ' + self.fn + '\n')
                print AdvCGI.header + AdvCGI.formhtml % (AdvCGI.url, cookieStatus, userCook, self.who, langStr, self.fn)
                #print AdvCGI.header + AdvCGI.formhtml % (AdvCGI.url, cookieStatus, userCook, self.who, langStr)


        errhtml = '''<HTML><HEAD><TITLE>
Advanced CGI Demo</TITLE></HEAD>
<BODY><H3>ERROR</H3>
<B>%s</B><P>
<FORM><INPUT TYPE=button VALUE=Back
ONCLICK="window.history.back()"></FORM>
</BODY></HTML>'''


        def showError(self):
                print AdvCGI.header + AdvCGI.errhtml % (self.error)


        reshtml = '''<HTML><HEAD><TITLE>
Advanced CGI Demo</TITLE></HEAD>
<BODY><H2>Your Uploaded Data</H2>
<H3>Your cookie value is: <B>%s</B></H3>
<H3>Your name is: <B>%s</B></H3>
<H3>You can program in the following languages:</H3>
<UL>%s</UL>
<H3>Your uploaded file...<BR>
Name: <I>%s</I><BR>
Contents:</H3>
<PRE>%s</PRE>
Click <A HREF="%s"><B>here</B></A> to return to form.
</BODY></HTML>'''


        def setCPPCookies(self):
                for eachCookie in self.cookies.keys():
                        #s('setting %s cookie...\n' % eachCookie)
                        print 'Set-Cookie: CPP%s=%s; path=/' % (eachCookie, quote(self.cookies[eachCookie]))


        def doResults(self):
                MAXBYTES = 1024
                langlist = ''
                for eachLang in self.langs:
                        langlist = langlist + '<LI>%s<BR>' % eachLang
                filedata = ''
                while len(filedata) < MAXBYTES:
                        data = self.fp.readline()
                        if data == '': break
                        filedata = filedata + data
                else:
                        filedata = filedata + '... <B><I>(file truncated due to size)</I></B>'
                self.fp.close()
                if filedata == '':
                        filedata = '<B><I>(file upload error or file not given)</I></B>'
                filename = self.fn

                # see if user cookie set up yet
                if not self.cookies.has_key('user') or self.cookies['user'] == '':
                        cookieStatus = '<I>(cookie has not been set yet)</I>'
                        userCook = ''
                else:
                        userCook = cookieStatus = self.cookies['user']

                # set cookies
                self.cookies['info'] = join([self.who, join(self.langs, ','), filename], ':')
                self.setCPPCookies()

                # output page
                print AdvCGI.header + AdvCGI.reshtml % (cookieStatus, self.who, langlist, filename, filedata, AdvCGI.url)


        def __init__(self):
                self.cookies = {}


        def go(self):
                self.error = ''

                form = FieldStorage()

                if form.keys() == []:
                    #s('calling showForm()\n')
                    self.showForm()
                    return

                if form.has_key('person'):
                        self.who = capwords(strip(form['person'].value))
                        if self.who == '':
                                self.error = 'Your name is required. (blank)'
                else:
                        self.error = 'Your name is required. (missing)'

                if form.has_key('cookie'):
                        self.cookies['user'] = unquote(strip(form['cookie'].value))
                else:
                        self.cookies['user'] = ''

                self.langs = []
                if form.has_key('lang'):
                        langdata = form['lang']
                        if type(langdata) == type([]):
                                for eachLang in langdata:
                                        self.langs.append(eachLang.value)
                        else:
                                self.langs.append(langdata.value)
                else:
                        self.error = 'At least one language required.'

                if form.has_key('upfile'):
                        upfile = form["upfile"]
                        self.fn = upfile.filename or ''
                        #s('filename is %s??\n' % self.fn)
                        if upfile.file:
                                self.fp = upfile.file
                        else:
                                self.fp = StringIO('(no data)')
                else:
                        self.fp = StringIO('(no file)')
                        self.fn = ''

                if not self.error:
                        #s('calling doResults()\n')
                        self.doResults()
                else:
                        #s('calling showError()\n')
                        self.showError()


if __name__ == '__main__':
        page = AdvCGI()
        page.go()

########NEW FILE########
__FILENAME__ = advcgi2
#!/usr/bin/env python
'''
$Id: advcgi.py,v 1.1 2000/12/31 01:32:45 wesc Exp $

advcgi.py -- tests CGI file uploads and multi-valued CGI variables

Advanced CGI demo

created by wesc on 00/07/25
'''

from cgi import FieldStorage
from os import environ
from StringIO import StringIO
from urllib import quote, unquote
#from sys import stderr
#s = stderr.write

class AdvCGI(object):

        header = 'Content-Type: text/html\n\n'
        url = '/py/advcgi.py'

        formhtml = '''<HTML><HEAD><TITLE>
Advanced CGI Demo</TITLE></HEAD>
<BODY><H2>Advanced CGI Demo Form</H2>
<FORM METHOD=post ACTION="%s" ENCTYPE="multipart/form-data">
<H3>My Cookie Setting</H3>
<LI> <CODE><B>CPPuser = %s</B></CODE>
<H3>Enter cookie value<BR>
<INPUT NAME=cookie value="%s"> (<I>optional</I>)</H3>
<H3>Enter your name<BR>
<INPUT NAME=person VALUE="%s"> (<I>required</I>)</H3>
<H3>What languages can you program in?
(<I>at least one required</I>)</H3>
%s
<H3>Enter file to upload</H3>
<INPUT TYPE=file NAME=upfile VALUE="%s" SIZE=45>
<P><INPUT TYPE=submit>
</FORM></BODY></HTML>'''

        langSet = ('Python', 'PERL', 'Java', 'C++', 'PHP', 'C', 'JavaScript')
        langItem = '<INPUT TYPE=checkbox NAME=lang VALUE="%s"%s> %s\n'


        # reads cookies from client, creates cookies, who, langs
        def getCPPCookies(self):
                if environ.has_key('HTTP_COOKIE'):
                        #s('reading cookies from server...\n')
                        #for eachCookie in map(strip, split(environ['HTTP_COOKIE'], ';')):
                        cookies = [x.strip() for x in environ['HTTP_COOKIE'].split(';')]
                        for eachCookie in cookies:
                                if len(eachCookie) > 6 and eachCookie[:3] == 'CPP':
                                        tag = eachCookie[3:7]
                                        try:
                                                self.cookies[tag] = eval(unquote(eachCookie[8:]))
                                        except (NameError, SyntaxError):
                                                self.cookies[tag] = unquote(eachCookie[8:])
                        if not self.cookies.has_key('info'):
                            self.cookies['info'] = ''
                        if not self.cookies.has_key('user'):
                            self.cookies['user'] = ''
                else:
                        #s('no cookies on server...\n')
                        self.cookies['info'] = self.cookies['user'] = ''

                #s('cookies: %s\n' % str(self.cookies))
                if self.cookies['info'] != '':
                        self.who, langStr, self.fn = self.cookies['info'].split(':')
                        self.langs = langStr.split(',')
                else:
                        self.who = self.fn = ''
                        self.langs = ['Python']


        def showForm(self):
                self.getCPPCookies()                # get cookies

                # put together lang checkboxes
                langStr = ''
                for eachLang in AdvCGI.langSet:
                        if eachLang in self.langs:
                                langStr = langStr + AdvCGI.langItem % (eachLang, ' CHECKED', eachLang)
                        else:
                                langStr = langStr + AdvCGI.langItem % (eachLang, '', eachLang)

                # see if user cookie set up yet
                if not self.cookies.has_key('user') or self.cookies['user'] == '':
                        cookieStatus = '<I>(cookie has not been set yet)</I>'
                        userCook = ''
                else:
                        userCook = cookieStatus = self.cookies['user']

                # output results
                #s('filename: ' + self.fn + '\n')
                print AdvCGI.header + AdvCGI.formhtml % (AdvCGI.url, cookieStatus, userCook, self.who, langStr, self.fn)
                #print AdvCGI.header + AdvCGI.formhtml % (AdvCGI.url, cookieStatus, userCook, self.who, langStr)


        errhtml = '''<HTML><HEAD><TITLE>
Advanced CGI Demo</TITLE></HEAD>
<BODY><H3>ERROR</H3>
<B>%s</B><P>
<FORM><INPUT TYPE=button VALUE=Back
ONCLICK="window.history.back()"></FORM>
</BODY></HTML>'''


        def showError(self):
                print AdvCGI.header + AdvCGI.errhtml % (self.error)


        reshtml = '''<HTML><HEAD><TITLE>
Advanced CGI Demo</TITLE></HEAD>
<BODY><H2>Your Uploaded Data</H2>
<H3>Your cookie value is: <B>%s</B></H3>
<H3>Your name is: <B>%s</B></H3>
<H3>You can program in the following languages:</H3>
<UL>%s</UL>
<H3>Your uploaded file...<BR>
Name: <I>%s</I><BR>
Contents:</H3>
<PRE>%s</PRE>
Click <A HREF="%s"><B>here</B></A> to return to form.
</BODY></HTML>'''


        def setCPPCookies(self):
                for eachCookie in self.cookies.keys():
                        #s('setting %s cookie...\n' % eachCookie)
                        print 'Set-Cookie: CPP%s=%s; path=/' % (eachCookie, quote(self.cookies[eachCookie]))


        def doResults(self):
                MAXBYTES = 1024
                langlist = ''
                for eachLang in self.langs:
                        langlist = langlist + '<LI>%s<BR>' % eachLang
                filedata = ''
                while len(filedata) < MAXBYTES:
                        data = self.fp.readline()
                        if data == '': break
                        filedata = filedata + data
                else:
                        filedata = filedata + '... <B><I>(file truncated due to size)</I></B>'
                self.fp.close()
                if filedata == '':
                        filedata = '<B><I>(file upload error or file not given)</I></B>'
                filename = self.fn

                # see if user cookie set up yet
                if not self.cookies.has_key('user') or self.cookies['user'] == '':
                        cookieStatus = '<I>(cookie has not been set yet)</I>'
                        userCook = ''
                else:
                        userCook = cookieStatus = self.cookies['user']

                # set cookies
                self.cookies['info'] = ':'.join([self.who, ','.join(self.langs), filename])
                self.setCPPCookies()

                # output page
                print AdvCGI.header + AdvCGI.reshtml % (cookieStatus, self.who, langlist, filename, filedata, AdvCGI.url)


        def __init__(self):
                self.cookies = {}


        def go(self):
                self.error = ''

                form = FieldStorage()

                if form.keys() == []:
                    #s('calling showForm()\n')
                    self.showForm()
                    return

                if form.has_key('person'):
                        self.who = form['person'].value.strip().title()
                        if self.who == '':
                                self.error = 'Your name is required. (blank)'
                else:
                        self.error = 'Your name is required. (missing)'

                if form.has_key('cookie'):
                        self.cookies['user'] = unquote(form['cookie'].value.strip())
                else:
                        self.cookies['user'] = ''

                self.langs = []
                if form.has_key('lang'):
                        langdata = form['lang']
                        if type(langdata) == type([]):
                                for eachLang in langdata:
                                        self.langs.append(eachLang.value)
                        else:
                                self.langs.append(langdata.value)
                else:
                        self.error = 'At least one language required.'

                if form.has_key('upfile'):
                        upfile = form["upfile"]
                        self.fn = upfile.filename or ''
                        #s('filename is %s??\n' % self.fn)
                        if upfile.file:
                                self.fp = upfile.file
                        else:
                                self.fp = StringIO('(no data)')
                else:
                        self.fp = StringIO('(no file)')
                        self.fn = ''

                if not self.error:
                        #s('calling doResults()\n')
                        self.doResults()
                else:
                        #s('calling showError()\n')
                        self.showError()


if __name__ == '__main__':
        page = AdvCGI()
        page.go()

########NEW FILE########
__FILENAME__ = cgihttpd
#!/usr/bin/env python

from CGIHTTPServer import test

if __name__ == '__main__':
    try:
        print 'Welcome to the machine...\nPress ^C once or twice to quit'
        test()
    except KeyboardInterrupt:
        print 'exiting server...'

########NEW FILE########
__FILENAME__ = cgihttpd2
#!/usr/bin/env python

from CGIHTTPServer import test;test()

########NEW FILE########
__FILENAME__ = friends1
#!/usr/bin/env python
'''
$Id: friends1.py,v 1.1 2000/12/31 01:32:45 wesc Exp $

Friends CGI demo
'''

import cgi
from string import atoi,replace

reshtml = '''Content-Type: text/html\n
<HTML><HEAD><TITLE>Friends CGI Demo (dynamic screen)</TITLE></HEAD>
<BODY><H3>Friends list for: <I>%s</I></H3>
Your name is: <B>%s</B><P>
You have <B>%s</B> friends.
</BODY></HTML>'''

# process() does all the work
def process():

    # initialize Data class object
    form = cgi.FieldStorage()

    # get name and number of friends
    who = form['person'].value
    howmany = form['howmany'].value

    # substitute in real name and number of friends and return
    print reshtml % (who, who, howmany)

# invoke if called directly
if __name__ == '__main__':
    process()

########NEW FILE########
__FILENAME__ = friends2
#!/usr/bin/env python
'''
$Id: friends2.py,v 1.1 2000/12/31 01:32:45 wesc Exp $

CGI demo
'''

import cgi

header = 'Content-Type: text/html\n\n'

formhtml = '''<HTML><HEAD><TITLE>Friends CGI Demo</TITLE></HEAD>
<BODY><H3>Friends list for: <I>NEW USER</I></H3>
<FORM ACTION="/cgi-bin/friends2.py">
<B>Enter your Name:</B>
<INPUT TYPE=hidden NAME=action VALUE=edit>
<INPUT TYPE=text NAME=person VALUE="" SIZE=15>
<P><B>How many friends do you have?</B>
%s
<P><INPUT TYPE=submit></FORM></BODY></HTML>'''

friendradio = '<INPUT TYPE=radio NAME=howmany VALUE="%s" %s> %s\n'

def showForm():
    friends = ''
    for i in [0, 10, 25, 50, 100]:
        checked = ''
        if i == 0:
            checked = 'CHECKED'
        friends = friends + friendradio % (str(i), checked, str(i))
    print header + formhtml % (friends)


reshtml = '''<HTML><HEAD><TITLE>Friends CGI Demo</TITLE></HEAD>
<BODY><H3>Friends list for: <I>%s</I></H3>
Your name is: <B>%s</B><P>
You have <B>%s</B> friends.
</BODY></HTML>'''

def doResults(who, howmany):
    # substitute in real name and number of friends and return
    print header + reshtml % (who, who, howmany)


# process() does all the work
def process():

    # initialize Data class object
    form = cgi.FieldStorage()

    # get user name
    if form.has_key('person'):
        who = form['person'].value
    else:
        who = 'NEW USER'

    # get name and number of friends
    if form.has_key('howmany'):
        howmany = form['howmany'].value
    else:
        howmany = 0

    # if editing, show results
    if form.has_key('action'):
        doResults(who, howmany)

    # otherwise, show form
    else:
        showForm()

# invoke if called directly
if __name__ == '__main__':
    process()

########NEW FILE########
__FILENAME__ = friends3
#!/usr/bin/env python
'''
$Id: friends3.py,v 1.1 2000/12/31 01:32:45 wesc Exp $

Friends CGI demo
'''

import cgi
from urllib import quote_plus
from string import capwords
#from sys import stderr
#s = stderr.write

header = 'Content-Type: text/html\n\n'
url = 'http://localhost/cgi-bin/friends3.py'

errhtml = '''<HTML><HEAD><TITLE>Friends CGI Demo</TITLE></HEAD>
<BODY><H3>ERROR</H3>
<B>%s</B><P>
<FORM><INPUT TYPE=button VALUE=Back ONCLICK="window.history.back()"></FORM>
</BODY></HTML>'''

# showError() --> None
def showError(error_str):
    'showError() -- display error message'
    print header + errhtml % (error_str)

friendradio = '<INPUT TYPE=radio NAME=howmany VALUE="%s" %s> %s\n'

formhtml = '''<HTML><HEAD><TITLE>Friends CGI Demo</TITLE></HEAD>
<BODY><H3>Friends list for: <I>%s</I></H3>
<FORM ACTION="%s">
<B>Your Name:</B>
<INPUT TYPE=hidden NAME=action VALUE=edit>
<INPUT TYPE=text NAME=person VALUE="%s" SIZE=15>
<P><B>How many friends do you have?</B>
%s
<P><INPUT TYPE=submit></FORM></body></html>'''

# showForm() --> None
def showForm(who, howmany):
    'showForm() -- presents blank or data-filled form for new input'

    friends = ''
    for i in [0, 10, 25, 50, 100]:
        checked = ''
        if str(i) == howmany:
            checked = 'CHECKED'
        friends = friends + friendradio % (str(i), checked, str(i))
    print header + formhtml % (who, url, who, friends)

reshtml = '''<HTML><HEAD><TITLE>Friends CGI Demo</TITLE></HEAD>
<BODY><H3>Friends list for: <I>%s</I></H3>
Your name is: <B>%s</B><P>
You have <B>%s</B> friends.
<P>Click <a href="%s">here</a> to edit your data again.
</BODY></HTML>'''

# doResults() --> None
def doResults(who, howmany):
    'doResults() -- displays results with given form data'

    # substitute in real name and number of friends and return
    newurl = url + '?action=reedit&person=%s&howmany=%s' % (quote_plus(who), howmany)
    print header + reshtml % (who, who, howmany, newurl)

# process() --> None
def process():
    'process() does all the work:  grabs user data and determines routine to call'

    error = ''

    # initialize Data class object
    form = cgi.FieldStorage()
    #s('name: '+str(form.name)+'\n')
    #s('keys: '+str(form.keys())+'\n')
    #for i in form.keys():
            #s('item: '+str(form[i].name)+' has a value of '+str(form[i].value)+' and is a ' + form[i].__class__.__name__ + '\n')

    # get user name
    if form.has_key('person'):
        who = capwords(form['person'].value)
    else:
        who = 'NEW USER'

    # get name and number of friends
    if form.has_key('howmany'):
        howmany = form['howmany'].value
    else:
        if form.has_key('action') and form['action'].value == 'edit':
            error = 'Please select the number of friends you have.'
        else:
            howmany = 0

    # no errors, either display form or present results
    if not error:

        # if editing the first time, show results
        if form.has_key('action') and form['action'].value != 'reedit':
            doResults(who, howmany)

        # otherwise, show form
        else:
            showForm(who, howmany)

    # send error message back if error situation
    else:
        showError(error)


# invoke if called directly
if __name__ == '__main__':
    process()

########NEW FILE########
__FILENAME__ = myhttpd
#!/usr/bin/env python

from os import curdir, sep, getcwd
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

# subclass BaseHTTPRequestHandler and support GET requests
class MyHandler(BaseHTTPRequestHandler):

    # handle GET request
    def do_GET(self):
        # check if we can read file and return it
        try:
            f = open(curdir + sep + self.path)
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(f.read())
            f.close()

        # if not, assume non-existent file
        except IOError:
            self.send_error(404, 'File Not Found: %s' % self.path)


def main():

    # attempt to start server
    try:
        # change directory if necessary by adding call to os.chdir()
        #os.chdir('/usr/local/httpd/htdocs')

        # create server
        server = HTTPServer(('', 80), MyHandler)
        print 'Welcome to the machine... hit ^C once or twice to quit'
        print 'cwd:', getcwd()

        # enter server loop
        server.serve_forever()

    # quit requested
    except KeyboardInterrupt:
        print '^C received, shutting down server'
        server.socket.close()


if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = crawl
#!/usr/bin/env python

from sys import argv
from os import makedirs, unlink, sep
from os.path import isdir, exists, dirname, splitext
from string import replace, find, lower
from htmllib import HTMLParser
from urllib import urlretrieve
from urlparse import urlparse, urljoin
from formatter import DumbWriter, AbstractFormatter
from cStringIO import StringIO

class Retriever(object):	# download Web pages

    def __init__(self, url):
        self.url = url
        self.file = self.filename(url)

    def filename(self, url, deffile='index.htm'):
        parsedurl = urlparse(url, 'http:', 0)  # parse path
        path = parsedurl[1] + parsedurl[2]
        ext = splitext(path)
        if ext[1] == '':
            if path[-1] == '/':
                path += deffile
            else:
                path += '/' + deffile
        ldir = dirname(path)	# local directory
	if sep != '/':		# os-indep. path separator
	    ldir = replace(ldir, ',', sep)
        if not isdir(ldir):      # create archive dir if nec.
            if exists(ldir): unlink(ldir)
            makedirs(ldir)
        return path

    def download(self):		# download Web page
        try:
            retval = urllib.urlretrieve(self.url, self.file)
        except IOError:
            retval = ('*** ERROR: invalid URL "%s"' % \
                self.url, )
        return retval

    def parseAndGetLinks(self):	# pars HTML, save links
        self.parser = HTMLParser(AbstractFormatter( \
            DumbWriter(StringIO())))
        self.parser.feed(open(self.file).read())
        self.parser.close()
        return self.parse.anchorlist

class Crawler(object):		# manage entire crawling process

    count = 0			# static downloaded page counter

    def __init__(self, url):
        self.q = [url]
        self.seen = []
        self.dom = urlparse(url)[1]

    def getPage(self, url):
        r = Retriever(url)
        retval = r.download()
        if retval[0] == '*':     # error situation, do not parse
            print retval, '... skipping parse'
            return
        Crawler.count = Crawler.count + 1
        print '\n(', Crawler.count, ')'
        print 'URL:', url
        print 'FILE:', retval[0]
        self.seen.append(url)

        links = r.parseAndGetLinks()  # get and process links
        for eachLink in links:
            if eachLink[:4] != 'http' and \
                    find(eachLink, '://') == -1:
                eachLink = urljoin(url, eachLink)
            print '* ', eachLink,

            if find(lower(eachLink), 'mailto:') != -1:
                print '... discarded, mailto link'
                continue

            if eachLink not in self.seen:
                if find(eachLink, self.dom) == -1:
                    print '... discarded, not in domain'
                else:
                    if eachLink not in self.q:
                        self.q.append(eachLink)
                        print '... new, added to Q'
                    else:
                        print '... discarded, already in Q'
            else:
                    print '... discarded, already processed'

    def go(self):                # process links in queue
        while self.q:
            url = self.q.pop()
            self.getPage(url)

def main():
    if len(argv) > 1:
        url = argv[1]
    else:
        try:
            url = raw_input('Enter starting URL: ')
        except (KeyboardInterrupt, EOFError):
            url = ''

    if not url: return
    robot = Crawler(url)
    robot.go()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = friends1
#!/usr/bin/env python

import cgi

reshtml = '''Content-Type: text/html\n
<HTML><HEAD><TITLE>
Friends CGI Demo (dynamic screen)
</TITLE></HEAD>
<BODY><H3>Friends list for: <I>%s</I></H3>
Your name is: <B>%s</B><P>
You have <B>%s</B> friends.
</BODY></HTML>'''

form = cgi.FieldStorage()
who = form['person'].value
howmany = form['howmany'].value
print reshtml % (who, who, howmany)

########NEW FILE########
__FILENAME__ = friends2
#!/usr/bin/env python

import cgi

header = 'Content-Type: text/html\n\n'

formhtml = '''<HTML><HEAD><TITLE>
Friends CGI Demo</TITLE></HEAD>
<BODY><H3>Friends list for: <I>NEW USER</I></H3>
<FORM ACTION="/cgi-bin/friends2.py">
<B>Enter your Name:</B>
<INPUT TYPE=hidden NAME=action VALUE=edit>
<INPUT TYPE=text NAME=person VALUE="NEW USER" SIZE=15>
<P><B>How many friends do you have?</B>
%s
<P><INPUT TYPE=submit></FORM></BODY></HTML>'''

fradio = '<INPUT TYPE=radio NAME=howmany VALUE="%s" %s> %s\n'

def showForm():
    friends = ''
    for i in [0, 10, 25, 50, 100]:
        checked = ''
        if i == 0:
            checked = 'CHECKED'
        friends = friends + fradio % \
            (str(i), checked, str(i))

    print header + formhtml % (friends)

reshtml = '''<HTML><HEAD><TITLE>
Friends CGI Demo</TITLE></HEAD>
<BODY><H3>Friends list for: <I>%s</I></H3>
Your name is: <B>%s</B><P>
You have <B>%s</B> friends.
</BODY></HTML>'''

def doResults(who, howmany):
    print header + reshtml % (who, who, howmany)

def process():
    form = cgi.FieldStorage()
    if form.has_key('person'):
        who = form['person'].value
    else:
        who = 'NEW USER'

    if form.has_key('howmany'):
        howmany = form['howmany'].value
    else:
        howmany = 0

    if form.has_key('action'):
        doResults(who, howmany)
    else:
        showForm()

if __name__ == '__main__':
    process()

########NEW FILE########
__FILENAME__ = friends3
#!/usr/bin/env python

import cgi
from urllib import quote_plus
from string import capwords

header = 'Content-Type: text/html\n\n'
url = '/cgi-bin/friends3.py'

errhtml = '''<HTML><HEAD><TITLE>
Friends CGI Demo</TITLE></HEAD>
<BODY><H3>ERROR</H3>
<B>%s</B><P>
<FORM><INPUT TYPE=button VALUE=Back
ONCLICK="window.history.back()"></FORM>
</BODY></HTML>'''

def showError(error_str):
    print header + errhtml % (error_str)

formhtml = '''<HTML><HEAD><TITLE>
Friends CGI Demo</TITLE></HEAD>
<BODY><H3>Friends list for: <I>%s</I></H3>
<FORM ACTION="%s">
<B>Your Name:</B>
<INPUT TYPE=hidden NAME=action VALUE=edit>
<INPUT TYPE=text NAME=person VALUE="%s" SIZE=15>
<P><B>How many friends do you have?</B>
%s
<P><INPUT TYPE=submit></FORM></BODY></HTML>'''

fradio = '<INPUT TYPE=radio NAME=howmany VALUE="%s" %s> %s\n'

def showForm(who, howmany):
    friends = ''
    for i in [0, 10, 25, 50, 100]:
        checked = ''
        if str(i) == howmany:
            checked = 'CHECKED'
        friends = friends + fradio % \
            (str(i), checked, str(i))
    print header + formhtml % (who, url, who, friends)

reshtml = '''<HTML><HEAD><TITLE>
Friends CGI Demo</TITLE></HEAD>
<BODY><H3>Friends list for: <I>%s</I></H3>
Your name is: <B>%s</B><P>
You have <B>%s</B> friends.
<P>Click <A HREF="%s">here</A> to edit your data again.
</BODY></HTML>'''

def doResults(who, howmany):
    newurl = url + '?action=reedit&person=%s&howmany=%s' % \
        (quote_plus(who), howmany)
    print header + reshtml % (who, who, howmany, newurl)

def process():
    error = ''
    form = cgi.FieldStorage()

    if form.has_key('person'):
        who = capwords(form['person'].value)
    else:
        who = 'NEW USER'

    if form.has_key('howmany'):
        howmany = form['howmany'].value
    else:
        if form.has_key('action') and \
                form['action'].value == 'edit':
            error = 'Please select number of friends.'
        else:
            howmany = 0

    if not error:
        if form.has_key('action') and \
                form['action'].value != 'reedit':
            doResults(who, howmany)
        else:
            showForm(who, howmany)
    else:
        showError(error)

if __name__ == '__main__':
        process()

########NEW FILE########
__FILENAME__ = myhttpd
#!/usr/bin/env python

from os import curdir, sep
from BaseHTTPServer import \
    BaseHTTPRequestHandler, HTTPServer

class MyHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        try:
            f = open(curdir + sep + self.path)
            self.send_response(200)
            self.send_header('Content-type',
		'text/html')
            self.end_headers()
            self.wfile.write(f.read())
            f.close()
        except IOError:
            self.send_error(404,
		'File Not Found: %s' % self.path)

def main():
    try:
        server = HTTPServer(('', 80), MyHandler)
        print 'Welcome to the machine...'
	print 'Press ^C once or twice to quit'
        server.serve_forever()
    except KeyboardInterrupt:
        print '^C received, shutting down server'
        server.socket.close()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = uniCGI
#!/usr/bin/env python

CODEC = 'UTF-8'
UNICODE_HELLO = u'''
Hello!
\u00A1Hola!
\u4F60\u597D!
\u3053\u3093\u306B\u3061\u306F!
'''

print 'Content-Type: text/html; charset=%s\r' % CODEC
print '\r'
print '<HTML><HEAD><TITLE>Unicode CGI Demo</TITLE></HEAD>'
print '<BODY>'
print UNICODE_HELLO.encode(CODEC)
print '</BODY></HTML>'

########NEW FILE########
__FILENAME__ = urlopenAuth
#!/usr/bin/env python

import urllib2

LOGIN = 'wesley'
PASSWD = "you'llNeverGuess"
URL = 'http://localhost'

def handler_version(url):
    from urlparse import urlparse as up
    hdlr = urllib2.HTTPBasicAuthHandler()
    hdlr.add_password('Archives', up(url)[1], LOGIN, PASSWD)
    opener = urllib2.build_opener(hdlr)
    urllib2.install_opener(opener)
    return url

def request_version(url):
    from base64 import encodestring
    req = urllib2.Request(url)
    b64str = encodestring('%s:%s' % (LOGIN, PASSWD))[:-1]
    req.add_header("Authorization", "Basic %s" % b64str)
    return req

for funcType in ('handler', 'request'):
    print '*** Using %s:' % funcType.upper()
    url = eval('%s_version')(URL)
    f = urllib2.urlopen(url)
    print f.readline()
    f.close()

########NEW FILE########
__FILENAME__ = ushuffle_dbPRE25
#!/usr/bin/env python

import os
from random import randrange as rrange

COLSIZ = 10
RDBMSs = {'s': 'sqlite', 'm': 'mysql', 'g': 'gadfly'}
DB_EXC = None

def setup():
    return RDBMSs[raw_input('''
Choose a database system:

(M)ySQL
(G)adfly
(S)QLite

Enter choice: ''').strip().lower()[0]]

def connect(db, dbName):
    global DB_EXC
    dbDir = '%s_%s' % (db, dbName)

    if db == 'sqlite':
        try:
            import sqlite3
        except ImportError, e:
            try:
                from pysqlite2 import dbapi2 as sqlite3
            except ImportError, e:
                return None

        DB_EXC = sqlite3
        if not os.path.isdir(dbDir):
            os.mkdir(dbDir)
        cxn = sqlite3.connect(os.path.join(dbDir, dbName))

    elif db == 'mysql':
        try:
            import MySQLdb
            import _mysql_exceptions as DB_EXC 
        except ImportError, e:
            return None

        try:
            cxn = MySQLdb.connect(db=dbName)
        except DB_EXC.OperationalError, e:
            cxn = MySQLdb.connect(user='root')
            try:
                cxn.query('DROP DATABASE %s' % dbName)
            except DB_EXC.OperationalError, e:
                pass
            cxn.query('CREATE DATABASE %s' % dbName)
            cxn.query("GRANT ALL ON %s.* to ''@'localhost'" % dbName)
            cxn.commit()
            cxn.close()
            cxn = MySQLdb.connect(db=dbName)

    elif db == 'gadfly':
        try:
            from gadfly import gadfly
            DB_EXC = gadfly
        except ImportError, e:
            return None

        try:
            cxn = gadfly(dbName, dbDir)
        except IOError, e:
            cxn = gadfly()
            if not os.path.isdir(dbDir):
                os.mkdir(dbDir)
            cxn.startup(dbName, dbDir)
    else:
        return None
    return cxn

def create(cur):
    try:
        cur.execute('''
            CREATE TABLE users (
                login VARCHAR(8),
                uid INTEGER,
                prid INTEGER)
        ''')
    except DB_EXC.OperationalError, e:
        drop(cur)
        create(cur)

drop = lambda cur: cur.execute('DROP TABLE users')

NAMES = (
    ('aaron', 8312), ('angela', 7603), ('dave', 7306),
    ('davina',7902), ('elliot', 7911), ('ernie', 7410),
    ('jess', 7912), ('jim', 7512), ('larry', 7311),
    ('leslie', 7808), ('melissa', 8602), ('pat', 7711),
    ('serena', 7003), ('stan', 7607), ('faye', 6812),
    ('amy', 7209),
)

def randName():
    pick = list(NAMES)
    while len(pick) > 0:
        yield pick.pop(rrange(len(pick)))

def insert(cur, db):
    if db == 'sqlite':
        cur.executemany("INSERT INTO users VALUES(?, ?, ?)",
        [(who, uid, rrange(1,5)) for who, uid in randName()])
    elif db == 'gadfly':
        for who, uid in randName():
            cur.execute("INSERT INTO users VALUES(?, ?, ?)",
            (who, uid, rrange(1,5)))
    elif db == 'mysql':
        cur.executemany("INSERT INTO users VALUES(%s, %s, %s)",
        [(who, uid, rrange(1,5)) for who, uid in randName()])

getRC = lambda cur: (hasattr(cur, 'rowcount') and [cur.rowcount] or [-1])[0]
#getRC = cur.rowcount if hasattr(cur, 'rowcount') else -1

def update(cur):
    fr = rrange(1,5)
    to = rrange(1,5)
    cur.execute(
        "UPDATE users SET prid=%d WHERE prid=%d" % (to, fr))
    return fr, to, getRC(cur)

def delete(cur):
    rm = rrange(1,5)
    cur.execute('DELETE FROM users WHERE prid=%d' % rm)
    return rm, getRC(cur)

def dbDump(cur):
    cur.execute('SELECT * FROM users')
    print '\n%s%s%s' % ('LOGIN'.ljust(COLSIZ),
        'USERID'.ljust(COLSIZ), 'PROJ#'.ljust(COLSIZ))
    for data in cur.fetchall():
        print '%s%s%s' % tuple([str(s).title().ljust(COLSIZ) \
            for s in data])

def main():
    db = setup()
    print '*** Connecting to %r database' % db
    cxn = connect(db, 'test')
    if not cxn:
        print '\nERROR: %r not supported, exiting' % db
        return
    cur = cxn.cursor()

    print '\n*** Creating users table'
    create(cur)

    print '\n*** Inserting names into table'
    insert(cur, db)
    dbDump(cur)

    print '\n*** Randomly moving folks',
    fr, to, num = update(cur)
    print 'from one group (%d) to another (%d)' % (fr, to)
    print '\t(%d users moved)' % num
    dbDump(cur)

    print '\n*** Randomly choosing group',
    rm, num = delete(cur)
    print '(%d) to delete' % rm
    print '\t(%d users removed)' % num
    dbDump(cur)

    print '\n*** Dropping users table'
    drop(cur)
    cur.close()
    cxn.commit()
    cxn.close()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = ushuffle_db
#!/usr/bin/env python

import os
from random import randrange as rrange

COLSIZ = 10
RDBMSs = {'s': 'sqlite', 'm': 'mysql', 'g': 'gadfly'}
DB_EXC = None

def setup():
    return RDBMSs[raw_input('''
Choose a database system:

(M)ySQL
(G)adfly
(S)QLite

Enter choice: ''').strip().lower()[0]]

def connect(db, dbName):
    global DB_EXC
    dbDir = '%s_%s' % (db, dbName)

    if db == 'sqlite':
        try:
            import sqlite3
        except ImportError, e:
            try:
                from pysqlite2 import dbapi2 as sqlite3
            except ImportError, e:
                return None

        DB_EXC = sqlite3
        if not os.path.isdir(dbDir):
            os.mkdir(dbDir)
        cxn = sqlite3.connect(os.path.join(dbDir, dbName))

    elif db == 'mysql':
        try:
            import MySQLdb
            import _mysql_exceptions as DB_EXC 
        except ImportError, e:
            return None

        try:
            cxn = MySQLdb.connect(db=dbName)
        except DB_EXC.OperationalError, e:
            cxn = MySQLdb.connect(user='root')
            try:
                cxn.query('DROP DATABASE %s' % dbName)
            except DB_EXC.OperationalError, e:
                pass
            cxn.query('CREATE DATABASE %s' % dbName)
            cxn.query("GRANT ALL ON %s.* to ''@'localhost'" % dbName)
            cxn.commit()
            cxn.close()
            cxn = MySQLdb.connect(db=dbName)

    elif db == 'gadfly':
        try:
            from gadfly import gadfly
            DB_EXC = gadfly
        except ImportError, e:
            return None

        try:
            cxn = gadfly(dbName, dbDir)
        except IOError, e:
            cxn = gadfly()
            if not os.path.isdir(dbDir):
                os.mkdir(dbDir)
            cxn.startup(dbName, dbDir)
    else:
        return None
    return cxn

def create(cur):
    try:
        cur.execute('''
            CREATE TABLE users (
                login VARCHAR(8),
                uid INTEGER,
                prid INTEGER)
        ''')
    except DB_EXC.OperationalError, e:
        drop(cur)
        create(cur)

drop = lambda cur: cur.execute('DROP TABLE users')

NAMES = (
    ('aaron', 8312), ('angela', 7603), ('dave', 7306),
    ('davina',7902), ('elliot', 7911), ('ernie', 7410),
    ('jess', 7912), ('jim', 7512), ('larry', 7311),
    ('leslie', 7808), ('melissa', 8602), ('pat', 7711),
    ('serena', 7003), ('stan', 7607), ('faye', 6812),
    ('amy', 7209),
)

def randName():
    pick = list(NAMES)
    while len(pick) > 0:
        yield pick.pop(rrange(len(pick)))

def insert(cur, db):
    if db == 'sqlite':
        cur.executemany("INSERT INTO users VALUES(?, ?, ?)",
        [(who, uid, rrange(1,5)) for who, uid in randName()])
    elif db == 'gadfly':
        for who, uid in randName():
            cur.execute("INSERT INTO users VALUES(?, ?, ?)",
            (who, uid, rrange(1,5)))
    elif db == 'mysql':
        cur.executemany("INSERT INTO users VALUES(%s, %s, %s)",
        [(who, uid, rrange(1,5)) for who, uid in randName()])

getRC = lambda cur: cur.rowcount if hasattr(cur, 'rowcount') else -1

def update(cur):
    fr = rrange(1,5)
    to = rrange(1,5)
    cur.execute(
        "UPDATE users SET prid=%d WHERE prid=%d" % (to, fr))
    return fr, to, getRC(cur)

def delete(cur):
    rm = rrange(1,5)
    cur.execute('DELETE FROM users WHERE prid=%d' % rm)
    return rm, getRC(cur)

def dbDump(cur):
    cur.execute('SELECT * FROM users')
    print '\n%s%s%s' % ('LOGIN'.ljust(COLSIZ),
        'USERID'.ljust(COLSIZ), 'PROJ#'.ljust(COLSIZ))
    for data in cur.fetchall():
        print '%s%s%s' % tuple([str(s).title().ljust(COLSIZ) \
            for s in data])

def main():
    db = setup()
    print '*** Connecting to %r database' % db
    cxn = connect(db, 'test')
    if not cxn:
        print '\nERROR: %r not supported, exiting' % db
        return
    cur = cxn.cursor()

    print '\n*** Creating users table'
    create(cur)

    print '\n*** Inserting names into table'
    insert(cur, db)
    dbDump(cur)

    print '\n*** Randomly moving folks',
    fr, to, num = update(cur)
    print 'from one group (%d) to another (%d)' % (fr, to)
    print '\t(%d users moved)' % num
    dbDump(cur)

    print '\n*** Randomly choosing group',
    rm, num = delete(cur)
    print '(%d) to delete' % rm
    print '\t(%d users removed)' % num
    dbDump(cur)

    print '\n*** Dropping users table'
    drop(cur)
    cur.close()
    cxn.commit()
    cxn.close()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = ushuffle_sa
#!/usr/bin/env python

import os
from random import randrange as rrange
from sqlalchemy import *
from ushuffle_db import NAMES, randName

FIELDS = ('login', 'uid', 'prid')
DBNAME = 'test'
COLSIZ = 10

class MySQLAlchemy(object):
    def __init__(self, db, dbName):
        import MySQLdb
        import _mysql_exceptions
        MySQLdb = pool.manage(MySQLdb)
        url = 'mysql://db=%s' % DBNAME
        eng = create_engine(url)
        try:
            cxn = eng.connection()
        except _mysql_exceptions.OperationalError, e:
            eng1 = create_engine('mysql://user=root')
            try:
                eng1.execute('DROP DATABASE %s' % DBNAME)
            except _mysql_exceptions.OperationalError, e:
                pass
            eng1.execute('CREATE DATABASE %s' % DBNAME)
            eng1.execute(
                "GRANT ALL ON %s.* TO ''@'localhost'" % DBNAME)
            eng1.commit()
            cxn = eng.connection()

        try:
            users = Table('users', eng, autoload=True)
        except exceptions.SQLError, e:
            users = Table('users', eng,
                Column('login', String(8)),
                Column('uid', Integer),
                Column('prid', Integer),
                redefine=True)

        self.eng = eng
        self.cxn = cxn
        self.users = users

    def create(self):
        users = self.users
        try:
            users.drop()
        except exceptions.SQLError, e:
            pass
        users.create()

    def insert(self):
        d = [dict(zip(FIELDS,
            [who, uid, rrange(1,5)])) for who, uid in randName()]
        return self.users.insert().execute(*d).rowcount

    def update(self):
        users = self.users
        fr = rrange(1,5)
        to = rrange(1,5)
        return fr, to, \
            users.update(users.c.prid==fr).execute(prid=to).rowcount

    def delete(self):
        users = self.users
        rm = rrange(1,5)
        return rm, \
            users.delete(users.c.prid==rm).execute().rowcount

    def dbDump(self):
        res = self.users.select().execute()
        print '\n%s%s%s' % ('LOGIN'.ljust(COLSIZ),
            'USERID'.ljust(COLSIZ), 'PROJ#'.ljust(COLSIZ))
        for data in res.fetchall():
            print '%s%s%s' % tuple([str(s).title().ljust(COLSIZ) for s in data])

    def __getattr__(self, attr):
        return getattr(self.users, attr)

    def finish(self):
        self.cxn.commit()
        self.eng.commit()

def main():
    print '*** Connecting to %r database' % DBNAME
    orm = MySQLAlchemy('mysql', DBNAME)

    print '\n*** Creating users table'
    orm.create()

    print '\n*** Inserting names into table'
    orm.insert()
    orm.dbDump()

    print '\n*** Randomly moving folks',
    fr, to, num = orm.update()
    print 'from one group (%d) to another (%d)' % (fr, to)
    print '\t(%d users moved)' % num
    orm.dbDump()

    print '\n*** Randomly choosing group',
    rm, num = orm.delete()
    print '(%d) to delete' % rm
    print '\t(%d users removed)' % num
    orm.dbDump()

    print '\n*** Dropping users table'
    orm.drop()
    orm.finish()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = ushuffle_so
#!/usr/bin/env python

import os
from random import randrange as rrange
from sqlobject import *
from ushuffle_db import NAMES, randName

DBNAME = 'test'
COLSIZ = 10
FIELDS = ('login', 'uid', 'prid')

class MySQLObject(object):
    def __init__(self, db, dbName):
        import MySQLdb
        import _mysql_exceptions
        url = 'mysql://localhost/%s' % DBNAME

        while True:
            cxn = connectionForURI(url)
            sqlhub.processConnection = cxn
            #cxn.debug = True
            try:
                class Users(SQLObject):
                    class sqlmeta:
                        fromDatabase = True
                    login = StringCol(length=8)
                    uid = IntCol()
                    prid = IntCol()
                break
            except _mysql_exceptions.ProgrammingError, e:
                class Users(SQLObject):
                    login = StringCol(length=8)
                    uid = IntCol()
                    prid = IntCol()
                break
            except _mysql_exceptions.OperationalError, e:
                cxn1 = sqlhub.processConnection=connectionForURI('mysql://root@localhost')
                cxn1.query("CREATE DATABASE %s" % DBNAME)
                cxn1.query("GRANT ALL ON %s.* TO ''@'localhost'" % DBNAME)
                cxn1.close()
        self.users = Users
        self.cxn = cxn

    def create(self):
        Users = self.users
        Users.dropTable(True)
        Users.createTable()

    def insert(self):
        for who, uid in randName():
            self.users(**dict(zip(FIELDS,
                [who, uid, rrange(1,5)])))

    def update(self):
        fr = rrange(1,5)
        to = rrange(1,5)
        users = self.users.selectBy(prid=fr)
        for i, user in enumerate(users):
            user.prid = to
        return fr, to, i+1

    def delete(self):
        rm = rrange(1,5)
        users = self.users.selectBy(prid=rm)
        for i, user in enumerate(users):
            user.destroySelf()
        return rm, i+1

    def dbDump(self):
        print '\n%s%s%s' % ('LOGIN'.ljust(COLSIZ),
            'USERID'.ljust(COLSIZ), 'PROJ#'.ljust(COLSIZ))
        for usr in self.users.select():
            print '%s%s%s' % (tuple([str(getattr(usr,
                field)).title().ljust(COLSIZ) \
                for field in FIELDS]))

    drop = lambda self: self.users.dropTable()
    finish = lambda self: self.cxn.close()

def main():
    print '*** Connecting to %r database' % DBNAME
    orm = MySQLObject('mysql', DBNAME)

    print '\n*** Creating users table'
    orm.create()

    print '\n*** Inserting names into table'
    orm.insert()
    orm.dbDump()

    print '\n*** Randomly moving folks',
    fr, to, num = orm.update()
    print 'from one group (%d) to another (%d)' % (fr, to)
    print '\t(%d users moved)' % num
    orm.dbDump()

    print '\n*** Randomly choosing group',
    rm, num = orm.delete()
    print '(%d) to delete' % rm
    print '\t(%d users removed)' % num
    orm.dbDump()

    print '\n*** Dropping users table'
    orm.drop()
    orm.finish()

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = excel
excel.pyw
########NEW FILE########
__FILENAME__ = olook
olook.pyw
########NEW FILE########
__FILENAME__ = ppoint
ppoint.pyw
########NEW FILE########
__FILENAME__ = stock
#!/usr/bin/env python

from time import ctime
from urllib import urlopen

ticks = ('YHOO', 'GOOG', 'EBAY', 'AMZN')
URL = 'http://quote.yahoo.com/d/quotes.csv?s=%s&f=sl1c1p2'

print '\nPrices quoted as of:', ctime()
print '\nTICKER'.ljust(9), 'PRICE'.ljust(8), 'CHG'.ljust(5), '%AGE'
print '------'.ljust(8), '-----'.ljust(8), '---'.ljust(5), '----'
u = urlopen(URL % ','.join(ticks))

for row in u:
    tick, price, chg, per = row.split(',')
    print eval(tick).ljust(7), \
	('%.2f' % round(float(price), 2)).rjust(6), \
	chg.rjust(6), eval(per.rstrip()).rjust(6)

u.close()

########NEW FILE########
__FILENAME__ = swhello
#!/usr/bin/env jython

from pawt import swing
import sys
from java.awt import Color, BorderLayout

def quit(e):
    sys.exit()

top = swing.JFrame("PySwing")
box = swing.JPanel(BorderLayout())
hello = swing.JLabel("Hello World!")
quit = swing.JButton("QUIT", actionPerformed=quit,
    background=Color.red, foreground=Color.white)

box.add("North", hello)
box.add("South", quit)
top.contentPane.add(box)
top.pack()
top.visible = 1	# or True for Jython 2.2+

########NEW FILE########
__FILENAME__ = word
word.pyw
########NEW FILE########
__FILENAME__ = settings
un = 'pydanny'
pw = 'Shon.1234'
########NEW FILE########
__FILENAME__ = tsTclnt
from socket import *

HOST = 'localhost'
PORT = 21569
BUFSIZE = 1024
ADDR = (HOST, PORT)

tcpCliSock = socket(AF_INET, SOCK_STREAM)
tcpCliSock.connect(ADDR)

while True:

    data = raw_input('> ')
    if not data:
        break
    tcpCliSock.send(data)
    data = tcpCliSock.recv(BUFSIZE)
    if not data:
        break
    print data
    
tcpCliSock.close()
########NEW FILE########
__FILENAME__ = tsTclntNew
from socket import *

HOST = 'localhost'
PORT = 12345
BUFSIZE = 1024
ADDR = (HOST, PORT)

tcpCliSock = socket(AF_INET, SOCK_STREAM)
tcpCliSock.connect(ADDR)

while True:

    data = raw_input('> ')
    if not data:
        break
    tcpCliSock.send(data)
    print '...waiting for reply...'
    data = tcpCliSock.recv(BUFSIZE)
    if not data:
        break
    print data
    
tcpCliSock.close()
########NEW FILE########
__FILENAME__ = tsTserv
from socket import *
from time import ctime

HOST = ''
PORT = 21569
BUFSIZ = 1024
ADDR = (HOST, PORT)

tcpSerSock = socket(AF_INET, SOCK_STREAM)
tcpSerSock.bind(ADDR)
tcpSerSock.listen(5)

while True:
    print 'waiting for connection'
    tcpCliSock, addr = tcpSerSock.accept()
    print '...connected from:', addr
    while True:
        data = tcpCliSock.recv(BUFSIZ)
        if not data:
            break
        tcpCliSock.send('[%s]%s' % (ctime(), data))
        print '[%s]%s' % (ctime(), data)
        
    tcpCliSock.close()
tcpSerSock.close()
########NEW FILE########
__FILENAME__ = tsUclnt
from socket import *

HOST = 'localhost'
PORT = 21570
BUFSIZE = 1024
ADDR = (HOST, PORT)

tcpCliSock = socket(AF_INET, SOCK_DGRAM)
tcpCliSock.connect(ADDR)

while True:

    data = raw_input('> ')
    if not data:
        break
    tcpCliSock.send(data)
    data = tcpCliSock.recv(BUFSIZE)
    if not data:
        break
    print data
    
tcpCliSock.close()
########NEW FILE########
__FILENAME__ = just_post
import urllib2
import urllib
import BeautifulSoup

# The URL to this service
URL = 'http://www.cepstral.com/cgi-bin/demos/weather'


def main():
    # Here is the data that FireBug said we sent
    postdict = {'city' : 'San Francisco',
                'demotype' : 'actual',
                'state' : 'CA',
                'voice' : 'David',
                'submit':'Synthesize the weather'}

    # Encode it into HTTP form, blah de blah blah
    postme = urllib.urlencode(postdict)

    # Send it...
    fd = urllib2.urlopen(URL, postme)
    return fd


########NEW FILE########
__FILENAME__ = just_post_via_mechanize
import mechanize

# The URL to this service
URL = 'http://www.cepstral.com/cgi-bin/demos/weather'


def main():
    # Create a Browser instance
    b = mechanize.Browser()
    # Load the page
    b.open(URL)
    # Select the form
    b.select_form(nr=0)
    # Fill out the form
    b['city'] = 'San Francisco'
    b['state'] = 'CA'
    # Verify that the voice hidden field has a value in it
    assert b['voice']
    # Submit!
    return b.submit()

########NEW FILE########
__FILENAME__ = play_wav
import just_post
import urlparse
import html5lib
import html5lib.treebuilders
import os

def main():
    fd = just_post.main()
    parser = html5lib.HTMLParser(tree=html5lib.treebuilders.getTreeBuilder('beautifulsoup'))
    parsed = parser.parse(fd)
    relative_wav_link = parsed.find('a', href=lambda s: 'wav' in s)['href']
    absolute_wav_link = urlparse.urljoin(just_post.URL, relative_wav_link)
    os.system('mplayer ' + absolute_wav_link) # FIXME: totally unsafe

if __name__ == '__main__':
    main()


########NEW FILE########
__FILENAME__ = trivial
import urllib2
fd = urllib2.urlopen('http://mehfilindian.com/LunchMenuTakeOut.htm')
print 'eggplant' in fd.read()

########NEW FILE########
__FILENAME__ = socks_monkey
## This module monkey patches the socket module
## (on which just about everything relies) for use
## with Tor.

TOR_IP='127.0.0.1'
TOR_PORT=9050

import socks
import socket

def is_tor_enabled():
        if not hasattr(socks, 'torified'):
                return 0
        return socket.torified

def enable_tor():
        socket.torified = 1
        socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, TOR_IP, TOR_PORT)
        socket._real_socket = socket.socket
        socket.socket = socks.socksocket
        assert is_tor_enabled()

def disable_tor():
        socket.torified = 0
        if hasattr(socket, '_real_socket'):
                socket.socket = socket._real_socket
        assert not is_tor_enabled()



# Set default proxy to Tor
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, 'localhost', 9050)


########NEW FILE########
__FILENAME__ = hashcash
import mechanize
import md5
import datetime
import html5lib
from html5lib import treebuilders
import spidermonkey

def make_soup(s):
    '''Is it soup yet?'''
    parser = html5lib.HTMLParser(tree = treebuilders.getTreeBuilder("beautifulsoup"))
    soup = parser.parse(s)
    return soup

def find_appropriate_script_object(soup):
    # find script source that contains 'function wphc'
    desired_script_source = None
    for tag in soup('script'):
        if tag.contents and 'function wphc' in tag.contents[0]:
            assert desired_script_source is None # Assert there aren't two matches; what would we do then?
            desired_script_source = tag.contents[0]
    assert desired_script_source # assert we actually found it
    return desired_script_source

def extract_wphc_function(desired_script_source):
    # Just select function we want...
    lines = desired_script_source.split('\n')
    function_starts_at = lines.index('function wphc(){')
    lines_with_starting_junk_snipped_off = lines[function_starts_at:]
    function_ends_at = lines.index('}')

    # just function
    just_function_lines = lines_with_starting_junk_snipped_off[:function_ends_at + 1]
    return just_function_lines

def execute_function(just_function_lines):
    # Snip the top to make it an anonymous function
    anonymized_function_lines = ['function () {'] + just_function_lines[1:]
    
    # pass it into SpiderMonkey...
    rt = spidermonkey.Runtime()
    cx = rt.new_context()
    func = cx.execute('\n'.join(anonymized_function_lines))
    value = func()
    return value

def post_comment(url, name, email_address, website, message):
    b = mechanize.Browser()
    b.set_handle_robots(False)
    page_contents = b.open(url).read()
    assert 'Hashcash' in page_contents # The point of this function is to break Hash Cash; ensure it is in use

    soup = make_soup(page_contents)

    # Find the right <script> tag
    desired_script_source = find_appropriate_script_object(soup)

    # Find the actual function we want
    just_function_lines = extract_wphc_function(desired_script_source)

    # Execute it in SpiderMonkey
    value = execute_function(just_function_lines)

    b.select_form(nr=0)
    b['email'] = email_address
    b['author'] = name
    b['comment'] = message
    b['url'] = website

    # mechanize sets the hidden field to be read-only; this disables read-only on all elements in the form
    b.set_all_readonly(False)

    # Set the form field...
    b['wphc_value'] = str(value)

    # and we're ready to present our work to WordPress.
    b.submit()

    # Now go in a web browser and check that the comment actually stuck

def main():
    post_comment("http://scrape-pycon.asheesh.org/hashcash/?p=1", 'Asheesh Laroia', 'Albert.Einstein@mailinator.com', 'http://www.asheesh.org/',
        "Boy, I trust WP HashCash. Plus I will add some random junk: " + 
        md5.md5(datetime.datetime.now().isoformat()).hexdigest())

########NEW FILE########
__FILENAME__ = parsed_with_htmlparser
# imports
from HTMLParser import HTMLParser
import sys

# Define our class that processes the file
class MyHTMLParser(HTMLParser):
    document_title = ''
    in_title = False

    def handle_starttag(self, tag, attrs):
        print >> sys.stderr, "Encountered the beginning of a %s tag" % tag
        if tag == 'title':
            print >> sys.stderr, 'Because it was a title tag, change our state that we store further text.'
            self.in_title = True

    def handle_data(self, data):
        if self.in_title:
            self.document_title += data

    def handle_endtag(self, tag):
        print >> sys.stderr, "Encountered the end of a %s tag" % tag
        if tag == 'title':
            print >> sys.stderr, 'Because it was a title tag, change our state to stop caring.'
            self.in_title = False

# Actually use it
def main(filename):
    # Create an instance
    mine = MyHTMLParser()

    # Pass it data
    for line in open(filename):
        mine.feed(line)

    # Close the parser
    mine.close()

    # print the title we extracted
    print '...'
    print ''
    print 'In the end, TITLE value was:'
    print mine.document_title.strip()

if __name__ == '__main__':
    main(sys.argv[1])

########NEW FILE########
__FILENAME__ = parsed_with_minidom
# imports
import xml.dom.minidom
import sys

def main(filename):
    # Parse the file
    parsed = xml.dom.minidom.parse(open(filename))
    # Get title element
    title_element = parsed.getElementsByTagName('title')[0]
    # Print just the text underneath it
    print title_element.firstChild.wholeText

if __name__ == '__main__':
    main(filename=sys.argv[1])

########NEW FILE########
__FILENAME__ = google
import urllib2
import urllib
import BeautifulSoup

GOOGLE_BASE='http://google.com/search?q='

def search_for(s):
    fd = urllib2.urlopen(GOOGLE_BASE + urllib.quote(s))
    response = fd.read()
    soup = BeautifulSoup.BeautifulSoup(response)
    first_url = soup('cite')[0]
    url_text = ''.join(first_url(text=True))
    return url_text

if __name__ == '__main__':
    print search_for('asheesh')

########NEW FILE########
__FILENAME__ = google
# imports
import mechanize

# Create a Browser
b = mechanize.Browser()

# Disable loading robots.txt
b.set_handle_robots(False)

b.addheaders = [('User-agent',
                 'Mozilla/4.0 (compatible; MSIE 5.0; Windows 98;)')]

# Navigate
b.open('http://www.google.com/')

# Choose a form
b.select_form(nr=0)

# Fill it out
b['q'] = 'pycon'

# Stubmit
fd = b.submit()

# ... process the results

print fd.read()

########NEW FILE########
__FILENAME__ = yahoo
# imports
import mechanize

# Create a Browser
b = mechanize.Browser()

# Navigate
b.open('http://www.yahoo.com/')

# Choose a form
b.select_form(nr=0)

# Fill it out
b['p'] = 'pycon'

# Stubmit
fd = b.submit()

# ... process the results


########NEW FILE########
__FILENAME__ = yahoo_norobots
# imports
import mechanize

# Create a Browser
b = mechanize.Browser()

# Disable loading robots.txt
b.set_handle_robots(False)

# Navigate
b.open('http://www.yahoo.com/')

# Choose a form
b.select_form(nr=0)

# Fill it out
b['p'] = 'pycon'

# Stubmit
fd = b.submit()

# ... process the results


########NEW FILE########
__FILENAME__ = google_as_ie
import urllib2
import urllib
import BeautifulSoup

GOOGLE_BASE='http://google.com/search?q='

def search_for(s):
    request = urllib2.Request(GOOGLE_BASE + urllib.quote(s))
    request.add_header('User-Agent',
        'Mozilla/4.0 (compatible; MSIE 5.0; Windows 98;)')
    # More IE user-agents at http://www.useragentstring.com/pages/Internet%20Explorer/
    opener = urllib2.build_opener()
    response = opener.open(request).read()
    soup = BeautifulSoup.BeautifulSoup(response)
    first_url = soup('cite')[0]
    url_text = ''.join(first_url(text=True))
    return url_text

if __name__ == '__main__':
    print search_for('asheesh')

########NEW FILE########
__FILENAME__ = yahoo
import urllib2
import urllib
import BeautifulSoup

YAHOO_BASE='http://search.yahoo.com/search?p='

def search_for(s):
    fd = urllib2.urlopen(YAHOO_BASE + urllib.quote(s))
    response = fd.read()
    soup = BeautifulSoup.BeautifulSoup(response)
    first_url = soup(attrs={'class': 'url'})[0]
    url_text = ''.join(first_url(text=True))
    return url_text

if __name__ == '__main__':
    print search_for('asheesh')

########NEW FILE########
__FILENAME__ = beautifulsoup_parse
import BeautifulSoup
import urllib2

def make_tree():
    fd = urllib2.urlopen('http://mehfilindian.com/LunchMenuTakeOut.htm')
    soup = BeautifulSoup.BeautifulSoup(fd)
    return soup

########NEW FILE########
__FILENAME__ = beautifulsoup_search
import beautifulsoup_parse

def search():
    tree = beautifulsoup_parse.make_tree()
    # find all 'a' elements
    links = tree('a')
    # equivalently:
    assert links == tree.findAll('a')

    # Grab just the first
    assert links[0] == tree.a

    # Grab all the text under that tag
    print tree.a.findAll(text=True)

    # Find the link that points to menu.htm
    online_link = tree.find('a', {'href': lambda target: 'menu' in target})
    print online_link.findAll(text=True)

if __name__ == '__main__':
    search()

########NEW FILE########
__FILENAME__ = beautifulsoup_yfinance
import BeautifulSoup
import urllib2
import re

def get_last_trade(ticker):
    url = 'http://finance.yahoo.com/q?s=' + ticker
    fd = urllib2.urlopen(url)
    soup = BeautifulSoup.BeautifulSoup(fd)

    # The old way to do it
    nice_table = soup(id='table1')[0]
    first_row = nice_table('tr')[0]
    #print first_row
    first_col = first_row('td')[0]
    result = first_col.find(text=True)

    # a little smoother
    also = soup.find(id='table1').find('tr').find('td').find(text=True)
    assert also == result

    # Same smoothness, simpler API calls
    also = soup.find(id='table1').tr.td.find(text=True)
    assert also == result

    # What if the labels move around on the page?
    last_trade_text = soup.find(text='Last Trade:')
    my_tr = last_trade_text.parent
    also = my_tr.findNextSibling('td').find(text=True)
    assert also == result

    # but the IDs seem to encode some information...
    my_span = soup.find('span', id='yfs_l10_' + ticker.lower())
    also = my_span.find(text=True)
    assert also == result

    return result

print get_last_trade('AAPL')

########NEW FILE########
__FILENAME__ = html5lib_parse
# Built-in tree generator
import html5lib
import urllib2
def make_native_tree():
    fd = urllib2.urlopen('http://mehfilindian.com/LunchMenuTakeOut.htm')
    parser = html5lib.HTMLParser()
    document = parser.parse(f)
    return document

# If you want a specific tree format

# minidom
import html5lib
from html5lib import treebuilders
import urllib2
def make_dom():
    fd = urllib2.urlopen('http://mehfilindian.com/LunchMenuTakeOut.htm')
    parser = html5lib.HTMLParser(tree=treebuilders.getTreeBuilder("dom"))
    minidom_document = parser.parse(fd)
    return minidom_document

# BeautifulSoup
import html5lib
from html5lib import treebuilders
import urllib2

def make_soup():
    fd = urllib2.urlopen('http://mehfilindian.com/LunchMenuTakeOut.htm')
    parser = html5lib.HTMLParser(tree=treebuilders.getTreeBuilder("beautifulsoup"))
    minidom_document = parser.parse(fd)
    return minidom_document

# More info: http://code.google.com/p/html5lib/wiki/UserDocumentation
make_tree = make_dom

########NEW FILE########
__FILENAME__ = html5lib_search
# same as BeautifulSoup ;-)

########NEW FILE########
__FILENAME__ = lxml_parse
from lxml.html import parse
import urllib2

def make_tree():
    fd = urllib2.urlopen('http://mehfilindian.com/LunchMenuTakeOut.htm')
    doc = parse(fd).getroot()
    return doc

########NEW FILE########
__FILENAME__ = lxml_search_css
import lxml_parse

def search():
    tree = lxml_parse.make_tree()
    # find all 'a' elements
    links = tree.cssselect('a')
    # equivalently:
    assert links == tree.xpath('//a')

    # Grab just the first
    assert links[0] == tree.xpath('(//a)[1]')[0]
    # xpath uses 1-based indexing and seems to always return a list

    # Grab all the text under that tag
    print links[0].xpath('descendant::text()')

    # This is an lxml extension to XPath
    online_links = tree.xpath('//a[contains(@href, "menu.htm")]')
    print [k.xpath('descendant::text()') for k in online_links]
    # turns out there are two such links; I did not really notice that
    # when doing this with BeautifulSoup

if __name__ == '__main__':
    search()

########NEW FILE########
__FILENAME__ = verbose_get
import urllib2
h = urllib2.HTTPHandler(debuglevel=1)
opener = urllib2.build_opener(h)
request = urllib2.Request('http://mehfilindian.com/LunchMenuTakeOut.htm')
opener.open(request).read()

########NEW FILE########
__FILENAME__ = report2slides
#!/usr/bin/python
import sys
import re

nice_thing=r'''\maketitle
\AtBeginSection[]
{
   \begin{frame}
       \frametitle{Outline}
       \tableofcontents[currentsection]
   \end{frame}
}
'''

def line2title(line):
    if line.startswith('\\') and 'section' in line:
        leader , rest = line.split('{', 1)
        if '}' in rest:
            title, rest   = rest.rsplit('}', 1)
        else:
            title = rest
    else:
        title = None
    return title

in_frame = False
def make_frame(line):
    global in_frame
    # were we in a frame to begin with?
    out = ''
    if in_frame:
        out += '\end{frame}\n'
        in_frame = False
    out += line
    out += r'\begin{frame}' + '\n'
    out += r'\frametitle{' + line2title(line) + '}\n'
    in_frame = True
    return out

lines = sys.stdin.read().split('\n')
while len(lines):
    line = lines.pop(0)
    if line.startswith('\\') and 'section' in line:
        while not line.rstrip().endswith('}'):
            # extend line
            line += lines.pop(0)

    # line fixed; now real logic
    if line.startswith(r'\setlength'):
        pass
    # page size? drop that
    elif line.startswith(r'\geometry'):
        pass
    elif line.startswith(r'\begin{document}'):
        line = (r'% shallow toc' + '\n' + 
                r'\setcounter{tocdepth}{1}' + '\n' +
                line)
        print line.rstrip()
    elif line.startswith(r'\usepackage{babel}'):
        pass
    elif line.startswith(r'\documentclass'):
        print r'\documentclass{beamer}'
    elif line.startswith(r'\footnote'):
        pass # eat it
    elif line.startswith('}.)'):
        pass # eat it
    elif line2title(line):
        print make_frame(line)
    elif line.startswith(r'\end{document}'):
        if in_frame:
            line = r'\end{frame}' + '\n' + line
        print line
    elif line.startswith(r'\item'):
        if '<' in line:
            line = line.replace('<', r'$<$')
        #    line = line.replace('<', r'<')
        #if '>' in line:
        #    line = line.replace('>', r'>')
        line = r'\pause' + '\n' + line
        print line.rstrip()
    elif line.startswith(r'\maketitle'):
        line = nice_thing
        print line
    else:
        print line.rstrip()

########NEW FILE########
__FILENAME__ = test
#!/usr/bin/env python
import cgi
import sys

params = cgi.parse_qs(sys.stdin.read())
print 'Hello %s!'%(params['name'][0])

########NEW FILE########
