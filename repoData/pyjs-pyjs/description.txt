== Issues ==

IE is not fully supported since IE doesn't have (native) support for canvas.
The canvas support is mimiced with javascript. As a result, the canvas 
module is slow on IE.

== Issues ==

This example depends on javascript. The pyjamas desktop (pyjd) doesn't support
javascript and therfore will not run this example.


"Pyjamas Space Game" is Copyright 2009 Joe Rumsey (joe@rumsey.org)
Licensed under the Apache 2.0 License, see COPYING for details

Version 0.1

Main link: http://rumsey.org/space/Space.html

This is just a quickie project I wrote in about a day to test out
Pyjamas.  The test was a success, it's 300 lines of code for all the
basic Asteroids gameplay.  Who needs Flash any more, right?

To build it, you need these things installed:
 o Pyjamas
 o SCons
 o ImageMagick

If those requirements are met, then you need to first edit the
SConstruct file to point to the locations of Pyjamas and ImageMagick's
convert program.  Once you've done that, just run scons in this
directory and if all goes well, the output directory will contain the
final HTML+js+images+etc.  You can load it locally by opening
output/Space.html

I am building and testing on Mac OS 10.6.


== Issues ==

IE doesn't have (native) support for canvas, so it's slow on IE.

pyjd-hulahop doesn't support canvas images correctly, so it doesn't work.

== Issues==

The browser detect example (BrowserDetect.py) is here to show how the
overloading of class methods works. This is slightly different for pyjd 
compared to pyjs. For pyjd you should start BrowserDetectApp.py, otherwise
the import system of pyjd will not be invoked.

== Issues ==

pyjd is not supported (doesn't do javascript)
IE is not supported (processing.js is not meant for IE).
Chrome and Opera11 throw an error on curElement.getContext
(this is a bug in the alien processing.js)

Created by Charles Law.

This is an example of how to set and read cookies.  It includes
some features, specifically setting the path, that were broken
in previous versions of pyjs, but are fixed.


This is a port of Google's CSSMess example.

To build, first read the top-level README (run boostrap and buildout)

Then, run ./build.sh or:

    ../../bin/pyjsbuild CSSMess.py

and then open output/CSSMess.html in a web browser.


== Issues ==

Doesn't work with IE, since IE doesn't support children on a style element:
DOM.appendChild(DOM.createElement('style'), <something>) failes

All examples in the deprecated are (guess what?) deprecated. This means that
they might work but don't have to. They are also not tested for releases or 
whatsoever. Moreover, they might work for one browser and fail for another.

Updates/fixes are welcome and might change the status from deprecated to
maintained.

== Issues ==

Fails on pyjd-hulahop

Different behavior in 'Using drag feedback images':
FF3.6 - Canvas triangle becomes a browser default image on drop zone
Chrome - All drags become a browser default image until dropped
Opera11 - dragged elements shrink to fit around text on dragging

Using data transfer content types
Chrome - Text / HTML / URI only shows 'URL' content: http://pyjs-dev/examples/dnd/output/pyjamas.png


This example of the EmployeeAdmin is based on the wxPython version 
by Toby de Havilland <toby.de.havilland@puremvc.org>

For larger applications, it would be advisable to make directories 
with model/controller/view and components.

In order to run this example, You'll need to download PureMVC for Python. 
At the moment of this writing available at:
http://puremvc.org/pages/downloads/Python/PureMVC_Python.zip

To compile the application, the library path must include the puremvc 
files. E.g.:
 ../../bin/pyjsbuild --library_dir "`pwd`/PureMVC_Python_1_2/src" EmployeeAdmin




This is an example of the use of pyjamas.JSONTranslations, which 
is some sort of gettext implementation. The JSONTranslations 
class extends the NullTranslations from the python gettext module.


The following shell scripts are used:
update_po.sh : updates the translations files (*.po) in lang/
update_mo.sh : compiles the translations files in lang/
update_json.sh : transform the *.mo files to json files that
                 can be used by the JSONTranslations class

To add a translation, copy the Gettext_en_US.po and do the
translations for all msgids. Then run update_mo.sh and update_json.sh.
Finally add your language to the 'lang' list in Gettext.py.

The update_po.sh is needed when you added messages to Gettext.py.



/*
 * Copyright 2009 The Closure Compiler Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// Contents
//

The Closure Compiler performs checking, instrumentation, and
optimizations on JavaScript code. The purpose of this README is to
explain how to build and run the Closure Compiler.

The Closure Compiler requires Java 6 or higher.
http://www.java.com/


//
// Building The Closure Compiler
//

There are three ways to get a Closure Compiler executable.

1) Use one we built for you.

Pre-built Closure binaries can be found at
http://code.google.com/p/closure-compiler/downloads/list


2) Check out the source and build it with Apache Ant.

First, check out the full source tree of the Closure Compiler. There
are instructions on how to do this at the project site.
http://code.google.com/p/closure-compiler/source/checkout

Apache Ant is a cross-platform build tool.
http://ant.apache.org/

At the root of the source tree, there is an Ant file named
build.xml. To use it, navigate to the same directory and type the
command

ant jar

This will produce a jar file called "build/compiler.jar".


3) Check out the source and build it with Eclipse.

Eclipse is a cross-platform IDE.
http://www.eclipse.org/

Under Eclipse's File menu, click "New > Project ..." and create a
"Java Project."  You will see an options screen. Give the project a
name, select "Create project from existing source," and choose the
root of the checked-out source tree as the existing directory. Verify
that you are using JRE version 6 or higher.

Eclipse can use the build.xml file to discover rules. When you
navigate to the build.xml file, you will see all the build rules in
the "Outline" pane. Run the "jar" rule to build the compiler in
build/compiler.jar.


//
// Running The Closure Compiler
//

Once you have the jar binary, running the Closure Compiler is straightforward.

On the command line, type

java -jar compiler.jar

This starts the compiler in interactive mode. Type

var x = 17 + 25;

then hit "Enter", then hit "Ctrl-Z" (on Windows) or "Ctrl-D" (on Mac or Linux)
and "Enter" again. The Compiler will respond:

var x=42;

The Closure Compiler has many options for reading input from a file,
writing output to a file, checking your code, and running
optimizations. To learn more, type

java -jar compiler.jar --help

You can read more detailed documentation about the many flags at
http://code.google.com/closure/compiler/docs/gettingstarted_app.html


//
// Compiling Multiple Scripts
//

If you have multiple scripts, you should compile them all together with
one compile command.

java -jar compiler.jar --js=in1.js --js=in2.js ... --js_output_file=out.js

The Closure Compiler will concatenate the files in the order they're
passed at the command line.

If you need to compile many, many scripts together, you may start to
run into problems with managing dependencies between scripts. You
should check out the Closure Library. It contains functions for
enforcing dependencies between scripts, and a tool called calcdeps.py
that knows how to give scripts to the Closure Compiler in the right
order.

http://code.google.com/p/closure-library/

//
// Licensing
//

Unless otherwise stated, all source files are licensed under
the Apache License, Version 2.0.


-----
Code under:
src/com/google/javascript/rhino
test/com/google/javascript/rhino

URL: http://www.mozilla.org/rhino
Version:  1.5R3, with heavy modifications
License:  Netscape Public License and MPL / GPL dual license

Description: A partial copy of Mozilla Rhino. Mozilla Rhino is an
implementation of JavaScript for the JVM.  The JavaScript parser and
the parse tree data structures were extracted and modified
significantly for use by Google's JavaScript compiler.

Local Modifications: The packages have been renamespaced. All code not
relevant to parsing has been removed. A JsDoc parser and static typing
system have been added.


-----
Code in:
lib/rhino

Rhino
URL: http://www.mozilla.org/rhino
Version:  Trunk
License:  Netscape Public License and MPL / GPL dual license

Description: Mozilla Rhino is an implementation of JavaScript for the JVM.

Local Modifications: Minor changes to parsing JSDoc that usually get pushed
up-stream to Rhino trunk.


-----
Code in:
lib/args4j.jar

Args4j
URL: https://args4j.dev.java.net/
Version: 2.0.16
License: MIT

Description:
args4j is a small Java class library that makes it easy to parse command line
options/arguments in your CUI application.

Local Modifications: None.


-----
Code in:
lib/guava.jar

Guava Libraries
URL: http://code.google.com/p/guava-libraries/
Version:  15.0
License: Apache License 2.0

Description: Google's core Java libraries.

Local Modifications: None.


-----
Code in:
lib/jsr305.jar

Annotations for software defect detection
URL: http://code.google.com/p/jsr-305/
Version: svn revision 47
License: BSD License

Description: Annotations for software defect detection.

Local Modifications: None.


-----
Code in:
lib/jarjar.jar

Jar Jar Links
URL: http://jarjar.googlecode.com/
Version: 1.1
License: Apache License 2.0

Description:
A utility for repackaging Java libraries.

Local Modifications: None.


----
Code in:
lib/junit.jar

JUnit
URL:  http://sourceforge.net/projects/junit/
Version:  4.10
License:  Common Public License 1.0

Description: A framework for writing and running automated tests in Java.

Local Modifications: None.


---
Code in:
lib/protobuf-java.jar

Protocol Buffers
URL: http://code.google.com/p/protobuf/
Version: 2.4.1
License: New BSD License

Description: Supporting libraries for protocol buffers,
an encoding of structured data.

Local Modifications: None


---
Code in:
lib/ant.jar
lib/ant-launcher.jar

URL: http://ant.apache.org/bindownload.cgi
Version: 1.8.1
License: Apache License 2.0
Description:
  Ant is a Java based build tool. In theory it is kind of like "make"
  without make's wrinkles and with the full portability of pure java code.

Local Modifications: None


---
Code in:
lib/json.jar
URL: http://json.org/java/index.html
Version: JSON version 20090211
License: MIT license
Description:
JSON is a set of java files for use in transmitting data in JSON format.

Local Modifications: None

---
Code in:
tools/maven-ant-tasks-2.1.3.jar
URL: http://maven.apache.org
Version 2.1.3
License: Apache License 2.0
Description:
  Maven Ant tasks are used to manage dependencies and to install/deploy to
  maven repositories.

Local Modifications: None

This is a port of Google's Hello example.

To build, first read the top-level README (run boostrap and buildout)

Then, run ./build.sh or:

    ../../bin/pyjsbuild Hello.py

and then open output/Hello.html in a web browser.

InfoDirectory is turning into a quite sophisticated mini spreadsheet
tool, allowing the user to specify colours, sizes, data and cell formats.
There are two data formats: the more sophisticated one is "sparse" format
and the simpler one is a CSV-separated format comprising headings and then
rows.

Sparse Format
-------------

first word: "sparse".
all other lines must be of the format:
<command>: <x>,<y> <Data including spaces>

There are four commands:

data: x,y Something to put in a Cell

    whatever comes after the coordinates (minus leading and trailing spaces)
    is put into the cell, e.g.
        data 5,4 hello
        data 5,4 55.2

    the data can also be HTML, e.g.
        data 5,4 <i>italics</i>
        data 5,4 <pre>infowar<br />again<br/></pre> <p>my friend</p>

cellspan: x,y rowspan colspan

    the grid is implemented as an HTML table, so the rules for
    table layout follow exactly, explicitly and precisely the rules
    for HTML "rowspan" and "colspan" (including pushing other cells
    out of the way and messing up what you *think* the layout of the
    table actually is).

    if you do not want either the rowspan or colspan changed,
    put "-" as the option e.g. cellspan: 1,2 - 5 to change the
    colspan only.

align: x,y [top,middle,bottom,-] [left,center,right,-]

    specifies the vertical and horizontal cell alignment.
    if you do not want a particular alignment changed,
    put "-" as the option.

cellstyle: x,y attribute value

    this command sets CSS style attributes on a cell.  values
    used MUST be those that an HTML table data cell can support.
    for a full list, look up the relevant W3C standards.
    known values include "width", "height", "color", "background"
    for width, height, foreground and background colours, respectively.
    width and height support "%", "px", "em" etc. e.g
        cellstyle 1,2 width 20%
        cellstyle 1,2 height 30px

Example:

sparse
data: 0,2 hello cell 0,2
data: 1,2 there cell 1,2
data: 2,2 55.2 cell 2,2
data: 0,3 hello2 cell 0,3
data: 1,3 there2 cell 1,3
data: 0,4 hello3 cell 0,4
data: 1,4 there3 cell 1,4
data: 2,4 55.23 cell 2,4
cellspan: 1,2 2 2
data: 0,0 heading1 cell 0,0
data: 1,0 <i>italics</i> <b>bold</b> cell 1,0
data: 2,0 &nbsp;
data: 3,0 &nbsp;
cellspan: 0,1 1 4
data: 0,1 <b>see how comments could be done</b>
align: 0,1 - center
cellstyle: 0,0 color #ff00ff
align: 1,2 top right
cellstyle: 1,2 background #00FF00
cellstyle: 0,0 width 200px

Array Format
------------

array
something, number, number, number, number, something else
5,9,2, 30.5, 28, "friend"
"enemy", 5,9,2, 30.5, 28
"shoehorn", 2, 3, 1, 99, 12.2


This example is set up so that the JSONRPC python service is run
by default as a CGI Script.  There is an example python CGI script
server which is set up to allow access to the JSONService.py CGI
script, for this example.  Start it as:

    $ cd examples/jsonrpc/output
    $ python PythonCGIServer.py

If you would like to try this example with Apache2, simply point
the Apache2 server at the examples/ subdirectory and then ensure
that Python scripts are allowed to be executed (see Apache2 manuals
to enable).

If you would like the JSONService.py to be executed under mod_python,
move public/services/htaccess.mod_python to public/services/.htaccess
and rebuild (or copy it to output/) and then restart Apache2.

Thanks to Daniel Carvalho for working out how to run this example
with mod_python.

NOTE: JSONService.py as stand alone didn't work for me. I installed 
apache with php to do the work (on debian squeeze):
  - apt-get install libapache2-mod-php5
  - vi /etc/apache2/sites-enabled/000-default
    add:
        <Directory "<path-to>/pyjamas/examples/">
                Options Indexes MultiViews FollowSymLinks +ExecCGI
                AllowOverride None
                Order deny,allow
                Deny from all
                Allow from 127.0.0.0/255.0.0.0 ::1/128 <possible extra ranges>
                AddHandler cgi-script .py
        </Directory>
  - change the parameter to pyjd.setup (if you do use pyjd) to
    "http://127.0.0.1/examples/jsonrpc/public/JSONRPCExample.html"

== Issues ==

Nov 2010:
Affects IE/MSHTML
 - Text: 
   You cannot enter text if you browse through the images of Popup-Dialog 
   item first.
   If you go to the Frames item, Text works OK again.

April 2012:
Work around for the above issue - see the code for Popups.MyDialog

These are unit tests for the pyjamas libraries.  Compile them as usual
with ./build.sh:

    ../../bin/pyjsbuild LibTest.py

The tests can _also_ be executed using standard python:

    python LibTest.py

Priority should be given to getting the test correct using standard
python.  For example, at the time of writing, when the ability to run
LibTest.py with standard python was added, four basic tests failed:

    <b>String Test failed (testSplit) : </b>' this is  a rather long string  ' 
                                            != ' this is  a rather long string '
    <b>List Test failed (testSortCmp) : </b>assertion failed
    <b>Attribute Test failed (testSetAttr) : </b>2 != 1
    <b>Dict Test failed (testStringKeys) : </b>"'notthere'" != 
                                                'KeyError: notthere'

Yet - these tests are successful in pyjamas!


This is a demonstration or image maps in pyjamas.

To build, first read the top-level README (run boostrap and buildout)

Then, run ./build.sh or:

    ../../bin/pyjsbuild ImageMapDemo.py

and then open output/ImageMapDemo.html in a web browser.


== Issues ==

This example doesn't work with IE. The events are not catched.

A very brief walk through of how to get this running:

Install pimentech if required:

    * svn checkout http://svn.pimentech.org/pimentech/libcommonDjango
    * cd libcommonDjango
    * make install

Create the db (not required when using sqlite3):

    * mysql -u root
    * > CREATE DATABASE todo;
    * > grant all privilages to todo.* to 'todo'@'localhost'; (or possibly > grant all on todo.* to 'todo'@'localhost';)
    * > exit;

Create the tables:

    * cd djangotasks
    * python manage.py syncdb

Build the javascript:

    * vim media/build.sh
    * (edit this so that it points to the build.py of pyjamas)
    * media/build.sh

Run the server:

    * python manage.py runserver

Test it out:

    * In your browser, goto: http://127.0.0.1:8000/site_media/output/TodoApp.html

The WebPage application allows editing of basic web pages.
Its closest equivalent is "googlepages".  The application is -
surprise - pure javascript.  Therefore, once a page has been loaded
from the server via the django JSONRPC service, it need not ever
be loaded again (unless the user refreshes the whole site).

When editing pages, Links containing "#pagename" are converted into
pyjamas Hyperlink widgets.  Hyperlink widgets trigger onHistoryChanged.
As the "History" technique is used, browser history (back, forward)
is preserved.

A very brief walk through of how to get WebPage running:

Create the db:

    * mysql -u root
    * > CREATE DATABASE webpages;
    * > grant all privilages to webpages.* to 'webpages'@'localhost'; (or possibly > grant all on webpages.* to 'webpages'@'localhost';)
    * > exit;

Create the tables:

    * cd djangoweb
    * python manage.py syncdb

Add fckeditor

    * go find fckeditor on the internet
    * copy fckeditor (or symlink) to public/fckeditor

Build the javascript:

    * vim media/build.sh
    * (edit this so that it points to the build.py of pyjamas)
    * media/build.sh

Run the server:

    * python manage.py runserver

Test it out:

    * To enter the "admin" interface, goto:
      http://127.0.0.1:8000/site_media/output/WebPage.html?#admin

    * To "view" the site: In your browser, goto:
      http://127.0.0.1:8000/site_media/output/WebPage.html


Documentation is not necessarily fun to write, but it is very useful to have.
I have selected to use reStructuredText (sphinx) for my projects as it can be 
converted to many different formats and sphinx can read comments from python
source files.  I have tried (unsuccessfully) to deduce the syntax for the
pyjamas wiki.  What I have done is write a python program to write a sed script
that will substitute links.

Anyhow, the best way to view this is to just install sphinx and run build.sh.
Another method is to just read the index.rst file itself.

This example is set up so that the JSONRPC python services may be run as a CGI
Script and a Flask application.  There is an example python CGI script server 
which is set up to allow access to the JSONService.py CGI script, 
for this example.  Start it as:

    $ cd examples/jsonrpc/output
    $ python PythonCGIServer.py

For the Flask application, please look in the doc directory.  The reason
is we will be using the flask development server to serve as a cross origin
server in these examples (and the details are a bit too much to document
in two or more places).  Even though you may have the same webserver serve
both the Flask and pyjs component, this example illustrates that when using
the jsonrpc provided with pyjs (via XMLHttpRequest), the cross origin 
functionality needs to be implemented in the server code and not pyjs code.

If you would like to try this example with Apache2, simply point
the Apache2 server at the examples/ subdirectory and then ensure
that Python scripts are allowed to be executed (see Apache2 manuals
to enable).

If you would like the JSONService.py to be executed under mod_python,
move public/services/htaccess.mod_python to public/services/.htaccess
and rebuild (or copy it to output/) and then restart Apache2.

Thanks to Daniel Carvalho for working out how to run this example
with mod_python.

Please start with the documentation in the doc directory.
If you have sphinx installed (if not, you can always run 'pip install sphinx'),
you can view an html version of the documentation using by running build.sh.
Otherwise, reST is not that different from a "plain" text file.



To use the example:


- download (http://flowplayer.org):
  * flowplayer.swf
  * flowplayer.controls.swf
  * flowplayer.content.swf
  Some might be combined in one download. Check the main page and also
  the flash plugin page

- mkdir swf

- Copy the downloaded files to swf/ (remove version number from file name)

- run 'build.sh'

- mkdir html/movies

- copy some flv-files to movies (search for 'sample flv files')

- edit fp.py and set correct names for the swf-files and configure the playlist

- run 'build.sh' again

- start the server with 'python server.py'

- open the url http://localhost:8080

This project combines concepts from django-nonrel, puremvc and google app engine.

This application is inspired by: http://trac.puremvc.org/Demo_Python_GoogleAppEngine_Blog  by Nathan Levesque.

Dependencies:
django-nonrel (http://www.allbuttonspressed.com/projects/django-nonrel)
puremvc (http://puremvc.org/)
google app engine sdk (http://code.google.com/appengine/downloads.html)

Assumptions:
Your pyjamas source code is at /home/<username>/code/pyjamas/
you have run python bootstrap.py from pyjamas root (/home/<username>/code/pyjamas/)
this project is located at /home/<username>/<project directory>/gae_django_nonrel_puremvc_blog/

follow the google app engine installation instructions 
follow the django-nonrel installation instructions:place django-nonrel directories into application root (gae_django_nonrel_puremvc_blog directory)
from application root/media run build.sh
from application root run python manage.py runserver
open browser and go to: http://localhost:8000/

This directory contains examples that need either a specific server 
or other additional software, or are more for explaining certain coding
of compiling features.

to get this example working, make sure you have webpy and pymongo installed.  pymongo must be running.

To start the backend, run:

    python server.py


===
NOTE. The example is cripple. It doesn't need pymongo (at least that's
not imported anywhere).

The server.py depends on web.py and listens on port 8080. It can serve the json files, but doesn't serve the (also needed) html and js files.


To use the example:

- run 'build.sh'

- download swfupload.swf (see http://swfupload.org)

- mkdir swf

- mkdir upload

- copy swfupload.swf to swf/

- start the server with 'python server.py'

- open the url http://localhost:8080

== Issues ==

Some of the raphael files/examples are broken. These are ignored in the
build tool's __main__.py

The events.py fails on IE, since the event argument to onCanvasMousemove
etc. appears to be undefined.

These are a set of examples of pyjamas. Many are direct ports of GWT examples.

To get started, cd into helloworld and look at the README there.

Then you can try out the other examples to get a feel for how pyjamas works.

To build all examples, either execute 'python .' or 'python examples' from
the pyjamas root. To build a specific example, execute 'python dirname' 
(or 'python example/dirname' from the pyjamas root).

If you've got a python version older than 2.6, you'll have to add 
'/__main__.py' to the command (e.g. 'python ./__main__.py')

The examples in this directory should be runnable right away (after 
compiling of course) from an apache server (some need some apache 
settings/configuration).

In the misc directory you'll find examples that need additional steps 
(e.g. setting up a server) or are more for displaying certain 
coding/compiling features than showing some ui related features.

In the deprecated directory contains examples that are not maintained
(anymore).

This is the source code to the Pyjamas showcase.

Compile as follows:

    python compile.py

If you have any problems or questions, you can either post to the pyjamas
mailing list, or contact me directly at ewestra [at] gmail [dot] com.

Feel free to borrow any code you wish from the showcase, for any purpose you
like.  I hope you find it helpful.

If you find bugs, etc, please let me know.

This is a generalised Wiki-like Slideshow application.

The slide names and headings go in public/slides.txt - the file must
be of the format
    name: heading
    name1: heading1

The name is taken as the name of the file containing the slide content.
name can contain spaces - they will be replaced with underscores.
The name will also be lowercased, and ".txt" is automatically appended.
For example, "What is it" is converted to "what_is_it.txt".

Rules for formatting of slide content are as follows:

    1) Spaces are stripped off the front of all content
    2) Large headings begin with '= ' and end with ' =' for example:
           = Introduction =
       is converted to
           <h1 class='slide_heading1'> Introduction </h1>
    3) Medium headings begin with '== ' and end with ' ==' for example:
           == Introduction ==
       is converted to
           <h2 class='slide_heading2'> Introduction </h2>
    4) Unordered Lists begin with '* ' for example:
           * Hello
           * Goodbye
       is converted to
           <ul>
           <li /> Hello
           <li /> Goodbye
           </ul>
    5) Secondary unordered lists begin with '** '
    6) Blank lines result in a blank line
    7) Text on its own is wrapped in a paragraph block
    8) Code begins with {{ and ends with }} - place these on their own lines
           {{
             hello
           }}
       is converted to
           <pre>
             hello
           </pre>


ok i've created the beginnings of a uitest.

* run with pyjd to 'create' the tests (once):
   python uitest.py public

* do a git diff to make sure that test output already committed
  hasn't changed (unless it was a bug!)

* do git add public/*.txt

* commit

to run the test to confirm, just do python uitest.py, or build them
with pyjs (build.sh)


This is a demo of an asynchronous, non-Flash upload widget with progress reporting. Tested with FF >=4 and Chromium so far. Makes no sense with pyjd.

To build, first read the top-level README (run boostrap and buildout)

Then, run ./build.sh or:

    ../../bin/pyjsbuild Upload.py

If using Apache or similar, make a symlink so output/Upload.html is hosted by a 
webserver and then open with a web browser.

For this to work properly, you will need a receiving service; an example wsgi 
script is provided in public/services but it is absolutely minimal and requires 
mod_wsgi or equivalent. If you use mod_wsgi, you can configure the service with
a one-liner in wsgi.conf, ala:

        WSGIScriptAlias /pyjamas_upload_demo /usr/share/pyjamas/examples/uploader/public/services/upload.wsgi

To build, run ./build.sh or:

    ../../builder/build.py Widgets.py

and then open output/Widgets.html in a web browser.

The Analog Clock PNG comes from the Superkaramba KClock theme, by linuxbob,
and is GPL'd.  http://kde-look.org/content/show.php/KClock?content=66205

... so that makes this example licensed under the GPL.


python main.py lib2to3/compiler/parse_tables.py
python astgen.py lib2to3/compiler/ast.py

python test_parse.py *.py */*.py /usr/lib/python2.5/*.py etc. etc.

This code is adapted from 'lib2to3/pgen2' in Python-3.1.

pgen is modified to spit out parse tables for JS that are usable by our
implementation of the parser engine.

astgen.py is from Python-2.6.2, it's part of a now-defunct-as-of-3k compiler
module implemented in Python. We use astgen to generate a higher-level ast
description from the low-level concrete parse tree that that parser.js
generates. It's modified to generate js of course.

1) Type in python into the left text input box.
   e.g. def fred(): return "hello"

2) Type in the name of the module in the "Name" box.

3) hit "compile".

your python will be converted to javascript and displayed on the right.

Contributed by Jeremy <finder83@gmail.com>


replacer.py
-----------

The ui classes have been restructured so that ui.py is not one whopping
great file.  javascript cache output is therefore dramatically reduced.

This tool takes classes, looks for "from pyjamas.ui import X,Y,Z"
and outputs:
from pyjamas.ui.X import X
from pyjamas.ui.Y import X
from pyjamas.ui.Z import Z

*except* for HasAlignment, HasVerticalAlignment and HasHorizontalAlignment



add_name_main.py
----------------

"python add_name_main.py AppName" will add a code fragment to the end
of AppName.py, to create an instance of the AppName() class and call
the onModuleLoad() function in it.

The old method - automatic calling of onModuleLoad() in a class which is
identical to the module name - is no longer supported.


Example usage.  very very simple.  yes, really, it's this simple.

#!/usr/bin/env python

from pyjs.jsonrpc.cgihandler import jsonremote, CGIJSONRPCService
svc = CGIJSONRPCService()

# add functions here

@jsonremote(svc)
def echo(msg):
    return msg

# run the cgi handler
if __name__ == '__main__':
    svc()


These classes are intended for use server-side.

e.g. in a django view.py :

from pyjs.jsonrpc.django import JSONService, jsonremote

jsonservice = JSONRPCService()

@jsonremote(jsonservice)
def test(request, echo_param):
     return "echoing the param back: %s" % echo_param


Michele Comitini michele.comitini@gmail.com via pyjs.org to pyjamasdev
    
show details 3:09 PM (1 hour ago)
    
Hi Luke,


I use web2py as JSONRPC server.  No need to do anything: it works out
of the box.
Just add @service.jsonrpc annotation.

@service.jsonrpc
def my_service(a,b,c):
  .
  .
  .
  return dict( . . . )

More at http://web2py.com/book/default/chapter/09#JSONRPC-and-Pyjamas


Combining PyJS and Python-Spidermonkey 
--------------------------------------

pyjs.py is a stand-alone python-to-javascript.  Python-Spidermonkey
provides python bindings to the Netscape / Mozilla spidermonkey javascript
engine.  The combination of the two results in python being compiled
to javascript, and then executed.

pysmrun.py demonstrates how this can be achieved.  It takes as input
as its first argument a filename to be compiled to javascript and
handed to the spidermonkey execution library.

Dependencies
------------

You will require Python-Spidermonkey from this locations:

    http://pypi.python.org/pypi/python-spidermonkey

Follow the build instructions.

Testing
-------

very simple!

echo print "hello" > test.py
./pysmrun.py ./test.py

What's Going On?
----------------

pysmrun.py uses pyjs.py and simply adds pysm as yet another "platform".
Presently, the only function override that's supported is pyjslib.printFunc,
which can be found in pyjamas/library/platform/pyjslibpysm.py and this
simple example is sufficient to demonstrate the principle.

In the pysm-platform-specific version of printFunc, a global routine
named "pysm_print_fn" is called.  This is pre-added, before execution,
to the javascript execution context, as a global, using
python-spidermonkey's "add_global()" function.



Combining PyJS and PyV8 to produce an Optimising Python Compiler
----------------------------------------------------------------

pyjs.py is a stand-alone python-to-javascript.  PyV8 provides python
bindings to the V8 Javascript Execution library, which provides fast
JIT-compiled x86 and ARM assembler of a javascript application.

Combining the two back-to-back would logically provide a way to
compile python scripts to x86 or ARM assembler, resulting in a competitor
to Psyco with the added advantage of supporting ARM CPUs.

pyv8run.py demonstrates how this can be achieved.  It takes as input
as its first argument a filename to be compiled to javascript and
handed to the PyV8 execution engine.  More advanced versions of this
principle would involve the creation of cached precompiled versions
of scripts and modules, both the javascript (.pyj) and the JIT
assembler (.py8).

Dependencies
------------

You will require both the v8 library and pyv8.  They can be obtained
from these locations:

    http://code.google.com/p/v8
    http://code.google.com/p/pyv8

Follow the build instructions for each - you will not, at this time,
be able to work on x86_64 platforms: you _will_ need to install 32-bit
versions of python and boost-python (and development headers).
As v8 is compiler technology, porting v8 to 64-bit is a major
undertaking that has not yet been attempted.

Testing
-------

very simple!

echo print "hello" > test.py
./pyv8run.py ./test.py

What's Going On?
----------------

pyv8run.py uses pyjs.py and simply adds PyV8 as yet another "platform".
Presently, the only function override that's supported is pyjslib.printFunc,
which can be found in pyjamas/library/platform/pyjslibPyV8.py and this
simple example is sufficient to demonstrate the principle.

In the PyV8-platform-specific version of printFunc, a global routine
named "print_fn" is called.  A class named Global which has a function
named "print_fn" is then passed in to the PyV8 execution engine.
The pyjs compiler knows that when a "print" statement is encountered,
it must output "pyjslib_printFunc([print's arguments]);".  In this
roundabout fashion, we eventually arrive back at "print", back inside
pyv8run's Global.print_fn().

In an ideal world, the PyV8 library would not be needed: a simple
command-line tool similar to smjs (from spidermonkey) would suffice.
However, the power of PyV8 comes from being able to access real
python c-based dynamic modules, as sloisel's early experimental
project (also named pyv8) showed.  In that work, which also used
python-boost, sloisel managed to import Tcl/Tk into a pyv8 application,
and had javascript firing up a python Tcl/Tk window, thanks to being
able to gain access to the methods of the standard python c-based tk
dynamic module.


.. image:: https://travis-ci.org/pyjs/pyjs.png
    :target: https://travis-ci.org/pyjs/pyjs
    :alt: Build Status

Pyjs
=======

Pyjs is a port of Google Web Toolkit to Python, and thus enables
the development of Rich Media AJAX applications in Python, with no
need for special browser plugins.  Pyjs contains a stand-alone
python-to-javascript compiler, and also a Widget Set API that looks
very similar to Desktop Widget Set APIs (such as PyQT4 or PyGTK2).

Pyjs also contains a Desktop Widget Set version, running as pure
python, with three useable Desktop ports available.  With web-engine
technology at it's core, HTML, CSS, plugins and other related features
work out-of-the-box.

For more information and documentation, see:

* http://pyjs.org
* https://github.com/pyjs/pyjs/wiki

For issue tracking:

* https://github.com/pyjs/pyjs/issues

Mailing list:

* https://groups.google.com/group/pyjs-users

IRC:

:Server: irc.freenode.net
:Channel: #pyjs

Pyjs-Compiler
===============

Pyjs-Compiler tools are a collection of tools that related to
  * compiling python code to javascript
  * linking compiled javascript modules into complete application
  * to convert java to python, etc.

Pyjs-Compiler runs your python application in a Web Browser (as javascript).

Pyjs-Widgets
===============

Pyjs-Widgets are a collection of GUI widget libraris that can be run natively
as part of Pyjs-Native or compiled by Pyjs-Compiler to run in a browser.


Pyjs-Desktop
===============

Pyjs runs your python application in a Web Browser (as javascript).
Pyjs-Desktop runs exactly the same python application on the
Desktop (as pure python).  There are currently three engine
choices, with alternatives in development.

All ports of Pyjs-Desktop require a JSON library: simplejson is
recommended if the version of python is 2.5 or less.  Python 2.6
and above come with a json library installed by default.

1. XULRunner

   Install hulahop and python-xpcom.  Hulahop, from OLPC SugarLabs,
   is distributed with both Debian and Ubuntu; python-xpcom is part
   of XULRunner and is also distributed with both Debian and Ubuntu.
   Other users should investigate the installation instructions for
   python-xpcom and hulahop for the operating system of their choice
   on the appropriate web sites.

   Older versions of XULRunner must be used: versions 1.9.0 or 1.9.1 are
   known to be suitable, as is version 9.0.  Versions 10 and above are
   known to segfault.

2. GIWebKit (GObject Introspection)

   A 95% functional binding enabled via the dynamic GObject/Python bindings
   produced by https://wiki.gnome.org/GObjectIntrospection after scanning the
   annotated WebKit sources. This backend is missing a critical piece,
   window.addEventListener, from https://bugs.webkit.org/show_bug.cgi?id=77835
   but development is in progress to implement the missing binding via ctypes
   instead, due to a lack of interest by WebKit.

   This is intended to supercede XULRunner as the default on Linux once ready.

   GIWebKit must be explicitly enabled.  create a $HOME/.pyjd/pyjdrc file
   containing the following two lines:

   [gui]
   engine=giwebkit

3. MSHTML

   For Windows users, all that's required, other than installing python
   and Internet Explorer, is one further tiny package: Win32 "comtypes".

   Win32 "comtypes" can be downloaded here:
   * http://sourceforge.net/projects/comtypes/

   Unlike the other ports, which can comprise a whopping great bundle
   of anything up to 30mb in size, the MSHTML port literally requires
   nothing more than comtypes, thanks to the far-sighted design of the
   MSHTML Trident Engine and its extensive COM interface.


Installation Dependencies
=========================

1. python
2. virtualenv - a python toolset that allows multiple python sandox installations
3. pip - an alternative to the standard python installation tools

Installation
============

1. Download and unzip/untar the pyjs.tar.gz file

2. Change into the pyjs root directory
    cd <pyjsroot>

3. Optional step to create your own virtual python sandbox for development purposes
   virtualenv mypython
This will create a mypython directory and install sandboxed virtual python installation at
   <pyjsroot>/mypython

4. Install Pyjs-Tools, Pyjs-Pyjamas and all dependencies
       <pyjsroot>/mypython/bin/pip install <pyjsroot>
   OR the following if you want to develop and modify Pyjs-Compiler or Pyjs-Widgets
   themselves
       <pyjsroot>/mypython/bin/pip install -e <pyjsroot>


You are now ready to use Pyjs. Scripts for compiling python code to Javascript
as well as compiling applications will be installed into the mypython sandbox
    <pyjsroot>/mypython/bin/pyjscompile
    <pyjsroot>/mypython/bin/pyjsbuild
    <pyjsroot>/mypython/bin/pyjampiler




