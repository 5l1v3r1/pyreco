Experimental Fortran-to-OpenCL translator
-----------------------------------------

This is a highly experimental Fortran-to-OpenCL translator. Its purpose is to
translate computational kernels into OpenCL-like C. It doesn't
auto-parallelize. My purpose in writing this was to convert a few
special-function evaluators.

The best it can hope for at the moment is to automate most of the process so
that you'll only have to fix up a few things manually afterwards. It further
only deals with the subset of Fortran 77 that I needed. Quite a number of
things are unimplemented.  Patches are welcome.

Andreas Kloeckner <inform@tiker.net>

Dependencies:

- cnd
  http://github.com/inducer/cnd

- cgen
  http://github.com/inducer/cgen

- pymbolic
  http://github.com/inducer/pymbolic

- fparser
  http://code.google.com/p/f2py
  with fix from http://code.google.com/p/f2py/issues/detail?id=32

PyOpenCL lets you access GPUs and other massively parallel compute
devices from Python. It tries to offer computing goodness in the
spirit of its sister project `PyCUDA <http://mathema.tician.de/software/pycuda>`_:

* Object cleanup tied to lifetime of objects. This idiom, often
  called
  `RAII <http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization>`_
  in C++, makes it much easier to write correct, leak- and
  crash-free code.

* Completeness. PyOpenCL puts the full power of OpenCL's API at
  your disposal, if you wish.  Every obscure `get_info()` query and 
  all CL calls are accessible.

* Automatic Error Checking. All CL errors are automatically
  translated into Python exceptions.

* Speed. PyOpenCL's base layer is written in C++, so all the niceties
  above are virtually free.

* Helpful and complete `Documentation <http://documen.tician.de/pyopencl>`_
  as well as a `Wiki <http://wiki.tiker.net/PyOpenCL>`_.

* Liberal license. PyOpenCL is open-source under the 
  `MIT license <http://en.wikipedia.org/wiki/MIT_License>`_
  and free for commercial, academic, and private use.

* Broad support. PyOpenCL was tested and works with Apple's, AMD's, and Nvidia's 
  CL implementations.

To use PyOpenCL, you just need `numpy <http://numpy.org>`_ and an OpenCL
implementation.
(See this `howto <http://wiki.tiker.net/OpenCLHowTo>`_ for how to get one.)

Places on the web related to PyOpenCL:

* `Python package index <http://pypi.python.org/pypi/pyopencl>`_ (download releases)

  .. image:: https://badge.fury.io/py/pyopencl.png
      :target: http://pypi.python.org/pypi/pyopencl
* `C. Gohlke's Windows binaries <http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyopencl>`_ (download Windows binaries)
* `Github <http://github.com/pyopencl/pyopencl>`_ (get latest source code, file bugs)
* `Documentation <http://documen.tician.de/pyopencl>`_ (read how things work)
* `Wiki <http://wiki.tiker.net/PyOpenCL>`_ (read installation tips, get examples, read FAQ)

Hi, welcome.

This Python package uses aksetup for installation, which means that
installation should be easy and quick.

If you don't want to continue reading, just try the regular

  ./configure.py --help
  ./configure.py --some-options
  make
  sudo make install

That should do the trick. (By the way: If a config option says "several ok",
then you may specify several values, separated by commas.)

aksetup also supports regular distutils installation, without using 
configure:

  python setup.py build
  sudo python setup.py install

In this case, configuration is obtained from files in this order:

/etc/aksetup-defaults.py
$HOME/.aksetup-defaults.py
$PACKAGEDIR/siteconf.py

Once you've run configure, you can copy options from your siteconf.py file to
one of these files, and you won't ever have to configure them again manually.
In fact, you may pass the options "--update-user" and "--update-global" to
configure, and it will automatically update these files for you.

This is particularly handy if you want to perform an unattended or automatic
installation via easy_install.

