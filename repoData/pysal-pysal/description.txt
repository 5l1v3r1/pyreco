Pysal.Contrib.db
================

This module enables simplified connection and query on spatial databases. 
It enables developers to return the query results in a 
Pysal-digestible format such as geojson or Well Known Text (WKT).
It explicitly supports the following spatial databases:

 * postgis (October, 2012)

Caveat: This is experimental, use with Caution!

Depends
=======

 * psycopg2
 * pysal
 * osgeo
 * django.contrib.gis
 * any of the supported databases and associated CRUD privileges 

Suggests
========

 * PL/PYTHON
 * Shapely
 * sqlalchemy

Usage
=====

The first function PySAL supports is dumping data from a PostGIS table into
shapefile format. We'll access the db and dump data using
the ogr module. 

The secondary utility to be developed is a cursor manager. Developers may use this cursor to write
their own database functions for their particular spatial analysis
applications.

For instance::
 
 >>> import psycopg2 as pg
 >>> conn = pg.connect("dbname=pysaldb user=stephens")
 >>> cur = conn.cursor()
 >>> cur.execute(<your SQL>)


Installation
============

TBD

Configuration
=============

If you have PostGres environment variables set in your userspace, you can
instruct Pysal to use them rather than passing in database credentials each
time. Look at the __init__.py for more information.

I'm leaving the details of setting up a PostGIS database to the user. 
I developed this module on Ubuntu 12.04. I used the psql console to create the
spatial indices for the pysal example data, and used the SPIT plugin in QGIS
to upload the pysal example data into the PostGIS db. There is a bug for only
some of the example data using SPIT to upload. To remedy it, use the ftools
plugin to convert multipart polygons to single parts. Vector -> Geometry
tools -> multi...


Notes
-----

When choosing between psycopg2 and sqlalchemy, sqlalchemy is db
agnostic, meaning your code will work with any db. Also, 
sqlalchemy ships with Enthought Python so the dependencies are handled by
Pysal's new (as of 1.5) dependency policy.

However you connect and query the db, return results from
postgis as geojson or wkt so python/pysal can deal with them directly.

Or, as an alternative, SQLalchemy offers the ORM path, which is more
abstract and maps database objects to python constructs.

What I want to write here is basically a cursor object manager that other
functions or classes in pysal can use to query a database object. For example,
in the weights class, an alternative distance-based calculator function can post
a hard-coded query into a db using a cursor enabled by this module. This does
not necessarily have to be a complicated module: accept a database name, a user
name, a password, and a table; receive a cursor for that table. Not even sure if
this module is necessary? Perhaps just so we do not repeat ourselves in the
potentially many instances of using postgis functionality. Be sure to check out
pandas.io for tips.



Dataset Notes
-------------
As noted in the README, I used the psql console, pgAdmin3 and QGIS to set up
the data. I was able to create a spatial index on almost all of the example data
sets except Chicago77, which the console insisted did not exist, though it
plainly appeared in pgAdmin3.

From IRC with strk:
11:32 peas am I right in thinking that the ability to easily create a topo
representation of a postgis table is not yet available?
looks like in future opportunities
peas: the support was improved since the Paris presentation
strk
the toTopoGeom (maybe presented as a funding opportunity in those slides) it
is now available
strk
should make it pretty simple to build the topology
11:37 peas
strk: i'll check it out, thanks again
strk
my blog has some recipes too


TODO
====

I did not set the SRID when I imported the pysal example data into the
postgis database. That may have to be remedied
before making any of that data public, if it comes to that. 

Update: I did figure out how to set the SRID on import.

Pl/Python
---------

An alternative approach.

Installation
------------
sudo apt-get install postgresql-plpython-9.1
createlang plpythonu <dbname> (in this case, pysaldb)


:mod:`pysal.contrib` -- Contributed Modules 
===========================================

**Intro**

The PySAL Contrib library contains user contributions that enhance PySAL, but
are not fit for inclusion in the general library. The primary reason a
contribution would not be allowed in the general library is external
dependencies. PySAL has a strict no dependency policy (aside from Numpy/Scipy).
This helps ensure the library is easy to install and maintain.

However, this policy often limits our ability to make use of existing code or
exploit performance enhancements from C-extensions. This contrib module is
designed to alleviate this problem. There are no restrictions on external
dependencies in contrib. 

**Ground Rules**

 1. Contribs must not be used within the general library.
 2. *Explicit imports*: each contrib must be imported manually.
 3. *Documentation*: each contrib must be documented, dependencies especially.

**Contribs**

Currently the following contribs are available:

 1. World To View Transform -- A class for modeling viewing windows, used by Weights Viewer.

    - .. versionadded:: 1.3
    - Path: pysal.contrib.weights_viewer.transforms
    - Requires: None

 2. Weights Viewer -- A Graphical tool for examining spatial weights.

    - .. versionadded:: 1.3
    - Path: pysal.contrib.weights_viewer.weights_viewer
    - Requires: wxPython

 3. Shapely Extension -- Exposes shapely methods as standalone functions

    - .. versionadded:: 1.3
    - Path: pysal.contrib.shapely_ext
    - Requires: shapely

 4. Shared Perimeter Weights -- calculate shared perimeters weights.

    - .. versionadded:: 1.3
    - Path: pysal.contrib.shared_perimeter_weights
    - Requires: shapely




Documentation for all example data sets for PySAL can be found at

http://pysal.org/users/tutorials/examples.html

If you obtained this example data by downloading it as a separate zip file, it should be unzipped in the pysal directory, so that the path to the data herein would be like pysal/examples/rook31.dbf, for example. 

# Network Module

This document will serve as the design guideline for the implementation of the
network module targeted for PySAL 1.~~7~~8 release ~~(January 31, 2014)~~ (July 31, 2014).

## Origins

The network module will implement the feature set from [GeoDaNet][GeoDaNet]

## Structure

### Analytics (s)

PySAL network will include the following spatial analytical methods

 - Nearest Neighbor Distance Distributions
 - Global Network Autocorrelation
 - Global K-Functions
 - Local Indicators of Network-Constrained Clusters (LINCS)
 - Local K-Functions
 - Network Kernels
 - Accessibility Indices

### Utility (j)

 - ~~Network Edge Segmentation~~
 - ~~Assignment of Counts/Rates to segments, nodes, edges~~
 - ~~Network Edge Length~~
 - ~~Snapping off-network objects to network~~ (Only internal observations)
 - ~~Single shortest path (Dijkstra's) (One node and all other nodes)~~
 - ~~Shortest Path (Path between two nodes)~~
 - ~~Network Connectivity~~
 - Extended shortest path
 - Network Voronoi Diagrams ?
 - Simulated points on a network
     - ~~Uniform~~
     - Nonuniform
 - ~~Threshold distance~~
 - Network Center
 - Intersection with buffering (s)
 - Node ~~insertion~~ / deletion

### Data Structures (j)

 - ~~Winged Edge Data Structure~~  This could really use a major alteration: insertion of filaments performs a local 'reprojection' to polar coordinates cenetered on the node the filament is added to.  This makes the identification of the pointers possible.  We do NOT use this method when deriving the initial WED and instead store double edges.  As far as I can tell, Okabe stores single edges and the way to do this is to utilize the same logic for determining CC and CW most edges.  Without considering computational performance, this should be a major reduction in code complexity.  I would suggest that this will require a fair amount of coding and debugging time, but can, potentially, be pushed until later in the development cycles assuming that analytics never assume double edges.
 - ~~Extraction of WED from a planar polyine shapefile~~
 - ~~Spatial Weights for Networks~~
     - Link Contiguity
         - ~~First Order~~
     - Distance Based
         - ~~KNN~~
         - ~~Threshold~~   
 - Handle direction

### FileIO

#### Input
 - ~~reading polyline shapefiles~~  Assumes that the shapefiles are topologically correct and planar
 - ~~test for planarity~~
 - add test for planarity to reader
 - point shapefiles
 - polygon files
 - wed
 - dot
 - (geo)json
 - binary

#### Output
 - wed
 - dot
 - shapefiles
 	- polyline
	- points
	- polygons
 - (geo)json
 - binary

### Module Listing

List key modules here and their purposes

 - `shp2graph.py` ?
 - `wed.py` core winged edge data structure
 - `util.py` utility functions

### Notebooks

List notebooks and their purpose

## Development Plans

Prioritize components for 1.8 development

## Issues

- holes in the wed


[GeoDaNet]: https://geodacenter.asu.edu/drupal_files/Geodanet_Manual_03_2012.pdf

Python Spatial Analysis Library
==============================

What is PySAL
--------------
[![Build
Status](https://travis-ci.org/pysal/pysal.png)](https://travis-ci.org/pysal/pysal)

PySAL is an open source cross-platform library of spatial analysis functions
written in Python. It is intended to support the development of high level
applications for spatial analysis.

It is important to underscore what PySAL is, and is not, designed to do. First
and foremost, PySAL is a library in the fullest sense of the word. Developers
looking for a suite of spatial analytical methods that they can incorporate
into application development should feel at home using PySAL. Spatial analysts
who may be carrying out research projects requiring customized scripting,
extensive simulation analysis, or those seeking to advance the state of the art
in spatial analysis should also find PySAL to be a useful foundation for their
work.

End users looking for a user friendly graphical user interface for spatial
analysis should not turn to PySAL directly. Instead, we would direct them to
projects like STARS and the GeoDaX suite of software products which wrap PySAL
functionality in GUIs. At the same time, we expect that with developments such
as the Python based plug-in architectures for QGIS, GRASS, and the toolbox
extensions for ArcGIS, that end user access to PySAL functionality will be
widening in the near future.

PySAL package structure
-----------------------

Currently PySAL consists of the following files and directories:

  LICENSE.txt
    PySAL license.

  INSTALL.txt
    PySAL prerequisites, installation, testing, and troubleshooting.

  THANKS.txt
    PySAL developers and contributors. 

  README.txt
    PySAL structure (this document).

  setup.py
    Script for building and installing PySAL.

  MANIFEST.in
    Additions to distutils-generated PySAL tar-balls.

  CHANGELOG.txt
    Changes since the last release

  pysal/
    Contains PySAL __init__.py and the directories of PySAL modules.

  doc/
    Contains PySAL documentation using the Sphinx framework.

PySAL modules
-------------

* pysal.cg — Computational Geometry
* pysal.contrib - Contributed modules
* pysal.core — Core Data Structures and IO
* pysal.esda — Exploratory Spatial Data Analysis
* pysal.examples — Data Sets
* pysal.inequality — Spatial Inequality Analysis
* pysal.region — Spatially constrained clustering
* pysal.spatial_dynamics — Spatial Dynamics
* pysal.spreg — Regression and diagnostics
* pysal.weights — Spatial Weights

Website
-------
All things PySAL can be found here
    http://pysal.org/

Mailing Lists
-------------
Please see the developer list here
    http://groups.google.com/group/pysal-dev

Help for users is here
    http://groups.google.com/group/openspace-list

Bug reports
-----------
To search for or report bugs, please see
    http://github.com/pysal/pysal/issues

License information
-------------------
See the file "LICENSE.txt" for information on the history of this
software, terms & conditions for usage, and a DISCLAIMER OF ALL
WARRANTIES.

=================================================
Python Spatial Analysis Library
=================================================

.. Contents::

What is PySAL
--------------

PySAL is an open source cross-platform library of spatial analysis functions
written in Python. It is intended to support the development of high level
applications for spatial analysis.

It is important to underscore what PySAL is, and is not, designed to do. First
and foremost, PySAL is a library in the fullest sense of the word. Developers
looking for a suite of spatial analytical methods that they can incorporate
into application development should feel at home using PySAL. Spatial analysts
who may be carrying out research projects requiring customized scripting,
extensive simulation analysis, or those seeking to advance the state of the art
in spatial analysis should also find PySAL to be a useful foundation for their
work.

End users looking for a user friendly graphical user interface for spatial
analysis should not turn to PySAL directly. Instead, we would direct them to
projects like STARS and the GeoDaX suite of software products which wrap PySAL
functionality in GUIs. At the same time, we expect that with developments such
as the Python based plug-in architectures for QGIS, GRASS, and the toolbox
extensions for ArcGIS, that end user access to PySAL functionality will be
widening in the near future.

PySAL package structure
-----------------------

Currently PySAL consists of the following files and directories:

  LICENSE.txt
    PySAL license.

  INSTALL.txt
    PySAL prerequisites, installation, testing, and troubleshooting.

  THANKS.txt
    PySAL developers and contributors. Please keep it up to date!!

  README.txt
    PySAL structure (this document).

  setup.py
    Script for building and installing PySAL.

  MANIFEST.in
    Additions to distutils-generated PySAL tar-balls.

  CHANGELOG.txt
    Changes since the last release

  pysal/
    Contains PySAL __init__.py and the directories of PySAL modules.

  doc/
    Contains PySAL documentation using the Sphinx framework.

PySAL modules
+++++++++++++

    * pysal.cg — Computational Geometry
    * pysal.contrib - Contributed modules
    * pysal.core — Core Data Structures and IO
    * pysal.esda — Exploratory Spatial Data Analysis
    * pysal.examples — Data Sets
    * pysal.inequality — Spatial Inequality Analysis
    * pysal.region — Spatially constrained clustering
    * pysal.spatial_dynamics — Spatial Dynamics
    * pysal.spreg — Regression and diagnostics
    * pysal.weights — Spatial Weights

Website
-------
All things PySAL can be found here
    http://pysal.org/

Mailing Lists
-------------
Please see the developer's list here
    http://groups.google.com/group/pysal-dev

Help for users is here
    http://groups.google.com/group/openspace-list

Bug reports
-----------
To search for or report bugs, please see
    http://github.com/pysal/pysal/issues

License information
-------------------
See the file "LICENSE.txt" for information on the history of this
software, terms & conditions for usage, and a DISCLAIMER OF ALL
WARRANTIES.

