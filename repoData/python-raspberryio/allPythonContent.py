__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Raspberry IO documentation build configuration file, created by
# sphinx-quickstart on Thu Jun 20 12:52:21 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Raspberry IO'
copyright = u'2013, Python Software Foundation'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'RaspberryIOdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'RaspberryIO.tex', u'Raspberry IO Documentation',
   u'Python Software Foundation', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'raspberryio', u'Raspberry IO Documentation',
     [u'Python Software Foundation'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'RaspberryIO', u'Raspberry IO Documentation',
   u'Python Software Foundation', 'RaspberryIO', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

########NEW FILE########
__FILENAME__ = fabfile
import ConfigParser
import os
import random
import re
import string

from getpass import getpass

from argyle import postgres, nginx, system
from argyle.supervisor import supervisor_command, upload_supervisor_app_conf
from argyle.system import service_command

from fabric import utils
from fabric.api import cd, env, get, hide, local, put, require, run, settings, sudo, task
from fabric.contrib import files, console

# Directory structure
PROJECT_ROOT = os.path.dirname(__file__)
CONF_ROOT = os.path.join(PROJECT_ROOT, 'conf')
SERVER_ROLES = ['app', 'lb', 'db']
env.project = 'raspberryio'
env.project_user = 'raspberryio'
env.repo = u'git@github.com:python/raspberryio.git'
env.shell = '/bin/bash -c'
env.disable_known_hosts = True
env.ssh_port = 2222
env.forward_agent = True
env.password_names = ['newrelic_license_key']

# Additional settings for argyle
env.ARGYLE_TEMPLATE_DIRS = (
    os.path.join(CONF_ROOT, 'templates')
)


@task
def vagrant():
    env.environment = 'staging'
    env.vagrant = True
    env.hosts = ['33.33.33.10', ]
    env.branch = 'develop'
    env.server_name = 'vagrant.raspberry.io'
    setup_path()


@task
def staging():
    env.environment = 'staging'
    env.vagrant = False
    env.hosts = ['raspberryio-staging.caktusgroup.com', ]
    env.branch = 'develop'
    env.server_name = 'raspberryio-staging.caktusgroup.com'
    env.port = 2222
    setup_path()


@task
def production():
    env.environment = 'production'
    env.vagrant = False
    env.hosts = ['raspberry.int.python.org', ]
    env.branch = 'master'
    env.server_name = 'raspberry.io'
    # Provided machine uses default port
    env.ssh_port = 22
    setup_path()


def setup_path():
    env.home = '/home/%(project_user)s/' % env
    env.root = os.path.join(env.home, 'www', env.environment)
    env.code_root = os.path.join(env.root, env.project)
    env.project_root = os.path.join(env.code_root, env.project)
    env.virtualenv_root = os.path.join(env.root, 'env')
    env.log_dir = os.path.join(env.root, 'log')
    env.db = '%s_%s' % (env.project, env.environment)
    env.vhost = '%s_%s' % (env.project, env.environment)
    env.settings = '%(project)s.settings.%(environment)s' % env


@task
def create_users():
    """Create project user and developer users."""
    ssh_dir = u"/home/%s/.ssh" % env.project_user
    system.create_user(env.project_user, groups=['www-data', 'login', ])
    sudo('mkdir -p %s' % ssh_dir)
    user_dir = os.path.join(CONF_ROOT, "users")
    for username in os.listdir(user_dir):
        key_file = os.path.normpath(os.path.join(user_dir, username))
        system.create_user(username, groups=['dev', 'login', 'admin', ], key_file=key_file)
        with open(key_file, 'rt') as f:
            ssh_key = f.read()
        # Add ssh key for project user
        files.append('%s/authorized_keys' % ssh_dir, ssh_key, use_sudo=True)
    sudo('chown -R %s:%s %s' % (env.project_user, env.project_user, ssh_dir))


@task
def configure_ssh():
    """
    Change sshd_config defaults:
    Change default port
    Disable root login
    Disable password login
    Restrict to only login group
    """
    ssh_config = u'/etc/ssh/sshd_config'
    files.sed(ssh_config, u"Port 22$", u"Port %s" % env.ssh_port, use_sudo=True)
    files.sed(ssh_config, u"PermitRootLogin yes", u"PermitRootLogin no", use_sudo=True)
    files.append(ssh_config, u"AllowGroups login", use_sudo=True)
    files.append(ssh_config, u"PasswordAuthentication no", use_sudo=True)
    service_command(u'ssh', u'reload')


@task
def install_packages(*roles):
    """Install packages for the given roles."""
    config_file = os.path.join(CONF_ROOT, u'packages.conf')
    config = ConfigParser.SafeConfigParser()
    config.read(config_file)
    for role in roles:
        if config.has_section(role):
            # Get ppas
            if config.has_option(role, 'ppas'):
                for ppa in config.get(role, 'ppas').split(' '):
                    system.add_ppa(ppa, update=False)
            # Get sources
            if config.has_option(role, 'sources'):
                for section in config.get(role, 'sources').split(' '):
                    source = config.get(section, 'source')
                    key = config.get(section, 'key')
                    system.add_apt_source(source=source, key=key, update=False)
            sudo(u"apt-get update")
            sudo(u"apt-get install -y %s" % config.get(role, 'packages'))
            sudo(u"apt-get upgrade -y")


@task
def setup_server(*roles):
    """Install packages and add configurations for server given roles."""
    require('environment')
    # Set server locale
    sudo('/usr/sbin/update-locale LANG=en_US.UTF-8')
    roles = list(roles)
    if roles == ['all', ]:
        roles = SERVER_ROLES
    if 'base' not in roles:
        roles.insert(0, 'base')
    install_packages(*roles)
    if 'db' in roles:
        if console.confirm(u"Do you want to reset the Postgres cluster?.", default=False):
            # Ensure the cluster is using UTF-8
            pg_version = postgres.detect_version()
            sudo('pg_dropcluster --stop %s main' % pg_version, user='postgres')
            sudo('pg_createcluster --start -e UTF-8 --locale en_US.UTF-8 %s main' % pg_version,
                 user='postgres')
        postgres.create_db_user(username=env.project_user)
        postgres.create_db(name=env.db, owner=env.project_user)
    if 'app' in roles:
        # Create project directories and install Python requirements
        project_run('mkdir -p %(root)s' % env)
        project_run('mkdir -p %(log_dir)s' % env)
        # FIXME: update to SSH as normal user and use sudo
        # we ssh as the project_user here to maintain ssh agent
        # forwarding, because it doesn't work with sudo. read:
        # http://serverfault.com/questions/107187/sudo-su-username-while-keeping-ssh-key-forwarding
        with settings(user=env.project_user):
            # TODO: Add known hosts prior to clone.
            # i.e. ssh -o StrictHostKeyChecking=no git@github.com
            run('git clone %(repo)s %(code_root)s' % env)
            with cd(env.code_root):
                run('git checkout %(branch)s' % env)
        # Install and create virtualenv
        with settings(hide('everything'), warn_only=True):
            test_for_pip = run('which pip')
        if not test_for_pip:
            sudo("easy_install -U pip")
        with settings(hide('everything'), warn_only=True):
            test_for_virtualenv = run('which virtualenv')
        if not test_for_virtualenv:
            sudo("pip install -U virtualenv")
        project_run('virtualenv -p python2.7 --clear --distribute %s' % env.virtualenv_root)
        path_file = os.path.join(env.virtualenv_root, 'lib', 'python2.7', 'site-packages', 'project.pth')
        files.append(path_file, env.code_root, use_sudo=True)
        sudo('chown %s:%s %s' % (env.project_user, env.project_user, path_file))
        sudo('npm install less@1.3 -g')
        update_requirements()
        upload_supervisor_app_conf(app_name=u'gunicorn')
        upload_supervisor_app_conf(app_name=u'group')
        # Restart services to pickup changes
        supervisor_command('reload')
        supervisor_command('restart %(environment)s:*' % env)
    if 'lb' in roles:
        nginx.remove_default_site()
        nginx.upload_nginx_site_conf(site_name=u'%(project)s-%(environment)s.conf' % env)


def project_run(cmd):
    """ Uses sudo to allow developer to run commands as project user."""
    sudo(cmd, user=env.project_user)


def _random_password(length=8, chars=string.letters + string.digits):
    """Generates a random password with the specificed length and chars."""
    return ''.join([random.choice(chars) for i in range(length)])


def _load_passwords(names, length=20, generate=False):
    """Retrieve password from the user's home directory, or generate a new random one if none exists"""
    for name in names:
        filename = ''.join([env.home, name])
        if generate:
            passwd = _random_password(length=length)
            sudo('touch %s' % filename, user=env.project_user)
            sudo('chmod 600 %s' % filename, user=env.project_user)
            with hide('running'):
                sudo('echo "%s">%s' % (passwd, filename), user=env.project_user)
        if env.host_string and files.exists(filename):
            with hide('stdout'):
                passwd = sudo('cat %s' % filename).strip()
        else:
            passwd = getpass('Please enter %s: ' % name)
        setattr(env, name, passwd)


@task
def update_service_confs():
    """Update supervisor configuration."""
    require('environment')
    if not env.vagrant:
        upload_newrelic_conf()
    upload_supervisor_app_conf(app_name=u'gunicorn')
    upload_supervisor_app_conf(app_name=u'group')
    nginx.upload_nginx_site_conf(site_name=u'%(project)s-%(environment)s.conf' % env)
    # Restart services to pickup changes
    supervisor_command('reload')


@task
def upload_newrelic_conf():
    """Upload New Relic configuration from the template."""
    require('environment')
    _load_passwords(env.password_names)
    template = os.path.join(CONF_ROOT, 'templates', 'newrelic.ini')
    destination = os.path.join(env.root, 'newrelic-%(environment)s.ini' % env)
    files.upload_template(template, destination, context=env, use_sudo=True)
    sudo('chown %s:%s %s' % (env.project_user, env.project_user, destination))


@task
def update_requirements():
    """Update required Python libraries."""
    require('environment')
    project_run(u'HOME=%(home)s %(virtualenv)s/bin/pip install --use-mirrors -r %(requirements)s' % {
        'virtualenv': env.virtualenv_root,
        'requirements': os.path.join(env.code_root, 'requirements', 'production.txt'),
        'home': env.home,
    })


@task
def manage_run(command):
    """Run a Django management command on the remote server."""
    require('environment')
    manage_base = u"%(virtualenv_root)s/bin/django-admin.py " % env
    if '--settings' not in command:
        command = u"%s --settings=%s" % (command, env.settings)
    project_run(u'%s %s' % (manage_base, command))


@task
def manage_shell():
    """Drop into the remote Django shell."""
    manage_run("shell")


@task
def syncdb():
    """Run syncdb and South migrations."""
    manage_run('syncdb')
    manage_run('migrate --noinput')


@task
def collectstatic():
    """Collect static files."""
    manage_run('compress')
    manage_run('collectstatic --noinput')


def match_changes(changes, match):
    pattern = re.compile(match)
    return pattern.search(changes) is not None


@task
def deploy(branch=None, full=False):
    """Deploy to a given environment."""
    require('environment')
    if branch is not None:
        env.branch = branch
    requirements = False if not full else True
    migrations = False if not full else True
    # Fetch latest changes
    with cd(env.code_root):
        with settings(user=env.project_user):
            run('git fetch origin')
        # Look for new requirements or migrations
        changes = run("git diff origin/%(branch)s --stat-name-width=9999" % env)
        requirements = match_changes(changes, r"requirements/")
        migrations = match_changes(changes, r"/migrations/")
        if requirements or migrations:
            supervisor_command('stop %(environment)s:*' % env)
        with settings(user=env.project_user):
            run("git reset --hard origin/%(branch)s" % env)
    if requirements:
        update_requirements()
        # New requirements might need new tables/migrations
        syncdb()
    elif migrations:
        syncdb()
    collectstatic()
    supervisor_command('restart %(environment)s:*' % env)


@task
def upload_secrets(secrets_filepath):
    """Upload a settings.ini file to the server"""
    require('environment')
    destination_file = os.path.join(env.root, 'settings.ini')
    put(secrets_filepath, destination_file, use_sudo=True)
    sudo('chown %s:%s %s' % (env.project_user, env.project_user, destination_file))


@task
def get_db_dump(clean=True):
    """Get db dump of remote enviroment."""
    require('environment')
    dump_file = '%(environment)s.sql' % env
    temp_file = os.path.join(env.home, dump_file)
    flags = '-Ox'
    if clean:
        flags += 'c'
    sudo('pg_dump %s %s > %s' % (flags, env.db, temp_file), user=env.project_user)
    get(temp_file, dump_file)


@task
def load_db_dump(dump_file):
    """Load db dump on a remote environment."""
    require('environment')
    temp_file = os.path.join(env.home, '%(environment)s.sql' % env)
    put(dump_file, temp_file, use_sudo=True)
    sudo('psql -d %s -f %s' % (env.db, temp_file), user=env.project_user)


@task
def reset_local_media():
    """ Reset local media from remote host """

    require('environment', provided_by=('staging', 'production'))
    media = os.path.join(env.code_root, 'public/media')
    local("rsync -rvaze 'ssh -p %s' %s@%s:%s %s/public" %
        (env.ssh_port, env.user, env.hosts[0], media, PROJECT_ROOT))


@task
def reset_local_db():
    """ Reset local database from remote host """
    require('code_root', provided_by=('production', 'staging'))
    question = 'Are you sure you want to reset your local ' \
               'database with the %(environment)s database?' % env
    if not console.confirm(question, default=False):
        utils.abort('Local database reset aborted.')
    if env.environment == 'staging':
        from raspberryio.settings.staging import DATABASES as remote
    else:
        from raspberryio.settings.production import DATABASES as remote
    from raspberryio.settings.local import DATABASES as loc
    local_db = loc['default']['NAME']
    remote_db = remote['default']['NAME']
    with settings(warn_only=True):
        local('dropdb %s' % local_db)
    local('createdb %s' % local_db)
    host = '%s@%s' % (env.project_user, env.hosts[0])
    local('ssh -p %s -C %s pg_dump -Ox %s | psql %s' % (env.ssh_port, host, remote_db, local_db))

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "raspberryio.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = admin
from __future__ import absolute_import

from django.contrib import admin
from .models import Feed, FeedItem, FeedType, APPROVED_FEED, DENIED_FEED


def mark_approved(modeladmin, request, queryset):
    for item in queryset.iterator():
        item.approval_status = APPROVED_FEED
        item.save()
mark_approved.short_description = "Mark selected feeds as approved."


def mark_denied(modeladmin, request, queryset):
    for item in queryset.iterator():
        item.approval_status = DENIED_FEED
        item.save()
mark_denied.short_description = "Mark selected feeds as denied."


admin.site.register(Feed,
    list_display=["title", "feed_type", "public_url", "approval_status"],
    list_filter=["feed_type", "is_defunct", "approval_status"],
    ordering=["title"],
    search_fields=["title", "public_url"],
    raw_id_fields=['owner'],
    list_editable=["approval_status"],
    list_per_page=500,
    actions=[mark_approved, mark_denied],
)

admin.site.register(FeedItem,
    list_display=['title', 'feed', 'date_modified'],
    list_filter=['feed'],
    search_fields=['feed__title', 'feed__public_url', 'title'],
    date_heirarchy=['date_modified'],
)

admin.site.register(FeedType,
    prepopulated_fields={'slug': ('name',)},
)

########NEW FILE########
__FILENAME__ = feeds
from __future__ import absolute_import

from django.core import urlresolvers
from django.contrib.syndication.views import Feed
from django.shortcuts import get_object_or_404
from .models import FeedType, FeedItem


class BaseCommunityAggregatorFeed(Feed):
    def item_title(self, item):
        return item.title

    def item_description(self, item):
        return item.summary

    def item_guid(self, item):
        return item.guid

    def item_link(self, item):
        return item.link

    def item_author_name(self, item):
        return item.feed.title

    def item_author_link(self, item):
        return item.feed.public_url

    def item_pubdate(self, item):
        return item.date_modified


class CommunityAggregatorFeed(BaseCommunityAggregatorFeed):
    def get_object(self, request, slug=None):
        return get_object_or_404(FeedType, slug=slug)

    def items(self, obj):
        qs = FeedItem.objects.filter(feed__feed_type=obj)
        qs = qs.order_by('-date_modified')
        qs = qs.select_related('feed', 'feed__feed_type')
        return qs[:25]

    def title(self, obj):
        return "Community aggregator: %s" % obj.name

    def link(self, obj):
        return urlresolvers.reverse('aggregator-feed', args=[obj.slug])

    def description(self, obj):
        return self.title(obj)


class CommunityAggregatorFirehoseFeed(BaseCommunityAggregatorFeed):
    title = 'RaspberryIO community aggregator firehose'
    description = 'All activity from the RaspberryIO community aggregator'

    def link(self):
        return urlresolvers.reverse('aggregator-firehose-feed')

    def items(self):
        qs = FeedItem.objects.order_by('-date_modified').select_related('feed')
        return qs[:50]

########NEW FILE########
__FILENAME__ = forms
from __future__ import absolute_import

from django import forms
from .models import Feed


class FeedModelForm(forms.ModelForm):
    title = forms.CharField(max_length=250,
                            help_text="Please enter the title of your blog.")
    feed_url = forms.URLField(label='Feed URL',
                              help_text="Link to RSS/Atom feed. Please use only Raspberry Pi related feeds.")
    public_url = forms.URLField(label='Public URL',
                                help_text="Link to the homepage for your blog.")

    class Meta:
        model = Feed
        exclude = ('is_defunct', 'feed_type', 'owner', 'approval_status')

########NEW FILE########
__FILENAME__ = send_pending_approval_email
"""
Send an email to settings.FEED_APPROVERS with the feeds that need to
be manually approved.
"""
from __future__ import absolute_import

from django.conf import settings
from django.contrib.auth.models import User
from django.contrib.sites.models import Site
from django.core import mail
from django.core.management.base import NoArgsCommand
from django.template import Context, Template
from ...models import Feed, PENDING_FEED


class Command(NoArgsCommand):

    def handle_noargs(self, **kwargs):
        try:
            verbosity = int(kwargs['verbosity'])
        except (KeyError, TypeError, ValueError):
            verbosity = 1

        feeds = Feed.objects.filter(approval_status=PENDING_FEED)
        to_email = [x.email for x in User.objects.filter(groups__name=settings.FEED_APPROVERS_GROUP_NAME)]

        if len(feeds) == 0:
            if verbosity >= 1:
                print "There are no pending feeds. Skipping the email."
            return
        site = Site.objects.get(pk=1)
        email = """The following feeds are pending approval:
{% regroup feeds by feed_type as feed_grouping %}{% for group in feed_grouping %}
{{ group.grouper }} {% for feed in group.list %}
 - {{ feed.title }} ( {{ feed.feed_url }} ) {% endfor %}
{% endfor %}

To approve them, visit: http://{{ site.domain }}{% url admin:aggregator_feed_changelist %}
"""

        message = Template(email).render(Context({'feeds': feeds, 'site': site}))
        if verbosity >= 2:
            print "Pending approval email:\n"
            print message

        mail.send_mail("django community feeds pending approval", message,
                       'nobody@%s' % site.domain,
                       to_email,
                       fail_silently=False)

        if verbosity >= 1:
            print "Sent pending approval email to: %s" % (', '.join(to_email))

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'FeedType'
        db.create_table('aggregator_feedtype', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=250)),
            ('slug', self.gf('django.db.models.fields.SlugField')(max_length=250, db_index=True)),
            ('can_self_add', self.gf('django.db.models.fields.BooleanField')(default=True)),
        ))
        db.send_create_signal('aggregator', ['FeedType'])

        # Adding model 'Feed'
        db.create_table('aggregator_feeds', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=500)),
            ('feed_url', self.gf('django.db.models.fields.URLField')(unique=True, max_length=500)),
            ('public_url', self.gf('django.db.models.fields.URLField')(max_length=500)),
            ('is_defunct', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('feed_type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['aggregator.FeedType'])),
        ))
        db.send_create_signal('aggregator', ['Feed'])

        # Adding model 'FeedItem'
        db.create_table('aggregator_feeditems', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('feed', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['aggregator.Feed'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=500)),
            ('link', self.gf('django.db.models.fields.URLField')(max_length=500)),
            ('summary', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('date_modified', self.gf('django.db.models.fields.DateTimeField')()),
            ('guid', self.gf('django.db.models.fields.CharField')(unique=True, max_length=500, db_index=True)),
        ))
        db.send_create_signal('aggregator', ['FeedItem'])


    def backwards(self, orm):
        
        # Deleting model 'FeedType'
        db.delete_table('aggregator_feedtype')

        # Deleting model 'Feed'
        db.delete_table('aggregator_feeds')

        # Deleting model 'FeedItem'
        db.delete_table('aggregator_feeditems')


    models = {
        'aggregator.feed': {
            'Meta': {'object_name': 'Feed', 'db_table': "'aggregator_feeds'"},
            'feed_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['aggregator.FeedType']"}),
            'feed_url': ('django.db.models.fields.URLField', [], {'unique': 'True', 'max_length': '500'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_defunct': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'public_url': ('django.db.models.fields.URLField', [], {'max_length': '500'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'aggregator.feeditem': {
            'Meta': {'ordering': "('-date_modified',)", 'object_name': 'FeedItem', 'db_table': "'aggregator_feeditems'"},
            'date_modified': ('django.db.models.fields.DateTimeField', [], {}),
            'feed': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['aggregator.Feed']"}),
            'guid': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '500', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'link': ('django.db.models.fields.URLField', [], {'max_length': '500'}),
            'summary': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'aggregator.feedtype': {
            'Meta': {'object_name': 'FeedType'},
            'can_self_add': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '250', 'db_index': 'True'})
        }
    }

    complete_apps = ['aggregator']

########NEW FILE########
__FILENAME__ = 0002_rename_tables
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        # rename tables from the hardcoded old names to the Django defaults.
        db.rename_table('aggregator_feeds', 'aggregator_feed')
        db.rename_table('aggregator_feeditems', 'aggregator_feeditem')

    def backwards(self, orm):
        db.rename_table('aggregator_feed', 'aggregator_feeds')
        db.rename_table('aggregator_feeditem', 'aggregator_feeditems')

    models = {
        'aggregator.feed': {
            'Meta': {'object_name': 'Feed'},
            'feed_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['aggregator.FeedType']"}),
            'feed_url': ('django.db.models.fields.URLField', [], {'unique': 'True', 'max_length': '500'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_defunct': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'public_url': ('django.db.models.fields.URLField', [], {'max_length': '500'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'aggregator.feeditem': {
            'Meta': {'ordering': "('-date_modified',)", 'object_name': 'FeedItem'},
            'date_modified': ('django.db.models.fields.DateTimeField', [], {}),
            'feed': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['aggregator.Feed']"}),
            'guid': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '500', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'link': ('django.db.models.fields.URLField', [], {'max_length': '500'}),
            'summary': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'aggregator.feedtype': {
            'Meta': {'object_name': 'FeedType'},
            'can_self_add': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '250', 'db_index': 'True'})
        }
    }

    complete_apps = ['aggregator']

########NEW FILE########
__FILENAME__ = 0003_add_feed_owner
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Feed.owner'
        db.add_column('aggregator_feed', 'owner', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='owned_feeds', null=True, to=orm['auth.User']), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Feed.owner'
        db.delete_column('aggregator_feed', 'owner_id')


    models = {
        'aggregator.feed': {
            'Meta': {'object_name': 'Feed'},
            'feed_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['aggregator.FeedType']"}),
            'feed_url': ('django.db.models.fields.URLField', [], {'unique': 'True', 'max_length': '500'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_defunct': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_feeds'", 'null': 'True', 'to': "orm['auth.User']"}),
            'public_url': ('django.db.models.fields.URLField', [], {'max_length': '500'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'aggregator.feeditem': {
            'Meta': {'ordering': "('-date_modified',)", 'object_name': 'FeedItem'},
            'date_modified': ('django.db.models.fields.DateTimeField', [], {}),
            'feed': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['aggregator.Feed']"}),
            'guid': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '500', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'link': ('django.db.models.fields.URLField', [], {'max_length': '500'}),
            'summary': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'aggregator.feedtype': {
            'Meta': {'object_name': 'FeedType'},
            'can_self_add': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '250', 'db_index': 'True'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['aggregator']

########NEW FILE########
__FILENAME__ = 0004_add_approval_status_field
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        # Create approval status field. All feeds default to approved.
        db.add_column('aggregator_feed', 'approval_status', self.gf('django.db.models.fields.CharField')(default='A', max_length=1), keep_default=False)


    def backwards(self, orm):
        db.delete_column('aggregator_feed', 'approval_status')

    models = {
        'aggregator.feed': {
            'Meta': {'object_name': 'Feed'},
            'approval_status': ('django.db.models.fields.CharField', [], {'default': "'P'", 'max_length': '1'}),
            'feed_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['aggregator.FeedType']"}),
            'feed_url': ('django.db.models.fields.URLField', [], {'unique': 'True', 'max_length': '500'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_defunct': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_feeds'", 'null': 'True', 'to': "orm['auth.User']"}),
            'public_url': ('django.db.models.fields.URLField', [], {'max_length': '500'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'aggregator.feeditem': {
            'Meta': {'ordering': "('-date_modified',)", 'object_name': 'FeedItem'},
            'date_modified': ('django.db.models.fields.DateTimeField', [], {}),
            'feed': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['aggregator.Feed']"}),
            'guid': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '500', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'link': ('django.db.models.fields.URLField', [], {'max_length': '500'}),
            'summary': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'aggregator.feedtype': {
            'Meta': {'object_name': 'FeedType'},
            'can_self_add': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '250', 'db_index': 'True'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['aggregator']

########NEW FILE########
__FILENAME__ = 0005_add_feed_approver_auth_group
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models
from django.conf import settings

class Migration(DataMigration):
    def forwards(self, orm):
        group = orm['auth.Group'](name=settings.FEED_APPROVERS_GROUP_NAME)
        group.save()

    def backwards(self, orm):
        group = orm['auth.Group'].objects.get(name=settings.FEED_APPROVERS_GROUP_NAME)
        group.delete()

    models = {
        'aggregator.feed': {
            'Meta': {'object_name': 'Feed'},
            'approval_status': ('django.db.models.fields.CharField', [], {'default': "'P'", 'max_length': '1'}),
            'feed_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['aggregator.FeedType']"}),
            'feed_url': ('django.db.models.fields.URLField', [], {'unique': 'True', 'max_length': '500'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_defunct': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_feeds'", 'null': 'True', 'to': "orm['auth.User']"}),
            'public_url': ('django.db.models.fields.URLField', [], {'max_length': '500'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'aggregator.feeditem': {
            'Meta': {'ordering': "('-date_modified',)", 'object_name': 'FeedItem'},
            'date_modified': ('django.db.models.fields.DateTimeField', [], {}),
            'feed': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['aggregator.Feed']"}),
            'guid': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '500', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'link': ('django.db.models.fields.URLField', [], {'max_length': '500'}),
            'summary': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'aggregator.feedtype': {
            'Meta': {'object_name': 'FeedType'},
            'can_self_add': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '250'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '250', 'db_index': 'True'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['aggregator']

########NEW FILE########
__FILENAME__ = models
import logging
import datetime
from django.db import models
from django.contrib.auth.models import User
from django.conf import settings
from django_push.subscriber import signals as push_signals
from django_push.subscriber.models import Subscription

log = logging.getLogger(__name__)


class FeedType(models.Model):
    name = models.CharField(max_length=250)
    slug = models.SlugField(max_length=250)
    can_self_add = models.BooleanField(default=True)

    def __unicode__(self):
        return "%s" % (self.name,)

    def items(self):
        return FeedItem.objects.filter(feed__feed_type=self)


APPROVED_FEED = 'A'
DENIED_FEED = 'D'
PENDING_FEED = 'P'

STATUS_CHOICES = (
    (PENDING_FEED, 'Pending'),
    (DENIED_FEED, 'Denied'),
    (APPROVED_FEED, 'Approved')
)


class Feed(models.Model):
    title = models.CharField(max_length=500)
    feed_url = models.URLField(unique=True, max_length=500)
    public_url = models.URLField(max_length=500)
    is_defunct = models.BooleanField()
    approval_status = models.CharField(max_length=1, choices=STATUS_CHOICES, default=PENDING_FEED)
    feed_type = models.ForeignKey(FeedType)
    owner = models.ForeignKey(User, blank=True, null=True, related_name='owned_feeds')

    def __unicode__(self):
        return self.title

    def save(self, **kwargs):
        super(Feed, self).save(**kwargs)
        if settings.SUPERFEEDR_CREDS != None and self.approval_status == APPROVED_FEED:
            Subscription.objects.subscribe(self.feed_url, settings.PUSH_HUB)

    def delete(self, **kwargs):
        super(Feed, self).delete(**kwargs)
        if settings.SUPERFEEDR_CREDS != None:
            Subscription.objects.unsubscribe(self.feed_url, settings.PUSH_HUB)


class FeedItemManager(models.Manager):
    def create_or_update_by_guid(self, guid, **kwargs):
        """
        Look up a FeedItem by GUID, updating it if it exists, and creating
        it if it doesn't.

        We don't limit it by feed because an item could be in another feed if
        some feeds are themselves aggregators. That's also why we don't update
        the feed field if the feed item already exists.

        Returns (item, created) like get_or_create().
        """
        try:
            item = self.get(guid=guid)

        except self.model.DoesNotExist:
            # Create a new item
            log.debug('Creating entry: %s', guid)
            kwargs['guid'] = guid
            item = self.create(**kwargs)

        else:
            log.debug('Updating entry: %s', guid)

            # Update an existing one.
            kwargs.pop('feed', None)

            # Don't update the date since most feeds get this wrong.
            kwargs.pop('date_modified')

            for k, v in kwargs.items():
                setattr(item, k, v)
            item.save()

        return item


class FeedItem(models.Model):
    feed = models.ForeignKey(Feed)
    title = models.CharField(max_length=500)
    link = models.URLField(max_length=500)
    summary = models.TextField(blank=True)
    date_modified = models.DateTimeField()
    guid = models.CharField(max_length=500, unique=True, db_index=True)

    objects = FeedItemManager()

    class Meta:
        ordering = ("-date_modified",)

    def __unicode__(self):
        return self.title

    def get_absolute_url(self):
        return self.link


def feed_updated(sender, notification, **kwargs):
    log.debug('Recieved notification on subscription ID %s (%s)', sender.id, sender.topic)
    try:
        feed = Feed.objects.get(feed_url=sender.topic)
    except Feed.DoesNotExist:
        log.error("Subscription ID %s (%s) doesn't have a feed.", sender.id, sender.topic)
        return

    for entry in notification.entries:
        title = entry.title
        try:
            guid = entry.get("id", entry.link)
        except AttributeError:
            log.error("Feed ID %s has an entry ('%s') without a link or guid. Skipping.", feed.id, title)
        link = getattr(entry, "link", guid)

        content = u''
        if hasattr(entry, "summary"):
            content = entry.summary

        if hasattr(entry, "description"):
            content = entry.description

        # 'content' takes precedence on anything else. 'summary' and
        # 'description' are usually truncated so it's safe to overwrite them
        if hasattr(entry, "content"):
            content = u''
            for item in entry.content:
                content += item.value

        if 'published_parsed' in entry and entry.published_parsed is not None:
            date_modified = datetime.datetime(*entry.published_parsed[:6])
        elif 'updated_parsed' in entry and entry.updated_parsed is not None:
            date_modified = datetime.datetime(*entry.updated_parsed[:6])
        else:
            date_modified = datetime.datetime.now()

        FeedItem.objects.create_or_update_by_guid(guid,
            feed=feed,
            title=title,
            link=link,
            summary=content,
            date_modified=date_modified
        )

push_signals.updated.connect(feed_updated)

########NEW FILE########
__FILENAME__ = feed_aggregator
from __future__ import absolute_import

from django import template
from .models import Feed

class FeedListNode(template.Node):
    def __init__(self, varname):
        self.varname = varname

    def render(self, context):
        context[self.varname] = Feed.objects.filter(is_defunct=False)
        return ''

def do_get_feed_list(parser, token):
    """
    {% get_feed_list as feed_list %}
    """
    bits = token.contents.split()
    if len(bits) != 3:
        raise template.TemplateSyntaxError, "'%s' tag takes two arguments" % bits[0]
    if bits[1] != "as":
        raise template.TemplateSyntaxError, "First argument to '%s' tag must be 'as'" % bits[0]
    return FeedListNode(bits[2])

register = template.Library()
register.tag('get_feed_list', do_get_feed_list)

########NEW FILE########
__FILENAME__ = tests
# email test
# https://docs.djangoproject.com/en/dev/topics/testing/#email-services
from __future__ import absolute_import

from mock import patch

from django.conf import settings
from django.contrib.auth.models import Group, User
from django.core import mail
from django.core.urlresolvers import reverse
from django.test import TestCase
from django.test.client import Client
from django.utils.timezone import now
from django_push.subscriber.models import SubscriptionManager

from .management.commands import send_pending_approval_email
from . import models
from . import utils


class MockResponse(object):

    def __init__(self, resp_data, code=202, msg='OK'):
        self.resp_data = resp_data
        self.code = code
        self.msg = msg
        self.headers = {'content-type': 'text/plain; charset=utf-8'}

    def read(self):
        return self.resp_data

    def getcode(self):
        return self.code


class AggregatorTests(TestCase):

    def setUp(self):
        Group.objects.all().delete()
        settings.SUPERFEEDR_CREDS = None
        with patch.object(SubscriptionManager, 'subscription_request', return_value=MockResponse('fake')) as subreq:
            # Set up users who will get emailed
            g = Group.objects.create(name=settings.FEED_APPROVERS_GROUP_NAME)
            self.user = User.objects.create(username="Mr. Potato", email="mr@potato.com")
            self.user.groups.add(g)

            self.feed_type = models.FeedType(name="Test Feed Type", slug="test-feed-type", can_self_add=True)
            self.feed_type.save()

            self.approved_feed = models.Feed(title="Approved", feed_url="foo.com/rss/", public_url="foo.com/", is_defunct=False,
                                 approval_status=models.APPROVED_FEED, feed_type=self.feed_type)
            self.denied_feed = models.Feed(title="Denied", feed_url="bar.com/rss/", public_url="bar.com/", is_defunct=False,
                                 approval_status=models.DENIED_FEED, feed_type=self.feed_type)
            self.pending_feed = models.Feed(title="Pending", feed_url="baz.com/rss/", public_url="baz.com/", is_defunct=False,
                                 approval_status=models.PENDING_FEED, feed_type=self.feed_type)
            self.defunct_feed = models.Feed(title="Defunct", feed_url="zot.com/rss/", public_url="zot.com/", is_defunct=True,
                                 approval_status=models.APPROVED_FEED, feed_type=self.feed_type)

            for feed in [self.approved_feed, self.denied_feed, self.pending_feed, self.defunct_feed]:
                feed.save()
                feed_item = models.FeedItem(feed=feed, title="%s Item" % feed.title, link=feed.public_url,
                                     date_modified=now(), guid=feed.title)
                feed_item.save()

            self.client = Client()

    def test_feed_list_only_approved_and_active(self):

        response = self.client.get(reverse('community-feed-list', kwargs={'feed_type_slug': self.feed_type.slug}))
        for item in response.context['object_list']:
            self.assertEqual(models.APPROVED_FEED, item.feed.approval_status)

    def test_management_command_sends_no_email_with_no_pending_feeds(self):
        self.pending_feed.delete()
        send_pending_approval_email.Command().handle_noargs()
        self.assertEqual(0, len(mail.outbox))

    def test_management_command_sends_email_with_pending_feeds(self):
        send_pending_approval_email.Command().handle_noargs()
        self.assertEqual(1, len(mail.outbox))
        self.assertEqual(mail.outbox[0].to, [self.user.email])

    def test_feed_type_items(self):
        # 4 items were created in our default feed_type in setUp
        self.assertEqual(len(self.feed_type.items()), 4)

    def test_unicode_method(self):
        self.assertEqual(self.approved_feed.__unicode__(), 'Approved')


class UtilsTests(TestCase):

    def test_push_credentials(self):
        settings.SUPERFEEDR_CREDS = ['testid', 'testsecret']
        self.assertEqual(utils.push_credentials(''), ('testid', 'testsecret'))

########NEW FILE########
__FILENAME__ = urls
from __future__ import absolute_import

from django.conf.urls.defaults import *
from . import views

urlpatterns = patterns('',
    url(r'^mine/$',
        views.my_feeds,
        name='community-my-feeds'
    ),
    url(
        r'^(?P<feed_type_slug>[-\w]+)/$',
        views.feed_list,
        name="community-feed-list"
    ),
    url(
        r'^add/(?P<feed_type_slug>[-\w]+)/$',
        views.add_feed,
        name='community-add-feed'
    ),
    url(
        r'^edit/(?P<feed_id>\d+)/$',
        views.edit_feed,
        name='community-edit-feed'
    ),
    url(
        r'^delete/(?P<feed_id>\d+)/$',
        views.delete_feed,
        name='community-delete-feed'
    ),
)

########NEW FILE########
__FILENAME__ = utils
from django.conf import settings


def push_credentials(hub_url):
    """
    Callback for django_push to get a hub's credentials.

    We always use superfeedr so this is easy.
    """
    return tuple(settings.SUPERFEEDR_CREDS)

########NEW FILE########
__FILENAME__ = views
from __future__ import absolute_import

from django.shortcuts import get_object_or_404, render, redirect
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.views.generic.list_detail import object_list
from .models import FeedItem, Feed, FeedType, APPROVED_FEED
from .forms import FeedModelForm


def index(request):
    """
    Displays the latest feeds of each type.
    """
    ctx = {'feedtype_list': FeedType.objects.all()}
    return render(request, 'aggregator/index.html', ctx)


def feed_list(request, feed_type_slug):
    """
    Shows the latest feeds for the given type.
    """
    feed_type = get_object_or_404(FeedType, slug=feed_type_slug)
    return object_list(request,
        queryset=FeedItem.objects.filter(feed__feed_type=feed_type, feed__approval_status=APPROVED_FEED),
        paginate_by=10,
        extra_context={'feed_type': feed_type},
    )


@login_required
def my_feeds(request):
    """
    Lets the user see, edit, and delete all of their owned feeds.
    """
    feed_types = FeedType.objects.all()
    if not request.user.is_superuser:
        feed_types = feed_types.filter(can_self_add=True)

    ctx = {
        'feeds': Feed.objects.filter(owner=request.user),
        'feed_types': feed_types
    }
    return render(request, 'aggregator/my-feeds.html', ctx)


@login_required
def add_feed(request, feed_type_slug):
    """
    Lets users add new feeds to the aggregator.

    Users only get to add new feeds of types indicated as "can self add."
    """
    ft = get_object_or_404(FeedType, slug=feed_type_slug, can_self_add=True)
    if not ft.can_self_add and not request.user.is_superuser:
        return render(request, 'aggregator/denied.html')

    instance = Feed(feed_type=ft, owner=request.user)
    f = FeedModelForm(request.POST or None, instance=instance)
    if f.is_valid():
        f.save()
        messages.add_message(
            request, messages.INFO, 'Your feed has entered moderation. Please allow up to 1 week for processing.')
        return redirect('community-index')

    ctx = {'form': f, 'feed_type': ft, 'adding': True}
    return render(request, 'aggregator/edit-feed.html', ctx)


@login_required
def edit_feed(request, feed_id):
    """
    Lets a user edit a feed they've previously added.

    Only feeds the user "owns" can be edited.
    """
    feed = get_object_or_404(Feed, pk=feed_id, owner=request.user)
    f = FeedModelForm(request.POST or None, instance=feed)
    if f.is_valid():
        f.save()
        return redirect('community-my-feeds')

    ctx = {'form': f, 'feed': feed, 'adding': False}
    return render(request, 'aggregator/edit-feed.html', ctx)


@login_required
def delete_feed(request, feed_id):
    """
    Lets a user delete a feed they've previously added.

    Only feeds the user "owns" can be deleted.
    """
    feed = get_object_or_404(Feed, pk=feed_id, owner=request.user)
    if request.method == 'POST':
        feed.delete()
        return redirect('community-my-feeds')
    return render(request, 'aggregator/delete-confirm.html', {'feed': feed})

########NEW FILE########
__FILENAME__ = admin
try:
    from PIL import Image
except ImportError:
    import Image

from django import forms
from django.contrib import admin

from raspberryio.project.models import (FeaturedProject, Project, ProjectStep,
    ProjectCategory)


class FeaturedProjectAdminForm(forms.ModelForm):

    class Meta:
        model = FeaturedProject

    def clean_photo(self):
        photo = self.cleaned_data.get('photo', False)
        if 'photo' in self.changed_data:
            img = Image.open(photo)
            if photo.size > 5 * 1024 * 1024:
                error = "Photo file too large ( maximum 5MB )"
                raise forms.ValidationError(error)
            if img.size[0] < 1252 or img.size[1] < 626:
                error = "Photo dimensions too small ( minimum 1252x636 pixels )"
                raise forms.ValidationError(error)
        return photo


class FeaturedProjectAdmin(admin.ModelAdmin):
    model = FeaturedProject
    form = FeaturedProjectAdminForm
    list_display = ('project', 'featured_start_date')


class ProjectAdminForm(forms.ModelForm):

    class Meta:
        model = Project
        fields = (
            'title', 'status', 'publish_date', 'user', 'featured_photo',
            'featured_video', 'tldr', 'categories'
        )


class ProjectStepInline(admin.TabularInline):
    model = ProjectStep
    extra = 1


class ProjectAdmin(admin.ModelAdmin):
    model = Project
    form = ProjectAdminForm
    list_display = ('title', 'created_datetime', 'admin_thumb')
    inlines = (ProjectStepInline,)
    raw_id_fields = ('user',)


class ProjectCategoryAdmin(admin.ModelAdmin):
    model = ProjectCategory
    fields = ('title',)

admin.site.register(FeaturedProject, FeaturedProjectAdmin)
admin.site.register(Project, ProjectAdmin)
admin.site.register(ProjectCategory, ProjectCategoryAdmin)

########NEW FILE########
__FILENAME__ = forms
from gdata.youtube.service import YouTubeService as yt_service

from django import forms

from raspberryio.project.models import Project, ProjectStep, ProjectImage
from raspberryio.project.utils import get_youtube_video_id


PLACEHOLDER_WIDGET_TYPES = (
    'TextInput', 'PasswordInput', 'Textarea',
)


class PlaceHolderMixin(object):
    """
    Mixin that sets the placeholder text for form text, password and
    textarea fields.

    Use Meta.remove_labels = True to remove labels whose placeholder text is
    set.

    Placeholder text defaults to each field's label. To override, set
    Meta.placeholders to a dictionary of the form:
        {'fieldname': 'placeholder text', ...}
    """
    def __init__(self, *args, **kwargs):
        super(PlaceHolderMixin, self).__init__(*args, **kwargs)
        placeholders = getattr(self.Meta, 'placeholders', {})
        for name, field in self.fields.iteritems():
            widget_type = field.widget.__class__.__name__
            if widget_type in PLACEHOLDER_WIDGET_TYPES:
                placeholder_text = placeholders.get(name, '')
                if not placeholder_text:
                    placeholder_text = field.label if field.label else name
                    placeholder_text = placeholder_text.replace('_', ' ') \
                        .title()
                field.widget.attrs.update({
                    'placeholder': placeholder_text
                })
                if getattr(self.Meta, 'remove_labels', False):
                    field.label = ''


class ProjectForm(PlaceHolderMixin, forms.ModelForm):

    class Meta(object):
        model = Project
        placeholders = {
            'title': 'The title of your RaspberryPi project',
        }
        fields = (
            'title', 'featured_photo', 'featured_video', 'tldr', 'categories',
        )


class ProjectStepForm(PlaceHolderMixin, forms.ModelForm):

    images = forms.CharField(required=False, widget=forms.HiddenInput)

    def clean_images(self):
        images_str = self.cleaned_data.get('images', '')
        image_pks = images_str.split(',') if images_str else []
        try:
            image_pks = [int(pk) for pk in image_pks]
        except ValueError:
            image_pks = []
        self.images = image_pks

    def clean_video(self):
        data = self.cleaned_data.get('video', '')
        if data:
            video_id = get_youtube_video_id(data)
            try:
                yt_service().GetYouTubeVideoEntry(video_id=video_id)
            except:
                msg = "The supplied URL is not a valid Youtube video"
                raise forms.ValidationError(msg)
        return data

    def save(self, *args, **kwargs):
        result = super(ProjectStepForm, self).save(*args, **kwargs)
        if self.images:
            self.instance.gallery.add(*self.images)
        return result

    class Meta(object):
        model = ProjectStep
        placeholders = {
            'title': 'The title of this step in the project',
        }
        fields = (
            'title', 'content', 'video', 'images'
        )


class ProjectImageForm(forms.ModelForm):

    def clean(self):
        files_data = self.files.get('file', None)
        if not files_data:
            raise forms.ValidationError('No file data present')
        self.data['file'] = files_data

    def save(self):
        file_data = self.data['file']
        instance = self.instance
        if file_data:
            instance.file = file_data
            instance.save()
        return instance

    class Meta(object):
        model = ProjectImage

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Project'
        db.create_table('project_project', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('keywords_string', self.gf('django.db.models.fields.CharField')(max_length=500, blank=True)),
            ('site', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sites.Site'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=500)),
            ('slug', self.gf('django.db.models.fields.CharField')(max_length=2000, null=True, blank=True)),
            ('_meta_title', self.gf('django.db.models.fields.CharField')(max_length=500, null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('gen_description', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('status', self.gf('django.db.models.fields.IntegerField')(default=2)),
            ('publish_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('expiry_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('short_url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('in_sitemap', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='projects', to=orm['auth.User'])),
            ('featured_photo', self.gf('django.db.models.fields.files.ImageField')(max_length=100, null=True, blank=True)),
            ('featured_video', self.gf('django.db.models.fields.URLField')(default='', max_length=200, blank=True)),
            ('featured_video_thumbnail', self.gf('django.db.models.fields.files.ImageField')(max_length=100, null=True, blank=True)),
            ('tldr', self.gf('mezzanine.core.fields.RichTextField')()),
            ('score', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('created_datetime', self.gf('django.db.models.fields.DateTimeField')()),
            ('modified_datetime', self.gf('django.db.models.fields.DateTimeField')()),
            ('keywords', self.gf('mezzanine.generic.fields.KeywordsField')(object_id_field='object_pk', to=orm['generic.AssignedKeyword'], frozen_by_south=True)),
        ))
        db.send_create_signal('project', ['Project'])

        # Adding M2M table for field categories on 'Project'
        db.create_table('project_project_categories', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('project', models.ForeignKey(orm['project.project'], null=False)),
            ('blogcategory', models.ForeignKey(orm['blog.blogcategory'], null=False))
        ))
        db.create_unique('project_project_categories', ['project_id', 'blogcategory_id'])

        # Adding model 'ProjectStep'
        db.create_table('project_projectstep', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('content', self.gf('mezzanine.core.fields.RichTextField')()),
            ('_order', self.gf('django.db.models.fields.IntegerField')(null=True)),
            ('project', self.gf('django.db.models.fields.related.ForeignKey')(related_name='steps', to=orm['project.Project'])),
            ('video', self.gf('django.db.models.fields.URLField')(default='', max_length=200, blank=True)),
        ))
        db.send_create_signal('project', ['ProjectStep'])

        # Adding M2M table for field gallery on 'ProjectStep'
        db.create_table('project_projectstep_gallery', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('projectstep', models.ForeignKey(orm['project.projectstep'], null=False)),
            ('projectimage', models.ForeignKey(orm['project.projectimage'], null=False))
        ))
        db.create_unique('project_projectstep_gallery', ['projectstep_id', 'projectimage_id'])

        # Adding model 'ProjectImage'
        db.create_table('project_projectimage', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('file', self.gf('django.db.models.fields.files.ImageField')(max_length=100)),
        ))
        db.send_create_signal('project', ['ProjectImage'])


    def backwards(self, orm):
        # Deleting model 'Project'
        db.delete_table('project_project')

        # Removing M2M table for field categories on 'Project'
        db.delete_table('project_project_categories')

        # Deleting model 'ProjectStep'
        db.delete_table('project_projectstep')

        # Removing M2M table for field gallery on 'ProjectStep'
        db.delete_table('project_projectstep_gallery')

        # Deleting model 'ProjectImage'
        db.delete_table('project_projectimage')


    models = {
        'actstream.action': {
            'Meta': {'ordering': "('-timestamp',)", 'object_name': 'Action'},
            'action_object_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'action_object'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'action_object_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'actor_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'actor'", 'to': "orm['contenttypes.ContentType']"}),
            'actor_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'target_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'target'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'target_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'verb': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'blog.blogcategory': {
            'Meta': {'object_name': 'BlogCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'generic.assignedkeyword': {
            'Meta': {'ordering': "('_order',)", 'object_name': 'AssignedKeyword'},
            '_order': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keyword': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'assignments'", 'to': "orm['generic.Keyword']"}),
            'object_pk': ('django.db.models.fields.IntegerField', [], {})
        },
        'generic.keyword': {
            'Meta': {'object_name': 'Keyword'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'project.project': {
            'Meta': {'object_name': 'Project'},
            '_meta_title': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'categories': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'projects'", 'symmetrical': 'False', 'to': "orm['blog.BlogCategory']"}),
            'created_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'expiry_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'featured_photo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'featured_video': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
            'featured_video_thumbnail': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'gen_description': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_sitemap': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'keywords': ('mezzanine.generic.fields.KeywordsField', [], {'object_id_field': "'object_pk'", 'to': "orm['generic.AssignedKeyword']", 'frozen_by_south': 'True'}),
            'keywords_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'modified_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'publish_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'short_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'tldr': ('mezzanine.core.fields.RichTextField', [], {}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'projects'", 'to': "orm['auth.User']"})
        },
        'project.projectimage': {
            'Meta': {'object_name': 'ProjectImage'},
            'file': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'project.projectstep': {
            'Meta': {'ordering': "('_order',)", 'object_name': 'ProjectStep'},
            '_order': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'content': ('mezzanine.core.fields.RichTextField', [], {}),
            'gallery': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['project.ProjectImage']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['project.Project']"}),
            'video': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['project']
########NEW FILE########
__FILENAME__ = 0002_auto__add_featuredproject
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'FeaturedProject'
        db.create_table('project_featuredproject', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('project', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['project.Project'], unique=True)),
            ('byline', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('photo', self.gf('django.db.models.fields.files.ImageField')(max_length=100)),
            ('featured_start_date', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2013, 2, 18, 0, 0))),
        ))
        db.send_create_signal('project', ['FeaturedProject'])


    def backwards(self, orm):
        # Deleting model 'FeaturedProject'
        db.delete_table('project_featuredproject')


    models = {
        'actstream.action': {
            'Meta': {'ordering': "('-timestamp',)", 'object_name': 'Action'},
            'action_object_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'action_object'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'action_object_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'actor_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'actor'", 'to': "orm['contenttypes.ContentType']"}),
            'actor_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'target_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'target'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'target_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'verb': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'blog.blogcategory': {
            'Meta': {'ordering': "('title',)", 'object_name': 'BlogCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'generic.assignedkeyword': {
            'Meta': {'ordering': "('_order',)", 'object_name': 'AssignedKeyword'},
            '_order': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keyword': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'assignments'", 'to': "orm['generic.Keyword']"}),
            'object_pk': ('django.db.models.fields.IntegerField', [], {})
        },
        'generic.keyword': {
            'Meta': {'object_name': 'Keyword'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'project.featuredproject': {
            'Meta': {'ordering': "['-featured_start_date']", 'object_name': 'FeaturedProject'},
            'byline': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'featured_start_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 2, 18, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'photo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'project': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['project.Project']", 'unique': 'True'})
        },
        'project.project': {
            'Meta': {'object_name': 'Project'},
            '_meta_title': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'categories': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'projects'", 'symmetrical': 'False', 'to': "orm['blog.BlogCategory']"}),
            'created_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'expiry_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'featured_photo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'featured_video': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
            'featured_video_thumbnail': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'gen_description': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_sitemap': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'keywords': ('mezzanine.generic.fields.KeywordsField', [], {'object_id_field': "'object_pk'", 'to': "orm['generic.AssignedKeyword']", 'frozen_by_south': 'True'}),
            'keywords_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'modified_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'publish_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'short_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'tldr': ('mezzanine.core.fields.RichTextField', [], {}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'projects'", 'to': "orm['auth.User']"})
        },
        'project.projectimage': {
            'Meta': {'object_name': 'ProjectImage'},
            'file': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'project.projectstep': {
            'Meta': {'ordering': "('_order',)", 'object_name': 'ProjectStep'},
            '_order': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'content': ('mezzanine.core.fields.RichTextField', [], {}),
            'gallery': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['project.ProjectImage']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['project.Project']"}),
            'video': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['project']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_projectstep_title
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'ProjectStep.title'
        db.add_column('project_projectstep', 'title',
                      self.gf('django.db.models.fields.CharField')(default='', max_length=500),
                      keep_default=False)
        for step in orm.models['project.projectstep'].objects.iterator():
            step.title = u' '.join(
                ('Step', unicode(step._order + 1), 'of', step.project.title)
            )
            step.save()

    def backwards(self, orm):
        # Deleting field 'ProjectStep.title'
        db.delete_column('project_projectstep', 'title')

    models = {
        'actstream.action': {
            'Meta': {'ordering': "('-timestamp',)", 'object_name': 'Action'},
            'action_object_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'action_object'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'action_object_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'actor_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'actor'", 'to': "orm['contenttypes.ContentType']"}),
            'actor_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'target_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'target'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'target_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'verb': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'blog.blogcategory': {
            'Meta': {'ordering': "('title',)", 'object_name': 'BlogCategory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'generic.assignedkeyword': {
            'Meta': {'ordering': "('_order',)", 'object_name': 'AssignedKeyword'},
            '_order': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keyword': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'assignments'", 'to': "orm['generic.Keyword']"}),
            'object_pk': ('django.db.models.fields.IntegerField', [], {})
        },
        'generic.keyword': {
            'Meta': {'object_name': 'Keyword'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'project.featuredproject': {
            'Meta': {'ordering': "['-featured_start_date']", 'object_name': 'FeaturedProject'},
            'byline': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'featured_start_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 2, 26, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'photo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'project': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['project.Project']", 'unique': 'True'})
        },
        'project.project': {
            'Meta': {'object_name': 'Project'},
            '_meta_title': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'categories': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'projects'", 'symmetrical': 'False', 'to': "orm['blog.BlogCategory']"}),
            'created_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'expiry_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'featured_photo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'featured_video': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
            'featured_video_thumbnail': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'gen_description': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_sitemap': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'keywords': ('mezzanine.generic.fields.KeywordsField', [], {'object_id_field': "'object_pk'", 'to': "orm['generic.AssignedKeyword']", 'frozen_by_south': 'True'}),
            'keywords_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'modified_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'publish_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'short_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'tldr': ('mezzanine.core.fields.RichTextField', [], {}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'projects'", 'to': "orm['auth.User']"})
        },
        'project.projectimage': {
            'Meta': {'object_name': 'ProjectImage'},
            'file': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'project.projectstep': {
            'Meta': {'ordering': "('_order',)", 'object_name': 'ProjectStep'},
            '_order': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'content': ('mezzanine.core.fields.RichTextField', [], {}),
            'gallery': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['project.ProjectImage']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'steps'", 'to': "orm['project.Project']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'video': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['project']
########NEW FILE########
__FILENAME__ = models
from os.path import split as path_split
from collections import Iterable

from django.db import models
from django.conf import settings
from django.core.urlresolvers import reverse

from mezzanine.core.models import (Displayable, Ownable, Orderable, RichText,
    CONTENT_STATUS_DRAFT, CONTENT_STATUS_PUBLISHED)
from mezzanine.core.fields import RichTextField
from mezzanine.utils.models import AdminThumbMixin
from mezzanine.utils.timezone import now
from mezzanine.blog.models import BlogCategory
from mezzanine.core.templatetags.mezzanine_tags import thumbnail

from raspberryio.project.utils import get_youtube_video_id


class Project(Displayable, Ownable, AdminThumbMixin):
    """
    A project submission
    """

    featured_photo = models.ImageField('Cover Photo',
        upload_to='images/project_featured_photos', blank=True, null=True,
        help_text='Upload an image for the home page. Suggested ' \
                  'dimensions are 1252x626px and max 5MB filesize.'
    )
    featured_video = models.URLField(blank=True, default='',
                                     help_text='Youtube Video URL')
    featured_video_thumbnail = models.ImageField(
        upload_to='images/project_featured_video_thumbnails',
        blank=True, null=True, editable=False
    )
    tldr = RichTextField('Description',
        help_text='A description of your project as a whole.'
    )
    categories = models.ManyToManyField(BlogCategory, related_name='projects')
    score = models.IntegerField(default=0)
    created_datetime = models.DateTimeField('Created')
    modified_datetime = models.DateTimeField('Modified')

    admin_thumb_field = 'featured_photo'

    def save(self, *args, **kwargs):
        # Set project as draft by default
        if not self.id:
            self.status = CONTENT_STATUS_DRAFT
        # Set created and modified datetimes if not provided.
        if not self.id:
            self.created_datetime = now()
        self.modified_datetime = now()
        super(Project, self).save(*args, **kwargs)

    def is_published(self, request=None):
        """
        Returns True/False if the Project is published for the user in the
        given request. Staff users can see any projects while regular users can
        see any of their own projects

        If no request is given, or the user is not staff and viewing another
        user's project, returns True if publish_date <= now() and status ==
        CONTENT_STATUS_PUBLISHED otherwise False.
        """
        if request is not None:
            if request.user.is_staff or request.user == self.user:
                return True
        return (self.publish_date <= now() and
            self.status == CONTENT_STATUS_PUBLISHED)

    @property
    def video_id(self):
        """Extract Video ID."""
        if self.featured_video:
            return get_youtube_video_id(self.featured_video)

    @property
    def embed_url(self):
        """HTML5 embed url."""
        if self.video_id:
            return 'http://www.youtube.com/embed/%s?wmode=transparent' % self.video_id
        return None

    @models.permalink
    def get_absolute_url(self):
        return ('project-detail', [self.slug])

    def __unicode__(self):
        return unicode(self.title)


class ProjectStep(Orderable, RichText):
    """
    A step in the process of creating the project
    """

    project = models.ForeignKey('Project', related_name='steps')
    title = models.CharField(max_length=500)
    gallery = models.ManyToManyField('ProjectImage', blank=True, null=True)
    video = models.URLField(blank=True, default='',
                            help_text='Enter a valid Youtube URL')

    search_classname = 'Project Step'

    class Meta(object):
        order_with_respect_to = 'project'

    def is_editable(self, request):
        """
        Restrict in-line editing to the owner of the project and superusers.

        N.B. This is implemented for projects in Ownable.is_editable
        """
        user = request.user
        return user.is_superuser or user.id == self.project.user_id

    @property
    def get_steps_count(self):
        return self.project.steps.count()

    @property
    def get_order_display(self):
        return self._order + 1

    @property
    def order(self):
        return self._order

    @models.permalink
    def get_absolute_url(self):
        # FIXME: Change to project_step_detail if/when implemented
        return ('project-detail', [self.project.slug])

    @property
    def video_id(self):
        """Extract Video ID."""
        if self.video:
            return get_youtube_video_id(self.video)

    @property
    def embed_url(self):
        """HTML5 embed url."""
        if self.video_id:
            return 'http://www.youtube.com/embed/%s?wmode=transparent' % self.video_id
        return None

    def __unicode__(self):
        return u'Step {0} of project {1}'.format(
            self._order, self.project.title
        )


class ProjectCategory(BlogCategory):
    class Meta(object):
        proxy = True


class ProjectImage(models.Model):
    file = models.ImageField(
        upload_to='images/project_gallery_images', editable=False
    )

    def get_filename(self):
        """The image's filename (without its path)"""
        return path_split(self.file.name)[-1] if self.file.name else ''

    def get_delete_url(self):
        """A url to handle deletion of the image and its model via AJAX"""
        return reverse('gallery-image-delete', args=(self.id,))

    def get_absolute_url(self):
        """A url that serves the image file"""
        return settings.MEDIA_URL + self.file.name.replace(' ', '_')

    def get_thumbnail_url(self):
        """
        A url that serves the thumbnail of the image (Creates one if none yet
        exists)
        """
        # FIXME: Make the parameters configurable
        return settings.MEDIA_URL + thumbnail(
            self.get_absolute_url(), 400, 200
        )

    def get_image_data(self):
        """Provide image data needed by jQuery File Upload templates"""
        return {
            'id': self.id,
            'name': self.get_filename(),
            'size': self.file.size,
            'url': self.get_absolute_url(),
            'thumbnail_url': self.get_thumbnail_url(),
            'delete_url': self.get_delete_url(),
            'delete_type': 'DELETE'
        }

    @classmethod
    def serialize(kls, images):
        """
        Given a ProjectImage or an iterable of ProjectImages, return a
        dictionary of the image(s) files data in the format:
            {'files': [
                {
                    'id': image.id,
                    'name': image.get_filename, ...
                }, ...
            ]}
        """
        files_data = [image.get_image_data() for image in images] \
            if isinstance(images, Iterable) else [images.get_image_data()]
        return {'files': files_data}


class FeaturedProject(models.Model):
    "A Project annotated for featuring on the Home Page"
    project = models.OneToOneField("project.Project")
    byline = models.CharField(max_length=50,
                help_text='A terse description to be used on the home page.'
                )
    photo = models.ImageField(upload_to='images/project_featured_photos',
                help_text='Upload an image for the home page. Suggested ' \
                          'dimensions are 1252x626px and max 5MB filesize.')
    featured_start_date = models.DateTimeField(default=now(),
                help_text='Date the Project will start being featured on the' \
                          'homepage.')

    class Meta:
        ordering = ['-featured_start_date']

########NEW FILE########
__FILENAME__ = project_tags
from django import template

from mezzanine.core.models import CONTENT_STATUS_PUBLISHED
from mezzanine.utils.timezone import now

from raspberryio.project.models import FeaturedProject

register = template.Library()

class FeaturedProjectNode(template.Node):

    def __init__(self, num):
        self.num = num

    def render(self, context):
        featured = FeaturedProject.objects.filter(
                        featured_start_date__lte=now(),
                        project__publish_date__lte=now(),
                        project__status=CONTENT_STATUS_PUBLISHED
                        )
        context['featured_projects'] = featured[:self.num]
        return ''


@register.tag
def featured_projects(parser, token):
    try:
        tag_name, number = token.split_contents()
    except ValueError:
        raise template.TemplateSyntaxError("%r tag requires a single argument" % token.contents.split()[0])
    try:
        int(number)
    except ValueError:
        raise template.TemplateSyntaxError("%r tag's argument should be an integer" % tag_name)
    return FeaturedProjectNode(number)

########NEW FILE########
__FILENAME__ = verbatim
from django import template

register = template.Library()

"""
Taken from: https://gist.github.com/andrusha/2409775

jQuery templates use constructs like:

    {{if condition}} print something{{/if}}

Or like:

    {% if condition %} print {%=object.something %}{% endif %}

This, of course, completely screws up Django templates,
because Django thinks {{ and }} mean something.

Wrap {% verbatim %} and {% endverbatim %} around those
blocks of jQuery templates and this will try its best
to output the contents with no changes.
"""


class VerbatimNode(template.Node):

    def __init__(self, text):
        self.text = text

    def render(self, context):
        return self.text


@register.tag
def verbatim(parser, token):
    text = []
    while 1:
        token = parser.tokens.pop(0)
        if token.contents == 'endverbatim':
            break
        if token.token_type == template.TOKEN_VAR:
            text.append('{{ ')
        elif token.token_type == template.TOKEN_BLOCK:
            text.append('{%')
        text.append(token.contents)
        if token.token_type == template.TOKEN_VAR:
            text.append(' }}')
        elif token.token_type == template.TOKEN_BLOCK:
            if not text[-1].startswith('='):
                text[-1:-1] = [' ']
            text.append(' %}')
    return VerbatimNode(''.join(text))

########NEW FILE########
__FILENAME__ = base
from django.contrib.sites.models import Site as DjangoSite
from django.core.files.base import ContentFile

from hilbert.test import TestCase
from mezzanine.utils.sites import current_site_id

from raspberryio.project import models as project


class RaspberryIOBaseTestCase(TestCase):
    """
    Base TestCase class that provides utilities throughout the raspberryio
    project.
    """

    def create_instance(self, ModelClass, **kwargs):
        """
        Given ModelClass, validate, create and return an model instance of that
        type. Takes `defaults` as a dictionary of default values. Any
        other kwargs override the provided defaults. E.g. defaults can be
        provided in test helper methods but overriden when called, as needed:

        Example:
            create_item = create_instance(Item, default={'title': 'generic'})
            ...
            a = create_item()
            b = create_item(title='flower')
            print (a.title, b.title)
            Out: ('generic', 'flower')
        """
        defaults = kwargs.pop('defaults', {})
        defaults.update(kwargs)
        instance = ModelClass(**defaults)
        instance.clean()
        instance.save()
        return instance

    def create_site(self, **kwargs):
        defaults = {
            'name': self.get_random_string(),
            'domain': self.get_random_string(),
        }
        return self.create_instance(DjangoSite, defaults=defaults, **kwargs)

    def create_superuser(self, data=None):
        data = data or {}
        user = self.create_user(data=data)
        user.is_superuser = True
        user.is_staff = True
        user.save()
        return user

    def get_current_site(self):
        return DjangoSite.objects.get(id=current_site_id())


class ProjectBaseTestCase(RaspberryIOBaseTestCase):

    def create_project(self, **kwargs):
        defaults = {
            'title': self.get_random_string(length=500),
            'site': kwargs.pop('site', self.create_site()),
            'user': kwargs.pop('user', self.create_user()),
        }
        instance = self.create_instance(
            project.Project, defaults=defaults, **kwargs
        )
        if 'status' in kwargs:
            instance.status = kwargs['status']
            instance.save()
        return instance

    def create_project_step(self, **kwargs):
        defaults = {
            'project': kwargs.pop('project', self.create_project()),
            'title': self.get_random_string(length=500),
            'content': self.get_random_string(),
        }
        return self.create_instance(
            project.ProjectStep, defaults=defaults, **kwargs
        )

    def create_project_category(self, **kwargs):
        defaults = {
            'title': kwargs.pop('title', self.get_random_string()),
        }
        return self.create_instance(
            project.ProjectCategory, defaults=defaults, **kwargs
        )

    def create_file(self, **kwargs):
        filename = kwargs.pop('filename', 'test.jpg')
        content = kwargs.pop('content', self.get_random_string())
        temp_file = ContentFile(content)
        temp_file.name = filename
        return temp_file

    def create_project_image(self, **kwargs):
        defaults = {
            'file': kwargs.pop('file', self.create_file()),
        }
        project_step = kwargs.pop('project_step', None)
        project_image = self.create_instance(
            project.ProjectImage, defaults=defaults, **kwargs
        )
        if project_step:
            project_step.gallery.add(project_image)
        return project_image

########NEW FILE########
__FILENAME__ = test_forms
from django.test.client import RequestFactory

from raspberryio.project.tests.base import ProjectBaseTestCase
from raspberryio.project.forms import ProjectImageForm, ProjectStepForm


class ProjectFormTestCase(ProjectBaseTestCase):

    def setUp(self):
        self.request_factory = RequestFactory()
        self.project = self.create_project()

    def test_placeholder_labels(self):
        request = self.request_factory.get('/')
        form = ProjectStepForm()
        # first assert that label is shown
        self.assertEqual(form.fields['title'].label, 'Title')
        form.Meta.remove_labels = True
        form = ProjectStepForm(request.GET, instance=self.project)
        # now assert that Meta attribute removes it
        self.assertEqual(form.fields['title'].label, '')

class ProjectStepFormTestCase(ProjectBaseTestCase):

    def setUp(self):
        self.request_factory = RequestFactory()
        self.project = self.create_project()
        self.project_step = self.create_project_step(project=self.project)

    def test_no_content(self):
        request = self.request_factory.post('/', {})
        form = ProjectStepForm(request.POST, instance=self.project_step)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['content'], ['This field is required.'])

    def test_images_empty(self):
        post_data = {
            'title': self.get_random_string(),
            'content': self.get_random_string(),
            'images': []
        }
        request = self.request_factory.post('/', post_data)
        form = ProjectStepForm(request.POST, instance=self.project_step)
        if form.is_valid():
            project_step = form.save()
            self.assertEqual(project_step.gallery.count(), 0)
        else:
            self.fail('Form should be valid')

    def test_images_bad_format(self):
        self.create_project_image()
        post_data = {
            'title': self.get_random_string(),
            'content': self.get_random_string(),
            'images': ['not']
        }
        request = self.request_factory.post('/', post_data)
        form = ProjectStepForm(request.POST, instance=self.project_step)
        if form.is_valid():
            project_step = form.save()
            self.assertEqual(list(project_step.gallery.all()), [])
        else:
            self.fail('Form should be valid')

    def test_images_bad_ids(self):
        self.create_project_image()
        post_data = {
            'title': self.get_random_string(),
            'content': self.get_random_string(),
            'images': ['99,100']
        }
        request = self.request_factory.post('/', post_data)
        form = ProjectStepForm(request.POST, instance=self.project_step)
        if form.is_valid():
            project_step = form.save()
            self.assertEqual(list(project_step.gallery.all()), [])
        else:
            self.fail('Form should be valid')

    def test_images_valid(self):
        project_image = self.create_project_image()
        post_data = {
            'title': self.get_random_string(),
            'content': self.get_random_string(),
            'images': [str(project_image.id)]
        }
        request = self.request_factory.post('/', post_data)
        form = ProjectStepForm(request.POST, instance=self.project_step)
        if form.is_valid():
            project_step = form.save()
            self.assertEqual(list(project_step.gallery.all()), [project_image])
        else:
            self.fail('Form should be valid')

    def test_multiple_images_valid(self):
        project_image1 = self.create_project_image()
        project_image2 = self.create_project_image()
        project_images = (project_image1, project_image2)
        post_data = {
            'title': self.get_random_string(),
            'content': self.get_random_string(),
            'images': ','.join([str(image.id) for image in project_images])
        }
        request = self.request_factory.post('/', post_data)
        form = ProjectStepForm(request.POST, instance=self.project_step)
        if form.is_valid():
            project_step = form.save()
            self.assertEqual(tuple(project_step.gallery.all()), project_images)
        else:
            self.fail('Form should be valid')

    def test_bad_video_url(self):
        post_data = {
            'title': self.get_random_string(),
            'content': self.get_random_string(),
            'video': 'http://example.com/badurl',
        }
        request = self.request_factory.post('/', post_data)
        form = ProjectStepForm(request.POST, instance=self.project_step)
        self.assertFalse(form.is_valid())


class ProjectImageFormTestCase(ProjectBaseTestCase):

    def setUp(self):
        self.request_factory = RequestFactory()
        self.project = self.create_project()

    def test_valid_file_upload(self):
        filename = self.get_random_string()
        f = self.create_file(filename=filename)
        request = self.request_factory.post('/', {'file': f})
        request.is_ajax = True
        form = ProjectImageForm(request.POST, request.FILES)
        if form.is_valid():
            instance = form.save()
            self.assertEqual(instance.get_filename(), filename)
        else:
            self.fail('Form should be valid')

    def test_invalid_upload(self):
        request = self.request_factory.post('/', {'filez': self.create_file()})
        request.is_ajax = True
        form = ProjectImageForm(request.POST or None, request.FILES or None)
        self.assertFalse(form.is_valid())

    def test_no_file(self):
        request = self.request_factory.post('/', {})
        request.is_ajax = True
        form = ProjectImageForm(request.POST or None, request.FILES or None)
        self.assertFalse(form.is_valid())

########NEW FILE########
__FILENAME__ = test_models
from datetime import timedelta

from django.core.urlresolvers import reverse
from django.test.client import RequestFactory

from mezzanine.utils.timezone import now
from mezzanine.core.models import (CONTENT_STATUS_PUBLISHED,
    CONTENT_STATUS_DRAFT)

from raspberryio.project.tests.base import ProjectBaseTestCase


class ProjectTestCase(ProjectBaseTestCase):

    def setUp(self):
        self.project = self.create_project()

    def test_is_published(self):
        self.project.status = CONTENT_STATUS_PUBLISHED
        self.project.save()
        self.assertTrue(self.project.is_published(),
            'Should return True since the default publish_date is past and the status is "Published"'
        )

    def test_is_published_false(self):
        self.project.publish_date = now() + timedelta(minutes=1)
        self.project.save()
        self.assertFalse(self.project.is_published(),
            'Should return False if publish_date is in the future'
        )
        self.project.publish_date = now() - timedelta(minutes=1)
        self.project.status = CONTENT_STATUS_DRAFT
        self.project.save()
        self.assertFalse(self.project.is_published(),
            'Should return False if status is "Draft"'
        )
        self.project_publish_date = now() + timedelta(minutes=1)
        self.project.save()
        self.assertFalse(self.project.is_published(),
            'Should return False if status is "Draft" and publish_date is in the future'
        )

    def test_default_draft(self):
        self.assertEqual(self.project.status, CONTENT_STATUS_DRAFT)

    def test_video_params(self):
        # first test that garbage input doesn't work
        self.assertEqual(self.project.embed_url, None)
        # now test a real video URL
        video_id = "6BbufUp_HNs"
        video_url = "http://www.youtube.com/watch?v=%s" % video_id
        project = self.create_project(featured_video=video_url)
        self.assertEqual(project.video_id, video_id)
        self.assertEqual(project.embed_url, 'http://www.youtube.com/embed/%s?wmode=transparent' % video_id)

class ProjectStepTestCase(ProjectBaseTestCase):

    def setUp(self):
        self.user = self.create_user()
        self.project = self.create_project(user=self.user)
        self.project_step = self.create_project_step(project=self.project)
        self.request_factory = RequestFactory()

    def test_is_editable_project_user(self):
        request = self.request_factory.get('/')
        request.user = self.project.user
        self.assertTrue(
            self.project_step.is_editable(request),
            'A user should be able to edit the project steps of their own project',
        )

    def test_is_editable_not_project_user(self):
        request = self.request_factory.get('/')
        request.user = self.create_user()
        self.assertFalse(
            self.project_step.is_editable(request),
            "A user should not be able to edit the project steps of another user's project",
        )

    def test_is_editable_superuser(self):
        request = self.request_factory.get('/')
        request.user = self.create_superuser()
        self.assertTrue(
            self.project_step.is_editable(request),
            'Superusers should be able to edit any project step',
        )

    def test_get_steps_count_property(self):
        self.assertEqual(self.project_step.get_steps_count, 1)
        self.create_project_step(project=self.project)
        self.assertEqual(self.project_step.get_steps_count, 2)
        self.create_project_step()
        self.assertEqual(self.project_step.get_steps_count, 2,
            "step count shouldn't change when step is added to a different project"
        )

    def test_order_property(self):
        """Assure the order property provides the _order value"""
        self.assertEqual(self.project_step.order, self.project_step._order)
        project_step2 = self.create_project_step(project=self.project)
        self.assertEqual(project_step2.order, project_step2._order)

    def test_get_order_display(self):
        """Assure the get_order_display method provides the _order value + 1"""
        self.assertEqual(
            self.project_step.get_order_display, self.project_step._order + 1
        )
        project_step2 = self.create_project_step(project=self.project)
        self.assertEqual(
            project_step2.get_order_display, project_step2._order + 1
        )

    def test_order_number(self):
        """
        Assure the proper order number is assigned to new ProjectSteps. (This
        should happen from built-in Mezzanine functionality as long as
        Meta:order_with_respect_to points to the Project FK)
        """
        project2 = self.create_project(user=self.user)
        # Create two steps in each of the two projects
        project1_step0 = self.project_step
        project2_step0 = self.create_project_step(project=project2)
        project1_step1 = self.create_project_step(project=self.project)
        project2_step1 = self.create_project_step(project=project2)
        # Assure the order numbers for the steps are unique per project
        self.assertEqual(project1_step0._order, 0)
        self.assertEqual(project1_step1._order, 1)
        self.assertEqual(project2_step0._order, 0)
        self.assertEqual(project2_step1._order, 1)

    def test_absolute_url(self):
        self.assertEqual(self.project_step.get_absolute_url(),
                         reverse('project-detail', args=[self.project.slug]))

    def test_video_params(self):
        # first test that garbage input doesn't work
        self.assertEqual(self.project_step.embed_url, None)
        # now test a real video URL
        video_id = "6BbufUp_HNs"
        video_url = "http://www.youtube.com/watch?v=%s" % video_id
        project_step = self.create_project_step(video=video_url)
        self.assertEqual(project_step.video_id, video_id)
        self.assertEqual(project_step.embed_url, 'http://www.youtube.com/embed/%s?wmode=transparent' % video_id)

    def test_unicode_method(self):
        unicode = 'Step %d of project %s' % (self.project_step._order, self.project.title)
        self.assertEqual(self.project_step.__unicode__(), unicode)

########NEW FILE########
__FILENAME__ = test_utils
import unittest

from raspberryio.project.utils import YOUTUBE_DOMAINS, get_youtube_video_id


class GetYoutubeVideoIdTestCase(unittest.TestCase):
    "Test the utility that extracts a video id from a YouTube URL"

    def test_valid_domains(self):
        vid = 'dummy'
        for domain in YOUTUBE_DOMAINS[:3]:
            url = 'http://%s/watch?v=%s' % (domain, vid)
            video_id = get_youtube_video_id(url)
            self.assertEqual(vid, video_id)
        short_url = 'http://%s/%s' % (YOUTUBE_DOMAINS[3], vid)
        video_id = get_youtube_video_id(short_url)
        self.assertEqual(vid, video_id)

    def test_invalidvalid_domains(self):
        vid = 'dummy'
        url = 'http://notyoutube.com/watch?v=%s' % vid
        video_id = get_youtube_video_id(url)
        self.assertEqual('', video_id)

########NEW FILE########
__FILENAME__ = test_views
import json
from datetime import timedelta

from django.core.urlresolvers import reverse
from django.core.cache import cache

from hilbert.test import ViewTestMixin, AuthViewMixin

from actstream.models import Action

from mezzanine.utils.timezone import now
from mezzanine.core.models import (CONTENT_STATUS_PUBLISHED,
    CONTENT_STATUS_DRAFT)

from raspberryio.project.tests.base import ProjectBaseTestCase
from raspberryio.project.models import Project, ProjectStep, ProjectImage


class ProjectDetailViewTestCase(ViewTestMixin, ProjectBaseTestCase):
    url_name = 'project-detail'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        self.project = self.create_project(user=self.user)
        # Status is set to DRAFT on first save. Needs to be published for the
        # detail view to display the project.
        self.project.status = CONTENT_STATUS_PUBLISHED
        self.project.save()
        super(ProjectDetailViewTestCase, self).setUp()

    def get_url_args(self):
        return (self.project.slug,)

    def test_draft_hidden_other_user(self):
        other_user = self.create_user(data={'password': 'password'})
        # Project status is draft
        self.project.status = CONTENT_STATUS_DRAFT
        self.project.save()
        self.client.login(username=other_user.username, password='password')
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 404)
        # Project status is published, but publish_date is in the future
        self.project.status = CONTENT_STATUS_PUBLISHED
        self.project.publish_date = now() + timedelta(minutes=1)
        self.project.save()
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 404)

    def test_draft_visible_projectuser(self):
        # Project status is draft
        self.project.status = CONTENT_STATUS_DRAFT
        self.project.save()
        self.client.login(username=self.user.username, password='password')
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)
        # Project status is published, but publish_date is in the future
        self.project.status = CONTENT_STATUS_PUBLISHED
        self.project.publish_date = now() + timedelta(minutes=1)
        self.project.save()
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)

    def test_draft_visible_superuser(self):
        super_user = self.create_superuser(data={'password': 'password'})
        # Project status is draft
        self.project.status = CONTENT_STATUS_DRAFT
        self.project.save()
        self.client.login(username=super_user.username, password='password')
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)
        # Project status is published, but publish_date is in the future
        self.project.status = CONTENT_STATUS_PUBLISHED
        self.project.publish_date = now() + timedelta(minutes=1)
        self.project.save()
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)

    def test_bad_slug(self):
        response = self.client.get(reverse(self.url_name, args=['bad-slug']))
        self.assertEqual(response.status_code, 404)


class ProjectListViewTestCase(ViewTestMixin, ProjectBaseTestCase):
    url_name = 'project-list'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        self.project = self.create_project(
            user=self.user, status=CONTENT_STATUS_PUBLISHED
        )
        super(ProjectListViewTestCase, self).setUp()

    def test_hide_unpublished(self):
        self.client.login(username=self.user.username, password='password')
        self.project.status = CONTENT_STATUS_DRAFT
        self.project.save()
        response = self.client.get(self.url)
        projects = response.context['projects']
        self.assertQuerysetEqual(projects, [])

    def test_show_unpublished_to_superusers(self):
        super_user = self.create_superuser(data={'password': 'password'})
        self.client.login(username=super_user.username, password='password')
        self.project.status = CONTENT_STATUS_DRAFT
        self.project.save()
        response = self.client.get(self.url)
        projects = response.context['projects']
        self.assertEquals(list(projects), [self.project])


class ProjectCreateEditTestCase(AuthViewMixin, ProjectBaseTestCase):
    url_name = 'project-create-edit'

    def setUp(self):
        super(ProjectCreateEditTestCase, self).setUp()
        self.project = self.create_project(
            user=self.user, status=CONTENT_STATUS_PUBLISHED
        )

    def get_edit_url(self, project_slug=''):
        """
        self.url points to using the view for creating a new project. Use
        this helper to create a link to the edit view.
        """
        return reverse(
            self.url_name, args=(project_slug or self.project.slug,)
        )

    def test_other_user_cannot_edit(self):
        other_user = self.create_user(data={'password': 'password'})
        self.client.login(username=other_user.username, password='password')
        url = self.get_edit_url()
        response = self.client.get(url)
        self.assertEqual(response.status_code, 403)

    def test_superuser_can_edit(self):
        super_user = self.create_superuser(data={'password': 'password'})
        self.client.login(username=super_user.username, password='password')
        url = self.get_edit_url()
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)

    def test_bad_slug(self):
        url = self.get_edit_url('bad-slug')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_create_valid(self):
        form_data = {
            'title': 'new-project',
            'tldr': self.get_random_string(),
            'categories': [self.create_project_category().id],
            'save': 'value',
        }
        response = self.client.post(self.url, form_data, follow=True)
        new_project = Project.objects.get(slug='new-project')
        url, status_code = response.redirect_chain[0]
        expected_url = reverse(
            'project-detail', args=[new_project.slug]
        )
        self.assertEqual(status_code, 302)
        self.assertTrue(expected_url in url,
            "Didn't redirect to {0}, redirected to {1}".format(expected_url, url)
        )

    def test_create_valid_and_add_steps(self):
        form_data = {
            'title': 'new-project',
            'tldr': self.get_random_string(),
            'categories': [self.create_project_category().id],
            'save-add-step': 'value',
        }
        response = self.client.post(self.url, form_data, follow=True)
        new_project = Project.objects.get(slug='new-project')
        url, status_code = response.redirect_chain[0]
        expected_url = reverse(
            'project-step-create-edit', args=[new_project.slug]
        )
        self.assertEqual(status_code, 302)
        self.assertTrue(expected_url in url,
            "Didn't redirect to {0}, redirected to {1}".format(expected_url, url)
        )

    def test_create_invalid(self):
        response = self.client.post(self.url, {'title': ''})
        project_form = response.context['project_form']
        self.assertEqual(response.status_code, 200)
        self.assertTrue(project_form.errors)

    def test_edit_valid_form(self):
        form_data = {
            'title': 'current-project',
            'tldr': self.get_random_string(),
            'categories': [self.create_project_category().id]
        }
        response = self.client.post(self.get_edit_url(), form_data, follow=True)
        current_project = Project.objects.get(title='current-project')
        url, status_code = response.redirect_chain[0]
        expected_url = reverse('project-detail', args=[current_project.slug])
        self.assertEqual(status_code, 302)
        self.assertTrue(expected_url in url,
            "Didn't redirect to {0}, redirected to {1}".format(expected_url, url)
        )

    def test_edit_invalid_form(self):
        response = self.client.post(self.get_edit_url(), {'title': ''})
        project_form = response.context['project_form']
        self.assertEqual(response.status_code, 200)
        self.assertTrue(project_form.errors)

    def test_edit_form_wrong_user(self):
        other_user = self.create_user(data={'password': 'password'})
        self.client.login(username=other_user.username, password='password')
        form_data = {
            'title': self.get_random_string(),
            'tldr': self.get_random_string(),
            'categories': [self.create_project_category().id]
        }
        response = self.client.post(self.get_edit_url(), form_data)
        self.assertEqual(response.status_code, 403)


class ProjectStepCreateEditTestCase(AuthViewMixin, ProjectBaseTestCase):
    url_name = 'project-step-create-edit'

    def setUp(self):
        self.project = self.create_project(status=CONTENT_STATUS_PUBLISHED)
        super(ProjectStepCreateEditTestCase, self).setUp()
        # AuthViews create and auto-login a user. Set the project to belong to
        # this user
        self.project.user = self.user
        self.project.save()

    def get_url_args(self):
        """ Sets the args for the create project step url set in self.url """
        return (self.project.slug,)

    def get_edit_url(self, project_slug, step_order):
        """
        self.url points to using the view for creating a new step. Use this
        helper to create a link to the edit view.
        """
        return reverse(self.url_name, args=(project_slug, step_order))

    def test_other_user_cannot_edit(self):
        other_user = self.create_user(data={'password': 'password'})
        self.client.login(username=other_user.username, password='password')
        project_step = self.create_project_step(project=self.project)
        url = self.get_edit_url(self.project.slug, project_step._order)
        response = self.client.get(url)
        self.assertEqual(response.status_code, 403)

    def test_superuser_can_edit(self):
        super_user = self.create_superuser(data={'password': 'password'})
        self.client.login(username=super_user.username, password='password')
        project_step = self.create_project_step(project=self.project)
        url = self.get_edit_url(self.project.slug, project_step._order)
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)

    def test_bad_project_slug(self):
        project_step = self.create_project_step(project=self.project)
        url = self.get_edit_url('bad-slug', project_step._order)
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_bad_order_number(self):
        project_step = self.create_project_step(project=self.project)
        url = self.get_edit_url(self.project.slug, 4)
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_create_valid(self):
        form_data = {
            'title': self.get_random_string(),
            'content': self.get_random_string(),
        }
        response = self.client.post(self.url, form_data)
        self.assertEqual(response.status_code, 302)

    def test_create_invalid(self):
        response = self.client.post(self.url, {
            'title': self.get_random_string(),
            'content': ''
        })
        project_step_form = response.context['project_step_form']
        self.assertEqual(response.status_code, 200)
        self.assertTrue(project_step_form.errors)

    def test_edit_valid_form(self):
        form_data = {
            'title': self.get_random_string(),
            'content': self.get_random_string(),
        }
        project_step = self.create_project_step(project=self.project)
        edit_url = self.get_edit_url(self.project.slug, project_step._order)
        response = self.client.post(edit_url, form_data, follow=True)
        url, status_code = response.redirect_chain[0]
        expected_url = reverse('project-detail', args=[self.project.slug])
        self.assertEqual(status_code, 302)
        self.assertTrue(expected_url in url,
            "Didn't redirect to {0}, redirected to {1}".format(expected_url, url)
        )

    def test_edit_invalid_form(self):
        project_step = self.create_project_step(project=self.project)
        edit_url = self.get_edit_url(self.project.slug, project_step._order)
        response = self.client.post(edit_url, {'content': ''})
        project_step_form = response.context['project_step_form']
        self.assertEqual(response.status_code, 200)
        self.assertTrue(project_step_form.errors)

    def test_edit_form_wrong_user(self):
        other_user = self.create_user(data={'password': 'password'})
        self.client.login(username=other_user.username, password='password')
        form_data = {
            'title': self.get_random_string(),
            'content': self.get_random_string(),
        }
        project_step = self.create_project_step(project=self.project)
        edit_url = self.get_edit_url(self.project.slug, project_step._order)
        response = self.client.post(edit_url, form_data)
        self.assertEqual(response.status_code, 403)

    def test_add_another_redirect(self):
        form_data = {
            'title': self.get_random_string(),
            'content': self.get_random_string(),
            'save-add': 'Anything',
        }
        project_step = self.create_project_step(project=self.project)
        edit_url = self.get_edit_url(self.project.slug, project_step._order)
        response = self.client.post(edit_url, form_data, follow=True)
        url, status_code = response.redirect_chain[0]
        expected_url = reverse(
            'project-step-create-edit', args=[self.project.slug]
        )
        self.assertEqual(status_code, 302)
        self.assertTrue(expected_url in url,
            "Didn't redirect to {0}, redirected to {1}".format(expected_url, url)
        )

    def test_redirect_after_limit(self):
        "Redirect to the Project Detail Page when attempting to add the 21st step"
        [self.create_project_step(project=self.project) for x in range(20)]
        response = self.client.get(self.url, follow=True)
        url, status_code = response.redirect_chain[0]
        expected_url = reverse('project-detail', args=[self.project.slug])
        self.assertEqual(status_code, 302)
        self.assertTrue(expected_url in url,
            "Didn't redirect to {0}, redirected to {1}".format(expected_url, url)
        )


class ProjectPublishViewTestCase(ProjectBaseTestCase):
    url_name = 'publish-project'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        self.project = self.create_project(user=self.user)
        self.url = reverse('publish-project', args=(self.project.slug,))

    def test_valid_publish(self):
        self.client.login(username=self.user.username, password='password')
        self.assertEqual(self.project.status, CONTENT_STATUS_DRAFT)
        response = self.client.post(self.url, {}, is_ajax=True)
        project = Project.objects.get(slug=self.project.slug)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(project.status, CONTENT_STATUS_PUBLISHED)

    def test_reject_non_project_user(self):
        other_user = self.create_user(data={'password': 'password'})
        self.client.login(username=other_user.username, password='password')
        self.assertEqual(self.project.status, CONTENT_STATUS_DRAFT)
        response = self.client.post(self.url, {}, is_ajax=True)
        project = Project.objects.get(slug=self.project.slug)
        self.assertEqual(response.status_code, 403)
        self.assertEqual(project.status, CONTENT_STATUS_DRAFT)

    def test_superuser_valid(self):
        superuser = self.create_superuser({'password': 'password'})
        self.client.login(username=superuser.username, password='password')
        self.assertEqual(self.project.status, CONTENT_STATUS_DRAFT)
        response = self.client.post(self.url, {}, is_ajax=True)
        project = Project.objects.get(slug=self.project.slug)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(project.status, CONTENT_STATUS_PUBLISHED)

    def test_invalid_slug(self):
        self.client.login(username=self.user.username, password='password')
        self.assertEqual(self.project.status, CONTENT_STATUS_DRAFT)
        url = reverse(self.url_name, args=('bad-project-slug',))
        response = self.client.post(url, {}, is_ajax=True)
        project = Project.objects.get(slug=self.project.slug)
        self.assertEqual(response.status_code, 404)
        self.assertEqual(project.status, CONTENT_STATUS_DRAFT)


class ProjectDeleteViewTestCase(AuthViewMixin, ProjectBaseTestCase):
    url_name = 'project-delete'

    def setUp(self):
        self.project = self.create_project()
        super(ProjectDeleteViewTestCase, self).setUp()
        self.project.user = self.user
        self.project.save()

    def get_url_args(self):
        return (self.project.id,)

    def test_bad_id(self):
        self.client.login(username=self.user.username, password='password')
        url = reverse(self.url_name, args=('999',))
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)
        self.assertEqual(Project.objects.count(), 1)

    def test_other_user_forbidden(self):
        other_user = self.create_user(data={'password': 'password'})
        self.client.login(username=other_user.username, password='password')
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 403)
        self.assertEqual(Project.objects.count(), 1)

    def test_superuser_allowed(self):
        superuser = self.create_superuser(data={'password': 'password'})
        self.client.login(username=superuser.username, password='password')
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(Project.objects.count(), 1)

    def test_delete_post_no_confirm(self):
        response = self.client.post(self.url, {'not_ok': 'not_ok'})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(Project.objects.count(), 1)

    def test_delete_confirm(self):
        response = self.client.post(self.url, {'ok': 'ok'})
        self.assertEqual(response.status_code, 302)
        self.assertEqual(Project.objects.count(), 0)


class ProjectStepDeleteViewTestCase(AuthViewMixin, ProjectBaseTestCase):
    url_name = 'project-step-delete'

    def setUp(self):
        self.project = self.create_project()
        self.project_step = self.create_project_step(project=self.project)
        super(ProjectStepDeleteViewTestCase, self).setUp()
        self.project.user = self.user
        self.project.save()

    def get_url_args(self):
        return (self.project_step.id,)

    def test_bad_id(self):
        self.client.login(username=self.user.username, password='password')
        url = reverse(self.url_name, args=('999',))
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)
        self.assertEqual(ProjectStep.objects.count(), 1)

    def test_other_user_forbidden(self):
        other_user = self.create_user(data={'password': 'password'})
        self.client.login(username=other_user.username, password='password')
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 403)
        self.assertEqual(ProjectStep.objects.count(), 1)

    def test_superuser_allowed(self):
        superuser = self.create_superuser(data={'password': 'password'})
        self.client.login(username=superuser.username, password='password')
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(ProjectStep.objects.count(), 1)

    def test_delete_post_no_confirm(self):
        response = self.client.post(self.url, {'not_ok': 'not_ok'})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(ProjectStep.objects.count(), 1)

    def test_delete_confirm(self):
        response = self.client.post(self.url, {'ok': 'ok'})
        self.assertEqual(response.status_code, 302)
        self.assertEqual(ProjectStep.objects.count(), 0)


class ProjectImageCreateViewTestCase(ProjectBaseTestCase):
    url_name = 'gallery-image-upload'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        self.client.login(username=self.user.username, password='password')
        self.url = reverse(self.url_name)

    def get_edit_url(self, project_slug, project_step_number):
        return reverse(self.url_name, args=(project_slug, project_step_number))

    def test_login_required(self):
        self.client.logout()
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 302)

    def test_ajax_required(self):
        response = self.client.get(self.url, is_ajax=False)
        self.assertEqual(response.status_code, 400)

    def test_no_data(self):
        response = self.client.post(self.url, {}, is_ajax=True)
        self.assertEqual(response.content, 'false')

    def test_bad_data(self):
        send_data = {
            'filez': self.get_random_string(),
        }
        response = self.client.post(self.url, send_data, is_ajax=True)
        self.assertEqual(response.content, 'false')

    def test_send_file(self):
        filename = self.get_random_string()
        f = self.create_file(filename=filename)
        send_data = {
            'file': f,
        }
        response = self.client.post(self.url, send_data, is_ajax=True)
        response_data = json.loads(response.content)
        response_image_data = response_data['files'][0]
        image = ProjectImage.objects.get(id=response_image_data['id'])
        self.assertEqual(response_image_data, image.get_image_data())
        self.assertEqual(filename, image.get_filename())

    def test_send_file_existing_step(self):
        filename = self.get_random_string()
        f = self.create_file(filename=filename)
        send_data = {
            'file': f,
        }
        project = self.create_project(user=self.user)
        project_step = self.create_project_step(project=project)
        url = self.get_edit_url(project.slug, project_step._order)
        response = self.client.post(url, send_data, is_ajax=True)
        response_data = json.loads(response.content)
        response_image_data = response_data['files'][0]
        image = ProjectImage.objects.get(id=response_image_data['id'])
        self.assertEqual(response_image_data, image.get_image_data())
        self.assertEqual(filename, image.get_filename())
        self.assertEqual(list(project_step.gallery.all()), [image])

    def test_send_file_no_project(self):
        project_step = self.create_project_step()
        url = self.get_edit_url('bad_slug', project_step._order)
        response = self.client.post(url, {}, is_ajax=True)
        self.assertEqual(response.status_code, 404)

    def test_send_file_no_project_step(self):
        project_step = self.create_project_step()
        url = self.get_edit_url(project_step.project.slug, 9999)
        response = self.client.post(url, {}, is_ajax=True)
        self.assertEqual(response.status_code, 404)

    def test_send_file_not_owner(self):
        other_user = self.create_user()
        project = self.create_project(user=other_user)
        project_step = self.create_project_step(project=project)
        url = self.get_edit_url(project.slug, project_step._order)
        response = self.client.post(url, {}, is_ajax=True)
        self.assertEqual(response.status_code, 403)

    def test_superuser_edit(self):
        superuser = self.create_superuser(data={'password': 'password'})
        self.client.login(username=superuser.username, password='password')
        project = self.create_project(user=self.user)
        project_step = self.create_project_step(project=project)
        url = self.get_edit_url(project.slug, project_step._order)
        filename = self.get_random_string()
        f = self.create_file(filename=filename)
        send_data = {
            'file': f,
        }
        response = self.client.post(url, send_data, is_ajax=True)
        response_data = json.loads(response.content)
        response_image_data = response_data['files'][0]
        image = ProjectImage.objects.get(id=response_image_data['id'])
        self.assertEqual(response_image_data, image.get_image_data())
        self.assertEqual(filename, image.get_filename())


class ProjectImageDownloadViewTestCase(ProjectBaseTestCase):
    url_name = 'gallery-image-download'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        self.client.login(username=self.user.username, password='password')
        self.project = self.create_project()
        self.project_step = self.create_project_step(project=self.project)
        url_args = (
            self.project.slug, self.project_step._order
        )
        self.url = reverse(self.url_name, args=url_args)

    def test_login_required(self):
        self.client.logout()
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 302)

    def test_ajax_required(self):
        response = self.client.get(self.url, is_ajax=False)
        self.assertEqual(response.status_code, 400)

    def test_invalid_project_slug(self):
        url_args = ('bad_slug', self.project_step._order)
        url = reverse(self.url_name, args=url_args)
        response = self.client.get(url, is_ajax=True)
        self.assertEqual(response.status_code, 404)

    def test_invalid_project_step_number(self):
        url_args = (self.project.slug, 999)
        url = reverse(self.url_name, args=url_args)
        response = self.client.get(url, is_ajax=True)
        self.assertEqual(response.status_code, 404)

    def test_empty_images(self):
        response = self.client.get(self.url, is_ajax=True)
        response_data = json.loads(response.content)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response_data['files'], [])

    def test_other_image(self):
        self.create_project_image()
        response = self.client.get(self.url, is_ajax=True)
        response_data = json.loads(response.content)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response_data['files'], [],
            'image should not return because it is not associated with this project step'
        )

    def test_one_image(self):
        project_image = self.create_project_image(
            project_step=self.project_step
        )
        response = self.client.get(self.url, is_ajax=True)
        response_data = json.loads(response.content)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(
            response_data['files'], [project_image.get_image_data()],
            'Response should contain the image data for one image'
        )

    def test_multiple_images(self):
        project_image1 = self.create_project_image(
            project_step=self.project_step
        )
        project_image2 = self.create_project_image(
            project_step=self.project_step
        )
        project_image3 = self.create_project_image(
            project_step=self.project_step
        )
        project_images = (project_image1, project_image2, project_image3)
        response = self.client.get(self.url, is_ajax=True)
        response_data = json.loads(response.content)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response_data, ProjectImage.serialize(project_images),
            'Response should contain the image data for images 1-3'
        )


class ProjectImageDeleteViewTestCase(ProjectBaseTestCase):
    url_name = 'gallery-image-delete'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        self.client.login(username=self.user.username, password='password')
        self.project_image = self.create_project_image()
        self.url = reverse(self.url_name, args=(self.project_image.id,))

    def test_login_required(self):
        self.client.logout()
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 302)

    def test_ajax_required(self):
        response = self.client.get(self.url, is_ajax=False)
        self.assertEqual(response.status_code, 400)

    def test_wrong_user(self):
        project = self.create_project()
        project_step = self.create_project_step(project=project)
        project_step.gallery.add(self.project_image)
        other_user = self.create_user(data={'password': 'password'})
        self.client.login(username=other_user.username, password='password')
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 403)

    def test_wrong_user_no_project_step(self):
        other_user = self.create_user(data={'password': 'password'})
        self.client.login(username=other_user.username, password='password')
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, 'true')

    def test_bad_id(self):
        url = reverse(self.url_name, args=(999,))
        response = self.client.get(url, is_ajax=True)
        self.assertEqual(response.status_code, 404)

    def test_no_image(self):
        self.project_image.delete()
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 404)

    def test_has_project_step_other_user(self):
        other_user = self.create_user()
        project = self.create_project(user=other_user)
        project_step = self.create_project_step(project=project)
        project_step.gallery.add(self.project_image)
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 403)
        self.assertEqual(
            list(ProjectImage.objects.all()), [self.project_image]
        )

    def test_has_project_step_current_user(self):
        project = self.create_project(user=self.user)
        project_step = self.create_project_step(project=project)
        project_step.gallery.add(self.project_image)
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, 'true')
        self.assertEqual(list(project_step.gallery.all()), [])
        self.assertEqual(list(ProjectImage.objects.all()), [])

    def test_no_project_step(self):
        project = self.create_project(user=self.user)
        project_step = self.create_project_step(project=project)
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, 'true')
        self.assertEqual(list(project_step.gallery.all()), [])
        self.assertEqual(list(ProjectImage.objects.all()), [])


class IndexTestCase(ProjectBaseTestCase):
    url_name = 'home'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        self.user1 = self.create_user(data={'password': 'password'})
        self.user.actor_actions.add(Action())
        self.user.actor_actions.add(Action())
        self.user1.actor_actions.add(Action())
        self.url = reverse(self.url_name)

    def tearDown(self):
        cache.clear()

    def test_active_users(self):
        response = self.client.get(self.url)
        self.assertEqual(2, len(response.context['active_users']))
        self.user.is_active = False
        self.user.save()
        response = self.client.get(self.url)
        self.assertEqual(1, len(response.context['active_users']))

    def test_sorted_active_users(self):
        user2 = self.create_user(data={'password': 'password'})
        user2.actor_actions.add(Action())
        user2.actor_actions.add(Action())
        user2.actor_actions.add(Action())
        expected_active_users = [user2, self.user, self.user1]
        response = self.client.get(self.url)
        self.assertEqual(
            expected_active_users, response.context['active_users']
        )


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, url


urlpatterns = patterns('raspberryio.project.views',
    # Project list
    url(r'^$', 'project_list', name='project-list'),
    # Project detail
    url(
        r'^view/(?P<project_slug>[\w-]+)/$',
        'project_detail', name='project-detail'
    ),
    # Create project
    url(r'^add/$', 'project_create_edit', name='project-create-edit'),
    # Edit project
    url(
        r'^edit/(?P<project_slug>[\w-]+)/$', 'project_create_edit',
        name='project-create-edit'
    ),
    # Create project step
    url(
        r'^add-step/(?P<project_slug>[\w-]+)/$', 'project_step_create_edit',
        name='project-step-create-edit'
    ),
    # Edit project step
    url(
        r'^edit-step/(?P<project_slug>[\w-]+)/(?P<project_step_number>[\d]+)/$',
        'project_step_create_edit',
        name='project-step-create-edit'
    ),

    # Delete project
    url(
        r'^delete/(?P<project_pk>[\d]+)/$', 'project_delete',
        name='project-delete'
    ),
    # Delete project step
    url(
        r'^delete-step/(?P<project_step_pk>[\d]+)/$', 'project_step_delete',
        name='project-step-delete'
    ),

    # --- Ajax views

    # Publish a project
    url(
        r'^publish/(?P<project_slug>[\w-]+)/$', 'publish_project',
        name='publish-project'
    ),

    # Upload, download, or delete Gallery Images
    url(
        r'^add-image/' + \
        '(?:(?P<project_slug>[\w-]+)/)?/(?:(?P<project_step_number>[\d]+)/)?$',
        'gallery_image_create', name='gallery-image-upload',
    ),
    url(
        r'^image/(?P<project_slug>[\w-]+)/(?P<project_step_number>[\d]+)/$',
        'gallery_image_download', name='gallery-image-download',
    ),
    url(
        r'^delete-image/(?P<project_image_id>\d+)/$',
        'gallery_image_delete', name='gallery-image-delete',
    ),
)

########NEW FILE########
__FILENAME__ = utils
from functools import wraps
from collections import Counter
from datetime import timedelta
from operator import itemgetter
import urlparse

from django.contrib.auth.models import User
from django.http import HttpResponse
from django.utils import simplejson
from django.views.decorators.cache import cache_page

from actstream.models import Action
from mezzanine.utils.timezone import now


YOUTUBE_SHORT_URL = "youtu.be"

YOUTUBE_DOMAINS = ("www.youtube.com",
                   "youtube.com",
                   "m.youtube.com",
                   YOUTUBE_SHORT_URL
                   )


def get_youtube_video_id(url):
    "Consumes a URL and extracts the video id"
    video_id = ''
    data = urlparse.urlparse(url)
    if data.netloc.lower() in YOUTUBE_DOMAINS:
        if data.netloc.lower() != YOUTUBE_SHORT_URL:
            query = urlparse.parse_qs(data.query)
            video_id = query.get('v', '')[0]
        else:
            video_id = data.path.split('/')[1]
    return video_id


class AjaxResponse(HttpResponse):
    """Like hilbert.JsonResponse but uses text/plain for junky browsers"""

    def __init__(self, request, obj='', *args, **kwargs):
        content = simplejson.dumps(obj, {})
        http_accept = request.META.get('HTTP_ACCEPT', 'application/json')
        mimetype = 'application/json' \
            if 'application/json' in http_accept else 'text/plain'
        super(AjaxResponse, self).__init__(content, mimetype, *args, **kwargs)
        self['Content-Disposition'] = 'inline; filename=files.json'


def get_active_users(days=7, number=4):
    """
    Return a queryset of the most active users for the given `days` and limited
    to `number` users. Defaults to 7 days and 4 users.
    """
    yester_date = now() - timedelta(days=days)
    actions = Action.objects.model_actions(User) \
        .filter(timestamp__gte=yester_date) \
        .values_list('actor_object_id', flat=True)
    # Create a counter for user pks with the most associated actions
    action_counter = Counter(actions).most_common(number)
    # Sort the most active users on the number of actions
    action_counter.sort(key=itemgetter(1), reverse=True)
    # Use the user pk's to query for the user data
    most_active_user_pks = map(
        lambda user_action: int(user_action[0]), action_counter
    )
    users = User.objects.filter(
        pk__in=most_active_user_pks, is_active=True, profile__isnull=False
    )
    # Return a list of users sorted on the number of actions (desc.)
    pk_user_mapping = dict((user.pk, user) for user in users)
    return [
        pk_user_mapping[pk]
        for pk in most_active_user_pks
        if pk in pk_user_mapping
    ]


def cache_on_auth(timeout):
    def decorated(view_func):
        @wraps(view_func)
        def _(request, *args, **kwargs):
            # Anonymous might be a better user_key, but is a valid username
            user_key = '~~~~' if not request.user.is_authenticated \
                else request.user.username
            return cache_page(
                timeout, key_prefix="user:%s" % user_key
            )(view_func)(request, *args, **kwargs)
        return _
    return decorated

########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponseForbidden, Http404
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.sites.models import Site
from django.contrib.auth.decorators import login_required
from django.views.generic.list_detail import object_list
from django.core.cache import cache
from django.conf import settings

from actstream import action

from mezzanine.utils.sites import current_site_id
from mezzanine.core.models import CONTENT_STATUS_PUBLISHED
from hilbert.decorators import ajax_only

from raspberryio.project.models import Project, ProjectStep, ProjectImage
from raspberryio.project.forms import (ProjectForm, ProjectStepForm,
    ProjectImageForm)
from raspberryio.project.utils import AjaxResponse, get_active_users


def index(request):
    "Custom view for site homepage"
    active_users = cache.get('active_users')
    if active_users is None:
        active_users = get_active_users(days=62, number=6)
        cache.set('active_users', active_users, 60 * 30)
    return render(request, 'homepage.html', {'active_users': active_users})


def project_list(request):
    "Show a list of published projects and order them by most recently created"
    projects = Project.objects.published(request.user).order_by('-created_datetime')
    return object_list(request, queryset=projects, paginate_by=12)


def project_detail(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    if not project.is_published(request):
        raise Http404('There is no project here')
    return render(request, 'project/project_detail.html', {
        'project': project,
        'DISQUS_SHORTNAME': settings.DISQUS_SHORTNAME,
        'DISQUS_HOSTNAME': settings.DISQUS_HOSTNAME,
    })


@login_required
def project_create_edit(request, project_slug=None):
    user = request.user
    site = Site.objects.get(id=current_site_id)
    if project_slug:
        project = get_object_or_404(Project, slug=project_slug)
    else:
        project = Project(user=user, site=site)
    if not project.is_editable(request):
        return HttpResponseForbidden('You are not the owner of this project.')
    project_form = ProjectForm(
        request.POST or None, request.FILES or None, instance=project
    )
    if project_form.is_valid():
        project_form.save()
        if project.is_published():
            action.send(user, verb='updated', target=project)
        if 'save-add-step' in request.POST:
            redirect_args = ('project-step-create-edit', project.slug)
        else:
            redirect_args = (project,)
        return redirect(*redirect_args)
    return render(request, 'project/project_create_edit.html', {
        'project': project,
        'project_form': project_form,
    })


@login_required
def project_step_create_edit(request, project_slug, project_step_number=None):
    user = request.user
    project = get_object_or_404(Project, slug=project_slug)
    if not project.is_editable(request):
        return HttpResponseForbidden('You are not the owner of this project.')
    if 'add' in request.path and project.steps.count() >= 20:
        messages.add_message(request, messages.WARNING,
                    'This project already contains 20 steps.')
        return redirect('project-detail', project.slug)
    if project_step_number is not None:
        project_step = get_object_or_404(
            ProjectStep, project=project, _order=project_step_number
        )
    else:
        project_step = ProjectStep(project=project)
    project_step_form = ProjectStepForm(
        request.POST or None, instance=project_step
    )
    if project_step_form.is_valid():
        project_step_form.save()
        if project.is_published():
            action.send(user, verb='updated', action_object=project_step, target=project)
        # User clicked "save and add another"
        if 'save-add' in request.POST:
            redirect_args = ('project-step-create-edit', project.slug)
        # User clicked "save" (catch anything else)
        else:
            redirect_args = (project,)
        return redirect(*redirect_args)
    return render(request, 'project/project_step_create_edit.html', {
        'project': project,
        'project_step': project_step,
        'project_step_form': project_step_form,
    })


@login_required
def project_delete(request, project_pk):
    project = get_object_or_404(Project, id=project_pk)
    if not project.is_editable(request):
        return HttpResponseForbidden('You are not the owner of this project.')
    if 'ok' in request.POST:
        project.delete()
        return redirect(request.user)
    return render(request, 'project/project_delete.html', {
        'project': project,
    })


@login_required
def project_step_delete(request, project_step_pk):
    project_step = get_object_or_404(ProjectStep, id=project_step_pk)
    if not project_step.is_editable(request):
        return HttpResponseForbidden('You are not the owner of this project.')
    if 'ok' in request.POST:
        project_step.delete()
        return redirect(project_step.project)
    return render(request, 'project/project_step_delete.html', {
        'project_step': project_step,
    })


@login_required
@ajax_only
def publish_project(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    if not project.is_editable(request):
        return HttpResponseForbidden('You are not the owner of this project.')
    else:
        project.status = CONTENT_STATUS_PUBLISHED
        project.save()
        action.send(request.user, verb='published', target=project)
    return AjaxResponse(request, {})


@login_required
@ajax_only
def gallery_image_create(request, project_slug=None, project_step_number=None):
    project_step = None
    if project_slug and project_step_number:
        project = get_object_or_404(Project, slug=project_slug)
        project_step = get_object_or_404(
            ProjectStep, project=project, _order=project_step_number
        )
        if not project.is_editable(request):
            return HttpResponseForbidden(
                'You are not the owner of this project.'
            )
    form = ProjectImageForm(request.POST or None, request.FILES or None)
    if form.is_valid():
        image = form.save()
        if project_step is not None:
            project_step.gallery.add(image)
        return AjaxResponse(request, ProjectImage.serialize(image))
    # A post was made without any files, just return False
    return AjaxResponse(request, False)


@login_required
@ajax_only
def gallery_image_download(request, project_slug, project_step_number):
    # Load and send thumbnails of existing files
    project = get_object_or_404(Project, slug=project_slug)
    project_step = get_object_or_404(
        ProjectStep, project=project, _order=project_step_number
    )
    images = project_step.gallery.all()
    return AjaxResponse(request, ProjectImage.serialize(images))


@login_required
@ajax_only
def gallery_image_delete(request, project_image_id):
    project_image = get_object_or_404(ProjectImage, id=project_image_id)
    try:
        project_step = project_image.projectstep_set.all()[0]
    except IndexError:
        # If the image doesn't belong to a project step, no need to check for
        # permission (and it isn't possible)
        pass
    else:
        if not project_step.is_editable(request):
            return HttpResponseForbidden('You are not the owner of this image.')
    # Remove the actual file, then the database record and return True
    project_image.file.delete()
    project_image.delete()
    return AjaxResponse(request, True)

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin

from raspberryio.qanda.models import Question, Answer

class AnswerAdmin(admin.ModelAdmin):
    model = Answer
    list_filter = ('question',)

admin.site.register(Question)
admin.site.register(Answer, AnswerAdmin)

########NEW FILE########
__FILENAME__ = forms
from django import forms

from actstream import action


from raspberryio.project.forms import PlaceHolderMixin
from raspberryio.qanda.models import Question, Answer


class QuestionForm(PlaceHolderMixin, forms.ModelForm):

    def save(self, *args, **kwargs):
        created = self.instance.id is None
        question = super(QuestionForm, self).save(*args, **kwargs)
        if created:
            action.send(question.user, verb='asked', target=question)
        return question

    class Meta(object):
        model = Question
        fields = (
            'title', 'question',
        )


class AnswerForm(PlaceHolderMixin, forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super(AnswerForm, self).__init__(*args, **kwargs)
        self.fields['answer'].label = 'Your Answer'

    def save(self, *args, **kwargs):
        created = self.instance.id is None
        answer = super(AnswerForm, self).save(*args, **kwargs)
        if created:
            action.send(answer.user, verb='answered', target=answer)
        return answer

    class Meta(object):
        model = Answer
        fields = (
            'answer',
        )

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Question'
        db.create_table('qanda_question', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('keywords_string', self.gf('django.db.models.fields.CharField')(max_length=500, blank=True)),
            ('site', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sites.Site'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=500)),
            ('slug', self.gf('django.db.models.fields.CharField')(max_length=2000, null=True, blank=True)),
            ('_meta_title', self.gf('django.db.models.fields.CharField')(max_length=500, null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('gen_description', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('status', self.gf('django.db.models.fields.IntegerField')(default=2)),
            ('publish_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('expiry_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('short_url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('in_sitemap', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='questions', to=orm['auth.User'])),
            ('question', self.gf('mezzanine.core.fields.RichTextField')()),
            ('keywords', self.gf('mezzanine.generic.fields.KeywordsField')(object_id_field='object_pk', to=orm['generic.AssignedKeyword'], frozen_by_south=True)),
        ))
        db.send_create_signal('qanda', ['Question'])

        # Adding model 'Answer'
        db.create_table('qanda_answer', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='answers', to=orm['auth.User'])),
            ('score', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('question', self.gf('django.db.models.fields.related.ForeignKey')(related_name='answers', to=orm['qanda.Question'])),
            ('answer', self.gf('mezzanine.core.fields.RichTextField')()),
            ('created_datetime', self.gf('django.db.models.fields.DateTimeField')()),
            ('modified_datetime', self.gf('django.db.models.fields.DateTimeField')()),
        ))
        db.send_create_signal('qanda', ['Answer'])

        # Adding M2M table for field voters on 'Answer'
        db.create_table('qanda_answer_voters', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('answer', models.ForeignKey(orm['qanda.answer'], null=False)),
            ('user', models.ForeignKey(orm['auth.user'], null=False))
        ))
        db.create_unique('qanda_answer_voters', ['answer_id', 'user_id'])


    def backwards(self, orm):
        # Deleting model 'Question'
        db.delete_table('qanda_question')

        # Deleting model 'Answer'
        db.delete_table('qanda_answer')

        # Removing M2M table for field voters on 'Answer'
        db.delete_table('qanda_answer_voters')


    models = {
        'actstream.action': {
            'Meta': {'ordering': "('-timestamp',)", 'object_name': 'Action'},
            'action_object_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'action_object'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'action_object_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'actor_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'actor'", 'to': "orm['contenttypes.ContentType']"}),
            'actor_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'target_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'target'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'target_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'verb': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'generic.assignedkeyword': {
            'Meta': {'ordering': "('_order',)", 'object_name': 'AssignedKeyword'},
            '_order': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'keyword': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'assignments'", 'to': "orm['generic.Keyword']"}),
            'object_pk': ('django.db.models.fields.IntegerField', [], {})
        },
        'generic.keyword': {
            'Meta': {'object_name': 'Keyword'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'qanda.answer': {
            'Meta': {'object_name': 'Answer'},
            'answer': ('mezzanine.core.fields.RichTextField', [], {}),
            'created_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'question': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'answers'", 'to': "orm['qanda.Question']"}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'answers'", 'to': "orm['auth.User']"}),
            'voters': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'answer_votes'", 'symmetrical': 'False', 'to': "orm['auth.User']"})
        },
        'qanda.question': {
            'Meta': {'object_name': 'Question'},
            '_meta_title': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'expiry_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'gen_description': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_sitemap': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'keywords': ('mezzanine.generic.fields.KeywordsField', [], {'object_id_field': "'object_pk'", 'to': "orm['generic.AssignedKeyword']", 'frozen_by_south': 'True'}),
            'keywords_string': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
            'publish_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'question': ('mezzanine.core.fields.RichTextField', [], {}),
            'short_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'questions'", 'to': "orm['auth.User']"})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['qanda']
########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.db import transaction
from django.contrib.auth.models import User
from django.utils.html import strip_tags

from mezzanine.core.models import Displayable, Ownable
from mezzanine.core.fields import RichTextField
from mezzanine.utils.timezone import now


class Question(Displayable, Ownable):
    """
    A user question
    """
    question = RichTextField()

    class Meta:
        ordering = ['-publish_date']

    def __unicode__(self):
        return unicode(self.title)

    @models.permalink
    def get_absolute_url(self):
        return ('question', [self.slug])


class Answer(Ownable):
    """
    An answer to a question
    """

    score = models.IntegerField(default=0)
    question = models.ForeignKey(Question, related_name='answers')
    answer = RichTextField()
    created_datetime = models.DateTimeField('Created')
    modified_datetime = models.DateTimeField('Modified')
    voters = models.ManyToManyField(User, related_name='answer_votes')

    class Meta:
        ordering = ['-score']

    def add_voter(self, user):
        with transaction.commit_on_success():
            if not self.voters.filter(pk=user.pk).exists():
                self.score += 1
                self.voters.add(user)
                self.save()
                return True
            return False

    def save(self, *args, **kwargs):
        # Set created and modified datetimes if not provided.
        if not self.id:
            self.created_datetime = now()
        self.modified_datetime = now()
        super(Answer, self).save(*args, **kwargs)

    def __unicode__(self):
        return unicode(self.question)

    @models.permalink
    def get_absolute_url(self):
        return ('question', [self.question.slug])

########NEW FILE########
__FILENAME__ = base
from raspberryio.project.tests.base import RaspberryIOBaseTestCase
from raspberryio.qanda.models import Question, Answer


class QandaBaseTestCase(RaspberryIOBaseTestCase):
    """
    Base TestCase class that provides utilities for the qanda app
    """

    def create_question(self, **kwargs):
        defaults = {
            'title': self.get_random_string(length=500),
            'site': kwargs.pop('site', self.create_site()),
            'user': kwargs.pop('user', self.create_user()),
            'question': self.get_random_string(length=100),
        }
        return self.create_instance(Question, defaults=defaults, **kwargs)

    def create_answer(self, **kwargs):
        defaults = {
            'user': kwargs.pop('user', self.create_user()),
            'question': kwargs.pop('question', self.create_question()),
            'answer': self.get_random_string(length=100),
        }
        return self.create_instance(Answer, defaults=defaults, **kwargs)

########NEW FILE########
__FILENAME__ = test_forms
from django.test.client import RequestFactory
from django.contrib.sites.models import Site

from mezzanine.utils.sites import current_site_id
from actstream.models import Action

from raspberryio.qanda.tests.base import QandaBaseTestCase
from raspberryio.qanda.models import Question, Answer
from raspberryio.qanda.forms import QuestionForm, AnswerForm


class QuestionFormTestCase(QandaBaseTestCase):

    def setUp(self):
        self.request_factory = RequestFactory()
        self.question = self.create_question()

    def test_edit_invalid(self):
        request = self.request_factory.post('/', {})
        form = QuestionForm(request.POST, instance=self.question)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['title'], ['This field is required.'])
        self.assertEqual(form.errors['question'], ['This field is required.'])
        self.assertEqual(Action.objects.count(), 0,
            'Invalid form submission should not result in an action'
        )

    def test_create_invalid(self):
        request = self.request_factory.post('/', {})
        site = Site.objects.get(id=current_site_id)
        question = Question(user=self.create_user(), site=site)
        form = QuestionForm(request.POST, instance=question)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['title'], ['This field is required.'])
        self.assertEqual(form.errors['question'], ['This field is required.'])
        self.assertEqual(Action.objects.count(), 0,
            'Invalid form submission should not result in an action'
        )

    def test_edit_valid(self):
        post_data = {
            'title': self.get_random_string(),
            'question': self.get_random_string(),
        }
        request = self.request_factory.post('/', post_data)
        form = QuestionForm(request.POST, instance=self.question)
        if form.is_valid():
            form.save()
            self.assertEqual(Action.objects.count(), 0,
                'editting a question should not result in an action'
            )
        else:
            self.fail('Form should be valid')

    def test_create_valid(self):
        post_data = {
            'title': self.get_random_string(),
            'question': self.get_random_string(),
        }
        request = self.request_factory.post('/', post_data)
        site = Site.objects.get(id=current_site_id)
        question = Question(user=self.create_user(), site=site)
        form = QuestionForm(request.POST, instance=question)
        if form.is_valid():
            form.save()
            self.assertEqual(Action.objects.count(), 1,
                'Creating a question should result in an action'
            )
        else:
            self.fail('Form should be valid')

class AnswerFormTestCase(QandaBaseTestCase):

    def setUp(self):
        self.request_factory = RequestFactory()
        self.question = self.create_question()
        self.answer = self.create_answer(question=self.question)

    def test_edit_invalid(self):
        request = self.request_factory.post('/', {})
        form = AnswerForm(request.POST, instance=self.answer)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['answer'], ['This field is required.'])
        self.assertEqual(Action.objects.count(), 0,
            'Invalid form submission should not result in an action'
        )

    def test_create_invalid(self):
        request = self.request_factory.post('/', {})
        answer = Answer(user=self.create_user(), question=self.question)
        form = AnswerForm(request.POST, instance=answer)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['answer'], ['This field is required.'])
        self.assertEqual(Action.objects.count(), 0,
            'Invalid form submission should not result in an action'
        )

    def test_edit_valid(self):
        post_data = {
            'answer': self.get_random_string(),
        }
        request = self.request_factory.post('/', post_data)
        form = AnswerForm(request.POST, instance=self.answer)
        if form.is_valid():
            form.save()
            self.assertEqual(Action.objects.count(), 0,
                'editting an answer should not result in an action'
            )
        else:
            self.fail('Form should be valid')

    def test_create_valid(self):
        post_data = {
            'answer': self.get_random_string(),
        }
        request = self.request_factory.post('/', post_data)
        answer = Answer(user=self.create_user(), question=self.question)
        form = AnswerForm(request.POST, instance=answer)
        if form.is_valid():
            form.save()
            self.assertEqual(Action.objects.count(), 1,
                'Creating an answer should result in an action'
            )
        else:
            self.fail('Form should be valid')

########NEW FILE########
__FILENAME__ = test_models
from raspberryio.qanda.tests.base import QandaBaseTestCase


class AnswerTestCase(QandaBaseTestCase):

    def setUp(self):
        self.user = self.create_user()
        self.answer_user = self.create_user()
        self.question = self.create_question(user=self.user)
        self.answer = self.create_answer(
            question=self.question, user=self.answer_user
        )

    def test_unicode_method(self):
        title = 'My title'
        q = self.create_question(title=title)
        a = self.create_answer(question=q)
        self.assertEqual(q.__unicode__(), title)
        self.assertEqual(a.__unicode__(), title)

    def test_default_score(self):
        self.assertEqual(self.answer.score, 0)

    def test_add_voter_new(self):
        self.answer.score = 10
        self.answer.save()
        result = self.answer.add_voter(self.user)
        self.assertEqual(self.answer.score, 11)
        self.assertEqual(list(self.answer.voters.all()), [self.user],
            'answer.voters should contain the user once and only once'
        )
        self.assertTrue(result)

    def test_add_voter_existing(self):
        result = self.answer.add_voter(self.user)
        self.assertEqual(self.answer.score, 1)
        self.assertTrue(result)
        result = self.answer.add_voter(self.user)
        self.assertFalse(result)
        self.assertEqual(self.answer.score, 1)
        self.assertEqual(list(self.answer.voters.all()), [self.user],
            'answer.voters should contain the user once and only once'
        )

    def test_add_multiple_voters(self):
        result = self.answer.add_voter(self.user)
        self.assertEqual(self.answer.score, 1)
        self.assertTrue(result)
        other_user = self.create_user()
        users = (self.user, other_user)
        result = self.answer.add_voter(other_user)
        self.assertEqual(self.answer.score, 2)
        self.assertTrue(result)
        self.assertEqual(set(self.answer.voters.all()), set(users),
            'answer.voters should contain both users'
        )

########NEW FILE########
__FILENAME__ = test_views
from django.core.urlresolvers import reverse

from hilbert.test import ViewTestMixin, AuthViewMixin

from raspberryio.qanda.tests.base import QandaBaseTestCase
from raspberryio.qanda.models import Question, Answer


class IndexViewTestCase(ViewTestMixin, QandaBaseTestCase):
    url_name = 'community-index'

    def setUp(self):
        super(IndexViewTestCase, self).setUp()

    def test_index_page(self):
        question = self.create_question()
        response = self.client.get(self.url)
        result = response.context['questions']
        self.assertEqual(set(result), set([question]))


class QuestionListViewTestCase(ViewTestMixin, QandaBaseTestCase):
    url_name = 'question-list'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        super(QuestionListViewTestCase, self).setUp()

    def test_results(self):
        question1 = self.create_question()
        question2 = self.create_question()
        question3 = self.create_question()
        expected_questions = set([question1, question2, question3])
        response = self.client.get(self.url)
        result_questions = response.context['question_list']
        self.assertEqual(set(result_questions), expected_questions)


class QuestionDetailViewTestCase(ViewTestMixin, QandaBaseTestCase):
    url_name = 'question'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        self.question = self.create_question(user=self.user)
        super(QuestionDetailViewTestCase, self).setUp()

    def get_url_args(self):
        return (self.question.slug,)

    def test_answers(self):
        answer1 = self.create_answer(question=self.question)
        answer2 = self.create_answer(question=self.question)
        expected_answers = set([answer1, answer2])
        response = self.client.get(self.url)
        result_answers = response.context['answers']
        self.assertEqual(set(result_answers), expected_answers)

    def test_votes(self):
        self.client.login(username=self.user.username, password='password')
        answer = self.create_answer(question=self.question)
        self.create_answer(question=self.question)
        other_answer = self.create_answer()
        answer.add_voter(self.user)
        other_answer.add_voter(self.user)
        response = self.client.get(self.url)
        user_votes = response.context['votes']
        self.assertEqual(set(user_votes), set([answer.pk]),
            "Only the current question's answers the user voted on should appear in 'votes'"
        )


class QuestionCreateEditViewTestCase(AuthViewMixin, QandaBaseTestCase):
    url_name = 'question-create-edit'

    def setUp(self):
        super(QuestionCreateEditViewTestCase, self).setUp()
        self.question = self.create_question(user=self.user)

    def get_edit_url(self, question_slug=''):
        """
        self.url points to using the view for creating a new question. Use
        this helper to create a link to the edit view.
        """
        return reverse(
            self.url_name, args=(question_slug or self.question.slug,)
        )

    def test_bad_slug(self):
        url = self.get_edit_url('bad-slug')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_create_valid(self):
        data = {
            'title': 'question title',
            'question': 'I want to know about things',
        }
        response = self.client.post(self.url, data)
        self.assertEqual(response.status_code, 302)
        question = Question.objects.get(title=data['title'])
        self.assertEqual(question.user, self.user)
        self.assertEqual(question.question, data['question'])

    def test_create_invalid(self):
        data = {
            'title': '',
            'question': 'I want to know about things',
        }
        response = self.client.post(self.url, data)
        question_form = response.context['question_form']
        self.assertEqual(response.status_code, 200)
        self.assertEqual(
            question_form.errors, {'title': [u'This field is required.']}
        )

    def test_edit_valid(self):
        data = {
            'title': 'updated title',
            'question': 'edit: I want to know about some more things',
        }
        response = self.client.post(self.get_edit_url(), data)
        self.assertEqual(response.status_code, 302)
        question = Question.objects.get(title=data['title'])
        self.assertEqual(question.title, data['title'])
        self.assertEqual(question.question, data['question'])

    def test_edit_invalid(self):
        data = {
            'title': 'updated title',
            'question': '',
        }
        response = self.client.post(self.get_edit_url(), data)
        question_form = response.context['question_form']
        self.assertEqual(response.status_code, 200)
        self.assertEqual(
            question_form.errors, {'question': [u'This field is required.']}
        )

    def test_edit_superuser(self):
        data = {
            'title': 'updated title by superuser',
            'question': 'edit: I am a superuser and I want to change this',
        }
        response = self.client.post(self.get_edit_url(), data)
        self.assertEqual(response.status_code, 302)
        question = Question.objects.get(title=data['title'])
        self.assertEqual(question.title, data['title'])
        self.assertEqual(question.question, data['question'])

    def test_edit_other_user_forbidden(self):
        other_user = self.create_user(data={'password': 'password'})
        data = {
            'title': 'updated title by other user',
            'question': 'edit: I am the wrong person to edit this',
        }
        self.client.logout()
        self.client.login(username=other_user.username, password='password')
        response = self.client.post(self.get_edit_url(), data)
        self.assertEqual(response.status_code, 403)
        question = Question.objects.get(pk=self.question.pk)
        self.assertEqual(question.title, self.question.title)
        self.assertEqual(question.question, self.question.question)


class AnswerCreateEditViewTestCase(QandaBaseTestCase):
    url_name = 'answer-create-edit'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        self.question = self.create_question()
        self.answer = self.create_answer(
            user=self.user, question=self.question
        )
        self.client.login(username=self.user.username, password='password')
        self.url = reverse(self.url_name, args=self.get_url_args())

    def get_url_args(self):
        return (self.question.slug,)

    def get_edit_url(self, question_slug='', answer_pk=None):
        """
        self.url points to using the view for creating a new question. Use
        this helper to create a link to the edit view.
        """
        url_args = (
            question_slug or self.question.slug,
            answer_pk or self.answer.pk,
        )
        return reverse(self.url_name, args=url_args)

    def test_bad_question_slug(self):
        url = self.get_edit_url('bad-slug')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_bad_answer_pk(self):
        url = self.get_edit_url(answer_pk=9999)
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_create_valid(self):
        data = {
            'answer': 'The answer is rm -rf'
        }
        response = self.client.post(self.url, data)
        self.assertEqual(response.status_code, 302)
        answer = Answer.objects.get(answer=data['answer'])
        self.assertEqual(answer.user, self.user)

    def test_create_invalid(self):
        data = {
            'answer': '',
        }
        response = self.client.post(self.url, data)
        self.assertEqual(response.status_code, 302)
        answers = Answer.objects.all()
        self.assertEqual(list(answers), [self.answer])

    def test_edit_valid(self):
        data = {
            'answer': 'Edit: On second thought, you probably should not rm -rf'
        }
        response = self.client.post(self.get_edit_url(), data)
        self.assertEqual(response.status_code, 302)
        answer = Answer.objects.get(pk=self.answer.pk)
        self.assertEqual(answer.user, self.user)
        self.assertEqual(answer.answer, data['answer'])

    def test_edit_invalid(self):
        data = {
            'answer': '',
        }
        response = self.client.post(self.get_edit_url(), data)
        self.assertEqual(response.status_code, 302)
        answer = Answer.objects.get(pk=self.answer.pk)
        self.assertEqual(answer.user, self.user)
        self.assertEqual(answer.answer, self.answer.answer)


class UpvoteAnswerViewTestCase(QandaBaseTestCase):
    url_name = 'upvote-answer'

    def setUp(self):
        self.user = self.create_user(data={'password': 'password'})
        self.question = self.create_question()
        self.answer = self.create_answer(question=self.question)
        self.client.login(username=self.user.username, password='password')
        self.url = reverse(self.url_name, args=self.get_url_args())

    def get_url_args(self):
        return (self.answer.pk,)

    def test_bad_pk(self):
        url = reverse(self.url_name, args=(9999,))
        response = self.client.get(url, is_ajax=True)
        self.assertEqual(response.status_code, 404)
        answer = Answer.objects.get(pk=self.answer.pk)
        self.assertEqual(answer.score, 0)
        self.assertEqual(answer.voters.count(), 0)

    def test_not_ajax(self):
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 400)
        answer = Answer.objects.get(pk=self.answer.pk)
        self.assertEqual(answer.score, 0)
        self.assertEqual(answer.voters.count(), 0)

    def test_login_required(self):
        self.client.logout()
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 302)
        answer = Answer.objects.get(pk=self.answer.pk)
        self.assertEqual(answer.score, 0)
        self.assertEqual(answer.voters.count(), 0)

    def test_new_vote(self):
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, 'true')
        answer = Answer.objects.get(pk=self.answer.pk)
        self.assertEqual(list(answer.voters.all()), [self.user])
        self.assertEqual(answer.score, 1)

    def test_existing_vote(self):
        self.answer.add_voter(self.user)
        response = self.client.get(self.url, is_ajax=True)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, 'false')
        answer = Answer.objects.get(pk=self.answer.pk)
        self.assertEqual(list(answer.voters.all()), [self.user])
        self.assertEqual(answer.score, 1)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, url


urlpatterns = patterns('raspberryio.qanda.views',
    url(r'^$', 'index', name='community-index'),
    url(r'^ask/$', 'question_list', name='question-list'),
    url(r'^view/(?P<question_slug>[\w-]+)/$',
        'question_detail',
        name='question'),
    # Create/edit questions
    url(r'^question/$',
        'question_create_edit',
        name='question-create-edit'),
    url(r'^edit-question/(?P<question_slug>[\w-]+)/$',
        'question_create_edit',
        name='question-create-edit'),
    # Create/edit answers
    url(r'^answer/(?P<question_slug>[\w-]+)/$',
        'answer_create_edit',
        name='answer-create-edit'),
    url(r'^edit-answer/(?P<question_slug>[\w-]+)/(?P<answer_pk>[\w-]+)/$',
        'answer_create_edit',
        name='answer-create-edit'),
    # Upvote answer Ajax view
    url(r'^upvote/(?P<answer_pk>[\d]+)/$',
        'upvote_answer',
        name='upvote-answer'
    ),
)

########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponseForbidden
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib.sites.models import Site
from django.views.generic.list_detail import object_list

from hilbert.decorators import ajax_only
from mezzanine.utils.sites import current_site_id

from raspberryio.project.utils import AjaxResponse, cache_on_auth
from raspberryio.aggregator.models import FeedType, FeedItem, APPROVED_FEED
from raspberryio.qanda.models import Question, Answer
from raspberryio.qanda.forms import QuestionForm, AnswerForm


@cache_on_auth(60 * 5)
def index(request):
    questions = Question.objects.all()[:20]
    feed_type = get_object_or_404(FeedType, slug='raspberry-pi')
    feed_items = FeedItem.objects.filter(
        feed__feed_type=feed_type, feed__approval_status=APPROVED_FEED
    )[:20]
    return render(request, 'qanda/index.html', {
        'questions': questions,
        'feed_items': feed_items,
        'feed_type': feed_type
    })


@cache_on_auth(60 * 2)
def question_list(request):
    questions = Question.objects.all()
    return object_list(request, queryset=questions, paginate_by=20,
                       template_object_name='question')


def question_detail(request, question_slug):
    question = get_object_or_404(Question, slug=question_slug)
    answers = question.answers.all()
    context = {
        'question': question,
        'answers': answers,
    }
    if request.user.is_authenticated():
        votes = request.user.answer_votes.filter(question=question) \
            .values_list('pk', flat=True)
        context.update({
            'votes': votes,
            'answer_create_form': AnswerForm(),
        })
    return render(request, 'qanda/question_detail.html', context)


@login_required
def question_create_edit(request, question_slug=None):
    user = request.user
    site = Site.objects.get(id=current_site_id)
    if question_slug:
        question = get_object_or_404(Question, slug=question_slug)
        if question.user != user and not user.is_superuser:
            return HttpResponseForbidden(
                'You are not the owner of this question'
            )
    else:
        question = Question(user=user, site=site)
    question_form = QuestionForm(request.POST or None, instance=question)
    if question_form.is_valid():
        question_form.save()
        return redirect(question)
    return render(request, 'qanda/question_create_edit.html', {
        'question': question,
        'question_form': question_form,
    })


@login_required
def answer_create_edit(request, question_slug, answer_pk=None):
    question = get_object_or_404(Question, slug=question_slug)
    if answer_pk:
        answer = get_object_or_404(Answer, pk=answer_pk)
    else:
        answer = Answer(user=request.user, question=question)
    answer_form = AnswerForm(request.POST or None, instance=answer)
    if answer_form.is_valid():
        answer_form.save()
        return redirect(answer)
    return redirect(question)


@login_required
@ajax_only
def upvote_answer(request, answer_pk):
    answer = get_object_or_404(Answer, pk=answer_pk)
    result = answer.add_voter(request.user)
    return AjaxResponse(request, result)

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'LatestArticleRevision'
        db.create_table('search_latestarticlerevision', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('article_id', self.gf('django.db.models.fields.BigIntegerField')(unique=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=512)),
            ('content', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('search', ['LatestArticleRevision'])


    def backwards(self, orm):
        # Deleting model 'LatestArticleRevision'
        db.delete_table('search_latestarticlerevision')


    models = {
        'search.latestarticlerevision': {
            'Meta': {'object_name': 'LatestArticleRevision'},
            'article_id': ('django.db.models.fields.BigIntegerField', [], {'unique': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        }
    }

    complete_apps = ['search']
########NEW FILE########
__FILENAME__ = 0002_auto__del_latestarticlerevision
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting model 'LatestArticleRevision'
        db.delete_table('search_latestarticlerevision')


    def backwards(self, orm):
        # Adding model 'LatestArticleRevision'
        db.create_table('search_latestarticlerevision', (
            ('content', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('article_id', self.gf('django.db.models.fields.BigIntegerField')(unique=True)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=512)),
        ))
        db.send_create_signal('search', ['LatestArticleRevision'])


    models = {
        
    }

    complete_apps = ['search']
########NEW FILE########
__FILENAME__ = models
from django.db import models, transaction

from mezzanine.core.managers import SearchableManager

from raspberryio.search.utils import load_search_model_indexes


class Searchable(models.Model):
    """
    An abstract base class to extend django Model classes from to make them
    searchable. Requires that the base class defines search_fields.
    """

    objects = SearchableManager()

    class Meta():
        abstract = True


searchable_models = load_search_model_indexes()

########NEW FILE########
__FILENAME__ = test_models
from mezzanine.conf import settings

from raspberryio.project.tests.base import ProjectBaseTestCase
from raspberryio.search.utils import load_search_model_indexes


class SearchModelIndexeUtilsTestCase(ProjectBaseTestCase):

    def setUp(self):
        """
        FIXME: This test depends on the current settings, which has auth.user
        in the SEARCH_MODEL_INDEXES setting.
        """
        self.index_settings = settings.SEARCH_MODEL_INDEXES

    def test_load_search_model_indexes_valid(self):
        search_proxy_model = load_search_model_indexes()[1]
        self.assertEqual(
            search_proxy_model.search_fields,
            self.index_settings['auth.user']
        )
        self.assertEqual(search_proxy_model.__name__, 'SearchableUser')

########NEW FILE########
__FILENAME__ = test_views
from urllib import urlencode

from hilbert.test import ViewTestMixin
from mezzanine.core.models import CONTENT_STATUS_PUBLISHED

from raspberryio.project.tests.base import ProjectBaseTestCase


class SearchViewTestCase(ViewTestMixin, ProjectBaseTestCase):
    """
    FIXME: This test is dependent on settings.SEARCH_MODEL_INDEXES. Need to
    find a way to unit test the search functionality independent of settings
    """

    url_name = 'search'

    def setUp(self):
        super(SearchViewTestCase, self).setUp()
        self.user = self.create_user(data={'password': 'password'})
        self.project = self.create_project(title='project1', user=self.user,
            status=CONTENT_STATUS_PUBLISHED
        )

    def get_query_params(self, query='', object_type=None):
        object_type = object_type or {}
        query_dict = {
            'q': query,
        }
        query_dict.update({
            'type': object_type
        })
        return '?' + urlencode(query_dict)

    def test_empty_result(self):
        self.project.delete()
        self.user.delete()
        response = self.client.get(self.url + self.get_query_params(''))
        results = response.context['results'].object_list
        self.assertEqual(results, [])

    def test_one_result(self):
        # Create a project that should not appear in the results
        self.create_project(
            title='zzz', user=self.user, status=CONTENT_STATUS_PUBLISHED
        )
        query = self.get_query_params(self.project.title)
        response = self.client.get(self.url + query)
        results = response.context['results'].object_list
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0].title, self.project.title)

    def test_many_results_one_type(self):
        project2 = self.create_project(
            title='project2', user=self.user, status=CONTENT_STATUS_PUBLISHED
        )
        query = self.get_query_params('project')
        response = self.client.get(self.url + query)
        results = response.context['results'].object_list
        result_titles = [result.title for result in results]
        self.assertEqual(len(results), 2)
        self.assertEqual(
            set(result_titles), set([self.project.title, project2.title])
        )

    def test_many_results_many_types(self):
        project2 = self.create_project(
            title='project2', user=self.user, status=CONTENT_STATUS_PUBLISHED
        )
        user2 = self.create_user(data={'username': 'PRoJect'})
        query = self.get_query_params('project')
        response = self.client.get(self.url + query)
        results = response.context['results'].object_list
        result_urls = [result.get_absolute_url() for result in results]
        expected_results = set(map(lambda i: i.get_absolute_url(), [
            self.project, project2, user2,
        ]))
        self.assertEqual(len(results), 3)
        self.assertEqual(set(result_urls), expected_results)

    def test_query_type_malformed(self):
        project2 = self.create_project(
            title='project2', user=self.user, status=CONTENT_STATUS_PUBLISHED
        )
        user2 = self.create_user(data={'username': 'PRoJect'})
        query = self.get_query_params('project', 'asdfasdfasdf')
        response = self.client.get(self.url + query)
        results = response.context['results'].object_list
        result_urls = [result.get_absolute_url() for result in results]
        expected_results = set(map(lambda i: i.get_absolute_url(), [
            self.project, project2, user2
        ]))
        # Everything returns because the given 'type' is invalid
        self.assertEqual(len(results), 3)
        self.assertEqual(set(result_urls), expected_results)

    def test_query_unregistered_model(self):
        project2 = self.create_project(
            title='project2', user=self.user, status=CONTENT_STATUS_PUBLISHED
        )
        user2 = self.create_user(data={'username': 'PRoJect'})
        query = self.get_query_params('project', 'project.projectimage')
        response = self.client.get(self.url + query)
        results = response.context['results'].object_list
        result_urls = [result.get_absolute_url() for result in results]
        expected_results = set(map(lambda i: i.get_absolute_url(), [
            self.project, project2, user2
        ]))
        # Everything returns because the given 'type' is invalid
        self.assertEqual(len(results), 3)
        self.assertEqual(set(result_urls), expected_results)

    def test_query_on_type(self):
        project2 = self.create_project(
            title='project2', user=self.user, status=CONTENT_STATUS_PUBLISHED
        )
        # Created user should not return because query is for project type
        self.create_user(data={'username': 'PRoJect'})
        query = self.get_query_params('project', 'project.project')
        response = self.client.get(self.url + query)
        results = response.context['results'].object_list
        result_urls = [result.get_absolute_url() for result in results]
        expected_results = set(map(lambda i: i.get_absolute_url(), [
            self.project, project2
        ]))
        self.assertEqual(len(results), 2)
        self.assertEqual(set(result_urls), expected_results)

    def test_draft_removed(self):
        # Create a project in the draft status (unpublished)
        self.create_project(title='project2', user=self.user)
        query = self.get_query_params('project')
        response = self.client.get(self.url + query)
        results = response.context['results'].object_list
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0].title, self.project.title)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url

urlpatterns = patterns('raspberryio.search.views',

    # Mezzanine search urls (Put any custom ones above)
    url('^', 'search', name='search'),
)

########NEW FILE########
__FILENAME__ = utils
"""
Utilities for cleaning the SEARCH_MODEL_INDEXES definition and generating the
search proxy models
"""

import logging

from django.db import models

from mezzanine.conf import settings


def load_search_model_indexes():
    """
    Create proxy models that subclass Searchable and have search_fields as
    defined by SEARCH_MODEL_INDEXES.

    Sets the SEARCH_MODEL_CHOICES setting from the SEARCH_MODEL_INDEXES keys as
    a side-effect.
    """
    index = settings.SEARCH_MODEL_INDEXES
    model_fields = clean_index(index.items())
    model_fields = clean_model_fields(model_fields)
    settings.SEARCH_MODEL_CHOICES = index.keys()
    return [
        make_search_proxy_model(ModelKls, search_fields)
        for ModelKls, search_fields in model_fields
    ]


def clean_model_fields(model_fields):
    """
    Given a list of models and search_field dictionaries, returns the provided
    list with any fields removed that were not found on their respective models

    Expected input is a list of two tuples in the form of:
        [(ModelClass, search_fields_dictionary), ...]
    """
    for ModelKls, fields in model_fields:
        model_field_names = [field.name for field in ModelKls._meta.fields]
        field_keys = fields.keys()
        for field_key in field_keys:
            if field_key not in model_field_names:
                fields.pop(field_key)
                err_msg = 'SEARCH_MODEL_INDEXES has a field {0} for the model {1} that does not exist'.format(field_key, ModelKls)
                logging.error(err_msg)
    return model_fields


def clean_index(index):
    """
    Given a list of model paths and search_field dictionaries, returns a list
    of imported model classes and search_field dictionaries for all models that
    could be imported.

    Expected input:
        [('appname.model', search_fields_dictionary), ...]
    """

    model_classes_fields = []
    for appname_model, fields in index:
        try:
            appname, modelname = appname_model.split('.')
        except (TypeError, ValueError):
            err_msg = 'SEARCH_MODEL_INDEXES setting key {0} is in the wrong format'.format(appname_model)
            logging.error(err_msg)
            continue
        ModelKls = models.get_model(appname, modelname)
        if ModelKls is None:
            err_msg = 'SEARCH_MODEL_INDEXES key {0} refers to a model that cannot be found.'.format(appname_model)
            logging.error(err_msg)
            continue
        model_classes_fields.append((ModelKls, fields))
    return model_classes_fields


def make_search_proxy_model(ModelKls, search_fields):
    """
    Given a Django model class, and a dictionary of search fields, create and
    return a proxy model that subclasses Searchable and has search_fields equal
    to the search_fields provided.
    """

    kls_name = 'Searchable' + ModelKls.__name__
    search_classname = getattr(
        ModelKls, 'search_classname', ModelKls.__name__.lower()
    )

    class Meta(object):
        proxy = True

    # get_models fails to load abstract models. Import is here to avoid
    # ciruclar imports
    from raspberryio.search.models import Searchable

    return type(kls_name, (Searchable, ModelKls), {
        'search_fields': search_fields,
        'search_classname': search_classname,
        'Meta': Meta,
        '__module__': ModelKls.__module__
    })

########NEW FILE########
__FILENAME__ = views
from django.shortcuts import render
from django.db.models import get_model

from mezzanine.conf import settings
from mezzanine.utils.views import paginate

from raspberryio.search.models import Searchable, searchable_models


def search(request):
    """
    Display search results. Takes an optional 'type' GET parameter
    in the form 'app-name.ModelName' to limit search results to a single model.
    """
    settings.use_editable()
    query = request.GET.get("q", "")
    page = request.GET.get("page", 1)
    # Determine query to make
    use_everything = False
    try:
        raw_type_query = request.GET.get("type", "")
        type_query = raw_type_query.split(".", 1)
        if not raw_type_query in settings.SEARCH_MODEL_CHOICES:
            raise TypeError
        search_model = get_model(*type_query)
    except TypeError:
        use_everything = True
    else:
        search_type = search_model._meta.verbose_name_plural.capitalize()
        # Swap the model out for its Searchable proxy model for making queries
        for proxy_model in searchable_models:
            if search_model in proxy_model.__bases__:
                search_model = proxy_model
                use_everything = False
                break
    # type was given, but a Searchable proxy model could not be found. Search
    # on all types.
    if use_everything:
        search_model = Searchable
        search_type = "Everything"
    results = search_model.objects.search(query, for_user=request.user)
    results = [
        result for result in results
        if getattr(result, 'is_published', lambda: True)()
    ]
    # paginate the results
    per_page = settings.SEARCH_PER_PAGE
    max_paging_links = settings.MAX_PAGING_LINKS
    paginated_results = paginate(results, page, per_page, max_paging_links)
    return render(request, 'search/search_results.html', {
        "query": query,
        "results": paginated_results,
        "search_type": search_type
    })

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'LatestArticleRevision'
        db.create_table('search_models_latestarticlerevision', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('article_id', self.gf('django.db.models.fields.BigIntegerField')(unique=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=512)),
            ('content', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('search_models', ['LatestArticleRevision'])


    def backwards(self, orm):
        # Deleting model 'LatestArticleRevision'
        db.delete_table('search_models_latestarticlerevision')


    models = {
        'search_models.latestarticlerevision': {
            'Meta': {'object_name': 'LatestArticleRevision'},
            'article_id': ('django.db.models.fields.BigIntegerField', [], {'unique': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        }
    }

    complete_apps = ['search_models']
########NEW FILE########
__FILENAME__ = models
"""
Models here provide search capability for those that can't be queried directly
by Mezzanine's SearchableManager. For example, the wiki.ArticleRevision model
tracks every revision to a wiki page. Searching on it directly would return
every revision rather than the latest. (i.e. a flat structure is needed)
"""
from django.db import models, transaction


class LatestArticleRevision(models.Model):
    """
    Copies the latest revision of a wiki article (wiki.ArticleRevision) when
    saved or deleted in order to create a flat list for searching.
    """

    article_id = models.BigIntegerField(unique=True)
    title = models.CharField(max_length=512, null=False, blank=False)
    content = models.TextField(blank=True)

    search_classname = 'Wiki Article'

    @classmethod
    def copy_article_revision(kls, revision):
        """
        Create/Update LatestArticleRevision from an ArticleRevision instance
        """
        with transaction.commit_on_success():
            latest_article, lar_created = kls.objects.get_or_create(
                article_id=revision.article.id,
            )
            latest_article.title = revision.title
            latest_article.content = revision.content
            latest_article.save()

    @classmethod
    def purge(kls, article):
        """
        Remove LatestArticleRevision whose article was deleted or purged
        """
        kls.objects.filter(article_id=article.id).delete()

    def __unicode__(self):
        return self.title

    @models.permalink
    def get_absolute_url(self):
        return ('wiki:get', (self.article_id,))

########NEW FILE########
__FILENAME__ = base
# Django settings for raspberryio project.
import os

PROJECT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
PROJECT_ROOT = os.path.abspath(os.path.join(PROJECT_PATH, os.pardir))

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS
DEFAULT_FROM_EMAIL = 'reset-password@raspberry.io'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'raspberryio',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/New_York'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

AUTHENTICATION_BACKENDS = ("mezzanine.core.auth_backends.MezzanineBackend",)

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = os.path.join(PROJECT_ROOT, 'public', 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'public', 'static')

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    os.path.join(PROJECT_PATH, 'static'),
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.contrib.messages.context_processors.messages',
    'django.core.context_processors.debug',
    'django.core.context_processors.media',
    'django.core.context_processors.request',
    'django.core.context_processors.i18n',
    'django.core.context_processors.static',
    "django.core.context_processors.tz",
    "mezzanine.conf.context_processors.settings",
    'sekizai.context_processors.sekizai',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.cache.UpdateCacheMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.redirects.middleware.RedirectFallbackMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "mezzanine.core.request.CurrentRequestMiddleware",
    "mezzanine.core.middleware.TemplateForDeviceMiddleware",
    "mezzanine.core.middleware.TemplateForHostMiddleware",
    "mezzanine.core.middleware.AdminLoginInterfaceSelectorMiddleware",
    "mezzanine.core.middleware.SitePermissionMiddleware",
    # Uncomment the following if using any of the SSL settings:
    "mezzanine.core.middleware.SSLRedirectMiddleware",
    "mezzanine.pages.middleware.PageMiddleware",
    'django.middleware.cache.FetchFromCacheMiddleware',
)

# Store these package names here as they may change in the future since
# at the moment we are using custom forks of them.
PACKAGE_NAME_FILEBROWSER = "filebrowser_safe"
PACKAGE_NAME_GRAPPELLI = "grappelli_safe"

ADMIN_MEDIA_PREFIX = STATIC_URL + "grappelli/"

ROOT_URLCONF = 'raspberryio.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'raspberryio.wsgi.application'

TEMPLATE_DIRS = (
    os.path.join(PROJECT_PATH, 'templates'),
)

FIXTURE_DIRS = (
    os.path.join(PROJECT_PATH, 'fixtures'),
)


INSTALLED_APPS = (
    # Django Contrib apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.humanize",
    "django.contrib.redirects",
    "django.contrib.sessions",
    "django.contrib.sites",
    "django.contrib.staticfiles",
    # External apps
    'south',
    'compressor',
    'django_push.subscriber',
    'actstream',
    'bootstrap_toolkit',
    'django_notify',
    'mptt',
    'sekizai',
    'sorl.thumbnail',
    'wiki',
    'wiki.plugins.attachments',
    'wiki.plugins.notifications',
    'wiki.plugins.images',
    # Mezzanine
    "mezzanine.boot",
    "mezzanine.conf",
    "mezzanine.core",
    "mezzanine.generic",
    "mezzanine.blog",
    "mezzanine.forms",
    "mezzanine.pages",
    "mezzanine.galleries",
    "mezzanine.twitter",
    "mezzanine.accounts",
    PACKAGE_NAME_FILEBROWSER,
    PACKAGE_NAME_GRAPPELLI,
    # RaspberryIO apps
    "raspberryio.userprofile",
    "raspberryio.project",
    "raspberryio.search_models",
    "raspberryio.search",
    "raspberryio.aggregator",
    "raspberryio.qanda",
)

PASSWORD_HASHERS = (
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.SHA1PasswordHasher',
    'django.contrib.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.CryptPasswordHasher',
)
# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}


# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'KEY_PREFIX': 'raspberryio',
    },
}

CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 600
CACHE_MIDDLEWARE_KEY_PREFIX = 'generic-site-cache'
CACHE_MIDDLEWARE_ANONYMOUS_ONLY = True

# Application settings
SKIP_SOUTH_TESTS = True

COMPRESS_PRECOMPILERS = (
    ('text/less', 'lessc {infile} {outfile}'),
)

COMPRESS_CSS_FILTERS = (
    'compressor.filters.cssmin.CSSMinFilter',
)

COMPRESS_JS_FILTERS = (
    'compressor.filters.jsmin.JSMinFilter',
)

# Mezzanine settings
AUTH_PROFILE_MODULE = "userprofile.Profile"
ACCOUNTS_PROFILE_FORM_CLASS = "raspberryio.userprofile.forms.UserProfileForm"

ACCOUNTS_PROFILE_VIEWS_ENABLED = True
LOGIN_REDIRECT_URL = 'raspberryio.userprofile.views.profile_dashboard'

# Supply the custom TinyMCE JavaScript
TINYMCE_SETUP_JS = os.path.join('js', 'libs', 'tinymce_setup.js')

# Limit Mezzanine RichText fields to these html tags
RICHTEXT_ALLOWED_TAGS = (
    'a', 'abbr', 'acronym', 'address', 'area', 'b', 'bdo', 'big', 'blockquote',
    'br', 'caption', 'center', 'cite', 'code', 'col', 'colgroup',
    'dd', 'del', 'dfn', 'dir', 'div', 'dl', 'dt', 'em', 'font',
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'ins', 'kbd', 'label',
    'legend', 'li', 'map', 'menu', 'ol', 'optgroup',
    'option', 'p', 'pre', 'q', 's', 'samp', 'select', 'small', 'span',
    'strike', 'strong', 'sub', 'sup', 'table', 'tbody', 'td',
    'tfoot', 'th', 'thead', 'tr', 'tt', 'u', 'ul', 'var', 'wbr'
)

# PubSubHubbub settings
FEED_APPROVERS_GROUP_NAME = "feed-approver"
SUPERFEEDR_CREDS = ""  # list of [email,secretkey]
PUSH_HUB = 'https://superfeedr.com/hubbub'
PUSH_CREDENTIALS = 'raspberryio.aggregator.utils.push_credentials'

# django-wiki settings
"""
See https://github.com/benjaoming/django-wiki/blob/master/wiki/conf/settings.py
for more django-wiki settings (No real documentation)
"""
WIKI_ACCOUNT_HANDLING = False

# activity stream settings
ACTSTREAM_SETTINGS = {
    'MODELS': (
        'auth.user', 'project.project', 'project.projectstep',
        'qanda.question', 'qanda.answer', 'wiki.article'
    ),
    'FETCH_RELATIONS': True,
    'USE_PREFETCH': True,
}

# Models to use in Mezzanine SearchManager. These models have proxy models
# dynamically defined for them that subclass Searchable in
# raspberryio.search.models
# Expected format:
# {'appname.modelname': {'field': weight, 'field': weight}, ...}

SEARCH_MODEL_INDEXES = {
    'auth.user': {
        'username': 5, 'first_name': 10, 'last_name': 5,
    },
    'project.project': {
        'title': 10, 'tldr': 5,
    },
    'project.projectstep': {
        'content': 10,
    },
    'qanda.question': {
        'title': 10, 'question': 5,
    },
    'qanda.answer': {
        'answer': 3,
    },
    # LatestArticleRevision represents the latest flat list of wiki articles
    'search_models.latestarticlerevision': {
        'title': 10, 'content': 5,
    },
}

####################
# DYNAMIC SETTINGS #
####################

# set_dynamic_settings() will rewrite globals based on what has been
# defined so far, in order to provide some better defaults where
# applicable. We also allow this settings module to be imported
# without Mezzanine installed, as the case may be when using the
# fabfile, where setting the dynamic settings below isn't strictly
# required.
try:
    from mezzanine.utils.conf import set_dynamic_settings
except ImportError:
    pass
else:
    set_dynamic_settings(globals())

# Disqus
DISQUS_SHORTNAME = 'raspberryio-dev'
DISQUS_HOSTNAME = 'http://raspberry.io'

########NEW FILE########
__FILENAME__ = dev
from raspberryio.settings.base import *

DEBUG = True
TEMPLATE_DEBUG = DEBUG

MIDDLEWARE_CLASSES += (
    'debug_toolbar.middleware.DebugToolbarMiddleware',
)

INSTALLED_APPS += (
    'debug_toolbar',
)

INTERNAL_IPS = ('127.0.0.1', )

CACHES['default']['BACKEND'] = 'django.core.cache.backends.dummy.DummyCache'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

DEBUG_TOOLBAR_CONFIG = {
    'INTERCEPT_REDIRECTS': False
}


COMPRESS_ENABLED = False

CELERY_ALWAYS_EAGER = True

# Testing
SOUTH_TESTS_MIGRATE = True

TEST_RUNNER = 'hilbert.test.CoverageRunner'

DEFAULT_TEST_LABELS = ['project', 'userprofile', 'search', 'qanda', 'aggregator', ]

COVERAGE_MODULES = (
    'forms',
    'models',
    'views',
    'utils',
)

########NEW FILE########
__FILENAME__ = local.example
import sys

from raspberryio.settings.dev import *

## Override settings here

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'yv!hkvt&amp;k8dn^$*$&amp;lif)#ydw8zvk4iz93s8m+$x%eyg-!$n69'


# Special test settings
if 'test' in sys.argv:
    CELERY_ALWAYS_EAGER = True

    COMPRESS_ENABLED = False
    PASSWORD_HASHERS = (
        'django.contrib.auth.hashers.SHA1PasswordHasher',
        'django.contrib.auth.hashers.MD5PasswordHasher',
    )

    DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'

    CACHES['default']['BACKEND'] = 'django.core.cache.backends.dummy.DummyCache'

    SOUTH_TESTS_MIGRATE = False

########NEW FILE########
__FILENAME__ = production
import json
import os

from ConfigParser import RawConfigParser

from raspberryio.settings.staging import *

# import secrets
try:
    SECRETS_ROOT = os.path.abspath(os.path.join(PROJECT_ROOT, os.pardir))
    config = RawConfigParser()
    config.read(os.path.join(SECRETS_ROOT, 'settings.ini'))
    SUPERFEEDR_CREDS = json.loads(config.get('secrets', 'SUPERFEEDR_CREDS'))
    SECRET_KEY = json.loads(config.get('secrets', 'SECRET_KEY'))
    DATABASES['default']['NAME'] = config.get('database', 'DATABASE_NAME')
    DATABASES['default']['HOST'] = config.get('database', 'DATABASE_HOST')
    DATABASES['default']['USER'] = config.get('database', 'DATABASE_USER')
    DATABASES['default']['PASSWORD'] = config.get('database', 'DATABASE_PASSWORD')

except:
    pass

EMAIL_SUBJECT_PREFIX = '[Raspberryio Prod] '

# Disqus
DISQUS_SHORTNAME = 'raspberryio'

########NEW FILE########
__FILENAME__ = staging
import json
import os

from ConfigParser import RawConfigParser

from raspberryio.settings.base import *

DEBUG = False
TEMPLATE_DEBUG = DEBUG

ADMINS = (
        ('RaspberryIO Team', 'raspberryio-team@caktusgroup.com'),
    )
MANAGERS = ADMINS

DATABASES['default']['NAME'] = 'raspberryio_staging'

INSTALLED_APPS += (
    'gunicorn',
)

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    }
}

EMAIL_SUBJECT_PREFIX = '[Raspberryio Staging] '

# Django Compressor configuration
COMPRESS_ENABLED = True
COMPRESS_OFFLINE = True

# Setup SSL
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# import secrets
try:
    SECRETS_ROOT = os.path.abspath(os.path.join(PROJECT_ROOT, os.pardir))
    config = RawConfigParser()
    config.read(os.path.join(SECRETS_ROOT, 'settings.ini'))
    SUPERFEEDR_CREDS = json.loads(config.get('secrets', 'SUPERFEEDR_CREDS'))
    SECRET_KEY = json.loads(config.get('secrets', 'SECRET_KEY'))
except:
    pass

# Disqus
DISQUS_SHORTNAME = 'raspberryio-staging'

########NEW FILE########
__FILENAME__ = travis
import sys

from raspberryio.settings.dev import *

## Override settings here

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'yv!hkvt&amp;k8dn^$*$&amp;lif)#ydw8zvk4iz93s8m+$x%eyg-!$n69'


# Special test settings
if 'test' in sys.argv:
    CELERY_ALWAYS_EAGER = True

    COMPRESS_ENABLED = False
    PASSWORD_HASHERS = (
        'django.contrib.auth.hashers.SHA1PasswordHasher',
        'django.contrib.auth.hashers.MD5PasswordHasher',
    )

    DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'

    CACHES['default']['BACKEND'] = 'django.core.cache.backends.dummy.DummyCache'

    SOUTH_TESTS_MIGRATE = False

########NEW FILE########
__FILENAME__ = signals
from django.db.models.signals import post_save, pre_delete
from django.contrib.auth.models import User

from actstream import action
from actstream.actions import unfollow

from wiki.models.article import Article, ArticleRevision

from raspberryio.search_models.models import LatestArticleRevision


def wiki_article_handler(sender, instance, created, **kwargs):
    revision = instance.current_revision
    if revision:
        # Copy the revision, but if it is deleted remove LatestArticleRevisions
        if not revision.deleted:
            LatestArticleRevision.copy_article_revision(revision)
        else:
            LatestArticleRevision.purge(instance)


def wiki_revision_handler(sender, instance, created, **kwargs):
    # Add wiki article edit to user's Activity Stream
    if instance.user:
        action.send(instance.user, verb='edited the wiki article', target=instance.article)
    # Create/Update LatestArticleRevision
    LatestArticleRevision.copy_article_revision(instance)


def wiki_article_delete_handler(sender, instance, **kwargs):
    # Article is purged, remove all LatestArticleRevisions if still present
    LatestArticleRevision.purge(instance)


def wiki_revision_delete_handler(sender, instance, **kwargs):
    # If a revision is somehow deleted, but the article still has a current
    # revision update LatestArtcileRevision to match that one
    if instance.article and instance.article.current_revision:
        LatestArticleRevision.copy_article_revision(
            instance.article.current_revision
        )


def user_followers_delete_handler(sender, instance, **kwargs):
    """
    Make all users unfollow the user being deleted.
    N.B. Because django-activity-stream is using a GFK, these do not cascade
    delete.
    """
    # Import act_models here. If imported at the top, this interferes with
    # appconf imports and breaks compressor configuration.
    # See https://github.com/jezdez/django_compressor/issues/333
    from actstream import models as act_models

    followers = act_models.followers(instance)
    for follower in followers:
        unfollow(follower, instance)


post_save.connect(wiki_article_handler, sender=Article)
post_save.connect(wiki_revision_handler, sender=ArticleRevision)
pre_delete.connect(wiki_article_delete_handler, sender=Article)
pre_delete.connect(wiki_article_delete_handler, sender=ArticleRevision)
pre_delete.connect(user_followers_delete_handler, sender=User)

########NEW FILE########
__FILENAME__ = urls
from django.conf import settings
from django.conf.urls import patterns, include, url
from django.conf.urls.static import static
from django.contrib import admin
from django.views.generic import RedirectView

from django_notify.urls import get_pattern as get_notify_pattern
from wiki.urls import get_pattern as get_wiki_pattern
from aggregator.feeds import CommunityAggregatorFeed, CommunityAggregatorFirehoseFeed

admin.autodiscover()


urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls)),


    # RaspberryIO apps
    url(r"^$", 'raspberryio.project.views.index', name="home"),
    url(r'^users/$', 'raspberryio.userprofile.views.profile_users', name='profile-users'),
    url(r'^dashboard/$', 'raspberryio.userprofile.views.profile_dashboard', name='profile-dashboard'),
    url(r'^projects/', include('raspberryio.project.urls')),
    url(r'^accounts/', include('raspberryio.userprofile.urls')),
    url(r'^search/', include('raspberryio.search.urls')),
    url(r'^community/blogs/', include('raspberryio.aggregator.urls')),
    url(r'^community/', include('raspberryio.qanda.urls')),
    url(r'^rss/community/blogs/firehose/$', CommunityAggregatorFirehoseFeed(), name='aggregator-firehose-feed'),
    url(r'^rss/community/blogs/(?P<slug>[\w-]+)/$', CommunityAggregatorFeed(), name='aggregator-feed'),

    # django-push
    url(r'^subscriber/', include('django_push.subscriber.urls')),

    # django-activity-streams
    url('^activity/', include('actstream.urls')),

    # wiki
    url(r'^wiki/notify/', get_notify_pattern()),
    url(r'^wiki/.*_settings/', RedirectView.as_view(url='/wiki/')),
    url(r'wiki/', get_wiki_pattern()),
    # Mezzanine urls
    url(r'^', include('mezzanine.urls')),

) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# Adds ``STATIC_URL`` to the context of error pages, so that error
# pages can use JS, CSS and images.
handler404 = "mezzanine.core.views.page_not_found"
handler500 = "mezzanine.core.views.server_error"

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from raspberryio.userprofile import models as userprofile


class ProfileAdmin(admin.ModelAdmin):
    model = userprofile.Profile


admin.site.register(userprofile.Profile, ProfileAdmin)

########NEW FILE########
__FILENAME__ = forms
from mezzanine.accounts.forms import ProfileForm
from bootstrap_toolkit.widgets import BootstrapTextInput

from raspberryio.project.forms import PlaceHolderMixin


class UserProfileForm(PlaceHolderMixin, ProfileForm):

    def __init__(self, *args, **kwargs):
        super(UserProfileForm, self).__init__(*args, **kwargs)
        twitter_id_field = self.fields['twitter_id']
        twitter_id_field.widget = BootstrapTextInput(
            prepend='@',
        )
        twitter_id_field.widget.attrs.update({
            'placeholder': 'Twitter Id'
        })

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Profile'
        db.create_table('userprofile_profile', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['auth.User'], unique=True)),
            ('bio', self.gf('django.db.models.fields.TextField')(default='', blank=True)),
            ('website', self.gf('django.db.models.fields.URLField')(default='', max_length=200, blank=True)),
            ('twitter_id', self.gf('django.db.models.fields.CharField')(default='', max_length=200, blank=True)),
            ('use_gravatar', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('avatar', self.gf('django.db.models.fields.files.ImageField')(max_length=100, null=True, blank=True)),
        ))
        db.send_create_signal('userprofile', ['Profile'])


    def backwards(self, orm):
        # Deleting model 'Profile'
        db.delete_table('userprofile_profile')


    models = {
        'actstream.action': {
            'Meta': {'ordering': "('-timestamp',)", 'object_name': 'Action'},
            'action_object_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'action_object'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'action_object_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'actor_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'actor'", 'to': "orm['contenttypes.ContentType']"}),
            'actor_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'target_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'target'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'target_object_id': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'verb': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'userprofile.profile': {
            'Meta': {'object_name': 'Profile'},
            'avatar': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'bio': ('django.db.models.fields.TextField', [], {'default': "''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'twitter_id': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
            'use_gravatar': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'}),
            'website': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['userprofile']
########NEW FILE########
__FILENAME__ = models
from django.db import models

from raspberryio.aggregator.models import Feed


class Profile(models.Model):
    """
    The user profile model
    """

    user = models.OneToOneField("auth.User")
    bio = models.TextField(blank=True, default='')
    website = models.URLField(blank=True, default='')
    twitter_id = models.CharField(max_length=200, blank=True, default='')
    use_gravatar = models.BooleanField(default=True)
    avatar = models.ImageField(upload_to="images/avatars",
                               blank=True, null=True,
                               help_text="Upload an image no larger than 500x500px and 1MB.")

    def clean(self):
        # strip twitter_id of @ symbol, if present
        if self.twitter_id.startswith('@'):
            self.twitter_id = self.twitter_id.lstrip('@')

    def __unicode__(self):
        return self.user.username

    @models.permalink
    def get_absolute_url(self):
        return ('profile', (self.user.username,))

    @property
    def feed_owner(self):
        "Determine if Profile.user manages feeds"
        return True if Feed.objects.filter(owner=self.user) else False

########NEW FILE########
__FILENAME__ = profile_tags
from django import template

register = template.Library()


@register.inclusion_tag('includes/avatar.html', takes_context=True)
def avatar(context, profile, size=150):
    context.update({
        'profile': profile,
        'profile_user': profile.user,
        'size': size,
    })
    return context

########NEW FILE########
__FILENAME__ = relationship_tags
from django.contrib.auth.models import User
from django import template

from actstream.models import Follow

register = template.Library()

@register.filter
def followers(username):
    try:
        user = User.objects.get(username=username)
    except User.DoesNotExist:
        raise template.TemplateSyntaxError("%r is not a valid username" % username)
    return len(Follow.objects.followers(user))

@register.filter
def following(username):
    try:
        user = User.objects.get(username=username)
    except User.DoesNotExist:
        raise template.TemplateSyntaxError("%r is not a valid username" % username)
    return len(Follow.objects.following(user))

########NEW FILE########
__FILENAME__ = test_forms
from django.core.urlresolvers import reverse

from raspberryio.project.tests.base import RaspberryIOBaseTestCase


class UserProfileFormTestCase(RaspberryIOBaseTestCase):
    url_name = "profile_update"

    def setUp(self):
        self.user = self.create_user(data={'username': 'test', 'password': 'pwd'})
        self.url = reverse(self.url_name)

    def test_twitter_handle_on_form(self):
        self.client.login(username=self.user.username, password='pwd')
        response = self.client.get(self.url)
        twitter_el = '<input type="text" placeholder="Twitter Id" name="twitter_id" id="id_twitter_id" />'
        self.assertContains(response, twitter_el, html=True)

########NEW FILE########
__FILENAME__ = test_models
from raspberryio.aggregator.models import FeedType, Feed
from raspberryio.project.tests.base import RaspberryIOBaseTestCase


class ProfileTestCase(RaspberryIOBaseTestCase):

    def setUp(self):
        self.user = self.create_user()
        self.profile = self.user.get_profile()

    def test_unicode_method(self):
        self.assertEqual(self.profile.__unicode__(), self.user.username)

    def test_absolute_url(self):
        self.assertEqual(self.profile.get_absolute_url(), '/users/%s/' % self.user.username)

    def test_model_clean(self):
        "Ensure the twitter_id is stripped of the @ symbol during clean"
        self.profile.twitter_id = '@test'
        self.profile.clean()
        self.profile.save()
        self.assertFalse('@' in self.profile.twitter_id)

    def test_feed_owner(self):
        "Determine if the user owns and Aggregator.Feed instances"
        self.assertFalse(self.profile.feed_owner)

        self.feed_type = FeedType(name="Test Feed Type", slug="test-feed-type", can_self_add=True)
        self.feed_type.save()
        self.approved_feed = Feed(title="Approved", feed_url="foo.com/rss/", public_url="foo.com/", is_defunct=False,
                             feed_type=self.feed_type, owner=self.profile.user)
        self.approved_feed.save()
        self.assertTrue(self.profile.feed_owner)

########NEW FILE########
__FILENAME__ = test_views
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse

from raspberryio.project.tests.base import ProjectBaseTestCase, RaspberryIOBaseTestCase

from actstream.actions import follow


class RelationshipTestCase(RaspberryIOBaseTestCase):
    url_name = 'profile-related'

    def setUp(self):
        self.user = self.create_user(data={'username': 'test'})
        self.user1 = self.create_user(data={'username': 'test1'})

    def get_url_args(self, user, relationship):
        return reverse(self.url_name, args=(user, relationship))

    def test_no_followers(self):
        url = self.get_url_args(self.user, 'followers')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        related_users = len(response.context['related_users'])
        self.assertEqual(related_users, self.user.follow_set.all().count())

    def test_not_following(self):
        url = self.get_url_args(self.user, 'following')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        related_users = len(response.context['related_users'])
        self.assertEqual(related_users, self.user.follow_set.all().count())

    def test_followers(self):
        follow(self.user1, self.user)
        url = self.get_url_args(self.user, 'followers')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        related_users = len(response.context['related_users'])
        self.assertEqual(related_users, self.user1.follow_set.all().count())

    def test_following(self):
        follow(self.user, self.user1)
        url = self.get_url_args(self.user, 'following')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        related_users = len(response.context['related_users'])
        self.assertEqual(related_users, self.user.follow_set.all().count())

    def test_paginator_out_of_range(self):
        # if page# is > max, then show last page
        follow(self.user, self.user1)
        url = self.get_url_args(self.user, 'following')
        response = self.client.get(url, {'page': '9999'})
        related_users = response.context['related_users']
        self.assertEqual(len(related_users), self.user.follow_set.all().count())


class DashboardTestCase(ProjectBaseTestCase):
    url_name = 'profile-dashboard'

    def setUp(self):
        self.user = self.create_user(data={'username': 'test', 'password': 'pwd'})
        self.user1 = self.create_user(data={'username': 'test1', 'password': 'pwd'})
        self.user2 = self.create_user(data={'username': 'test2', 'password': 'pwd'})
        self.project1 = self.create_project(user=self.user1)
        self.url = reverse(self.url_name)

    def test_not_following(self):
        self.client.login(username=self.user.username, password='pwd')
        response = self.client.get(self.url)
        actions = len(response.context['actions'])
        self.assertEqual(actions, self.user.follow_set.all().count())

    def test_following(self):
        follow(self.user, self.user1)
        follow(self.user, self.user2)
        # have 1 & 2 follow each other to generate actions
        follow(self.user1, self.user2)
        follow(self.user2, self.user1)
        self.client.login(username=self.user.username, password='pwd')
        response = self.client.get(self.url)
        actions = len(response.context['actions'])
        self.assertEqual(actions, 2)

    def test_login_required(self):
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 302)


class ActiveUsersTestCase(RaspberryIOBaseTestCase):
    url_name = 'profile-users'

    def setUp(self):
        self.user = self.create_user(data={'username': 'test', 'password': 'pwd'})
        self.user1 = self.create_user(data={'username': 'test1', 'password': 'pwd'})
        self.user2 = self.create_user(data={'username': 'test2', 'password': 'pwd'})
        self.url = reverse(self.url_name)

    def test_active_users(self):
        response = self.client.get(self.url)
        users = response.context['users']
        self.assertEqual(len(users), User.objects.all().count())

    def test_inactive_users(self):
        self.user.is_active = False
        self.user.save()
        response = self.client.get(self.url)
        users = response.context['users']
        self.assertEqual(len(users), User.objects.filter(is_active=True).count())

    def test_paginator_out_of_range(self):
        # if page# is > max, then show last page
        response = self.client.get(self.url, {'page': '9999'})
        users = response.context['users']
        self.assertEqual(len(users), User.objects.all().count())


class ActivityStreamTestCase(RaspberryIOBaseTestCase):
    url_name = 'profile-actions'

    def setUp(self):
        self.user = self.create_user(data={'username': 'test', 'password': 'pwd'})
        self.user1 = self.create_user(data={'username': 'test1', 'password': 'pwd'})

    def get_url_args(self, user):
        return reverse(self.url_name, args=(user,))

    def test_empty_activity_stream(self):
        url = self.get_url_args(self.user)
        response = self.client.get(url)
        actions = response.context['actions']
        self.assertEqual(len(actions), 0)

    def test_nonempty_activity_stream(self):
        follow(self.user, self.user1)
        url = self.get_url_args(self.user)
        response = self.client.get(url)
        actions = response.context['actions']
        self.assertEqual(len(actions), 1)


class LoginTestCase(RaspberryIOBaseTestCase):
    url_name = 'login'

    def setUp(self):
        self.user = self.create_user(data={'username': 'test', 'password': 'right'})
        self.url = reverse(self.url_name)

    def test_login(self):
        # try bad password first
        response = self.client.post(self.url, {'username': 'test', 'password': 'wrong'})
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Invalid')
        # now try right password
        response = self.client.post(self.url, {'username': 'test', 'password': 'right'})
        self.assertEqual(response.status_code, 302)
        self.assertRedirects(response, reverse('profile-dashboard'))

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url


urlpatterns = patterns('raspberryio.userprofile.views',
    # custom django-activity-stream based views
    url(r'^(?P<username>[\w.\-]+)/stream/$', 'profile_actions', name='profile-actions'),
    url(r'^(?P<username>[\w.\-]+)/(?P<relation>[followers|following]+)/$', 'profile_related_list', name='profile-related'),

    # Override just the login view
    url(r'^login/$', 'login', name='login'),
    url('^', include('mezzanine.accounts.urls')),
)

########NEW FILE########
__FILENAME__ = views
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.shortcuts import render, get_object_or_404, redirect

from actstream import models

from raspberryio.userprofile.models import Profile

from django.contrib.auth import login as auth_login
from django.contrib.messages import info
from django.utils.translation import ugettext_lazy as _
from django.views.decorators.cache import cache_page
from django.views.decorators.csrf import csrf_protect

from mezzanine.utils.models import get_user_model
from mezzanine.accounts.forms import LoginForm
from mezzanine.utils.urls import login_redirect


User = get_user_model()


@cache_page(60 * 30)
@csrf_protect
def login(request, template="accounts/account_login.html"):
    """
    Login Form
    """
    # Copied from mezzanine/accounts/views so we can override cacheing behavior
    # as it related to the CSRF cookie.
    form = LoginForm(request.POST or None)
    if request.method == "POST" and form.is_valid():
        authenticated_user = form.save()
        info(request, _("Successfully logged in"))
        auth_login(request, authenticated_user)
        return login_redirect(request)
    context = {"form": form, "title": _("Login")}
    return render(request, template, context)


def profile_related_list(request, username, relation):
    "Render the list of a users folllowers or who the user is following"
    profile = get_object_or_404(Profile, user__username__iexact=username)
    user = profile.user

    # get a queryset of users described by this relationship
    if relation == 'followers':
        related_users = models.followers(user)
    elif relation == 'following':
        related_users = models.following(user)

    paginator = Paginator(related_users, 20)
    page = request.GET.get('page')
    try:
        related_users = paginator.page(page)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        related_users = paginator.page(1)
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        related_users = paginator.page(paginator.num_pages)
    return render(request, "accounts/account_profile_related.html", {
        'user': user,
        'profile': profile,
        'related_users': related_users,
    })


def profile_actions(request, username):
    "Custom renderer for user profile activity stream"
    profile = get_object_or_404(Profile, user__username__iexact=username)
    user = profile.user
    return render(request, "accounts/account_profile_actions.html", {
        'user': user,
        'profile': profile,
        'actions': models.actor_stream(user),
    })


@login_required
def profile_dashboard(request):
    """
    Landing page for logged in users. Renders the activity stream of followed
    users.
    """
    user = get_object_or_404(User, id=request.user.id)
    return render(request, "accounts/account_dashboard.html", {
        'user': user,
        'profile': user.get_profile(),
        'actions': models.user_stream(user),
    })


def profile_users(request):
    """Returns the list of active site users"""
    users = User.objects.filter(is_active=True, profile__isnull=False) \
        .order_by('username')
    paginator = Paginator(users, 20)

    page = request.GET.get('page')
    try:
        users = paginator.page(page)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        users = paginator.page(1)
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        users = paginator.page(paginator.num_pages)
    return render(request, "accounts/activeusers.html", {
        'users': users
    })

########NEW FILE########
__FILENAME__ = wsgi
"""
WSGI config for raspberryio project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "raspberryio.settings")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

# Apply WSGI middleware here.
# from helloworld.wsgi import HelloWorldApplication
# application = HelloWorldApplication(application)

########NEW FILE########
