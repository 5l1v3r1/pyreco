PythonOnWheels. 
===================
![pow_logo_sv!](http://www.pythononwheels.org/static/img/pow_logo_idea_1_extra_small.png "pow_logo_svg")

     The plain, simple and easy to use rapid web App generator framework for python.

Based on reliable python 'standards' and frameworks
-------------------------

	* WeboB		    WSGI Request (response) handling
	* SQLAlchemy    ORM / DB Access
	* Beaker		Session Management
	* Mako		    Template engine for Views
	* WSGI		    Web Service
	* JQuery	    Javascript 
	* Bootstrap	    Twitter Layout Framework 
	* Nose  	    Tests
Key Features:
--------------
	* Model View Controller (MVC)
	* Uses the well proven Ruby On Rails principles
	    * convention over configuration
	    * generate_model, generate_controller, generate_migration
	* Scaffolding
	    * generate_scaffold
	* JQuery integration
	* AJAX
	* Responsive Layout - Twitter Bootstrap
	* Lightweight - simple and easy to use
	* Nose Tests
	    * automatically generated for you. runtest script to run them
	* Database Migrations
	* web app generation with batteries included:
		* Session support
		* basic authentication
	* apache mod_wsgi ready 
	* includes a ready to run simple_server
	    * full environment on your laptop, mac or pc
	    * just untar/unzip in any dir and run!

Focus
-------------------
    The clear Focus was to develop a Framework in between the existing Big Ones,
    which have quite some learning curve to get started and
    the small, very low level ones, which make it neccessary to develop
    quite a lot yourself.
    There are good examples of both in the python community and there are 
    good reasons for those frameworks to exists as well.

Philosophy
------------------- 
    PythonOnWheels' main objective is to make you focus on your webapp
    and not on the Framework or the low-level coding. 
    If you dont recognize you use it, it's just the way it's ment to be.


Just give it a try. Any comments are very welcome. mail to khz@pythononwheels.org

Kind regards,
klaas
PythonOnWheels. 
===================
![pow_logo_sv!](http://www.pythononwheels.org/static/img/pow_logo_idea_1_extra_small.png "pow_logo_svg")

     The plain, simple and easy to use rapid web App generator framework for python.

Based on reliable python 'standards' and frameworks
-------------------------

	* WeboB		    WSGI Request (response) handling
	* SQLAlchemy    ORM / DB Access
	* Beaker		Session Management
	* Mako		    Template engine for Views
	* WSGI		    Web Service
	* JQuery	    Javascript 
	* Bootstrap	    Twitter Layout Framework 
	* Nose  	    Tests
Key Features:
--------------
	* Model View Controller (MVC)
	* Uses the well proven Ruby On Rails principles
	    * convention over configuration
	    * generate_model, generate_controller, generate_migration
	* Scaffolding
	    * generate_scaffold
	* JQuery integration
	* AJAX
	* Responsive Layout - Twitter Bootstrap
	* Lightweight - simple and easy to use
	* Nose Tests
	    * automatically generated for you. runtest script to run them
	* Database Migrations
	* web app generation with batteries included:
		* Session support
		* basic authentication
	* apache mod_wsgi ready 
	* includes a ready to run simple_server
	    * full environment on your laptop, mac or pc
	    * just untar/unzip in any dir and run!

Focus
-------------------
    The clear Focus was to develop a Framework in between the existing Big Ones,
    which have quite some learning curve to get started and
    the small, very low level ones, which make it neccessary to develop
    quite a lot yourself.
    There are good examples of both in the python community and there are 
    good reasons for those frameworks to exists as well.

Philosophy
------------------- 
    PythonOnWheels' main objective is to make you focus on your webapp
    and not on the Framework or the low-level coding. 
    If you dont recognize you use it, it's just the way it's ment to be.


Just give it a try. Any comments are very welcome. mail to khz@pythononwheels.org

Kind regards,
klaas
GitHub Flavored Markdown
================================

*View the [source of this content](http://github.github.com/github-flavored-markdown/sample_content.html).*

Let's get the whole "linebreak" thing out of the way. The next paragraph contains two phrases separated by a single newline character:

Roses are red
Violets are blue

The next paragraph has the same phrases, but now they are separated by two spaces and a newline character:

Roses are red  
Violets are blue

Oh, and one thing I cannot stand is the mangling of words with multiple underscores in them like perform_complicated_task or do_this_and_do_that_and_another_thing.

A bit of the GitHub spice
-------------------------

In addition to the changes in the previous section, certain references are auto-linked:

* SHA: be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2
* User@SHA ref: mojombo@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2
* User/Project@SHA: mojombo/god@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2
* \#Num: #1
* User/#Num: mojombo#1
* User/Project#Num: mojombo/god#1

These are dangerous goodies though, and we need to make sure email addresses don't get mangled:

My email addy is tom@github.com.

Math is hard, let's go shopping
-------------------------------

In first grade I learned that 5 > 3 and 2 < 7. Maybe some arrows. 1 -> 2 -> 3. 9 <- 8 <- 7.

Triangles man! a^2 + b^2 = c^2

We all like making lists
------------------------

The above header should be an H2 tag. Now, for a list of fruits:

* Red Apples
* Purple Grapes
* Green Kiwifruits

Let's get crazy:

1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.

What about some code **in** a list? That's insane, right?

1. In Ruby you can map like this:

        ['a', 'b'].map { |x| x.uppercase }

2. In Rails, you can do a shortcut:

        ['a', 'b'].map(&:uppercase)

Some people seem to like definition lists

<dl>
  <dt>Lower cost</dt>
  <dd>The new version of this product costs significantly less than the previous one!</dd>
  <dt>Easier to use</dt>
  <dd>We've changed the product so that it's much easier to use!</dd>
</dl>

I am a robot
------------

Maybe you want to print `robot` to the console 1000 times. Why not?

    def robot_invasion
      puts("robot " * 1000)
    end

You see, that was formatted as code because it's been indented by four spaces.

How about we throw some angle braces and ampersands in there?

    <div class="footer">
        &copy; 2004 Foo Corporation
    </div>

Set in stone
------------

Preformatted blocks are useful for ASCII art:

<pre>
             ,-. 
    ,     ,-.   ,-. 
   / \   (   )-(   ) 
   \ |  ,.>-(   )-< 
    \|,' (   )-(   ) 
     Y ___`-'   `-' 
     |/__/   `-' 
     | 
     | 
     |    -hrr- 
  ___|_____________ 
</pre>

Playing the blame game
----------------------

If you need to blame someone, the best way to do so is by quoting them:

> I, at any rate, am convinced that He does not throw dice.

Or perhaps someone a little less eloquent:

> I wish you'd have given me this written question ahead of time so I
> could plan for it... I'm sure something will pop into my head here in
> the midst of this press conference, with all the pressure of trying to
> come up with answer, but it hadn't yet...
>
> I don't want to sound like
> I have made no mistakes. I'm confident I have. I just haven't - you
> just put me under the spot here, and maybe I'm not as quick on my feet
> as I should be in coming up with one.

Table for two
-------------

<table>
  <tr>
    <th>ID</th><th>Name</th><th>Rank</th>
  </tr>
  <tr>
    <td>1</td><td>Tom Preston-Werner</td><td>Awesome</td>
  </tr>
  <tr>
    <td>2</td><td>Albert Einstein</td><td>Nearly as awesome</td>
  </tr>
</table>

Crazy linking action
--------------------

I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        "Google"
  [2]: http://search.yahoo.com/  "Yahoo Search"
  [3]: http://search.msn.com/    "MSN Search"
===========================================================
 Pythononwheels  http://www.pythononwheels.org
===========================================================
the plain,simple and easy to use rapid web App generator framework for python.

### Based on reliable python 'standards' and frameworks
==========================================================

	* WeboB		    WSGI Request (response) handling
	* SQLAlchemy    ORM / DB Access
	* Beaker		Session Management
	* Mako		    Template engine for Views
	* WSGI		    Web Service
	* JQuery	    Javascript 
	* Bootstrap	    Twitter Layout Framwork 

### Key Features:
==========================================================
	* Model View Controller
	* Uses the well proven Ruby On Rails principles
	    ** convention over configuration
	    ** generate_model, generate_controller, generate_migration
	* Scaffolding
	    ** generate_scaffold
	* JQuery integration
	* AJAX
	* Responsive Layout - Twitter Bootstrap
	* Lightweight - simple and easy to use
	* Nose Tests
	    * automatically generate for you. runtest script to run them
	* Database Migrations
	* web app generation with batteries included:
		** Session support
		** basic authentication
	* apache mod_wsgi ready 
	* includes a ready to run simple_server
	    * full environment on your laptop, mac or pc
	
The clear Focus was to develop a Framework in between the existing Big Ones,
which have quite some learning curve to get started and
the small, very low level ones, which make it neccessary to develop
quite a lot yourself.
There are good examples of both in the python community and there are 
good reasons for those frameworks to exists as well.

BUT 
PythonOnWheels' main objective is to make you focus on your webapp
and not on the Framework or the low-level coding. 
If you dont recognize you use it, it's just the way it's ment to be.


Just give it a try. Any comments are very welcome. mail to khz@pythononwheels.org

Kind regards,
klaas
## 2.0 BOOTSTRAP JS PHILOSOPHY
These are the high-level design rules which guide the development of Bootstrap's plugin apis.

---

### DATA-ATTRIBUTE API

We believe you should be able to use all plugins provided by Bootstrap purely through the markup API without writing a single line of javascript.

We acknowledge that this isn't always the most performant and sometimes it may be desirable to turn this functionality off altogether. Therefore, as of 2.0 we provide the ability to disable the data attribute API by unbinding all events on the body namespaced with `'data-api'`. This looks like this:

    $('body').off('.data-api')

To target a specific plugin, just include the plugins name as a namespace along with the data-api namespace like this:

    $('body').off('.alert.data-api')

---

### PROGRAMATIC API

We also believe you should be able to use all plugins provided by Bootstrap purely through the JS API.

All public APIs should be single, chainable methods, and return the collection acted upon.

    $(".btn.danger").button("toggle").addClass("fat")

All methods should accept an optional options object, a string which targets a particular method, or null which initiates the default behavior:

    $("#myModal").modal() // initialized with defaults
    $("#myModal").modal({ keyboard: false }) // initialized with now keyboard
    $("#myModal").modal('show') // initializes and invokes show immediately afterqwe2

---

### OPTIONS

Options should be sparse and add universal value. We should pick the right defaults.

All plugins should have a default object which can be modified to effect all instance's default options. The defaults object should be available via `$.fn.plugin.defaults`.

    $.fn.modal.defaults = { … }

An options definition should take the following form:

    *noun*: *adjective* - describes or modifies a quality of an instance

examples:

    backdrop: true
    keyboard: false
    placement: 'top'

---

### EVENTS

All events should have an infinitive and past participle form. The infinitive is fired just before an action takes place, the past participle on completion of the action.

    show | shown
    hide | hidden

---

### CONSTRUCTORS

Each plugin should expose it's raw constructor on a `Constructor` property -- accessed in the following way:


    $.fn.popover.Constructor

---

### DATA ACCESSOR

Each plugin stores a copy of the invoked class on an object. This class instance can be accessed directly through jQuery's data API like this:

    $('[rel=popover]').data('popover') instanceof $.fn.popover.Constructor

---

### DATA ATTRIBUTES

Data attributes should take the following form:

- data-{{verb}}={{plugin}} - defines main interaction
- data-target || href^=# - defined on "control" element (if element controls an element other than self)
- data-{{noun}} - defines class instance options

examples:

    // control other targets
    data-toggle="modal" data-target="#foo"
    data-toggle="collapse" data-target="#foo" data-parent="#bar"

    // defined on element they control
    data-spy="scroll"

    data-dismiss="modal"
    data-dismiss="alert"

    data-toggle="dropdown"

    data-toggle="button"
    data-toggle="buttons-checkbox"
    data-toggle="buttons-radio"
