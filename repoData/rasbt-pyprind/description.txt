# PyPrind Benchmarks

I tested the performance of the PyPrind progress bar and percentage indicator visualization with an typical application where I created a SQLite database.  
The database was initialized with IDs from a simple text files consisting of 6,056,212 rows.  
For this test, I used a set of three similar scripts:  <br>
<br>
1) init_sqlite.py  (procedure without PyPrind visualization)  
2) init_sqlite_progbar.py  (procedure with PyPrind progress bar visualization)  
3) init_sqlite_percentind.py  (procedure with PyPrind percentage indicator visualization)  

The test code and results can be found at [https://github.com/rasbt/pyprind/tree/master/benchmarks/benchmarks/benchmark_data_v1.0.0_v1.0.0/init_sqlite_test](https://github.com/rasbt/pyprind/tree/master/benchmarks/benchmarks/benchmark_data_v1.0.0_v1.0.0/init_sqlite_test)

## Test code

The contents of the input text file for the database initialization and the respective scripts are shown in the following figures:  
#### id_list.txt
![id_list.txt](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/images/list_id.txt.png)
#### 1) init_sqlite.py
![init_sqlite.py](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/images/init_sqlite_code.png)
#### 2) init_sqlite_progbar.py
![init_sqlite_progbar.py](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/images/init_sqlite_progbar_code.png)
#### 3) init_sqlite_percentind.py
![init_sqlite_percentind.py](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/images/init_sqlite_percentind_code.png)
#### 4) the resulting database: my_sqlite_db.sqlite
![my_sqlite_db.sqlite](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/images/my_sqlite_db.png)

## Results

I measured the CPU times for each script three times in a row to check for consistency, and plotted the averages with variances as error bars.  
The data is shown in the spreadsheet below, which can be downloaded from [https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/raw_data/init_sqlite_spreadsheet.csv](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/raw_data/init_sqlite_spreadsheet.csv)
![spreadheet_image](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/images/init_sqlite_spreadsheet.png)  

The machine that was used for this test had the following specifications:  
<hr>
**System Specifications:**  
Model Name: Mac mini (Mid 2010)  
Processor Name: Intel Core 2 Duo  
Processor Speed: 2.4 GHz  
Number of Processors: 1  
Total Number of Cores: 2  
L2 Cache: 3 MB  
Memory: 8 GB 1067 MHz DDR3  
Bus Speed: 1.07 GHz  

Operating System: Mac OS X 10.9.1  
Python version: 3.3.3  
<hr>

Using PyPrind's progress bar visualization resulted in a 16.7508 sec longer CPU time for the 6,056,212 iterations in the data processing loop.  PyPrind's percentage indicator used a little bit more resources and added 38.5565 sec of CPU time.  
The results (average values with variances as error bars) are shown in the bar plot below.  
![https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/plots/barplot_nit_sqlite.png](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/plots/barplot_nit_sqlite.png)

The results indicate that the PyPrind progress visualization has a reasonable performance.  
The cost can be calculated as follows: (total number of iterations) / (additional CPU time in sec)  
For PyPrind's progress bar, an 361,547 iterations cost 1 sec of CPU time, and PyPrind's percent indicator requires 1 sec of CPU time for every 157,074 iterations. The results are visualized in the bar plot below.  
![bar plot lines per second](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.0.0/init_sqlite_test/plots/init_sqlite_lines_per_sec.png)

# PyPrind Benchmarks

I tested the performance of the PyPrind progress bar and percentage indicator visualization with an typical application where I created a SQLite database.  
The database was initialized with IDs from a simple text files consisting of 6,056,212 rows.  
For this test, I used a set of three similar scripts:  <br>
<br>
1) init_sqlite.py  (procedure without PyPrind visualization)  
2) init_sqlite_progbar.py  (procedure with PyPrind progress bar visualization)  
3) init_sqlite_percentind.py  (procedure with PyPrind percentage indicator visualization)  

The test code and results can be found at [https://github.com/rasbt/pyprind/tree/master/benchmarks/benchmarks/benchmark_data_v1.1.1_v1.1.1/init_sqlite_test](https://github.com/rasbt/pyprind/tree/master/benchmarks/benchmarks/benchmark_data_v1.1.1_v1.1.1/init_sqlite_test)

## Test code

The contents of the input text file for the database initialization and the respective scripts are shown in the following figures:  
#### id_list.txt
![id_list.txt](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/list_id.txt.png)
#### 1) init_sqlite.py
![init_sqlite.py](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/init_sqlite_code.png)
#### 2) init_sqlite_progbar.py
![init_sqlite_progbar.py](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/init_sqlite_progbar_code.png)
#### 3) init_sqlite_percentind.py
![init_sqlite_percentind.py](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/init_sqlite_percentind_code.png)
#### 4) the resulting database: my_sqlite_db.sqlite
![my_sqlite_db.sqlite](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/my_sqlite_db.png)

## Results

I measured the CPU times for each script three times in a row to check for consistency, and plotted the averages with variances as error bars.  
The data is shown in the spreadsheet below, which can be downloaded from [https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/raw_data/init_sqlite_spreadsheet.csv](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/raw_data/init_sqlite_spreadsheet.csv)
![spreadheet_image](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/init_sqlite_spreadsheet.png)  

The machine that was used for this test had the following specifications:  
<hr>
**System Specifications:**  
Model Name: Mac mini (Mid 2010)  
Processor Name: Intel Core 2 Duo  
Processor Speed: 2.4 GHz  
Number of Processors: 1  
Total Number of Cores: 2  
L2 Cache: 3 MB  
Memory: 8 GB 1067 MHz DDR3  
Bus Speed: 1.07 GHz  

Operating System: Mac OS X 10.9.1  
Python version: 3.3.3  
<hr>

Using PyPrind's progress bar visualization resulted in a 20.8347 sec longer CPU time for the 6,056,212 iterations in the data processing loop.  PyPrind's percentage indicator used a little bit more resources and added 40.4861 sec of CPU time.  
The results (average values with variances as error bars) are shown in the bar plot below.  
![https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/plots/barplot_nit_sqlite.png](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/plots/barplot_nit_sqlite.png)

The results indicate that the PyPrind progress visualization has a reasonable performance.  
The cost can be calculated as follows: (total number of iterations) / (additional CPU time in sec)  
For PyPrind's progress bar, an 290,678 iterations cost 1 sec of CPU time, and PyPrind's percent indicator requires 1 sec of CPU time for every 149,587 iterations. The results are visualized in the bar plot below.  
![bar plot lines per second](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/plots/init_sqlite_lines_per_sec.png)

# PyPrind Benchmarks

I tested the performance of the PyPrind progress bar and percentage indicator visualization with an typical application where I created a SQLite database.  
The database was initialized with IDs from a simple text files consisting of 6,056,212 rows.  
For this test, I used a set of three similar scripts:  <br>
<br>
1) init_sqlite.py  (procedure without PyPrind visualization)  
2) init_sqlite_progbar.py  (procedure with PyPrind progress bar visualization)  
3) init_sqlite_percentind.py  (procedure with PyPrind percentage indicator visualization)  

The test code and results can be found at [https://github.com/rasbt/pyprind/tree/master/benchmarks/benchmarks/benchmark_data_v1.1.1_v1.1.1/init_sqlite_test](https://github.com/rasbt/pyprind/tree/master/benchmarks/benchmarks/benchmark_data_v1.1.1_v1.1.1/init_sqlite_test)

## Test code

The contents of the input text file for the database initialization and the respective scripts are shown in the following figures:  
#### id_list.txt
![id_list.txt](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/list_id.txt.png)
#### 1) init_sqlite.py
![init_sqlite.py](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/init_sqlite_code.png)
#### 2) init_sqlite_progbar.py
![init_sqlite_progbar.py](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/init_sqlite_progbar_code.png)
#### 3) init_sqlite_percentind.py
![init_sqlite_percentind.py](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/init_sqlite_percentind_code.png)
#### 4) the resulting database: my_sqlite_db.sqlite
![my_sqlite_db.sqlite](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/my_sqlite_db.png)

## Results

I measured the CPU times for each script three times in a row to check for consistency, and plotted the averages with variances as error bars.  
The data is shown in the spreadsheet below, which can be downloaded from [https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/raw_data/init_sqlite_spreadsheet.csv](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/raw_data/init_sqlite_spreadsheet.csv)
![spreadheet_image](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/images/init_sqlite_spreadsheet.png)  

The machine that was used for this test had the following specifications:  
<hr>
**System Specifications:**  
Model Name: Mac mini (Mid 2010)  
Processor Name: Intel Core 2 Duo  
Processor Speed: 2.4 GHz  
Number of Processors: 1  
Total Number of Cores: 2  
L2 Cache: 3 MB  
Memory: 8 GB 1067 MHz DDR3  
Bus Speed: 1.07 GHz  

Operating System: Mac OS X 10.9.1  
Python version: 3.3.3  
<hr>

Using PyPrind's progress bar visualization resulted in a 20.8347 sec longer CPU time for the 6,056,212 iterations in the data processing loop.  PyPrind's percentage indicator used a little bit more resources and added 40.4861 sec of CPU time.  
The results (average values with variances as error bars) are shown in the bar plot below.  
![https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/plots/barplot_nit_sqlite.png](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/plots/barplot_init_sqlite.png)

The results indicate that the PyPrind progress visualization has a reasonable performance.  
The cost can be calculated as follows: (total number of iterations) / (additional CPU time in sec)  
For PyPrind's progress bar, an 290,678 iterations cost 1 sec of CPU time, and PyPrind's percent indicator requires 1 sec of CPU time for every 149,587 iterations. The results are visualized in the bar plot below.  
![bar plot lines per second](https://raw2.github.com/rasbt/pyprind/master/benchmarks/benchmark_data_v1.1.1/init_sqlite_test/plots/init_sqlite_lines_per_sec.png)

#PyPrind - A simple Python Progress Indidicator Utility

Sometimes it can be useful to display the progress of a computation, especially for more intensive tasks. I have written a simple module that tracks the progress of iterative Python procedures via a progress bar or percentage indicator. I've been using this tool for a while now, and I thought that it might be worthwhile to share it with you in hope it can also be useful to one or the other.

So, your initial question is probably: "how does this progress tracking look like?"
I don't want to push your visual thinking to its limit here (or rather my capabilities to put this visual image into written words), thus I just uploaded a simple video on YouTube to show you how it looks like.  

<iframe width="420" height="315" src="//www.youtube.com/embed/GC2J0SMmiWQ" frameborder="0" allowfullscreen></iframe>


###Download and Installation:

The PyPrind module works with both Python 2.7 and Python 3.3, and it can be downloaded directly from the Python Package Index ([https://pypi.python.org/pypi/PyPrind](https://pypi.python.org/pypi/PyPrind)) to install it via

	python setup.py install
	
If you don't want to download and install the module manually, you can also use  `pip install pyprind` or `easy_install pyprind` from the command line.  

You are also welcome to fork the project on GitHub: [https://github.com/rasbt/pyprind](https://github.com/rasbt/pyprind) 

###Usage

Currently, I implemented two ways to track a progress via PyPrind. This can be either by a classic progress bar or via a percentage indicator. Both options require just a simple 2-step process:   

1) initialization of the progress-tracking object with the number of iterations  
2) calling the `.update()` method  

I kept the progress tracking rather simple on purpose, in order to minimize performance losses.

Below are two simple examples:


<pre>n = 10000000
my_prbar = pyprind.ProgBar(n)   # 1) initialization with number of iterations
for i in range(n):	
    # do some computation
    my_prbar.update()           # 2) update the progress visualization
</pre>

<pre>n = 10000000
my_prperc = pyprind.ProgPercent(n) # 1) initialization with number of iterations
for i in range(n):	
    # do some computation
    my_prerc.update()              # 2) update the progress visualization
</pre>


For optional parameters, like adjusting the width of the progress bar and turning-off the live-time tracking of the percentage indicator, please refer to the documentation at [http://pythonhosted.org/PyPrind/](http://pythonhosted.org/PyPrind/)


###Example Application - SQLite database operations

I am working a lot with SQLite databases these days and found it very useful to use progress tracking to get an rough idea of how much data was already processed and to estimate how long an operation could take.  In the example below I have provided some simple code to initialize a SQLite database and feed it IDs from a list in text format.  
The ID list consists of 6,056,212 rows where each row consists of a unique ID number associated with a certain category 'a', 'b', 'c', or 'd'.  
The figure below shows how this ID file looks like:  
![./Images/pyprind_list_id.png](./Images/pyprind_list_id.png)

For the SQLite database, I am using an integer column to save the IDs (as Primary Key) for performance reasons. The second column is a text column that contains the categorical information. The image below is a screenshot from FireFox's [SQLite Manager plugin](https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/):



![./Images/pyprind_my_sqlite_db.png](./Images/pyprind_my_sqlite_db.png)


And here is the Python code that I used to create this SQLite database:



![./Images/pyprind_init_sqlite_code.png](./Images/pyprind_init_sqlite_code.png)


The two YouTube videos show how the execution looks like:

<iframe width="560" height="315" src="//www.youtube.com/embed/EUBAYU_JczY" frameborder="0" allowfullscreen></iframe>
 
 <iframe width="560" height="315" src="//www.youtube.com/embed/f6S9fXFwTmg" frameborder="0" allowfullscreen></iframe>


#### Performance

I was also interested to see how big the performance loss of the overall database initialization is if I track the progress via the PyPrind objects. And, based on the results, it looks quite reasonable: Using PyPrind's progress bar visualization resulted in a 20.8347 sec longer CPU time for the 6,056,212 iterations in the data processing loop. As expected, PyPrind's percentage indicator used a little bit more resources and added 40.4861 sec of CPU time.  
The results (average values with variances as error bars) are shown in the bar plot below.
![./Images/pyprind_barplot_init_sqlite.png](./Images/pyprind_barplot_init_sqlite.png)

Using a simple rule of three we can deduce that for PyPrind's progress bar ~300,000 iterations cost 1 sec extra CPU time here, and PyPrind's percent indicator requires 1 sec of extra CPU time for every ~150,000 iterations.
Of course those are only rough measurements, which are also subject to the machine you are running the computation.  
For me, is was quite sufficient to know that PyPrind does not have a huge impact on the overall performance, but if you are interested in more detailed performance profiles, you can take a look at [http://docs.python.org/3.3/library/profile.html]()the Python Profilers) and analyze your script via 
`python -m cProfile your_code.py`

**So, I hope this simple progress tracking tool could be useful to you, and please let me know if you have any ideas or suggestions!**
 


<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
<style>
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote {
    margin: 0;
    padding: 0;
}
body {
    font-family: "Helvetica Neue", Helvetica, "Hiragino Sans GB", Arial, sans-serif;
    font-size: 13px;
    line-height: 18px;
    color: #737373;
    background-color: white;
    margin: 10px 13px 10px 13px;
}
table {
	margin: 10px 0 15px 0;
	border-collapse: collapse;
}
td,th {	
	border: 1px solid #ddd;
	padding: 3px 10px;
}
th {
	padding: 5px 10px;	
}

a {
    color: #0069d6;
}
a:hover {
    color: #0050a3;
    text-decoration: none;
}
a img {
    border: none;
}
p {
    margin-bottom: 9px;
}
h1,
h2,
h3,
h4,
h5,
h6 {
    color: #404040;
    line-height: 36px;
}
h1 {
    margin-bottom: 18px;
    font-size: 30px;
}
h2 {
    font-size: 24px;
}
h3 {
    font-size: 18px;
}
h4 {
    font-size: 16px;
}
h5 {
    font-size: 14px;
}
h6 {
    font-size: 13px;
}
hr {
    margin: 0 0 19px;
    border: 0;
    border-bottom: 1px solid #ccc;
}
blockquote {
    padding: 13px 13px 21px 15px;
    margin-bottom: 18px;
    font-family:georgia,serif;
    font-style: italic;
}
blockquote:before {
    content:"\201C";
    font-size:40px;
    margin-left:-10px;
    font-family:georgia,serif;
    color:#eee;
}
blockquote p {
    font-size: 14px;
    font-weight: 300;
    line-height: 18px;
    margin-bottom: 0;
    font-style: italic;
}
code, pre {
    font-family: Monaco, Andale Mono, Courier New, monospace;
}
code {
    background-color: #fee9cc;
    color: rgba(0, 0, 0, 0.75);
    padding: 1px 3px;
    font-size: 12px;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    border-radius: 3px;
}
pre {
    display: block;
    padding: 14px;
    margin: 0 0 18px;
    line-height: 16px;
    font-size: 11px;
    border: 1px solid #d9d9d9;
    white-space: pre-wrap;
    word-wrap: break-word;
}
pre code {
    background-color: #fff;
    color:#737373;
    font-size: 11px;
    padding: 0;
}
sup {
    font-size: 0.83em;
    vertical-align: super;
    line-height: 0;
}
* {
	-webkit-print-color-adjust: exact;
}
@media screen and (min-width: 914px) {
    body {
        width: 854px;
        margin:10px auto;
    }
}
@media print {
	body,code,pre code,h1,h2,h3,h4,h5,h6 {
		color: black;
	}
	table, pre {
		page-break-inside: avoid;
	}
}
</style>
<title>Sections</title>

</head>
<body>
<h1>PyPrind</h1>

<p>The PyPrind (Python Progress Indicator) module provides a progress bar and a percentage indicator<br/>
object that let you track the progress of a loop structure or other iterative computation.<br/>
Typical applications include the processing of large data sets to provide an intuitive estimate
at runtime about the progress of the computation.</p>

<p>Example demonstration videos:<br/>
- <a href="http://youtu.be/iWjSGe89Pvs">in a terminal shell</a><br/>
- <a href="http://youtu.be/XXy-fslQ09g">in an IPython Notebook</a></p>

<p><br>
<br></p>

<p><a href="http://youtu.be/XXy-fslQ09g"><img src="https://raw.githubusercontent.com/rasbt/pyprind/master/images/screenshot_ipython_nb_260.png" alt="Screenshot from iPython notebook" /></a></p>

<p><br></p>

<hr>


<p>I am really looking forward to your comments and suggestions to improve and extend this module! Just send me a quick note <br/>
via Twitter: <a href="https://twitter.com/rasbt">@rasbt</a><br/>
or Email: <a href="mailto:bluewoodtree@gmail.com">se.raschka@gmail.com</a></p>

<p>The <code>pyprind</code> module can be found on GitHub at <a href="https://github.com/rasbt/pyprind">https://github.com/rasbt/pyprind</a></p>

<hr>


<p><br>
<br>
<br></p>

<h4>Sections</h4>

<p><p><a href="#installation">Installation</a><br>
<p><a href="#documentation">Documentation</a><br>
<p><a href="#options">Optional Parameters</a><br>
<p><a href="#examples">Examples</a><br>
<p><a href="#contact">Contact</a><br>
<p><a href="#changelog">Changelog</a><br></p>

<p><p><a name="installation"></a></p>
<br>
<br>
<br></p>

<h1>Installation</h1>

<p>You can use the following command to install PyPrind:<br/>
<code>pip install pyprind</code><br/>
 or  <br/>
<code>easy_install pyprind</code></p>

<p>Alternatively, you download the package manually from the Python Package Index <a href="https://pypi.python.org/pypi/PyPrind">https://pypi.python.org/pypi/PyPrind</a>, unzip it, navigate into the package, and use the command:</p>

<p><code>python setup.py install</code><br/>
or<br/>
<code>python3 setup.py install</code></p>

<p><p><a name="documentation"></a></p>
<br>
<br>
<br></p>

<h1>Documentation</h1>

<p>PyPrind consists of two class objects that can visualize the progress of a computation on the output screen.<br/>
Progress bars are visualized via  a <code>ProgBar()</code> object, and alternatively, the progress can be tracked and shown as percentage via a <code>ProgPercent()</code> object.</p>

<p>The general usage of <code>ProgBar()</code> and <code>ProgPercent()</code> consists of 2 basic steps:</p>

<p>1) initialize a new <code>ProgBar()</code> or <code>ProgPercent()</code> object with the number of iterations of the computation that is to be performed<br/>
2) update the <code>ProgBar()</code> or <code>ProgPercent()</code>  object for each iteration via the <code>.update()</code>method</p>

<p><pre>n = 10000000
my_prbar = pyprind.ProgBar(n)   # 1) initialization with number of iterations
for i in range(n):<br/>
    # do some computation
    my_prbar.update()           # 2) update the progress visualization
</pre></p>

<p><p><a name="optional"></a></p>
<br>
<br>
<br></p>

<h2>Optional parameters :</h2>

<h4>Default Parameters</h4>

<p><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-weight: bold">class</span> <span style="color: #BB0066; font-weight: bold">ProgBar</span>(Prog):
    <span style="color: #DD4422">&quot;&quot;&quot;</span>
<span style="color: #DD4422">    Initializes a progress bar object that allows visuzalization</span>
<span style="color: #DD4422">    of an iterational computation in the standard output screen. </span></p>

<p><span style="color: #DD4422">    Keyword Arguments:</span>
<span style="color: #DD4422">        iterations (int): number of iterations of the computation</span>
<span style="color: #DD4422">        track_time (bool): default True. Prints elapsed time when loop has finished</span>
<span style="color: #DD4422">        width (int): default 30. Sets the progress bar width in characters.</span>
<span style="color: #DD4422">        stream (int): default 2. Takes 1 for stdout, 2 for stderr, or given stream object</span>
<span style="color: #DD4422">        title (str): default &#39;&#39;. A title for the progress bar</span>
<span style="color: #DD4422">        monitor (bool): default False. Monitors CPU and memory usage if True </span>
<span style="color: #DD4422">            (requires &#39;psutil&#39; package).</span></p>

<p><span style="color: #DD4422">    &quot;&quot;&quot;</span>
</pre></div></p>

<p><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-weight: bold">class</span> <span style="color: #BB0066; font-weight: bold">ProgPercent</span>(Prog):
    <span style="color: #DD4422">&quot;&quot;&quot;</span>
<span style="color: #DD4422">    Initializes a percentage indicator object that allows visuzalization</span>
<span style="color: #DD4422">    of an iterational computation in the standard output screen. </span></p>

<p><span style="color: #DD4422">    Keyword Arguments:</span>
<span style="color: #DD4422">        iterations (int): number of iterations of the computation</span>
<span style="color: #DD4422">        track_time (bool): default True. Prints elapsed time when loop has finished</span>
<span style="color: #DD4422">        stream (int): default 2. Takes 1 for stdout, 2 for stderr, or given stream object</span>
<span style="color: #DD4422">        title (str): default &#39;&#39;. A title for the progress bar</span>
<span style="color: #DD4422">        monitor (bool): default False. Monitors CPU and memory usage if True </span>
<span style="color: #DD4422">            (requires &#39;psutil&#39; package).</span></p>

<p><span style="color: #DD4422">    &quot;&quot;&quot;</span>
</pre></div></p>

<p><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">    <span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">update</span>(<span style="color: #007020">self</span>, iterations<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">1</span>):
        <span style="color: #DD4422">&quot;&quot;&quot;</span>
<span style="color: #DD4422">        Updates the progress bar in every iteration of the task.</span></p>

<p><span style="color: #DD4422">        Keyword arguments:</span>
<span style="color: #DD4422">            iterations (int): default argument can be changed to integer values</span>
<span style="color: #DD4422">                &gt;=1 in order to update the progress indicators more than once </span>
<span style="color: #DD4422">                per iteration.</span></p>

<p><span style="color: #DD4422">        &quot;&quot;&quot;</span>
</pre></div></p>

<p><br>
<br>
<br></p>

<h5>Setting the width of the progress bar</h5>

<p><code>my_prog = pyprind.ProgBar(n, width=70) # default = 50</code>
<br>
<br>
<br></p>

<h5>Set whether CPU time should be reported or not</h5>

<p>The optional <code>track_time</code> parameter can be set for both <code>ProgBar()</code> and <code>ProgPercent()</code> objects.</p>

<p><code>my_prbar = pyprind.ProgBar(n, track_time=False)  # default = True</code><br/>
<code>my_perc = pyprind.ProgPercent(n, track_time=False)  # default = True</code></p>

<p><code>ProgBar</code> objects will print the estimated time left and the total time<br/>
when the computation has finished.<br/>
<code>ProgPercent</code> objects reports the elapsed time during the computation and prints<br/>
the estimated finish time of the loop. <br/>
<br>
<br>
<br></p>

<h5>Selecting an output stream</h5>

<p>By default, <code>pyprind</code> objects writes output to the Standard error stream (<code>stderr</code>). If you<br/>
want to direct the output to the Standard output (<code>stdout</code>), you can initialize <code>pyprind</code>
with the argument <code>stream=2</code>.</p>

<p><pre>
my_prbar = pyprind.ProgBar(n, stream=1) # writes to stdout
my_prbar = pyprind.ProgBar(n, stream=2) # writes to stderr, default
</pre></p>

<p><strong><em>You can also just use a given stream by passing it directly: <br/>
Example:</em></strong>
<pre>
my_prbar = pyprind.ProgBar(n, stream=self.stdout)  # writes to given stream
</pre></p>

<p><br>
<br>
<br></p>

<h5>Giving a tracking object a title</h5>

<p>If a tracking object is initialized with a title, it is printed when a new tracking<br/>
object is initialized.
The title and elapsed time can be printed via the <code>print()</code> function after the tracking has finished.</p>

<p><pre>
my_prbar = pyprind.ProgBar(n, title='My Progress Bar')</p>

<p>Screen output:
My Progress Bar
0%                          100%
[##############################] | ETA[sec]: 0.000</p>

<p></pre>
<br>
<br>
<br></p>

<h5>Printing a tracking object</h5>

<p>The <code>print()</code> function can be invoked after the tracking is completed to<br/>
print the title and elapsed time to the screen.</p>

<p><pre>
n = 1000000
    my_bar = pyprind.ProgBar(n, title='My Progress Bar')
    for i in range(n):
        # do some computation
        my_bar.update()
    print('\n\nPrint tracking object ...\n')
    print(my_bar)</p>

<p>Screen output:</p>

<p>My Progress Bar
0%                          100%
[##############################] | ETA[sec]: 0.000
Total time elapsed: 6.399 sec
Title: My Progress Bar
                      Started: 04/18/2014 19:12:07
                      Finished: 04/18/2014 19:12:14
                      Total time elapsed: 6.399 sec</p>

<p></pre></p>

<p><br>
<br>
<br></p>

<h5>Printing a tracking object with CPU and memory usage</h5>

<p>If we additionally want to <code>print()</code> the CPU and memory usage after a run has completed,
we have to set the <code>monitor</code> argument to <code>True</code> when we initialize a new tracking object. (Note: the <code>monitor</code> mode requires the <code>psutil</code> package.)</p>

<p><pre>
n = 1000000
    my_bar = pyprind.ProgBar(n, title='My Progress Bar', monitor=True)
    for i in range(n):
        # do some computation
        my_bar.update()
    print('\n\nPrint tracking object ...\n')
    print(my_bar)</p>

<p>Screen output:</p>

<p>My Progress Bar
0%                          100%
[##############################] | ETA[sec]: 0.000
Total time elapsed: 6.391 sec
Title: My Progress Bar
                      Started: 04/18/2014 19:16:55
                      Finished: 04/18/2014 19:17:02
                      Total time elapsed: 6.391 sec
                      CPU %: 91.200000
                      Memory %: 0.098133
</pre></p>

<h5>Small note on usage in a custom Django management command.</h5>

<p>Django gives you a stdout object on the BaseCommand class. You will need to pass this to
<code>pyprind</code> as done above. Also note that by default, Django appends a newline to every write.
This uglyfies <code>pyprind</code> output, so ensure the write function gets passed <code>ending=""</code>.
<code>pyprind</code> will NOT do this for you.</p>

<p><p><a name="examples"></a></p></p>

<p><br>
<br>
<br></p>

<h1>Examples</h1>

<p>The following examples shall illustrate the typical usage of the PyPrind package.<br/>
A visualization can be viewed on YouTube: <a href="http://youtu.be/iWjSGe89Pvs">http://youtu.be/iWjSGe89Pvs</a></p>

<p><br>
<br>
<br></p>

<h2>Example - Progress Bar (simple)</h2>

<p><pre>import pyprind</p>

<p>n = 10000000
my_prbar = pyprind.ProgBar(n)
for i in range(n):
    # do some computation
    my_prbar.update()
</pre></p>

<p><strong>Screen Output</strong></p>

<p><pre>sebastian > python3 ./examples/ex1_progress_bar.py
0%                                    100%
[########################################] - ETA[sec]: 0.000<br/>
Total time elapsed: 4.481 sec
</pre></p>

<p><br>
<br>
<br></p>

<h2>Example - Percentage Indicator (simple)</h2>

<p><pre>import pyprind</p>

<p>n = 1000000
my_perc = pyprind.ProgPercent(n)
for i in range(n):
    # do some computation
    my_perc.update()
</pre></p>

<p><strong>Screen Output</strong></p>

<p><pre>sebastian > python3 ./examples/ex1_percentage_indicator.py
[ 34 %]   elapsed [sec]: 1.377  | ETA [sec]: 2.570
</pre>
<br>
<br>
<br></p>

<h2>Example - Progress Bar (all arguments)</h2>

<p><pre>import pyprind
n = 1000000
    my_bar = pyprind.ProgBar(n, stream=1, width=30, track_time=True, title='My Progress Bar', monitor=True)
    for i in range(n):
        # do some computation
        my_bar.update()
    print(my_bar)
</pre></p>

<p><strong>Screen Output</strong><br/>
<pre>My Progress Bar
0%                          100%
[##############################] | ETA[sec]: 0.000
Title: Progress Bar
                      Started: 04/18/2014 19:23:10
                      Finished: 04/18/2014 19:23:22
                      Total time elapsed: 11.272 sec
                      CPU %: 54.400000
                      Memory %: 0.098085
</pre></p>

<p><br>
<br>
<br></p>

<h2>Example - Percent Indicator (all arguments)</h2>

<p><pre>import pyprind
n = 1000000
    my_per = pyprind.ProgPercent(n, stream=1, track_time=True, title='My Percent Indicator', monitor=True)
    for i in range(n):
        # do some computation
        my_per.update()
    print(my_per)
</pre></p>

<p><strong>Screen Output</strong><br/>
<pre>My Percent Indicator
[100 %] elapsed [sec]: 4.205 | ETA[sec]: 0.000
Title: My Percent Indicator
                      Started: 04/18/2014 19:23:26
                      Finished: 04/18/2014 19:23:38
                      Total time elapsed: 11.775 sec
                      CPU %: 44.000000
                      Memory %: 0.097990
</pre></p>

<p><p><a name="contact"></a></p>
<br>
<br>
<br></p>

<h1> Contact</h1>

<p>If you have any questions or comments about PyPrind, please feel free to contact me via<br/>
eMail: <a href="mailto:se.raschka@gmail.com">se.raschka@gmail.com</a><br/>
or Twitter: <a href="https://twitter.com/rasbt">@rasbt</a></p>

<p>The <code>pyprind</code> module can be found on GitHub at <a href="https://github.com/rasbt/pyprind">https://github.com/rasbt/pyprind</a></p>

<p><br>
<br></p>

<p><p><a name="changelog"></a></p>
<br>
<br>
<br></p>

<h1>Changelog</h1>

<p><strong>VERSION 2.6.0</strong></p>

<ul>
<li>Added IPython Notebook support</li>
<li>Fixed to work with most recent psutil v. 0.6 for monitoring CPU and memory usage</li>
</ul>


<p><strong>VERSION 2.5.0</strong></p>

<ul>
<li>new default argument <code>monitor=False</code> was added to <code>ProgBar()</code> and <code>ProgPercent()</code> objects to monitor memory and CPU usage (via <code>psutil</code>) if <code>monitor</code> is set to True.</li>
</ul>


<p><strong>VERSION 2.4.0</strong></p>

<ul>
<li>default argument for <code>.update(iterations=1)</code> methods to increment the count by more than 1 per
iteration.</li>
</ul>


<p><strong>VERSION 2.3.1</strong></p>

<ul>
<li>minor fix of the output formatting</li>
</ul>


<p><strong>VERSION 2.3.0</strong></p>

<ul>
<li>added native print() support
prints title and elapsed time of an tracked object after loop completed</li>
<li>data member self.end stores elapsed time when loop completed</li>
<li>data member self.title saves title of the tracking objects</li>
</ul>


<p><strong>VERSION 2.2.0</strong></p>

<ul>
<li>added ETA (estimated time until arrival) tracking to progress bar<br/>
by Taylan Aydinli</li>
<li>better support for Python 2.x</li>
</ul>


<p><strong>VERSION 2.1.1</strong></p>

<ul>
<li>changed visuals of the printed progress for percentage indicators</li>
</ul>


<p><strong>VERSION 2.1.0</strong></p>

<ul>
<li>added ETA (estimated time until arrival) tracking by Taylan Aydinli</li>
</ul>


<p><strong>VERSION 2.0.3</strong></p>

<ul>
<li>Accepts a given outputstream for the <code>stream</code> parameter.</li>
</ul>


<p><strong>VERSION 2.0.2</strong></p>

<ul>
<li>Fixed bug that occurred for some Python 3.3.3 users
specifically on Linux Red Hat 4.4.7-1, GCC v. 4.4.7
that self.max_iter was cast to a float when <code>ProgBar()</code>
object was seeded with n=48</li>
</ul>


<p><strong>VERSION 2.0.1</strong></p>

<ul>
<li>fixed packaging of example files</li>
</ul>


<p><strong>VERSION 2.0.0</strong></p>

<ul>
<li>ProgBar and ProgPerc inherit data members from parent class Prog</li>
<li><p>Added ProgBar and ProgPerc default argument <code>stream=2</code> to write to stderr by
default. Set <code>stream=1</code> to write to stdout.</p>

<p>  my_prbar = pyprind.ProgBar(n, stream=1) # writes to stdout
  my_prbar = pyprind.ProgBar(n, stream=2) # writes to stderr, default</p></li>
<li><p>Does not redirect data to the standard output or error stream if program is not
outputting to a terminal</p></li>
</ul>


<p><strong>VERSION 1.1.1</strong></p>

<ul>
<li>fixed problem with packaging of example scripts</li>
</ul>


<p><strong>VERSION 1.1.0</strong></p>

<ul>
<li>Added live time tracking to percentage indicator</li>
<li>progress bar and percentage indicator complete automatically,
.finish() was removed</li>
</ul>


<p><strong>VERSION 1.0.4</strong></p>

<ul>
<li>Added boundary that .update() can't print over the
right progress bar limit.</li>
<li>Prints warning when ProgBar seed exits the number of iterations
in the loop.</li>
</ul>


<p><strong>VERSION 1.0.3</strong></p>

<ul>
<li>Reformatting of README files</li>
<li>minor updates in setup.py file</li>
</ul>


<p><strong>VERSION 1.0.2</strong></p>

<ul>
<li>corrected errors in the README files</li>
<li>added docstring to the <strong>init</strong>.py</li>
</ul>


<p><strong>VERSION 1.0.1</strong></p>

<ul>
<li>added more README formats</li>
<li>added class descriptions</li>
<li>added example scripts to the distribution</li>
</ul>

</body>
</html>
PyPrind
=============
The PyPrind (Python Progress Indicator) module provides a progress bar and a percentage indicator  
object that let you track the progress of a loop structure or other iterative computation.  
Typical applications include the processing of large data sets to provide an intuitive estimate 
at runtime about the progress of the computation.

**Example demonstration videos:**  
  
- [in a terminal shell](http://youtu.be/iWjSGe89Pvs)  
- [in an IPython Notebook](http://youtu.be/XXy-fslQ09g)

<br>
<br>

<a href="http://youtu.be/XXy-fslQ09g">![Screenshot from iPython notebook](https://raw.githubusercontent.com/rasbt/pyprind/master/images/screenshot_ipython_nb_260.png)</a>  




##<center>[Open the IPython Demo Notebook in nbviewer](http://nbviewer.ipython.org/github/rasbt/pyprind/blob/master/examples/pyprind_2.6.0_demo.ipynb)</center>

<center>
<br>
<br>
The cells can also be printed with white background shown in this (<a href="http://127.0.0.1:8888/notebooks/pyprind/examples/pyprind_2.6.0_demo.ipynb#streams">section</a>)
</center>
<a href="http://youtu.be/XXy-fslQ09g">![Screenshot from iPython notebook](https://raw.githubusercontent.com/rasbt/pyprind/master/images/screenshot_ipython_nb_260_white.png)</a>  



<br>
<hr>
I am really looking forward to your comments and suggestions to improve and extend this module! Just send me a quick note   
via Twitter: [@rasbt](https://twitter.com/rasbt)  
or Email: [se.raschka@gmail.com](mailto:bluewoodtree@gmail.com)

The `pyprind` module can be found on GitHub at [https://github.com/rasbt/pyprind](https://github.com/rasbt/pyprind)
<hr>

<br>
<br>
<br>
####Sections
<p><a href="#installation">Installation</a><br>
<p><a href="#documentation">Documentation</a><br>
<p><a href="#options">Optional Parameters</a><br>
<p><a href="#examples">Examples</a><br>
<p><a href="#contact">Contact</a><br>
<p><a href="#changelog">Changelog</a><br>


<p><a name="installation"></a></p>
<br>
<br>
<br>
Installation
=============
You can use the following command to install PyPrind:  
`pip install pyprind`  
 or    
`easy_install pyprind`  

Alternatively, you download the package manually from the Python Package Index [https://pypi.python.org/pypi/PyPrind](https://pypi.python.org/pypi/PyPrind), unzip it, navigate into the package, and use the command:

`python setup.py install`  
or  
`python3 setup.py install`  



<p><a name="documentation"></a></p>
<br>
<br>
<br>
Documentation
=============
PyPrind consists of two class objects that can visualize the progress of a computation on the output screen.  
Progress bars are visualized via  a `ProgBar()` object, and alternatively, the progress can be tracked and shown as percentage via a `ProgPercent()` object.  

The general usage of `ProgBar()` and `ProgPercent()` consists of 2 basic steps:

1) initialize a new `ProgBar()` or `ProgPercent()` object with the number of iterations of the computation that is to be performed  
2) update the `ProgBar()` or `ProgPercent()`  object for each iteration via the `.update() `method  


<pre>n = 10000000
my_prbar = pyprind.ProgBar(n)   # 1) initialization with number of iterations
for i in range(n):	
    # do some computation
    my_prbar.update()           # 2) update the progress visualization
</pre>


<p><a name="optional"></a></p>
<br>
<br>
<br>
Optional parameters :
--------------------------

#### Default Parameters

<div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-weight: bold">class</span> <span style="color: #BB0066; font-weight: bold">ProgBar</span>(Prog):
    <span style="color: #DD4422">&quot;&quot;&quot;</span>
<span style="color: #DD4422">    Initializes a progress bar object that allows visuzalization</span>
<span style="color: #DD4422">    of an iterational computation in the standard output screen. </span>

<span style="color: #DD4422">    Keyword Arguments:</span>
<span style="color: #DD4422">        iterations (int): number of iterations of the computation</span>
<span style="color: #DD4422">        track_time (bool): default True. Prints elapsed time when loop has finished</span>
<span style="color: #DD4422">        width (int): default 30. Sets the progress bar width in characters.</span>
<span style="color: #DD4422">        stream (int): default 2. Takes 1 for stdout, 2 for stderr, or given stream object</span>
<span style="color: #DD4422">        title (str): default &#39;&#39;. A title for the progress bar</span>
<span style="color: #DD4422">        monitor (bool): default False. Monitors CPU and memory usage if True </span>
<span style="color: #DD4422">            (requires &#39;psutil&#39; package).</span>

<span style="color: #DD4422">    &quot;&quot;&quot;</span>
</pre></div>


<div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-weight: bold">class</span> <span style="color: #BB0066; font-weight: bold">ProgPercent</span>(Prog):
    <span style="color: #DD4422">&quot;&quot;&quot;</span>
<span style="color: #DD4422">    Initializes a percentage indicator object that allows visuzalization</span>
<span style="color: #DD4422">    of an iterational computation in the standard output screen. </span>

<span style="color: #DD4422">    Keyword Arguments:</span>
<span style="color: #DD4422">        iterations (int): number of iterations of the computation</span>
<span style="color: #DD4422">        track_time (bool): default True. Prints elapsed time when loop has finished</span>
<span style="color: #DD4422">        stream (int): default 2. Takes 1 for stdout, 2 for stderr, or given stream object</span>
<span style="color: #DD4422">        title (str): default &#39;&#39;. A title for the progress bar</span>
<span style="color: #DD4422">        monitor (bool): default False. Monitors CPU and memory usage if True </span>
<span style="color: #DD4422">            (requires &#39;psutil&#39; package).</span>

<span style="color: #DD4422">    &quot;&quot;&quot;</span>
</pre></div>







<div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">    <span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">update</span>(<span style="color: #007020">self</span>, iterations<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">1</span>):
        <span style="color: #DD4422">&quot;&quot;&quot;</span>
<span style="color: #DD4422">        Updates the progress bar in every iteration of the task.</span>

<span style="color: #DD4422">        Keyword arguments:</span>
<span style="color: #DD4422">            iterations (int): default argument can be changed to integer values</span>
<span style="color: #DD4422">                &gt;=1 in order to update the progress indicators more than once </span>
<span style="color: #DD4422">                per iteration.</span>

<span style="color: #DD4422">        &quot;&quot;&quot;</span>
</pre></div>

<br>
<br>
<br>

##### Setting the width of the progress bar

`my_prog = pyprind.ProgBar(n, width=70)	# default = 50`
<br>
<br>
<br>

##### Set whether CPU time should be reported or not 
The optional `track_time` parameter can be set for both `ProgBar()` and `ProgPercent()` objects.   

`my_prbar = pyprind.ProgBar(n, track_time=False)  # default = True`  
`my_perc = pyprind.ProgPercent(n, track_time=False)  # default = True`  

`ProgBar` objects will print the estimated time left and the total time  
when the computation has finished.  
`ProgPercent` objects reports the elapsed time during the computation and prints  
the estimated finish time of the loop.   
<br>
<br>
<br>

##### Selecting an output stream  
By default, `pyprind` objects writes output to the Standard error stream (`stderr`). If you  
want to direct the output to the Standard output (`stdout`), you can initialize `pyprind` 
with the argument `stream=2`.

<pre>
my_prbar = pyprind.ProgBar(n, stream=1) # writes to stdout
my_prbar = pyprind.ProgBar(n, stream=2) # writes to stderr, default
</pre>

***You can also just use a given stream by passing it directly:   
Example:***
<pre>
my_prbar = pyprind.ProgBar(n, stream=self.stdout)  # writes to given stream
</pre>

<br>
<br>
<br>
##### Giving a tracking object a title
If a tracking object is initialized with a title, it is printed when a new tracking  
object is initialized.
The title and elapsed time can be printed via the `print()` function after the tracking has finished.

<pre>
my_prbar = pyprind.ProgBar(n, title='My Progress Bar')

Screen output:
My Progress Bar
0%                          100%
[##############################] | ETA[sec]: 0.000

</pre>
<br>
<br>
<br>
##### Printing a tracking object
The `print()` function can be invoked after the tracking is completed to  
print the title and elapsed time to the screen.  

<pre>
n = 1000000
    my_bar = pyprind.ProgBar(n, title='My Progress Bar')
    for i in range(n):
        # do some computation
        my_bar.update()
    print('\n\nPrint tracking object ...\n')
    print(my_bar)

Screen output:

My Progress Bar
0%                          100%
[##############################] | ETA[sec]: 0.000 
Total time elapsed: 6.399 sec
Title: My Progress Bar
                      Started: 04/18/2014 19:12:07
                      Finished: 04/18/2014 19:12:14
                      Total time elapsed: 6.399 sec

</pre>

<br>
<br>
<br>
##### Printing a tracking object with CPU and memory usage
If we additionally want to `print()` the CPU and memory usage after a run has completed, 
we have to set the `monitor` argument to `True` when we initialize a new tracking object. (Note: the `monitor` mode requires the `psutil` package.)


<pre>
n = 1000000
    my_bar = pyprind.ProgBar(n, title='My Progress Bar', monitor=True)
    for i in range(n):
        # do some computation
        my_bar.update()
    print('\n\nPrint tracking object ...\n')
    print(my_bar)

Screen output:

My Progress Bar
0%                          100%
[##############################] | ETA[sec]: 0.000 
Total time elapsed: 6.391 sec
Title: My Progress Bar
                      Started: 04/18/2014 19:16:55
                      Finished: 04/18/2014 19:17:02
                      Total time elapsed: 6.391 sec
                      CPU %: 91.200000
                      Memory %: 0.098133
</pre>


##### Small note on usage in a custom Django management command.
Django gives you a stdout object on the BaseCommand class. You will need to pass this to
`pyprind` as done above. Also note that by default, Django appends a newline to every write.
This uglyfies `pyprind` output, so ensure the write function gets passed `ending=""`.
`pyprind` will NOT do this for you.


<p><a name="examples"></a></p>

<br>
<br>
<br>

Examples
=============

The following examples shall illustrate the typical usage of the PyPrind package.  
A visualization can be viewed on YouTube: [http://youtu.be/iWjSGe89Pvs](http://youtu.be/iWjSGe89Pvs)

<br>
<br>
<br>
Example - Progress Bar (simple)
--------------------------

<pre>import pyprind

n = 10000000
my_prbar = pyprind.ProgBar(n)
for i in range(n):
    # do some computation
    my_prbar.update()
</pre>

**Screen Output**  

<pre>sebastian > python3 ./examples/ex1_progress_bar.py 
0%                                    100%
[########################################] - ETA[sec]: 0.000  
Total time elapsed: 4.481 sec
</pre>

<br>
<br>
<br>
Example - Percentage Indicator (simple)
--------------------------

<pre>import pyprind

n = 1000000
my_perc = pyprind.ProgPercent(n)
for i in range(n):
    # do some computation
    my_perc.update()
</pre>

**Screen Output**  

<pre>sebastian > python3 ./examples/ex1_percentage_indicator.py 
[ 34 %]   elapsed [sec]: 1.377  | ETA [sec]: 2.570
</pre>
<br>
<br>
<br>

Example - Progress Bar (all arguments)
--------------------------

<pre>import pyprind
n = 1000000
    my_bar = pyprind.ProgBar(n, stream=1, width=30, track_time=True, title='My Progress Bar', monitor=True)
    for i in range(n):
        # do some computation
        my_bar.update()
    print(my_bar)
</pre>
 
**Screen Output**  
<pre>My Progress Bar
0%                          100%
[##############################] | ETA[sec]: 0.000 
Title: Progress Bar
                      Started: 04/18/2014 19:23:10
                      Finished: 04/18/2014 19:23:22
                      Total time elapsed: 11.272 sec
                      CPU %: 54.400000
                      Memory %: 0.098085
</pre>

<br>
<br>
<br>
Example - Percent Indicator (all arguments)
--------------------------

<pre>import pyprind
n = 1000000
    my_per = pyprind.ProgPercent(n, stream=1, track_time=True, title='My Percent Indicator', monitor=True)
    for i in range(n):
        # do some computation
        my_per.update()
    print(my_per)
</pre>
 
**Screen Output**  
<pre>My Percent Indicator
[100 %] elapsed [sec]: 4.205 | ETA[sec]: 0.000 
Title: My Percent Indicator
                      Started: 04/18/2014 19:23:26
                      Finished: 04/18/2014 19:23:38
                      Total time elapsed: 11.775 sec
                      CPU %: 44.000000
                      Memory %: 0.097990
</pre>


<p><a name="contact"></a></p>
<br>
<br>
<br>
 Contact
=============

If you have any questions or comments about PyPrind, please feel free to contact me via  
eMail: [se.raschka@gmail.com](mailto:se.raschka@gmail.com)  
or Twitter: [@rasbt](https://twitter.com/rasbt)


The `pyprind` module can be found on GitHub at [https://github.com/rasbt/pyprind](https://github.com/rasbt/pyprind)

<br>
<br>

<p><a name="changelog"></a></p>
<br>
<br>
<br>

Changelog
==========

**VERSION 2.6.0**

- Added IPython Notebook support
- Fixed to work with most recent psutil v. 0.6 for monitoring CPU and memory usage


**VERSION 2.5.0**

- new default argument `monitor=False` was added to `ProgBar()` and `ProgPercent()` objects to monitor memory and CPU usage (via `psutil`) if `monitor` is set to True.
  

**VERSION 2.4.0**

- default argument for `.update(iterations=1)` methods to increment the count by more than 1 per
  iteration.


**VERSION 2.3.1**

- minor fix of the output formatting



**VERSION 2.3.0**

- added native print() support
  prints title and elapsed time of an tracked object after loop completed
- data member self.end stores elapsed time when loop completed
- data member self.title saves title of the tracking objects


**VERSION 2.2.0**

- added ETA (estimated time until arrival) tracking to progress bar  
  by Taylan Aydinli
- better support for Python 2.x


**VERSION 2.1.1**

- changed visuals of the printed progress for percentage indicators  


**VERSION 2.1.0**

- added ETA (estimated time until arrival) tracking by Taylan Aydinli  


**VERSION 2.0.3**

- Accepts a given outputstream for the `stream` parameter.  


**VERSION 2.0.2**  

- Fixed bug that occurred for some Python 3.3.3 users
specifically on Linux Red Hat 4.4.7-1, GCC v. 4.4.7
that self.max_iter was cast to a float when `ProgBar()`
object was seeded with n=48


**VERSION 2.0.1**  

- fixed packaging of example files


**VERSION 2.0.0**  

- ProgBar and ProgPerc inherit data members from parent class Prog
- Added ProgBar and ProgPerc default argument `stream=2` to write to stderr by
  default. Set `stream=1` to write to stdout.

    my_prbar = pyprind.ProgBar(n, stream=1) # writes to stdout
    my_prbar = pyprind.ProgBar(n, stream=2) # writes to stderr, default


- Does not redirect data to the standard output or error stream if program is not
  outputting to a terminal

 

**VERSION 1.1.1**  

- fixed problem with packaging of example scripts

**VERSION 1.1.0**  

- Added live time tracking to percentage indicator
- progress bar and percentage indicator complete automatically,
  .finish() was removed


**VERSION 1.0.4**  

- Added boundary that .update() can't print over the
  right progress bar limit.
- Prints warning when ProgBar seed exits the number of iterations
  in the loop.


**VERSION 1.0.3**  

- Reformatting of README files
- minor updates in setup.py file


**VERSION 1.0.2**  

- corrected errors in the README files
- added docstring to the __init__.py


**VERSION 1.0.1**  


- added more README formats
- added class descriptions
- added example scripts to the distribution


