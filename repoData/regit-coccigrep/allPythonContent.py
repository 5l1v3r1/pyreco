__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# coccigrep documentation build configuration file, created by
# sphinx-quickstart on Wed Aug 31 09:32:26 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('../src/'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest', 'sphinx.ext.todo', 'sphinx.ext.coverage', 'sphinx.ext.pngmath', 'sphinx.ext.ifconfig', 'sphinx.ext.viewcode']
#extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest', 'sphinx.ext.intersphinx', 'sphinx.ext.todo', 'sphinx.ext.coverage', 'sphinx.ext.pngmath', 'sphinx.ext.ifconfig', 'sphinx.ext.viewcode']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'coccigrep'
copyright = u'2011, Eric Leblond'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.9'
# The full version, including alpha/beta/rc tags.
release = '1.8'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'coccigrepdoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'coccigrep.tex', u'coccigrep Documentation',
   u'Eric Leblond', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'coccigrep', u'coccigrep Documentation',
     [u'Eric Leblond'], 1)
]


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'http://docs.python.org/': None}

#Â Modify autodoc behaviour:
autoclass_content = 'both'

todo_include_todos = True


########NEW FILE########
__FILENAME__ = coccigrep
# Copyright (C) 2011,2012 Eric Leblond <eric@regit.org>
#
# You can copy, redistribute or modify this Program under the terms of
# the GNU General Public License version 3 as published by the Free
# Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# version 3 along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

from ConfigParser import SafeConfigParser
from os import unlink, path, listdir, getcwd
from string import Template
from subprocess import Popen, PIPE, STDOUT
from sys import stderr
from tempfile import NamedTemporaryFile
import errno
import re

COCCIGREP_VERSION = "1.13"

have_multiprocessing = True
try:
    from multiprocessing import Process, Pipe
except ImportError:
    have_multiprocessing = False


have_pygments = True
try:
    from pygments import highlight
    from pygments.lexers import CLexer
    from pygments.filters import NameHighlightFilter
    from pygments.formatters import Terminal256Formatter, HtmlFormatter
except ImportError:
    have_pygments = False


class CocciException(Exception):
    """
    Generic class for coccigrep exception
    """
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return self.value


class CocciConfigException(CocciException):
    """
    Exception raised when configuration parameter are not correct.

    For example, it is returned if spatch command can not be found.
    """
    pass


class CocciRunException(CocciException):
    """
    Exception raised when running parameters are not correct.

    For example, it is returned if a required argument is missing.
    """
    pass


# produces conf file paths in reverse specificity order, ie
# - package conf
# - system wide
# - user
# - current dir
_CONF_FILES = tuple((path.join(dirname, name_format % 'coccigrep')
    for dirname, name_format in
    ((path.dirname(__file__), '%s.cfg'),
    ('/etc', '%s'),
    (path.expanduser('~'), '.%s'),
    (getcwd(), '.%s'))))


class CocciGrepConfig(SafeConfigParser):
    """
    Configuration handling class

    This class parses configuration and can be used to access to
    configuration item via get operations. CocciGrepConfig is derived
    from SafeConfigParser
    """
    def __init__(self):
        SafeConfigParser.__init__(self)
        self._load_config()

    def _load_config(self):
        """
        loads configuration from files given in _conf_FILES,
        overwriting the less specific by the most specific (given last)
        """
        for index, filename in enumerate(_CONF_FILES):
            if path.isfile(filename):
                self.read(filename)
            elif index == 0:
                raise CocciException('No package config file: %s' % (filename))


class CocciMatch:
    """
    Store a match and take care of its display
    """

    ptype_regexp = re.compile("^[ )]*\.")

    def __init__(self, mfile, mline, mcol, mlineend, mcolend):
        self.file = mfile
        self.line = int(mline)
        self.column = int(mcol)
        self.lineend = int(mlineend)
        self.columnend = int(mcolend)
        self.start_at = self.line
        self.stop_at = self.line
        self.trailer = ""

    def display(self, stype, mode='raw', oformat='term'):
        """
        Display output for a single match

        :param stype: name of the matched type
        :type stype: str
        :param mode: display mode
        :type mode: str
        :param oformat: format of output for color (term, html)
        :type oformat: str
        :return: a human readable string containing the result of the search
                 (matched line, context, file name, etc.)
        """
        f = open(self.file, 'r')
        lines = f.readlines()
        pmatch = lines[self.line - 1][self.column:self.columnend]
        ptype = "*" # match is a pointer to struct
        if (CocciMatch.ptype_regexp.search(lines[self.line - 1][self.columnend:])):
            ptype = ""
        output = ""
        if mode == 'color':
            output += "%s: l.%s -%d, l.%s +%d, %s %s%s\n" % (self.file,
                 self.line, self.line - self.start_at, self.line,
                 self.stop_at - self.line, stype, ptype, pmatch)
        for i in range(self.start_at - 1, min(self.stop_at, len(lines))):
            if mode == 'color':
                output += lines[i]
            elif mode == 'vim':
                output += "%s|%s| (%s %s%s): %s" % (self.file, i + 1,
                stype, ptype, pmatch, lines[i])
            elif mode == 'emacs':
                output += "%s:%s: (%s %s%s): %s" % (self.file, i + 1,
                stype, ptype, pmatch, lines[i])
            elif i == self.line - 1:
                output += "%s:%s (%s %s%s): %s" % (self.file, i + 1,
                stype, ptype, pmatch, lines[i])
            else:
                output += "%s-%s %s - %s" % (self.file, i + 1,
                ' ' * (2 + len(stype + ptype + pmatch)), lines[i])
        f.close()
        if mode == 'color':
            if have_pygments:
                lexer = CLexer()
                lfilter = NameHighlightFilter(names=[pmatch])
                lexer.add_filter(lfilter)
                if oformat == "term":
                    return highlight(output, lexer, Terminal256Formatter())
                elif oformat == "html":
                    return highlight(output, lexer,
                        HtmlFormatter(noclasses=True))
                else:
                    return output
        return output + self.trailer


class CocciProcess:
    """
    Class used for running spatch command in the case of multiprocessing
    """
    def __init__(self, cmd, verbose):
        self.process = Process(target=self.execute, args=(self, ))
        self.output, self.input = Pipe()
        self.cmd = cmd
        self.verbose = verbose

    def execute(self, option=''):
        output = ""
        try:
            if self.verbose:
                stderr.write("Running: %s.\n" % " ".join(self.cmd))
                output = Popen(self.cmd, stdout=PIPE).communicate()[0]
            else:
                output = Popen(self.cmd, stdout=PIPE,
                    stderr=PIPE).communicate()[0]
        except Exception, err:
            import pickle
            output = pickle.dumps(err)

        self.input.send(output)
        self.input.close()

    def start(self):
        self.process.start()

    def join(self):
        self.process.join()

    def recv(self):
        return self.output.recv()


def _operation_name(fname):
    return path.split(fname)[-1].replace('.cocci', '')


def _raise_run_err(err, cmd):
    if err.errno in (errno.ENOENT, errno.ENOEXEC):
        raise CocciConfigException("Unable to run spatch command "
            "'%s': %s." % (cmd[0], err.strerror))
    raise CocciRunException("Unable to run '%s': %s." % (" ".join(cmd),
        err.strerror))

class CocciPatch:
    """
    Class used to store information about a patch.

    This class is iterable and can be used as a dictionnary.
    """

    keywords = ["Name", "Author", "Desc", "Confidence", "File", "Revision", "Arguments"]
    comment = re.compile("^ *// *(%s): (.*)" % ("|".join(keywords)))

    def __init__(self, filename):
        # open file
        self.__dict__["File"] = filename
        self.__dict__["Name"] = _operation_name(filename)
        # read file
        f = open(filename, 'r')
        lines = f.readlines()
        # match
        for line in lines:
            mm = CocciPatch.comment.match(line)
            if mm:
                self.__dict__[mm.group(1)] = mm.group(2)

    def __iter__(self):
        """ return iterator over keys """
        return self.__dict__.__iter__()

    def __getitem__(self, key):
        # name ok?
        if not key in CocciPatch.keywords:
            raise KeyError("Trying to get invalid name '%s'." % key)
        return self.__dict__[key]

    def __setitem__(self, key, value):
        # name ok?
        if not key in CocciPatch.keywords:
            raise KeyError("Trying to set invalid name '%s'." % key)
        # set
        self.__dict__[key] = value

    def __str__(self):
        out = self["Name"] + ": "
        try:
            out += self["Desc"] + "\n"
        except KeyError:
            return out + ": No info available\n"
        for key in self:
            if key not in ["Name", "Desc", "File"]:
                out +=" * %s: %s\n" % (key, self[key])
        return out

class CocciGrep:
    """
    Core class of the module: setup and run.

    This class is the core of the module. It is responsible
    of initialisation and running of the request.
    """
    spatch = "spatch"
    cocci_python = """

@ script:python @
p1 << init.p1;
@@

for p in p1:
    print "%s:%s:%s:%s:%s" % (p.file,p.line,p.column,p.line_end,p.column_end)
"""

    def __init__(self):
        self.verbose = False
        self.spatch = CocciGrep.spatch
        self.ncpus = 1
        self.operations = {}
        self.process = []
        self.matches = []
        self.options = ["--recursive-includes"]
        dirList = listdir(self.get_datadir())
        for fname in dirList:
            op = _operation_name(fname)
            self.operations[op] = path.join(self.get_datadir(), fname)

    def setup(self, stype, attribute, operation):
        """
        :param stype: structure name, used to replace '$type' in the cocci file
        :type stype: str
        :param attribute: basically attribute of the structure, used to replace
            '$attribute' in the cocci file
        :type attribute: str
        :param operation: search operation to do
        :type operation: str
        :raise: :class:`CocciRunException`
        """
        if stype == None:
            raise CocciRunException("Can't use coccigrep without type to "
                "search")
        self.type = stype
        self.attribute = attribute
        self.operation = operation

    def set_concurrency(self, ncpus):
        """
        Set concurrency level (number of spatch command to run in parallel)

        :param ncpus: number of process to launch in parallel
        :type ncpus: int
        """
        if have_multiprocessing:
            self.ncpus = ncpus
            return True
        return False

    def add_options(self, olist):
        """
        Add option to spatch command

        :param olist: List of options
        :type olist: list of str
        """
        self.options += olist

    def set_cpp(self):
        """
        Activate coccinelle C++ support
        """
        self.add_options(["-c++"])

    def set_spatch_cmd(self, cmd):
        """
        Set path or command name for spatch

        :param cmd: Name of parth of the spatch command
        :type cmd: str
        """
        self.spatch = cmd

    def get_datadir(self):
        this_dir, this_filename = path.split(__file__)
        datadir = path.join(this_dir, "data")
        return datadir

    def get_operations(self):
        """
        Get list of available operations

        :return: list of operations in a list of str
        """
        return self.operations.keys()

    def get_operation_name(self, fname):
        return _operation_name(fname)

    def get_operation_info(self, op):
        return CocciPatch(self.operations[op])

    def add_operations(self, new_ops):
        """
        Add operation to the list of supported operations

        :param new_ops: list of filenames (ending by .cocci)
        :type new_ops: list of str
        """
        if len(new_ops) == 0:
            return
        file_filter = re.compile('^[^\.].*\.cocci$')
        for fname in new_ops:
            # file need to end with cocci
            if file_filter.match(fname):
                op = _operation_name(fname)
                self.operations[op] = fname

    def set_verbose(self):
        """
        Activate verbose mode
        """
        self.verbose = True

    def get_spatch_version(self):
        cmd = [self.spatch] + [ '-version']
        try:
            output = Popen(cmd, stdout=PIPE, stderr=STDOUT).communicate()[0]
        except OSError, err:
            _raise_run_err(err, cmd)
        reg = r"version (.*?) with"
        m = re.search(reg, output)
        return m.group(1)

    def spatch_newer_than(self, version):
        from distutils.version import LooseVersion
        sversion = self.get_spatch_version()
        return LooseVersion(sversion) > LooseVersion(version)

    def run(self, files):
        """
        Run the search against the files and directories given in argument

        This function is doing the main job. It will run spatch with
        the correct parameters by using subprocess or it will use
        multiprocessing if a concurrency level greater than 1 has been
        asked.

        :param args: list of filenames and directory names
        :type args: list of str
        :raise: :class:`CocciRunException` or :class:`CocciConfigException`
        """

        if len(files) == 0:
            raise CocciRunException("Can't use coccigrep without files "
                "to search")

        # get version of spatch
        if self.spatch_newer_than("1.0.0-rc6"):
            cocci_op = "=~"
        else:
            cocci_op = "~="
        # create tmp cocci file:
        tmp_cocci_file = NamedTemporaryFile(suffix=".cocci", delete=not self.verbose)
        tmp_cocci_file_name = tmp_cocci_file.name
        # open file with name matching operation
        cocci_file = open(self.operations[self.operation], 'r')
        # get the string and build template
        cocci_tmpl = cocci_file.read()
        cocci_smpl_tmpl = Template(cocci_tmpl)
        cocci_file.close()
        # do substitution
        cocci_smpl = cocci_smpl_tmpl.substitute(type=self.type,
            attribute=self.attribute, cocci_regexp_equal=cocci_op)
        cocci_grep = cocci_smpl + CocciGrep.cocci_python

        tmp_cocci_file.write(cocci_grep)
        tmp_cocci_file.flush()

        # launch spatch
        output = ""
        # Launch parallel spatch
        if self.ncpus > 1 and len(files) > 1:
            fseq = []
            splitsize = 1.0 / self.ncpus * len(files)
            for i in range(self.ncpus):
                start = int(round(i * splitsize))
                end = int(round((i + 1) * splitsize))
                rfiles = files[start:end]
                if len(rfiles) >= 1:
                    fseq.append(rfiles)
            for sub_files in fseq:
                cmd = [self.spatch]
                cmd += self.options
                cmd += ["-sp_file", tmp_cocci_file.name]
                cmd += sub_files
                sprocess = CocciProcess(cmd, self.verbose)
                sprocess.start()
                self.process.append(sprocess)
            for process in self.process:
                ret = process.recv()
                process.join()
                if not ret.startswith('cexceptions\n'):
                    # CocciProcess return a serialized exception
                    # in case of exception
                    output += ret
                    continue
                import pickle
                err = pickle.loads(ret)
                _raise_run_err(err, cmd)
            tmp_cocci_file.close()
        # Fallback to one spatch
        else:
            cmd = [self.spatch]
            cmd += self.options
            cmd += ["-sp_file", tmp_cocci_file.name]
            cmd += files
            try:
                if self.verbose:
                    stderr.write("Running: %s.\n" % " ".join(cmd))
                    output = Popen(cmd, stdout=PIPE).communicate()[0]
                else:
                    output = Popen(cmd, stdout=PIPE, stderr=PIPE).communicate()[0]
            except OSError, err:
                unlink(tmp_cocci_file_name)
                _raise_run_err(err, cmd)

            tmp_cocci_file.close()

        prevfile = None
        prevline = None
        self.matches = []
        for ematch in output.split("\n"):
            try:
                (efile, eline, ecol, elinend, ecolend) = ematch.split(":")
                nmatch = CocciMatch(efile, eline, ecol, elinend, ecolend)
                # if there is equality then we will already display the line
                if (efile == prevfile) and (eline == prevline):
                    continue
                prevfile = efile
                prevline = eline
                self.matches.append(nmatch)
            except ValueError:
                pass

    def display(self, mode='raw', before=0, after=0, oformat='term'):
        """
        Display output for complete request

        :param mode: display mode
        :type mode: str
        :param before: number of lines to display before match
        :type before: int
        :param after: number of lines to display after match
        :type after: int
        :param oformat: format of output for color (term, html)
        :type oformat: str
        :return: the result of the search as a str
        """
        if before != 0 or after != 0:
            prev_match = None
            for index in xrange(len(self.matches)):
                cur_match = self.matches[index]
                cur_match.start_at = cur_match.line - before
                cur_match.stop_at = cur_match.line + after
                if cur_match.start_at < 1:
                    cur_match.start_at = 1

                if prev_match is not None:
                    prev_match.trailer = "--\n"
                    if prev_match.file == cur_match.file:
                        if prev_match.stop_at >= cur_match.line:
                            prev_match.stop_at = cur_match.line - 1
                        if prev_match.stop_at >= cur_match.start_at:
                            cur_match.start_at = prev_match.stop_at + 1

                        if prev_match.stop_at + 1 == cur_match.start_at:
                            # No seprator if groups are contiguous
                            prev_match.trailer = ""

                prev_match = cur_match

        output = ''.join(match.display(self.type, mode=mode, oformat=oformat)
            for match in self.matches)

        return output.rstrip()

########NEW FILE########
