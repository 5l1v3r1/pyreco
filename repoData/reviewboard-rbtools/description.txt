About P4Tool
------------

  P4Tool.txt is an extension to P4win that adds support for invoking
  post-review from the UI.


Installation
------------

  1) Make a copy of P4Tool.txt and modify it for your setup. Specifically,
     you'll need to replace "<Path of post-review goes here>" with the path to
     the post-review script on your system.

     If using a compiled post-review.exe, place the path to this file and
	 remove "python" before the file path.

  2) Import P4Tool.txt into P4win.


Usage
-----

  To post a change for review, right-click on the change and select
  "post-review".

Unnamed repository; edit this file 'description' to name the repository.

This is a Subversion repository; use the 'svnadmin' tool to examine
it.  Do not add, delete, or modify files here unless you know how
to avoid corrupting the repository.

Visit http://subversion.apache.org/ for more information.

About rbtools
=============

rbtools is a set of client tools to use with Review Board.

This consists of the following officially supported tools:

    * post-review
      - Create and update review requests based on changes in a local tree.

    * rbt
      - Execute a number of useful sub-commands to interact with local source
        code repositories and Review Board.

    * Python API Client
      - Python bindings to simplify interaction with the the Review Board
        Web API.


There are also some user-contributed scripts and application plugins in the
contrib directory. See the associated README files for more information.


Testing rbtools
===============

This is of interest mostly to developers of rbtools.


Installation
------------

To run all the tests, you will need to install hgsubversion::

   $ easy_install hgsubversion

This may need apr-config, also known as apr-1-config, to run.  This is
part of the apache distribution.  On ubuntu, you can get it via::

   $ sudo apt-get install libapr1-dev  # also try apache2-dev or httpd-dev

hgsubversion also requires that you set up an :file:`.hgrc` in your home
directory with the following contents::

   [extensions]
   hgsvn = /path/to/hgsubversion

This will be something like
:file:`/usr/local/lib/python2.7/dist-packages/hgsubversion`.
If you already have an ``[extensions]`` section in your :file:`.hgrc`, just add
the hgsvn line to it.

You will also need nose::

   $ easy_install nose


Running
-------

Just run::

   $ nosetests

from the top of the rbtools directory. You can run nosetests in subdirectories
to just run the tests in that directory.  See `'nosetests --help'` for more
options.

