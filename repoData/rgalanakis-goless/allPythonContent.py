__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# goless documentation build configuration file, created by
# sphinx-quickstart on Wed Apr 16 15:12:38 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

# Add goless to the path.
sys.path.append(os.path.abspath('..'))

# We may not have stackless or gevent available,
# so just mock them out- we don't need them for autodoec.
import imp
for name in 'stackless', 'gevent':
    sys.modules[name] = imp.new_module(name)
import goless

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'goless'
copyright = u'2014, Rob Galanakis'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = goless.version
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'golessdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'goless.tex', u'goless Documentation',
   u'Rob Galanakis', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'goless', u'goless Documentation',
     [u'Rob Galanakis'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'goless', u'goless Documentation',
   u'Rob Galanakis', 'goless', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

########NEW FILE########
__FILENAME__ = backends
import os

class Backend(object):
    def start(self, func, *args, **kwargs):
        """Starts a tasklet/greenlet."""
        raise NotImplementedError()

    def run(self, func, *args, **kwargs):
        """Runs a tasklet up until it blocks or finishes."""
        raise NotImplementedError()

    def channel(self):
        """Returns a new channel."""
        raise NotImplementedError()

    def yield_(self):
        """Yields control for other tasklets/greenlets to run."""
        raise NotImplementedError()

    def resume(self, tasklet):
        """Runs the given tasklet/greenlet immediately."""
        raise NotImplementedError()

    def propogate_exc(self, errtype, *args):
        """Propogates an exception (created via ``errtype(*args)``)
        so the program hears it and it doesn't die lonely in a tasklet."""
        raise NotImplementedError()


def _make_stackless():
    import stackless

    class StacklessBackend(Backend):
        def start(self, func, *args, **kwargs):
            return stackless.tasklet(func)(*args, **kwargs)

        def run(self, func, *args, **kwargs):
            t = self.start(func, *args, **kwargs)
            t.run()
            return t

        def channel(self):
            return stackless.channel()

        def yield_(self):
            return stackless.schedule()

        def resume(self, tasklet):
            tasklet.run()

        def propogate_exc(self, errtype, *args):
            stackless.getmain().throw(errtype, *args)

    return StacklessBackend()


def _make_gevent():
    import gevent
    import gevent.queue

    class Channel(gevent.queue.Channel):
        def send(self, value):
            self.put(value)

        def receive(self):
            return self.get()

    class GeventBackend(Backend):
        def start(self, func, *args, **kwargs):
            greenlet = gevent.spawn(func, *args, **kwargs)
            return greenlet

        def run(self, func, *args, **kwargs):
            greenlet = gevent.spawn(func, *args, **kwargs)
            gevent.sleep()
            return greenlet

        def channel(self):
            return Channel()

        def yield_(self):
            gevent.sleep()

        def resume(self, tasklet):
            gevent.sleep()

        def propogate_exc(self, errtype, *args):
            raise errtype

    return GeventBackend()

_backends = {
    "stackless":    _make_stackless,
    "gevent":       _make_gevent
}

current = None

GOLESS_BACKEND = os.getenv("GOLESS_BACKEND", None)
if GOLESS_BACKEND is not None:
    if GOLESS_BACKEND not in _backends:
        raise RuntimeError("Invalid backend specified. Valid backends are: %s" % _backends.keys())
    current = _backends[GOLESS_BACKEND]()
else:
    try:
        current = _make_stackless()
    except ImportError:
        current = _make_gevent()

########NEW FILE########
__FILENAME__ = channels
import collections as _collections
import sys

from .backends import current as _be


class ChannelClosed(Exception):
    """
    Exception raised to indicate a channel is closing or has closed.
    """


class GoChannel(object):
    """
    A **Go**-like channel that can be sent to, received from,
    and closed.
    Callers should never create this directly.
    Always use :func:`goless.chan` to create channels.
    """
    def __init__(self):
        self._closed = False

    def send(self, value=None):
        """
        Sends the value. Blocking behavior depends on the channel type.
        Unbufferred channels block if no receiver is waiting.
        Buffered channels block if the buffer is full.
        Asynchronous channels never block on send.

        If the channel is already closed,
        :class:`goless.ChannelClosed` will be raised.
        If the channel closes during a blocking ``send``,
        :class:`goless.ChannelClosed` will be raised. (#TODO)
        """
        if self._closed:
            raise ChannelClosed()
        self._send(value)

    def _send(self, value):
        raise NotImplementedError()

    def recv(self):
        """
        Receive a value from the channel.
        Receiving will always block if no value is available.
        If the channel is already closed, :class:`goless.ChannelClosed` will be raised.
        If the channel closes during a blocking ``recv``,
        :class:`goless.ChannelClosed` will be raised. (#TODO)
        """
        if self._closed and not self.recv_ready():
            raise ChannelClosed()
        got = self._recv()
        return got

    def _recv(self):
        raise NotImplementedError()

    def recv_ready(self):
        """
        Return True if there is a sender waiting,
        or there are items in the buffer.
        """
        raise NotImplementedError()

    def send_ready(self):
        """
        Return True if a receiver is waiting,
        or the buffer has room.
        """
        raise NotImplementedError()

    def close(self):
        """
        Closes the channel, not allowing further communication.
        Any blocking senders or receivers will be woken up and raise :class:`goless.ChannelClosed`.
        Receiving or sending to a closed channel will raise :class:`goless.ChannelClosed`.
        """
        self._closed = True

    def __iter__(self):
        return self

    def next(self):
        try:
            return self.recv()
        except ChannelClosed:
            raise StopIteration


class BufferedChannel(GoChannel):
    """
    BufferedChannel has several situations it must handle.

    When sending:

    1. If there is a receiver waiting send the value through the channel.
       A waiting receiver indicates the buffer was empty.
       It's uncertain in this case if there will be a context switch 
       (blocking the current task) or not.
    2. Else if there is no more room in the buffer,
       also send the value through the channel,
       blocking until a receiver for the value is available.
    3. Otherwise just append the value to the deque returning immediately.

    When receiving:

    1. If the buffer has items, pop and return the first value.
       Before returning, if there is a sender waiting,
       receive its value and append it to the buffer.
    2. Else just receive on the channel,
       blocking until a sender is available.
       Return the value from the sender.
    """

    def __init__(self, size):
        assert isinstance(size, int) and size >= 0
        GoChannel.__init__(self)
        self.maxsize = size
        self.values_deque = _collections.deque() if size else ()
        self.waiting_chan = _be.channel()

    def _send(self, value):
        buffer_size = len(self.values_deque)
        chan_balance = self.waiting_chan.balance
        assert buffer_size <= self.maxsize
        assert ((chan_balance < 0 and buffer_size == 0)
                or (chan_balance > 0 and buffer_size == self.maxsize)
                or chan_balance == 0)
        if chan_balance < 0 or buffer_size == self.maxsize:
            self.waiting_chan.send(value)
            if self._closed:
                raise ChannelClosed("Channel closed while sending")
        else:
            assert buffer_size < self.maxsize
            self.values_deque.append(value)

    def _recv(self):
        if self.values_deque:
            value = self.values_deque.popleft()
            if self.waiting_chan.balance > 0:
                self.values_deque.append(self.waiting_chan.receive())
        else:
            value = self.waiting_chan.receive()
            if self._closed:
                raise ChannelClosed("Channel closed while receiving")
        return value

    def recv_ready(self):
        return self.values_deque or self.waiting_chan.balance > 0

    def send_ready(self):
        return len(self.values_deque) < self.maxsize or self.waiting_chan.balance < 0

    def close(self):
        # This next yield gives a chance to all blocked receivers to return
        # before the channel is actually closed.
        # We think this is more "fair",
        # as these are blocking-but-ready tasklets that should have
        # the opportunity to finish.
        # Otherwise, for example, a sender could successfully send
        # but still get a ChannelClosed error.
        _be.yield_()
        # To make sure all pending tasklets are woken up,
        # we mark the channel closed and then spam out sends or receives if needed.
        # The tasklets will wake up, see the channel is closed,
        # and raise a ChannelClosed error.
        GoChannel.close(self)
        balance = self.waiting_chan.balance
        for _ in xrange(balance, 0):
            self.waiting_chan.send(None)
        for _ in xrange(balance):
            self.waiting_chan.receive()


class SyncChannel(BufferedChannel):
    """
    Channel that behaves synchronously.
    A recv blocks until a sender is available,
    and a sender blocks until a receiver is available.
    Implemented as a special case of BufferedChannel
    where the buffer size is 0.
    """

    def __init__(self):
        BufferedChannel.__init__(self, 0)


class AsyncChannel(BufferedChannel):
    """
    A channel where send never blocks,
    and recv blocks if there are no items in the buffer.
    Implemented as a special case of BufferedChannel
    where the buffer size is sys.maxint.
    """

    def __init__(self):
        BufferedChannel.__init__(self, sys.maxint)


def chan(size=0):
    """
    Returns a bidirectional channel.

    A 0 or None size indicates a blocking channel
    (the ``send`` method will block until a receiver is available,
    and the ``recv`` method will block until a sender is available).

    A positive integer value will return a channel with a buffer.
    Once the buffer is filled, the ``send`` method will block.
    When the buffer is empty, the ``recv`` method will block.

    A negative integer will return a channel that will
    never block when the ``send`` method is called.
    The ``recv`` method will block if the buffer is empty.

    :rtype: goless.channels.GoChannel
    """
    if not size:
        return SyncChannel()
    if size < 0:
        return AsyncChannel()
    return BufferedChannel(size)

########NEW FILE########
__FILENAME__ = select
from .backends import current as _be


# noinspection PyPep8Naming,PyShadowingNames
class rcase(object):
    """
    A case that will ``chan.recv()`` when the channel is able to receive.
    """
    def __init__(self, chan):
        self.chan = chan

    def ready(self):
        return self.chan.recv_ready()

    def exec_(self):
        return self.chan.recv()


# noinspection PyPep8Naming,PyShadowingNames
class scase(object):
    """A case that will ``chan.send(value)`` when the channel is able to send."""
    def __init__(self, chan, value):
        self.chan = chan
        self.value = value

    def ready(self):
        return self.chan.send_ready()

    def exec_(self):
        self.chan.send(self.value)


# noinspection PyPep8Naming
class dcase(object):
    """The default case."""
    def ready(self):
        return False


def select(cases):
    """
    Select the first case that becomes ready.
    If a default case (:class:`goless.dcase`) is present,
    return that if no other cases are ready.
    If there is no default case and no case is ready,
    block until one becomes ready.

    See Go's ``reflect.Select`` method for an analog
    (http://golang.org/pkg/reflect/#Select).

    :param cases: List of case instances, such as
      :class:`goless.rcase`, :class:`goless.scase`, or :class:`goless.dcase`.
    :return: ``(chosen case, received value)``.
      If the chosen case is not an :class:`goless.rcase`, it will be None.
    """
    default = None
    for c in cases:
        if c.ready():
            return c, c.exec_()
        if isinstance(c, dcase):
            assert default is None, 'Only one default case is allowd.'
            default = c
    if default is not None:
        # noinspection PyCallingNonCallable
        return default, None

    while True:
        for c in cases:
            if c.ready():
                return c, c.exec_()
        _be.yield_()

########NEW FILE########
__FILENAME__ = test_channels
from . import BaseTests

import goless
import goless.channels as gochans
from goless.backends import current as be


class ChanTests(BaseTests):
    def test_return_types(self):
        self.assertIsInstance(gochans.chan(0), gochans.SyncChannel)
        self.assertIsInstance(gochans.chan(None), gochans.SyncChannel)
        self.assertIsInstance(gochans.chan(-1), gochans.AsyncChannel)
        self.assertIsInstance(gochans.chan(1), gochans.BufferedChannel)


class ChanTestMixin(object):
    def makechan(self):
        raise NotImplementedError()

    def test_send_on_closed_chan_will_raise(self):
        chan = self.makechan()
        chan.close()
        self.assertRaises(gochans.ChannelClosed, chan.send)

    def test_recv_on_closed_chan_raises_after_chan_empties(self):
        chan = self.makechan()

        be.run(chan.send, 'hi')
        self.assertEqual(chan.recv(), 'hi')
        chan.close()
        self.assertRaises(gochans.ChannelClosed, chan.recv)

    def test_range_with_closed_channel(self):
        chan = self.makechan()
        sendCount = min(chan.maxsize, 5)
        data2send = range(sendCount)
        for data in data2send:
            be.run(chan.send, data)
        chan.close()
        items = [o for o in chan]
        self.assertEqual(items, data2send)

    def test_range_with_open_channel_blocks(self):
        # TODO: Add tests.
        pass

    def _test_channel_raises_when_closed(self, chan_method_name):
        chan = self.makechan()
        method = getattr(chan, chan_method_name)
        marker = []

        def catch_raise():
            try:
                method()
            except gochans.ChannelClosed:
                marker.append(1)
            marker.append(2)

        be.run(catch_raise)
        chan.close()
        be.yield_()
        self.assertEqual(marker, [1, 2])

    def test_channel_recv_raises_when_closed(self):
        self._test_channel_raises_when_closed('recv')


class SyncChannelTests(BaseTests, ChanTestMixin):
    def makechan(self):
        return gochans.SyncChannel()

    def test_behavior(self):
        chan = gochans.SyncChannel()
        results = []

        goless.go(lambda: chan.send(1))

        def check_results_empty():
            self.assertFalse(results)
            chan.send(2)
        goless.go(check_results_empty)

        results = [chan.recv(), chan.recv()]
        self.assertEqual(results, [1, 2])

    def test_channel_send_raises_when_closed(self):
        self._test_channel_raises_when_closed('send')


class AsyncChannelTests(BaseTests, ChanTestMixin):
    def makechan(self):
        return gochans.AsyncChannel()

    def test_behavior(self):
        # Obviously we cannot test an infinite buffer,
        # but we can just test a huge one's behavior.
        chan = gochans.AsyncChannel()
        for _ in xrange(10000):
            chan.send()
        chan.close()
        for _ in chan:
            pass


class BufferedChannelTests(BaseTests, ChanTestMixin):
    def makechan(self):
        return gochans.BufferedChannel(2)

    def test_size_must_be_valid(self):
        for size in '', None:
            self.assertRaises(AssertionError, gochans.BufferedChannel, size)

    def test_recv_and_send_with_room_do_not_block(self):
        resultschan = gochans.BufferedChannel(5)
        endchan = gochans.SyncChannel()

        def square(x):
            return x * x

        def func():
            for num in range(5):
                resultschan.send(square(num))
            endchan.send()

        goless.go(func)
        # Waiting on the endchan tells us our results are
        # queued up in resultschan
        endchan.recv()
        got = [resultschan.recv() for _ in range(5)]
        ideal = [square(i) for i in range(5)]
        self.assertEqual(got, ideal)

    def test_recv_and_send_with_full_buffer_block(self):
        chan = gochans.BufferedChannel(2)
        markers = []

        def sendall():
            markers.append(chan.send(4))
            markers.append(chan.send(3))
            markers.append(chan.send(2))
            markers.append(chan.send(1))
        sender = be.run(sendall)
        self.assertEqual(len(markers), 2)
        got = [chan.recv(), chan.recv()]
        be.resume(sender)
        self.assertEqual(len(markers), 4)
        self.assertEqual(got, [4, 3])
        got.extend([chan.recv(), chan.recv()])
        self.assertEqual(got, [4, 3, 2, 1])

    def test_recv_with_no_items_blocks(self):
        chan = gochans.BufferedChannel(1)
        markers = []

        def recvall():
            markers.append(chan.recv())
            markers.append(chan.recv())
        be.run(recvall)
        self.assertEqual(markers, [])
        chan.send(1)
        self.assertEqual(markers, [1])
        chan.send(2)
        self.assertEqual(markers, [1, 2])

########NEW FILE########
__FILENAME__ = test_examples
"""
Idiomatic Go examples converted to use goless.
"""

from __future__ import print_function
import time
from . import BaseTests

import goless


class Examples(BaseTests):

    def test_select(self):
        # https://gobyexample.com/select
        c1 = goless.chan()
        c2 = goless.chan()

        def func1():
            time.sleep(.1)
            c1.send('one')
        goless.go(func1)

        def func2():
            time.sleep(.2)
            c2.send('two')
        goless.go(func2)

        # We don't print since we run this as a test.
        callbacks = []

        for i in range(2):
            _, val = goless.select([goless.rcase(c1), goless.rcase(c2)])
            callbacks.append(val)

        self.assertEqual(callbacks, ['one', 'two'])

    def test_range_over_channels(self):
        # https://gobyexample.com/range-over-channels
        queue = goless.chan(2)
        queue.send('one')
        queue.send('two')
        queue.close()
        elements = [elem for elem in queue]
        self.assertEqual(elements, ['one', 'two'])

    def test_worker_pool(self):
        # https://gobyexample.com/worker-pools
        jobs_done = []

        # noinspection PyShadowingNames,PyShadowingBuiltins
        def worker(id, jobs, results):
            for j in jobs:
                jobs_done.append('w %s j %s' % (id, j))
                time.sleep(.01)
                results.send(j * 2)

        jobs = goless.chan(100)
        results = goless.chan(100)

        for w in range(1, 4):
            goless.go(lambda: worker(w, jobs, results))

        for j in range(1, 10):
            jobs.send(j)
        jobs.close()

        for a in range(1, 10):
            results.recv()
        self.assertEqual(len(jobs_done), 9)

    def test_case_switch(self):
        chan = goless.chan()
        cases = [goless.rcase(chan), goless.scase(chan, 1), goless.dcase()]
        chosen, value = goless.select(cases)
        if chosen is cases[0]:
            print('Received %s' % value)
        elif chosen is cases[1]:
            assert value is None
            print('Sent.')
        else:
            assert chosen is cases[2], chosen
            print('Default...')

########NEW FILE########
__FILENAME__ = test_goless
from . import BaseTests

import goless
from goless.backends import current as be


class GoTests(BaseTests):

    def setUp(self):
        BaseTests.setUp(self)

        oldpanic = goless.on_panic
        self.panic_calls = []
        goless.on_panic = lambda *a: self.panic_calls.append(a)

        def restore_panic():
            goless.on_panic = oldpanic
        self.addCleanup(restore_panic)

        self.addCleanup(be.yield_)

    def test_starts_stuff(self):
        items = []
        goless.go(lambda: items.append(1))
        be.yield_()
        self.assertEqual(items, [1])

    def test_exc(self):
        def raiseit():
            raise RuntimeError('ha!')
        goless.go(raiseit)
        be.yield_()
        self.assertEqual(len(self.panic_calls), 1)

########NEW FILE########
__FILENAME__ = test_select
import goless
from goless.backends import current as be
from . import BaseTests


class RecvCaseTests(BaseTests):
    chansize = 1

    def setUp(self):
        BaseTests.setUp(self)
        self.ch = goless.chan(self.chansize)
        self.ca = goless.rcase(self.ch)

    def test_ready(self):
        self.assertFalse(self.ca.ready())
        be.run(self.ch.send, 1)
        self.assertTrue(self.ca.ready())
        be.run(self.ch.recv)
        self.assertFalse(self.ca.ready())

    def test_executes(self):
        be.run(self.ch.send, 'a')
        x = self.ca.exec_()
        self.assertEqual(x, 'a')

    def test_exec_with_no_body(self):
        be.run(self.ch.send, 'a')
        ca = goless.rcase(self.ch)
        self.assertEqual(ca.exec_(), 'a')


class RecvCaseUnbufferedTests(RecvCaseTests):
    chansize = 0


class SendCaseTests(BaseTests):
    chansize = 1

    def setUp(self):
        BaseTests.setUp(self)
        self.ch = goless.chan(self.chansize)
        self.sendval = 1
        self.ca = goless.scase(self.ch, self.sendval)

    def test_ready(self):
        def assert_default_readiness():
            self.assertEquals(self.ca.ready(), self.chansize > 0)

        assert_default_readiness()
        be.run(self.ch.send)
        self.assertFalse(self.ca.ready())
        be.run(self.ch.recv)
        assert_default_readiness()
        be.run(self.ch.send)
        self.assertFalse(self.ca.ready())

    def test_executes(self):
        def recv():
            a.append(self.ch.recv())
        a = []
        be.run(recv)
        self.ca.exec_()
        self.assertEqual(a, [self.sendval])

    def test_exec_no_onselected(self):
        be.run(self.ch.recv)
        self.ca.exec_()


class SendCaseUnbufferedTests(SendCaseTests):
    chansize = 0


class SelectTests(BaseTests):
    def setUp(self):
        BaseTests.setUp(self)
        self.chan1 = goless.chan()

    def test_select_uses_default(self):
        cases = [goless.rcase(self.chan1), goless.dcase()]
        result, val = goless.select(cases)
        self.assertIs(result, cases[1])
        self.assertIsNone(val)

    def test_select_chooses_ready_selection(self):
        readychan = goless.chan(1)
        notreadychan = goless.chan(1)
        readychan.send(3)
        cases = [goless.rcase(notreadychan), goless.rcase(readychan), goless.dcase()]
        result, val = goless.select(cases)
        self.assertIs(result, cases[1])
        self.assertEqual(val, 3)

    def test_select_no_default_no_ready_blocks(self):
        chan1 = goless.chan()
        chan2 = goless.chan()
        a = []
        cases = [goless.rcase(chan2), goless.rcase(chan1)]

        def sel():
            a.append(goless.select(cases))
        be.run(sel)
        self.assertEqual(a, [])
        chan1.send(5)
        be.yield_()
        self.assertEqual(len(a), 1)
        chosen, val = a[0]
        self.assertEqual(chosen, cases[1])
        self.assertEqual(val, 5)

    def test_main_tasklet_can_select(self):
        chan1 = goless.chan(1)
        cases = [goless.scase(chan1, 3)]
        chosen, val = goless.select(cases)
        self.assertIs(chosen, cases[0])
        self.assertIsNone(val)

    def test_raises_if_multiple_default_cases(self):
        with self.assertRaises(AssertionError):
            goless.select([goless.dcase(), goless.dcase()])

########NEW FILE########
