Armstrong Sphinx Theme
======================
Sphinx theme for Armstrong documentation


Usage
-----
Symlink this repository into your documentation at ``docs/_themes/armstrong``
then add the following two settings to your Sphinx ``conf.py`` file::

    html_theme = "armstrong"
    html_theme_path = ["_themes", ]

You can also change colors and such by adjusting the ``html_theme_options``
dictionary.  For a list of all settings, see ``theme.conf``.


Defaults
--------
This repository has been customized for Armstrong documentation, but you can
use the original default color scheme on your project by copying the
``rtd-theme.conf`` over the existing ``theme.conf``.


Contributing
------------

* Create something awesome -- make the code better, add some functionality,
  whatever (this is the hardest part).
* `Fork it`_
* Create a topic branch to house your changes
* Get all of your commits in the new topic branch
* Submit a `pull request`_

.. _Fork it: http://help.github.com/forking/
.. _pull request: http://help.github.com/pull-requests/


State of Project
----------------
Armstrong is an open-source news platform that is freely available to any
organization.  It is the result of a collaboration between the `Texas Tribune`_
and `Bay Citizen`_, and a grant from the `John S. and James L. Knight
Foundation`_.  The first stable release is scheduled for September, 2011.

To follow development, be sure to join the `Google Group`_.

``armstrong_sphinx`` is part of the `Armstrong`_ project.  Unless you're
looking for a Sphinx theme, you're probably looking for the main project.

.. _Armstrong: http://www.armstrongcms.org/
.. _Bay Citizen: http://www.baycitizen.org/
.. _John S. and James L. Knight Foundation: http://www.knightfoundation.org/
.. _Texas Tribune: http://www.texastribune.org/
.. _Google Group: http://groups.google.com/group/armstrongcms


Credit
------
This theme is based on the the excellent `Read the Docs`_ theme.  The original
can be found in the `readthedocs.org`_ repository on GitHub.

.. _Read the Docs: http://readthedocs.org/
.. _readthedocs.org: https://github.com/rtfd/readthedocs.org


License
-------
Like the original RTD code, this code is licensed under a BSD.  See the
associated ``LICENSE`` file for more information.

.. _root_numpy_examples:

NumPy Interface
---------------

Examples concerning the :mod:`root_numpy` package.

.. _io_examples:

Input/Output
------------

Examples concerning the :mod:`rootpy.io` package.

.. _plotting_examples:

Plotting
--------

Examples concerning the :mod:`rootpy.plotting` package.


.. _stats_examples:

Stats
-----

Examples concerning the :mod:`rootpy.stats` package.

.. _tree_examples:

Trees
-----

Examples concerning the :mod:`rootpy.tree` package.

.. -*- mode: rst -*-

`[see full documentation] <http://rootpy.org>`_

rootpy: Pythonic ROOT
=====================

.. image:: https://travis-ci.org/rootpy/rootpy.png
   :target: https://travis-ci.org/rootpy/rootpy
.. image:: https://pypip.in/v/rootpy/badge.png
   :target: https://pypi.python.org/pypi/rootpy
.. image:: https://pypip.in/d/rootpy/badge.png
   :target: https://crate.io/packages/rootpy/

Python has become the language of choice for high-level applications where
fast prototyping and efficient development are important, while
glueing together low-level libraries for performance-critical tasks.
The `PyROOT <http://root.cern.ch/drupal/content/pyroot>`_ bindings introduced
`ROOT <http://root.cern.ch/>`_ into the world of Python, however, interacting
with ROOT in Python should not feel like you are still writing C++.

The rootpy project is a community-driven initiative aiming to provide a more
pythonic interface with ROOT on top of the existing PyROOT bindings. Given
Python's reflective and dynamic nature, rootpy also aims to improve ROOT design
flaws and supplement existing ROOT functionality. The scientific Python
community also offers a multitude of powerful packages such as
`SciPy <http://www.scipy.org/>`_,
`NumPy <http://numpy.scipy.org/>`_,
`matplotlib <http://matplotlib.sourceforge.net/>`_,
`scikit-learn <http://scikit-learn.org>`_,
and `PyTables <http://www.pytables.org/>`_,
but a suitable interface between them and ROOT has been lacking. rootpy
provides the interfaces and conversion mechanisms required to liberate your
data and to take advantage of these alternatives if needed.

Key features include:

* Improvements to help you create and manipulate trees, histograms, cuts
  and vectors.

* Dictionaries for STL types are compiled for you automatically.

* Redirect ROOT's messages through Python's logging system.

* Optionally turn ROOT errors into Python exceptions.

* ``Get`` and ``Set`` methods on ROOT objects are also properties.

* Easy navigation through ROOT files. You can now access objects with
  ``my_file.some_directory.tree_name``, for example.

* Colours and other style attributes can be referred to by descriptive strings.

* Provides a way of mapping ROOT trees onto python objects and collections.

* Plot your ROOT histograms or graphs with `matplotlib`_.

* Conversion of ROOT trees into `NumPy`_ `ndarrays
  <http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html>`_
  and `recarrays
  <http://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html>`_
  through the related `root_numpy <http://rootpy.github.io/root_numpy/>`_
  package. Now take advantage of the many statistical and numerical packages
  that Python offers (`NumPy`_, `SciPy`_,
  `StatsModels <http://statsmodels.sourceforge.net/>`_,
  and `scikit-learn`_).

* Conversion of ROOT files containing trees into
  `HDF5 <http://www.hdfgroup.org/HDF5/>`_ format with
  `PyTables`_.

* ``roosh``, a Bash-like shell environment for the ROOT file, very useful for
  quick ROOT file inspection and interactive plotting.

* ``rootpy``, a command for common tasks such as summing histograms or drawing
  tree expressions over multiple files, listing the contents of a file,
  or inspecting tree branches and their sizes and types.


texttable [1] and prettytable [2]

[1] http://foutaise.org/code/
[2] http://code.google.com/p/prettytable/

https://twiki.cern.ch/twiki/bin/viewauth/AtlasProtected/PubComTemplates#ROOT_Style_for_official_ATLAS_pl
https://twiki.cern.ch/twiki/pub/AtlasProtected/PubComTemplates/atlasstyle-00-03-05.tar.gz

http://cmssw.cvs.cern.ch/cgi-bin/cmssw.cgi/UserCode/RootMacros/style-CMSTDR.C?revision=1.3&view=markup

What's new in `rootpy`
----------------------

A lot of discussion happens in github's issues and pull requests. We
track which pull requests are included in a version of rootpy (see 
[here](https://github.com/rootpy/rootpy/issues/139) for an example) so if you
"watch" a pull request which fixes an issue you care about you can be
automatically notified when it is fixed in a public release.

You might also like to search our
[issues](https://github.com/rootpy/rootpy/issues).

# 0.8 (unreleased)

## IMPORTANT CHANGES

    * The histogram API has changed significantly!
      Bins are 0-indexed at the underflow bin like ROOT
      and now offer full slicing support. This change is not backward
      compatible so please be careful when updating to the latest rootpy and be
      sure that you migrate the use of histograms in your code.
      See the [pull request](https://github.com/rootpy/rootpy/pull/432) for more details.

# 0.7

Tracked in [#139](https://github.com/rootpy/rootpy/issues/139)

## bugfixes

    * Fix #49. Don't require python>=2.6 for install, otherwise we get python3
    * Check for sys.version < (2, 6) in setup.py
    * Eliminate ipython printing (Bool_t)1 when ROOT starts up
    * Emit an error wherever the diaper pattern is used
    * Sanitize ROOT's message output to ascii, using repr() if it isn't
    * Register HistStack with class registry correctly

## general improvements

    * Documentation
    * Defer configuring defaults until finalSetup (#74)
    * Switch to pyparsing for C++ template parsing
    * Use XDG base directory specificiation
    * Add defaults.extra_initializations for further ROOT setup
    * Add userdata.BINARY_PATH, unique per (arch, rootversion)
    * Use .cache/rootpy/{arch}-{rootversion}/{modules,dicts} to store generated
      binaries
    * defaults: Disable AutoDict generation
    * Introduce rootpy/util/quickroot which can get to vital root symbols
      without finalSetup (10x speed improvement in import time)
    * Implement TPyDispatcherProcessedEvent using rootpy.compiled
    * Falling back to batch mode should be a WARNING not ERROR
    * Numpy code is now moved to the rootpy/root_numpy repository
    * Use hash of unique name rather than generating a UUID for dictionary
      shared object name
    * Automatic testing of each commit / pull request on travis-ci
    * PEP8 Python code style compliance
    * Add TitleView class to plotting.views functionality       
    * Unit tests
    * Rewrite registry code so magical imports are no longer required to make
      rootpy aware of what ROOT classes are subclassed in rootpy
    * Alias ROOT CamelCase methods with snake_case methods
    * Improvements to the setup.py script
    * New examples for using Trees, Hists, etc
    * Make name and title properties for Objects

## new externs

    * Add extern/pyparsing.py
    * Add extern/byteplay
    * Add module_facade
    * Add inject_closure_values to close over global variables

## docs

    * Add logger documentation
    * Sphinx: Introduce ipython highlighting
    * Document a bit more about python's vanilla logging
    * Update STL docs
    * Add note in CONTRIBUTING.rst about debug python builds

## scripts

    * Use argparse (argparse is now in rootpy.extern)
    * Unify scripts into one rootpy script
    * Remove scripts that are still WIP
    * Use the new rootpy logger
    * Your roosh command history is saved and can be searched
    * Multi-canvas and multi-file support in roosh
    * Improvements to the root2hdf5 script, that now uses root_numpy for faster
      conversion to HDF5

## rootpy.interactive (NEW!)

    * Add interactive.rootwait, provides wait_for_zero_canvases which blocks
      program execution until all canvases are closed
    * Add canvas_events for closing canvases on middle click

## rootpy.context (NEW!)

    * Add preserve_{current_canvas,batch_state} and invisible_canvas context
      managers
    * Add preserve_current_directory context manager

## rootpy.plotting

    * Add xaxis/yaxis properties to plotting.Efficiency
    * Implement new fill_array function in root_numpy to fill histograms with 
      NumPy arrays. Histograms in rootpy now have a fill_array method
    * TStyle is now subclasses in rootpy as Style. Styles can be used at context
      managers using the "with" statement
    * Add the official ATLAS style and example
    * Hist2Ds can be "ravel()"ed, like NumPy's ravel() method that converts a 2D
      array into a 1D array by repeating the second axis along the first
    * Add SetColor to all Plottables to set all colors simultaneously
    * Improvements to the root2matplotlib module
    * Make style attributes properties
    * Add xaxis, yaxis, zaxis properties for Hist classes
    * Plottable now gracefully handles deprecation of properties

## rootpy.logger (NEW!)

    * New logging module for internal and (optionally) external use
    * Automatically coloured status level if we're attached to a terminal
    * Default rootpy logging level to INFO unless os.environ['DEBUG'] is present
    * Redirecting ROOT's errors as python exceptions    
    * Add a `log` symbol to each subpackage    
    * Add @log.trace() decorator which can be used to log function 
      entry/exit/duration
    * Add log.show_stack() to log current stack whenever a message is emitted by
      `log`
    * If there is no logging handler when the first message is emitted,
      automatically add one
    * Automatically log python stack trace if there is a segfault    

## rootpy.compiled (NEW!)

    * Adds an interface for compiling C++ code on demand with CompileMacro
    * Add support for inline C++ code definitions
    * rootpy.compiled.register_file("mycode.cxx", ["mysymbol"]) then 
      rootpy.compiled.mysymbol will be generated when requested.
      mycode.cxx is located relative to the module where register_file is called
    * rootpy.compiled.register_code(".. C++ source code ..", ["mysymbol"])
      .. same as above but without needing a cxx file on disk

## rootpy.memory (NEW!)

    * Add log.showdeletion() to show TObject cleanup
    * keepalive: function to ensure objects are kept alive exactly as long as
      needed

## rootpy.util.hook (NEW!)

    * Add ability to hook ROOT methods and append properties/methods to existing
      classes

## rootpy.util.cpp (NEW!)

    * New module for parsing C++ syntax.

## rootpy.stl (NEW!)

    * Compiling arbitrary templated types.

## rootpy.tree

    * Make root_numpy an optional dependency and remove copy from rootpy
    * Reading branches on demand: Only call GetEntry on branches that are
      accessed
    * Add support for branches of array types
    * Improvements to the documentation
    * The categories module is rewritten and now properly parses the category
      syntax (unit tests are included)
    * Improvements to Tree.Draw
    * Dictionaries for branches of STL types are now compiled automatically
    * Reverse order of axes expressions in Tree.Draw to match hist argument
      order so X:Y:Z maps onto filling along X:Y:Z instead of Z:Y:X

