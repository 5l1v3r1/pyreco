This filter is released under the same licence as Python
see http://www.intertwingly.net/code/venus/LICENCE.

Author: Eric van der Vlist <vdv@dyomedea.com>
  
This filter guesses whether an Atom entry is written
in English or French. It should be trivial to chose between
two other languages, easy to extend to more than two languages
and useful to pass these languages as Venus configuration
parameters.

The code used to guess the language is the one that has been
described by Douglas Bagnall as the Python recipe titled
"Language detection using character trigrams"
http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/326576.

To add support for a new language, this language must first be
"learned" using learn-language.py. This learning phase is nothing
more than saving a pickled version of the Trigram object for this
language. 

To learn Finnish, you would execute:

$ ./learn-language.py http://gutenberg.net/dirs/1/0/4/9/10492/10492-8.txt fi.data

where http://gutenberg.net/dirs/1/0/4/9/10492/10492-8.txt is a text
representative of the Finnish language and "fi.data" is the name of the
data file for "fi" (ISO code for Finnish).

To install this filter, copy this directory under the Venus
filter directory and declare it in your filters list, for instance:

filters= categories.xslt guess-language/guess-language.py

NOTE: this filter depends on Amara 
(http://uche.ogbuji.net/tech/4suite/amara/)


Planet
------

Planet is a flexible feed aggregator. It downloads news feeds published by
web sites and aggregates their content together into a single combined feed,
latest news first.  This version of Planet is named Venus as it is the
second major version.  The first version is still in wide use and is
also actively being maintained.

It uses Mark Pilgrim's Universal Feed Parser to read from CDF, RDF, RSS and
Atom feeds; Leonard Richardson's Beautiful Soup to correct markup issues;
and either Tomas Styblo's templating engine or Daniel Viellard's implementation
of XSLT to output static files in any format you can dream up.

To get started, check out the documentation in the docs directory.  If you have
any questions or comments, please don't hesitate to use the planet mailing list:

  http://lists.planetplanet.org/mailman/listinfo/devel

Keywords: feed, blog, aggregator, RSS, RDF, Atom, OPML, Python

<!--
Description:  id generated from description
Expect:       Items[0]['content'] == 'description'
-->

<rss xml:base="http://example.com/">
  <channel>
    <item>
      <description>description</description>
    </item>
  </channel>
</rss>


<!--
Description:  id generated from description
Expect:       id == 'http://example.com//67daf92c833c41c95db874e18fcb2786'
-->

<rss xml:base="http://example.com/">
  <channel>
    <item>
      <description>description</description>
    </item>
  </channel>
</rss>


