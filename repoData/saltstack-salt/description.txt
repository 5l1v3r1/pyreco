These packages are *optional* dependencies for salt. By default, they are not included in the salt RPMs.
Install any of these packages to enable the functionality within salt.

MySQL-python 
libvirt-python 
python-mako
pymongo
python-redis / redis

A semi-canonical list of the optional salt modules can be found at 
https://github.com/saltstack/salt/blob/develop/doc/conf.py#L30

# Esky builds for SmartOS

This is intentionally currently not marked executable.
There are some hard coded bits, it depends on a binary copy of patchelf, etc.
However it does document pretty thoroughly how I initially created a build environment
for packaging up esky builds for SmartOS

```bash
#!/bin/bash

export PATH=$PATH:/opt/local/gcc47/bin/
HERE=$(pwd)

mv /opt/local /opt/local.backup ; hash -r
cd /
curl http://pkgsrc.joyent.com/packages/SmartOS/bootstrap/bootstrap-2013Q4-x86_64.tar.gz | gtar xz
hash -r

pkgin -y up
pkgin -y in build-essential salt swig py27-pip unzip 
pkgin -y rm salt

cd /opt/local/bin
curl -kO 'https://us-east.manta.joyent.com/nahamu/public/smartos/bins/patchelf'
chmod +x patchelf

pip install esky bbfreeze

cd $HERE
curl -kO 'https://pypi.python.org/packages/source/b/bbfreeze-loader/bbfreeze-loader-1.1.0.zip'
unzip bbfreeze-loader-1.1.0.zip

COMPILE="gcc -fno-strict-aliasing -O2 -pipe -O2 -DHAVE_DB_185_H -I/usr/include -I/opt/local/include -I/opt/local/include/db4 -I/opt/local/include/gettext -I/opt/local/include/ncurses -DNDEBUG -O2 -pipe -O2 -DHAVE_DB_185_H -I/usr/include -I/opt/local/include -I/opt/local/include/db4 -I/opt/local/include/gettext -I/opt/local/include/ncurses -fPIC -I/opt/local/include/python2.7 -static-libgcc"
$COMPILE -c bbfreeze-loader-1.1.0/_bbfreeze_loader/console.c -o $HERE/console.o
$COMPILE -c bbfreeze-loader-1.1.0/_bbfreeze_loader/getpath.c -o $HERE/getpath.o
gcc $HERE/console.o $HERE/getpath.o /opt/local/lib/python2.7/config/libpython2.7.a -L/opt/local/lib -L/opt/local/lib/python2.7/config -L/opt/local/lib -lsocket -lnsl -ldl -lrt -lm -static-libgcc -o $HERE/console.exe
patchelf --set-rpath '$ORIGIN:$ORIGIN/../lib' $HERE/console.exe

find /opt/local -name console.exe -exec mv $HERE/console.exe {} \;

git clone git://github.com/saltstack/salt -b 2014.1
cd $HERE/salt
pip install -r requirements.txt
# packages not in main requirements file that are nice to have
pip install -r pkg/smartos/esky/requirements.txt
bash pkg/smartos/esky/build-tarball.sh

# Upload packages into Manta
pkgin -y in sdc-manta
mmkdir -p /$MANTA_USER/public/salt
for file in dist/salt*; do mput -m /$MANTA_USER/public/salt -f $file; done;
```

These packages are *optional* dependencies for salt. By default, they are not included in the salt RPMs.
Install any of these packages to enable the functionality within salt.

python-psutils
python-mysql 
python-mako
python-pymongo
python-redis / redis

A semi-canonical list of the optional salt modules can be found at 
https://github.com/saltstack/salt/blob/develop/doc/conf.py#L30

=============
What is Salt?
=============

.. image:: https://secure.travis-ci.org/saltstack/salt.png?branch=develop
   :target: http://travis-ci.org/saltstack/salt

.. rubric:: We’re not just talking about NaCl.

Distributed Remote Execution
============================

Salt is a distributed remote execution system used to execute commands and
query data. It was developed in order to bring the best solutions found in the
world of remote execution together and make them better, faster and more
malleable. Salt accomplishes this via its ability to handle larger loads of
information, and not just dozens, but hundreds, or even thousands of individual
servers. It handles them quickly and through a simple yet manageable interface.

Simplicity
==========

Versatility between massive scale deployments and smaller systems may seem
daunting, but Salt is very simple to set up and maintain, regardless of the
size of the project. The architecture of Salt is designed to work with any
number of servers, from a handful of local network systems to international
deployments across disparate datacenters. The topology is a simple
server/client model with the needed functionality built into a single set of
daemons. While the default configuration will work with little to no
modification, Salt can be fine-tuned to meet specific needs.

Granular Controls
=================

Salt also introduces powerful granular controls to the realm of remote execution. 
By default, commands are executed in parallel. However, using more advanced 
options, commands can be executed in batch groups or even in serial. By using 
simple built-in filters or regular expression matching, systems can be targeted by 
hostname, metadata or system properties such as number of cpus or OS type.

Building on Proven Technology
=============================

Salt takes advantage of a number of technologies and techniques. The networking
layer is built with the excellent `ZeroMQ`_ networking library. Salt itself
contains a viable, and transparent, ZeroMQ broker inside the daemon. Salt uses
public keys for authentication with the master daemon, then uses faster AES
encryption for payload communication. This means that authentication and
encryption are also built into Salt. Salt takes advantage of communication via
the most excellent `msgpack`_ library, enabling fast and light network traffic.

.. _`ZeroMQ`: http://zeromq.org/

.. _`msgpack`: http://msgpack.org/


Python Client Interface
=======================

Salt execution routines can be written as plain Python modules and the data
collected from execution can be sent back to the master server, or any
arbitrary program. Salt can be called from a simple Python API, or from the
command line. This makes it easy to execute one-off commands as well as
operate as an integral part of a larger application.


Fast, Flexible, Scalable, Secure
================================

The result is a system that can execute commands across groups of
varying size, from very few to very many servers at considerably high
speed. We consider speed to be a feature, not an afterthought. Salt’s
unique architecture brings together the best of the remote execution
world, amplifies its capabilities and expands its range, resulting in
this system that is as versatile as it is practical. Last but not least,
security is an intrinsic part of Salt and something not just
influencing how source code is written and how tests are done, but
also something that defines the overall architecture and has heavy
influence on the core design tenets.

Open
====

Salt is developed under the `Apache 2.0 license`_, and can be used for
open and proprietary projects. Please submit your expansions back to
the Salt project so that we can all benefit together as Salt grows.
Finally, please sprinkle some Salt around your systems and let the
deliciousness come forth.

.. _`Apache 2.0 license`: http://www.apache.org/licenses/LICENSE-2.0.html

==================
What is SaltStack?
==================

Salt is a new approach to infrastructure management. Easy enough to get
running in minutes, scalable enough to manage tens of thousands of servers,
and fast enough to communicate with them in *seconds*.

Salt delivers a dynamic communication bus for infrastructures that can be used
for orchestration, remote execution, configuration management and much more.

Documentation
=============

Installation instructions, getting started guides, and in-depth API
documention.

http://docs.saltstack.com

IRC Chat
========

Join the vibrant, helpful and positive SaltStack chat room in Freenode at
#salt. There is no need to introduce yourself, or ask permission to join in,
just help and be helped! Make sure to wait for an answer, sometimes it may take
a few moments for someone to reply.

http://webchat.freenode.net/?channels=salt&uio=Mj10cnVlJjk9dHJ1ZSYxMD10cnVl83

Salt Air
========

The SaltStack YouTube channel is filled with Salt videos and presentations.
Watch the latest Salt Air episodes for updates from Thomas on development,
catch tutorials, and stay on the cutting edge of Salt.

http://www.youtube.com/user/saltstack

Mailing List
============

The SaltStack community users mailing list is hosted by Google groups. Anyone
can post to ask questions about SaltStack products and anyone can help answer.
Join the conversation!

https://groups.google.com/forum/#!forum/salt-users

You may subscribe the the list without a Google account by emailing
salt-users+subscribe@googlegroups.com and you may post to the list by emailing
salt-users@googlegroups.com

Developing Salt
===============

The Salt development team is welcoming, positive, and dedicated to helping
people get new code and fixes into SaltStack projects. Log into GitHub and get
started with one of the largest developer communities in the world.

https://github.com/saltstack

