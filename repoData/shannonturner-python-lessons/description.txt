## Installing the Python Package Managers

Packages are groups of functions that someone else has built in Python to share with the world
Packages can help you perform a set of functions
For example, the **requests** package lets you visit a webpage and retrieve the contents (source) as a string.

Before you can use someone else's package, you must install it onto your computer.
Before you can install it on your computer, you'll need to install a package manager.

The preferred package manager is called pip, but we need to take a few steps to get there.

## Complete these two steps before going on to your system-specific instructions below.
* First, go here: https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
* Copy / save that file to your computer

**Windows-specific instructions**
* Make sure you complete the first two steps above first.
* Create the folder 'scripts' inside C:\python27
* Save the ez_setup.py inside C:\python27\scripts
* If in Windows, now you'll need to add "C:\Python27\scripts" to your PATH environment variable.
* To do that, go to My Computer > Properties > Advanced System Settings > Environment Variables > Path
* You'll also need to add "C:\Python27" to your PATH environment variable.
* Don't delete everything else.  Add onto it, separating the entries with a semicolon.
* Open your terminal (Start Menu > Run > cmd) or (Start Menu > Search > cmd)
* Use cd to change the directory you're working in: cd c:/python27/scripts
* Type **python ez_setup.py** and hit enter.
* Type **easy_install pip** and hit enter.
* Type **pip install requests** and hit enter.  If it was successful, you're done! Help a neighbor.

**Mac-specific instructions**
* Make sure you complete the first two steps above first.
* Run that program in Python.
* Type **easy_install pip** and hit enter.  If you get permission errors, try **sudo easy_install pip**
* Type **pip install requests** and hit enter.  If you get permission errors, try **sudo pip install requests**
* If it was successful, you're done! Help a neighbor.
####First time installing/running Python? Be sure to check out the Start Here guide: https://github.com/shannonturner/python-lessons/blob/master/start-here.md

In here are code snippets, examples, and other ways to help teach some of the concepts and tricks in Python.

##Suggested Learning Progression

If you're new to Python you may wonder what you should learn and when you should learn it.  I recommend this order seen below.  **Each section below has its own folder above; each bullet point has its own file within that folder.**

So if you wanted to learn more about variable assignment, go to the folder **section_01_(basics)** and open up **variable_assignment.py**

#### Section 1: General Programming Basics
- Simple Math
- Variable Assignment
- Basic Syntax and Logic
- Data Types: int, float, bool, str

#### Section 2: Strings
- Identifying and using strings
- String slicing
- String formatting
- String methods
- - str.replace()
- - str.find()
- - str.count()
- - str.lower()

#### Section 3: Conditionals
- Logical control; changing the behavior of your programs
- and keyword, or keyword
- if / else structure
- if / elif ... / else structure
- Nesting conditionals

#### Section 4: Lists
- Containers for data types
- First In, Last Out (Stack)
- Accessing specific list items through index (slice notation)
- List methods
- - list.append()
- - list.insert()
- - list.pop()
- - list.extend()
- Finding items in list (in keyword)
- Deduplicating a list using list(set(list_to_deduplicate))

#### Section 5: Loops
- for loop (for each item in a list: ...)
- enumerate()
- zip()
- range()
- while loop (ask each time: is this still true?)

#### Section 6: Strings to Lists and Vice-Versa
- str.join() (create a string from a list)
- str.split() (create a list from a string)

#### Section 7: File handling
- with open(filename) as textfile: ...
- file.read()
- Reading text files 
- Reading CSV files
- File handling flags (r, w, b, +)
- Writing to files

#### Section 8: Python's Most Commonly Used Built-in Functions
- - Types (used primarily for converting one type to another)
- int()
- float()
- str()
- bool()
- list()
- set()
- dict()
- - Comparison and Calculation
- abs()
- len()
- max()
- min()
- round()
- sum()
- - Loop (Sequence) Control
- enumerate()
- range() / xrange()
- reversed()
- sorted()
- zip()

#### Section 9: Functions
- def keyword
- arguments
- default arguments
- *args
- **kwargs
- return keyword
- sequence unpacking (return and receive multiple values)
- namespaces

#### Section 10: Dictionaries
- Accessing specific dictionary items through key (looks like a slice)
- Accessing all keys as a list using .keys()
- Faking a sorted dictionary by using sorted() on the .keys()
- Accessing all values as a list using .values()
- Accessing all key, value pairs as a list using .items()
- Adding new items through .fromkeys()
- Checking for whether a key exists with .has_key
- Using .get() to safely get a key's value if it exists without getting an error if not
- Adding new items with direct assignment and .update()

#### Section 11: Dictionaries and Lists, together
- Accessing specific items in a nested list
- Accessing specific items in a nested dictionary
- Accessing specific items in a nested list within a dictionary
- Accessing specific items in a nested dictionary within a list
- If you can do those four above, you can handle receiving JSON API returns

#### Section 12: Standard Library
- import keyword
- from ... import ... as ... structure
- time
- random
- math
- re (regular expressions)
- os
- sys
- json

#### Section 13: External Libraries (Not necessarily in order; keep these in mind)
- Installing external libraries with easy_install
- Using easy_install to install pip (an easier / better way to install external libraries)
- requests (web crawling made easy)
- BeautifulSoup (parsing HTML)
- xlrd (Read Excel .xls files)
- xlwt (Write to Excel .xls files)
- xlsxwriter (Write to Excel .xls and .xlsx files, with additional functionality beyond xlwt)
- cherrypy (Simple, lightweight framework for serving web pages)
- psycopg2 (Connect to and issue SQL commands to your postgresql database)

#### Section 14: Exception Handling
- try / except syntax
- Using multiple excepts
- Recognizing the different error types
- Exception, the generic exception type (use sparingly)
- Nesting exception handling
- try / except / else syntax

#### Section 15: Intermediate Concepts
- List Comprehensions
- Inline Conditionals
- Generators

#### Section 16: Classes
- Classes
- Magic Methods

###Installation Guide and Running your First Python Script

####Running Python in Windows or Linux
- Download and install Python from here: http://www.python.org/download/releases/2.7.6/
- I prefer to use IDLE (bundled with Python) over the command prompt when possible -- simply put, it's easier to use.  If you need to run Python scripts from the command line, the Mac instructions below will work with minimal adjustment.
- When you run IDLE, you'll automatically be in the interactive interpreter mode where you can run Python commands one at a time.
- To create a new file from IDLE, go to File > New Window.  A new, blank screen will open up where you can create your Python projects.
- When you have a Python file open in IDLE, you can run it at any time by pressing **F5**.

####Running Python on a Mac

Python comes bundled with Macs already, so there's no extra setup for now.  You'll want to check which version you have, but it's not super important for writing your first scripts.

There's a known problem making it more difficult for Macs to run IDLE (see http://www.python.org/download/mac/tcltk/ for full details) -- but they can run Python just fine!

####Mac: Running Python commands one at a time (using the interactive interpreter)
- Open a terminal window (from the Finder, search for Terminal)
- Type **python** and hit enter
- Your command prompt should change from a dollar sign (**$**) to three greater than signs (**>>>**)
- The command prompt is a signal of where you are -- terminal is **$**; python is **>>>**
- Once you have the **>>>** prompt, you can enter as many Python commands as you like.
- Type **exit()** to quit and return to the command prompt.

####Mac: Running Python Files from the Terminal
- Open a terminal window (from the Finder, search for Terminal)
- When you open the terminal window, the words before your username are the folder you're in.
- You're probably on your desktop to start. I recommend creating a folder on your desktop to put your Python scripts in.
- For this example, let's say I named the folder pyscripts.
- Go back to the terminal and type in **cd pyscripts** -- this will change the folder the terminal is working in.
- When you create a Python script for Python to run, you should create it in TextEdit, TextWrangler, or some other text editor that can save files in **plain text** format -- any other kind of format will confuse Python!
- Let's also assume that I created a Python script called **lesson1_pbj.py**, and that file lives in **pyscripts** on the desktop.
- To run lesson1_pbj.py, I would type into the terminal: **python lesson1_pbj.py**

####Mac: Troubleshooting Running Python Files from the Terminal
- Make sure you're in the correct folder! You can check which folder the terminal is looking in by typing **pwd**
- Similarly, make sure the file you want to run is in the folder you're in! Type **ls** to see all of the files in the folder terminal is currently working in.
- Remember that when you see the dollar sign prompt (**$**), you're working in terminal, and can run scripts at the command line.  But when you see the **>>>** prompt, you're in Python's interactive interpreter mode, and you'll need to type **exit()** to get back.

