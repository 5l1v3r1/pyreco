__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Stoat documentation build configuration file, created by
# sphinx-quickstart on Wed Apr 20 16:29:31 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Stoat'
copyright = u'2011, Steve Losh and Dumbwaiter Design'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.4.0'
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Stoatdoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'Stoat.tex', u'Stoat Documentation',
   u'Steve Losh and Dumbwaiter Design', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'stoat', u'Stoat Documentation',
     [u'Steve Losh and Dumbwaiter Design'], 1)
]

########NEW FILE########
__FILENAME__ = admin
# Imports {{{
from django.conf import settings
from django.contrib import admin
from django.contrib.admin import helpers
from django.contrib.admin.util import unquote
from django.contrib.admin.views.main import ChangeList
from django.core.exceptions import PermissionDenied
from django.db import transaction
from django.forms.formsets import all_valid
from django.http import Http404
from django.shortcuts import get_object_or_404
from django.utils.decorators import method_decorator
from django.utils.encoding import force_unicode
from django.utils.html import escape
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext as _
from django.views.decorators.csrf import csrf_protect

import forms as stoat_forms
import stemplates
from models import Page, PageContent, clean_field_title
from views import move_page

csrf_protect_m = method_decorator(csrf_protect)
# }}}

# Settings {{{
PAGE_FIELDS = ['title', 'slug', 'template',]
if not getattr(settings, 'STOAT_HIDE_NAVIGATION', False):
    PAGE_FIELDS.append('show_in_nav')

PAGE_COLS = ['indented_title', 'url']
if getattr(settings, 'STOAT_DEBUG', False):
    PAGE_COLS.append('template')
# }}}

def check_empty_dict(GET_dict):
    empty = True
    for k, v in GET_dict.items():
        # Don't disable on p(age) or 'all' GET param
        if v and k != 'p' and k != 'all':
            empty = False
    return empty


class TreeChangeList(ChangeList):
    def get_ordering(self):
        if not check_empty_dict(self.params):
            return super(TreeChangeList, self).get_ordering()
        return None, 'asc'



class PageAdmin(admin.ModelAdmin):
    save_on_top = True
    list_display = PAGE_COLS
    fieldsets = (
        (None, {
            'fields': PAGE_FIELDS,
        }),
    )
    prepopulated_fields = { 'slug': ('title',), }
    form = stoat_forms.PageForm

    def _find_inlines(self, page):
        fields = stemplates.get_fields(page.template)
        inline_fields = [f for f in fields if f[1] == 'inline']

        for inline_field in inline_fields:
            import_line = inline_field[2]['import']

            module_name, inline_name = import_line.rsplit('.', 1)
            admin_module = __import__(module_name, fromlist=[inline_name])

            yield getattr(admin_module, inline_name)

    def _create_inlines(self, page):
        instances = []
        for inline_class in self._find_inlines(page):
            inline_instance = inline_class(self.model, self.admin_site)
            instances.append(inline_instance)
        return instances


    def get_formsets(self, request, obj=None):
        if obj:
            for inline in self._create_inlines(obj):
                yield inline.get_formset(request, obj)

    def get_changelist(self, request):
        return TreeChangeList


    def add_view(self, request, form_url='', extra_context=None):
        extra_context = extra_context or {}

        if request.POST:
            parent = request.POST.get('parent', '')
        else:
            parent = request.GET.get('parent', '')

        if parent:
            get_object_or_404(Page, id=parent)

        extra_context.update({
            'parent': request.GET.get('parent', ''),
        })

        return super(PageAdmin, self).add_view(request, form_url=form_url,
                                               extra_context=extra_context)


    def save_model(self, request, obj, form, change):
        obj.save()

        if not form.ignore_content:
            # Use the authoritative list of fields, because browsers won't send along
            # boolean fields that are unchecked (False) at all.

            # This is ugly, but we have to do it.
            #
            # fields: list of (clean_field_title, field_type) pairs
            # fieldnames: list of clean_field_title
            # fieldtypes: dict of clean_field_title -> field_type pairs

            fields = [(clean_field_title(f[0]), f[1])
                      for f in stemplates.get_fields_bare(obj.template)]
            fieldnames = [f[0] for f in fields]
            fieldtypes = dict(fields)

            # content is going to be a dict of
            # clean_field_title -> cleaned data pairs

            # Default to 0, because browsers won't even send along a field for
            # a checkbox element that's unchecked.
            content = dict([(f, 0) for f in fieldnames])

            # Now update content with the appropriate data from the form.
            for k, v in form.data.items():
                if k.startswith('content_'):
                    fieldname = k.split('_', 1)[1]
                    fieldtype = fieldtypes[fieldname]

                    if fieldtype == 'bool':
                        v = 1

                    content[fieldname] = v

            for k, v in content.items():
                pc = PageContent.objects.get(page=obj, cleaned_title=k)
                pc.content = v
                pc.save()


    @csrf_protect_m
    @transaction.commit_on_success
    def _django_change_view(self, request, object_id, extra_context=None):
        "The 'change' admin view for this model."
        model = self.model
        opts = model._meta

        obj = self.get_object(request, unquote(object_id))
        previous_template = obj.template                                                            # STOAT: Save previous template

        if not self.has_change_permission(request, obj):
            raise PermissionDenied

        if obj is None:
            raise Http404(_('%(name)s object with primary key %(key)r does not exist.') % {'name': force_unicode(opts.verbose_name), 'key': escape(object_id)})

        if request.method == 'POST' and "_saveasnew" in request.POST:
            return self.add_view(request, form_url='../add/')

        ModelForm = self.get_form(request, obj)
        formsets = []
        if request.method == 'POST':
            form = ModelForm(request.POST, request.FILES, instance=obj)
            if form.is_valid():
                form_validated = True
                new_object = self.save_form(request, form, change=True)
            else:
                form_validated = False
                new_object = obj
            prefixes = {}
            if previous_template == new_object.template:                                            # STOAT: Template check
                for FormSet, inline in zip(self.get_formsets(request, new_object),
                                           self._create_inlines(obj)):                              # STOAT: _create_inlines
                    prefix = FormSet.get_default_prefix()
                    prefixes[prefix] = prefixes.get(prefix, 0) + 1
                    if prefixes[prefix] != 1:
                        prefix = "%s-%s" % (prefix, prefixes[prefix])
                    formset = FormSet(request.POST, request.FILES,
                                      instance=new_object, prefix=prefix,
                                      queryset=inline.queryset(request))

                    formsets.append(formset)

            if all_valid(formsets) and form_validated:
                self.save_model(request, new_object, form, change=True)
                form.save_m2m()
                for formset in formsets:
                    self.save_formset(request, form, formset, change=True)

                change_message = self.construct_change_message(request, form, formsets)
                self.log_change(request, new_object, change_message)
                return self.response_change(request, new_object)

        else:
            form = ModelForm(instance=obj)
            prefixes = {}
            for FormSet, inline in zip(self.get_formsets(request, obj), self._create_inlines(obj)): # STOAT: _create_inlines
                prefix = FormSet.get_default_prefix()
                prefixes[prefix] = prefixes.get(prefix, 0) + 1
                if prefixes[prefix] != 1:
                    prefix = "%s-%s" % (prefix, prefixes[prefix])
                formset = FormSet(instance=obj, prefix=prefix,
                                  queryset=inline.queryset(request))
                formsets.append(formset)

        adminForm = helpers.AdminForm(form, self.get_fieldsets(request, obj),
            self.prepopulated_fields, self.get_readonly_fields(request, obj),
            model_admin=self)
        media = self.media + adminForm.media

        inline_admin_formsets = []
        for inline, formset in zip(self._create_inlines(obj), formsets):                            # STOAT: _create_inlines
            fieldsets = list(inline.get_fieldsets(request, obj))
            readonly = list(inline.get_readonly_fields(request, obj))
            inline_admin_formset = helpers.InlineAdminFormSet(inline, formset,
                fieldsets, readonly, model_admin=self)
            inline_admin_formsets.append(inline_admin_formset)
            media = media + inline_admin_formset.media

        media = media + extra_context.pop('media')                                                 # STOAT
        context = {
            'title': _('Change %s') % force_unicode(opts.verbose_name),
            'adminform': adminForm,
            'object_id': object_id,
            'original': obj,
            'is_popup': "_popup" in request.REQUEST,
            'media': mark_safe(media),
            'inline_admin_formsets': inline_admin_formsets,
            'errors': helpers.AdminErrorList(form, formsets),
            'root_path': self.admin_site.root_path,
            'app_label': opts.app_label,
        }
        context.update(extra_context or {})
        return self.render_change_form(request, context, change=True, obj=obj)

    def change_view(self, request, object_id, extra_context=None):
        extra_context = extra_context or {}
        page = get_object_or_404(Page, id=object_id)

        parent = page.get_parent()
        parent = parent.id if parent else ''

        if request.POST:
            template = request.POST.get('template', page.template)

            content_form = stoat_forms.get_content_form(template, request.POST)
        else:
            initial = {}
            for pc in page.pagecontent_set.all():
                # Ugly hack to store booleans as text.
                if pc.typ == 'bool':
                    val = True if int(pc.content) else False
                else:
                    val = pc.content

                initial['content_' + clean_field_title(pc.title)] = val

            content_form = stoat_forms.get_content_form(page.template, initial=initial)

        extra_context.update({
            'content_form': content_form,
            'media': content_form.media + self.media,
            'parent': parent,
        })

        return self._django_change_view(request, object_id, extra_context=extra_context)


    def indented_title(self, obj):
        indent = ''.join(['&nbsp;'*6 for _ in obj.get_ancestors()])

        has_child = '1' if obj.get_children_count() else '0'

        first_child = '0'
        if obj.get_ancestors():
            try:
                parent = obj.get_parent()
            except Exception, e:
                return repr(e)

            if parent and parent.get_first_child() == obj:
                first_child = '1'

        descendants = ','.join(map(str, [p.id for p in obj.get_descendants()]))

        return (
            indent + obj.title +
            '<span class="indent" style="display: none;">' + indent + '</span>' +
            '<span class="has-child" style="display: none;">' + has_child + '</span>' +
            '<span class="first-child" style="display: none;">' + first_child + '</span>' +
            '<span class="descendants" style="display: none;">' + descendants + '</span>'
        )
    indented_title.allow_tags = True

    def urls(self):
        from django.conf.urls.defaults import patterns, url

        urlpatterns = patterns('',
            url(r'^move-page/$', move_page, name='stoat-move-page'),
        )
        urlpatterns += super(PageAdmin, self).urls

        return urlpatterns

    urls = property(urls)

    class Media:
        css = {
            'all': ('stoat.css',) + getattr(settings, 'STOAT_ADMIN_EXTRA_CSS', ()),
        }
        js = ('stoat.js',) + getattr(settings, 'STOAT_ADMIN_EXTRA_JS', ())
admin.site.register(Page, PageAdmin)


class PageContentAdmin(admin.ModelAdmin):
    list_display = ('title', 'typ', 'page', 'content')
    list_filter = ('page', 'typ')


if getattr(settings, 'STOAT_DEBUG', False):
    admin.site.register(PageContent, PageContentAdmin)


########NEW FILE########
__FILENAME__ = forms
from django import forms
from django.db.models.loading import get_model
from models import Page
from stemplates import get_fields
from models import clean_field_title


class PageContentForm(forms.Form):
    pass

def _get_field(typ, title, options):
    typ = typ.lower()
    required = options.get('required', False)

    if typ == 'char':
        return forms.CharField(max_length=140, label=title, required=required)

    if typ == 'text':
        return forms.CharField(widget=forms.Textarea(), label=title, required=required)

    if typ == 'int':
        return forms.IntegerField(label=title, required=required)

    if typ == 'url':
        return forms.URLField(label=title, required=required, verify_exists=False)

    if typ == 'ckeditor':
        from ckeditor.widgets import CKEditor

        config = options.get('config', 'default')
        return forms.CharField(widget=CKEditor(ckeditor_config=config),
                               label=title, required=required)

    if typ == 'email':
        return forms.EmailField(label=title, required=required)

    if typ == 'bool':
        return forms.BooleanField(label=title, required=required)

    if typ == 'float':
        return forms.FloatField(label=title, required=required)

    if typ == 'decimal':
        return forms.DecimalField(label=title, required=required)

    if typ == 'img':
        from filebrowser.fields import FileBrowseFormField, FileBrowseWidget

        attrs = { 'directory': '', 'extensions': '', 'format': 'Image', }

        return FileBrowseFormField(format='Image', label=title, required=required,
                                   widget=FileBrowseWidget(attrs=attrs))

    if typ == 'fk':
        app_label = options.get('app', 'stoat')
        model_name = options.get('model', 'Page')
        model = get_model(app_label, model_name)

        return forms.ModelChoiceField(model.objects.all(), label=title, required=required)

    if typ == 'inline':
        return None

    assert False, "Unknown field type '%s' for field '%s'" % (typ, title)

def get_content_form(tname, data=None, initial=None):
    fs = get_fields(tname)

    if data:
        data = dict((k, v) for k, v in data.items() if k.startswith('content_'))
        form = PageContentForm(data)
    elif initial:
        form = PageContentForm(initial=initial)
    else:
        form = PageContentForm()

    for title, typ, options in fs:
        f = _get_field(typ, title, options)
        if f:
            form.fields['content_' + clean_field_title(title)] = f

    return form


class PageForm(forms.ModelForm):
    parent = forms.IntegerField(required=False)

    class Meta:
        model = Page


    def _clean_content(self):
        '''Clean the content_* fields in self.data.

        Only done when:

        1. This is not a create.
        2. We're not changing the template.

        '''

        self.ignore_content = ((not self.instance or not self.instance.id)
                               or (self.instance.template != self.cleaned_data['template']))
        if self.ignore_content:
            return

        form = get_content_form(self.instance.template, self.data)
        if not form.is_valid():
            raise forms.ValidationError('Invalid page content!')

    def clean(self):
        cd = self.cleaned_data

        if 'slug' in cd:
            if cd.get('parent', ''):
                peers = Page.objects.get(id=cd['parent']).get_children()
            else:
                peers = Page.get_root_nodes()

            peers = [peer.slug for peer in list(peers) if peer.id != self.instance.id]
            if cd['slug'] in peers:
                raise forms.ValidationError('A sibling page with that slug already exists!')

        self._clean_content()

        return cd


    def save(self, *args, **kwargs):
        cd = self.cleaned_data
        pid = cd.pop('parent', '')
        parent = Page.objects.get(pk=pid) if pid else None

        if self.instance.pk is None:
            if parent:
                self.instance = parent.add_child(**cd)
                self.instance.move(parent, pos='first-child')
            else:
                self.instance = Page.add_root(**cd)
        else:
            previous_parent = self.instance.get_parent()
            self.instance.save()
            if parent != previous_parent:
                if parent:
                    self.instance.move(parent, pos='first-child')
                else:
                    self.instance.move(Page.get_first_root_node(), pos='first-sibling')

        self.instance = Page.objects.get(pk=self.instance.pk)

        super(PageForm, self).save(*args, **kwargs)
        return self.instance



MOVE_POSITIONS = (('above', 'above'), ('below', 'below'), ('inside', 'inside'))

class MovePageForm(forms.Form):
    page = forms.ModelChoiceField(queryset=Page.objects.all())
    target = forms.ModelChoiceField(queryset=Page.objects.all())
    position = forms.ChoiceField(choices=MOVE_POSITIONS)

########NEW FILE########
__FILENAME__ = middleware
from django.conf import settings
from django.http import Http404
from views import page


class StoatMiddleware(object):
    def process_response(self, request, response):
        if response.status_code != 404:
            # Pass anything but a 404 straight through.
            return response

        try:
            # Try the page view.
            return page(request, request.path_info)
        except Http404:
            # If the page view 404s, return the ORIGINAL 404 response.
            return response
        except:
            # If anything else happened, something is wrong with the page view.
            # Return the original (404) response, unless we're in DEBUG.
            if settings.DEBUG:
                raise
            return response

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Page'
        db.create_table('stoat_page', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('path', self.gf('django.db.models.fields.CharField')(unique=True, max_length=255)),
            ('depth', self.gf('django.db.models.fields.PositiveIntegerField')()),
            ('numchild', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('slug', self.gf('django.db.models.fields.SlugField')(db_index=True, max_length=100, blank=True)),
            ('template', self.gf('django.db.models.fields.CharField')(default='Default', max_length=100)),
            ('url', self.gf('django.db.models.fields.CharField')(unique=True, max_length=255, blank=True)),
        ))
        db.send_create_signal('stoat', ['Page'])

        # Adding model 'PageContent'
        db.create_table('stoat_pagecontent', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('page', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['stoat.Page'])),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=40)),
            ('cleaned_title', self.gf('django.db.models.fields.CharField')(max_length=40)),
            ('typ', self.gf('django.db.models.fields.CharField')(max_length=4)),
            ('content', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('stoat', ['PageContent'])

        # Adding unique constraint on 'PageContent', fields ['title', 'page']
        db.create_unique('stoat_pagecontent', ['title', 'page_id'])


    def backwards(self, orm):
        
        # Removing unique constraint on 'PageContent', fields ['title', 'page']
        db.delete_unique('stoat_pagecontent', ['title', 'page_id'])

        # Deleting model 'Page'
        db.delete_table('stoat_page')

        # Deleting model 'PageContent'
        db.delete_table('stoat_pagecontent')


    models = {
        'stoat.page': {
            'Meta': {'object_name': 'Page'},
            'depth': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'numchild': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'max_length': '100', 'blank': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '100'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'blank': 'True'})
        },
        'stoat.pagecontent': {
            'Meta': {'unique_together': "(('title', 'page'),)", 'object_name': 'PageContent'},
            'cleaned_title': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['stoat.Page']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'typ': ('django.db.models.fields.CharField', [], {'max_length': '4'})
        }
    }

    complete_apps = ['stoat']

########NEW FILE########
__FILENAME__ = 0002_auto__chg_field_pagecontent_typ
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'PageContent.typ'
        db.alter_column('stoat_pagecontent', 'typ', self.gf('django.db.models.fields.CharField')(max_length=12))


    def backwards(self, orm):
        
        # Changing field 'PageContent.typ'
        db.alter_column('stoat_pagecontent', 'typ', self.gf('django.db.models.fields.CharField')(max_length=4))


    models = {
        'stoat.page': {
            'Meta': {'object_name': 'Page'},
            'depth': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'numchild': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'max_length': '100', 'blank': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '100'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'blank': 'True'})
        },
        'stoat.pagecontent': {
            'Meta': {'unique_together': "(('title', 'page'),)", 'object_name': 'PageContent'},
            'cleaned_title': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['stoat.Page']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'typ': ('django.db.models.fields.CharField', [], {'max_length': '12'})
        }
    }

    complete_apps = ['stoat']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_pagecontent_extra
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'PageContent.extra'
        db.add_column('stoat_pagecontent', 'extra', self.gf('django.db.models.fields.CharField')(default='', max_length=42, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'PageContent.extra'
        db.delete_column('stoat_pagecontent', 'extra')


    models = {
        'stoat.page': {
            'Meta': {'object_name': 'Page'},
            'depth': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'numchild': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'max_length': '100', 'blank': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '100'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'blank': 'True'})
        },
        'stoat.pagecontent': {
            'Meta': {'unique_together': "(('title', 'page'),)", 'object_name': 'PageContent'},
            'cleaned_title': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'extra': ('django.db.models.fields.CharField', [], {'max_length': '42', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['stoat.Page']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'typ': ('django.db.models.fields.CharField', [], {'max_length': '12'})
        }
    }

    complete_apps = ['stoat']

########NEW FILE########
__FILENAME__ = 0004_auto__del_field_pagecontent_extra
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'PageContent.extra'
        db.delete_column('stoat_pagecontent', 'extra')


    def backwards(self, orm):
        
        # Adding field 'PageContent.extra'
        db.add_column('stoat_pagecontent', 'extra', self.gf('django.db.models.fields.CharField')(default='', max_length=42, blank=True), keep_default=False)


    models = {
        'stoat.page': {
            'Meta': {'object_name': 'Page'},
            'depth': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'numchild': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'max_length': '100', 'blank': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '100'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'blank': 'True'})
        },
        'stoat.pagecontent': {
            'Meta': {'unique_together': "(('title', 'page'),)", 'object_name': 'PageContent'},
            'cleaned_title': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['stoat.Page']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'typ': ('django.db.models.fields.CharField', [], {'max_length': '12'})
        }
    }

    complete_apps = ['stoat']

########NEW FILE########
__FILENAME__ = 0005_auto__add_field_page_show_in_nav
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Page.show_in_nav'
        db.add_column('stoat_page', 'show_in_nav', self.gf('django.db.models.fields.BooleanField')(default=False), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Page.show_in_nav'
        db.delete_column('stoat_page', 'show_in_nav')


    models = {
        'stoat.page': {
            'Meta': {'object_name': 'Page'},
            'depth': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'numchild': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'show_in_nav': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'max_length': '100', 'blank': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '100'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'blank': 'True'})
        },
        'stoat.pagecontent': {
            'Meta': {'unique_together': "(('title', 'page'),)", 'object_name': 'PageContent'},
            'cleaned_title': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'content': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'page': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['stoat.Page']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'typ': ('django.db.models.fields.CharField', [], {'max_length': '12'})
        }
    }

    complete_apps = ['stoat']

########NEW FILE########
__FILENAME__ = models
# {{{
from django.conf import settings
from django.core.cache import cache
from django.db import models
from django.db.models.loading import get_model
from django.db.models.signals import post_save
from treebeard.mp_tree import MP_Node

import stemplates
# }}}

ALLOWED_CHARS = 'abcdefghijklmnopqrstuvwxyz1234567890_'
def clean_field_title(title):
    """Return a "clean" version of the title, suitable for template/variable use.

    Ex:
        "Hello" -> "hello"
        "Hello World!" -> "hello_world"
    """
    return ''.join((c if c in ALLOWED_CHARS else '_') for c in title.lower())


CONTENT_TYPES = (
    ('char', 'char'),
    ('bool', 'bool'),
    ('text', 'text'),
    ('ckeditor', 'ckeditor'),
    ('img', 'img'),
    ('fk', 'fk'),
    ('int', 'int'),)
TEMPLATES = sorted([(name, name) for name in settings.STOAT_TEMPLATES.keys()])


class Page(MP_Node):
    title = models.CharField(max_length=100, verbose_name='page title')
    slug = models.SlugField(max_length=100, blank=True)
    template = models.CharField(max_length=100, choices=TEMPLATES,
                                default=settings.STOAT_DEFAULT_TEMPLATE)
    url = models.CharField(max_length=255, blank=True, unique=True)
    show_in_nav = models.BooleanField(default=False)

    class Meta:
        pass


    def __unicode__(self):
        return u'%s' % self.title

    def full_url(self):
        """Return the full URL of this page, taking ancestors into account."""

        url = '/' + '/'.join(p.slug for p in list(self.get_ancestors()) + [self] if p.slug)

        # Make sure the URL ends with a slash, as god intended.
        # This little endswith dance is done to handle the root url ('/') correctly.
        if not url.endswith('/'):
            url = url + '/'

        return url

    def save(self, *args, **kwargs):
        """Save the page.

        Does a few interesting things:

        * Regenerates the stored URL.
        * Saves children so their URLs will be regenerated as well.
        * Clears the cache of this page's children.
        """
        skip_cache_clear = kwargs.pop('skip_cache_clear', False)

        # Regenerate the URL.
        self.url = self.full_url()

        if not skip_cache_clear and self.id:
            # Clear this page's ancestor cache.
            key = 'stoat:pages:%d:children' % (self.id)
            cache.delete(key)

        # Save the page.
        resp = super(Page, self).save(*args, **kwargs)

        # Resave children to update slugs.
        for p in self.get_descendants():
            p.save(skip_cache_clear=True)

        if not skip_cache_clear:
            # Clear the cache for the NEW set of ancestors.
            self._clear_ancestor_caches()

        return resp


    def fields(self):
        """Return a dict of this page's content (MEMOIZED)."""
        if not hasattr(self, '_fields'):
            self._fields = dict((clean_field_title(pc.title), pc.get_content())
                                for pc in self.pagecontent_set.all())

        return self._fields

    def f(self):
        """A simple alias for fields()."""
        return self.fields()


    def get_absolute_url(self):
        return self.url


    def breadcrumbs(self):
        """Return a list of this pages' ancestors and itself."""
        return list(self.get_ancestors()) + [self]


    def nav_siblings(self):
        """Return a list of sibling Page objects (including this page)."""
        return list(self.get_siblings().filter(show_in_nav=True))

    def nav_children(self):
        """Return a list of child Page objects."""
        return list(self.get_children().filter(show_in_nav=True))
        
    def nav_next_sibling(self):
        """ Return the next sibling object, or None if it was the rightmost sibling."""
        siblings = self.nav_siblings()
        next_sibling = None
        for i, sibling in enumerate(siblings):
            if sibling == self and i < len(siblings) - 1:
                next_sibling = siblings[i+1]
        return next_sibling   
        
    def nav_prev_sibling(self):
        """ Return the previous sibling object, or None if it was the leftmost sibling."""
        siblings = self.nav_siblings()
        prev_sibling = None
        for i, sibling in enumerate(siblings):
            if sibling == self and i > 0:
                prev_sibling = siblings[i-1]
        return prev_sibling 

    def nav_siblings_and_children(self):
        """Return a nested list of sibling/children Page objects (including this page)."""
        siblings = self.nav_siblings()
        results = []
        for sibling in siblings:
            results.append([sibling, sibling.get_children().filter(show_in_nav=True)])

        return results


    def _clear_ancestor_caches(self):
        """Clear the child ID caches for all of this page's ancestors."""
        for page in Page.objects.get(id=self.id).get_ancestors():
            key = 'stoat:pages:%d:children' % (page.id)
            cache.delete(key)


class PageContent(models.Model):
    page = models.ForeignKey(Page)
    title = models.CharField(max_length=40)
    cleaned_title = models.CharField(max_length=40, editable=False)
    typ = models.CharField(max_length=12, choices=CONTENT_TYPES, verbose_name='type')
    content = models.TextField(blank=True)

    class Meta:
        unique_together = (('title', 'page'),)


    def __unicode__(self):
        return u'%s (%s)' % (self.title, self.typ)

    def save(self, *args, **kwargs):
        self.cleaned_title = clean_field_title(self.title)
        return super(PageContent, self).save(*args, **kwargs)


    def get_content(self):
        """Return the actual content.

        If this is a ForeignKey, the model instance it points at will be returned.
        Otherwise, the content itself is returned as a string.
        """
        if self.typ == 'fk':
            if not self.content:
                return None

            options = stemplates.get_field(self.page.template, self.title)[2]

            app_label = options.get('app', 'stoat')
            model_name = options.get('model', 'Page')
            model = get_model(app_label, model_name)

            try:
                return model.objects.get(id=self.content)
            except model.DoesNotExist:
                return None
        elif self.typ == 'bool':
            return True if int(self.content) else False
        else:
            return self.content


def clean_content(sender, instance, **kwargs):
    """Clean the PageContent objects for a given Page.

    New, needed PageContent objects will be created.
    Existing, needed PageContent objects will not be touched.
    Unneeded PageContent objects will be deleted.

    """
    if kwargs.get('raw'):
        # We're in loaddata (or something similar).
        return

    page = instance
    fields = dict(stemplates.get_fields_bare(page.template))
    current_contents = list(page.pagecontent_set.all())

    for content in current_contents:
        if content.title not in fields or fields[content.title] != content.typ:
            content.delete()

    existing_contents = dict([(pc.title, pc.typ)
                              for pc in page.pagecontent_set.all()])

    for title, typ in fields.items():
        if title not in existing_contents or existing_contents[title] != typ:
            PageContent(page=page, title=title, typ=typ, content='').save()

post_save.connect(clean_content, sender=Page, dispatch_uid='stoat-clean_content')


########NEW FILE########
__FILENAME__ = search_indexes
import datetime
from haystack.indexes import *
from haystack import site

from django.conf import settings

from models import Page

INDEX_CLASS = getattr(settings, 'STOAT_HAYSTACK_INDEX_CLASS')
if INDEX_CLASS:
    module_name, index_name = INDEX_CLASS.rsplit('.', 1)
    module = __import__(module_name, fromlist=[index_name])

    index = getattr(module, index_name)
else:
    index = SearchIndex

class PageIndex(index):
    text = CharField(document=True, use_template=True)
    title = CharField(model_attr='title')

    def index_queryset(self):
        """Used when the entire index for model is updated."""
        return Page.objects.all()


site.register(Page, PageIndex)


########NEW FILE########
__FILENAME__ = stemplates
from django.conf import settings

# STOAT_TEMPLATES = {
#    'Default': ('pages/default.html', (
#         ('Title', 'char'),
#         ('Body',  'text', { OPTIONS }),
#     )),
#    'Special': ('pages/special.html', (
#         ('Title',    'char'),
#         ('Subtitle', 'char'),
#         ('Body',     'text'),
#         ('Sidebar',  'text'),
#         ('Count',    'int'),
#     )),
# }
# STOAT_DEFAULT_TEMPLATE = 'Default'

def get_template(tname=settings.STOAT_DEFAULT_TEMPLATE):
    return settings.STOAT_TEMPLATES[tname]

def get_fields(tname=settings.STOAT_DEFAULT_TEMPLATE):
    return [f if len(f) >= 3 else list(f) + [{},]
            for f in get_template(tname)[1]]

def get_fields_bare(tname=settings.STOAT_DEFAULT_TEMPLATE):
    return [f[:2] for f in get_template(tname)[1]]

def get_field(tname, fname):
    return [f if len(f) >= 3 else f + ({},)
            for f in get_template(tname)[1]
            if f[0] == fname][0]

def get_path(tname=settings.STOAT_DEFAULT_TEMPLATE):
    return get_template(tname)[0]


########NEW FILE########
__FILENAME__ = stoat
# {{{
import random

from django import template
from django.core.cache import cache
from django.http import Http404
from django.shortcuts import get_object_or_404
from templatetag_sugar.parser import Name, Constant, Optional
from templatetag_sugar.register import tag

from .. import models


register = template.Library()
# }}}

def _get_roots():
    return list(models.Page.objects.filter(depth=1, show_in_nav=True))

def _get_roots_and_children(roots):
    results = []
    child_ids = set()
    for root in roots:
        key = 'stoat:pages:%d:children' % (root.id)
        ids = cache.get(key)
        if ids == None:
            ids = [c.id for c in root.get_children().filter(show_in_nav=True)]
            cache.set(key, ids, random.randint(300, 360))

        child_ids = child_ids.union(ids)
        results.append([root, ids])

    children = dict([(child.id, child)
                    for child in models.Page.objects.filter(id__in=child_ids)])
    for result in results:
        result[1] = [children[id] for id in result[1]]

    return results


@tag(register, [Optional([Constant("as"), Name()])])
def current_page(context, asvar=None):
    url = context['request'].path_info.rstrip('/') + '/'
    try:
        page = get_object_or_404(models.Page, url__exact=url)
    except Http404:
        page = None

    if asvar:
        context[asvar] = page
    else:
        context['page'] = page

    return ''


@tag(register, [Optional([Constant("as"), Name()])])
def nav_roots(context, asvar=None):
    roots = _get_roots()

    if asvar:
        context[asvar] = roots
    else:
        context['nav'] = roots

    return ''


@tag(register, [Optional([Constant("as"), Name()])])
def nav_roots_and_children(context, asvar=None):
    roots = _get_roots()
    results = _get_roots_and_children(roots)

    if asvar:
        context[asvar] = results
    else:
        context['nav'] = results

    return ''


########NEW FILE########
__FILENAME__ = base_test
from django.conf import settings
from django.test import TestCase

class StoatTestCase(TestCase):
    fixtures = ['stoat_test_data.json']
    urls = 'stoat.tests.urls'

    def setUp(self):
        self.OLD_STOAT_TEMPLATES = getattr(settings, 'STOAT_TEMPLATES')
        settings.STOAT_TEMPLATES = {
            'Default': ('stoat/tests/default.html', (
                ('Body',            'text'),
                ('Sidebar Heading', 'char'),
                ('Sidebar Body',    'text'),
            )),
            'Other': ('stoat/tests/other.html', (
                ('Body',            'text'),
                ('Test Int',        'int'),
            )),
            'Navigation': ('stoat/tests/navigation.html', (
            )),
        }

        self.OLD_STOAT_DEFAULT_TEMPLATE = getattr(settings, 'STOAT_DEFAULT_TEMPLATE')
        settings.STOAT_DEFAULT_TEMPLATE = 'Default'

        self.OLD_INSTALLED_APPS = getattr(settings, 'INSTALLED_APPS')
        settings.INSTALLED_APPS = (
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.sites',
            'stoat',)

        self.OLD_MIDDLEWARE_CLASSES = getattr(settings, 'MIDDLEWARE_CLASSES')
        settings.MIDDLEWARE_CLASSES = (
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.middleware.locale.LocaleMiddleware',
            'stoat.middleware.StoatMiddleware',)

    def tearDown(self):
        settings.STOAT_TEMPLATES = self.OLD_STOAT_TEMPLATES
        settings.STOAT_DEFAULT_TEMPLATE = self.OLD_STOAT_DEFAULT_TEMPLATE
        settings.INSTALLED_APPS = self.OLD_INSTALLED_APPS
        settings.MIDDLEWARE_CLASSES = self.OLD_MIDDLEWARE_CLASSES


def get(model, **kwargs):
    try:
        return model.objects.get(**kwargs)
    except model.DoesNotExist:
        return None


########NEW FILE########
__FILENAME__ = test_movement
from base_test import StoatTestCase, get
from django.contrib.auth.models import User
from stoat.models import Page

class MovementTestCase(StoatTestCase):
    def setUp(self):
        user = User.objects.create_user('admin', 'admin@example.com', 'adminpass')
        user.is_staff = user.is_superuser = True
        user.save()

        return super(MovementTestCase, self).setUp()


    def test_move_inside(self):
        one = get(Page, title='Top One')
        two = get(Page, title='Top Two')

        self.assertTrue(two in one.get_siblings())
        self.assertTrue(two not in one.get_children())

        self.client.login(username='admin', password='adminpass')
        resp = self.client.post('/admin/stoat/page/move-page/', {
            'page': two.id,
            'target': one.id,
            'position': 'inside',
        })
        self.assertEqual(resp.status_code, 301)
        self.assertEqual(resp['Location'], 'http://testserver/admin/stoat/page/')

        one = get(Page, title='Top One')
        two = get(Page, title='Top Two')

        self.assertEqual(two.url, '/top-one/top-two/')
        self.assertTrue(two not in one.get_siblings())
        self.assertTrue(two in one.get_children())

    def test_move_above(self):
        one = get(Page, title='Top One')
        two = get(Page, title='Top Two')
        pages = list(Page.objects.filter(depth=1))

        self.assertTrue(two in pages)
        self.assertTrue(pages.index(one) < pages.index(two))

        self.client.login(username='admin', password='adminpass')
        resp = self.client.post('/admin/stoat/page/move-page/', {
            'page': two.id,
            'target': one.id,
            'position': 'above',
        })
        self.assertEqual(resp.status_code, 301)
        self.assertEqual(resp['Location'], 'http://testserver/admin/stoat/page/')

        one = get(Page, title='Top One')
        two = get(Page, title='Top Two')
        pages = list(Page.objects.filter(depth=1))

        self.assertTrue(two in pages)
        self.assertTrue(pages.index(one) > pages.index(two))

    def test_move_below(self):
        one = get(Page, title='Top Two')
        two = get(Page, title='Top One')
        pages = list(Page.objects.filter(depth=1))

        self.assertTrue(two in pages)
        self.assertTrue(pages.index(one) > pages.index(two))

        self.client.login(username='admin', password='adminpass')
        resp = self.client.post('/admin/stoat/page/move-page/', {
            'page': two.id,
            'target': one.id,
            'position': 'below',
        })
        self.assertEqual(resp.status_code, 301)
        self.assertEqual(resp['Location'], 'http://testserver/admin/stoat/page/')

        one = get(Page, title='Top Two')
        two = get(Page, title='Top One')
        pages = list(Page.objects.filter(depth=1))

        self.assertTrue(two in pages)
        self.assertTrue(pages.index(one) < pages.index(two))

    def test_move_tree(self):
        one = get(Page, title='Top One')
        one_sub = get(Page, title='One Sub')
        one_sub_sub = get(Page, title='One Sub Sub')
        two = get(Page, title='Top Two')

        self.assertTrue(one in two.get_siblings())
        self.assertEqual(one.url, '/top-one/')
        self.assertEqual(one_sub.url, '/top-one/one-sub/')
        self.assertEqual(one_sub_sub.url, '/top-one/one-sub/one-sub-sub/')

        self.client.login(username='admin', password='adminpass')
        resp = self.client.post('/admin/stoat/page/move-page/', {
            'page': one.id,
            'target': two.id,
            'position': 'inside',
        })
        self.assertEqual(resp.status_code, 301)
        self.assertEqual(resp['Location'], 'http://testserver/admin/stoat/page/')

        one = get(Page, title='Top One')
        one_sub = get(Page, title='One Sub')
        one_sub_sub = get(Page, title='One Sub Sub')
        two = get(Page, title='Top Two')

        self.assertTrue(one in two.get_children())
        self.assertEqual(one.url, '/top-two/top-one/')
        self.assertEqual(one_sub.url, '/top-two/top-one/one-sub/')
        self.assertEqual(one_sub_sub.url, '/top-two/top-one/one-sub/one-sub-sub/')



########NEW FILE########
__FILENAME__ = test_navigation
from base_test import StoatTestCase, get
from stoat.models import Page

class NavigationTestCase(StoatTestCase):
    def test_nav_roots(self):
        resp = self.client.get('/navigator/')
        self.assertEqual(resp.status_code, 200)

        content = resp.content.split('SPLIT')[0]

        self.assertTrue('<li class="roots-root">Home</li>' in content)
        self.assertTrue('<li class="roots-root">Top One</li>' in content)
        self.assertTrue('<li class="roots-root">Top Two</li>' in content)

    def test_nav_roots_and_children(self):
        resp = self.client.get('/navigator/')
        self.assertEqual(resp.status_code, 200)

        content = resp.content.split('SPLIT')[1]

        self.assertTrue('<span class="rac-root">Home</span>' in content)
        self.assertTrue('<span class="rac-root">Top One</span>' in content)
        self.assertTrue('<span class="rac-root">Top Two</span>' in content)

        self.assertTrue('<li class="rac-child">One Sub</li>' in content)

        self.assertTrue('One Sub Sub' not in content)

    def test_nav_siblings(self):
        page = get(Page, url='/')
        real_sibs = set(['/', '/top-one/', '/top-two/'])
        test_sibs = set([p.url for p in page.nav_siblings()])
        self.assertTrue(real_sibs == test_sibs)

        page = get(Page, url='/top-one/')
        test_sibs = set([p.url for p in page.nav_siblings()])
        self.assertTrue(real_sibs == test_sibs)

        page = get(Page, url='/top-one/one-sub/')
        real_sibs = set(['/top-one/one-sub/'])
        test_sibs = set([p.url for p in page.nav_siblings()])
        self.assertTrue(real_sibs == test_sibs)
        
    def test_nav_next_sibling(self):
        page = get(Page, url='/')
        real_sibs = set(['/', '/top-one/', '/top-two/'])
        real_next_sib = '/top-one/'
        self.assertTrue(real_next_sib == page.nav_next_sibling().url)
        
        page = get(Page, url='/top-two/')
        real_next_sib = None
        self.assertTrue(real_next_sib == page.nav_next_sibling())
        
    def test_nav_prev_sibling(self):
        page = get(Page, url='/')
        real_sibs = set(['/', '/top-one/', '/top-two/'])
        real_prev_sib = None
        self.assertTrue(real_prev_sib == page.nav_prev_sibling())
        
        page = get(Page, url='/top-two/')
        real_sibs = set(['/', '/top-one/', '/top-two/'])
        real_prev_sib = '/top-one/'
        self.assertTrue(real_prev_sib == page.nav_prev_sibling().url)

    def test_nav_children(self):
        page = get(Page, url='/')
        real_kids = set([])
        test_kids = set([p.url for p in page.nav_children()])
        self.assertTrue(real_kids == test_kids)

        page = get(Page, url='/top-one/')
        real_kids = set(['/top-one/one-sub/'])
        test_kids = set([p.url for p in page.nav_children()])
        self.assertTrue(real_kids == test_kids)

        page = get(Page, url='/top-one/one-sub/')
        real_kids = set(['/top-one/one-sub/one-sub-sub/'])
        test_kids = set([p.url for p in page.nav_children()])
        self.assertTrue(real_kids == test_kids)
        
    def test_nav_siblings_and_children(self):
        def test_siblings(saclist, urllist):
            urls = set([sib.url for sib, children in saclist])
            return urls == set(urllist)

        def test_children(saclist, urlmap):
            test_urlmap = {}
            for sib, children in saclist:
                test_urlmap[sib.url] = [c.url for c in children]

            return test_urlmap == urlmap


        page = get(Page, url='/')
        real_sibs = ['/', '/top-one/', '/top-two/']
        real_map = {
            '/': [],
            '/top-one/': ['/top-one/one-sub/'],
            '/top-two/': [],
        }
        saclist = page.nav_siblings_and_children()
        self.assertTrue(test_siblings(saclist, real_sibs))
        self.assertTrue(test_children(saclist, real_map))

        page = get(Page, url='/top-one/')
        saclist = page.nav_siblings_and_children()
        self.assertTrue(test_siblings(saclist, real_sibs))
        self.assertTrue(test_children(saclist, real_map))

        page = get(Page, url='/top-one/one-sub/')
        real_sibs = ['/top-one/one-sub/']
        real_map = {
            '/top-one/one-sub/': ['/top-one/one-sub/one-sub-sub/'],
        }
        saclist = page.nav_siblings_and_children()
        self.assertTrue(test_siblings(saclist, real_sibs))
        self.assertTrue(test_children(saclist, real_map))

    def test_breadcrumbs(self):
        page = get(Page, url='/')
        real_crumbs = ['/']
        self.assertTrue(real_crumbs == [p.url for p in page.breadcrumbs()])

        page = get(Page, url='/top-one/')
        real_crumbs = ['/top-one/']
        self.assertTrue(real_crumbs == [p.url for p in page.breadcrumbs()])

        page = get(Page, url='/top-one/one-sub/')
        real_crumbs = ['/top-one/', '/top-one/one-sub/']
        self.assertTrue(real_crumbs == [p.url for p in page.breadcrumbs()])

        page = get(Page, url='/top-one/one-sub/one-sub-sub/')
        real_crumbs = ['/top-one/', '/top-one/one-sub/', '/top-one/one-sub/one-sub-sub/']
        self.assertTrue(real_crumbs == [p.url for p in page.breadcrumbs()])

        page = get(Page, url='/top-one/one-sub-hidden/')
        real_crumbs = ['/top-one/', '/top-one/one-sub-hidden/']
        self.assertTrue(real_crumbs == [p.url for p in page.breadcrumbs()])

########NEW FILE########
__FILENAME__ = test_pagecontent
from base_test import StoatTestCase, get

from stoat.models import Page, PageContent


class PageContentTestCase(StoatTestCase):
    def test_pagecontent_creation(self):
        p = Page.add_root(title='Sample', slug='sample', template='Default')
        p.save()

        pc1 = PageContent.objects.get(page=p, title='Body')
        pc2 = PageContent.objects.get(page=p, title='Sidebar Heading')
        pc3 = PageContent.objects.get(page=p, title='Sidebar Body')

        self.assertEqual(pc1.content, '')
        self.assertEqual(pc2.content, '')
        self.assertEqual(pc3.content, '')

    def test_pagecontent_deletion(self):
        p = Page.add_root(title='Sample', slug='sample', template='Default')
        p.save()

        pc1 = get(PageContent, page=p, title='Body')
        pc2 = get(PageContent, page=p, title='Sidebar Heading')
        pc3 = get(PageContent, page=p, title='Sidebar Body')
        pc4 = get(PageContent, page=p, title='Test Int')

        self.assertEqual(pc1.content, '')
        self.assertEqual(pc2.content, '')
        self.assertEqual(pc3.content, '')
        self.assertEqual(pc4, None)

        p.template = 'Other'
        p.save()

        pc1 = get(PageContent, page=p, title='Body')
        pc2 = get(PageContent, page=p, title='Sidebar Heading')
        pc3 = get(PageContent, page=p, title='Sidebar Body')
        pc4 = get(PageContent, page=p, title='Test Int')

        self.assertEqual(pc1.content, '')
        self.assertEqual(pc2, None)
        self.assertEqual(pc3, None)
        self.assertEqual(pc4.content, '')

    def test_pagecontent_preservation(self):
        p = Page.add_root(title='Sample', slug='sample', template='Default')
        p.save()

        pc1 = get(PageContent, page=p, title='Body')
        pc1.content = 'Testing Content'
        pc1.save()

        pc1 = get(PageContent, page=p, title='Body')
        self.assertEqual(pc1.content, 'Testing Content')

        p.template = 'Other'
        p.save()

        pc1 = get(PageContent, page=p, title='Body')
        self.assertEqual(pc1.content, 'Testing Content')

########NEW FILE########
__FILENAME__ = test_templates
from base_test import StoatTestCase

class TemplatingTestCase(StoatTestCase):
    def test_default_template(self):
        resp = self.client.get('/')
        self.assertEqual(resp.status_code, 200)

        self.assertTrue('stoat/tests/default.html' in [t.name for t in resp.templates])

        self.assertTrue("<h1>Home</h1>" in resp.content)
        self.assertTrue("<h2>home sidebar heading content</h2>" in resp.content)
        self.assertTrue("<p>home sidebar body content</p>" in resp.content)
        self.assertTrue("<section>home body content</section>" in resp.content)

    def test_other_template(self):
        resp = self.client.get('/top-one/')
        self.assertEqual(resp.status_code, 200)

        self.assertTrue('stoat/tests/other.html' in [t.name for t in resp.templates])

        self.assertTrue("<h1>Top One</h1>" in resp.content)
        self.assertTrue("<section>top one body content</section>" in resp.content)
        self.assertTrue("<aside>1</aside>" in resp.content)

    def test_get_absolute_url(self):
        resp = self.client.get('/')
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.context['page'].get_absolute_url(), '/')

        resp = self.client.get('/top-one/')
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.context['page'].get_absolute_url(), '/top-one/')

        resp = self.client.get('/top-one/one-sub/')
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.context['page'].get_absolute_url(), '/top-one/one-sub/')

    def test_title(self):
        resp = self.client.get('/')
        self.assertEqual(resp.status_code, 200)

        self.assertTrue('<title>Home</title>' in resp.content)
        self.assertTrue('<h1>Home</h1>' in resp.content)


########NEW FILE########
__FILENAME__ = test_views
from base_test import StoatTestCase, get
from stoat.models import Page

class ViewsTestCase(StoatTestCase):
    def test_slug(self):
        resp = self.client.get('/top-one/')
        self.assertEqual(resp.status_code, 200)

        self.assertTrue("Top One" in resp.content)

    def test_noslug(self):
        resp = self.client.get('/')
        self.assertEqual(resp.status_code, 200)

        self.assertTrue("Home" in resp.content)

    def test_child(self):
        resp = self.client.get('/top-one/one-sub/')
        self.assertEqual(resp.status_code, 200)

        self.assertTrue("One Sub" in resp.content)

    def test_404(self):
        resp = self.client.get('/non-existant/')
        self.assertEqual(resp.status_code, 404)


    def test_shadowed(self):
        p = get(Page, title='Shadowed')
        self.assertEqual(p.url, '/shadowed/')

        resp = self.client.get('/shadowed/')
        self.assertEqual(resp.status_code, 200)

        self.assertTrue('This is a normal view.' in resp.content)
        self.assertTrue('html' not in resp.content)

        resp = self.client.get('/shadowed')
        self.assertEqual(resp.status_code, 301)
        self.assertEqual(resp['Location'], 'http://testserver/shadowed/')


    def test_trailing_slash_redirect(self):
        resp = self.client.get('/top-one')

        self.assertEqual(resp.status_code, 301)
        self.assertEqual(resp['Location'], 'http://testserver/top-one/')

    def test_trailing_slash_404(self):
        resp = self.client.get('/non-existant')

        self.assertEqual(resp.status_code, 404)


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseServerError
from django.contrib import admin

admin.autodiscover()

def shadowed(request):
    return HttpResponse("This is a normal view.")

urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls)),
    url(r'shadowed/$', shadowed)
)

def _404(request):
    return HttpResponseNotFound('404 Page!')

def _500(request):
    return HttpResponseServerError('500 Page!')

handler404 = _404
handler500 = _500

########NEW FILE########
__FILENAME__ = views
# {{{
from django.conf import settings
from django.http import Http404, HttpResponsePermanentRedirect, HttpResponseBadRequest
from django.shortcuts import get_object_or_404, render_to_response
from django.template import RequestContext
from django.views.decorators.csrf import csrf_protect

from forms import MovePageForm
from models import Page
from stemplates import get_path
# }}}


def page(request, url):
    if not url.startswith('/'):
        url = "/" + url
    try:
        p = get_object_or_404(Page, url__exact=url)
    except Http404:
        if not url.endswith('/') and settings.APPEND_SLASH:
            new_url = url + "/"
            get_object_or_404(Page, url__exact=new_url)
            return HttpResponsePermanentRedirect("%s/" % request.path)
        else:
            raise
    return render_page(request, p)

@csrf_protect
def render_page(request, p):
    return render_to_response(get_path(p.template), {
        'page': p,
    }, context_instance=RequestContext(request))


def move_page(request):
    if not request.POST:
        return HttpResponseBadRequest()

    form = MovePageForm(request.POST)
    if form.is_valid():
        page = form.cleaned_data['page']
        page_id = page.id
        target = form.cleaned_data['target']
        position = form.cleaned_data['position']

        page._clear_ancestor_caches()
        if position == 'above':
            page.move(target, 'left')
        elif position == 'below':
            page.move(target, 'right')
        elif position == 'inside':
            page.move(target, 'last-child')

        page = Page.objects.get(id=page_id)
        page.save()

    # TODO: Make this dynamic.
    return HttpResponsePermanentRedirect('/admin/stoat/page/')


########NEW FILE########
