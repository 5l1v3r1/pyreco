
 Multi Language Custom Error Documents
 -------------------------------------

 The 'error' directory contains HTTP error messages in multiple languages.
 If the preferred language of a client is available it is selected
 automatically via the MultiViews feature. This feature is enabled
 by default via the Options, Language and ErrorDocument directives.

 You may configure the design and markup of the documents by modifying
 the HTML files in the directory 'error/include'.

 Supported Languages:
 
  +-----------------------+------------------------------------------+
  | Language              | Contributed by                           |
  +-----------------------+------------------------------------------+
  | Brazilian (pt-br)     | Ricardo Leite                            |
  | Czech (cs)            | Marcel Kolaja                            |
  | Dutch (nl)            | Peter Van Biesen                         |
  | English (en)          | Lars Eilebrecht                          |
  | French (fr)           | Cecile de Crecy                          |
  | German (de)           | Lars Eilebrecht                          |
  | Italian (it)          | Luigi Rosa                               |
  | Korean (ko)           | Jaeho Shin                               |
  | Polish (pl)           | Tomasz Kepczynski                        |
  | Romanian (ro)         | Andrei Besleaga                          |
  | Serbian (sr)          | Nikola Smolenski                         |
  | Spanish (es)          | Karla Quintero                           |
  | Swedish (sv)          | Thomas Sjögren                           |
  | Turkish (tr)          | Emre Sokullu                             |
  | Irish (ga)            | Noirin Plunkett                          |
  +-----------------------+------------------------------------------+
  (Please see http://httpd.apache.org/docs-project/ if you would
   like to contribute the pages in an additional language.)


Public Domain Icons

     These icons were originally made for Mosaic for X and have been
     included in the NCSA httpd and Apache server distributions in the
     past. They are in the public domain and may be freely included in any
     application. The originals were done by Kevin Hughes (kevinh@kevcom.com).
     Andy Polyakov tuned the icon colors and added a few new images.

     If you'd like to contribute additions to this set, contact the httpd
     documentation project <http://httpd.apache.org/docs-project/>.

     Almost all of these icons are 20x22 pixels in size.  There are
     alternative icons in the "small" directory that are 16x16 in size,
     provided by Mike Brown (mike@hyperreal.org).

Suggested Uses

The following are a few suggestions, to serve as a starting point for ideas.
Please feel free to tweak and rename the icons as you like.

     a.gif
          This might be used to represent PostScript or text layout
          languages.

     alert.black.gif, alert.red.gif
          These can be used to highlight any important items, such as a
          README file in a directory.

     back.gif, forward.gif
          These can be used as links to go to previous and next areas.

     ball.gray.gif, ball.red.gif
          These might be used as bullets.

     binary.gif
          This can be used to represent binary files.

     binhex.gif
          This can represent BinHex-encoded data.

     blank.gif
          This can be used as a placeholder or a spacing element.

     bomb.gif
          This can be used to represent core files.

     box1.gif, box2.gif
          These icons can be used to represent generic 3D applications and
          related files.

     broken.gif
          This can represent corrupted data.

     burst.gif
          This can call attention to new and important items.

     c.gif
          This might represent C source code.

     comp.blue.gif, comp.gray.gif
          These little computer icons can stand for telnet or FTP
          sessions.

     compressed.gif
          This may represent compressed data.

     continued.gif
          This can be a link to a continued listing of a directory.

     down.gif, up.gif, left.gif, right.gif
          These can be used to scroll up, down, left and right in a
          listing or may be used to denote items in an outline.

     dir.gif
          Identical to folder.gif below.

     diskimg.gif
          This can represent floppy disk storage.

     dvi.gif
          This can represent DVI files.

     f.gif
          This might represent FORTRAN or Forth source code.

     folder.gif, folder.open.gif, folder.sec.gif
          The folder can represent directories. There is also a version
          that can represent secure directories or directories that cannot
          be viewed.

     generic.gif, generic.sec.gif, generic.red.gif
          These can represent generic files, secure files, and important
          files, respectively.

     hand.right.gif, hand.up.gif
          These can point out important items (pun intended).

     image1.gif, image2.gif, image3.gif
          These can represent image formats of various types.

     index.gif
          This might represent a WAIS index or search facility.

     layout.gif
          This might represent files and formats that contain graphics as
          well as text layout, such as HTML and PDF files.

     link.gif
          This might represent files that are symbolic links.

     movie.gif
          This can represent various movie formats.

     p.gif
          This may stand for Perl or Python source code.

     pie0.gif ... pie8.gif
          These icons can be used in applications where a list of
          documents is returned from a search. The little pie chart images
          can denote how relevant the documents may be to your search
          query.

     patch.gif
          This may stand for patches and diff files.

     portal.gif
          This might be a link to an online service or a 3D world.

     pdf.gif, ps.gif, quill.gif
          These may represent PDF and PostScript files.

     screw1.gif, screw2.gif
          These may represent CAD or engineering data and formats.

     script.gif
          This can represent any of various interpreted languages, such as
          Perl, python, TCL, and shell scripts, as well as server
          configuration files.

     sound1.gif, sound2.gif
          These can represent sound files.

     sphere1.gif, sphere2.gif
          These can represent 3D worlds or rendering applications and
          formats.

     tar.gif
          This can represent TAR archive files.

     tex.gif
          This can represent TeX files.

     text.gif
          This can represent generic (plain) text files.

     transfer.gif
          This can represent FTP transfers or uploads/downloads.

     unknown.gif
          This may represent a file of an unknown type.

     uu.gif, uuencoded.gif
          This can stand for uuencoded data.

     world1.gif, world2.gif
          These can represent 3D worlds or other 3D formats.

<html>
<head>
<style>
a { text-decoration: none; }
img.whiteico { padding: 4px; background: white; vertical-align: middle; }
img.blackico { padding: 4px; background: black; vertical-align: middle; }
</style>
</head>
<body>
<h1>Public Domain Icons</h1>

<p>These icons were originally made for Mosaic for X and have been
included in the NCSA httpd and Apache server distributions in the
past. They are in the public domain and may be freely included in any
application. The originals were done by Kevin Hughes (kevinh@kevcom.com).
Andy Polyakov tuned the icon colors and added few new images.</p>

<p>If you'd like to contribute additions to this set, contact the httpd
documentation project <a href="http://httpd.apache.org/docs-project/"
>http://httpd.apache.org/docs-project/</a>.</p>

<p>Almost all of these icons are 20x22 pixels in size.  There are
alternative icons in the "small" directory that are 16x16 in size,
provided by Mike Brown (mike@hyperreal.org).</p>

<h2>Suggested Uses</h2>

<p>The following are a few suggestions, to serve as a starting point for ideas.
Please feel free to tweak and rename the icons as you like.</p>

<table>
<tr>
<td width="25%">
 <a href="a.gif"><img class="blackico" src="a.gif" 
   /><img class="whiteico" src="a.gif" /> a.gif</a>
 <br /><a href="a.png"><img class="blackico" src="a.png" 
   /><img class="whiteico" src="a.png" /> a.png</a></td>
</tr>
<tr><td colspan="4">This might be used to represent PostScript or text layout
languages.</td>
</tr>

<tr>
<td width="25%">
 <a href="alert.black.gif"><img class="blackico" src="alert.black.gif" 
   /><img class="whiteico" src="alert.black.gif" /> alert.black.gif</a>
 <br /><a href="alert.black.png"><img class="blackico" src="alert.black.png" 
   /><img class="whiteico" src="alert.black.png" /> alert.black.png</a></td>
<td width="25%">
 <a href="alert.red.gif"><img class="blackico" src="alert.red.gif" 
   /><img class="whiteico" src="alert.red.gif" /> alert.red.gif</a>
 <br /><a href="alert.red.png"><img class="blackico" src="alert.red.png" 
   /><img class="whiteico" src="alert.red.png" /> alert.red.png</a></td>
</tr>
<tr><td colspan="4">These can be used to highlight any important items,
such as a README file in a directory.</td>
</tr>

<tr>
<td width="25%">
 <a href="back.gif"><img class="blackico" src="back.gif" 
   /><img class="whiteico" src="back.gif" /> back.gif</a>
 <br /><a href="back.png"><img class="blackico" src="back.png" 
   /><img class="whiteico" src="back.png" /> back.png</a></td>
<td width="25%">
 <a href="forward.gif"><img class="blackico" src="forward.gif" 
   /><img class="whiteico" src="forward.gif" /> forward.gif</a>
 <br /><a href="forward.png"><img class="blackico" src="forward.png" 
   /><img class="whiteico" src="forward.png" /> forward.png</a></td>
<td width="25%">
 <a href="small/back.gif"><img class="blackico" src="small/back.gif" 
   /><img class="whiteico" src="small/back.gif" /> small.gif</a>
 <br /><a href="small/back.png"><img class="blackico" src="small/back.png" 
   /><img class="whiteico" src="small/back.png" /> small/back.png</a></td>
<td width="25%">
 <a href="small/forward.gif"><img class="blackico" src="small/forward.gif" 
   /><img class="whiteico" src="small/forward.gif" /> small/forward.gif</a>
 <br /><a href="small/forward.png"><img class="blackico" src="small/forward.png" 
   /><img class="whiteico" src="small/forward.png" /> small/forward.png</a></td>
</tr>
<tr><td colspan="4">These can be used as links to go to previous and next
areas.</td>
</tr>

<tr>
<td width="25%">
 <a href="ball.gray.gif"><img class="blackico" src="ball.gray.gif" 
   /><img class="whiteico" src="ball.gray.gif" /> ball.gray.gif</a>
 <br /><a href="ball.gray.png"><img class="blackico" src="ball.gray.png" 
   /><img class="whiteico" src="ball.gray.png" /> ball.gray.png</a></td>
<td width="25%">
 <a href="ball.red.gif"><img class="blackico" src="ball.red.gif" 
   /><img class="whiteico" src="ball.red.gif" /> ball.red.gif</a>
 <br /><a href="ball.red.png"><img class="blackico" src="ball.red.png" 
   /><img class="whiteico" src="ball.red.png" /> ball.red.png</a></td>
</tr>
<tr><td colspan="4">These might be used as bullets.</td>
</tr>

<tr>
<td width="25%">
 <a href="binary.gif"><img class="blackico" src="binary.gif" 
   /><img class="whiteico" src="binary.gif" /> binary.gif</a>
 <br /><a href="binary.png"><img class="blackico" src="binary.png" 
   /><img class="whiteico" src="binary.png" /> binary.png</a></td>
<td width="25%">
 <a href="small/binary.gif"><img class="blackico" src="small/binary.gif" 
   /><img class="whiteico" src="small/binary.gif" /> small/binary.gif</a>
 <br /><a href="small/binary.png"><img class="blackico" src="small/binary.png" 
   /><img class="whiteico" src="small/binary.png" /> small/binary.png</a></td>
</tr>
<tr><td colspan="4">This can be used to represent binary files.</td>
</tr>

<tr>
<td width="25%">
 <a href="binhex.gif"><img class="blackico" src="binhex.gif" 
   /><img class="whiteico" src="binhex.gif" /> binhex.gif</a>
 <br /><a href="binhex.png"><img class="blackico" src="binhex.png" 
   /><img class="whiteico" src="binhex.png" /> binhex.png</a></td>
<td width="25%">
 <a href="small/binhex.gif"><img class="blackico" src="small/binhex.gif" 
   /><img class="whiteico" src="small/binhex.gif" /> small/binhex.gif</a>
 <br /><a href="small/binhex.png"><img class="blackico" src="small/binhex.png" 
   /><img class="whiteico" src="small/binhex.png" /> small/binhex.png</a></td>
</tr>
<tr><td colspan="4">This can represent BinHex-encoded data.</td>
</tr>

<tr>
<td width="25%">
 <a href="blank.gif"><img class="blackico" src="blank.gif" 
   /><img class="whiteico" src="blank.gif" /> blank.gif</a>
 <br /><a href="blank.png"><img class="blackico" src="blank.png" 
   /><img class="whiteico" src="blank.png" /> blank.png</a></td>
<td width="25%">
 <a href="small/blank.gif"><img class="blackico" src="small/blank.gif" 
   /><img class="whiteico" src="small/blank.gif" /> small/blank.gif</a>
 <br /><a href="small/blank.png"><img class="blackico" src="small/blank.png" 
   /><img class="whiteico" src="small/blank.png" /> small/blank.png</a></td>
</tr>
<tr><td colspan="4">This can be used as a placeholder or a spacing
element.</td>
</tr>

<tr>
<td width="25%">
 <a href="bomb.gif"><img class="blackico" src="bomb.gif" 
   /><img class="whiteico" src="bomb.gif" /> bomb.gif</a>
 <br /><a href="bomb.png"><img class="blackico" src="bomb.png" 
   /><img class="whiteico" src="bomb.png" /> bomb.png</a></td>
</tr>
<tr><td colspan="4">This can be used to represent core files.</td>
</tr>

<tr>
<td width="25%">
 <a href="box1.gif"><img class="blackico" src="box1.gif" 
   /><img class="whiteico" src="box1.gif" /> box1.gif</a>
 <br /><a href="box1.png"><img class="blackico" src="box1.png" 
   /><img class="whiteico" src="box1.png" /> box1.png</a></td>
<td width="25%">
 <a href="box2.gif"><img class="blackico" src="box2.gif" 
   /><img class="whiteico" src="box2.gif" /> box2.gif</a>
 <br /><a href="box2.png"><img class="blackico" src="box2.png" 
   /><img class="whiteico" src="box2.png" /> box2.png</a></td>
</tr>
<tr><td colspan="4">These icons can be used to represent generic 3D
applications and related files.</td>
</tr>

<tr>
<td width="25%">
 <a href="broken.gif"><img class="blackico" src="broken.gif" 
   /><img class="whiteico" src="broken.gif" /> broken.gif</a>
 <br /><a href="broken.png"><img class="blackico" src="broken.png" 
   /><img class="whiteico" src="broken.png" /> broken.png</a></td>
<td width="25%">
 <a href="small/broken.gif"><img class="blackico" src="small/broken.gif" 
   /><img class="whiteico" src="small/broken.gif" /> small/broken.gif</a>
 <br /><a href="small/broken.png"><img class="blackico" src="small/broken.png" 
   /><img class="whiteico" src="small/broken.png" /> small/broken.png</a></td>
</tr>
<tr><td colspan="4">This can represent corrupted data.</td>
</tr>

<tr>
<td width="25%">
 <a href="burst.gif"><img class="blackico" src="burst.gif" 
   /><img class="whiteico" src="burst.gif" /> burst.gif</a>
 <br /><a href="burst.png"><img class="blackico" src="burst.png" 
   /><img class="whiteico" src="burst.png" /> burst.png</a></td>
<td width="25%">
 <a href="small/burst.gif"><img class="blackico" src="small/burst.gif" 
   /><img class="whiteico" src="small/burst.gif" /> small/burst.gif</a>
 <br /><a href="small/burst.png"><img class="blackico" src="small/burst.png" 
   /><img class="whiteico" src="small/burst.png" /> small/burst.png</a></td>
</tr>
<tr><td colspan="4">This can call attention to new and important items.</td>
</tr>

<tr>
<td width="25%">
 <a href="c.gif"><img class="blackico" src="c.gif" 
   /><img class="whiteico" src="c.gif" /> c.gif</a>
 <br /><a href="c.png"><img class="blackico" src="c.png" 
   /><img class="whiteico" src="c.png" /> c.png</a></td>
</tr>
<tr><td colspan="4">This might represent C source code.</td>
</tr>

<tr>
<td width="25%">
 <a href="comp.blue.gif"><img class="blackico" src="comp.blue.gif" 
   /><img class="whiteico" src="comp.blue.gif" /> comp.blue.gif</a>
 <br /><a href="comp.blue.png"><img class="blackico" src="comp.blue.png" 
   /><img class="whiteico" src="comp.blue.png" /> comp.blue.png</a></td>
<td width="25%">
 <a href="comp.gray.gif"><img class="blackico" src="comp.gray.gif" 
   /><img class="whiteico" src="comp.gray.gif" /> comp.gray.gif</a>
 <br /><a href="comp.gray.png"><img class="blackico" src="comp.gray.png" 
   /><img class="whiteico" src="comp.gray.png" /> comp.gray.png</a></td>
<td width="25%">
 <a href="small/comp1.gif"><img class="blackico" src="small/comp1.gif" 
   /><img class="whiteico" src="small/comp1.gif" /> small/comp1.gif</a>
 <br /><a href="small/comp1.png"><img class="blackico" src="small/comp1.png" 
   /><img class="whiteico" src="small/comp1.png" /> small/comp1.png</a></td>
<td width="25%">
 <a href="small/comp2.gif"><img class="blackico" src="small/comp2.gif" 
   /><img class="whiteico" src="small/comp2.gif" /> small/comp2.gif</a>
 <br /><a href="small/comp2.png"><img class="blackico" src="small/comp2.png" 
   /><img class="whiteico" src="small/comp2.png" /> small/comp2.png</a></td>
</tr>
<tr><td colspan="4">These little computer icons can stand for telnet or FTP
sessions.</td>
</tr>

<tr>
<td width="25%">
 <a href="compressed.gif"><img class="blackico" src="compressed.gif" 
   /><img class="whiteico" src="compressed.gif" /> compressed.gif</a>
 <br /><a href="compressed.png"><img class="blackico" src="compressed.png" 
   /><img class="whiteico" src="compressed.png" /> compressed.png</a></td>
<td width="25%">
 <a href="small/compressed.gif"><img class="blackico" src="small/compressed.gif" 
   /><img class="whiteico" src="small/compressed.gif" /> small/compressed.gif</a>
 <br /><a href="small/compressed.png"><img class="blackico" src="small/compressed.png" 
   /><img class="whiteico" src="small/compressed.png" /> small/compressed.png</a></td>
</tr>
<tr><td colspan="4">This may represent compressed data.</td>
</tr>

<tr>
<td width="25%">
 <a href="continued.gif"><img class="blackico" src="continued.gif" 
   /><img class="whiteico" src="continued.gif" /> continued.gif</a>
 <br /><a href="continued.png"><img class="blackico" src="continued.png" 
   /><img class="whiteico" src="continued.png" /> continued.png</a></td>
<td width="25%">
 <a href="small/continued.gif"><img class="blackico" src="small/continued.gif" 
   /><img class="whiteico" src="small/continued.gif" /> small/continued.gif</a>
 <br /><a href="small/continued.png"><img class="blackico" src="small/continued.png" 
   /><img class="whiteico" src="small/continued.png" /> small/continued.png</a></td>
</tr>
<tr><td colspan="4">This can be a link to a continued listing of a
directory.</td>
</tr>

<tr>
<td width="25%">
 <a href="down.gif"><img class="blackico" src="down.gif" 
   /><img class="whiteico" src="down.gif" /> down.gif</a>
 <br /><a href="down.png"><img class="blackico" src="down.png" 
   /><img class="whiteico" src="down.png" /> down.png</a></td>
<td width="25%">
 <a href="up.gif"><img class="blackico" src="up.gif" 
   /><img class="whiteico" src="up.gif" /> up.gif</a>
 <br /><a href="up.png"><img class="blackico" src="up.png" 
   /><img class="whiteico" src="up.png" /> up.png</a></td>
<td width="25%">
 <a href="left.gif"><img class="blackico" src="left.gif" 
   /><img class="whiteico" src="left.gif" /> left.gif</a>
 <br /><a href="left.png"><img class="blackico" src="left.png" 
   /><img class="whiteico" src="left.png" /> left.png</a></td>
<td width="25%">
 <a href="right.gif"><img class="blackico" src="right.gif" 
   /><img class="whiteico" src="right.gif" /> right.gif</a>
 <br /><a href="right.png"><img class="blackico" src="right.png" 
   /><img class="whiteico" src="right.png" /> right.png</a></td>
</tr>
<tr><td colspan="4">These can be used to scroll up, down, left and right in a
listing or may be used to denote items in an outline.</td>
</tr>

<tr>
<td width="25%">
 <a href="dir.gif"><img class="blackico" src="dir.gif" 
   /><img class="whiteico" src="dir.gif" /> dir.gif</a>
 <br /><a href="dir.png"><img class="blackico" src="dir.png" 
   /><img class="whiteico" src="dir.png" /> dir.png</a></td>
</tr>
<tr><td colspan="4">Identical to folder.gif (.png) below.</td>
</tr>

<tr>
<td width="25%">
 <a href="diskimg.gif"><img class="blackico" src="diskimg.gif" 
   /><img class="whiteico" src="diskimg.gif" /> diskimg.gif</a>
 <br /><a href="diskimg.png"><img class="blackico" src="diskimg.png" 
   /><img class="whiteico" src="diskimg.png" /> diskimg.png</a></td>
</tr>
<tr><td colspan="4">This can represent floppy disk storage.</td>
</tr>

<tr>
<td width="25%">
 <a href="small/doc.gif"><img class="blackico" src="small/doc.gif" 
   /><img class="whiteico" src="small/doc.gif" /> small/doc.gif</a>
 <br /><a href="small/doc.png"><img class="blackico" src="small/doc.png" 
   /><img class="whiteico" src="small/doc.png" /> small/doc.png</a></td>
</tr>
<tr><td colspan="4">This can represent document files.</td>
</tr>

<tr>
<td width="25%">
 <a href="dvi.gif"><img class="blackico" src="dvi.gif" 
   /><img class="whiteico" src="dvi.gif" /> dvi.gif</a>
 <br /><a href="dvi.png"><img class="blackico" src="dvi.png" 
   /><img class="whiteico" src="dvi.png" /> dvi.png</a></td>
</tr>
<tr><td colspan="4">This can represent DVI files.</td>
</tr>

<tr>
<td width="25%">
 <a href="f.gif"><img class="blackico" src="f.gif" 
   /><img class="whiteico" src="f.gif" /> f.gif</a>
 <br /><a href="f.png"><img class="blackico" src="f.png" 
   /><img class="whiteico" src="f.png" /> f.png</a></td>
</tr>
<tr><td colspan="4">This might represent FORTRAN or Forth source code.</td>
</tr>

<tr>
<td width="25%">
 <a href="folder.gif"><img class="blackico" src="folder.gif" 
   /><img class="whiteico" src="folder.gif" /> folder.gif</a>
 <br /><a href="folder.png"><img class="blackico" src="folder.png" 
   /><img class="whiteico" src="folder.png" /> folder.png</a></td>
<td width="25%">
 <a href="folder.open.gif"><img class="blackico" src="folder.open.gif" 
   /><img class="whiteico" src="folder.open.gif" /> folder.open.gif</a>
 <br /><a href="folder.open.png"><img class="blackico" src="folder.open.png" 
   /><img class="whiteico" src="folder.open.png" /> folder.open.png</a></td>
<td width="25%">
 <a href="folder.sec.gif"><img class="blackico" src="folder.sec.gif" 
   /><img class="whiteico" src="folder.sec.gif" /> folder.sec.gif</a>
 <br /><a href="folder.sec.png"><img class="blackico" src="folder.sec.png" 
   /><img class="whiteico" src="folder.sec.png" /> folder.sec.png</a></td>
</tr>
<tr>
<td width="25%">
 <a href="small/folder.gif"><img class="blackico" src="small/folder.gif" 
   /><img class="whiteico" src="small/folder.gif" /> small/folder.gif</a>
 <br /><a href="small/folder.png"><img class="blackico" src="small/folder.png" 
   /><img class="whiteico" src="small/folder.png" /> small/folder.png</a></td>
<td width="25%">
 <a href="small/folder2.gif"><img class="blackico" src="small/folder2.gif" 
   /><img class="whiteico" src="small/folder2.gif" /> small/folder2.gif</a>
 <br /><a href="small/folder2.png"><img class="blackico" src="small/folder2.png" 
   /><img class="whiteico" src="small/folder2.png" /> small/folder2.png</a></td>
</tr>
<tr><td colspan="4">The folder can represent directories. There is also a
version that can represent secure directories or directories that cannot
be viewed.</td>
</tr>

<tr>
<td width="25%">
 <a href="generic.gif"><img class="blackico" src="generic.gif" 
   /><img class="whiteico" src="generic.gif" /> generic.gif</a>
 <br /><a href="generic.png"><img class="blackico" src="generic.png" 
   /><img class="whiteico" src="generic.png" /> generic.png</a></td>
<td width="25%">
 <a href="generic.sec.gif"><img class="blackico" src="generic.sec.gif" 
   /><img class="whiteico" src="generic.sec.gif" /> generic.sec.gif</a>
 <br /><a href="generic.sec.png"><img class="blackico" src="generic.sec.png" 
   /><img class="whiteico" src="generic.sec.png" /> generic.sec.png</a></td>
<td width="25%">
 <a href="generic.red.gif"><img class="blackico" src="generic.red.gif" 
   /><img class="whiteico" src="generic.red.gif" /> generic.red.gif</a>
 <br /><a href="generic.red.png"><img class="blackico" src="generic.red.png" 
   /><img class="whiteico" src="generic.red.png" /> generic.red.png</a></td>
</tr>
<tr>
<td width="25%">
 <a href="small/generic.gif"><img class="blackico" src="small/generic.gif" 
   /><img class="whiteico" src="small/generic.gif" /> small/generic.gif</a>
 <br /><a href="small/generic.png"><img class="blackico" src="small/generic.png" 
   /><img class="whiteico" src="small/generic.png" /> small/generic.png</a></td>
<td width="25%">
 <a href="small/generic2.gif"><img class="blackico" src="small/generic2.gif" 
   /><img class="whiteico" src="small/generic2.gif" /> small/generic2.gif</a>
 <br /><a href="small/generic2.png"><img class="blackico" src="small/generic2.png" 
   /><img class="whiteico" src="small/generic2.png" /> small/generic2.png</a></td>
<td width="25%">
 <a href="small/generic3.gif"><img class="blackico" src="small/generic3.gif" 
   /><img class="whiteico" src="small/generic3.gif" /> small/generic3.gif</a>
 <br /><a href="small/generic3.png"><img class="blackico" src="small/generic3.png" 
   /><img class="whiteico" src="small/generic3.png" /> small/generic3.png</a></td>
</tr>
<tr><td colspan="4">These can represent generic files, secure files, and
important files, respectively.</td>
</tr>

<tr>
<td width="25%">
 <a href="hand.right.gif"><img class="blackico" src="hand.right.gif" 
   /><img class="whiteico" src="hand.right.gif" /> hand.right.gif</a>
 <br /><a href="hand.right.png"><img class="blackico" src="hand.right.png" 
   /><img class="whiteico" src="hand.right.png" /> hand.right.png</a></td>
<td width="25%">
 <a href="hand.up.gif"><img class="blackico" src="hand.up.gif" 
   /><img class="whiteico" src="hand.up.gif" /> hand.up.gif</a>
 <br /><a href="hand.up.png"><img class="blackico" src="hand.up.png" 
   /><img class="whiteico" src="hand.up.png" /> hand.up.png</a></td>
</tr>
<tr><td colspan="4">These can point out important items (pun intended).</td>
</tr>

<tr>
<td width="25%">
 <a href="image1.gif"><img class="blackico" src="image1.gif" 
   /><img class="whiteico" src="image1.gif" /> image1.gif</a>
 <br /><a href="image1.png"><img class="blackico" src="image1.png" 
   /><img class="whiteico" src="image1.png" /> image1.png</a></td>
<td width="25%">
 <a href="image2.gif"><img class="blackico" src="image2.gif" 
   /><img class="whiteico" src="image2.gif" /> image2.gif</a>
 <br /><a href="image2.png"><img class="blackico" src="image2.png" 
   /><img class="whiteico" src="image2.png" /> image2.png</a></td>
<td width="25%">
 <a href="image3.gif"><img class="blackico" src="image3.gif" 
   /><img class="whiteico" src="image3.gif" /> image3.gif</a>
 <br /><a href="image3.png"><img class="blackico" src="image3.png" 
   /><img class="whiteico" src="image3.png" /> image3.png</a></td>
</tr>
<tr>
<td width="25%">
 <a href="small/image.gif"><img class="blackico" src="small/image.gif" 
   /><img class="whiteico" src="small/image.gif" /> small/image.gif</a>
 <br /><a href="small/image.png"><img class="blackico" src="small/image.png" 
   /><img class="whiteico" src="small/image.png" /> small/image.png</a></td>
<td width="25%">
 <a href="small/image2.gif"><img class="blackico" src="small/image2.gif" 
   /><img class="whiteico" src="small/image2.gif" /> small/image2.gif</a>
 <br /><a href="small/image2.png"><img class="blackico" src="small/image2.png" 
   /><img class="whiteico" src="small/image2.png" /> small/image2.png</a></td>
</tr>
<tr><td colspan="4">These can represent image formats of various types.</td>
</tr>

<tr>
<td width="25%">
 <a href="index.gif"><img class="blackico" src="index.gif" 
   /><img class="whiteico" src="index.gif" /> index.gif</a>
 <br /><a href="index.png"><img class="blackico" src="index.png" 
   /><img class="whiteico" src="index.png" /> index.png</a></td>
<td width="25%">
 <a href="small/index.gif"><img class="blackico" src="small/index.gif" 
   /><img class="whiteico" src="small/index.gif" /> small/index.gif</a>
 <br /><a href="small/index.png"><img class="blackico" src="small/index.png" 
   /><img class="whiteico" src="small/index.png" /> small/index.png</a></td>
</tr>
<tr><td colspan="4">This might represent a WAIS index or search facility.</td>
</tr>

<tr>
<td width="25%">
 <a href="small/key.gif"><img class="blackico" src="small/key.gif" 
   /><img class="whiteico" src="small/key.gif" /> small/key.gif</a>
 <br /><a href="small/key.png"><img class="blackico" src="small/key.png" 
   /><img class="whiteico" src="small/key.png" /> small/key.png</a></td>
</tr>
<tr><td colspan="4">This might represent a locked file.</td>
</tr>

<tr>
<td width="25%">
 <a href="layout.gif"><img class="blackico" src="layout.gif" 
   /><img class="whiteico" src="layout.gif" /> layout.gif</a>
 <br /><a href="layout.png"><img class="blackico" src="layout.png" 
   /><img class="whiteico" src="layout.png" /> layout.png</a></td>
</tr>
<tr><td colspan="4">This might represent files and formats that contain
graphics as well as text layout, such as HTML and PDF files.</td>
</tr>

<tr>
<td width="25%">
 <a href="link.gif"><img class="blackico" src="link.gif" 
   /><img class="whiteico" src="link.gif" /> link.gif</a>
 <br /><a href="link.png"><img class="blackico" src="link.png" 
   /><img class="whiteico" src="link.png" /> link.png</a></td>
</tr>
<tr><td colspan="4">This might represent files that are symbolic links.</td>
</tr>

<tr>
<td width="25%">
 <a href="movie.gif"><img class="blackico" src="movie.gif" 
   /><img class="whiteico" src="movie.gif" /> movie.gif</a>
 <br /><a href="movie.png"><img class="blackico" src="movie.png" 
   /><img class="whiteico" src="movie.png" /> movie.png</a></td>
<td width="25%">
 <a href="small/movie.gif"><img class="blackico" src="small/movie.gif" 
   /><img class="whiteico" src="small/movie.gif" /> small/movie.gif</a>
 <br /><a href="small/movie.png"><img class="blackico" src="small/movie.png" 
   /><img class="whiteico" src="small/movie.png" /> small/movie.png</a></td>
</tr>
<tr><td colspan="4">This can represent various movie formats.</td>
</tr>

<tr>
<td width="25%">
 <a href="p.gif"><img class="blackico" src="p.gif" 
   /><img class="whiteico" src="p.gif" /> p.gif</a>
 <br /><a href="p.png"><img class="blackico" src="p.png" 
   /><img class="whiteico" src="p.png" /> p.png</a></td>
</tr>
<tr><td colspan="4">This may stand for Perl or Python source code.</td>
</tr>

<tr>
<td width="25%">
 <a href="pie0.gif"><img class="blackico" src="pie0.gif" 
   /><img class="whiteico" src="pie0.gif" /> pie0.gif</a>
 <br /><a href="pie1.png"><img class="blackico" src="pie0.png" 
   /><img class="whiteico" src="pie0.png" /> pie0.png</a></td>
<td width="25%">
 <a href="pie1.gif"><img class="blackico" src="pie1.gif" 
   /><img class="whiteico" src="pie1.gif" /> pie1.gif</a>
 <br /><a href="pie1.png"><img class="blackico" src="pie1.png" 
   /><img class="whiteico" src="pie1.png" /> pie1.png</a></td>
<td width="25%">
 <a href="pie2.gif"><img class="blackico" src="pie2.gif" 
   /><img class="whiteico" src="pie2.gif" /> pie2.gif</a>
 <br /><a href="pie2.png"><img class="blackico" src="pie2.png" 
   /><img class="whiteico" src="pie2.png" /> pie2.png</a></td>
<td width="25%">
 <a href="pie3.gif"><img class="blackico" src="pie3.gif" 
   /><img class="whiteico" src="pie3.gif" /> pie3.gif</a>
 <br /><a href="pie3.png"><img class="blackico" src="pie3.png" 
   /><img class="whiteico" src="pie3.png" /> pie3.png</a></td>
</tr><tr>
<td width="25%">
 <a href="pie4.gif"><img class="blackico" src="pie4.gif" 
   /><img class="whiteico" src="pie4.gif" /> pie4.gif</a>
 <br /><a href="pie4.png"><img class="blackico" src="pie4.png" 
   /><img class="whiteico" src="pie4.png" /> pie4.png</a></td>
<td width="25%">
 <a href="pie5.gif"><img class="blackico" src="pie5.gif" 
   /><img class="whiteico" src="pie5.gif" /> pie5.gif</a>
 <br /><a href="pie5.png"><img class="blackico" src="pie5.png" 
   /><img class="whiteico" src="pie5.png" /> pie5.png</a></td>
<td width="25%">
 <a href="pie6.gif"><img class="blackico" src="pie6.gif" 
   /><img class="whiteico" src="pie6.gif" /> pie6.gif</a>
 <br /><a href="pie6.png"><img class="blackico" src="pie6.png" 
   /><img class="whiteico" src="pie6.png" /> pie6.png</a></td>
<td width="25%">
 <a href="pie7.gif"><img class="blackico" src="pie7.gif" 
   /><img class="whiteico" src="pie7.gif" /> pie7.gif</a>
 <br /><a href="pie7.png"><img class="blackico" src="pie7.png" 
   /><img class="whiteico" src="pie7.png" /> pie7.png</a></td>
</tr><tr>
<td width="25%">
 <a href="pie8.gif"><img class="blackico" src="pie8.gif" 
   /><img class="whiteico" src="pie8.gif" /> pie8.gif</a>
 <br /><a href="pie8.png"><img class="blackico" src="pie8.png" 
   /><img class="whiteico" src="pie8.png" /> pie8.png</a></td>
</tr>
<tr><td colspan="4">These icons can be used in applications where a list of
documents is returned from a search. The little pie chart images
can denote how relevant the documents may be to your search query.</td>
</tr>

<tr>
<td width="25%">
 <a href="patch.gif"><img class="blackico" src="patch.gif" 
   /><img class="whiteico" src="patch.gif" /> patch.gif</a>
 <br /><a href="patch.png"><img class="blackico" src="patch.png" 
   /><img class="whiteico" src="patch.png" /> patch.png</a></td>
<td width="25%">
 <a href="small/patch.gif"><img class="blackico" src="small/patch.gif" 
   /><img class="whiteico" src="small/patch.gif" /> small/patch.gif</a>
 <br /><a href="small/patch.png"><img class="blackico" src="small/patch.png" 
   /><img class="whiteico" src="small/patch.png" /> small/patch.png</a></td>
</tr>
<tr><td colspan="4">This may stand for patches and diff files.</td>
</tr>

<tr>
<td width="25%">
 <a href="portal.gif"><img class="blackico" src="portal.gif" 
   /><img class="whiteico" src="portal.gif" /> portal.gif</a>
 <br /><a href="portal.png"><img class="blackico" src="portal.png" 
   /><img class="whiteico" src="portal.png" /> portal.png</a></td>
</tr>
<tr><td colspan="4">This might be a link to an online service or a 3D
world.</td>
</tr>

<tr>
<td width="25%">
 <a href="pdf.gif"><img class="blackico" src="pdf.gif" 
   /><img class="whiteico" src="pdf.gif" /> pdf.gif</a>
 <br /><a href="pdf.png"><img class="blackico" src="pdf.png" 
   /><img class="whiteico" src="pdf.png" /> pdf.png</a></td>
<td width="25%">
 <a href="ps.gif"><img class="blackico" src="ps.gif" 
   /><img class="whiteico" src="ps.gif" /> ps.gif</a>
 <br /><a href="ps.png"><img class="blackico" src="ps.png" 
   /><img class="whiteico" src="ps.png" /> ps.png</a></td>
<td width="25%">
 <a href="quill.gif"><img class="blackico" src="quill.gif" 
   /><img class="whiteico" src="quill.gif" /> quill.gif</a>
 <br /><a href="quill.png"><img class="blackico" src="quill.png" 
   /><img class="whiteico" src="quill.png" /> quill.png</a></td>
<td width="25%">
 <a href="small/ps.gif"><img class="blackico" src="small/ps.gif" 
   /><img class="whiteico" src="small/ps.gif" /> small/ps.gif</a>
 <br /><a href="small/ps.png"><img class="blackico" src="small/ps.png" 
   /><img class="whiteico" src="small/ps.png" /> small/ps.png</a></td>
</tr>
<tr><td colspan="4">These may represent PDF and PostScript files.</td>
</tr>

<tr>
<td width="25%">
 <a href="screw1.gif"><img class="blackico" src="screw1.gif" 
   /><img class="whiteico" src="screw1.gif" /> screw1.gif</a>
 <br /><a href="screw1.png"><img class="blackico" src="screw1.png" 
   /><img class="whiteico" src="screw1.png" /> screw1.png</a></td>
<td width="25%">
 <a href="screw2.gif"><img class="blackico" src="screw2.gif" 
   /><img class="whiteico" src="screw2.gif" /> screw2.gif</a>
 <br /><a href="screw2.png"><img class="blackico" src="screw2.png" 
   /><img class="whiteico" src="screw2.png" /> screw2.png</a></td>
</tr>
<tr><td colspan="4">These may represent CAD or engineering data and
formats.</td>
</tr>

<tr>
<td width="25%">
 <a href="script.gif"><img class="blackico" src="script.gif" 
   /><img class="whiteico" src="script.gif" /> script.gif</a>
 <br /><a href="script.png"><img class="blackico" src="script.png" 
   /><img class="whiteico" src="script.png" /> script.png</a></td>
</tr>
<tr><td colspan="4">This can represent any of various interpreted languages,
such as Perl, python, TCL, and shell scripts, as well as server configuration
files.</td>
</tr>

<tr>
<td width="25%">
 <a href="sound1.gif"><img class="blackico" src="sound1.gif" 
   /><img class="whiteico" src="sound1.gif" /> sound1.gif</a>
 <br /><a href="sound1.png"><img class="blackico" src="sound1.png" 
   /><img class="whiteico" src="sound1.png" /> sound1.png</a></td>
<td width="25%">
 <a href="sound2.gif"><img class="blackico" src="sound2.gif" 
   /><img class="whiteico" src="sound2.gif" /> sound2.gif</a>
 <br /><a href="sound2.png"><img class="blackico" src="sound2.png" 
   /><img class="whiteico" src="sound2.png" /> sound2.png</a></td>
<td width="25%">
 <a href="small/sound.gif"><img class="blackico" src="small/sound.gif" 
   /><img class="whiteico" src="small/sound.gif" /> small/sound.gif</a>
 <br /><a href="small/sound.png"><img class="blackico" src="small/sound.png" 
   /><img class="whiteico" src="small/sound.png" /> small/sound.png</a></td>
<td width="25%">
 <a href="small/sound2.gif"><img class="blackico" src="small/sound2.gif" 
   /><img class="whiteico" src="small/sound2.gif" /> small/sound2.gif</a>
 <br /><a href="small/sound2.png"><img class="blackico" src="small/sound2.png" 
   /><img class="whiteico" src="small/sound2.png" /> small/sound2.png</a></td>
</tr>
<tr><td colspan="4">These can represent sound files.</td>
</tr>

<tr>
<td width="25%">
 <a href="sphere1.gif"><img class="blackico" src="sphere1.gif" 
   /><img class="whiteico" src="sphere1.gif" /> sphere1.gif</a>
 <br /><a href="sphere1.png"><img class="blackico" src="sphere1.png" 
   /><img class="whiteico" src="sphere1.png" /> sphere1.png</a></td>
<td width="25%">
 <a href="sphere2.gif"><img class="blackico" src="sphere2.gif" 
   /><img class="whiteico" src="sphere2.gif" /> sphere2.gif</a>
 <br /><a href="sphere2.png"><img class="blackico" src="sphere2.png" 
   /><img class="whiteico" src="sphere2.png" /> sphere2.png</a></td>
</tr>
<tr><td colspan="4">These can represent 3D worlds or rendering applications and
formats.</td>
</tr>

<tr>
<td width="25%">
 <a href="tar.gif"><img class="blackico" src="tar.gif" 
   /><img class="whiteico" src="tar.gif" /> tar.gif</a>
 <br /><a href="tar.png"><img class="blackico" src="tar.png" 
   /><img class="whiteico" src="tar.png" /> tar.png</a></td>
<td width="25%">
 <a href="small/tar.gif"><img class="blackico" src="small/tar.gif" 
   /><img class="whiteico" src="small/tar.gif" /> small/tar.gif</a>
 <br /><a href="small/tar.png"><img class="blackico" src="small/tar.png" 
   /><img class="whiteico" src="small/tar.png" /> small/tar.png</a></td>
</tr>
<tr><td colspan="4">This can represent TAR archive files.</td>
</tr>

<tr>
<td width="25%">
 <a href="tex.gif"><img class="blackico" src="tex.gif" 
   /><img class="whiteico" src="tex.gif" /> tex.gif</a>
 <br /><a href="tex.png"><img class="blackico" src="tex.png" 
   /><img class="whiteico" src="tex.png" /> tex.png</a></td>
</tr>
<tr><td colspan="4">This can represent TeX files.</td>
</tr>

<tr>
<td width="25%">
 <a href="text.gif"><img class="blackico" src="text.gif" 
   /><img class="whiteico" src="text.gif" /> text.gif</a>
 <br /><a href="text.png"><img class="blackico" src="text.png" 
   /><img class="whiteico" src="text.png" /> text.png</a></td>
<td width="25%">
 <a href="small/text.gif"><img class="blackico" src="small/text.gif" 
   /><img class="whiteico" src="small/text.gif" /> small/text.gif</a>
 <br /><a href="small/text.png"><img class="blackico" src="small/text.png" 
   /><img class="whiteico" src="small/text.png" /> small/text.png</a></td>
</tr>
<tr><td colspan="4">This can represent generic (plain) text files.</td>
</tr>

<tr>
<td width="25%">
 <a href="transfer.gif"><img class="blackico" src="transfer.gif" 
   /><img class="whiteico" src="transfer.gif" /> transfer.gif</a>
 <br /><a href="transfer.png"><img class="blackico" src="transfer.png" 
   /><img class="whiteico" src="transfer.png" /> transfer.png</a></td>
<td width="25%">
 <a href="small/transfer.gif"><img class="blackico" src="small/transfer.gif" 
   /><img class="whiteico" src="small/transfer.gif" /> small/transfer.gif</a>
 <br /><a href="small/transfer.png"><img class="blackico" src="small/transfer.png" 
   /><img class="whiteico" src="small/transfer.png" /> small/transfer.png</a></td>
</tr>
<tr><td colspan="4">This can represent FTP transfers or uploads/downloads.</td>
</tr>

<tr>
<td width="25%">
 <a href="unknown.gif"><img class="blackico" src="unknown.gif" 
   /><img class="whiteico" src="unknown.gif" /> unknown.gif</a>
 <br /><a href="unknown.png"><img class="blackico" src="unknown.png" 
   /><img class="whiteico" src="unknown.png" /> unknown.png</a></td>
<td width="25%">
 <a href="small/unknown.gif"><img class="blackico" src="small/unknown.gif" 
   /><img class="whiteico" src="small/unknown.gif" /> small/unknown.gif</a>
 <br /><a href="small/unknown.png"><img class="blackico" src="small/unknown.png" 
   /><img class="whiteico" src="small/unknown.png" /> small/unknown.png</a></td>
</tr>
<tr><td colspan="4">This may represent a file of an unknown type.</td>
</tr>

<tr>
<td width="25%">
 <a href="uu.gif"><img class="blackico" src="uu.gif" 
   /><img class="whiteico" src="uu.gif" /> uu.gif</a>
 <br /><a href="uu.png"><img class="blackico" src="uu.png" 
   /><img class="whiteico" src="uu.png" /> uu.png</a></td>
<td width="25%">
 <a href="uuencoded.gif"><img class="blackico" src="uuencoded.gif" 
   /><img class="whiteico" src="uuencoded.gif" /> uuencoded.gif</a>
 <br /><a href="uuencoded.png"><img class="blackico" src="uuencoded.png" 
   /><img class="whiteico" src="uuencoded.png" /> uuencoded.png</a></td>
<td width="25%">
 <a href="small/uu.gif"><img class="blackico" src="small/uu.gif" 
   /><img class="whiteico" src="small/uu.gif" /> small/uu.gif</a>
 <br /><a href="small/uu.png"><img class="blackico" src="small/uu.png" 
   /><img class="whiteico" src="small/uu.png" /> small/uu.png</a></td>
</tr>
<tr><td colspan="4">This can stand for uuencoded data.</td>
</tr>

<tr>
<td width="25%">
 <a href="world1.gif"><img class="blackico" src="world1.gif" 
   /><img class="whiteico" src="world1.gif" /> world1.gif</a>
 <br /><a href="world1.png"><img class="blackico" src="world1.png" 
   /><img class="whiteico" src="world1.png" /> world1.png</a></td>
<td width="25%">
 <a href="world2.gif"><img class="blackico" src="world2.gif" 
   /><img class="whiteico" src="world2.gif" /> world2.gif</a>
 <br /><a href="world2.png"><img class="blackico" src="world2.png" 
   /><img class="whiteico" src="world2.png" /> world2.png</a></td>
</tr>
<tr><td colspan="4">These can represent 3D worlds or other 3D formats.</td>
</tr>
</table>
</body>
</html>

<?xml version="1.0" encoding="utf-8"?>

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<description>
This build file contains all operations that are necessary for building
the Apache httpd documentation. It is called by invoking build.bat (Win32)
or build.sh (/bin/sh systems) with a target argument (full list below).
For example, if you want to build the Japanese HTML files, type:

  ./build.sh ja

Some targets have additional requirements:

* 'metafiles' and 'modulelists' need perl in PATH. (It's checked automatically
  and skipped if perl is not available)

* 'chm-foo' targets need:
  - the HTML Help compiler in PATH (or modify this build file). The
    compiler (hhc.exe) is part of the HTML Help Workshop which is freely
    available and can be downloaded from
    http://msdn.microsoft.com/library/en-us/htmlhelp/html/hwMicrosoftHTMLHelpDownloads.asp
  - The appropriate locale (e.g. Japanese) before invoking hhc.exe. Otherwise
    the compiler is not able to build the fulltext search index correctly and
    the TOC may be garbled, too. In particular:
    + chm-de: German (Germany), sorting order: dictionary
    + chm-en: English (USA)
    + chm-es: Spanish (Spain), sorting order: international
    + chm-ja: Japanese
    + chm-ko: Korean
    + chm-tr: Turkish

</description>

 Apache HTTP Server 2.2 Limited OpenSSL Distribution

 This binary installation of OpenSSL is a limited distribution of the
 files derived from the OpenSSL project:

   LICENSE.txt (includes openssl LICENSE)
   OPENSSL-NEWS.txt
   OPENSSL-README.txt
   conf\openssl.cnf
   bin\libeay32.dll
   bin\ssleay32.dll
   bin\openssl.exe

 These are the minimal libraries and tools required to use mod_ssl as 
 distributed with Apache HTTP Server version 2.2.  No library link files, 
 headers or sources are distributed with this binary distribution.  Please 
 refer to the <http://www.openssl.org/> site for complete source or binary 
 distributions.

 These OpenSSL binaries were built for distribution from the U.S. without 
 support for the patented encryption methods IDEA, MDC-2 or RC5.

 The Apache HTTP Project only supports the binary distribution of these files
 and development of the mod_ssl module.  We cannot provide support assistance
 for using or configuring the OpenSSL package or these modules.  Please refer
 all installation and configuration questions to the appropriate forum,
 such as the user supported lists, <http://httpd.apache.org/userslist.html> 
 the Apache HTTP Server user's list or <http://www.openssl.org/support/> the
 OpenSSL support page.

--------------------------------------------------------------------------------


 OpenSSL 0.9.8u 12 Mar 2012

 Copyright (c) 1998-2011 The OpenSSL Project
 Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson
 All rights reserved.

 DESCRIPTION
 -----------

 The OpenSSL Project is a collaborative effort to develop a robust,
 commercial-grade, fully featured, and Open Source toolkit implementing the
 Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1)
 protocols as well as a full-strength general purpose cryptography library.
 The project is managed by a worldwide community of volunteers that use the
 Internet to communicate, plan, and develop the OpenSSL toolkit and its
 related documentation.

 OpenSSL is based on the excellent SSLeay library developed from Eric A. Young
 and Tim J. Hudson.  The OpenSSL toolkit is licensed under a dual-license (the
 OpenSSL license plus the SSLeay license) situation, which basically means
 that you are free to get and use it for commercial and non-commercial
 purposes as long as you fulfill the conditions of both licenses.

 OVERVIEW
 --------

 The OpenSSL toolkit includes:

 libssl.a:
     Implementation of SSLv2, SSLv3, TLSv1 and the required code to support
     both SSLv2, SSLv3 and TLSv1 in the one server and client.

 libcrypto.a:
     General encryption and X.509 v1/v3 stuff needed by SSL/TLS but not
     actually logically part of it. It includes routines for the following:

     Ciphers
        libdes - EAY's libdes DES encryption package which was floating
                 around the net for a few years, and was then relicensed by
                 him as part of SSLeay.  It includes 15 'modes/variations'
                 of DES (1, 2 and 3 key versions of ecb, cbc, cfb and ofb;
                 pcbc and a more general form of cfb and ofb) including desx
                 in cbc mode, a fast crypt(3), and routines to read
                 passwords from the keyboard.
        RC4 encryption,
        RC2 encryption      - 4 different modes, ecb, cbc, cfb and ofb.
        Blowfish encryption - 4 different modes, ecb, cbc, cfb and ofb.
        IDEA encryption     - 4 different modes, ecb, cbc, cfb and ofb.

     Digests
        MD5 and MD2 message digest algorithms, fast implementations,
        SHA (SHA-0) and SHA-1 message digest algorithms,
        MDC2 message digest. A DES based hash that is popular on smart cards.

     Public Key
        RSA encryption/decryption/generation.
            There is no limit on the number of bits.
        DSA encryption/decryption/generation.
            There is no limit on the number of bits.
        Diffie-Hellman key-exchange/key generation.
            There is no limit on the number of bits.

     X.509v3 certificates
        X509 encoding/decoding into/from binary ASN1 and a PEM
             based ASCII-binary encoding which supports encryption with a
             private key.  Program to generate RSA and DSA certificate
             requests and to generate RSA and DSA certificates.

     Systems
        The normal digital envelope routines and base64 encoding.  Higher
        level access to ciphers and digests by name.  New ciphers can be
        loaded at run time.  The BIO io system which is a simple non-blocking
        IO abstraction.  Current methods supported are file descriptors,
        sockets, socket accept, socket connect, memory buffer, buffering, SSL
        client/server, file pointer, encryption, digest, non-blocking testing
        and null.

     Data structures
        A dynamically growing hashing system
        A simple stack.
        A Configuration loader that uses a format similar to MS .ini files.

 openssl:
     A command line tool that can be used for:
        Creation of RSA, DH and DSA key parameters
        Creation of X.509 certificates, CSRs and CRLs
        Calculation of Message Digests
        Encryption and Decryption with Ciphers
        SSL/TLS Client and Server Tests
        Handling of S/MIME signed or encrypted mail


 PATENTS
 -------

 Various companies hold various patents for various algorithms in various
 locations around the world. _YOU_ are responsible for ensuring that your use
 of any algorithms is legal by checking if there are any patents in your
 country.  The file contains some of the patents that we know about or are
 rumored to exist. This is not a definitive list.

 RSA Security holds software patents on the RC5 algorithm.  If you
 intend to use this cipher, you must contact RSA Security for
 licensing conditions. Their web page is http://www.rsasecurity.com/.

 RC4 is a trademark of RSA Security, so use of this label should perhaps
 only be used with RSA Security's permission.

 The IDEA algorithm is patented by Ascom in Austria, France, Germany, Italy,
 Japan, the Netherlands, Spain, Sweden, Switzerland, UK and the USA.  They
 should be contacted if that algorithm is to be used; their web page is
 http://www.ascom.ch/.

 NTT and Mitsubishi have patents and pending patents on the Camellia
 algorithm, but allow use at no charge without requiring an explicit
 licensing agreement: http://info.isl.ntt.co.jp/crypt/eng/info/chiteki.html

 INSTALLATION
 ------------

 To install this package under a Unix derivative, read the INSTALL file.  For
 a Win32 platform, read the INSTALL.W32 file.  For OpenVMS systems, read
 INSTALL.VMS.

 Read the documentation in the doc/ directory.  It is quite rough, but it
 lists the functions; you will probably have to look at the code to work out
 how to use them. Look at the example programs.

 PROBLEMS
 --------

 For some platforms, there are some known problems that may affect the user
 or application author.  We try to collect those in doc/PROBLEMS, with current
 thoughts on how they should be solved in a future of OpenSSL.

 SUPPORT
 -------

 See the OpenSSL website www.openssl.org for details of how to obtain
 commercial technical support.

 If you have any problems with OpenSSL then please take the following steps
 first:

    - Download the current snapshot from ftp://ftp.openssl.org/snapshot/
      to see if the problem has already been addressed
    - Remove ASM versions of libraries
    - Remove compiler optimisation flags

 If you wish to report a bug then please include the following information in
 any bug report:

    - On Unix systems:
        Self-test report generated by 'make report'
    - On other systems:
        OpenSSL version: output of 'openssl version -a'
        OS Name, Version, Hardware platform
        Compiler Details (name, version)
    - Application Details (name, version)
    - Problem Description (steps that will reproduce the problem, if known)
    - Stack Traceback (if the application dumps core)

 Report the bug to the OpenSSL project via the Request Tracker
 (http://www.openssl.org/support/rt.html) by mail to:

    openssl-bugs@openssl.org

 Note that the request tracker should NOT be used for general assistance
 or support queries. Just because something doesn't work the way you expect
 does not mean it is necessarily a bug in OpenSSL.

 Note that mail to openssl-bugs@openssl.org is recorded in the publicly
 readable request tracker database and is forwarded to a public
 mailing list. Confidential mail may be sent to openssl-security@openssl.org
 (PGP key available from the key servers).

 HOW TO CONTRIBUTE TO OpenSSL
 ----------------------------

 Development is coordinated on the openssl-dev mailing list (see
 http://www.openssl.org for information on subscribing). If you
 would like to submit a patch, send it to openssl-bugs@openssl.org with
 the string "[PATCH]" in the subject. Please be sure to include a
 textual explanation of what your patch does.

 If you are unsure as to whether a feature will be useful for the general
 OpenSSL community please discuss it on the openssl-dev mailing list first.
 Someone may be already working on the same thing or there may be a good
 reason as to why that feature isn't implemented.

 Patches should be as up to date as possible, preferably relative to the
 current CVS or the last snapshot. They should follow the coding style of
 OpenSSL and compile without warnings. Some of the core team developer targets
 can be used for testing purposes, (debug-steve64, debug-geoff etc). OpenSSL
 compiles on many varied platforms: try to ensure you only use portable
 features.

 Note: For legal reasons, contributions from the US can be accepted only
 if a TSU notification and a copy of the patch are sent to crypt@bis.doc.gov
 (formerly BXA) with a copy to the ENC Encryption Request Coordinator;
 please take some time to look at
    http://www.bis.doc.gov/Encryption/PubAvailEncSourceCodeNofify.html [sic]
 and
    http://w3.access.gpo.gov/bis/ear/pdf/740.pdf (EAR Section 740.13(e))
 for the details. If "your encryption source code is too large to serve as
 an email attachment", they are glad to receive it by fax instead; hope you
 have a cheap long-distance plan.

 Our preferred format for changes is "diff -u" output. You might
 generate it like this:

 # cd openssl-work
 # [your changes]
 # ./Configure dist; make clean
 # cd ..
 # diff -ur openssl-orig openssl-work > mydiffs.patch


New version of APR
------------------

Note that the included APR is now version 1.3, which adds several
subtle changes in the behavior of file handling, pipes and process
creation.  Most importantly, there is finer control over the handles
inherited by processes, so the mod_fastcgi or mod_fcgid modules must 
be updated for httpd-2.2.9 to run correctly on Windows.

Most other third party modules are unaffected by this change.


Connecting to databases
-----------------------

Five SQL driver connectors (dbd) are provided in the binary distribution, 
for MySQL, SQLite3, PostgreSQL, Oracle and ODBC.  Two keyed database
connectors are provided, SDBM and Oracle Berkeley DB.  All but SDBM will
require you to install the corresponding client driver libraries.

The sqlitedll.zip binary (containing sqlite3.dll) can be obtained from
  http://www.sqlite.org/download.html
note that this binary was built with version 3.6.16 (earlier and later
version 3.6 driver .dll's may work.)  The lib binding is created using
LIB /DEF:sqlite3.def and using the .h files from the _amalgamation zip.

The Oracle Instant Client - Basic driver can be obtained from
  http://www.oracle.com/technology/software/tech/oci/instantclient/htdocs/winsoft.html
and note that this binary was built against version 11.1.0.6.0,
other version 11.1 drivers may work.

The PostgreSQL client binaries may be obtained from
  http://www.postgresql.org/ftp/binary/v8.3.1/win32/
and note that this binary was built against version 8.3.1-1, and
again it may work with other 8.1 version .dll's.

The MySQL client binaries ("Essentials" is sufficient) is obtained from 
  http://dev.mysql.com/downloads/mysql/5.1.html#win32
but note that once using the MySQL database, the applicable exception 
clause demands copy-left terms on the resulting combination.

The Oracle Berkeley DB binaries may be obtained from 
  http://www.oracle.com/technology/software/products/berkeley-db/index.html
but note that once using the Berkeley DB code, the Oracle license
demands copy-left terms on the resulting combination.

NOTE: For whichever database backend(s) you configure, the corresponding
driver .dll's must be in your PATH to test from console mode, and in the 
systemwide path if used for a service such as Apache httpd.

The FreeTDS driver is not built on Windows, since the Microsoft ODBC is 
provided instead.  The sqlite2 and ndbm drivers are not used on Windows, 
as there is no point in legacy support of these old versions.  The ASF
does not distribute binary builds of the gdbm binding.



                          Apache HTTP Server

  What is it?
  -----------

  The Apache HTTP Server is a powerful and flexible HTTP/1.1 compliant
  web server.  Originally designed as a replacement for the NCSA HTTP
  Server, it has grown to be the most popular web server on the
  Internet.  As a project of the Apache Software Foundation, the
  developers aim to collaboratively develop and maintain a robust,
  commercial-grade, standards-based server with freely available
  source code.

  The Latest Version
  ------------------

  Details of the latest version can be found on the Apache HTTP
  server project page under <http://httpd.apache.org/>.

  Documentation
  -------------

  The documentation available as of the date of this release is
  included in HTML format in the docs/manual/ directory.  The most
  up-to-date documentation for the 2.2.x releases can be found at
  <http://httpd.apache.org/docs/2.2/>.

  Installation
  ------------

  Please see the file called INSTALL.  Platform specific notes can be
  found in README.platforms.

  Licensing
  ---------

  Please see the file called LICENSE.

  Cryptographic Software Notice
  -----------------------------

  This distribution may include software that has been designed for use
  with cryptographic software.  The country in which you currently reside
  may have restrictions on the import, possession, use, and/or re-export
  to another country, of encryption software.  BEFORE using any encryption
  software, please check your country's laws, regulations and policies
  concerning the import, possession, or use, and re-export of encryption
  software, to see if this is permitted.  See <http://www.wassenaar.org/>
  for more information.

  The U.S. Government Department of Commerce, Bureau of Industry and
  Security (BIS), has classified this software as Export Commodity 
  Control Number (ECCN) 5D002.C.1, which includes information security
  software using or performing cryptographic functions with asymmetric
  algorithms.  The form and manner of this Apache Software Foundation
  distribution makes it eligible for export under the License Exception
  ENC Technology Software Unrestricted (TSU) exception (see the BIS 
  Export Administration Regulations, Section 740.13) for both object 
  code and source code.

  The following provides more details on the included files that
  may be subject to export controls on cryptographic software:

    Apache httpd 2.0 and later versions include the mod_ssl module under
       modules/ssl/
    for configuring and listening to connections over SSL encrypted
    network sockets by performing calls to a general-purpose encryption
    library, such as OpenSSL or the operating system's platform-specific
    SSL facilities.

    In addition, some versions of apr-util provide an abstract interface
    for SSL encrypted network sockets in the files under the directory
       srclib/apr-util/ssl/
    that makes use of a general-purpose encryption library, such as
    OpenSSL or the operating system's platform-specific SSL facilities.
    Apache httpd currently does not use that apr-util interface.

    Some object code distributions of Apache httpd, indicated with the
    word "crypto" in the package name, may include object code for the
    OpenSSL encryption library as distributed in open source form from
    <http://www.openssl.org/source/>.

  The above files are optional and may be removed if the cryptographic
  functionality is not desired or needs to be excluded from redistribution.
  Distribution packages of Apache httpd that include the word "nossl"
  in the package name have been created without the above files and are
  therefore not subject to this notice.

  Contacts
  --------

     o If you want to be informed about new code releases, bug fixes,
       security fixes, general news and information about the Apache server
       subscribe to the apache-announce mailing list as described under
       <http://httpd.apache.org/lists.html#http-announce>

     o If you want freely available support for running Apache please join the
       Apache user community by subscribing to Users Mailing List at
       <http://httpd.apache.org/userslist.html> or one of the following
       USENET newsgroups:
         comp.infosystems.www.servers.unix
         comp.infosystems.www.servers.ms-windows
       Also available at: 
         <http://groups.google.com/groups?group=comp.infosystems.www.servers>

     o If you want commercial support for running Apache please contact
       one of the companies and contractors which are listed at
       <http://www.apache.org/info/support.cgi>

     o If you have a concrete bug report for Apache please go to the
       Apache Group Bug Database and submit your report:
       <http://httpd.apache.org/bug_report.html>

     o If you want to participate in actively developing Apache please
       subscribe to the `dev@httpd.apache.org' mailing list as described at
       <http://httpd.apache.org/lists.html#http-dev>

  Acknowledgments
  ----------------

  We wish to acknowledge the following copyrighted works that
  make up portions of the Apache software:

  Portions of this software were developed at the National Center
  for Supercomputing Applications (NCSA) at the University of
  Illinois at Urbana-Champaign.

  This software contains code derived from the RSA Data Security
  Inc. MD5 Message-Digest Algorithm, including various
  modifications by Spyglass Inc., Carnegie Mellon University, and
  Bell Communications Research, Inc (Bellcore).

  Regular expression support is provided by the PCRE library package, which
  is open source software, written by Philip Hazel, and copyright by the
  University of Cambridge, England.  The original software is available from
     ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/

  Apache 2 relies heavily on the use of autoconf and libtool to provide
  a build environment.

Installing GitPHP

Minimum requirements:
git
diff
Apache (or other php-compatible webserver)
PHP


To begin, you need to have your git repositories set up in a directory that the
webserver can access.  They can be in subdirectories within that, but you will
need a base directory to tell GitPHP where to look for repositories.  These
must be bare repositories - for those who don't know, the directory of source
code you have is your working copy, and the .git hidden directory inside of that
is the actual repository, which is what GitPHP reads.  There are files in here
like HEAD, COMMIT_EDITMSG, description, etc.

You can make a copy of your bare repository by running:

cd myproject
cp -r .git /gitprojects/myproject.git

Or, a new bare repository can be initialized with:

mkdir mybareproject
cd mybareproject
git-init --bare

Once you have your projects in a directory, something like:

/gitprojects/project1.git
/gitprojects/project2.git
/gitprojects/subdir/project3.git

You can begin setting up GitPHP.  Put the GitPHP files in a place
readable by your webserver.  You will need to change the permissions of the
templates_c directory to be writable by your webserver.  This can be done
by either:

chown apache:apache templates_c
(assuming your webserver runs as user/group apache - this is the better way)

or:

chmod 777 templates_c

Then, you will need to set up your config file.  In the config directory,
copy the example config file, gitphp.conf.php.example, to gitphp.conf.php.

The only required setting is the 'projectroot' setting, which specifies
where your git repositories are - following the previous example, it would
be set up as "/gitprojects/".

All the available config options and their default settings are documented
in gitphp.conf.defaults.php.  If you want to change any of the settings,
just copy the config option from the defaults file to your normal config
and change the setting.  Some GitPHP features are disabled by default
since they require setting config options a certain way, so if you don't
look through the config file you won't get those features.

During upgrades, your existing config file will not be overwritten.  However
new options or features may be added to the defaults file, so you may want
to check for new options every now and then.

If you want to set up categories for your projects, or use a text file
with a list of projects, you need to set up the $git_projects array in
projects.conf.php.  Copy projects.conf.php.example to projects.conf.php
and edit it - the definition and structure of this is explained in
the config file.

If you want to edit the text header that appears above the project list on the
home page, create templates/hometext.tpl with your header content.


[Caching]

To turn on caching, set the 'cache' config item to true.  Gitphp will cache
every page's output, including plaintext output and binary output such as
blobs and snapshots, for the number of seconds specified in the
'cachelifetime' config key.  You will need to set the "cache" directory
writable by the server, as with the templates_c directory above.

Gitphp can also cache immutable objects from the git repository, by setting
'objectcache' to true.  These cached objects can be reused on multiple
pages.  The 'objectcachelifetime' config key controls how long they are
cached.  Since these objects don't ever change in the git repository, they
can be cached for significantly longer than templates can (or in theory,
forever).  This option can be used on its own, or in addition to the regular
template 'cache' option for the maximum benefit.  This option also requires
the "cache" directory writable by the server, as above.

The 'cacheexpire' key is recommended for most users.  With this option on,
gitphp will attempt to keep the cache in sync by automatically expiring any
cached pages that are older than the most recent commit, on any branch.
It is a slight performance hit to make this check, but the performance hit
is tiny compared to the gain you get from turning on caching.  It will
avoid situations where users are getting a cached version of a page that
isn't up to date and doesn't reflect the most recent commit, or worse,
pages that have been cached at different times and show data from both
before and after a commit (eg page 1 of the shortlog shows the most recent
commit but page 1 of the log was cached a while ago and doesn't show the
most recent commit).

However, if your project is so active that commits are constantly coming in
and invalidating the cache, rendering it useless, it would be better to
turn cache expiration off and just set a really short cache lifetime of
a few seconds.  In other words:

Most users:
* Set 'cache' to TRUE
* Set 'objectcache' to TRUE
* Set 'cacheexpire' to TRUE (this is the default)
* Set 'cachelifetime' high, 3600 seconds (1 hour) or more. (3600 is the default)
* Set 'objectcachelifetime' even higher, eg 86400 seconds or more.  (86400 is
  the default)

These are the defaults.

Extremely active projects, with commits every few seconds, or advanced
users that know exactly how often commits come in and want to save
the performance of the expiration check:
* Set 'cache' to TRUE
* Set 'objectcache' to TRUE
* Set 'cacheexpire' to FALSE
* Set 'cachelifetime' low, between 5-10 seconds.
* Set 'objectcachelifetime' high, 86400 seconds or more.  (86400 is the default)

If you ever run into problems with your cache not syncing correctly, or
showing out of date information, you can use the 'expire' action to force
expiration of all cache.  This action is not linked anywhere because it
is not supposed to be run by users, it's more of an administrative function.
To use it, you want to set a=expire.  So, for example, you would visit this
address in a browser (obviously with the correct path to your gitphp
index.php):

http://yourserver.com/gitphp/index.php?a=expire


        GeSHi - GEneric Syntax HIghlighter
        ----------------------------------
                 Version 1.0.8

Author:          Benny Baumann, Nigel McNie
Email:           BenBE@geshi.org, nigel@geshi.org
GeSHi Website:   http://qbnz.com/highlighter

GeSHi is a generic syntax highlighter, written in PHP. You simply
input the source code you wish to highlight with the language you
wish to use, and the output will be a file syntax highlighted to
XHTML standards.

For more information on how to use GeSHi, please consult the
documentation. If you got this readme from a GeSHi package, then
the documentation is available in the docs/ directory. Documentation
is also available at http://qbnz.com/highlighter/documentation.php

If you think you've found a bug in GeSHi, contact me with a bug
report at BenBE@omorphia.de, or submit it to the bug tracker at
http://sourceforge.net/tracker/?group_id=114997&atid=670231. Be
aware that minor highlighting errors may well just be incorrect
language files, but if you do find something major please contact me.

And if you're using GeSHi as a plugin/mod for some other software,
please tell me about it! It's worth a link to you, and I can give
you specialist help if you need it.

GeSHi is free software, released under the GNU GPL. Please see the
COPYING file for more information. If you do modify this program,
please tell me about it! Perhaps you've made a good improvement that
I can learn from :)
PHP-gettext 1.0 (https://launchpad.net/php-gettext)

Copyright 2003, 2006, 2009 -- Danilo "angry with PHP[1]" Segan
Licensed under GPLv2 (or any later version, see COPYING)

[1] PHP is actually cyrillic, and translates roughly to
    "works-doesn't-work" (UTF-8: Ð Ð°Ð´Ð¸-ÐÐµ-Ð Ð°Ð´Ð¸)


Introduction

    How many times did you look for a good translation tool, and
    found out that gettext is best for the job? Many times.

    How many times did you try to use gettext in PHP, but failed
    miserably, because either your hosting provider didn't support
    it, or the server didn't have adequate locale? Many times.

    Well, this is a solution to your needs. It allows using gettext
    tools for managing translations, yet it doesn't require gettext
    library at all. It parses generated MO files directly, and thus
    might be a bit slower than the (maybe provided) gettext library.

    PHP-gettext is a simple reader for GNU gettext MO files. Those
    are binary containers for translations, produced by GNU msgfmt.

Why?

    I got used to having gettext work even without gettext
    library. It's there in my favourite language Python, so I was
    surprised that I couldn't find it in PHP. I even Googled for it,
    but to no avail.

    So, I said, what the heck, I'm going to write it for this
    disguisting language of PHP, because I'm often constrained to it.

Features

  o Support for simple translations
    Just define a simple alias for translate() function (suggested
    use of _() or gettext(); see provided example).

  o Support for ngettext calls (plural forms, see a note under bugs)
    You may also use plural forms. Translations in MO files need to
    provide this, and they must also provide "plural-forms" header.
    Please see 'info gettext' for more details.

  o Support for reading straight files, or strings (!!!)
    Since I can imagine many different backends for reading in the MO
    file data, I used imaginary abstract class StreamReader to do all
    the input (check streams.php). For your convenience, I've already
    provided two classes for reading files: FileReader and
    StringReader (CachedFileReader is a combination of the two: it
    loads entire file contents into a string, and then works on that).
    See example below for usage. You can for instance use StringReader
    when you read in data from a database, or you can create your own
    derivative of StreamReader for anything you like.


Bugs

    Report them on https://bugs.launchpad.net/php-gettext

Usage

    Put files streams.php and gettext.php somewhere you can load them
    from, and require 'em in where you want to use them.

    Then, create one 'stream reader' (a class that provides functions
    like read(), seekto(), currentpos() and length()) which will
    provide data for the 'gettext_reader', with eg.
      $streamer = new FileStream('data.mo');

    Then, use that as a parameter to gettext_reader constructor:
      $wohoo = new gettext_reader($streamer);

    If you want to disable pre-loading of entire message catalog in
    memory (if, for example, you have a multi-thousand message catalog
    which you'll use only occasionally), use "false" for second
    parameter to gettext_reader constructor:
      $wohoo = new gettext_reader($streamer, false);

    From now on, you have all the benefits of gettext data at your
    disposal, so may run:
      print $wohoo->translate("This is a test");
      print $wohoo->ngettext("%d bird", "%d birds", $birds);

    You might need to pass parameter "-k" to xgettext to make it
    extract all the strings. In above example, try with
      xgettext -ktranslate -kngettext:1,2 file.php
    what should create messages.po which contains two messages for
    translation.

    I suggest creating simple aliases for these functions (see
    example/pigs.php for how do I do it, which means it's probably a
    bad way).


Usage with gettext.inc (standard gettext interfaces emulation)

    Check example in examples/pig_dropin.php, basically you include
    gettext.inc and use all the standard gettext interfaces as
    documented on:

       http://www.php.net/gettext

    The only catch is that you can check return value of setlocale()
    to see if your locale is system supported or not.


Example

    See in examples/ subdirectory. There are a couple of files.
    pigs.php is an example, serbian.po is a translation to Serbian
    language, and serbian.mo is generated with
       msgfmt -o serbian.mo serbian.po
    There is also simple "update" script that can be used to generate
    POT file and to update the translation using msgmerge.

TODO:

  o Improve speed to be even more comparable to the native gettext
    implementation.

  o Try to use hash tables in MO files: with pre-loading, would it
    be useful at all?

Never-asked-questions:

  o Why did you mark this as version 1.0 when this is the first code
    release?

    Well, it's quite simple. I consider that the first released thing
    should be labeled "version 1" (first, right?). Zero is there to
    indicate that there's zero improvement and/or change compared to
    "version 1".

    I plan to use version numbers 1.0.* for small bugfixes, and to
    release 1.1 as "first stable release of version 1".

    This may trick someone that this is actually useful software, but
    as with any other free software, I take NO RESPONSIBILITY for
    creating such a masterpiece that will smoke crack, trash your
    hard disk, and make lasers in your CD device dance to the tune of
    Mozart's 40th Symphony (there is one like that, right?).

  o Can I...?

    Yes, you can. This is free software (as in freedom, free speech),
    and you might do whatever you wish with it, provided you do not
    limit freedom of others (GPL).

    I'm considering licensing this under LGPL, but I *do* want
    *every* PHP-gettext user to contribute and respect ideas of free
    software, so don't count on it happening anytime soon.

    I'm sorry that I'm taking away your freedom of taking others'
    freedom away, but I believe that's neglible as compared to what
    freedoms you could take away. ;-)

    Uhm, whatever.

Smarty 3.1.7

Author: Monte Ohrt <monte at ohrt dot com >
Author: Uwe Tews

AN INTRODUCTION TO SMARTY 3

NOTICE FOR 3.1 release:

Please see the SMARTY_3.1_NOTES.txt file that comes with the distribution.

NOTICE for 3.0.5 release:

Smarty now follows the PHP error_reporting level by default. If PHP does not mask E_NOTICE and you try to access an unset template variable, you will now get an E_NOTICE warning. To revert to the old behavior:

$smarty->error_reporting = E_ALL & ~E_NOTICE;

NOTICE for 3.0 release:

IMPORTANT: Some API adjustments have been made between the RC4 and 3.0 release.
We felt it is better to make these now instead of after a 3.0 release, then have to
immediately deprecate APIs in 3.1. Online documentation has been updated
to reflect these changes. Specifically:

---- API CHANGES RC4 -> 3.0 ----

$smarty->register->*
$smarty->unregister->*
$smarty->utility->*
$samrty->cache->*

Have all been changed to local method calls such as:

$smarty->clearAllCache()
$smarty->registerFoo()
$smarty->unregisterFoo()
$smarty->testInstall()
etc.

Registration of function, block, compiler, and modifier plugins have been
consolidated under two API calls:

$smarty->registerPlugin(...)
$smarty->unregisterPlugin(...)

Registration of pre, post, output and variable filters have been
consolidated under two API calls:

$smarty->registerFilter(...)
$smarty->unregisterFilter(...)

Please refer to the online documentation for all specific changes:

http://www.smarty.net/documentation

----

The Smarty 3 API has been refactored to a syntax geared
for consistency and modularity. The Smarty 2 API syntax is still supported, but
will throw a deprecation notice. You can disable the notices, but it is highly
recommended to adjust your syntax to Smarty 3, as the Smarty 2 syntax must run
through an extra rerouting wrapper.

Basically, all Smarty methods now follow the "fooBarBaz" camel case syntax. Also,
all Smarty properties now have getters and setters. So for example, the property
$smarty->cache_dir can be set with $smarty->setCacheDir('foo/') and can be
retrieved with $smarty->getCacheDir().

Some of the Smarty 3 APIs have been revoked such as the "is*" methods that were
just duplicate functions of the now available "get*" methods.

Here is a rundown of the Smarty 3 API:

$smarty->fetch($template, $cache_id = null, $compile_id = null, $parent = null)
$smarty->display($template, $cache_id = null, $compile_id = null, $parent = null)
$smarty->isCached($template, $cache_id = null, $compile_id = null)
$smarty->createData($parent = null)
$smarty->createTemplate($template, $cache_id = null, $compile_id = null, $parent = null)
$smarty->enableSecurity()
$smarty->disableSecurity()
$smarty->setTemplateDir($template_dir)
$smarty->addTemplateDir($template_dir)
$smarty->templateExists($resource_name)
$smarty->loadPlugin($plugin_name, $check = true)
$smarty->loadFilter($type, $name)
$smarty->setExceptionHandler($handler)
$smarty->addPluginsDir($plugins_dir)
$smarty->getGlobal($varname = null)
$smarty->getRegisteredObject($name)
$smarty->getDebugTemplate()
$smarty->setDebugTemplate($tpl_name)
$smarty->assign($tpl_var, $value = null, $nocache = false)
$smarty->assignGlobal($varname, $value = null, $nocache = false)
$smarty->assignByRef($tpl_var, &$value, $nocache = false)
$smarty->append($tpl_var, $value = null, $merge = false, $nocache = false)
$smarty->appendByRef($tpl_var, &$value, $merge = false)
$smarty->clearAssign($tpl_var)
$smarty->clearAllAssign()
$smarty->configLoad($config_file, $sections = null)
$smarty->getVariable($variable, $_ptr = null, $search_parents = true, $error_enable = true)
$smarty->getConfigVariable($variable)
$smarty->getStreamVariable($variable)
$smarty->getConfigVars($varname = null)
$smarty->clearConfig($varname = null)
$smarty->getTemplateVars($varname = null, $_ptr = null, $search_parents = true)
$smarty->clearAllCache($exp_time = null, $type = null)
$smarty->clearCache($template_name, $cache_id = null, $compile_id = null, $exp_time = null, $type = null)

$smarty->registerPlugin($type, $tag, $callback, $cacheable = true, $cache_attr = array())

$smarty->registerObject($object_name, $object_impl, $allowed = array(), $smarty_args = true, $block_methods = array())

$smarty->registerFilter($type, $function_name)
$smarty->registerResource($resource_type, $function_names)
$smarty->registerDefaultPluginHandler($function_name)
$smarty->registerDefaultTemplateHandler($function_name)

$smarty->unregisterPlugin($type, $tag)
$smarty->unregisterObject($object_name)
$smarty->unregisterFilter($type, $function_name)
$smarty->unregisterResource($resource_type)

$smarty->compileAllTemplates($extention = '.tpl', $force_compile = false, $time_limit = 0, $max_errors = null)
$smarty->clearCompiledTemplate($resource_name = null, $compile_id = null, $exp_time = null)
$smarty->testInstall()

// then all the getters/setters, available for all properties. Here are a few:

$caching = $smarty->getCaching();      // get $smarty->caching
$smarty->setCaching(true);             // set $smarty->caching
$smarty->setDeprecationNotices(false); // set $smarty->deprecation_notices
$smarty->setCacheId($id);              // set $smarty->cache_id
$debugging = $smarty->getDebugging();  // get $smarty->debugging


FILE STRUCTURE

The Smarty 3 file structure is similar to Smarty 2:

/libs/
  Smarty.class.php
/libs/sysplugins/
  internal.*
/libs/plugins/
  function.mailto.php
  modifier.escape.php
  ...

A lot of Smarty 3 core functionality lies in the sysplugins directory; you do
not need to change any files here. The /libs/plugins/ folder is where Smarty
plugins are located. You can add your own here, or create a separate plugin
directory, just the same as Smarty 2. You will still need to create your own
/cache/, /templates/, /templates_c/, /configs/ folders. Be sure /cache/ and
/templates_c/ are writable.

The typical way to use Smarty 3 should also look familiar:

require('Smarty.class.php');
$smarty = new Smarty;
$smarty->assign('foo','bar');
$smarty->display('index.tpl');


However, Smarty 3 works completely different on the inside. Smarty 3 is mostly
backward compatible with Smarty 2, except for the following items:

*) Smarty 3 is PHP 5 only. It will not work with PHP 4.
*) The {php} tag is disabled by default. Enable with $smarty->allow_php_tag=true.
*) Delimiters surrounded by whitespace are no longer treated as Smarty tags.
   Therefore, { foo } will not compile as a tag, you must use {foo}. This change
   Makes Javascript/CSS easier to work with, eliminating the need for {literal}.
   This can be disabled by setting $smarty->auto_literal = false;
*) The Smarty 3 API is a bit different. Many Smarty 2 API calls are deprecated
   but still work. You will want to update your calls to Smarty 3 for maximum
   efficiency.


There are many things that are new to Smarty 3. Here are the notable items:
   
LEXER/PARSER
============

Smarty 3 now uses a lexing tokenizer for its parser/compiler. Basically, this
means Smarty has some syntax additions that make life easier such as in-template
math, shorter/intuitive function parameter options, infinite function recursion,
more accurate error handling, etc.


WHAT IS NEW IN SMARTY TEMPLATE SYNTAX
=====================================

Smarty 3 allows expressions almost anywhere. Expressions can include PHP
functions as long as they are not disabled by the security policy, object
methods and properties, etc. The {math} plugin is no longer necessary but
is still supported for BC.

Examples:
{$x+$y}                           will output the sum of x and y.
{$foo = strlen($bar)}             function in assignment
{assign var=foo value= $x+$y}     in attributes 
{$foo = myfunct( ($x+$y)*3 )}     as function parameter 
{$foo[$x+3]}                      as array index

Smarty tags can be used as values within other tags.
Example:  {$foo={counter}+3}

Smarty tags can also be used inside double quoted strings.
Example:  {$foo="this is message {counter}"}

You can define arrays within templates.
Examples:
{assign var=foo value=[1,2,3]}
{assign var=foo value=['y'=>'yellow','b'=>'blue']}
Arrays can be nested.
{assign var=foo value=[1,[9,8],3]}

There is a new short syntax supported for assigning variables.
Example: {$foo=$bar+2}

You can assign a value to a specific array element. If the variable exists but
is not an array, it is converted to an array before the new values are assigned.
Examples:
{$foo['bar']=1}
{$foo['bar']['blar']=1}

You can append values to an array. If the variable exists but is not an array,
it is converted to an array before the new values are assigned.
Example: {$foo[]=1}

You can use a PHP-like syntax for accessing array elements, as well as the
original "dot" notation.
Examples:
{$foo[1]}             normal access
{$foo['bar']}
{$foo['bar'][1]}
{$foo[$x+$x]}         index may contain any expression
{$foo[$bar[1]]}       nested index
{$foo[section_name]}  smarty section access, not array access!

The original "dot" notation stays, and with improvements.
Examples:
{$foo.a.b.c}        =>  $foo['a']['b']['c'] 
{$foo.a.$b.c}       =>  $foo['a'][$b]['c']        with variable index
{$foo.a.{$b+4}.c}   =>  $foo['a'][$b+4]['c']       with expression as index
{$foo.a.{$b.c}}     =>  $foo['a'][$b['c']]         with nested index

note that { and } are used to address ambiguties when nesting the dot syntax. 

Variable names themselves can be variable and contain expressions.
Examples:
$foo         normal variable
$foo_{$bar}  variable name containing other variable 
$foo_{$x+$y} variable name containing expressions 
$foo_{$bar}_buh_{$blar}  variable name with multiple segments
{$foo_{$x}}  will output the variable $foo_1 if $x has a value of 1.

Object method chaining is implemented.
Example: {$object->method1($x)->method2($y)}

{for} tag added for looping (replacement for {section} tag):
{for $x=0, $y=count($foo); $x<$y; $x++}  ....  {/for}
Any number of statements can be used separated by comma as the first
inital expression at {for}.

{for $x = $start to $end step $step} ... {/for}is in the SVN now .
You can use also
{for $x = $start to $end} ... {/for}
In this case the step value will be automaticall 1 or -1 depending on the start and end values.
Instead of $start and $end you can use any valid expression.
Inside the loop the following special vars can be accessed:
$x@iteration = number of iteration
$x@total = total number of iterations
$x@first = true on first iteration
$x@last = true on last iteration


The Smarty 2 {section} syntax is still supported.

New shorter {foreach} syntax to loop over an array.
Example: {foreach $myarray as $var}...{/foreach}

Within the foreach loop, properties are access via:

$var@key            foreach $var array key
$var@iteration      foreach current iteration count (1,2,3...)
$var@index          foreach current index count (0,1,2...)
$var@total          foreach $var array total
$var@first          true on first iteration
$var@last           true on last iteration

The Smarty 2 {foreach} tag syntax is still supported.

NOTE: {$bar[foo]} still indicates a variable inside of a {section} named foo. 
If you want to access an array element with index foo, you must use quotes
such as {$bar['foo']}, or use the dot syntax {$bar.foo}.

while block tag is now implemented:
{while $foo}...{/while}
{while $x lt 10}...{/while}

Direct access to PHP functions:
Just as you can use PHP functions as modifiers directly, you can now access
PHP functions directly, provided they are permitted by security settings:
{time()}

There is a new {function}...{/function} block tag to implement a template function.
This enables reuse of code sequences like a plugin function. It can call itself recursively.
Template function must be called with the new {call name=foo...} tag.

Example:

Template file:
{function name=menu level=0}
  <ul class="level{$level}">
  {foreach $data as $entry}
    {if is_array($entry)}
      <li>{$entry@key}</li>
       {call name=menu data=$entry level=$level+1}
    {else}
      <li>{$entry}</li>
    {/if}
  {/foreach}
  </ul>
{/function}

{$menu = ['item1','item2','item3' => ['item3-1','item3-2','item3-3' =>
  ['item3-3-1','item3-3-2']],'item4']}

{call name=menu data=$menu}


Generated output:
    * item1
    * item2
    * item3
          o item3-1
          o item3-2
          o item3-3
                + item3-3-1
                + item3-3-2
    * item4

The function tag itself must have the "name" attribute. This name is the tag
name when calling the function. The function tag may have any number of
additional attributes. These will be default settings for local variables.

New {nocache} block function:
{nocache}...{/nocache} will declare a section of the template to be non-cached
when template caching is enabled.

New nocache attribute:
You can declare variable/function output as non-cached with the nocache attribute.
Examples:

{$foo nocache=true}
{$foo nocache} /* same */

{foo bar="baz" nocache=true}
{foo bar="baz" nocache} /* same */

{time() nocache=true}
{time() nocache} /* same */

Or you can also assign the variable in your script as nocache:
$smarty->assign('foo',$something,true); // third param is nocache setting
{$foo} /* non-cached */

$smarty.current_dir returns the directory name of the current template.

You can use strings directly as templates with the "string" resource type.
Examples:
$smarty->display('string:This is my template, {$foo}!'); // php
{include file="string:This is my template, {$foo}!"} // template



VARIABLE SCOPE / VARIABLE STORAGE
=================================

In Smarty 2, all assigned variables were stored within the Smarty object. 
Therefore, all variables assigned in PHP were accessible by all subsequent 
fetch and display template calls.

In Smarty 3, we have the choice to assign variables to the main Smarty object, 
to user-created data objects, and to user-created template objects. 
These objects can be chained. The object at the end of a chain can access all
variables belonging to that template and all variables within the parent objects.
The Smarty object can only be the root of a chain, but a chain can be isolated
from the Smarty object.

All known Smarty assignment interfaces will work on the data and template objects.

Besides the above mentioned objects, there is also a special storage area for
global variables.

A Smarty data object can be created as follows:
$data = $smarty->createData();    // create root data object
$data->assign('foo','bar');       // assign variables as usual
$data->config_load('my.conf');									 // load config file    

$data= $smarty->createData($smarty);  // create data object having a parent link to
the Smarty object

$data2= $smarty->createData($data);   // create data object having a parent link to
the $data data object

A template object can be created by using the createTemplate method. It has the
same parameter assignments as the fetch() or display() method.
Function definition:
function createTemplate($template, $cache_id = null, $compile_id = null, $parent = null)

The first parameter can be a template name, a smarty object or a data object.

Examples:
$tpl = $smarty->createTemplate('mytpl.tpl'); // create template object not linked to any parent
$tpl->assign('foo','bar');                   // directly assign variables
$tpl->config_load('my.conf');									 // load config file    

$tpl = $smarty->createTemplate('mytpl.tpl',$smarty);  // create template having a parent link to the Smarty object
$tpl = $smarty->createTemplate('mytpl.tpl',$data);    // create template having a parent link to the $data object

The standard fetch() and display() methods will implicitly create a template object.
If the $parent parameter is not specified in these method calls, the template object
is will link back to the Smarty object as it's parent.

If a template is called by an {include...} tag from another template, the
subtemplate links back to the calling template as it's parent. 

All variables assigned locally or from a parent template are accessible. If the
template creates or modifies a variable by using the {assign var=foo...} or
{$foo=...} tags, these new values are only known locally (local scope). When the
template exits, none of the new variables or modifications can be seen in the
parent template(s). This is same behavior as in Smarty 2. 

With Smarty 3, we can assign variables with a scope attribute which allows the
availablility of these new variables or modifications globally (ie in the parent
templates.)

Possible scopes are local, parent, root and global. 
Examples:
{assign var=foo value='bar'}       // no scope is specified, the default 'local'
{$foo='bar'}                       // same, local scope
{assign var=foo value='bar' scope='local'} // same, local scope

{assign var=foo value='bar' scope='parent'} // Values will be available to the parent object 
{$foo='bar' scope='parent'}                 // (normally the calling template)

{assign var=foo value='bar' scope='root'}   // Values will be exported up to the root object, so they can 
{$foo='bar' scope='root'}                   // be seen from all templates using the same root.

{assign var=foo value='bar' scope='global'} // Values will be exported to global variable storage, 
{$foo='bar' scope='global'}                 // they are available to any and all templates.


The scope attribute can also be attached to the {include...} tag. In this case,
the specified scope will be the default scope for all assignments within the
included template.


PLUGINS
=======

Smarty3 are following the same coding rules as in Smarty2. 
The only difference is that the template object is passed as additional third parameter.

smarty_plugintype_name (array $params, object $smarty, object $template)

The Smarty 2 plugins are still compatible as long as they do not make use of specific Smarty2 internals.


TEMPLATE INHERITANCE:
=====================

With template inheritance you can define blocks, which are areas that can be
overriden by child templates, so your templates could look like this: 

parent.tpl:
<html>
  <head>
    <title>{block name='title'}My site name{/block}</title>
  </head>
  <body>
    <h1>{block name='page-title'}Default page title{/block}</h1>
    <div id="content">
      {block name='content'}
        Default content
      {/block}
    </div>
  </body>
</html>

child.tpl:
{extends file='parent.tpl'} 
{block name='title'}
Child title
{/block}

grandchild.tpl:
{extends file='child.tpl'} 
{block name='title'}Home - {$smarty.block.parent}{/block} 
{block name='page-title'}My home{/block}
{block name='content'}
  {foreach $images as $img}
    <img src="{$img.url}" alt="{$img.description}" />
  {/foreach}
{/block}

We redefined all the blocks here, however in the title block we used {$smarty.block.parent},
which tells Smarty to insert the default content from the parent template in its place.
The content block was overriden to display the image files, and page-title has also be 
overriden to display a completely different title. 

If we render grandchild.tpl we will get this: 
<html>
  <head>
    <title>Home - Child title</title>
  </head>
  <body>
    <h1>My home</h1>
    <div id="content">
      <img src="/example.jpg" alt="image" />
      <img src="/example2.jpg" alt="image" />
      <img src="/example3.jpg" alt="image" />
    </div>
  </body>
</html>

NOTE: In the child templates everything outside the {extends} or {block} tag sections
is ignored.

The inheritance tree can be as big as you want (meaning you can extend a file that 
extends another one that extends another one and so on..), but be aware that all files 
have to be checked for modifications at runtime so the more inheritance the more overhead you add.

Instead of defining the parent/child relationships with the {extends} tag in the child template you
can use the resource as follow:

$smarty->display('extends:parent.tpl|child.tpl|grandchild.tpl');

Child {block} tags may optionally have a append or prepend attribute. In this case the parent block content 
is appended or prepended to the child block content.

{block name='title' append} My title {/block}


PHP STREAMS:
============

(see online documentation)

VARIBLE FILTERS:
================

(see online documentation)


STATIC CLASS ACCESS AND NAMESPACE SUPPORT
=========================================

You can register a class with optional namespace for the use in the template like:

$smarty->register->templateClass('foo','name\name2\myclass');

In the template you can use it like this:
{foo::method()}  etc.


=======================

Please look through it and send any questions/suggestions/etc to the forums.

http://www.phpinsider.com/smarty-forum/viewtopic.php?t=14168

Monte and Uwe

$Id: README,v 1.4 2005/07/27 18:14:59 sagi Exp $

 ------------------------------------------------
| smarty-gettext - Gettext support for Smarty    |
|                                                |
| Author: Sagi Bashari <sagi@boom.org.il>        |
| URL:    http://smarty-gettext.sourceforge.net/ |
 ------------------------------------------------

smarty-gettext provides gettext support for Smarty, 
the popular PHP templating engine (http://smarty.php.net/).

This README assumes that you already know what is gettext and how to
use it with PHP.

If you don't, please visit the following websites before trying to
use this package:
  - http://www.php.net/gettext
  - http://www.onlamp.com/pub/a/php/2002/06/13/php.html

If you encounter problems when using the native gettext extension,
you may want to try the php-gettext module, which emulates the behavior
of the C extension, but is written in pure PHP:
http://savannah.nongnu.org/projects/php-gettext/

This package has two parts:
  1. block.t.php   - The Smarty plugin.
  2. tsmarty2c.php - A command line utility that rips gettext strings
                     from smarty source files and converts them to C format.

 ---------------------------------
| block.t.php - The Smarty plugin |
 ---------------------------------

Installation
------------

Simply copy block.t.php to your smarty plugins directory.

Usage
------

The content of the block function is the string that you want to translate.
For example, for translating 'Hello World', use: {t}Hello World{/t}.

If you have dynamic parameters that should be set inside the string, 
pass them to the block function, and they will be replaced with %n, 
where n is 1 for the 1st parameter and so on. 

For example, {t name="sagi"}my name is %1{/t} will replace %1 with sagi.

The parameter name is ignored, unless it is one of the reserved 
names (see below). Only the parameters order matters.

Example for using multiple parameters:
{t 1='one' 2='two' 3='three'}The 1st parameter is %1, the 2nd is %2
and the 3nd %3.{/t}

NOTE: I decided to use numeric arguments instead of sprintf(), 
mainly because its syntax is simpler for the translators 
(especially when wanting to change the parameter order).  

You can also use this method in your PHP code, by using the 
smarty_gettext_strarg() function. It is only loaded after block.t.php is 
included, so you probably want to copy it elsewhere. 
I usually name the global version of this function strarg(), and use it like this:
echo strarg(_('hi %1'), $name [,..]);

By default, all the translated strings will be automatically HTML escaped.
You may control this by setting the 'escape' parameter. Possible values:
  - 'html' for HTML escaping, this is the default.
  - 'js' for javascript escaping.
  - 'url' for url escaping.
  - 'no'/'off'/0 - disables escaping.
Example: 
{t escape=no url="http://www.php.net/" name="PHP website"}
<a href="%1">%2</a>
{/t}

Plural support
--------------

The package also provides support for plural forms (see ngettext). 

To provide a plural form:
  1. Set a parameter named 'plural' with the plural version of the string.
  2. Set a parameter named 'count' with the variable count.

Plural and count are special parameters, and therefore, are not available
as numeric arguments. If you wish to use the count value inside the string,
you will have to set it again, as a numeric argument.

Example:
{t count=$files|@count 1=$files|@count plural="%1 files"}One file{/t}

Modifier support
----------------

A Smarty modifier support is not provided by this package.

I believe variables should be trnalsated in the application level
and provided after translation to the template.

If you need it anyway, it is easy to create such modifier, by simply 
registering the PHP gettext command as one.

 ------------------------------------------
| tsmarty2c.php - the command line utility |
 ------------------------------------------

This utility will rip the translation strings from the smarty files,
and convert them to gettext calls in C.

The C output may later be used with the standard gettext tools (see xgettext).

Usage:
./tsmarty2c.php <filename or directory> <file2> <..> > smarty.c

If a parameter is a directory, the template files within will
be parsed, recursively.

TIP:
The output also contains comments that point to the location of the file 
that the string has been ripped from. 

You can use the '--add-comments' parameter of xgettext to make it include
these comments inside the PO file (suggested by Mike van Lammeren).

NOTE: 
You may need to adjust the PHP bin path at the top of the file,
or use 'php tsmarty2c.php' to run the script.

 -----------
| Copyright |
 -----------

Copyright (c) 2004-2005 Sagi Bashari

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

German Translation for GitPHP by Andy Tandler <tandler@adaptik.de>

To Install the Language you need only few Steps:

1. Copy Directory de_DE into locale, where the File gitphp.pot is located.
   
2. Open include/Resource.class.php and search for function LocaleToName.
   Add this case to the switch:
   
   case 'de_DE':
     return 'Deutsch';
     
3. If you want that German is the pre-selected Language in your GitPHP,
   open config/gitphp.conf.php and add this Line: 

   $gitphp_conf['locale'] = 'de_DE';
     
GitPHPçä¸­æç®ä½è¯­è¨åç±seefan æä¾ <seefan@jianel.net>

è¦å®è£è¯­è¨åè¯·è¿è¡ä»¥ä¸å ä¸ªæ­¥éª¤:

1. å° zh_CN æ·è´å° locale ç®å½ä¸, é£ä¸ªç®å½ä¸å·²ç»æä¸ä¸ª gitphp.pot æä»¶.
   
2. æå¼ include/Resource.class.php ï¼æ¥æ¾ function LocaleToName.
   å°ä»¥ä¸åå®¹å å° switché:
   
   case 'zh_CN':
     return 'ä¸­æç®ä½';
     
3. å¦ä½ä½ æ³ GitPHP é¢åéä¸­âä¸­æç®ä½â,
   æå¼ config/gitphp.conf.php åå å¥ä»¥ä¸ä¸è¡åå®¹: 

   $gitphp_conf['locale'] = 'zh_CN';
     

1. libmagic (ext/fileinfo) see ext/fileinfo/libmagic/LICENSE
2. Oniguruma (ext/mbstring) see ext/mbstring/oniguruma/COPYING
3. libmbfl (ext/mbstring) see ext/mbstring/libmbfl/LICENSE
4. pcrelib (ext/pcre) see ext/pcre/pcrelib/LICENCE
5. ext/standard crypt
6. ext/standard crypt's blowfish implementation
7. Sqlite/Sqlite3 ext/sqlite3 ext/sqlite
8. ext/json/json_parser
9. ext/standard/rand
10. ext/standard/scanf
11. ext/standard/strnatcmp.c
12. ext/standard/uuencode
13. libxmlrpc ext/xmlrpc
14. libzip ext/zip
15. main/snprintf.c
16. main/strlcat
17. main/strlcpy
18. libgd see ext/gd/libgd/COPYING

5. ext/standard crypt

FreeSec: libcrypt for NetBSD

Copyright (c) 1994 David Burren
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
	 notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
	 notice, this list of conditions and the following disclaimer in the
	 documentation and/or other materials provided with the distribution.
3. Neither the name of the author nor the names of other contributors
	 may be used to endorse or promote products derived from this software
	 without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
 

6. ext/standard crypt's blowfish implementation

The crypt_blowfish homepage is:

http://www.openwall.com/crypt/

This code comes from John the Ripper password cracker, with reentrant
and crypt(3) interfaces added, but optimizations specific to password
cracking removed.

Written by Solar Designer <solar at openwall.com> in 1998-2011.
No copyright is claimed, and the software is hereby placed in the public
domain. In case this attempt to disclaim copyright and place the software
in the public domain is deemed null and void, then the software is
Copyright (c) 1998-2011 Solar Designer and it is hereby released to the
general public under the following terms:

Redistribution and use in source and binary forms, with or without
modification, are permitted.

There's ABSOLUTELY NO WARRANTY, express or implied.

It is my intent that you should be able to use this on your system,
as part of a software package, or anywhere else to improve security,
ensure compatibility, or for any other purpose. I would appreciate
it if you give credit where it is due and keep your modifications in
the public domain as well, but I don't require that in order to let
you place this code and any modifications you make under a license
of your choice.

This implementation is mostly compatible with OpenBSD's bcrypt.c (prefix
"$2a$") by Niels Provos <provos at citi.umich.edu>, and uses some of his
ideas. The password hashing algorithm was designed by David Mazieres
<dm at lcs.mit.edu>. For more information on the level of compatibility,
please refer to the comments in BF_set_key() and to the crypt(3) man page
included in the crypt_blowfish tarball.

There's a paper on the algorithm that explains its design decisions:

http://www.usenix.org/events/usenix99/provos.html

Some of the tricks in BF_ROUND might be inspired by Eric Young's
Blowfish library (I can't be sure if I would think of something if I
hadn't seen his code).
 

7. Sqlite/Sqlite3 ext/sqlite3 ext/sqlite

The author disclaims copyright to this source code.  In place of
a legal notice, here is a blessing:
  May you do good and not evil.
  May you find forgiveness for yourself and forgive others.
  May you share freely, never taking more than you give.


8. ext/json/json_parser
Copyright (c) 2005 JSON.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

The Software shall be used for Good, not Evil.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


9. ext/standard/rand
The following php_mt_...() functions are based on a C++ class MTRand by
Richard J. Wagner. For more information see the web page at
http://www-personal.engin.umich.edu/~wagnerr/MersenneTwister.html

Mersenne Twister random number generator -- a C++ class MTRand
Based on code by Makoto Matsumoto, Takuji Nishimura, and Shawn Cokus
Richard J. Wagner  v1.0  15 May 2003  rjwagner@writeme.com

The Mersenne Twister is an algorithm for generating random numbers.  It
was designed with consideration of the flaws in various other generators.
The period, 2^19937-1, and the order of equidistribution, 623 dimensions,
are far greater.  The generator is also fast; it avoids multiplication and
division, and it benefits from caches and pipelines.  For more information
see the inventors' web page at http://www.math.keio.ac.jp/~matumoto/emt.html

Reference
M. Matsumoto and T. Nishimura, "Mersenne Twister: A 623-Dimensionally
Equidistributed Uniform Pseudo-Random Number Generator", ACM Transactions on
Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.

Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
Copyright (C) 2000 - 2003, Richard J. Wagner
All rights reserved.                          

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
	 notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
	 notice, this list of conditions and the following disclaimer in the
	 documentation and/or other materials provided with the distribution.

3. The names of its contributors may not be used to endorse or promote 
	 products derived from this software without specific prior written 
	 permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


10. ext/standard/scanf
scanf.c --

This file contains the base code which implements sscanf and by extension
fscanf. Original code is from TCL8.3.0 and bears the following copyright:

This software is copyrighted by the Regents of the University of
California, Sun Microsystems, Inc., Scriptics Corporation,
and other parties.  The following terms apply to all files associated
with the software unless explicitly disclaimed in individual files.

The authors hereby grant permission to use, copy, modify, distribute,
and license this software and its documentation for any purpose, provided
that existing copyright notices are retained in all copies and that this
notice is included verbatim in any distributions. No written agreement,
license, or royalty fee is required for any of the authorized uses.
Modifications to this software may be copyrighted by their authors
and need not follow the licensing terms described here, provided that
the new terms are clearly indicated on the first page of each file where
they apply.

IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS.

GOVERNMENT USE: If you are acquiring this software on behalf of the
U.S. government, the Government shall have only "Restricted Rights"
in the software and related documentation as defined in the Federal
Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
are acquiring the software on behalf of the Department of Defense, the
software shall be classified as "Commercial Computer Software" and the
Government shall have only "Restricted Rights" as defined in Clause
252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing, the
authors grant the U.S. Government and others acting in its behalf
permission to use and distribute the software in accordance with the
terms specified in this license.

11. ext/standard/strnatcmp.c

strnatcmp.c -- Perform 'natural order' comparisons of strings in C.
Copyright (C) 2000 by Martin Pool <mbp@humbug.org.au>

This software is provided 'as-is', without any express or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
	 claim that you wrote the original software. If you use this software
	 in a product, an acknowledgment in the product documentation would be
	 appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
	 misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.

12. ext/standard/uuencode
Portions of this code are based on Berkeley's uuencode/uudecode
implementation.

Copyright (c) 1983, 1993
The Regents of the University of California.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
	notice, this list of conditions and the following disclaimer in the
	documentation and/or other materials provided with the distribution.
3. All advertising materials mentioning features or use of this software
	must display the following acknowledgement:
This product includes software developed by the University of
California, Berkeley and its contributors.
4. Neither the name of the University nor the names of its contributors
	may be used to endorse or promote products derived from this software
	without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.


13. libxmlrpc ext/xmlrpc

Copyright 2000 Epinions, Inc. 

Subject to the following 3 conditions, Epinions, Inc.  permits you, free 
of charge, to (a) use, copy, distribute, modify, perform and display this 
software and associated documentation files (the "Software"), and (b) 
permit others to whom the Software is furnished to do so as well.  

1) The above copyright notice and this permission notice shall be included 
without modification in all copies or substantial portions of the 
Software.  

2) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT ANY WARRANTY OR CONDITION OF 
ANY KIND, EXPRESS, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION ANY 
IMPLIED WARRANTIES OF ACCURACY, MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE OR NONINFRINGEMENT.  

3) IN NO EVENT SHALL EPINIONS, INC. BE LIABLE FOR ANY DIRECT, INDIRECT, 
SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES OR LOST PROFITS ARISING OUT 
OF OR IN CONNECTION WITH THE SOFTWARE (HOWEVER ARISING, INCLUDING 
NEGLIGENCE), EVEN IF EPINIONS, INC.  IS AWARE OF THE POSSIBILITY OF SUCH 
DAMAGES.

14. libzip ext/zip
zip.h -- exported declarations.
Copyright (C) 1999-2009 Dieter Baron and Thomas Klausner

This file is part of libzip, a library to manipulate ZIP archives.
The authors can be contacted at <libzip@nih.at>

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
	 notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
	 notice, this list of conditions and the following disclaimer in
	 the documentation and/or other materials provided with the
	 distribution.
3. The names of the authors may not be used to endorse or promote
	 products derived from this software without specific prior
	 written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

15. main/snprintf.c
Copyright (c) 2002, 2006 Todd C. Miller <Todd.Miller@courtesan.com>

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Sponsored in part by the Defense Advanced Research Projects
Agency (DARPA) and Air Force Research Laboratory, Air Force
Materiel Command, USAF, under agreement number F39502-99-1-0512.

main/spprintf
Copyright (c) 1995-1998 The Apache Group.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
	 notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
	 notice, this list of conditions and the following disclaimer in
	 the documentation and/or other materials provided with the
	 distribution.

3. All advertising materials mentioning features or use of this
	 software must display the following acknowledgment:
	 "This product includes software developed by the Apache Group
	 for use in the Apache HTTP server project (http://www.apache.org/)."

4. The names "Apache Server" and "Apache Group" must not be used to
	 endorse or promote products derived from this software without
	 prior written permission.

5. Redistributions of any form whatsoever must retain the following
	 acknowledgment:
	 "This product includes software developed by the Apache Group
	 for use in the Apache HTTP server project (http://www.apache.org/)."

THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Group and was originally based
on public domain software written at the National Center for
Supercomputing Applications, University of Illinois, Urbana-Champaign.
For more information on the Apache Group and the Apache HTTP server
project, please see <http://www.apache.org/>.

This code is based on, and used with the permission of, the
SIO stdio-replacement strx_* functions by Panos Tsirigotis
<panos@alumni.cs.colorado.edu> for xinetd.

16. main/strlcat
17. main/strlcpy
Copyright (c) 1998 Todd C. Miller <Todd.Miller@courtesan.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
	notice, this list of conditions and the following disclaimer in the
	documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
	derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


IDLE is Python's Tkinter-based Integrated DeveLopment Environment.

IDLE emphasizes a lightweight, clean design with a simple user interface.
Although it is suitable for beginners, even advanced users will find that
IDLE has everything they really need to develop pure Python code.

IDLE features a multi-window text editor with multiple undo, Python colorizing,
and many other capabilities, e.g. smart indent, call tips, and autocompletion.

The editor has comprehensive search functions, including searching through
multiple files.  Class browsers and path browsers provide fast access to
code objects from a top level viewpoint without dealing with code folding.

There is a Python Shell window which features colorizing and command recall.

IDLE executes Python code in a separate process, which is restarted for each
Run (F5) initiated from an editor window.  The environment can also be 
restarted from the Shell window without restarting IDLE.

This enhancement has often been requested, and is now finally available.  The
magic "reload/import *" incantations are no longer required when editing and
testing a module two or three steps down the import chain.

(Personal firewall software may warn about the connection IDLE makes to its
subprocess using this computer's internal loopback interface.  This connection
is not visible on any external interface and no data is sent to or received
from the Internet.)

It is possible to interrupt tightly looping user code, even on Windows.

Applications which cannot support subprocesses and/or sockets can still run
IDLE in a single process.

IDLE has an integrated debugger with stepping, persistent breakpoints, and call
stack visibility.

There is a GUI configuration manager which makes it easy to select fonts,
colors, keybindings, and startup options.  This facility includes a feature
which allows the user to specify additional help sources, either locally or on
the web.

IDLE is coded in 100% pure Python, using the Tkinter GUI toolkit (Tk/Tcl)
and is cross-platform, working on Unix, Mac, and Windows.

IDLE accepts command line arguments.  Try idle -h to see the options.


If you find bugs or have suggestions, let us know about them by using the
Python Bug Tracker:

http://sourceforge.net/projects/python

Patches are always appreciated at the Python Patch Tracker, and change
requests should be posted to the RFE Tracker.

For further details and links, read the Help files and check the IDLE home
page at

http://www.python.org/idle/

There is a mail list for IDLE: idle-dev@python.org.  You can join at

http://mail.python.org/mailman/listinfo/idle-dev

This directory exists so that 3rd party packages can be installed
here.  Read the source for site.py for more details.

This directory contains test cases that are known to leak references.
The idea is that you can import these modules while in the interpreter
and call the leak function repeatedly.  This will only be helpful if
the interpreter was built in debug mode.  If the total ref count
doesn't increase, the bug has been fixed and the file should be removed
from the repository.

Note:  be careful to check for cyclic garbage.  Sometimes it may be helpful
to define the leak function like:

def leak():
    def inner_leak():
        # this is the function that leaks, but also creates cycles
    inner_leak()
    gc.collect() ; gc.collect() ; gc.collect()

Here's an example interpreter session for test_gestalt which still leaks:

>>> from test.leakers.test_gestalt import leak
[24275 refs]
>>> leak()
[28936 refs]
>>> leak()
[28938 refs]
>>> leak()
[28940 refs]
>>> 

Once the leak is fixed, the test case should be moved into an appropriate
test (even if it was originally from the test suite).  This ensures the
regression doesn't happen again.  And if it does, it should be easier
to track down.

This is Python version 2.7.2
============================

Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
Python Software Foundation.  All rights reserved.

Copyright (c) 2000 BeOpen.com.
All rights reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All rights reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum.
All rights reserved.


License information
-------------------

See the file "LICENSE" for information on the history of this
software, terms & conditions for usage, and a DISCLAIMER OF ALL
WARRANTIES.

This Python distribution contains no GNU General Public Licensed
(GPLed) code so it may be used in proprietary projects just like prior
Python distributions.  There are interfaces to some GNU code but these
are entirely optional.

All trademarks referenced herein are property of their respective
holders.


What's new in this release?
---------------------------

See the file "Misc/NEWS".


If you don't read instructions
------------------------------

Congratulations on getting this far. :-)

To start building right away (on UNIX): type "./configure" in the
current directory and when it finishes, type "make".  This creates an
executable "./python"; to install in /usr/local, first do "su root"
and then "make install".

The section `Build instructions' below is still recommended reading.


What is Python anyway?
----------------------

Python is an interpreted, interactive object-oriented programming
language suitable (amongst other uses) for distributed application
development, scripting, numeric computing and system testing.  Python
is often compared to Tcl, Perl, Java, JavaScript, Visual Basic or
Scheme.  To find out more about what Python can do for you, point your
browser to http://www.python.org/.


How do I learn Python?
----------------------

The official tutorial is still a good place to start; see
http://docs.python.org/ for online and downloadable versions, as well
as a list of other introductions, and reference documentation.

There's a quickly growing set of books on Python.  See
http://wiki.python.org/moin/PythonBooks for a list.


Documentation
-------------

All documentation is provided online in a variety of formats.  In
order of importance for new users: Tutorial, Library Reference,
Language Reference, Extending & Embedding, and the Python/C API.  The
Library Reference is especially of immense value since much of
Python's power is described there, including the built-in data types
and functions!

All documentation is also available online at the Python web site
(http://docs.python.org/, see below).  It is available online for occasional
reference, or can be downloaded in many formats for faster access.  The
documentation is downloadable in HTML, PostScript, PDF, LaTeX, and
reStructuredText (2.6+) formats; the LaTeX and reStructuredText versions are
primarily for documentation authors, translators, and people with special
formatting requirements.


Web sites
---------

New Python releases and related technologies are published at
http://www.python.org/.  Come visit us!


Newsgroups and Mailing Lists
----------------------------

Read comp.lang.python, a high-volume discussion newsgroup about
Python, or comp.lang.python.announce, a low-volume moderated newsgroup
for Python-related announcements.  These are also accessible as
mailing lists: see http://www.python.org/community/lists/ for an
overview of these and many other Python-related mailing lists.

Archives are accessible via the Google Groups Usenet archive; see
http://groups.google.com/.  The mailing lists are also archived, see
http://www.python.org/community/lists/ for details.


Bug reports
-----------

To report or search for bugs, please use the Python Bug
Tracker at http://bugs.python.org/.


Patches and contributions
-------------------------

To submit a patch or other contribution, please use the Python Patch
Manager at http://bugs.python.org/.  Guidelines
for patch submission may be found at http://www.python.org/dev/patches/.

If you have a proposal to change Python, you may want to send an email to the
comp.lang.python or python-ideas mailing lists for inital feedback. A Python
Enhancement Proposal (PEP) may be submitted if your idea gains ground. All
current PEPs, as well as guidelines for submitting a new PEP, are listed at
http://www.python.org/dev/peps/.


Questions
---------

For help, if you can't find it in the manuals or on the web site, it's
best to post to the comp.lang.python or the Python mailing list (see
above).  If you specifically don't want to involve the newsgroup or
mailing list, send questions to help@python.org (a group of volunteers
who answer questions as they can).  The newsgroup is the most
efficient way to ask public questions.


Build instructions
==================

Before you can build Python, you must first configure it.
Fortunately, the configuration and build process has been automated
for Unix and Linux installations, so all you usually have to do is
type a few commands and sit back.  There are some platforms where
things are not quite as smooth; see the platform specific notes below.
If you want to build for multiple platforms sharing the same source
tree, see the section on VPATH below.

Start by running the script "./configure", which determines your
system configuration and creates the Makefile.  (It takes a minute or
two -- please be patient!)  You may want to pass options to the
configure script -- see the section below on configuration options and
variables.  When it's done, you are ready to run make.

To build Python, you normally type "make" in the toplevel directory.
If you have changed the configuration, the Makefile may have to be
rebuilt.  In this case, you may have to run make again to correctly
build your desired target.  The interpreter executable is built in the
top level directory.

Once you have built a Python interpreter, see the subsections below on
testing and installation.  If you run into trouble, see the next
section.

Previous versions of Python used a manual configuration process that
involved editing the file Modules/Setup.  While this file still exists
and manual configuration is still supported, it is rarely needed any
more: almost all modules are automatically built as appropriate under
guidance of the setup.py script, which is run by Make after the
interpreter has been built.


Troubleshooting
---------------

See also the platform specific notes in the next section.

If you run into other trouble, see the FAQ
(http://www.python.org/doc/faq/) for hints on what can go wrong, and
how to fix it.

If you rerun the configure script with different options, remove all
object files by running "make clean" before rebuilding.  Believe it or
not, "make clean" sometimes helps to clean up other inexplicable
problems as well.  Try it before sending in a bug report!

If the configure script fails or doesn't seem to find things that
should be there, inspect the config.log file.

If you get a warning for every file about the -Olimit option being no
longer supported, you can ignore it.  There's no foolproof way to know
whether this option is needed; all we can do is test whether it is
accepted without error.  On some systems, e.g. older SGI compilers, it
is essential for performance (specifically when compiling ceval.c,
which has more basic blocks than the default limit of 1000).  If the
warning bothers you, edit the Makefile to remove "-Olimit 1500" from
the OPT variable.

If you get failures in test_long, or sys.maxint gets set to -1, you
are probably experiencing compiler bugs, usually related to
optimization.  This is a common problem with some versions of gcc, and
some vendor-supplied compilers, which can sometimes be worked around
by turning off optimization.  Consider switching to stable versions
(gcc 2.95.2, gcc 3.x, or contact your vendor.)

From Python 2.0 onward, all Python C code is ANSI C.  Compiling using
old K&R-C-only compilers is no longer possible.  ANSI C compilers are
available for all modern systems, either in the form of updated
compilers from the vendor, or one of the free compilers (gcc).

If "make install" fails mysteriously during the "compiling the library"
step, make sure that you don't have any of the PYTHONPATH or PYTHONHOME
environment variables set, as they may interfere with the newly built
executable which is compiling the library.

Unsupported systems
-------------------

A number of systems are not supported in Python 2.7 anymore. Some
support code is still present, but will be removed in later versions.
If you still need to use current Python versions on these systems,
please send a message to python-dev@python.org indicating that you
volunteer to support this system. For a more detailed discussion 
regarding no-longer-supported and resupporting platforms, as well
as a list of platforms that became or will be unsupported, see PEP 11.

More specifically, the following systems are not supported any
longer:
- SunOS 4
- DYNIX
- dgux
- Minix
- NeXT
- Irix 4 and --with-sgi-dl
- Linux 1
- Systems defining __d6_pthread_create (configure.in)
- Systems defining PY_PTHREAD_D4, PY_PTHREAD_D6,
  or PY_PTHREAD_D7 in thread_pthread.h
- Systems using --with-dl-dld
- Systems using --without-universal-newlines
- MacOS 9
- Systems using --with-wctype-functions
- Win9x, WinME


Platform specific notes
-----------------------

(Some of these may no longer apply.  If you find you can build Python
on these platforms without the special directions mentioned here,
submit a documentation bug report to SourceForge (see Bug Reports
above) so we can remove them!)

Unix platforms: If your vendor still ships (and you still use) Berkeley DB
        1.85 you will need to edit Modules/Setup to build the bsddb185
        module and add a line to sitecustomize.py which makes it the
        default.  In Modules/Setup a line like

            bsddb185 bsddbmodule.c

        should work.  (You may need to add -I, -L or -l flags to direct the
        compiler and linker to your include files and libraries.)

XXX I think this next bit is out of date:

64-bit platforms: The modules audioop, and imageop don't work.
        The setup.py script disables them on 64-bit installations.
        Don't try to enable them in the Modules/Setup file.  They
        contain code that is quite wordsize sensitive.  (If you have a
        fix, let us know!)

Solaris: When using Sun's C compiler with threads, at least on Solaris
        2.5.1, you need to add the "-mt" compiler option (the simplest
        way is probably to specify the compiler with this option as
        the "CC" environment variable when running the configure
        script).

        When using GCC on Solaris, beware of binutils 2.13 or GCC
        versions built using it.  This mistakenly enables the
        -zcombreloc option which creates broken shared libraries on
        Solaris.  binutils 2.12 works, and the binutils maintainers
        are aware of the problem.  Binutils 2.13.1 only partially
        fixed things.  It appears that 2.13.2 solves the problem
        completely.  This problem is known to occur with Solaris 2.7
        and 2.8, but may also affect earlier and later versions of the
        OS.

        When the dynamic loader complains about errors finding shared
        libraries, such as

        ld.so.1: ./python: fatal: libstdc++.so.5: open failed:
        No such file or directory

        you need to first make sure that the library is available on
        your system. Then, you need to instruct the dynamic loader how
        to find it. You can choose any of the following strategies:

        1. When compiling Python, set LD_RUN_PATH to the directories
           containing missing libraries.
        2. When running Python, set LD_LIBRARY_PATH to these directories.
        3. Use crle(8) to extend the search path of the loader.
        4. Modify the installed GCC specs file, adding -R options into the
           *link: section.

        The complex object fails to compile on Solaris 10 with gcc 3.4 (at
        least up to 3.4.3).  To work around it, define Py_HUGE_VAL as
        HUGE_VAL(), e.g.:

          make CPPFLAGS='-D"Py_HUGE_VAL=HUGE_VAL()" -I. -I$(srcdir)/Include'
          ./python setup.py CPPFLAGS='-D"Py_HUGE_VAL=HUGE_VAL()"'

Linux:  A problem with threads and fork() was tracked down to a bug in
        the pthreads code in glibc version 2.0.5; glibc version 2.0.7
        solves the problem.  This causes the popen2 test to fail;
        problem and solution reported by Pablo Bleyer.

Red Hat Linux: Red Hat 9 built Python2.2 in UCS-4 mode and hacked
        Tcl to support it. To compile Python2.3 with Tkinter, you will
        need to pass --enable-unicode=ucs4 flag to ./configure.

        There's an executable /usr/bin/python which is Python
        1.5.2 on most older Red Hat installations; several key Red Hat tools
        require this version.  Python 2.1.x may be installed as
        /usr/bin/python2.  The Makefile installs Python as
        /usr/local/bin/python, which may or may not take precedence
        over /usr/bin/python, depending on how you have set up $PATH.

FreeBSD 3.x and probably platforms with NCurses that use libmytinfo or
        similar: When using cursesmodule, the linking is not done in
        the correct order with the defaults.  Remove "-ltermcap" from
        the readline entry in Setup, and use as curses entry: "curses
        cursesmodule.c -lmytinfo -lncurses -ltermcap" - "mytinfo" (so
        called on FreeBSD) should be the name of the auxiliary library
        required on your platform.  Normally, it would be linked
        automatically, but not necessarily in the correct order.

BSDI:   BSDI versions before 4.1 have known problems with threads,
        which can cause strange errors in a number of modules (for
        instance, the 'test_signal' test script will hang forever.)
        Turning off threads (with --with-threads=no) or upgrading to
        BSDI 4.1 solves this problem.

DEC Unix: Run configure with --with-dec-threads, or with
        --with-threads=no if no threads are desired (threads are on by
        default).  When using GCC, it is possible to get an internal
        compiler error if optimization is used.  This was reported for
        GCC 2.7.2.3 on selectmodule.c.  Manually compile the affected
        file without optimization to solve the problem.

DEC Ultrix: compile with GCC to avoid bugs in the native compiler,
        and pass SHELL=/bin/sh5 to Make when installing.

AIX:    A complete overhaul of the shared library support is now in
        place.  See Misc/AIX-NOTES for some notes on how it's done.
        (The optimizer bug reported at this place in previous releases
        has been worked around by a minimal code change.) If you get
        errors about pthread_* functions, during compile or during
        testing, try setting CC to a thread-safe (reentrant) compiler,
        like "cc_r".  For full C++ module support, set CC="xlC_r" (or
        CC="xlC" without thread support).

AIX 5.3: To build a 64-bit version with IBM's compiler, I used the
        following:

        export PATH=/usr/bin:/usr/vacpp/bin
        ./configure --with-gcc="xlc_r -q64" --with-cxx="xlC_r -q64" \
                    --disable-ipv6 AR="ar -X64"
        make

HP-UX:  When using threading, you may have to add -D_REENTRANT to the
        OPT variable in the top-level Makefile; reported by Pat Knight,
        this seems to make a difference (at least for HP-UX 10.20)
        even though pyconfig.h defines it. This seems unnecessary when
        using HP/UX 11 and later - threading seems to work "out of the
        box".

HP-UX ia64: When building on the ia64 (Itanium) platform using HP's
        compiler, some experience has shown that the compiler's
        optimiser produces a completely broken version of python
        (see http://bugs.python.org/814976). To work around this,
        edit the Makefile and remove -O from the OPT line.

        To build a 64-bit executable on an Itanium 2 system using HP's
        compiler, use these environment variables:

                CC=cc
                CXX=aCC
                BASECFLAGS="+DD64"
                LDFLAGS="+DD64 -lxnet"

        and call configure as:

                ./configure --without-gcc

        then *unset* the environment variables again before running
        make.  (At least one of these flags causes the build to fail
        if it remains set.)  You still have to edit the Makefile and
        remove -O from the OPT line.

HP PA-RISC 2.0: A recent bug report (http://bugs.python.org/546117)
        suggests that the C compiler in this 64-bit system has bugs
        in the optimizer that break Python.  Compiling without
        optimization solves the problems.

SCO:    The following apply to SCO 3 only; Python builds out of the box
        on SCO 5 (or so we've heard).

        1) Everything works much better if you add -U__STDC__ to the
        defs.  This is because all the SCO header files are broken.
        Anything that isn't mentioned in the C standard is
        conditionally excluded when __STDC__ is defined.

        2) Due to the U.S. export restrictions, SCO broke the crypt
        stuff out into a separate library, libcrypt_i.a so the LIBS
        needed be set to:

                LIBS=' -lsocket -lcrypt_i'

UnixWare: There are known bugs in the math library of the system, as well as
        problems in the handling of threads (calling fork in one
        thread may interrupt system calls in others). Therefore, test_math and
        tests involving threads will fail until those problems are fixed.

QNX:    Chris Herborth (chrish@qnx.com) writes:
        configure works best if you use GNU bash; a port is available on
        ftp.qnx.com in /usr/free.  I used the following process to build,
        test and install Python 1.5.x under QNX:

        1) CONFIG_SHELL=/usr/local/bin/bash CC=cc RANLIB=: \
            ./configure --verbose --without-gcc --with-libm=""

        2) edit Modules/Setup to activate everything that makes sense for
           your system... tested here at QNX with the following modules:

                array, audioop, binascii, cPickle, cStringIO, cmath,
                crypt, curses, errno, fcntl, gdbm, grp, imageop,
                _locale, math, md5, new, operator, parser, pcre,
                posix, pwd, readline, regex, reop,
                select, signal, socket, soundex, strop, struct,
                syslog, termios, time, timing, zlib, audioop, imageop

        3) make SHELL=/usr/local/bin/bash

           or, if you feel the need for speed:

           make SHELL=/usr/local/bin/bash OPT="-5 -Oil+nrt"

        4) make SHELL=/usr/local/bin/bash test

           Using GNU readline 2.2 seems to behave strangely, but I
           think that's a problem with my readline 2.2 port.  :-\

        5) make SHELL=/usr/local/bin/bash install

        If you get SIGSEGVs while running Python (I haven't yet, but
        I've only run small programs and the test cases), you're
        probably running out of stack; the default 32k could be a
        little tight.  To increase the stack size, edit the Makefile
        to read: LDFLAGS = -N 48k

BeOS:   See Misc/BeOS-NOTES for notes about compiling/installing
        Python on BeOS R3 or later.  Note that only the PowerPC
        platform is supported for R3; both PowerPC and x86 are
        supported for R4.

Cray T3E: Mark Hadfield (m.hadfield@niwa.co.nz) writes:
        Python can be built satisfactorily on a Cray T3E but based on
        my experience with the NIWA T3E (2002-05-22, version 2.2.1)
        there are a few bugs and gotchas. For more information see a
        thread on comp.lang.python in May 2002 entitled "Building
        Python on Cray T3E".

        1) Use Cray's cc and not gcc. The latter was reported not to
           work by Konrad Hinsen. It may work now, but it may not.

        2) To set sys.platform to something sensible, pass the
           following environment variable to the configure script:

             MACHDEP=unicosmk

        2) Run configure with option "--enable-unicode=ucs4".

        3) The Cray T3E does not support dynamic linking, so extension
           modules have to be built by adding (or uncommenting) lines
           in Modules/Setup. The minimum set of modules is

             posix, new, _sre, unicodedata

           On NIWA's vanilla T3E system the following have also been
           included successfully:

             _codecs, _locale, _socket, _symtable, _testcapi, _weakref
             array, binascii, cmath, cPickle, crypt, cStringIO, dbm
             errno, fcntl, grp, math, md5, operator, parser, pcre, pwd
             regex, rotor, select, struct, strop, syslog, termios
             time, timing, xreadlines

        4) Once the python executable and library have been built, make
           will execute setup.py, which will attempt to build remaining
           extensions and link them dynamically. Each of these attempts
           will fail but should not halt the make process. This is
           normal.

        5) Running "make test" uses a lot of resources and causes
           problems on our system. You might want to try running tests
           singly or in small groups.

SGI:    SGI's standard "make" utility (/bin/make or /usr/bin/make)
        does not check whether a command actually changed the file it
        is supposed to build.  This means that whenever you say "make"
        it will redo the link step.  The remedy is to use SGI's much
        smarter "smake" utility (/usr/sbin/smake), or GNU make.  If
        you set the first line of the Makefile to #!/usr/sbin/smake
        smake will be invoked by make (likewise for GNU make).

        WARNING: There are bugs in the optimizer of some versions of
        SGI's compilers that can cause bus errors or other strange
        behavior, especially on numerical operations.  To avoid this,
        try building with "make OPT=".

OS/2:   If you are running Warp3 or Warp4 and have IBM's VisualAge C/C++
        compiler installed, just change into the pc\os2vacpp directory
        and type NMAKE.  Threading and sockets are supported by default
        in the resulting binaries of PYTHON15.DLL and PYTHON.EXE.

Reliant UNIX: The thread support does not compile on Reliant UNIX, and
        there is a (minor) problem in the configure script for that
        platform as well.  This should be resolved in time for a
        future release.

MacOSX: The tests will crash on both 10.1 and 10.2 with SEGV in
        test_re and test_sre due to the small default stack size.  If
        you set the stack size to 2048 before doing a "make test" the
        failure can be avoided.  If you're using the tcsh or csh shells,
        use "limit stacksize 2048" and for the bash shell (the default
        as of OSX 10.3), use "ulimit -s 2048".

        On naked Darwin you may want to add the configure option
        "--disable-toolbox-glue" to disable the glue code for the Carbon
        interface modules. The modules themselves are currently only built
        if you add the --enable-framework option, see below.

        On a clean OSX /usr/local does not exist. Do a
        "sudo mkdir -m 775 /usr/local"
        before you do a make install. It is probably not a good idea to
        do "sudo make install" which installs everything as superuser,
        as this may later cause problems when installing distutils-based
        additions.

        Some people have reported problems building Python after using "fink"
        to install additional unix software. Disabling fink (remove all 
        references to /sw from your .profile or .login) should solve this.

        You may want to try the configure option "--enable-framework"
        which installs Python as a framework. The location can be set
        as argument to the --enable-framework option (default
        /Library/Frameworks). A framework install is probably needed if you
        want to use any Aqua-based GUI toolkit (whether Tkinter, wxPython,
        Carbon, Cocoa or anything else).

        You may also want to try the configure option "--enable-universalsdk"
        which builds Python as a universal binary with support for the 
        i386 and PPC architetures. This requires Xcode 2.1 or later to build.

        See Mac/README for more information on framework and 
        universal builds.

Cygwin: With recent (relative to the time of writing, 2001-12-19)
        Cygwin installations, there are problems with the interaction
        of dynamic linking and fork().  This manifests itself in build
        failures during the execution of setup.py.

        There are two workarounds that both enable Python (albeit
        without threading support) to build and pass all tests on
        NT/2000 (and most likely XP as well, though reports of testing
        on XP would be appreciated).

        The workarounds:

        (a) the band-aid fix is to link the _socket module statically
        rather than dynamically (which is the default).

        To do this, run "./configure --with-threads=no" including any
        other options you need (--prefix, etc.).  Then in Modules/Setup
        uncomment the lines:

        #SSL=/usr/local/ssl
        #_socket socketmodule.c \
        #       -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
        #       -L$(SSL)/lib -lssl -lcrypto

        and remove "local/" from the SSL variable.  Finally, just run
        "make"!

        (b) The "proper" fix is to rebase the Cygwin DLLs to prevent
        base address conflicts.  Details on how to do this can be
        found in the following mail:

           http://sources.redhat.com/ml/cygwin/2001-12/msg00894.html

        It is hoped that a version of this solution will be
        incorporated into the Cygwin distribution fairly soon.

        Two additional problems:

        (1) Threading support should still be disabled due to a known
        bug in Cygwin pthreads that causes test_threadedtempfile to
        hang.

        (2) The _curses module does not build.  This is a known
        Cygwin ncurses problem that should be resolved the next time
        that this package is released.

        On older versions of Cygwin, test_poll may hang and test_strftime
        may fail.

        The situation on 9X/Me is not accurately known at present.
        Some time ago, there were reports that the following
        regression tests failed:

            test_pwd
            test_select (hang)
            test_socket

        Due to the test_select hang on 9X/Me, one should run the
        regression test using the following:

            make TESTOPTS='-l -x test_select' test

        News regarding these platforms with more recent Cygwin
        versions would be appreciated!

Windows: When executing Python scripts on the command line using file type
        associations (i.e. starting "script.py" instead of "python script.py"),
        redirects may not work unless you set a specific registry key.  See
        the Knowledge Base article <http://support.microsoft.com/kb/321788>.


Configuring the bsddb and dbm modules
-------------------------------------

Beginning with Python version 2.3, the PyBsddb package
<http://pybsddb.sf.net/> was adopted into Python as the bsddb package,
exposing a set of package-level functions which provide
backwards-compatible behavior.  Only versions 3.3 through 4.4 of
Sleepycat's libraries provide the necessary API, so older versions
aren't supported through this interface.  The old bsddb module has
been retained as bsddb185, though it is not built by default.  Users
wishing to use it will have to tweak Modules/Setup to build it.  The
dbm module will still be built against the Sleepycat libraries if
other preferred alternatives (ndbm, gdbm) are not found.

Building the sqlite3 module
---------------------------

To build the sqlite3 module, you'll need the sqlite3 or libsqlite3
packages installed, including the header files. Many modern operating
systems distribute the headers in a separate package to the library -
often it will be the same name as the main package, but with a -dev or
-devel suffix. 

The version of pysqlite2 that's including in Python needs sqlite3 3.0.8
or later. setup.py attempts to check that it can find a correct version.

Configuring threads
-------------------

As of Python 2.0, threads are enabled by default.  If you wish to
compile without threads, or if your thread support is broken, pass the
--with-threads=no switch to configure.  Unfortunately, on some
platforms, additional compiler and/or linker options are required for
threads to work properly.  Below is a table of those options,
collected by Bill Janssen.  We would love to automate this process
more, but the information below is not enough to write a patch for the
configure.in file, so manual intervention is required.  If you patch
the configure.in file and are confident that the patch works, please
send in the patch.  (Don't bother patching the configure script itself
-- it is regenerated each time the configure.in file changes.)

Compiler switches for threads
.............................

The definition of _REENTRANT should be configured automatically, if
that does not work on your system, or if _REENTRANT is defined
incorrectly, please report that as a bug.

    OS/Compiler/threads                     Switches for use with threads
    (POSIX is draft 10, DCE is draft 4)     compile & link

    SunOS 5.{1-5}/{gcc,SunPro cc}/solaris   -mt
    SunOS 5.5/{gcc,SunPro cc}/POSIX         (nothing)
    DEC OSF/1 3.x/cc/DCE                    -threads
            (butenhof@zko.dec.com)
    Digital UNIX 4.x/cc/DCE                 -threads
            (butenhof@zko.dec.com)
    Digital UNIX 4.x/cc/POSIX               -pthread
            (butenhof@zko.dec.com)
    AIX 4.1.4/cc_r/d7                       (nothing)
            (buhrt@iquest.net)
    AIX 4.1.4/cc_r4/DCE                     (nothing)
            (buhrt@iquest.net)
    IRIX 6.2/cc/POSIX                       (nothing)
            (robertl@cwi.nl)


Linker (ld) libraries and flags for threads
...........................................

    OS/threads                          Libraries/switches for use with threads

    SunOS 5.{1-5}/solaris               -lthread
    SunOS 5.5/POSIX                     -lpthread
    DEC OSF/1 3.x/DCE                   -lpthreads -lmach -lc_r -lc
            (butenhof@zko.dec.com)
    Digital UNIX 4.x/DCE                -lpthreads -lpthread -lmach -lexc -lc
            (butenhof@zko.dec.com)
    Digital UNIX 4.x/POSIX              -lpthread -lmach -lexc -lc
            (butenhof@zko.dec.com)
    AIX 4.1.4/{draft7,DCE}              (nothing)
            (buhrt@iquest.net)
    IRIX 6.2/POSIX                      -lpthread
            (jph@emilia.engr.sgi.com)


Building a shared libpython
---------------------------

Starting with Python 2.3, the majority of the interpreter can be built
into a shared library, which can then be used by the interpreter
executable, and by applications embedding Python. To enable this feature,
configure with --enable-shared.

If you enable this feature, the same object files will be used to create
a static library.  In particular, the static library will contain object
files using position-independent code (PIC) on platforms where PIC flags
are needed for the shared library.


Configuring additional built-in modules
---------------------------------------

Starting with Python 2.1, the setup.py script at the top of the source
distribution attempts to detect which modules can be built and
automatically compiles them.  Autodetection doesn't always work, so
you can still customize the configuration by editing the Modules/Setup
file; but this should be considered a last resort.  The rest of this
section only applies if you decide to edit the Modules/Setup file.
You also need this to enable static linking of certain modules (which
is needed to enable profiling on some systems).

This file is initially copied from Setup.dist by the configure script;
if it does not exist yet, create it by copying Modules/Setup.dist
yourself (configure will never overwrite it).  Never edit Setup.dist
-- always edit Setup or Setup.local (see below).  Read the comments in
the file for information on what kind of edits are allowed.  When you
have edited Setup in the Modules directory, the interpreter will
automatically be rebuilt the next time you run make (in the toplevel
directory).

Many useful modules can be built on any Unix system, but some optional
modules can't be reliably autodetected.  Often the quickest way to
determine whether a particular module works or not is to see if it
will build: enable it in Setup, then if you get compilation or link
errors, disable it -- you're either missing support or need to adjust
the compilation and linking parameters for that module.

On SGI IRIX, there are modules that interface to many SGI specific
system libraries, e.g. the GL library and the audio hardware.  These
modules will not be built by the setup.py script.

In addition to the file Setup, you can also edit the file Setup.local.
(the makesetup script processes both).  You may find it more
convenient to edit Setup.local and leave Setup alone.  Then, when
installing a new Python version, you can copy your old Setup.local
file.


Setting the optimization/debugging options
------------------------------------------

If you want or need to change the optimization/debugging options for
the C compiler, assign to the OPT variable on the toplevel make
command; e.g. "make OPT=-g" will build a debugging version of Python
on most platforms.  The default is OPT=-O; a value for OPT in the
environment when the configure script is run overrides this default
(likewise for CC; and the initial value for LIBS is used as the base
set of libraries to link with).

When compiling with GCC, the default value of OPT will also include
the -Wall and -Wstrict-prototypes options.

Additional debugging code to help debug memory management problems can
be enabled by using the --with-pydebug option to the configure script.

For flags that change binary compatibility, use the EXTRA_CFLAGS
variable.


Profiling
---------

If you want C profiling turned on, the easiest way is to run configure
with the CC environment variable to the necessary compiler
invocation.  For example, on Linux, this works for profiling using
gprof(1):

    CC="gcc -pg" ./configure

Note that on Linux, gprof apparently does not work for shared
libraries.  The Makefile/Setup mechanism can be used to compile and
link most extension modules statically.


Coverage checking
-----------------

For C coverage checking using gcov, run "make coverage".  This will
build a Python binary with profiling activated, and a ".gcno" and
".gcda" file for every source file compiled with that option.  With
the built binary, now run the code whose coverage you want to check.
Then, you can see coverage statistics for each individual source file
by running gcov, e.g.

    gcov -o Modules zlibmodule

This will create a "zlibmodule.c.gcov" file in the current directory
containing coverage info for that source file.

This works only for source files statically compiled into the
executable; use the Makefile/Setup mechanism to compile and link
extension modules you want to coverage-check statically.


Testing
-------

To test the interpreter, type "make test" in the top-level directory.
This runs the test set twice (once with no compiled files, once with
the compiled files left by the previous test run).  The test set
produces some output.  You can generally ignore the messages about
skipped tests due to optional features which can't be imported.
If a message is printed about a failed test or a traceback or core
dump is produced, something is wrong.  On some Linux systems (those
that are not yet using glibc 6), test_strftime fails due to a
non-standard implementation of strftime() in the C library. Please
ignore this, or upgrade to glibc version 6.

By default, tests are prevented from overusing resources like disk space and
memory.  To enable these tests, run "make testall".

IMPORTANT: If the tests fail and you decide to mail a bug report,
*don't* include the output of "make test".  It is useless.  Run the
failing test manually, as follows:

        ./python Lib/test/regrtest.py -v test_whatever

(substituting the top of the source tree for '.' if you built in a
different directory).  This runs the test in verbose mode.


Installing
----------

To install the Python binary, library modules, shared library modules
(see below), include files, configuration files, and the manual page,
just type

        make install

This will install all platform-independent files in subdirectories of
the directory given with the --prefix option to configure or to the
`prefix' Make variable (default /usr/local).  All binary and other
platform-specific files will be installed in subdirectories if the
directory given by --exec-prefix or the `exec_prefix' Make variable
(defaults to the --prefix directory) is given.

If DESTDIR is set, it will be taken as the root directory of the
installation, and files will be installed into $(DESTDIR)$(prefix),
$(DESTDIR)$(exec_prefix), etc.

All subdirectories created will have Python's version number in their
name, e.g. the library modules are installed in
"/usr/local/lib/python<version>/" by default, where <version> is the
<major>.<minor> release number (e.g. "2.1").  The Python binary is
installed as "python<version>" and a hard link named "python" is
created.  The only file not installed with a version number in its
name is the manual page, installed as "/usr/local/man/man1/python.1"
by default.

If you want to install multiple versions of Python see the section below
entitled "Installing multiple versions".

The only thing you may have to install manually is the Python mode for
Emacs found in Misc/python-mode.el.  (But then again, more recent
versions of Emacs may already have it.)  Follow the instructions that
came with Emacs for installation of site-specific files.

On Mac OS X, if you have configured Python with --enable-framework, you
should use "make frameworkinstall" to do the installation. Note that this
installs the Python executable in a place that is not normally on your
PATH, you may want to set up a symlink in /usr/local/bin.


Installing multiple versions
----------------------------

On Unix and Mac systems if you intend to install multiple versions of Python
using the same installation prefix (--prefix argument to the configure
script) you must take care that your primary python executable is not
overwritten by the installation of a different version.  All files and
directories installed using "make altinstall" contain the major and minor
version and can thus live side-by-side.  "make install" also creates
${prefix}/bin/python which refers to ${prefix}/bin/pythonX.Y.  If you intend
to install multiple versions using the same prefix you must decide which
version (if any) is your "primary" version.  Install that version using
"make install".  Install all other versions using "make altinstall".

For example, if you want to install Python 2.5, 2.6 and 3.0 with 2.6 being
the primary version, you would execute "make install" in your 2.6 build
directory and "make altinstall" in the others.


Configuration options and variables
-----------------------------------

Some special cases are handled by passing options to the configure
script.

WARNING: if you rerun the configure script with different options, you
must run "make clean" before rebuilding.  Exceptions to this rule:
after changing --prefix or --exec-prefix, all you need to do is remove
Modules/getpath.o.

--with(out)-gcc: The configure script uses gcc (the GNU C compiler) if
        it finds it.  If you don't want this, or if this compiler is
        installed but broken on your platform, pass the option
        --without-gcc.  You can also pass "CC=cc" (or whatever the
        name of the proper C compiler is) in the environment, but the
        advantage of using --without-gcc is that this option is
        remembered by the config.status script for its --recheck
        option.

--prefix, --exec-prefix: If you want to install the binaries and the
        Python library somewhere else than in /usr/local/{bin,lib},
        you can pass the option --prefix=DIRECTORY; the interpreter
        binary will be installed as DIRECTORY/bin/python and the
        library files as DIRECTORY/lib/python/*.  If you pass
        --exec-prefix=DIRECTORY (as well) this overrides the
        installation prefix for architecture-dependent files (like the
        interpreter binary).  Note that --prefix=DIRECTORY also
        affects the default module search path (sys.path), when
        Modules/config.c is compiled.  Passing make the option
        prefix=DIRECTORY (and/or exec_prefix=DIRECTORY) overrides the
        prefix set at configuration time; this may be more convenient
        than re-running the configure script if you change your mind
        about the install prefix.

--with-readline: This option is no longer supported.  GNU
        readline is automatically enabled by setup.py when present.

--with-threads: On most Unix systems, you can now use multiple
        threads, and support for this is enabled by default.  To
        disable this, pass --with-threads=no.  If the library required
        for threads lives in a peculiar place, you can use
        --with-thread=DIRECTORY.  IMPORTANT: run "make clean" after
        changing (either enabling or disabling) this option, or you
        will get link errors!  Note: for DEC Unix use
        --with-dec-threads instead.

--with-sgi-dl: On SGI IRIX 4, dynamic loading of extension modules is
        supported by the "dl" library by Jack Jansen, which is
        ftp'able from ftp://ftp.cwi.nl/pub/dynload/dl-1.6.tar.Z.
        This is enabled (after you've ftp'ed and compiled the dl
        library) by passing --with-sgi-dl=DIRECTORY where DIRECTORY
        is the absolute pathname of the dl library.  (Don't bother on
        IRIX 5, it already has dynamic linking using SunOS style
        shared libraries.)  THIS OPTION IS UNSUPPORTED.

--with-dl-dld: Dynamic loading of modules is rumored to be supported
        on some other systems: VAX (Ultrix), Sun3 (SunOS 3.4), Sequent
        Symmetry (Dynix), and Atari ST.  This is done using a
        combination of the GNU dynamic loading package
        (ftp://ftp.cwi.nl/pub/dynload/dl-dld-1.1.tar.Z) and an
        emulation of the SGI dl library mentioned above (the emulation
        can be found at
        ftp://ftp.cwi.nl/pub/dynload/dld-3.2.3.tar.Z).  To
        enable this, ftp and compile both libraries, then call
        configure, passing it the option
        --with-dl-dld=DL_DIRECTORY,DLD_DIRECTORY where DL_DIRECTORY is
        the absolute pathname of the dl emulation library and
        DLD_DIRECTORY is the absolute pathname of the GNU dld library.
        (Don't bother on SunOS 4 or 5, they already have dynamic
        linking using shared libraries.)  THIS OPTION IS UNSUPPORTED.

--with-libm, --with-libc: It is possible to specify alternative
        versions for the Math library (default -lm) and the C library
        (default the empty string) using the options
        --with-libm=STRING and --with-libc=STRING, respectively.  For
        example, if your system requires that you pass -lc_s to the C
        compiler to use the shared C library, you can pass
        --with-libc=-lc_s. These libraries are passed after all other
        libraries, the C library last.

--with-libs='libs': Add 'libs' to the LIBS that the python interpreter
        is linked against.

--with-cxx-main=<compiler>: If you plan to use C++ extension modules,
        then -- on some platforms -- you need to compile python's main()
        function with the C++ compiler. With this option, make will use
        <compiler> to compile main() *and* to link the python executable.
        It is likely that the resulting executable depends on the C++
        runtime library of <compiler>. (The default is --without-cxx-main.)

        There are platforms that do not require you to build Python
        with a C++ compiler in order to use C++ extension modules.
        E.g., x86 Linux with ELF shared binaries and GCC 3.x, 4.x is such
        a platform. We recommend that you configure Python
        --without-cxx-main on those platforms because a mismatch
        between the C++ compiler version used to build Python and to
        build a C++ extension module is likely to cause a crash at
        runtime.

        The Python installation also stores the variable CXX that
        determines, e.g., the C++ compiler distutils calls by default
        to build C++ extensions. If you set CXX on the configure command
        line to any string of non-zero length, then configure won't
        change CXX. If you do not preset CXX but pass
        --with-cxx-main=<compiler>, then configure sets CXX=<compiler>.
        In all other cases, configure looks for a C++ compiler by
        some common names (c++, g++, gcc, CC, cxx, cc++, cl) and sets
        CXX to the first compiler it finds. If it does not find any
        C++ compiler, then it sets CXX="".

        Similarly, if you want to change the command used to link the
        python executable, then set LINKCC on the configure command line.


--with-pydebug:  Enable additional debugging code to help track down
        memory management problems.  This allows printing a list of all
        live objects when the interpreter terminates.

--with(out)-universal-newlines: enable reading of text files with
        foreign newline convention (default: enabled). In other words,
        any of \r, \n or \r\n is acceptable as end-of-line character.
        If enabled import and execfile will automatically accept any newline
        in files. Python code can open a file with open(file, 'U') to
        read it in universal newline mode. THIS OPTION IS UNSUPPORTED.

--with-tsc: Profile using the Pentium timestamping counter (TSC).

--with-system-ffi:  Build the _ctypes extension module using an ffi
        library installed on the system.

--with-dbmliborder=db1:db2:...:  Specify the order that backends for the
	dbm extension are checked. Valid value is a colon separated string
	with the backend names `ndbm', `gdbm' and `bdb'.

Building for multiple architectures (using the VPATH feature)
-------------------------------------------------------------

If your file system is shared between multiple architectures, it
usually is not necessary to make copies of the sources for each
architecture you want to support.  If the make program supports the
VPATH feature, you can create an empty build directory for each
architecture, and in each directory run the configure script (on the
appropriate machine with the appropriate options).  This creates the
necessary subdirectories and the Makefiles therein.  The Makefiles
contain a line VPATH=... which points to a directory containing the
actual sources.  (On SGI systems, use "smake -J1" instead of "make" if
you use VPATH -- don't try gnumake.)

For example, the following is all you need to build a minimal Python
in /usr/tmp/python (assuming ~guido/src/python is the toplevel
directory and you want to build in /usr/tmp/python):

        $ mkdir /usr/tmp/python
        $ cd /usr/tmp/python
        $ ~guido/src/python/configure
        [...]
        $ make
        [...]
        $

Note that configure copies the original Setup file to the build
directory if it finds no Setup file there.  This means that you can
edit the Setup file for each architecture independently.  For this
reason, subsequent changes to the original Setup file are not tracked
automatically, as they might overwrite local changes.  To force a copy
of a changed original Setup file, delete the target Setup file.  (The
makesetup script supports multiple input files, so if you want to be
fancy you can change the rules to create an empty Setup.local if it
doesn't exist and run it with arguments $(srcdir)/Setup Setup.local;
however this assumes that you only need to add modules.)

Also note that you can't use a workspace for VPATH and non VPATH builds. The
object files left behind by one version confuses the other.


Building on non-UNIX systems
----------------------------

For Windows (2000/NT/ME/98/95), assuming you have MS VC++ 7.1, the
project files are in PCbuild, the workspace is pcbuild.dsw.  See
PCbuild\readme.txt for detailed instructions.

For other non-Unix Windows compilers, in particular MS VC++ 6.0 and
for OS/2, enter the directory "PC" and read the file "readme.txt".

For the Mac, a separate source distribution will be made available,
for use with the CodeWarrior compiler.  If you are interested in Mac
development, join the PythonMac Special Interest Group
(http://www.python.org/sigs/pythonmac-sig/, or send email to
pythonmac-sig-request@python.org).

Of course, there are also binary distributions available for these
platforms -- see http://www.python.org/.

To port Python to a new non-UNIX system, you will have to fake the
effect of running the configure script manually (for Mac and PC, this
has already been done for you).  A good start is to copy the file
pyconfig.h.in to pyconfig.h and edit the latter to reflect the actual
configuration of your system.  Most symbols must simply be defined as
1 only if the corresponding feature is present and can be left alone
otherwise; however the *_t type symbols must be defined as some
variant of int if they need to be defined at all.

For all platforms, it's important that the build arrange to define the
preprocessor symbol NDEBUG on the compiler command line in a release
build of Python (else assert() calls remain in the code, hurting
release-build performance).  The Unix, Windows and Mac builds already
do this.


Miscellaneous issues
====================

Emacs mode
----------

There's an excellent Emacs editing mode for Python code; see the file
Misc/python-mode.el.  Originally written by the famous Tim Peters, it is now
maintained by the equally famous Barry Warsaw.  The latest version, along with
various other contributed Python-related Emacs goodies, is online at
http://launchpad.net/python-mode/.


Tkinter
-------

The setup.py script automatically configures this when it detects a
usable Tcl/Tk installation.  This requires Tcl/Tk version 8.0 or
higher.

For more Tkinter information, see the Tkinter Resource page:
http://www.python.org/topics/tkinter/

There are demos in the Demo/tkinter directory.

Note that there's a Python module called "Tkinter" (capital T) which
lives in Lib/lib-tk/Tkinter.py, and a C module called "_tkinter"
(lower case t and leading underscore) which lives in
Modules/_tkinter.c.  Demos and normal Tk applications import only the
Python Tkinter module -- only the latter imports the C _tkinter
module.  In order to find the C _tkinter module, it must be compiled
and linked into the Python interpreter -- the setup.py script does
this.  In order to find the Python Tkinter module, sys.path must be
set correctly -- normal installation takes care of this.


Distribution structure
----------------------

Most subdirectories have their own README files.  Most files have
comments.

Demo/           Demonstration scripts, modules and programs
Doc/            Documentation sources (reStructuredText)
Grammar/        Input for the parser generator
Include/        Public header files
LICENSE         Licensing information
Lib/            Python library modules
Mac/            Macintosh specific resources
Makefile.pre.in Source from which config.status creates the Makefile.pre
Misc/           Miscellaneous useful files
Modules/        Implementation of most built-in modules
Objects/        Implementation of most built-in object types
PC/             Files specific to PC ports (DOS, Windows, OS/2)
PCbuild/        Build directory for Microsoft Visual C++
Parser/         The parser and tokenizer and their input handling
Python/         The byte-compiler and interpreter
README          The file you're reading now
RISCOS/         Files specific to RISC OS port
Tools/          Some useful programs written in Python
pyconfig.h.in   Source from which pyconfig.h is created (GNU autoheader output)
configure       Configuration shell script (GNU autoconf output)
configure.in    Configuration specification (input for GNU autoconf)
install-sh      Shell script used to install files
setup.py        Python script used to build extension modules

The following files will (may) be created in the toplevel directory by
the configuration and build processes:

Makefile        Build rules
Makefile.pre    Build rules before running Modules/makesetup
buildno         Keeps track of the build number
config.cache    Cache of configuration variables
pyconfig.h      Configuration header
config.log      Log from last configure run
config.status   Status from last run of the configure script
getbuildinfo.o  Object file from Modules/getbuildinfo.c
libpython<version>.a    The library archive
python          The executable interpreter
reflog.txt      Output from running the regression suite with the -R flag 
tags, TAGS      Tags files for vi and Emacs


That's all, folks!
------------------


--Guido van Rossum (home page: http://www.python.org/~guido/)

This directory contains a collection of programs to demonstrate
the features of the Tk toolkit.  The programs are all scripts for
"wish", a windowing shell.  If wish has been installed on your path
then you can invoke any of the programs in this directory just
by typing its file name to your command shell under Unix.  Otherwise
invoke wish with the file as its first argument, e.g., "wish hello".
The rest of this file contains a brief description of each program.
Files with names ending in ".tcl" are procedure packages used by one
or more of the demo programs;  they can't be used as programs by
themselves so they aren't described below.

hello -		Creates a single button;  if you click on it, a message
		is typed and the application terminates.

widget -	Contains a collection of demonstrations of the widgets
		currently available in the Tk library.  Most of the .tcl
		files are scripts for individual demos available through
		the "widget" program.

ixset -		A simple Tk-based wrapper for the "xset" program, which
		allows you to interactively query and set various X options
		such as mouse acceleration and bell volume.  Thanks to
		Pierre David for contributing this example.

rolodex -	A mock-up of a simple rolodex application.  It has much of
		the user interface for such an application but no back-end
		database.  This program was written in response to Tom
		LaStrange's toolkit benchmark challenge.

tcolor -	A color editor.  Allows you to edit colors in several
		different ways, and will also perform automatic updates
		using "send".

rmt -		Allows you to "hook-up" remotely to any Tk application
		on the display.  Select an application with the menu,
		then just type commands:  they'll go to that application.

timer -		Displays a seconds timer with start and stop buttons.
		Control-c and control-q cause it to exit.

browse -	A simple directory browser.  Invoke it with and argument
		giving the name of the directory you'd like to browse.
		Double-click on files or subdirectories to browse them.
		Control-c and control-q cause the program to exit.

RCS: @(#) $Id: README,v 1.3 2003/11/05 13:20:21 dkf Exp $

README - images directory

RCS: @(#) $Id: README,v 1.2 1998/09/14 18:23:32 stanton Exp $


This directory includes images for the Tcl Logo and the Tcl Powered
Logo.  Please feel free to use the Tcl Powered Logo on any of your
products that employ the use of Tcl or Tk.  The Tcl logo may also be
used to promote Tcl in your product documentation, web site or other
places you so desire.



Pynche - The PYthonically Natural Color and Hue Editor

Contact: Barry A. Warsaw
Email:   bwarsaw@python.org
Version: 1.3

Introduction

    Pynche is a color editor based largely on a similar program that I
    originally wrote back in 1987 for the Sunview window system.  That
    editor was called ICE, the Interactive Color Editor.  I'd always
    wanted to port this program to X but didn't feel like hacking X
    and C code to do it.  Fast forward many years, to where Python +
    Tkinter provides such a nice programming environment, with enough
    power, that I finally buckled down and re-implemented it.  I
    changed the name because these days, too many other systems have
    the acronym `ICE'.

    Pynche should work with any variant of Python after 1.5.2
    (e.g. 2.0.1 and 2.1.1), using Tk 8.0.x.  It's been tested on
    Solaris 2.6, Windows NT 4, and various Linux distros.  You'll want
    to be sure to have at least Tk 8.0.3 for Windows.  Also, Pynche is
    very colormap intensive, so it doesn't work very well on 8-bit
    graphics cards; 24bit+ graphics cards are so cheap these days,
    I'll probably never "fix" that.

    Pynche must find a text database of colors names in order to
    provide `nearest' color matching.  Pynche is distributed with an
    rgb.txt file from the X11R6.4 distribution for this reason, along
    with other "Web related" database (see below).  You can use a
    different file with the -d option.  The file xlicense.txt contains
    the license only for rgb.txt and both files are in the X/
    subdirectory.

    Pynche is pronounced: Pin'-chee


Running Standalone

    On Unix, start it by running the `pynche' script.  On Windows, run
    pynche.pyw to inhibit the console window.  When run from the
    command line, the following options are recognized:

    --database file
    -d file
        Alternate location of the color database file.  Without this
        option, the first valid file found will be used (see below).

    --initfile file
    -i file
        Alternate location of the persistent initialization file.  See 
        the section on Persistency below.

    --ignore
    -X
        Ignore the persistent initialization file when starting up.
        Pynche will still write the current option settings to the
        persistent init file when it quits.

    --help
    -h
        Print the help message.

    initialcolor
        a Tk color name or #rrggbb color spec to be used as the
        initially selected color.  This overrides any color saved in
        the persistent init file.  Since `#' needs to be escaped in
        many shells, it is optional in the spec (e.g. #45dd1f is the
        same as 45dd1f).


Running as a Modal Dialog

    Pynche can be run as a modal dialog, inside another application,
    say as a general color chooser.  In fact, Grail 0.6 uses Pynche
    and a future version of IDLE may as well.  Pynche supports the API
    implemented by the Tkinter standard tkColorChooser module, with a
    few changes as described below.  By importing pyColorChooser from
    the Pynche package, you can run

        pyColorChooser.askcolor()

    which will popup Pynche as a modal dialog, and return the selected 
    color.

    There are some UI differences when running as a modal
    vs. standalone.  When running as a modal, there is no "Quit" menu
    item under the "File" menu.  Instead there are "Okay" and "Cancel"
    buttons.

    When "Okay" is hit, askcolor() returns the tuple

        ((r, g, b), "name")

    where r, g, and b are red, green, and blue color values
    respectively (in the range 0 to 255).  "name" will be a color name
    from the color database if there is an exact match, otherwise it
    will be an X11 color spec of the form "#rrggbb".  Note that this
    is different than tkColorChooser, which doesn't know anything
    about color names.

    askcolor() supports the following optional keyword arguments:

        color
            the color to set as the initial selected color

        master[*]
            the master window to use as the parent of the modal
            dialog.  Without this argument, pyColorChooser will create 
            its own Tkinter.Tk instance as the master.  This may not
            be what you want.

        databasefile
            similar to the --database option, the value must be a
            file name

        initfile[*]
            similar to the --initfile option, the value must be a
            file name

        ignore[*]
            similar to the --ignore flag, the value is a boolean

        wantspec
            When this is true, the "name" field in the return tuple
            will always be a color spec of the form "#rrggbb".  It
            will not return a color name even if there is a match;
            this is so pyColorChooser can exactly match the API of
            tkColorChooser.

        [*] these arguments must be specified the first time
        askcolor() is used and cannot be changed on subsequent calls.


The Colorstrip Window

    The top part of the main Pynche window contains the "variation
    strips".  Each strip contains a number of "color chips".  The
    strips always indicate the currently selected color by a highlight
    rectangle around the selected color chip, with an arrow pointing
    to the chip.  Each arrow has an associated number giving you the
    color value along the variation's axis.  Each variation strip
    shows you the colors that are reachable from the selected color by
    varying just one axis of the color solid.

    For example, when the selected color is (in Red/Green/Blue
    notation) 127/127/127, the Red Variations strip shows you every
    color in the range 0/127/127 to 255/127/127.  Similarly for the
    green and blue axes.  You can select any color by clicking on its
    chip.  This will update the highlight rectangle and the arrow, as
    well as other displays in Pynche.

    Click on "Update while dragging" if you want Pynche to update the
    selected color while you drag along any variation strip (this will
    be a bit slower).  Click on "Hexadecimal" to display the arrow
    numbers in hex.

    There are also two shortcut buttons in this window, which
    auto-select Black (0/0/0) and White (255/255/255).


The Proof Window

    In the lower left corner of the main window you see two larger
    color chips.  The Selected chip shows you a larger version of the
    color selected in the variation strips, along with its X11 color
    specification.  The Nearest chip shows you the closest color in
    the X11 database to the selected color, giving its X11 color
    specification, and below that, its X11 color name.  When the
    Selected chip color exactly matches the Nearest chip color, you
    will see the color name appear below the color specification for
    the Selected chip.
    
    Clicking on the Nearest color chip selects that color.  Color
    distance is calculated in the 3D space of the RGB color solid and
    if more than one color name is the same distance from the selected
    color, the first one found will be chosen.

    Note that there may be more than one X11 color name for the same
    RGB value.  In that case, the first one found in the text database
    is designated the "primary" name, and this is shown under the
    Nearest chip.  The other names are "aliases" and they are visible
    in the Color List Window (see below).

    Both the color specifications and color names are selectable for
    copying and pasting into another window.


The Type-in Window

    At the lower right of the main window are three entry fields.
    Here you can type numeric values for any of the three color axes.
    Legal values are between 0 and 255, and these fields do not allow
    you to enter illegal values.  You must hit Enter or Tab to select
    the new color.

    Click on "Update while typing" if you want Pynche to select the
    color on every keystroke (well, every one that produces a legal
    value!)  Click on "Hexadecimal" to display and enter color values
    in hex.


Other Views

    There are three secondary windows which are not displayed by
    default.  You can bring these up via the "View" menu on the main
    Pynche window.


The Text Window

    The "Text Window" allows you to see what effects various colors
    have on the standard Tk text widget elements.  In the upper part
    of the window is a plain Tk text widget and here you can edit the
    text, select a region of text, etc.  Below this is a button "Track
    color changes".  When this is turned on, any colors selected in
    the other windows will change the text widget element specified in
    the radio buttons below.  When this is turned off, text widget
    elements are not affected by color selection.

    You can choose which element gets changed by color selection by
    clicking on one of the radio buttons in the bottom part of this
    window.  Text foreground and background affect the text in the
    upper part of the window.  Selection foreground and background
    affect the colors of the primary selection which is what you see
    when you click the middle button (depending on window system) and
    drag it through some text.

    The Insertion is the insertion cursor in the text window, where
    new text will be inserted as you type.  The insertion cursor only
    has a background.


The Color List Window

    The "Color List" window shows every named color in the color name
    database (this window may take a while to come up).  In the upper
    part of the window you see a scrolling list of all the color names
    in the database, in alphabetical order.  Click on any color to
    select it.  In the bottom part of the window is displayed any
    aliases for the selected color (those color names that have the
    same RGB value, but were found later in the text database).  For
    example, find the color "Black" and you'll see that its aliases
    are "gray0" and "grey0".

    If the color has no aliases you'll see "<no aliases>" here.  If you
    just want to see if a color has an alias, and do not want to select a
    color when you click on it, turn off "Update on Click".

    Note that the color list is always updated when a color is selected
    from the main window.  There's no way to turn this feature off.  If
    the selected color has no matching color name you'll see
    "<no matching color>" in the Aliases window.


The Details Window

    The "Details" window gives you more control over color selection
    than just clicking on a color chip in the main window.  The row of
    buttons along the top apply the specified increment and decrement
    amounts to the selected color.  These delta amounts are applied to
    the variation strips specified by the check boxes labeled "Move
    Sliders".  Thus if just Red and Green are selected, hitting -10
    will subtract 10 from the color value along the red and green
    variation only.  Note the message under the checkboxes; this
    indicates the primary color level being changed when more than one
    slider is tied together.  For example, if Red and Green are
    selected, you will be changing the Yellow level of the selected
    color.

    The "At Boundary" behavior determines what happens when any color
    variation hits either the lower or upper boundaries (0 or 255) as
    a result of clicking on the top row buttons:

    Stop
        When the increment or decrement would send any of the tied
        variations out of bounds, the entire delta is discarded.

    Wrap Around
        When the increment or decrement would send any of the tied
        variations out of bounds, the out of bounds value is wrapped
        around to the other side.  Thus if red were at 238 and +25
        were clicked, red would have the value 7.

    Preserve Distance
        When the increment or decrement would send any of the tied
        variations out of bounds, all tied variations are wrapped as
        one, so as to preserve the distance between them.  Thus if
        green and blue were tied, and green was at 238 while blue was
        at 223, and +25 were clicked, green would be at 15 and blue
        would be at 0.

    Squash
        When the increment or decrement would send any of the tied
        variations out of bounds, the out of bounds variation is set
        to the ceiling of 255 or floor of 0, as appropriate.  In this
        way, all tied variations are squashed to one edge or the
        other.

    The top row buttons have the following keyboard accelerators:

    -25 == Shift Left Arrow
    -10 == Control Left Arrow
     -1 == Left Arrow
     +1 == Right Arrow
    +10 == Control Right Arrow
    +25 == Shift Right Arrow


Keyboard Accelerators

    Alt-w in any secondary window dismisses the window.  In the main
    window it exits Pynche (except when running as a modal).

    Alt-q in any window exits Pynche (except when running as a modal).


Persistency

    Pynche remembers various settings of options and colors between
    invocations, storing these values in a `persistent initialization
    file'.  The actual location of this file is specified by the
    --initfile option (see above), and defaults to ~/.pynche.

    When Pynche exits, it saves these values in the init file, and
    re-reads them when it starts up.  There is no locking on this
    file, so if you run multiple instances of Pynche at a time, you
    may clobber the init file.

    The actual options stored include

    - the currently selected color

    - all settings of checkbox and radio button options in all windows

    - the contents of the text window, the current text selection and
      insertion point, and all current text widget element color
      settings.

    - the name of the color database file (but not its contents)

    You can inhibit Pynche from reading the init file by supplying the
    --ignore option on the command line.  However, you cannot suppress
    the storing of the settings in the init file on Pynche exit.  If
    you really want to do this, use /dev/null as the init file, using
    --initfile.


Color Name Database Files

    Pynche uses a color name database file to calculate the nearest
    color to the selected color, and to display in the Color List
    view.  Several files are distributed with Pynche, described
    below.  By default, the X11 color name database file is selected.
    Other files:

    html40colors.txt -- the HTML 4.0 guaranteed color names

    websafe.txt -- the 216 "Web-safe" colors that Netscape and MSIE
    guarantee will not be dithered.  These are specified in #rrggbb
    format for both values and names

    webcolors.txt -- The 140 color names that Tim Peters and his
    sister say NS and MSIE both understand (with some controversy over 
    AliceBlue).

    namedcolors.txt -- an alternative set of Netscape colors.

    You can switch between files by choosing "Load palette..." from
    the "File" menu.  This brings up a standard Tk file dialog.
    Choose the file you want and then click "Ok".  If Pynche
    understands the format in this file, it will load the database and 
    update the appropriate windows.  If not, it will bring up an error 
    dialog.


To Do

    Here's a brief list of things I want to do (some mythical day):

    - Better support for resizing the top level windows

    - More output views, e.g. color solids

    - Have the notion of a `last color selected'; this may require a
      new output view

    - Support setting the font in the text view

    - Support distutils setup.py for installation

    I'm open to suggestions!



Local Variables:
indent-tabs-mode: nil
End:

This directory contains a collection of executable Python scripts that
are useful while building, extending or managing Python.  Some (e.g.,
dutree or lll) are also generally useful UNIX tools.

See also the Demo/scripts directory!

analyze_dxp.py		Analyzes the result of sys.getdxp()
byext.py		Print lines/words/chars stats of files by extension
byteyears.py		Print product of a file's size and age
checkappend.py		Search for multi-argument .append() calls
checkpyc.py		Check presence and validity of ".pyc" files
classfix.py		Convert old class syntax to new
cleanfuture.py		Fix reduntant Python __future__ statements
combinerefs.py		A helper for analyzing PYTHONDUMPREFS output.
copytime.py		Copy one file's atime and mtime to another
crlf.py			Change CRLF line endings to LF (Windows to Unix)
cvsfiles.py		Print a list of files that are under CVS
db2pickle.py		Dump a database file to a pickle
diff.py			Print file diffs in context, unified, or ndiff formats
dutree.py		Format du(1) output as a tree sorted by size
eptags.py		Create Emacs TAGS file for Python modules
find_recursionlimit.py  Find the maximum recursion limit on this machine 
finddiv.py		A grep-like tool that looks for division operators
findlinksto.py		Recursively find symbolic links to a given path prefix
findnocoding.py		Find source files which need an encoding declaration
fixcid.py		Massive identifier substitution on C source files
fixdiv.py		Tool to fix division operators.
fixheader.py		Add some cpp magic to a C include file
fixnotice.py		Fix the copyright notice in source files
fixps.py		Fix Python scripts' first line (if #!)
ftpmirror.py		FTP mirror script
google.py		Open a webbrowser with Google
gprof2html.py		Transform gprof(1) output into useful HTML
h2py.py			Translate #define's into Python assignments
hotshotmain.py		Main program to run script under control of hotshot
idle			Main program to start IDLE
ifdef.py		Remove #if(n)def groups from C sources
lfcr.py			Change LF line endings to CRLF (Unix to Windows)
linktree.py		Make a copy of a tree with links to original files
lll.py			Find and list symbolic links in current directory
logmerge.py		Consolidate CVS/RCS logs read from stdin
mailerdaemon.py		parse error messages from mailer daemons (Sjoerd&Jack)
md5sum.py		Print MD5 checksums of argument files.
methfix.py		Fix old method syntax def f(self, (a1, ..., aN)):
mkreal.py		Turn a symbolic link into a real file or directory
ndiff.py		Intelligent diff between text files (Tim Peters)
nm2def.py		Create a template for PC/python_nt.def (Marc Lemburg)
objgraph.py		Print object graph from nm output on a library
parseentities.py	Utility for parsing HTML entity definitions
pathfix.py		Change #!/usr/local/bin/python into something else
pdeps.py		Print dependencies between Python modules
pickle2db.py		Load a pickle generated by db2pickle.py to a database
pindent.py		Indent Python code, giving block-closing comments
ptags.py		Create vi tags file for Python modules
pydoc			Python documentation browser.
pysource.py		Find Python source files
redemo.py		Basic regular expression demonstration facility
reindent.py		Change .py files to use 4-space indents.
rgrep.py		Reverse grep through a file (useful for big logfiles)
serve.py		Small wsgiref-based web server, used in make serve in Doc
setup.py		Install all scripts listed here
suff.py			Sort a list of files by suffix
svneol.py		Sets svn:eol-style on all files in directory
texcheck.py             Validate Python LaTeX formatting (Raymond Hettinger)
texi2html.py		Convert GNU texinfo files into HTML
treesync.py		Synchronize source trees (very ideosyncratic)
untabify.py		Replace tabs with spaces in argument files
which.py		Find a program in $PATH
xxci.py			Wrapper for rcsdiff and ci

This is versioncheck 1.0, a first stab at automatic checking of versions of
Python extension packages installed on your system.

The basic idea is that each package contains a _checkversion.py
somewhere, probably at the root level of the package. In addition, each
package maintainer makes a file available on the net, through ftp or
http, which contains the version number of the most recent distribution
and some readable text explaining the differences with previous
versions, where to download the package, etc.

The checkversions.py script walks through the installed Python tree (or
through a tree of choice), and runs each _checkversion.py script. These
scripts retrieve the current-version file over the net, compares version
numbers and tells the user about new versions of packages available.

A boilerplate for the _checkversion.py file can be found here. Replace
package name, version and the URL of the version-check file and put it in
your distribution. In stead of a single URL you can also specify a list
of URLs. Each of these will be checked in order until one is available,
this is handy for distributions that live in multiple places. Put the
primary distribution site (the most up-to-date site) before others.
The script is executed with execfile(), not imported, and the current
directory is the checkversion directory, so be careful with globals,
importing, etc.

The version-check file consists of an rfc822-style header followed by
plaintext. The only header field checked currently is
'Current-Version:', which should contain te current version and is
matched against the string contained in the _checkversion.py script.
The rest of the file is human-readable text and presented to the user if
there is a version mismatch. It should contain at the very least a URL
of either the current distribution or a webpage describing it.

Pycheckversion.py is the module that does the actual checking of versions.
It should be fine where it is, it is imported by checkversion before anything
else is done, but if imports fail you may want to move it to somewhere
along sys.path.

	Jack Jansen, CWI, 23-Dec-97.
	<jack@cwi.nl>
	

Webchecker
----------

This is a simple web tree checker, useful to find bad links in a web
tree.  It currently checks links pointing within the same subweb for
validity.  The main program is "webchecker.py".  See its doc string
(or invoke it with the option "-?") for more defails.

History:

- Jan 1997.  First release.  The module robotparser.py was written by
Skip Montanaro; the rest is original work by Guido van Rossum.

- May 1999.  Sam Bayer contributed a new version, wcnew.py, which
supports checking internal links (#spam fragments in URLs) and some
other options.

- Nov 1999.  Sam Bayer contributed patches to reintegrate wcnew.py
into webchecker.py, and corresponding mods to wcgui.py and
websucker.py.

- Mar 2004.  Chris Herborth contributed a patch to let webchecker.py
handle XHTML's 'id' attribute.

ï»¿Welcome to GitStack
---------------

GitStack makes you Git server easy to install and manage on Windows.  

GitStack is built using [python](http://www.python.org/)/[django](https://www.djangoproject.com/) on the top of :  

* [msysGit](http://code.google.com/p/msysgit/)
* [apache](http://httpd.apache.org/)

GitStack is released under the GPL v3 license.

If you just need to install GitStack, just download it from the official project site : [http://gitstack.com](http://gitstack.com)  
If you would like to contribute to the project, please read the [github wiki](https://github.com/smart-mobile-software/gitstack/wiki/GitStack-Development-environment-setup).



