__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Understanding JSON Schema documentation build configuration file, created by
# sphinx-quickstart on Thu Sep  5 10:09:57 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath(os.path.dirname('__file__')))

# -- General configuration -----------------------------------------------------

import sphinx_bootstrap_theme

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.mathjax', 'sphinx.ext.ifconfig',
              'sphinxext.jsonschemaext', 'sphinxext.language_specific']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
source_encoding = 'utf-8'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Understanding JSON Schema'
copyright = u'2013-2014, Michael Droettboom, Space Telescope Science Institute'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.0'
# The full version, including alpha/beta/rc tags.
release = '1.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all documents.
default_role = "ref"

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# The default language for highlighting
highlight_language = 'javascript'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'bootstrap'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.

# See sphinx-bootstrap-theme for documentation of these options
# https://github.com/ryan-roemer/sphinx-bootstrap-theme

html_theme_options = {
    'navbar_site_name': 'Document',
    'navbar_pagenav': False
}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = sphinx_bootstrap_theme.get_html_theme_path()

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = '_static/logo.png'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = '_static/logo.ico'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
html_domain_indices = False

# If false, no index is generated.
html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'UnderstandingJSONSchemadoc'


# -- Options for LaTeX output --------------------------------------------------

from sphinxext import jsonschemaext
from sphinxext import language_specific

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    'preamble': r'''
    % Use a more modern-looking monospace font
    \usepackage[sfdefault]{cabin}
    \usepackage{inconsolata}
    \usepackage{bbding}
    \usepackage{fixltx2e}
    \usepackage{microtype}
    \MakeRobust\marginpar

    \makeatletter
        \def\marginparright{\@mparswitchfalse}
        \def\marginparoutside{\@mparswitchtrue}
    \makeatother
    ''' + jsonschemaext.latex_preamble + language_specific.latex_preamble,

    'fncychap': '\\usepackage[Conny]{fncychap}'
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'UnderstandingJSONSchema.tex', u'Understanding JSON Schema',
   u'Michael Droettboom, et al\\\\Space Telescope Science Institute', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
latex_logo = '_static/logo.pdf'

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
latex_use_parts = False

# If true, show page references after internal links.
latex_show_pagerefs = True

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
latex_domain_indices = False


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'understandingjsonschema', u'Understanding JSON Schema',
     [u'Michael Droettboom, et al'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'UnderstandingJSONSchema', u'Understanding JSON Schema',
   u'Michael Droettboom, et al', 'UnderstandingJSONSchema',
   u'JSON Schema documentation for mere mortals.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# -- Options for Epub output ---------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = u'Understanding JSON Schema'
epub_author = u'Michael Droettboom'
epub_publisher = u'Space Telescope Science Institute'
epub_copyright = u'2013-2014, Space Telescope Science Institute'

# The language of the text. It defaults to the language option
# or en if the language is not set.
#epub_language = ''

# The scheme of the identifier. Typical schemes are ISBN or URL.
#epub_scheme = ''

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#epub_identifier = ''

# A unique identification for the text.
#epub_uid = ''

# A tuple containing the cover image and cover page html template filenames.
#epub_cover = ()

# A sequence of (type, uri, title) tuples for the guide element of content.opf.
#epub_guide = ()

# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_pre_files = []

# HTML files shat should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_post_files = []

# A list of files that should not be packed into the epub file.
#epub_exclude_files = []

# The depth of the table of contents in toc.ncx.
#epub_tocdepth = 3

# Allow duplicate toc entries.
#epub_tocdup = True

# Fix unsupported image types using the PIL.
#epub_fix_images = False

# Scale large images.
#epub_max_image_width = 0

# If 'no', URL addresses will not be shown.
#epub_show_urls = 'inline'

# If false, no index is generated.
#epub_use_index = True

########NEW FILE########
__FILENAME__ = jsonschemaext
import json

from docutils import nodes
from docutils import statemachine
from sphinx.util.compat import Directive
from sphinx.util.nodes import set_source_info

import jsonschema


class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self


def split_content(l):
    parts = []
    should_pass = True
    part = []
    comment = []

    def add_part():
        content = '\n'.join(part)
        try:
            json_content = json.loads(content)
        except ValueError:
            if should_pass:
                raise ValueError("Invalid json: {0}".format(content))
            else:
                # A complex number will never validate
                json_content = 1+1j
        parts.append(AttrDict({
            'should_pass': should_pass,
            'content': content,
            'json': json_content,
            'comment': comment}))

    for line in l:
        if line.startswith('//'):
            comment.append(line[2:].lstrip())
        elif line == '--':
            add_part()
            should_pass = True
            part = []
            comment = []
        elif line == '--X':
            add_part()
            should_pass = False
            part = []
            comment = []
        else:
            part.append(line)

    add_part()

    return parts[0], parts[1:]


class SchemaExampleDirective(Directive):
    has_content = True
    validate = True

    def run(self):
        result = []

        schema, parts = split_content(self.content)

        literal = nodes.literal_block(
            schema.content, schema.content)
        literal['language'] = 'javascript'
        literal['classes'] = ['jsonschema']
        set_source_info(self, literal)
        result.append(literal)

        for part in parts:
            if self.validate:
                is_valid = True
                try:
                    jsonschema.validate(part.json, schema.json)
                except jsonschema.ValidationError as e:
                    is_valid = False
                except jsonschema.SchemaError as e:
                    raise ValueError("Schema is invalid:\n{0}\n\n{1}".format(
                        str(e), schema.content))

                if is_valid != part.should_pass:
                    if part.should_pass:
                        raise ValueError(
                            "Doc says fragment should pass, "
                            "but it does not validate:\n" +
                            part.content)
                    else:
                        raise ValueError(
                            "Doc says fragment should not pass, "
                            "but it validates:\n" +
                            part.content)
            else:
                is_valid = part.should_pass

            if len(part.comment):
                paragraph = nodes.paragraph('', '')
                comment = statemachine.StringList(part.comment)
                comment.parent = self.content.parent
                self.state.nested_parse(comment, 0, paragraph)
                paragraph['classes'] = ['jsonschema-comment']
                set_source_info(self, paragraph)
                result.append(paragraph)

            literal = nodes.literal_block(
                part.content, part.content)
            literal['language'] = 'javascript'
            if is_valid:
                literal['classes'] = ['jsonschema-pass']
            else:
                literal['classes'] = ['jsonschema-fail']
            set_source_info(self, literal)
            result.append(literal)

        return result


class SchemaExampleNoValidationDirective(SchemaExampleDirective):
    validate = False

from sphinx.writers.latex import LaTeXTranslator
original_literal_node_visit = LaTeXTranslator.visit_literal_block
original_literal_node_depart = LaTeXTranslator.depart_literal_block


def visit_literal_node_latex(self, node):
    return original_literal_node_visit(self, node)


def depart_literal_node_latex(self, node):
    adjust = False
    color = "gray"
    char = ""
    if 'jsonschema-pass' in node['classes']:
        char = r"\Checkmark"
        color = "ForestGreen"
        adjust = True
    elif 'jsonschema-fail' in node['classes']:
        char = r"\XSolidBrush"
        color = "BrickRed"
        adjust = True
    elif 'jsonschema' in node['classes']:
        char = r"\{ json schema \}"

    if adjust:
        self.body.append(r"\begin{adjustwidth}{2.5em}{0pt}")
    self.body.append(r"\begin{jsonframe}{%s}{%s}" % (char, color))
    original_literal_node_depart(self, node)
    self.body.append(r"\end{jsonframe}")
    if adjust:
        self.body.append(r"\end{adjustwidth}")


def setup(app):
    app.add_directive('schema_example', SchemaExampleDirective)
    app.add_directive('schema_example_novalid',
                      SchemaExampleNoValidationDirective)

    app.add_node(nodes.literal_block,
                 latex=(visit_literal_node_latex, depart_literal_node_latex))


latex_preamble = r"""
\usepackage{changepage}
\usepackage[dvipsnames]{xcolor}
"""

########NEW FILE########
__FILENAME__ = language_specific
from docutils import nodes
from docutils import statemachine
from sphinx.util.compat import Directive


class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self


def split_content(l):
    parts = []
    part = []
    language = None

    def add_part():
        if language is None:
            raise ValueError("No language specified")
        parts.append(AttrDict({
            'language': language,
            'content': part}))

    for line in l:
        if line.startswith('--'):
            if len(part):
                add_part()
                part = []
            language = line[2:].strip()
        else:
            part.append(line)

    add_part()

    return parts


class language_specific_pages(nodes.Element):
    local_attributes = ['parts']

    def __init__(self, *args, **kwargs):
        self.parts = kwargs['parts']
        nodes.Element.__init__(self, *args, **kwargs)


class section(nodes.Element):
    pass


def visit_language_specific_pages_node_html(self, node):
    node['classes'] = ['tabbable']

    ul = nodes.bullet_list()
    ul['classes'] = ['nav', 'nav-tabs']
    # set_source_info(self, ul)

    href = tab('', 'Language-specific info:')
    href['classes'] = ['disabled']
    paragraph = nodes.paragraph('', '')
    li = nodes.list_item('')
    li['classes'] = ['disabled']

    paragraph.append(href)
    li.append(paragraph)
    ul.append(li)

    first = True
    for part in node.parts:
        href = tab(part.language, part.language)
        href['refuri'] = '#' + make_id(node, part.language)
        paragraph = nodes.paragraph('')
        li = nodes.list_item('')
        if first:
            li['classes'].append('active')

        paragraph.append(href)
        li.append(paragraph)
        ul.append(li)

        first = False

    node.append(ul)

    pages = section()
    pages['classes'] = ['tab-content']

    first = True
    for part in node.parts:
        page = section()
        page['classes'] = ['tab-pane']
        if first:
            page['classes'].append('active')
        page['ids'] = [make_id(node, part.language)]

        page.append(part.paragraph)
        pages.append(page)

        first = False

    node.append(pages)

    self.body.append(self.starttag(node, 'div'))


def depart_language_specific_pages_node_html(self, node):
    self.body.append('</div>')


def visit_language_specific_pages_node_latex(self, node):
    for part in node.parts:
        t = tab('', '')
        t.language = part.language
        t.append(part.paragraph)
        node.append(t)


def depart_language_specific_pages_node_latex(self, node):
    pass


class tab(nodes.General, nodes.Inline, nodes.Referential, nodes.TextElement):
    pass


def visit_tab_node_html(self, node):
    atts = {}
    if 'refuri' in node:
        atts['href'] = node['refuri']
        atts['data-toggle'] = 'tab'
    self.body.append(self.starttag(node, 'a', '', **atts))


def depart_tab_node_html(self, node):
    self.body.append('</a>')


def visit_tab_node_latex(self, node):
    self.body.append(r'\begin{jsonframe}{%s}{black}' % node.language)


def depart_tab_node_latex(self, node):
    self.body.append(r'\end{jsonframe}')


def make_id(self, language):
    return '{0}_{1}'.format(hex(id(self))[2:], language)


class LanguageSpecificDirective(Directive):
    has_content = True

    def run(self):
        parts = split_content(self.content)
        container = language_specific_pages(parts=parts)

        for part in parts:
            paragraph = nodes.paragraph('', '')
            content = statemachine.StringList(part.content)
            content.parent = self.content.parent
            self.state.nested_parse(content, 0, paragraph)
            part.paragraph = paragraph

        return [container]


def setup(app):
    app.add_node(tab,
                 html=(visit_tab_node_html, depart_tab_node_html),
                 latex=(visit_tab_node_latex, depart_tab_node_latex))
    app.add_node(language_specific_pages,
                 html=(visit_language_specific_pages_node_html,
                       depart_language_specific_pages_node_html),
                 latex=(visit_language_specific_pages_node_latex,
                        depart_language_specific_pages_node_latex))

    app.add_directive('language_specific', LanguageSpecificDirective)


latex_preamble = r"""
  \usepackage{mdframed}
  \usepackage{tikz}

  \newenvironment{jsonframe}[2]{%
  \ifstrempty{#1}%
  {}%
  {\mdfsetup{%
    frametitle={%
    \tikz[baseline=(current bounding box.east),outer sep=0pt,text=white]
    \node[anchor=east,rectangle,fill=#2]
    {\strut #1};}}%
   }%
   \mdfsetup{innertopmargin=10pt,linecolor=#2,%
             linewidth=1pt,topline=true,nobreak=true,
             frametitleaboveskip=\dimexpr-\ht\strutbox\relax,}
   \begin{mdframed}[]\relax%
   }{\end{mdframed}}
"""

########NEW FILE########
