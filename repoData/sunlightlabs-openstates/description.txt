This started an experiment to put a state's actions into superfastmatch and extrapolate what kinds of actions are available and how they might vary (variables, parameters).

That proved mostly useless, and I'm still obsessed the idea of automatically deriving action templates from a state's actions, but now bathawk has contented itself with providing a specialized shell for testing regexs on actions, viewing actions and Open States categories, and maybe being a test bed for developing more reusable action categorizing/parsing code.

Right now the batshell loads all actions categorized as "other" and you can test regular expressions against those to see what matches, but it was initially designed to load all actions, test regexes on them, then add the regexes to a collection that could ultimately be saved, written out to a file, or even used to generate a module with some python code. The thinking was that it could provided an experience almost like a game, where we could keep adding regexes and watch the number of unmatched actions drop lower and lower until most actions for a state were being matched, and maybe specifically parsed or categtorized in some useful way.

scraps from prior experiments

Elf Pwl
![](http://www.spiritanimalart.com/elf_owl_op_490x600.jpg)
We take to the skies on the leathery wings of a bat!

This is an experimental batshell variant to provide shortcut shell commands for common billy tasks, like querying mongo.

Add new commands by adding new functions to the BillyCommands class.
                    _____
                ___/  |  \___
             __/      |      \__
          __/         |         \__
         /|           |           |\
        | |           |           | |
        | |           |           | |
       |  |           |           |  |
       |  |        ___|___        |  |
      /   |    ___/  ___  \___    |   \
      |   |___/  ___/| |\___  \___|   |
      |   /   __/_ \_| |_/ _\__   \   |
     |   |___/\_  \_______/  _/\___|   |
    /   /___/   \___\___/___/   \___\   \
   /    |   |       |   |       |   |    \
  /     |   |_      |   |      _|   |     \
 |___   |___|_\   _/|___|\_   /_|___|   ___|
 |_  \    |   |\ /  |___|  \ /|   |    /  _|
 ||| |    |   | |  _______  | |   |    | |||
 ||| |    |   | |  \_____/  | |   |    | |||
 ||| |    |   | |    ___    | |   |    | |||
 ||| |    |   | |           | |   |    | |||
 ||| |    |   | |           | |   |    | |||
 ||| |    |   | |           | |   |    | |||
 ||| |    |   |\|           |/|   |    | |||
 \||_|____|___|-\___________/-|___|____|_||/

Deleware Progress
=====================

Sources:
http://legis.delaware.gov/
http://legis.delaware.gov/legislature.nsf/sen?openview&nav=senate
http://legis.delaware.gov/legislature.nsf/Reps?openview&nav=house
http://legis.delaware.gov/LIS/LIS146.nsf/SCommittees
http://legis.delaware.gov/LIS/LIS146.nsf/HCommittees



legislators.py
--------------
Progress: finished
Data scraped:
  * term
  * chamber
  * district_name
  * full_name

Note: Legislator party affiliation could be obtained by scraping the linked legislator bio pages.


committees.py
-------------
Progress: finished
Data scraped:
  * chamber
  * membernames
  * roles


bills.py
--------
Progress: some

Data scraped:
  * chamber
  * session
  * bill_id
  * title
  * primary sponsor
  * actions
  * co-sponsors*
  * additional sponsors*
  * votes*

Implementation plan: Have to scrape multiple bill lists to get URLs for actual bills, then 
crawl those URLs to scrape bill details. Co-sponsors and additional sponsors do not appear to be 
formatted consistently, so not including them with bill until a solid scraping strategy can be 
determined.

Vote data for each bill is being partially scraped. Action type, vote type and motion are not currently 
being determined. The bill's name is being used in place of the motion name.

STATE README TEMPLATE
=====================

Metadata
--------
Name: Montana

Abbreviation:  MT

Legislature Name:  Montana Legislature

Upper Chamber Name: Senate

Lower Chamber Name:  House of Representatives

Upper Chamber Title:  Senator

Lower Chamber Title:  State Representative

Upper Chamber Term:  4

Lower Chamber Term:  2


Information Locations
=====================

Sessions
--------
90 day session every odd numbered year

* list of sessions: http://leg.mt.gov/css/Sessions/default.asp

* session names (numerical, 2011=62 session, 2009=61st session)

Legislators
-----------
house: http://leg.mt.gov/content/sessions/62nd/2011HouseMembers.txt

senate: http://leg.mt.gov/content/sessions/62nd/2011SenateMembers.txt


2011 only - last name, first name, party, district, address


* term
* chamber
* district
* full name
* first name (optional)
* last name (optional)
* middle name (optional)
* party

Committees (may be found as part of legislator info)
----------------------------------------------------
2011 house committees: http://leg.mt.gov/css/House/house-committees-2011.asp  

2011 senate committees: http://leg.mt.gov/css/Senate/senate%20committees-2011.asp

http://leg.mt.gov/css/Sessions/62nd/joint%20subcommittees.asp

Note: in-session committees only

* chamber
* committee name
* subcommittee name (optional)
* members & roles

Bills
-----
http://laws.leg.mt.gov/laws11/LAW0217W$BAIV.return_all_bills
Note: all introducted and unintroduced bills from the 2011 session.

* session
* chamber (from type)
* bill id
* title
* sponsors/authors
* type (optional, e.g. 'house bill', 'senate resolution')
* actions (optional, e.g. Introduced, Amended, Signed by Governor)

Missing Info
* versions (optional)
* documents/sources (optional)

Votes (may be found as part of bill info)
-----------------------------------------
http://laws.leg.mt.gov/laws11/LAW0217W$BAIV.return_all_bills

Each bill links to a page with voting information


* chamber
* date
* passed
* motion (optional)
* yes_count (optional
* no_count (optional
* other_count (optional
* type (optional

STATE README TEMPLATE
=====================

Metadata
--------
Name:  South Carolina  
Abbreviation:  SC  
Legislature Name:South Carolina General Assembly    
Upper Chamber Name:  Senate  
Lower Chamber Name:  House of Representatives  
Upper Chamber Title:  Senator  
Lower Chamber Title:  Representative  
Upper Chamber Term:  4 years  
Lower Chamber Term:  2 years 


Information Locations
=====================

Legislators
-----------
lower chamber legislators url = 'http://www.scstatehouse.gov/html-pages/housemembers.html'
upper chamber legislators url = 'http://www.scstatehouse.gov/html-pages/senatemembersd.html'

Missing Info

* term
* chamber
* district
* full name
* first name (optional)
* last name (optional)
* middle name (optional)
* party

Committees (may be found as part of legislator info)
----------------------------------------------------
Missing Info

* chamber
* committee name
* subcommittee name (optional)
* members & roles

Bills
-----
Missing Info

* session
* chamber
* bill id
* title
* sponsors/authors
* type (optional, e.g. 'house bill', 'senate resolution')
* actions (optional, e.g. Introduced, Amended, Signed by Governor)
* versions (optional)
* documents/sources (optional)

Votes (may be found as part of bill info)
-----------------------------------------
Missing Info

* chamber
* date
* passed
* motion (optional)
* yes_count (optional
* no_count (optional
* other_count (optional
* type (optional

The Open State Project collects and makes available data about state legislative activities, including bill summaries, votes, sponsorships and state legislator information. This data is gathered directly from the states and made available in a common format for interested developers, through a JSON API and data dumps.

Links
=====

* `Open State Project API <http://openstates.org/api/>`_
* `Contributing Guidelines <http://openstates.org/contributing/>`_
* `Code on GitHub <http://github.com/sunlightlabs/openstates/>`_
* `Issue Tracker <http://sunlight.atlassian.net>`_
* `Open State Project Google Group <http://groups.google.com/group/fifty-state-project>`_
* `Sunlight Labs <http://sunlightlabs.com>`_

Just an experiment at this point

To use this script:

 - First, if the statuts spreadsheet (google doc) has changed since the
   last time the script ran, delete it.
 - Run the script
In the files in this directory, each line is a JSON object. If a feed shares any line's attributes it gets skipped.
