__FILENAME__ = bootstrap
##############################################################################
#
# Copyright (c) 2006 Zope Corporation and Contributors.
# All Rights Reserved.
#
# This software is subject to the provisions of the Zope Public License,
# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
# FOR A PARTICULAR PURPOSE.
#
##############################################################################
"""Bootstrap a buildout-based project

Simply run this script in a directory containing a buildout.cfg.
The script accepts buildout command-line options, so you can
use the -c option to specify an alternate configuration file.

$Id: bootstrap.py 102545 2009-08-06 14:49:47Z chrisw $
"""

import os, shutil, sys, tempfile, urllib2
from optparse import OptionParser

tmpeggs = tempfile.mkdtemp()

is_jython = sys.platform.startswith('java')

# parsing arguments
parser = OptionParser()
parser.add_option("-v", "--version", dest="version",
                          help="use a specific zc.buildout version")
parser.add_option("-d", "--distribute",
                   action="store_true", dest="distribute", default=True,
                   help="Use Disribute rather than Setuptools.")

options, args = parser.parse_args()

if options.version is not None:
    VERSION = '==%s' % options.version
else:
    VERSION = ''

USE_DISTRIBUTE = options.distribute
args = args + ['bootstrap']

to_reload = False
try:
    import pkg_resources
    if not hasattr(pkg_resources, '_distribute'):
        to_reload = True
        raise ImportError
except ImportError:
    ez = {}
    if USE_DISTRIBUTE:
        exec urllib2.urlopen('http://python-distribute.org/distribute_setup.py'
                         ).read() in ez
        ez['use_setuptools'](to_dir=tmpeggs, download_delay=0, no_fake=True)
    else:
        exec urllib2.urlopen('http://peak.telecommunity.com/dist/ez_setup.py'
                             ).read() in ez
        ez['use_setuptools'](to_dir=tmpeggs, download_delay=0)

    if to_reload:
        reload(pkg_resources)
    else:
        import pkg_resources

if sys.platform == 'win32':
    def quote(c):
        if ' ' in c:
            return '"%s"' % c # work around spawn lamosity on windows
        else:
            return c
else:
    def quote (c):
        return c

cmd = 'from setuptools.command.easy_install import main; main()'
ws  = pkg_resources.working_set

if USE_DISTRIBUTE:
    requirement = 'distribute'
else:
    requirement = 'setuptools'

if is_jython:
    import subprocess

    assert subprocess.Popen([sys.executable] + ['-c', quote(cmd), '-mqNxd',
           quote(tmpeggs), 'zc.buildout' + VERSION],
           env=dict(os.environ,
               PYTHONPATH=
               ws.find(pkg_resources.Requirement.parse(requirement)).location
               ),
           ).wait() == 0

else:
    assert os.spawnle(
        os.P_WAIT, sys.executable, quote (sys.executable),
        '-c', quote (cmd), '-mqNxd', quote (tmpeggs), 'zc.buildout' + VERSION,
        dict(os.environ,
            PYTHONPATH=
            ws.find(pkg_resources.Requirement.parse(requirement)).location
            ),
        ) == 0

ws.add_entry(tmpeggs)
ws.require('zc.buildout' + VERSION)
import zc.buildout.buildout
zc.buildout.buildout.main(args)
shutil.rmtree(tmpeggs)

########NEW FILE########
__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-merlin documentation build configuration file, created by
# sphinx-quickstart on Tue Aug 24 08:31:05 2010.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.todo', 'sphinx.ext.coverage', 'sphinx.ext.viewcode']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-merlin'
copyright = u'2010, Travis Chase, Chad Gallemore'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.8'
# The full version, including alpha/beta/rc tags.
release = '0.8'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinxdoc'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-merlindoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-merlin.tex', u'django-merlin Documentation',
   u'Travis Chase, Chad Gallemore', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-merlin', u'django-merlin Documentation',
     [u'Travis Chase, Chad Gallemore'], 1)
]


# -- Options for Epub output ---------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = u'django-merlin'
epub_author = u'Travis Chase, Chad Gallemore'
epub_publisher = u'Travis Chase, Chad Gallemore'
epub_copyright = u'2010, Travis Chase, Chad Gallemore'

# The language of the text. It defaults to the language option
# or en if the language is not set.
#epub_language = ''

# The scheme of the identifier. Typical schemes are ISBN or URL.
#epub_scheme = ''

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#epub_identifier = ''

# A unique identification for the text.
#epub_uid = ''

# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_pre_files = []

# HTML files shat should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_post_files = []

# A list of files that should not be packed into the epub file.
#epub_exclude_files = []

# The depth of the table of contents in toc.ncx.
#epub_tocdepth = 3

# Allow duplicate toc entries.
#epub_tocdup = True


from django.core.management import setup_environ

from merlin.tests.fixtures.testproject import settings

setup_environ(settings)

########NEW FILE########
__FILENAME__ = forms
from django import forms


class UserDetailsForm(forms.Form):
    first_name = forms.CharField()
    last_name = forms.CharField()
    email = forms.EmailField()


class ContactDetailsForm(forms.Form):
    street_address = forms.CharField()
    city  = forms.CharField()
    state = forms.CharField()
    zipcode = forms.CharField()
    phone = forms.CharField()


class FewMoreThingsForm(forms.Form):
    bio = forms.CharField()


class SocialForm(forms.Form):
    twitter = forms.URLField()
    facebook = forms.URLField()

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
from django.core.management import execute_manager
try:
    import settings # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = settings
import os

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'sqlite3',
        'NAME': ':memory:'
    }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale
USE_L10N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = ''

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/media/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = '!sa9otgn21%eary!^m)%kl42))0&s0^moea$)@0m7udy3-_ge$'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
)

ROOT_URLCONF = 'testproject.urls'

TEMPLATE_DIRS = (
    os.path.join(os.path.dirname(__file__), 'templates'),
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'merlin',
    # Uncomment the next line to enable the admin:
    # 'django.contrib.admin',
)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

from merlin.tests.fixtures.testproject.wizard import MockWizard
from merlin.wizards.utils import Step
from merlin.wizards.session import SessionWizard

from merlin.tests.fixtures.testproject import forms
from merlin.tests.fixtures.testproject import views

urlpatterns = patterns('',
    url(r'^simpletest$', SessionWizard([
        Step('user-details', forms.UserDetailsForm),
        Step('contact-details', forms.ContactDetailsForm)])),
    url(r'^simpletest/(?P<slug>[A-Za-z0-9_-]+)$', SessionWizard([
        Step('user-details', forms.UserDetailsForm),
        Step('contact-details', forms.ContactDetailsForm)])),
    url(r'^bettertest/(?P<slug>[A-Za-z0-9_-]+)$', MockWizard([
        Step('user-details', forms.UserDetailsForm),
        Step('contact-details', forms.ContactDetailsForm)])),
    url(r'^$', views.index, name='test-index'),
    url(r'^more$', views.more, name='test-more'),
)

########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponse


def index(request):
    return HttpResponse("Index page")


def more(request):
    return HttpResponse("More page")

########NEW FILE########
__FILENAME__ = wizard
from django.http import HttpResponse

from merlin.tests.fixtures.testproject import forms
from merlin.wizards.session import SessionWizard
from merlin.wizards.utils import Step


class MockWizard(SessionWizard):
    def initialize(self, request, wizard_state):
        if not 'global_id' in wizard_state:
            wizard_state.global_id = '123456789'

    def done(self, request):
        form_data = self.get_form_data(request)
        assert form_data['user-details']['first_name'] == 'Chad'
        assert form_data['user-details']['last_name'] == 'Gallemore'
        assert form_data['user-details']['email'] == 'cgallemore@gmail.com'
        assert form_data['few-more-things']['bio']  == 'My bio'
        assert form_data['social-info']['twitter'] == 'http://twitter.com/localbase'
        assert form_data['social-info']['facebook'] == 'http://facebook.com/localbase'

        self.clear(request)

        return HttpResponse("All done", mimetype="text/plain")

    def process_step(self, request, current_step, form):
        if current_step.slug == 'user-details':
            few_more_things_step = Step('few-more-things', forms.FewMoreThingsForm)
            self.insert_after(request, current_step, few_more_things_step)

            social_step = Step('social-info', forms.SocialForm)
            contact_step = self.get_step(request, 'contact-details')
            self.insert_before(request, contact_step, social_step)

            self.remove_step(request, contact_step)

    def get_template(self, request, step, form):
        if step.slug == 'social-info':
            return 'forms/social_wizard.html'

        else:
            return 'forms/wizard.html'

    def process_show_form(self, request, step, form):
        if step.slug == 'social-info':
            return {
                'global_id': self._get_state(request).global_id}

########NEW FILE########
__FILENAME__ = test_session_wizard
from BeautifulSoup import BeautifulSoup
from django.core.urlresolvers import reverse
from django.test import TestCase

from merlin.tests.fixtures.testproject import forms
from merlin.wizards import MissingStepException, MissingSlugException
from merlin.wizards.session import SessionWizard
from merlin.wizards.utils import Step


class SessionWizardTest(TestCase):

    def test_type_error_if_session_wizard_is_not_list(self):
        try:
            SessionWizard((
                Step('user-details', forms.UserDetailsForm),
                Step('contact-details', forms.ContactDetailsForm))
            )
            self.fail("We shouldn't be allowed to create a SessionWizard with a tuple")
        except TypeError as te:
            self.assertEquals(te.message, 'steps must be an instance of or subclass of list')

        except Exception as e:
            self.fail("We should only fail with a TypeError, exception was %s" % e)

    def test_type_error_if_step_is_not_type_step(self):
        try:
            SessionWizard([
                ('user-details', forms.UserDetailsForm),
                ('contact-details', forms.ContactDetailsForm)]
            )
            self.fail("We shouldn't be allowed to create a SessionWizard with a tuple")
        except TypeError as te:
            self.assertEquals(te.message, 'All steps must be an instance of Step')

        except Exception as e:
            self.fail("We should only fail with a TypeError, exception was %s" % e)

    def test_session_wizard_no_slug(self):
        with self.assertRaises(MissingSlugException):
            self.client.get('/simpletest')

    def test_form_not_valid(self):
        response = self.client.get('/simpletest/user-details')
        self.assertEquals(response.status_code, 200)

        soup = BeautifulSoup(response.content)
        self.assertTrue(soup.find('input', id='id_first_name'))
        self.assertTrue(soup.find('input', id='id_last_name'))
        self.assertTrue(soup.find('input', id='id_email'))
        self.assertTrue(soup.find('a', href="/simpletest/contact-details"))
        self.assertFalse(soup.find('a', text="Back"))

        post = self.client.post('/simpletest/user-details', {})
        self.assertEquals(post.status_code, 200)

        #The form should be invalid, and it should put us on the same form as before.
        soup = BeautifulSoup(post.content)
        self.assertTrue(soup.find('input', id='id_first_name'))
        self.assertTrue(soup.find('input', id='id_last_name'))
        self.assertTrue(soup.find('input', id='id_email'))
        self.assertTrue(soup.find('a', href="/simpletest/contact-details"))
        self.assertFalse(soup.find('a', text="Back"))

    def test_session_wizard(self):
        response = self.client.get('/simpletest/user-details')
        self.assertEquals(response.status_code, 200)

        soup = BeautifulSoup(response.content)
        self.assertTrue(soup.find('input', id='id_first_name'))
        self.assertTrue(soup.find('input', id='id_last_name'))
        self.assertTrue(soup.find('input', id='id_email'))
        self.assertTrue(soup.find('a', href="/simpletest/contact-details"))
        self.assertFalse(soup.find('a', text="Back"))

        post = self.client.post('/simpletest/user-details', {
            'first_name': 'Chad',
            'last_name': 'Gallemore',
            'email': 'cgallemore@gmail.com'
        }, follow=True)

        self.assertEquals(post.redirect_chain[0],
            ('http://testserver/simpletest/contact-details', 302))
        self.assertEquals(post.status_code, 200)

        soup = BeautifulSoup(post.content)
        self.assertTrue(soup.find('input', id="id_street_address"))
        self.assertTrue(soup.find('input', id="id_city"))
        self.assertTrue(soup.find('input', id="id_state"))
        self.assertTrue(soup.find('input', id="id_zipcode"))
        self.assertTrue(soup.find('input', id="id_phone"))
        self.assertFalse(soup.find('a', text="Next"))
        self.assertTrue(soup.find('a', text="Back"))
        self.assertTrue(soup.find('a', href="/simpletest/user-details"))

        try:
            post_last = self.client.post(post.request['PATH_INFO'], {
                'street_address': '122 Main St.',
                'city': 'Joplin',
                'state': 'MO',
                'zipcode': '64801',
                'phone': '5555555555'
            })

            self.fail("this should have raised a not implemented error")

        except NotImplementedError as nie:
            self.assertEquals(nie.message, "Your SessionWizard class has not " \
                "defined a done() method, which is required.")

        except Exception as e:
            self.fail("We should have raised a not implemented error, " \
                "instead the exception was %s" % e)

    def test_session_wizard_cancel_default(self):
        response = self.client.get('/simpletest/user-details')
        self.assertEquals(response.status_code, 200)

        post = self.client.post('/simpletest/user-details', {
            'first_name': 'Chad',
            'last_name': 'Gallemore',
            'email': 'cgallemore@gmail.com'
        }, follow=True)

        self.assertEquals(post.redirect_chain[0],
            ('http://testserver/simpletest/contact-details', 302))
        self.assertEquals(post.status_code, 200)

        response = self.client.get('/simpletest/cancel', follow=True)

        self.assertEquals(response.redirect_chain[0],
            ('http://testserver/', 302))
        self.assertEquals(response.status_code, 200)

    def test_session_wizard_cancel_with_redirect(self):
        response = self.client.get('/simpletest/user-details')
        self.assertEquals(response.status_code, 200)

        post = self.client.post('/simpletest/user-details', {
            'first_name': 'Chad',
            'last_name': 'Gallemore',
            'email': 'cgallemore@gmail.com'
        }, follow=True)

        self.assertEquals(post.redirect_chain[0],
            ('http://testserver/simpletest/contact-details', 302))
        self.assertEquals(post.status_code, 200)

        response = self.client.get('/simpletest/cancel?rd=%s' % reverse(
            'test-more'), follow=True)

        self.assertEquals(response.redirect_chain[0],
            ('http://testserver/more', 302))
        self.assertEquals(response.status_code, 200)


class MockWizardTest(TestCase):

    def test_mock_wizard(self):
        response = self.client.get('/bettertest/user-details')
        self.assertEquals(response.status_code, 200)

        soup = BeautifulSoup(response.content)
        self.assertTrue(soup.find('input', id='id_first_name'))
        self.assertTrue(soup.find('input', id='id_last_name'))
        self.assertTrue(soup.find('input', id='id_email'))

        post = self.client.post('/bettertest/user-details', {
            'first_name': 'Chad',
            'last_name': 'Gallemore',
            'email': 'cgallemore@gmail.com'
        }, follow=True)

        self.assertEquals(post.redirect_chain[0],
            ('http://testserver/bettertest/few-more-things', 302))
        self.assertEquals(post.status_code, 200)

        soup = BeautifulSoup(post.content)
        self.assertTrue(soup.find('input', id="id_bio"))

        post = self.client.post(post.request['PATH_INFO'], {
            'bio': 'My bio'
        }, follow=True)

        self.assertEquals(post.redirect_chain[0],
            ('http://testserver/bettertest/social-info', 302))
        self.assertEquals(post.status_code, 200)

        soup = BeautifulSoup(post.content)
        self.assertTrue(soup.find('input', id="id_twitter"))
        self.assertTrue(soup.find('input', id="id_facebook"))

        div = soup.find('div', id="global_id")

        self.assertEquals(div.string, '123456789')

        post = self.client.post(post.request['PATH_INFO'], {
            'twitter': 'http://twitter.com/localbase',
            'facebook': 'http://facebook.com/localbase'
        }, follow=True)

        self.assertEquals(post.status_code, 200)
        self.assertEquals(post.content, 'All done')

########NEW FILE########
__FILENAME__ = test_utils
import unittest

from merlin.tests.fixtures.testproject.forms import *
from merlin.wizards.utils import *


class UtilsTestCase(unittest.TestCase):
    def test_init_with_no_params(self):
        state = WizardState()

        self.assertIsNone(state.steps)
        self.assertIsNone(state.current_step)
        self.assertIsNone(state.form_data)

    def test_init_with_params(self):
        step1 = Step('step1', ContactDetailsForm)
        step2 = Step('step2', UserDetailsForm)

        state = WizardState(steps=[step1, step2], current_step=step1,
            form_data={})

        self.assertListEqual(state.steps, [step1, step2])
        self.assertEqual(state.current_step, step1)
        self.assertDictEqual(state.form_data, {})

    def test_step_object_methods(self):
        step1 = Step('step1', ContactDetailsForm)
        step1_copy = Step('step1', UserDetailsForm)
        step2 = Step('step2', UserDetailsForm)

        self.assertRaises(ValueError, Step, 'step1', Step)

        self.assertTrue(step1 == step1_copy)
        self.assertFalse(step1 == step2)
        self.assertFalse(step1 == 'step1')
        self.assertTrue(step1 != step2)
        self.assertFalse(step1 != step1_copy)

        self.assertEquals(str(step1), 'step1')
        self.assertEquals(unicode(step1), u'step1')

        self.assertEquals('Step: %s' % repr(step1), 'Step: step1')

    def test_wizard_expansion(self):
        state = WizardState()

        if not hasattr(state, 'test_param'):
            state.test_param = 'Test'

        self.assertEquals(state.test_param, 'Test')            

        state.test_param = 'Test 2'

        self.assertEquals(state.test_param, 'Test 2')

        state = WizardState()
        state.another_param = 'Another Test'

        if not hasattr(state, 'another_param'):
            self.fail('We should have the param')

        else:
            self.assertEquals(state.another_param, 'Another Test')

########NEW FILE########
__FILENAME__ = session
from functools import wraps

from django.http import *
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from merlin.wizards import MissingStepException, MissingSlugException

from merlin.wizards.utils import *


def modifies_session(func):
    @wraps(func)
    def wrapper(self, request, *args, **kwargs):
        result = func(self, request, *args, **kwargs)
        request.session.modified = True

        return result
    return wrapper


class SessionWizard(object):
    """
    This class allows for the ability to chop up a long form into sizable steps
    and process each step in sequence. It also provides the ability to go back
    to a previous step or move on to the next step in the sequence. When the
    wizard runs out of steps it calls a final function that finishes the form
    process. This class should be subclassed and the subclass should at a
    minimum override the ``done`` method.

    .. versionadded:: 0.1

    :param steps:
        Provides a list of :class:`Step` objects in the order in
        which the wizard should display them to the user. This list can
        be manipulated to add or remove steps as needed.
    """
    def __init__(self, steps):
        if not isinstance(steps, list):
            raise TypeError('steps must be an instance of or subclass of list')

        if [step for step in steps if not isinstance(step, Step)]:
            raise TypeError('All steps must be an instance of Step')

        slugs = set([step.slug for step in steps])

        # By putting the slugs into a set the duplicates will be filtered out.
        # If the slug list length does not equal the steps length then there
        # must have been duplicates.
        if len(slugs) != len(steps):
            raise ValueError('Step slugs must be unique.')

        clazz = self.__class__

        self.id = '%s.%s' % (clazz.__module__, clazz.__name__,)
        self.base_steps = steps

    def __call__(self, request, *args, **kwargs):
        """
        Initialize the step list for the session if needed and call the proper
        HTTP method handler.
        """
        self._init_wizard(request)

        slug = kwargs.get('slug', None)

        if not slug:
            raise MissingSlugException("Slug not found.")

        step = self.get_step(request, slug)

        if not step:
            if slug == 'cancel':
                self.cancel(request)
                redirect = request.REQUEST.get('rd', '/')

                return HttpResponseRedirect(redirect)

            raise MissingStepException("Step for slug %s not found." % slug)

        method_name = 'process_%s' % request.method
        method = getattr(self, method_name)

        return method(request, step)


    def _init_wizard(self, request):
        """
        Since the SessionWizard can be used as the callable for the urlconf
        there will be only one instance of the class created. We need to
        make sure each session has its own copy of the step list to manipulate.
        This way multiple connections will not trample on each others steps.
        """
        if self.id not in request.session:
            request.session[self.id] = WizardState(
                steps=self.base_steps[:], # Copies the list
                current_step=self.base_steps[0],
                form_data={})

        self.initialize(request, request.session[self.id])

    def _get_state(self, request):
        """
        Returns the :class:`WizardState` object used to manage this
        wizards internal state.
        """
        return request.session[self.id]

    def _show_form(self, request, step, form):
        """
        Render the provided form for the provided step to the
        response stream.
        """
        context = self.process_show_form(request, step, form)

        return self.render_form(request, step, form, {
            'current_step': step,
            'form': form,
            'previous_step': self.get_before(request, step),
            'next_step': self.get_after(request, step),
            'url_base': self._get_URL_base(request, step),
            'extra_context': context
        })

    def _set_current_step(self, request, step):
        """
        Sets the currenlty executing step.
        """
        self._get_state(request).current_step = step

        return step

    def _get_URL_base(self, request, step):
        """
        Returns the base URL of the wizard.
        """
        index = request.path.rfind(step.slug)

        return request.path[:index]

    def process_GET(self, request, step):
        """
        Renders the ``Form`` for the requested :class:`Step`
        """
        form_data = self.get_cleaned_data(request, step)

        if form_data:
            form = step.form(form_data)

        else:
            form = step.form()

        return self._show_form(request, step, form)

    def process_POST(self, request, step):
        """
        Processes the current :class:`Step` and either send a redirect to the
        next :class:`Step` in the sequence or finished the wizard process
        by calling ``self.done``
        """
        form = step.form(request.POST)

        if not form.is_valid():
            return self._show_form(request, step, form)

        self.set_cleaned_data(request, step, form.cleaned_data)
        self.process_step(request, step, form)
        next_step = self.get_after(request, step)

        if next_step:
            url_base = self._get_URL_base(request, step)

            return HttpResponseRedirect(urljoin(url_base, next_step.slug))

        else:
            return self.done(request)

    def get_steps(self, request):
        """
        Returns the list of :class:`Step`s used in this wizard sequence.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.
        """
        return self._get_state(request).steps

    def get_step(self, request, slug):
        """
        Returns the :class:`Step` that matches the provided slug.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param slug:
            The unique identifier for a particular :class:`Step` in the
            sequence.
        """
        steps = self.get_steps(request)

        try:
            return [step for step in steps if step.slug == slug][0]

        except IndexError:
            return None

    def get_before(self, request, step):
        """
        Returns the previous :class:`Step` in the sequence after the provided
        :class:`Step`. This function will return ``None`` if there is no
        previous step.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param step:
            The :class:`Step` to use as an index for finding the next
            :class:`Step`
        """
        steps = self.get_steps(request)
        index = steps.index(step)

        if index > 0:
            return steps[index - 1]

        else:
            return None

    def get_after(self, request, step):
        """
        Returns the next :class:`Step` in the sequence after the provided
        :class:`Step`. This function will return ``None`` if there is no
        next step.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param step:
            The :class:`Step` to use as an index for finding the next
            :class:`Step`
        """
        steps = self.get_steps(request)
        index = steps.index(step)

        try:
            return steps[index + 1]

        except IndexError:
            return None

    @modifies_session
    def remove_step(self, request, step):
        """
        Removes step from the wizard sequence.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param step:
            The :class:`Step` to remove.
        """
        steps = self.get_steps(request)

        if step in steps:
            steps.remove(step)

    @modifies_session
    def insert_before(self, request, current_step, step):
        """
        Inserts a new step into the wizard sequence before the provided step.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param current_step:
            The :class:`Step` to use as an index for inserting a new step

        :param step:
            The new :class:`Step` to insert.
        """
        steps = self.get_steps(request)

        if step not in steps:
            index = steps.index(current_step)
            steps.insert(index, step)

    @modifies_session
    def insert_after(self, request, current_step, step):
        """
        Inserts a new step into the wizard sequence after the provided step.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param current_step:
            The :class:`Step` to use as an index for inserting a new step

        :param step:
            The new :class:`Step` to insert.
        """
        steps = self.get_steps(request)

        if step not in steps:
            index = steps.index(current_step) + 1
            steps.insert(index, step)

    def get_cleaned_data(self, request, step):
        """
        Returns the cleaned form data for the provided step.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param step:
            The :class:`Step` to use to pull the cleaned form data.
        """
        return self._get_state(request).form_data.get(step.slug, None)

    @modifies_session
    def set_cleaned_data(self, request, step, data):
        """
        Sets the cleaned form data for the provided step.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param step:
            The :class:`Step` to use to store the cleaned form data.

        :param data:
            The cleaned ``Form`` data to store.
        """
        self._get_state(request).form_data[step.slug] = data

    def get_form_data(self, request):
        """
        This will return the form_data dictionary that has been saved in the
        session.  This will mainly be used in the done to query for the form_data
        that has been saved throughout the wizard process.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.
        """
        return request.session[self.id]['form_data']

    def clear(self, request):
        """
        Removes the internal wizard state from the session. This should be
        called right be for the return from a successful
        :meth:`~SessionWizard.done()` call.
        """
        del request.session[self.id]

    # METHODS SUBCLASSES MIGHT OVERRIDE IF APPROPRIATE ########################
    def initialize(self, request, wizard_state):
        """
        Hook used to initialize the wizard subclass. This will be called for
        every request to the wizard before it processes the GET or POST.

        :param request:
            A ``HttpRequest`` object for this request.

        :param wizard_state:
            The :class:`WizardState` object representing the current state of
            the wizard. Extra information can be appended to the state so it
            can be available to :class:`Step`'s of the wizard.

            For example::
                if 'profile' not in wizard_state:
                    wizard_state.profile = request.user.get_profile()
        """
        pass

    def cancel(self, request):
        """
        Hook used to cancel a wizard. This will be called when slug is passed
        that matches "cancel". By default the method will clear the session
        data.

        :param request:
            A ``HttpRequest`` object for this request.
        """
        self.clear(request)

    def process_show_form(self, request, step, form):
        """
        Hook used for providing extra context that can be used in the
        template used to render the current form.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param step:
            The current :class:`Step` that is being processed.

        :param form:
            The Django ``Form`` object that is being processed.
        """
        pass

    def process_step(self, request, step, form):
        """
        Hook for modifying the ``SessionWizard``'s internal state, given a fully
        validated ``Form`` object. The ``Form`` is guaranteed to have clean,
        valid data.

        This method should *not* modify any of that data. Rather, it might want
        dynamically alter the step list, based on previously submitted forms.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param step:
            The current :class:`Step` that is being processed.

        :param form:
            The Django ``Form`` object that is being processed.
        """
        pass

    def get_template(self, request, step, form):
        """
        Responsible for return the path to the template that should be used
        to render this current form.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param step:
            The current :class:`Step` that is being processed.

        :param form:
            The Django ``Form`` object that is being processed.
        """
        return 'forms/wizard.html'

    def render_form(self, request, step, form, context):
        """
        Renders a form with the provided context and returns a ``HttpResponse``
        object. This can be overridden to provide custom rendering to the
        client or using a different template engine.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.

        :param step:
            The current :class:`Step` that is being processed.

        :param form:
            The Django ``Form`` object that is being processed.

        :param context:
            The default context that templates can use which also contains
            any extra context created in the ``process_show_form`` hook.
        """
        return render_to_response(self.get_template(request, step, form),
            context, RequestContext(request))

    def done(self, request):
        """
        Responsible for processing the validated form data that the wizard
        collects from the user. This function should be overridden by the
        implementing subclass. This function needs to return a ``HttpResponse``
        object.

        :param request:
            A ``HttpRequest`` object that carries along with it the session
            used to access the wizard state.
        """
        raise NotImplementedError("Your %s class has not defined a done() " \
                                  "method, which is required." \
                                  % self.__class__.__name__)

########NEW FILE########
__FILENAME__ = utils
from UserDict import UserDict

from django import forms


__all__ = ('Step', 'WizardState',)


class Step(object):
    """
    When constucting a form wizard, the wizard needs to be composed of a
    sequental series of steps in which it is to display forms to the user and
    collect the data from those forms. To be able to provide these forms to the
    :ref:`SessionWizard <api_sessionwizard>`, you must first wrap the Django
    :class:`django.forms.Form` in a ``Step`` object. The ``Step`` object gives
    the ability to store the :class:`django.forms.Form` class to be used, as
    well as, a unique slug to be used in the wizard navigation.

    .. versionadded:: 0.1

    :param slug:
        Each step in the wizard should have a unique "slug" that identifies that
        ``Step`` in the process. By using slugs the wizard has the ability to go
        forward, as well as, back in the process adjusting what data it collects
        from the user.

    :param form:
        This *MUST* be a subclass of :class:`django.forms.Form` or
        :class:`django.forms.ModelForm`. This should not be an instance of that
        subclass. The :ref:`SessionWizard <api_sessionwizard>` will use this
        class to create instances for the user. If going back in the wizard
        process, the :ref:`SessionWizard <api_sessionwizard>` will prepopulate
        the form with any cleaned data already collected.
    """
    def __init__(self, slug, form):
        if not issubclass(form, (forms.Form, forms.ModelForm,)):
            raise ValueError('Form must be subclass of a Django Form')

        self.slug = str(slug)
        self.form = form

    def __hash__(self):
        return hash(self.slug)

    def __eq__(self, other):
        if isinstance(other, Step):
            return self.__hash__() == other.__hash__()

        return False

    def __ne__(self, other):
        return not self == other

    def __str__(self):
        return str(self.slug)

    def __unicode__(self):
        return unicode(self.slug)

    def __repr__(self):
        return str(self)


class WizardState(UserDict):
    """
    This class provides the ability for a
    :ref:`SessionWizard <api_sessionwizard>` to keep track of the important
    state of a multi-step form. Instead of keeping track of the state through
    :samp:`<input type="hidden">` fields, it subclasses the python ``UserDict``
    object and stores its data in the properties ``steps``,``current_step``
    and ``form_data``.

    .. versionadded:: 0.1

    :param steps:
        A list of the :ref:`Step <api_step>` objects that provide the sequence
        in which the forms should be presented to the user.

    :param current_step:
        The current :ref:`Step <api_step>` that the user is currently on.

    :param form_data:
        A ``dict`` of the cleaned form data collected to this point and
        referenced using the :ref:`Step <api_step>`'s slug as the key to
        the ``dict``
    """
    def __init__(self, *args, **kwargs):
        UserDict.__init__(self, *args, **kwargs)

        self.steps = kwargs.get('steps', None)
        self.current_step = kwargs.get('current_step', None)
        self.form_data = kwargs.get('form_data', None)

########NEW FILE########
