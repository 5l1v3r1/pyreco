How to Build Documentation
==========================

To make the html documentation, install the prerequisites, e.g. on
Debian/Ubuntu (similarly for other distributions)::

    apt-get install python-sphinx texlive-latex-recommended dvipng librsvg2-bin imagemagick

and do::

    make html

and to view it, do::

    epiphany _build/html/index.html

This directory contains SymPy example programs.

-------------------------------------------------------------------------------
DIRECTORY STRUCTURE

The examples are broken up into three categories based on difficulty of both
the mathematics and programming concepts.  They roughly follow the following
guide:

beginner :
  Simple examples appropriate for first steps in using SymPy, for someone
  with little or no programming experience.

intermediate :
  Demonstrations of more complex mathematical concepts, but still for
  someone with little programming experience.

advanced :
  Larger demonstrations of advanced mathematical topics.

-------------------------------------------------------------------------------
RUNNING EXAMPLES

All the working examples can be run by executing the "all.py" script, use
./all.py -h for usage, if an example is known to be broken it will be commented
out in this script.

To run the individual examples one needs to have Python version >= 2.6
installed and SymPy must be in your PYTHONPATH environment variable.  Most
examples can be run from the command line python and the name of the example:

  aterrel@lilac:~/sympy/examples$ export PYTHONPATH=$PWD/..:$PYTHONPATH
  aterrel@lilac:~/sympy/examples$ python beginner/basic.py
  (3*a*b**2)**c

Note: on most systems, the current directory is searched by Python
automatically, so "python beginner/basic.py" works from the sympy root
directory, however there are systems (Ubuntu Intrepid) where this doesn't work
by default, unless you put "PYTHONPATH=." into your .bashrc for example.

SymPy
=====

A Python library for symbolic mathematics.

http://sympy.org/

See the AUTHORS file for the list of authors.

And many more people helped on the SymPy mailing list, reported bugs, helped
organize SymPy's participation in the Google Summer of Code, the Google Highly
Open Participation Contest, Google Code-In, wrote and blogged about SymPy...

License: New BSD License (see the LICENSE file for details) covers all files
in the sympy repository unless stated otherwise.

Our mailing list is at
https://groups.google.com/forum/?fromgroups#!forum/sympy.

We have community chat at `Gitter <https://gitter.im/sympy/sympy>`_. Feel free
to ask us anything there. We have a very welcoming and helpful community.

Download
--------

.. image:: https://pypip.in/v/sympy/badge.png
    :target: https://pypi.python.org/pypi/sympy

.. image:: https://pypip.in/d/sympy/badge.png
    :target: https://pypi.python.org/pypi/sympy

Get the latest version of SymPy from
https://pypi.python.org/pypi/sympy/

To get the git version do

::

    $ git clone git://github.com/sympy/sympy.git

For other options (tarballs, debs, etc.), see See
http://docs.sympy.org/dev/install.html.

Documentation and usage
-----------------------

Everything is at:

http://docs.sympy.org/

You can generate everything at the above site in your local copy of SymPy by::

    $ cd doc
    $ make html

Then the docs will be in `_build/html`. If you don't want to read that, here
is a short usage:

From this directory, start python and::

    >>> from sympy import Symbol, cos
    >>> x = Symbol('x')
    >>> e = 1/cos(x)
    >>> print e.series(x, 0, 10)
    1 + (1/2)*x**2 + (5/24)*x**4 + (61/720)*x**6 + (277/8064)*x**8 + O(x**10)

SymPy also comes with a console that is a simple wrapper around the
classic python console (or IPython when available) that loads the
sympy namespace and executes some common commands for you.

To start it, issue::

    $ bin/isympy

from this directory if SymPy is not installed or simply::

    $ isympy

if SymPy is installed.

Installation
------------

To install SymPy, simply run::

    $ python setup.py install

If you install it system-wide, you may need to prefix the previous command with ``sudo``::

    $ sudo python setup.py install

See http://docs.sympy.org/dev/install.html for more information.

Tests
-----

To execute all tests, run::

    $./setup.py test

in the current directory.

For more fine-grained running of tests or doctest, use ``bin/test`` or
respectively ``bin/doctest``. The master branch is automatically tested by
Travis CI, the results can be seen here:

.. image:: https://secure.travis-ci.org/sympy/sympy.png?branch=master
    :target: http://travis-ci.org/sympy/sympy

To test pull requests, use `sympy-bot <https://github.com/sympy/sympy-bot>`_.

Usage in Python 3
-----------------

SymPy also supports Python 3. If you want to install the latest version in
Python 3, get the Python 3 tarball from
https://pypi.python.org/pypi/sympy/

To install the SymPy for Python 3, simply run the above commands with a Python
3 interpreter.

Clean
-----

To clean everything (thus getting the same tree as in the repository)::

    $ ./setup.py clean

You can also clean things with git using::

    $ git clean -Xdf

which will clear everything ignored by ``.gitignore``, and::

    $ git clean -df

to clear all untracked files.  You can revert the most recent changes in git
with::

    $ git reset --hard

WARNING: The above commands will all clear changes you may have made, and you
will lose them forever. Be sure to check things with ``git status``, ``git
diff``, ``git clean -Xn`` and ``git clean -n`` before doing any of those.

Bugs
----

Our issue tracker is at https://github.com/sympy/sympy/issues.  Please report
any bugs that you find.  Or, even better, fork the repository on GitHub and
create a pull request.  We welcome all changes, big or small, and we will help
you make the pull request if you are new to git (just ask on our mailing list
or Gitter).

Brief History
-------------

SymPy was started by Ondřej Čertík in 2005, he wrote some code during the
summer, then he wrote some more code during the summer 2006. In February 2007,
Fabian Pedregosa joined the project and helped fixed many things, contributed
documentation and made it alive again. 5 students (Mateusz Paprocki, Brian
Jorgensen, Jason Gedge, Robert Schwarz and Chris Wu) improved SymPy incredibly
during the summer 2007 as part of the Google Summer of Code. Pearu Peterson
joined the development during the summer 2007 and he has made SymPy much more
competitive by rewriting the core from scratch, that has made it from 10x to
100x faster. Jurjen N.E. Bos has contributed pretty printing and other patches.
Fredrik Johansson has wrote mpmath and contributed a lot of patches.

SymPy has participated in every Google Summer of Code since 2007. You can see
https://github.com/sympy/sympy/wiki#google-summer-of-code for full details.
Each year has improved SymPy by bounds. Most of SymPy's development has come
from Google Summer of Code students.

In 2011, Ondřej Čertík stepped down as lead developer, with Aaron Meurer, who
also started as a Google Summer of Code student, taking his place. Ondřej
Čertík is still active in the community, but is too busy with work and family
to play a lead development role

Since then, a lot more people have joined the development and some people have
also left. You can see the full list in doc/src/aboutus.rst, or online at:

http://docs.sympy.org/dev/aboutus.html#sympy-development-team

The git history goes back to 2007, when development moved from svn to hg.  To
see the history before that point, look at http://github.com/sympy/sympy-old.

You can use git to see the biggest developers.  The command::

     $ git shortlog -ns

will show each developer, sorted by commits to the project.  The command::

     $ git shortlog -ns --since="1 year"

will show the top developers from the last year.

Citation
--------

To cite SymPy in publications use::

    SymPy Development Team (2014). SymPy: Python library for symbolic mathematics
    URL http://www.sympy.org.

A BibTeX entry for LaTeX users is::

    @Manual{,
    title = {SymPy: Python library for symbolic mathematics},
    author = {{SymPy Development Team}},
    year = {2014},
    url = {http://www.sympy.org},
    }

SymPy is BSD licensed, so you are free to use it whatever you like, be it
academic, commercial, creating forks or derivatives, as long as you copy the
BSD statement if you redistribute it (see the LICENSE file for details).  That
said, although not required by the SymPy license, if it is convenient for you,
please cite SymPy when using it in your work and also consider contributing
all your changes back, so that we can incorporate it and all of us will
benefit in the end.

# Prepare the VM

First execute:

    vagrant up
    fab vagrant prepare

which will prepare the VM (install packages, cache sympy repository, etc.).

You only need to execute this once. It will take a while if you have never run
it before, because it has to download a lot of stuff.

# Release

First, make sure that you have done the following things

- Create a release branch. Usually this branch is the same name as the release
  (e.g., "0.7.3"), although no naming convention is enforced on it.

- Change the version in the release branch in sympy/__init__.py.  If you want
  to do a release candidate, change it to something like 0.7.3.rc1.

- Change the version in master.  This way, any additional changes made in
  master will be shown as coming from the right place. The master release
  should be like "0.7.3-git".

- Push the release branch up to origin, and make a pull request for it against
  master.

It is important to create a new branch because that lets master continue
as normal. The fab script will automatically checkout the release branch from
origin, which is why you need to push it (it determines what the release
branch by just looking at what branch you have checked out locally, so make
sure you are on the release branch when you release). It is important to
change the version number because it uses that in naming the tarballs it
creates.

If you want to test the release process without pushing a branch to the
official repo, you can push a branch to your fork and use `fab vagrant
release:fork='username'`, where `username` is your GitHub username.  Note that
once you do the actual release, you should do it in a branch in the official
GitHub repo.  **NOTE**: If your fork does not have all the tags of the
official repo, then the code that finds the previous version will not work
correctly.  Hence, you may see things like more authors in the authors list
than you should.  To remedy this, be sure to do `git fetch origin --tags` and
`git push github --tags`.

Once you have done these things, execute:

    fab vagrant release

this create release tarballs and put them all into a new "release" directory
of the current directory.

# Testing things

The full test suite is not run by fabric, because we leave that to
Travis. However, there are things that need to be tested specific to the
release. Most of these things are done automatically by the release command
(like testing that the tarball can be installed), but one thing must be tested
manually, because it has to be inspected by hand, namely, making sure that the
tarballs contain everything, and don't contain any junk files.

Run

    fab vagrant show_files:arg

to show the files in the tarball, where `arg` is `source` or `html`.  You'll
probably want to pipe the output of this into `less`, so that you can inspect
it.

You should also open the pdf and make sure that it has built correctly, and
open the html docs and make sure that they have built correctly.

# Tagging the release

Once you have made the final release files that you plan to upload, be sure
that everything is committed, and that the most recent git HEAD is indeed the
same one that was used to build the files (you can always do `fab vagrant
release` again if you are not sure). Then tag the release with the command

    git tag sympy-VERSION -a

where you should replace `VERSION` with the version (which should be `x.y.z`,
or `x.y.z.rcn` for the `n`th release candidate. It is very important to follow
the tag naming conventions.  The `-a` will cause it to prompt for a tag commit
message. Just write something like "SymPy VERSION release".

Then, push up the tag, with

    git push origin sympy-VERSION

Note, once a tag is pushed, that's it. It can't be changed. If you need to
change the tag, you must bump the release number.  So double check that
everything is right before pushing.

# Uploading

Before you release, you need to push the tag up, as described above.

Release candidates should only be uploaded to GitHub only.

    fab vagrant GitHub_release

This will create the release on GitHub for the tag, and upload the files to
it.  Do not upload release candidates to PyPI, as `pip` and `easy_install`
will pick them up if you do.

This will prompt you for a username and password the first time you call it.
After that, it will prompt you to generate a token file.  If you don't save
the token to a file, you will need to pass it in as an argument. Releasing is
only supported via OAuth, so using a token is required.

You (obviously) need push access to create a GitHub release.

If you want to test this before doing it, use

    fab vagrant GitHub_release:draft=True

This will make the release not visible until you go to the web interface and
publish it.  You can also set the `user` and `repo` flags to test against a
different GitHub repo.

For final releases, you should upload to both GitHub and PyPI. The command

    fab vagrant upload

will do both of these.  You will need admin access to the SymPy PyPI project.

Note that if either of these commands fails for some reason, you will very
likely need to go into the web interface and clean some things up before you
can upload again.

# Updating websites

You should now update the websites. Only do this for final releases. The command

    fab vagrant update_websites

will update docs.sympy.org and sympy.org.  You will need to have local clones
of these repos, and push access to them (obviously).  **Note, this command
will commit and push the changes automatically.**

The other website that needs to be updated is SymPy Live. You should make this
as a pull request to the Live repo.

# Other

You can run all the SymPy tests by running:

    fab vagrant test_sympy

To get the md5 sums of all the files, use

    fab md5

To list the files in the tarball use

    fab vagrant show_files:arg

where `arg` is `source` or `html`, for the Python sources and the html docs,
respectively. Note that the source code is already checked automatically
against the files in git and a whitelist.

You can obtain all available commands by:

    fab -l

# Restarting from scratch

Run

    vagrant destroy

You can also delete the releases that it has built

    rm -rf release

