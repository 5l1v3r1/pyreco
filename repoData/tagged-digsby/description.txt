
Sizer - an executable size report utility.

Aras Pranckevicius, http://aras-p.info/projSizer.html
Based on code by Fabian "ryg" Giesen, http://farbrausch.com/~fg/


building Digsby dependencies on Windows
=======================================

Known Issues
------------

MSVC9: python/pcbuild/pcbuild.sln is not msvc9 express compatible, fails
       need to script "vcbuild /upgrade pcbuild.sln" process

Prerequisites
-------------

- Visual Studio 2008
- Windows 7 SDK (first google result; you can leave .NET components unchecked in the installer)
  - make sure to run the "Windows SDK Configuration Tool" and set the latest version as active
- Python 2.6 (installed to C:\python26)
 - http://python.org/download/
- perl (ActiveState Perl is easy to install)
 - http://www.activestate.com/activeperl/downloads/
- svn (command-line binaries)
 - http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=8100
- swig
- git (msys-git, in c:\Program Files\Git\bin\git.exe)
 - http://code.google.com/p/msysgit/
   - your public key needs to be stored in mini:/home/git/.ssh/authorized_keys2
     (ssh-keygen can create an ~/.ssh/id_rsa.pub file for you that git will use
     automatically)
   - Make sure to choose "leave line endings as they are" when installing. If you
     didn't, open Git Bash and run the following command to prevent problems:
       git config --global core.autocrlf false
   - make sure to run these commands to get your username/email configured
     so that if you need to push commits back they have your name.
        git config --global user.name "Your Name Comes Here"
        git config --global user.email you@yourdomain.example.com
- bakefile
 - http://www.bakefile.org/download.html
- for building CGUI:
 - need boost: unzip http://sourceforge.net/projects/boost/files/boost/1.42.0/ somewhere and set BOOST_DIR to that directory.

Bootstrapped
------------

- svn (command-line binaries)
 - http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=8100
- nasm.exe
 - required by OpenSSL build process
 - binaries at sourceforge: http://sourceforge.net/project/showfiles.php?group_id=6208&package_id=47034
- for building webkit, a cygwin install from http://webkit.org/building/tools.html


Instructions
------------

Get Digsby:
  svn co http://DIGSBYSVN/digsby/trunk digsby

Build all dependencies:
  cd digsby\build\msw
  python build_all.py

To run:
  cd ..\.. (back into the root Digsby directory)
  digsby.bat


---
git fails w/ FAT32

lxml must be built after PIL (needs zlib) which must come after webkit (needs jpeg)


building-on-mac-instructions
----------------------------

install python from python.org
make sure "python" on the PATH is python 2.6

svn co http://svn.python.org/projects/sandbox/trunk/setuptools
  cd setuptools
  python setup.py install

install git
install bakefile

cd build
./build-deps.py --wx_trunk --debug --python_deps


Buddylist
=========

This subproject makes sorted and merged buddylists across protocols.

It handles many cases to create a "sane" buddylist across different services:

- merges similarly named groups across protocols
- filters offline buddies based on preference
- groups offline buddies based on preference
- handles protocols with and without root groups
- prunes empty groups
- sorts by different attributes at once, i.e., log size, and then protocol

Three binaries are created*:

    buddylist.dll        Sorter functionality.

    blist.pyd            Python interface to buddylist.dll

    buddylist_test.exe   Google Test binary testing functionality in
                         buddylist.dll. Source is blist_test.cpp in test/

There is also a set of Python tests for exercising functionality in blist.pyd
in the test/ directory: sorter_test.py

*The extensions for these binaries may vary by platform.

Windows
-------

All project files are in the msvc2008 directory.

To build the buddylist binaries, run b.bat (which is in this directory) in a
MSVC2008 dev console, or open msvc2008\BuddyListSort.sln in Visual Studio.

*IMPORTANT*

Before building, the following environment variables need to be set:

SIP_BIN     sip.exe
SIP_INCLUDE directory to find sip.h
GTEST       path to a gtest directory (needed for building unittests--not
            required to build buddylist.dll and blist.pyd)

Upon a successful build, the project script copies binaries (and debugging
symbol files) to ../../win (digsby/ext/win), where they can be imported by
Digsby.

Mac/Linux
---------

No makefiles have been created for the buddylist subproject yet!


This directory holds any third-party modules that have C/C++ extensions
or platform-specific components and thus can't be shared across
platforms. Nothing should be put into this root dir, and you should
never put platlib itself on the PYTHONPATH, only the subdirs matching
your platform.

Digsby
======

Digsby is an open-source instant messenger client.

to execute Javascript tests, we use js-test-driver: http://code.google.com/p/js-test-driver


<div style="border:solid 1px black;padding:10px;width:300px">
<h2>Contents</h2>
<UL>
<LI>1 Links 
<LI>2 Description 
<LI>3 Command line 
<UL>
<LI>3.1 get DLL Function 
<LI>3.2 post DLL Function 
<LI>3.3 head DLL Function 
<LI>3.4 put DLL Function
</UL>
<LI>4 Examples 
<LI>5 Credits
</UL>
</div>

<h2>Links</h2> 
Download: <a href="http://nsis.sourceforge.net/Inetc_plug-in">http://nsis.sourceforge.net/Inetc_plug-in</a>

<h2>Description</h2>
Internet client plug-in for files download and upload. Based on the InetLoad plug-in. 
Network implementation uses MS WinInet API, supports http/https and ftp protocols. 
Plugin has better proxy support compare to NSISdl plug-in. Command line may include 
few URL/File pairs to be transfered. If server or proxy login/password are not setten in the script, 
displays IE-style authentication dialog (except silent mode). Plug-in supports 3 
"transfer in progress" display modes: 
<UL>
<LI>old NSISdl style - additional embedded progress bar and text on the INSTFILES page; 
<LI>POPUP dialog mode with detailed info; 
<LI>BANNER mode with simple popup window. 
</UL>
Plug-in recognizes Installer's Silent mode and this case hides any output (this feature 
requires NSIS 2.03 or later). Program implements simple re-get functionality - host 
reconnect and download from current position after short pause. While program depends on IE settings, 
it changes current IE mode to online. NSISdl code fragment was used for progress bar displaying 
in the "old style" mode. For ftp use "host/path" for file location relative to user's home dir and 
"host//path" for absolute path.

<h2>Command line</h2>

Plug-in DLL functions (entry points): get, post, head, put 

<h3>get DLL Function </h3>

<i>inetc::get [/PROXY IP:PORT] [/USERNAME PROXY_LOGIN /PASSWORD PROXY_PASSWD]
 [/NOPROXY] [/NOCANCEL] [/TIMEOUT INT_MS] [/SILENT] [/CAPTION TEXT]
 [/RESUME RETRY_QUESTION] [/POPUP HOST_ALIAS | /BANNER TEXT] [/CANCELTEXT CANCEL_TEXT] 
 [/USER_AGENT USER_AGENT_TEXT] [/HEADER HEADER_TEXT] [/TRANSLATE LANG_PARAMS]
 URL1 local_file1 [URL2 local_file2 [...]] [/END]</i>
<p>This call returns "OK" string if successful, error description string if failed (see included InetLoad.cpp file for a full set of status strings). Usage and result processing samples are included to the package. 
<p>/PROXY - 
Overwrites current proxy settings, not required in most cases. IE settings will be used by default. 
<p>/USERNAME - 
Proxy username (http only). 
<p>/PASSWORD - 
Proxy password (http only). For server (http/ftp) authentication it is possible to use URL encoded name and password, for example http://username:password@nsis.sourceforge.net. 
<p>/NOPROXY - 
Disables proxy settings for this connection (if any) 
<p>/NOCANCEL - 
Prevents download from being interrupted by user (locks Esc, Alt-F4, Cancel handling, removes sysmenu) 
<p>/TIMEOUT - 
Sets INTERNET_OPTION_CONNECT_TIMEOUT, milliseconds, default - IE current parameter value. 
<p>/SILENT - 
Key hides plug-in' output (both popup dialog and embedded progress bar). Not required if 'SilentInstall silent' mode was defined in script (NSIS 2.03 or later). 
<p>/RESUME - 
On the permanent connection/transfer error instead of exit first displays message box with "resume download" question. Useful for dial-up connections and big files - allows user to restore connection and resume download. Default is "Your internet connection seems to have dropped out!\nPlease reconnect and click Retry to resume downloading...". 
<p>/CAPTION - 
Defines caption text for /BANNER mode, caption prefix (left of '-') for /POPUP mode and caption for RESUME MessageBox. Default is "InetLoad plug-in" if not set or "". 
<p>/POPUP - 
This mode displays detailed download dialog instead of embedded progress bar. Also useful in .onInit function (i.e. not in Section). If HOST_ALIAS is not "", text will replace URL in the dialog - this allows to hide real URL (including password). 
<p>/BANNER - 
Displays simple popup dialog (MSI Banner mode) and sets dialog TEXT (up to 3 lines using $\n). 
<p>/CANCELTEXT - 
Text for the Cancel button in the NSISdl mode. Default is NSIS dialog Cancel button text (current lang). 
<p>/USERAGENT - 
UserAgent http request header value. Default is "NSIS_Inetc (Mozilla)". 
<p>/HEADER - 
Adds or replaces http request header. Common HEADER_TEXT format is "header: value". 
<p>/END - 
Allows to limit plug-in stack reading (optional, required if you stores other vars in the stack). 
<p>/TRANSLATE - 
Allows translating plug-in text in the POPUP or NSISdl modes. 8 parameters both cases.<br>

NSISdl mode parameters:<br>
  /TRANSLATE downloading connecting second minute hour plural progress remaining<br>
With default values:<br>
  "Downloading %s" "Connecting ..." second minute hour s "%dkB (%d%%) of %dkB @ %d.%01dkB/s" "(%d %s%s remaining)"<br>

POPUP mode parameters:<br>
  /TRANSLATE url downloading connecting file_name received file_size remaining_time total_time<br>
With default values:<br>
  URL Downloading Connecting "File Name" Received "File Size" "Remaining Time" "Total Time"<br>

<h3>post DLL Function </h3>

<i>inetc::post TEXT2POST [/PROXY IP:PORT] [/NOPROXY] [/NOCANCEL]
 [/USERNAME PROXY_LOGIN  /PASSWORD PROXY_PASSWD] [/TIMEOUT INT_MS] [/SILENT]
 [/CAPTION TEXT] [/POPUP | /BANNER TEXT] [/CANCELTEXT CANCEL_TEXT] 
 [/USER_AGENT USER_AGENT_TEXT] [/TRANSLATE LANG_PARAMS]
 URL1 local_file1 [URL2 local_file2 [...]] [/END]</i>
<p>Sets POST http mode and defines text string to be used in the POST (http only). Disables auto re-get. No char replaces used (%20 and others). 

<h3>head DLL Function </h3>

The same as get, but requests http headers only. Writes raw headers to file. 

<h3>put DLL Function </h3>

<i>inetc::put [/PROXY IP:PORT] [/USERNAME PROXY_LOGIN /PASSWORD PROXY_PASSWD] [/NOPROXY]
 [/NOCANCEL] [/TIMEOUT INT_MS] [/SILENT] [/CAPTION TEXT] [/POPUP | /BANNER TEXT] 
 [/CANCELTEXT CANCEL_TEXT] [/USER_AGENT USER_AGENT_TEXT] 
 [/TRANSLATE LANG_PARAMS] URL1 local_file1 [URL2 local_file2 [...]] [/END]</i>
<p>Return value and parameters (if applicable) are the same as for previous entry point. 

<h2>Examples </h2>
<pre>  inetc::get "http://dl.zvuki.ru/6306/mp3/12.mp3" "$EXEDIR\12.mp3" \
     "ftp://dl.zvuki.ru/6306/mp3/11.mp3" "$EXEDIR\11.mp3"
  Pop $0
  inetc::put /BANNER "Cameron Diaz upload in progress..." \
    "http://www.dreamgirlswallpaper.co.uk/fiveyearsonline/wallpaper/Cameron_Diaz/camerond09big.JPG" \
    "$EXEDIR\cd.jpg"
  Pop $0
  StrCmp $0 "OK" dlok
  MessageBox MB_OK|MB_ICONEXCLAMATION "http upload Error, click OK to abort installation" /SD IDOK
  Abort
dlok:
  ...</pre>

<h2>Credits</h2> 
Many thanks to Backland who offered a simple way to fix NSISdl mode crashes and added 'center parent' function.

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Orange Vista NSIS Modern UI Theme</title>
<style type="text/css">
<!--
body {
	margin: 0px;
	background-color: #666666;
	font-family: "Lucida Grande", Verdana, Arial, Helvetica, sans-serif;
	font-size: small;
}
pre {
	font-size: x-small;
}
#cuerpo {
	padding: 20px;
}
#principal {
	background-color: #FFFFFF;
	width: 786px;
	margin-left: auto;
	margin-right: auto;
	border-right-width: 1px;
	border-left-width: 1px;
	border-top-style: none;
	border-right-style: solid;
	border-bottom-style: none;
	border-left-style: solid;
	border-right-color: #CCCCCC;
	border-left-color: #CCCCCC;
}
h1 {
	font-size: x-large;
	color: #666666;
}
#cabecera {
	background-image: url(Docs/web-header.jpg);
	background-repeat: no-repeat;
	height: 275px;
	width: 786px;
	text-indent: -5000px;
	background-position: left top;
}
h2 {
	font-size: medium;
	color: #666666;
}
h3 {
	color: #666666;
	font-size: small;
}
#toc {
	float: right;
	border: 1px solid #CCCCCC;
	margin-bottom: 15px;
	margin-left: 15px;
	padding-top: 0px;
	padding-right: 15px;
	padding-bottom: 0px;
	padding-left: 15px;
}
a {
	color: #333333;
}
-->
</style>
</head>

<body>
<div id="principal">
<div id="cabecera">
<h1>Orange Vista NSIS Modern UI Theme</h1>
</div>
<div id="cuerpo">
<div id="toc">
                <h3>Contents</h3>
                  <ol>
                    <li><a href="#Description">Description</a></li>
                    <li><a href="#Welcome.2FFinish_Bitmaps">Welcome/Finish Bitmaps</a></li>
                    <li><a href="#Headers">Headers</a></li>
                    <li><a href="#Icons">Icons</a></li>
                    <li><a href="#Usage">Usage</a></li>
                    <li><a href="#License">License</a></li>
                    <li><a href="#Links">About the author </a></li>
                </ol></div>
        <p><a name="Description" id="Description"></a></p>
        <h2> Description </h2>
        <p>The &quot;Orange Vista Modern UI Theme&quot; is a professional collection of icons and bitmaps  with a Windows Vista style for NullSoft Scriptable Install System (<a href="http://nsis.sourceforge.net">NSIS</a>) and his Modern UI.</p>
        <p>The icons have the new 256x256 icon format  and adapts perfectly with the look and feel of Windows Vista.</p>
        <p>The theme is a evolution of my old &quot;Orange&quot; Modern UI Theme. You can see and download it <a href="http://nsis.sourceforge.net/%22Orange%22_Modern_UI_Theme">here</a> </p>
        <p>It has 9 variants, each one with different icons: </p>
        <table width="100%" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td><img src="Docs/icon_0016_in.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0017_un.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0012_in.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0013_un.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0014_in.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0015_un.jpg" width="121" height="124" /></td>
          </tr>
          <tr>
            <td><img src="Docs/icon_0004_in.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0005_un.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0000_in.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0001_un.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0002_in.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0003_un.jpg" width="121" height="124" /></td>
          </tr>
          <tr>
            <td><img src="Docs/icon_0010_in.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0011_un.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0006_in.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0007_un.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0008_in.jpg" width="121" height="124" /></td>
            <td><img src="Docs/icon_0009_un.jpg" width="121" height="124" /></td>
          </tr>
        </table>
        <p>Each theme consist of two icons (un/install), two &quot;wizard&quot;  bitmaps (un/install), and four &quot;header&quot; bitmaps (un/install,  left/right). </p>
        <a name="Welcome.2FFinish_Bitmaps" id="Welcome.2FFinish_Bitmaps"></a>
<h2> Welcome/Finish Bitmaps </h2>
        <p align="center"><img src="Docs/image1.jpg" width="509" height="393" /></p>
        <a name="Headers" id="Headers"></a>
<h2> Headers </h2>
        <p align="center"><img src="Docs/image2.jpg" width="503" height="155" /></p>
        <a name="Icons" id="Icons"></a>
<h2> Icons </h2>
        <p align="center"><img src="Docs/image3.jpg" width="450" height="341" /></a> </p>
        <p align="center"><img src="Docs/image4.jpg" width="450" height="341" /></p>
        <a name="Usage" id="Usage"></a>
<h2> Usage </h2>
        <p>Here's a simple copy-n-paste example on how to use the Orange Vista theme.<br />
          The code below uses the &quot;CD-Clean&quot; variant and a right-sided header. </p>
    <pre>; Sets the theme path
	
	!define OMUI_THEME_PATH &quot;${NSISDIR}\Contrib\MUI Orange Vista Theme\CD-Clean&quot;
  
; MUI Settings / Icons

; In the moment of writing this, NSIS don't support well Vista icons with PNG compression.
; We provide both, compressed and uncompressed (-nopng) icons.

	!define MUI_ICON &quot;${OMUI_THEME_PATH\installer-nopng.ico&quot;
	!define MUI_UNICON &quot;${OMUI_THEME_PATH}\uninstaller-nopng.ico&quot;
 
; MUI Settings / Header
	!define MUI_HEADERIMAGE
	!define MUI_HEADERIMAGE_RIGHT
	!define MUI_HEADERIMAGE_BITMAP &quot;${OMUI_THEME_PATH}\header-r.bmp&quot;
	!define MUI_HEADERIMAGE_UNBITMAP &quot;${OMUI_THEME_PATH\header-r-un.bmp&quot;
 
; MUI Settings / Wizard		
	!define MUI_WELCOMEFINISHPAGE_BITMAP &quot;${OMUI_THEME_PATH\wizard.bmp&quot;
	!define MUI_UNWELCOMEFINISHPAGE_BITMAP &quot;${OMUI_THEME_PATH\wizard-un.bmp&quot;</pre>
	<a name="License" id="License"></a>
	<h2>License</h2>
	<p>The &quot;Orange Vista&quot; Modern UI Theme is licensed under a &quot;Attribution-NoDerivs 3.0 Unported&quot; Creative Commons License. You can use it freely on your instalers without ask me.</p>
	<p align="center"><a rel="license"
href="http://creativecommons.org/licenses/by-nd/3.0/">
<img alt="Creative Commons License" style="border-width:0"
src="http://i.creativecommons.org/l/by-nd/3.0/88x31.png" />
</a>
<br />
This 
<span xmlns:dc="http://purl.org/dc/elements/1.1/"
href="http://purl.org/dc/dcmitype/StillImage" rel="dc:type">
work </span>is licensed under a 
<a rel="license"
href="http://creativecommons.org/licenses/by-nd/3.0/">Creative
Commons Attribution-No Derivative Works 3.0 License</a>.</p>
	<p><a name="Links" id="Links"></a> </p>
	<h2> About the author </h2>
	<p>Manuel Lozano (me) is a spanish graphic designer and programmer born in 1981 specialized in web design.</p>
	<p>You can see my blog at <a href="http://www.monki.es">http://www.monki.es</a> </p>
</div>
</div>
</body>
</html>

BANNER PLUG-IN
--------------

The Banner plug-in shows a banner with customizable text. It uses the IDD_VERIFY dialog of the UI.

There are three functions - show, getWindow and destroy.

Usage
-----

Banner::show "Text to show"

[optional] Banner::getWindow

Banner::destroy

See Example.nsi for an example.

Modern UI
---------

The Modern UI has two labels on the IDD_VERIFY dialog. To change all the texts, use:

Banner::show /set 76 "Text 1 (replaces Please wait while Setup is loading...)" "Normal text"

Custom UI
---------

If you have more labels on your IDD_VERIFY dialog, you can use multiple /set parameters to change the texts.

Example:

Banner::show /set 76 "bah #1" /set 54 "bah #2" "Normal text"

The second parameter for /set is the ID of the control.

Some More Tricks
----------------

If you use /set to set the main string (IDC_STR, 1030) you can specify a different string for the window's caption and for the main string.

If you use an empty string as the main string (Banner::show "") the banner window will not show on the taskbar.

Credits
-------

A joint effort of brainsucker and kichik in honor of the messages dropped during the battle
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>InstallOptions 2</title>
    <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
    <style type="text/css">
        /*<![CDATA[*/body
        {
            padding: 10px;
            background-color: #F0F0F0;
            font-family: Verdana, Arial, Helvetica, sans-serif;
            font-size: 13px;
            font-weight: normal;
            text-align: left;
        }
        p, li
        {
            font-size: 13px;
        }
        .center
        {
            text-align: center;
        }
        table
        {
            margin: auto;
            font-size: 13px;
            background-color: #FFFFFF;
        }
        .maintable
        {
            border: 2px solid #376EAB;
        }
        .parameter
        {
            font-weight: bold;
            color: #6586AC;
        }
        h1
        {
            font-size: 30px;
            color: #333333;
            font-weight: normal;
            text-align: center;
            margin-top: 20px;
        }
        h2
        {
            font-size: 20px;
            color: #7A7272;
            font-weight: normal;
        }
        h3
        {
            font-size: 17px;
            font-weight: bold;
            color: #303030;
        }
        pre
        {
            font-size: 13px;
        }
        div
        {
            margin: 20px;
        }
        a:link, a:visited, a:active
        {
            color: #294F75;
            text-decoration: none;
        }
        a:hover
        {
            color: #182634;
            text-decoration: underline;
        }
        .subtable
        {
            border: 0px;
            margin-left: 20px;
            margin-right: 20px;
        }
        .lefttable
        {
            background-color: #CCCCCC;
            vertical-align: top;
        }
        .righttable
        {
            background-color: #EEEEEE;
            vertical-align: top;
        }
        /*]]>*/</style>
</head>
<body>
    <table width="750" class="maintable" cellspacing="0" cellpadding="0" align="center">
        <tr>
            <td>
                <h1>
                    InstallOptions 2</h1>
                <div>
                    <p>
                        The InstallOptions plug-in is deprecated. For new scripts, it is recommended to
                        use the new nsDialogs plug-in instead.</p>
                </div>
                <div>
                    <h2>
                        Introduction</h2>
                    <div>
                        <p>
                            InstallOptions is an NSIS plugin which allows you to create custom pages for NSIS
                            installers, to prompt the user for extra information.</p>
                        <p>
                            The dialogs created by InstallOptions are based on INI files which define the controls
                            on the dialog and their properties. These INI files can be modified from the script
                            to adjust the dialogs on runtime.</p>
                        <p>
                            The format of INI files is described in a <a href="http://en.wikipedia.org/wiki/Ini_file">
                                Wikipedia article</a>.</p>
                    </div>
                    <h2>
                        INI file structure</h2>
                    <div>
                        <p>
                            The INI file has one required section. This section includes the number of controls
                            to be created as well as general window attributes. The INI file also includes a
                            variable number of Field sections which are used to create the controls to be displayed.</p>
                        <p>
                            The required section is named &quot;<em>Settings</em>&quot;. It can contain the
                            following values:</p>
                        <table class="subtable">
                            <tr>
                                <td class="lefttable">
                                    <strong>NumFields</strong></td>
                                <td class="lefttable">
                                    <em>(required)</em></td>
                                <td class="righttable">
                                    The number of control elements to be displayed on the dialog window.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>Title</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    If specified, gives the text to set the titlebar to. Otherwise, the titlebar text
                                    is not changed.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>CancelEnabled</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    If specified, overrides NSIS settings and enables or disables the cancel button.
                                    If set to 1, the cancel button will be enabled. If set to 0, the cancel button will
                                    be disabled.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>CancelShow</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    If specified, overrides NSIS settings and shows or hides the cancel button If set
                                    to 1, the cancel button will be shown. If set to 0, the cancel button will be hidden.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>BackEnabled</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    If specified, overrides NSIS settings and enables or disables the back button. If
                                    set to 1, the back button will be enabled. If set to 0, the back button will be
                                    disabled.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>CancelButtonText</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    Overrides the text for the cancel button. If not specified, the cancel button text
                                    will not be changed.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>NextButtonText</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    Overrides the text for the next button. If not specified, the next button text will
                                    not be changed.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>BackButtonText</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    Overrides the text for the back button. If not specified, the back button text will
                                    not be changed.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>Rect</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    Overrides the default rect ID to run over. This will make IO resize itself according
                                    to a different rect than NSIS's dialogs rect.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>RTL</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    If 1 is specified the dialog will be mirrored and all texts will be aligned to the
                                    right. The INSTALLOPTIONS_EXTRACT macros automatically set this field to the right
                                    value for the current installer language as given by the NSIS string $(^RTL).</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>State</strong></td>
                                <td class="lefttable">
                                    <em>(output)</em></td>
                                <td class="righttable">
                                    This is not something you have to supply yourself but is set by InstallOptions,
                                    before calling your custom page validation function, to the field number of the
                                    custom Button control (or other control having the Notify flag) the user pressed,
                                    if any.</td>
                            </tr>
                        </table>
                        <p>
                            Each field section has the heading &quot;Field #&quot; where # must be sequential
                            numbers from 1 to NumFields. Each Field section can contain the following values:</p>
                        <table class="subtable">
                            <tr>
                                <td class="lefttable">
                                    <strong>Type</strong></td>
                                <td class="lefttable">
                                    <em>(required)</em></td>
                                <td class="righttable">
                                    Type of control to be created. Valid values are &quot;<em>Label</em>&quot;, &quot;<em>Text</em>&quot;,
                                    &quot;<em>Password</em>&quot;, &quot;<em>Combobox</em>&quot;, &quot;<em>DropList</em>&quot;,
                                    &quot;<em>Listbox</em>&quot;, &quot;<em>CheckBox</em>&quot;, &quot;<em>RadioButton</em>&quot;,
                                    &quot;<em>FileRequest</em>&quot;, &quot;<em>DirRequest</em>&quot; &quot;<em>Icon</em>&quot;,
                                    &quot;<em>Bitmap</em>&quot;, &quot;<em>GroupBox</em>&quot;, &quot;<em>HLine</em>&quot;,
                                    &quot;<em>VLine</em>&quot;, &quot;<em>Link</em>&quot; or &quot;<em>Button</em>&quot;.<br />
                                    <br />
                                    A &quot;<em>Label</em>&quot; is used to display static text. (i.e. a caption for
                                    a textbox)<br />
                                    A &quot;<em>Text</em>&quot; and &quot;<em>Password</em>&quot; accept text input
                                    from the user. &quot;<em>Password</em>&quot; masks the input with * characters.<br />
                                    A &quot;<em>Combobox</em>&quot; allows the user to type text not in the popup list,
                                    a &quot;<em>Droplist</em>&quot; only allows selection of items in the list.<br />
                                    A &quot;<em>Listbox</em>&quot; shows multiple items and can optionally allow the
                                    user to select more than one item.<br />
                                    A &quot;<em>CheckBox</em>&quot; control displays a check box with label.<br />
                                    A &quot;<em>RadioButton</em>&quot; control displays a radio button with label.<br />
                                    A &quot;<em>FileRequest</em>&quot; control displays a textbox and a browse button.
                                    Clicking the browse button will display a file requester where the user can browse
                                    for a file.<br />
                                    A &quot;<em>DirRequest</em>&quot; control displays a textbox and a browse button.
                                    Clicking the browse button will display a directory requester where the user can
                                    browse for a directory.<br />
                                    An &quot;<em>Icon</em>&quot; control displays an icon. Use no Text to use the installer
                                    icon.<br />
                                    A &quot;<em>Bitmap</em>&quot; control displays a bitmap.<br />
                                    A &quot;<em>GroupBox</em>&quot; control displays a frame to group controls.<br />
                                    A &quot;<em>HLine</em>&quot; control displays a horizontal line to separate controls.<br />
                                    A &quot;<em>VLine</em>&quot; control displays a vertical line to separate controls.<br />
                                    A &quot;<em>Link</em>&quot; control displays a static hot text. When the user clicks
                                    the control the contents of <strong>State</strong> (e.g. http://...) will be executed
                                    using ShellExecute. Alternatively <strong>State</strong> can be omitted and the
                                    <em>NOTIFY</em> flag used to have your NSIS script called. See the &quot;<em>NOTIFY</em>&quot;
                                    flag below for more information.<br />
                                    A &quot;<em>Button</em>&quot; control displays a push button that can be used in
                                    the same way as the &quot;<em>Link</em>&quot; control above.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>Text</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    Specifies the caption of a label, checkbox, or radio button control. For DirRequest
                                    control this specifies the title of the browse dialog. For icon and bitmaps control
                                    this specifies the path to the image.<br />
                                    <br />
                                    <strong>Note:</strong> For labels, \r\n will be converted to a newline. To use a
                                    back-slash in your text you have to escape it using another back-slash - \\. Described
                                    <a href="#escaping">below</a> are NSIS functions for converting text to/from this
                                    format.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>State</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    Specifies the state of the control. This is updated when the user closes the window,
                                    so you can read from it from NSIS. For edit texts and dir and file request boxes,
                                    this is the string that is specified. For radio button and check boxes, this can
                                    be '0' or '1' (for unchecked or checked). For list boxes, combo boxes and drop lists
                                    this is the selected items separated by pipes ('|'). For Links and Buttons this
                                    can specify something to be executed or opened (using ShellExecute).<br />
                                    <br />
                                    <strong>Note:</strong> For Text fields with the MULTILINE flag, \r\n will be converted
                                    to a newline. To use a back-slash in your text you have to escape it using another
                                    back-slash - \\. Described <a href="#escaping">below</a> are NSIS functions for
                                    converting text to/from this format.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>ListItems</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    A list of items to display in a combobox, droplist, or listbox.<br />
                                    This is a single line of text with each item separated by a pipe character '|'</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>MaxLen</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    Causes validation on the selected control to limit the maximum length of text.<br />
                                    If the user specifies more text than this, a message box will appear when they click
                                    &quot;OK&quot; and the dialog will not be dismissed.<br />
                                    You should not use this on a &quot;<em>combobox</em>&quot; since the user can not
                                    control what is selected.<br />
                                    This should be set to a maximum of 260 for &quot;<em>FileRequest</em>&quot; and
                                    &quot;<em>DirRequest</em>&quot; controls.<br />
                                    Ignored on &quot;<em>Label</em>&quot; controls.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>MinLen</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    Causes validation on the selected control to force the user to enter a minimum amount
                                    of text.<br />
                                    If the user specifies less text than this, a message box will appear when they click
                                    &quot;OK&quot; and the dialog will not be dismissed.<br />
                                    Unlike MaxLen, this is useful for &quot;<em>Combobox</em>&quot; controls. By setting
                                    this to a value of &quot;1&quot; the program will force the user to select an item.<br />
                                    Ignored on &quot;<em>Label</em>&quot; controls.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>ValidateText</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    If the field fails the test for &quot;<em>MinLen</em>&quot; or &quot;<em>MaxLen</em>&quot;,
                                    a messagebox will be displayed with this text.<br />
                                    <br />
                                    <strong>Note:</strong> \r\n will be converted to a newline, two back-slashes will
                                    be converted to one - \\. Described <a href="#escaping">below</a> are NSIS functions
                                    for converting text to/from this format.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>Left<br />
                                        Right<br />
                                        Top<br />
                                        Bottom</strong></td>
                                <td class="lefttable">
                                    <em>(required)</em></td>
                                <td class="righttable">
                                    The position on the dialog where this control appears. All sizes should be set in
                                    dialog units. To get the right dimensions for your controls, design your dialog
                                    using a resource editor and copy the dimensions to the INI file.<br />
                                    <br />
                                    <strong>Note:</strong> You can specify negative coordinates to specify the distance
                                    from the right or bottom edge.<br />
                                    <br />
                                    <strong>Note (2):</strong> For combobox or droplist, the &quot;<em>bottom</em>&quot;
                                    value is not used in the same way.<br />
                                    In this case, the bottom value is the maximum size of the window when the pop-up
                                    list is being displayed. All other times, the combobox is automatically sized to
                                    be one element tall. If you have trouble where you can not see the combobox drop-down,
                                    then check the bottom value and ensure it is large enough. A rough guide for the
                                    height required is the number of items in the list multiplied by 8, plus 20.<br />
                                    <br />
                                    <strong>Note (3):</strong> FileRequest and DirRequest controls will allocate 15
                                    dialog units to the browse button. Make this control wide enough the contents of
                                    the textbox can be seen.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>Filter</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    Specifies the filter to be used in the &quot;<em>FileRequest</em>&quot; control.<br />
                                    This is constructed by putting pairs of entries together, each item separated by
                                    a | character.<br />
                                    The first value in each pair is the text to display for the filter.<br />
                                    The second value is the pattern to use to match files.<br />
                                    For example, you might specify:<br />
                                    Filter=Text Files|*.txt|Programs|*.exe;*.com|All Files|*.*<br />
                                    If not specified, then the filter defaults to All Files|*.*<br />
                                    <br />
                                    <strong>Note:</strong> you should not put any extra spaces around the | characters.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>Root</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    Used by <strong>DirRequest</strong> controls to specify the root directory of the
                                    search. By default, this allows the user to browse any directory on the computer.
                                    This will limit the search to a particular directory on the system.</td>
                            </tr>
                            <tr>
                                <td class="lefttable">
                                    <strong>Flags</strong></td>
                                <td class="lefttable">
                                    <em>(optional)</em></td>
                                <td class="righttable">
                                    This specifies additional flags for the display of different controls. Each value
                                    should be separated by a | character, and you should be careful not to put any spaces
                                    around the | character.<br />
                                    <table class="righttable">
                                        <tr>
                                            <td class="righttable">
                                                <strong>Value</strong></td>
                                            <td class="righttable">
                                                <strong>Meaning</strong></td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                REQ_SAVE</td>
                                            <td class="righttable">
                                                This causes &quot;<em>FileRequest</em>&quot; controls to display a Save As dialog.
                                                If not specified, an Open dialog is used.</td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                FILE_MUST_EXIST</td>
                                            <td class="righttable">
                                                Used by &quot;<em>FileRequest</em>&quot; to determine if the selected file must
                                                exist.<br />
                                                This only applies if an &quot;Open&quot; dialog is being displayed.<br />
                                                This currently does not force the file to exist other than through the browse button.</td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                FILE_EXPLORER</td>
                                            <td class="righttable">
                                                Used by &quot;<em>FileRequest</em>&quot;, enables new file request look (recommended)</td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                FILE_HIDEREADONLY</td>
                                            <td class="righttable">
                                                Used by &quot;<em>FileRequest</em>&quot;, hides &quot;open read only&quot; checkbox
                                                in open dialog.</td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                WARN_IF_EXIST</td>
                                            <td class="righttable">
                                                Used by &quot;<em>FileRequest</em>&quot; to display a warning message if the selected
                                                file already exists.<br />
                                                The warning message is only displayed for files selected with the browse button.</td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                PATH_MUST_EXIST</td>
                                            <td class="righttable">
                                                Used by &quot;<em>FileRequest</em>&quot; to force the path to exist. Prevents the
                                                user from typing a non-existent path into the browse dialog window.<br />
                                                This only validates path's selected with the browse button.</td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                PROMPT_CREATE</td>
                                            <td class="righttable">
                                                Used by &quot;<em>FileRequest</em>&quot; to display a warning if the selected file
                                                does not exist. However, it still allows the user to select the file.<br />
                                                This only displays the warning for files selected with the browse button.<br />
                                                Doesn't work along with REQ_SAVE.</td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                RIGHT</td>
                                            <td class="righttable">
                                                Used by &quot;<em>Checkbox</em>&quot; and &quot;<em>Radiobutton</em>&quot; controls
                                                to specify you want the checkbox to the right of the text instead of the left as
                                                is the default.</td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                MULTISELECT</td>
                                            <td class="righttable">
                                                Used by &quot;<em>Listbox</em>&quot; controls. Turns string selection on or off
                                                each time the user clicks or double-clicks a string in the list box. The user can
                                                select any number of strings. If this flag and EXTENDEDSELCT are not specified,
                                                only one item can be selected from the list.</td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                EXTENDEDSELCT</td>
                                            <td class="righttable">
                                                Used by &quot;<em>Listbox</em>&quot; controls. Allows multiple items to be selected
                                                by using the SHIFT key and the mouse or special key combinations. If this flag and
                                                MULTISELECT are not specified, only one item can be selected from the list.</td>
                                        </tr>
                                        <tr>
                                            <td class="righttable">
                                                RESIZETOFIT</td>
                                            <td class="righttable">
                                                This causes &quot;<em>Bitmap</em>&quot; controls to resize the image to the size
                                                of the control. Also useful to support custom DPI settings. Without this, the image
                                                will be centered within the specified area.</td>
                                        </tr>
                                        <td class="righttable">
                                            TRANSPARENT</td>
                                        <td class="righttable">
                                            Used by &quot;<em>Bitmap</em>&quot; controls. Hides every pixel with the same color
                                            as of the top left pixel. This allows to see-through to controls behind it. This
                                            flag doesn't work well with a combination of the RESIZETOFIT flag and bitmaps with
                                            more than 256 colors.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    GROUP</td>
                                <td class="righttable">
                                    Add this flag to the first control of a group of controls to group them. Grouping
                                    controls allows you to create multiple groups of radio button and makes keyboard
                                    navigation using arrow keys easier.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    FOCUS</td>
                                <td class="righttable">
                                    Sets focus on the specified control, instead of the first focusable control. If
                                    more than one field is specified with this flag, only the first one will receive
                                    focus.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    NOTABSTOP</td>
                                <td class="righttable">
                                    Do not stop on the control when the user pressed the Tab key. Add NOTABSTOP to all
                                    controls of a group except the first one to allow navigation between groups with
                                    the Tab key.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    DISABLED</td>
                                <td class="righttable">
                                    Causes a control to be disabled.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    ONLY_NUMBERS</td>
                                <td class="righttable">
                                    Used by &quot;<em>Text</em>&quot; controls. Forces the user to enter only numbers
                                    into the edit box.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    MULTILINE</td>
                                <td class="righttable">
                                    Used by &quot;<em>Text</em>&quot; controls. Causes the control to accept multiple-lines.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    WANTRETURN</td>
                                <td class="righttable">
                                    Used by &quot;<em>Text</em>&quot; controls with multiple-line. Specifies that a
                                    carriage return be inserted when the user presses the ENTER key while entering text
                                    into the text box.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    NOWORDWRAP</td>
                                <td class="righttable">
                                    Used by &quot;<em>Text</em>&quot; controls with multiple-line. Disables the word-wrap
                                    that occurs when long lines are entered. Long lines instead scroll off to the side.
                                    Specifying the HSCROLL flag also has this effect.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    HSCROLL</td>
                                <td class="righttable">
                                    Show a horizontal scrollbar. When used by &quot;<em>Text</em>&quot; controls with
                                    multiple-lines this also disables word-wrap.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    VSCROLL</td>
                                <td class="righttable">
                                    Show a vertical scrollbar.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    READONLY</td>
                                <td class="righttable">
                                    Used by &quot;<em>Text</em>&quot; controls. Prevents the user from entering or editing
                                    text in the edit control, but allow the user to select and copy the text.</td>
                            </tr>
                            <tr>
                                <td class="righttable">
                                    NOTIFY</td>
                                <td class="righttable">
                                    Used by &quot;<em>Button</em>&quot;, &quot;<em>Link</em>&quot;, &quot;<em>CheckBox</em>&quot;,
                                    &quot;<em>RadioButton</em>&quot;, &quot;<em>ListBox</em>&quot; and &quot;<em>DropList</em>&quot;
                                    controls. Causes InstallOptions to call your NSIS custom page validation/leave function
                                    whenever the control's selection changes. Your validation/leave function can read
                                    the &quot;<em>State</em>&quot; value from the &quot;<em>Settings</em>&quot; section
                                    to determine which control caused the notification, if any, and perform some appropriate
                                    action followed by an Abort instruction (to tell NSIS to return to the page). The
                                    Examples\InstallOptions folder contains an example script showing how this might
                                    be used.</td>
                            </tr>
                        </table>
            </td>
        </tr>
        <tr>
            <td class="lefttable">
                <strong>TxtColor</strong></td>
            <td class="lefttable">
                <em>(optional)</em></td>
            <td class="righttable">
                Used by <strong>Link</strong> controls to specify the foreground color of the text.
                Format: 0xBBGGRR (hexadecimal).</td>
        </tr>
        <tr>
            <td class="lefttable">
                <strong>HWND<br>
                    HWND2</strong></td>
            <td class="lefttable">
                <em>(output)</em></td>
            <td class="righttable">
                After initDialog returns, this will contain the HWND of the control created by this
                field. It can be used instead of FindWindow and GetDlgItem. HWND2 contains the HWND
                of an additional control, such as the browse button.</td>
        </tr>
    </table>
    </div>
    <h2>
        Header file</h2>
    <div>
        <p>
            The InstallOptions header files provides macros and functions to easily create custom
            dialogs. You can include it on the top of your script as follows:
            <pre>
!include InstallOptions.nsh
</pre>
    </div>
    <h2>
        Creating dialogs</h2>
    <div>
        <h3>
            Extracting the INI file</h3>
        <div>
            <p>
                First, you have to extract your InstallOptions INI files in the .onInit function
                (or un.onInit for the uninstaller) using the INSTALLOPTIONS_EXTRACT macro. The files
                will be extracted to a temporary folder (the NSIS plug-ins folder) that is automatically
                created.</p>
            <pre>
Function .onInit
  !insertmacro INSTALLOPTIONS_EXTRACT &quot;ioFile.ini&quot;
FunctionEnd
</pre>
            <p>
                If the INI file is located in another directory, use INSTALLOPTIONS_EXTRACT_AS.
                The second parameter is the filename in the temporary folder, which is the filename
                that should be used as input for the other macros.</p>
            <pre>
Function .onInit
  !insertmacro INSTALLOPTIONS_EXTRACT_AS &quot;..\ioFile.ini&quot; &quot;ioFile.ini&quot;
FunctionEnd
</pre>
        </div>
        <h3>
            Displaying the dialog</h3>
        <div>
            <p>
                You can call InstallOptions in a page function defined with the Page or UninstPage
                command. Check the NSIS documentation (Scripting Reference -&gt; Pages) for information
                about the page system.</p>
            <pre>
Page custom CustomPageFunction</pre>
            <p>
                To display the dialog, use the INSTALLOPTIONS_DISPLAY macro:<pre>
Function CustomPageFunction ;Function name defined with Page command
  !insertmacro INSTALLOPTIONS_DISPLAY &quot;ioFile.ini&quot;
FunctionEnd
</pre>
        </div>
    </div>
    <h2>
        User input</h2>
    <div>
        <p>
            To get the input of the user, read the State value of a Field using the INSTALLOPTIONS_READ
            macro:</p>
        <pre>
!insertmacro INSTALLOPTIONS_READ $VAR &quot;ioFile.ini&quot; &quot;Field #&quot; &quot;Name&quot;
</pre>
    </div>
    <h2>
        Writing to INI files</h2>
    <div>
        <p>
            The INSTALLOPTIONS_WRITE macro allows you to write values to the INI file to change
            texts or control settings on runtime:
            <pre>
!insertmacro INSTALLOPTIONS_WRITE &quot;ioFile.ini&quot; &quot;Field #&quot; &quot;Name&quot; &quot;Value&quot;
</pre>
    </div>
    <h2>
        Escaped values</h2>
    <div>
        <p>
            Some InstallOptions values are escaped (in a similar manner to &quot;C&quot; strings)
            to allow characters to be used that are not normally valid in INI file values. The
            affected values are:</p>
        <ul>
            <li>The ValidateText field</li>
            <li>The Text value of Label fields</li>
            <li>The State value of Text fields that have the MULTILINE flag</li>
        </ul>
        <p>
            The escape character is the back-slash character (&quot;\&quot;) and the available
            escape sequences are:</p>
        <table class="subtable">
            <tr>
                <td class="lefttable">
                    &quot;\\&quot;</td>
                <td class="righttable">
                    Back-slash</td>
            </tr>
            <tr>
                <td class="lefttable">
                    &quot;\r&quot;</td>
                <td class="righttable">
                    Carriage return (ASCII 13)</td>
            </tr>
            <tr>
                <td class="lefttable">
                    &quot;\n&quot;</td>
                <td class="righttable">
                    Line feed (ASCII 10)</td>
            </tr>
            <tr>
                <td class="lefttable">
                    &quot;\t&quot;</td>
                <td class="righttable">
                    Tab (ASCII 9)</td>
            </tr>
        </table>
        <p>
            The INSTALLOPTIONS_READ_CONVERT and INSTALLOPTIONS_WRITE_CONVERT macros automatically
            convert these characters in installer code. In uninstaller code, use INSTALLOPTIONS_READ_UNCONVERT
            and INSTALLOPTIONS_WRITE_UNCONVERT.</p>
        <p>
            To use these macros in your script, the conversion functions need to be included:</p>
        <pre>
;For INSTALLOPTIONS_READ_CONVERT
  !insertmacro INSTALLOPTIONS_FUNCTION_READ_CONVERT
;For INSTALLOPTIONS_WRITE_CONVERT
  !insertmacro INSTALLOPTIONS_FUNCTION_WRITE_CONVERT
;For INSTALLOPTIONS_READ_UNCONVERT
  !insertmacro INSTALLOPTIONS_UNFUNCTION_READ_CONVERT
;For INSTALLOPTIONS_WRITE_UNCONVERT
  !insertmacro INSTALLOPTIONS_UNFUNCTION_WRITE_CONVERT
</pre>
    </div>
    <h2>
        Input validation</h2>
    <div>
        <p>
            To validate the user input (for example, to check whether the user has filled in
            a textbox) use the leave function of the Page command and Abort when the validation
            has failed:</p>
        <pre>
Function ValidateCustom

  !insertmacro INSTALLOPTIONS_READ $R0 "test.ini" "Field 1" "State"
  StrCmp $R0 "" 0 +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Please enter your name."
    Abort

FunctionEnd
</pre>
    </div>
    <h2>
        Return value</h2>
    <div>
        After a dialog is created (using display or show), a return value is available:</p>
        <ul>
            <li>success - The user has pressed the Next button</li>
            <li>back - The user has pressed the Back button</li>
            <li>cancel - The user has pressed the Cancel button</li>
            <li>error - An error has occurred, the dialog cannot be displayed.</li>
        </ul>
        <p>
            You only have to check this value if you need something really special, such as
            doing something when the user pressed the Back button.</p>
        <p>
            If you need the return value, use the INSTALLOPTIONS_DISPLAY_RETURN or INSTALLOPTIONS_SHOW_RETURN
            macro. The return value will be added to the stack, so you can use the Pop command
            to get it.</p>
    </div>
    <h2>
        Reserve files</h2>
    <div>
        <p>
            When using solid compression, it's important that files which are being extracted
            in user interface functions are located before other files in the data block. Otherwise
            there may be a delay before a page can be displayed.</p>
        <p>
            To ensure that this is the case, add ReserveFile commands for InstallOptions and
            the INI files before all sections and functions:</p>
        <pre>
ReserveFile &quot;test.ini&quot;
ReserveFile &quot;${NSISDIR}\Plugins\InstallOptions.dll&quot;
</pre>
    </div>
    <h2>
        Fonts and colors</h2>
    <div>
        <p>
            To customize fonts or colors on InstallOptions dialogs, the INSTALLOPTIONS_INITDIALOG
            and INSTALLOPTIONS_SHOW macro can be used.</p>
        <p>
            INSTALLOPTIONS_INITDIALOG creates the dialog in memory, but does not show it. After
            inserting this macro, you can set the fonts and colors, and then insert INSTALLOPTIONS_SHOW
            to show the dialog.</p>
        <p>
            The INSTALLOPTIONS_INITDIALOG macro also pushes the HWND of the custom dialog to
            the stack. Control HWND's are available for each control in the HWND entry of the
            corresponding field in the INI file.</p>
        <p>
            Example of using a custom font:</p>
        <pre>
Var HWND
Var DLGITEM
Var FONT

Function FunctionName ;FunctionName defined with Page command

  !insertmacro INSTALLOPTIONS_INITDIALOG &quot;ioFile.ini&quot;
  Pop $HWND ;HWND of dialog
    
  !insertmacro INSTALLOPTIONS_READ $DLGITEM &quot;ioFile.ini&quot; &quot;Field 1&quot; &quot;HWND&quot;
    
  ;$DLGITEM contains the HWND of the first field
  CreateFont $FONT &quot;Tahoma&quot; 10 700 
  SendMessage $DLGITEM ${WM_SETFONT} $FONT 0
        
  !insertmacro INSTALLOPTIONS_SHOW

FunctionEnd
</pre>
    </div>
    <h2>
        Credits</h2>
    <div>
        <p>
            Original version by Michael Bishop<br />
            DLL version by Nullsoft, Inc.<br />
            DLL version 2 by Amir Szekely, ORTIM, Joost Verburg<br />
            New documentation by Joost Verburg</p>
    </div>
    <h2>
        License</h2>
    <div>
        <pre>
Original version Copyright &copy; 2001 Michael Bishop
DLL version 1 Copyright &copy; 2001-2002 Nullsoft, Inc., ORTIM
DLL version 2 Copyright &copy; 2003-2009 Amir Szekely, Joost Verburg, Dave Laundon

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute
it freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented;
   you must not claim that you wrote the original software.
   If you use this software in a product, an acknowledgment in the
   product documentation would be appreciated but is not required.
2. Altered versions must be plainly marked as such,
   and must not be misrepresented as being the original software.
3. This notice may not be removed or altered from any distribution.
</pre>
    </div>
    </div> </td> </tr> </table>
</body>
</html>

----------------------------------------------------
MakeNSISW - MakeNSIS Windows Wrapper
----------------------------------------------------


About MakeNSISW
---------------
MakeNSISW is a wrapper for the MakeNSIS that is distributed with
NSIS (http://www.nullsoft.com/free/nsis/).  MakeNSISW allows you 
to compile NSIS scripts using a Windows GUI interface.  To install
MakeNSISW, compile the source using Visual C++ or Mingw.


Requirements
------------
MakeNSISW requires NSIS be installed on your system.  The default 
directory for this installation is $PROGRAMFILES\NSIS\Contrib\MakeNSISW.


Usage:
------
If you installed the Shell Extensions option during the installation, then
all that is required is that you choose 'Compile NSI' from the right-
click menu on a NSIS script.  This will invoke MakeNSISW.

The format of the parameters when calling MakeNSISW from the commandline is:
  makensisw [options] [script.nsi | - [...]]

For the options, please see the MakeNSIS documentation.


Shortcut Keys
-------------
Ctrl+A: Select All text
Ctrl+B: Open Script Folder
Ctrl+C: Copy selected text
Ctrl+D: Opens the Define Symbols dialog
Ctrl+E: Edits the script
Ctrl+F: Find text
Ctrl+L: Load a script
Ctrl+R: Recompiles the script
Ctrl+T: Tests the installer
Ctrl+W: Clear Log Window
Alt+X: Exits the application
F1: View Documentation


Version History
---------------
0.1
 - Initial Release

0.2
 - Added ability to save output and copy output

0.3
 - Added option to recompile script (F2 or File|Recompile)
 - Added Help Menu
 - Return code is now always set
 - Added Accelerator key support for Exit and Recompile
 - No longer uses NSIS's version string
 - Made clearer status message in title bar
 - Disabled menu/accelerator functions during compile

0.4
 - Fixed Copy Selected bug

0.5
 - Minor Makefile changes (mingw)
 - Moved strings into global strings to make editing easier
 - Added Clear Log Command under Edit menu
 - Recompile no longer clears the log window (use F5)
 - Close is now the default button when you hit enter
 - added VC++ project, updated resources to work with VC++
 - rearranged directory structure
 - makefiles now target ../../makensisw.exe
 - removed makensisw home link in help menu (hope this is ok,
   doesn't really seem needed to me)
 - made display use a fixed width font (Some people may not like
   this, but I do)
 - added 'test' button (peeks output for 'Output' line)
 - made it so that the log shows the most recent 32k.
 - made it so that the log always clears on a recompile.
 - compiled with VC++ so no longer needs msvcrt.dll
 - made the compiler name be a full path (for more flexibility)

0.6
 - print correct usage if unable to execute compiler
 - removed mingw warnings
 - set title/branding before errors
 - some docs changes
 - Added Edit|Edit Script function

0.7
 - Edit Script should now work for output>32k
 - Added resize support (thanks to felfert)
 - Added window position saving (thanks to felfert)
 - Disable some items when exec of makensis failed

0.8
 - Added window size constraints (thanks to bcheck)
 - Cleaned up the resource file

0.9
 - Removed global strings (moved into #defines)
 - Some GUI changes
 - No longer focused Close button (its default anyways)
 - Fixed resize bug on minimize/restore (thanks to felfert)
 - Made window placement stored in HKLM instead of HKCU, cause
   I hate things that get littered in HKCU.

1.0
 - Fixed bug with large output causing crash

1.1
 - Crash may actually be fixed

1.2
 - XP visual style support

1.3
 - Added Documentation menu item
 - Fix GUI problem with About dialog

1.4
 - Edit Script command will now work with or without file associations
 - Added default filename for save dialog
 - Use standard fonts
 - Documentation menuitem caused recompile

1.5
 - Fixed Copy All function

1.6
 - Reduced size from 44k to 12k (kichik)
 - Editbox not limited to 32k (now using richedit control)
 - Made the log window font-size smaller.

1.7
 - Added check for warnings
 - Added sound for sucessfull compilations
 - Update home page and documentation menu items to Sourceforge page

1.8
 - Contents of log window are now streamed in
 - Empty log window check (to prevent random crashes)

1.9
 - Text always scrolls to bottom (kichik)
 - Updated link to new docs
 - Makensisw now takes the same parameters as makensis.exe
 - Fixed some random crashes
 - Drag and Drop Support into the Makensisw window
 - Updated icon to more sexy one
 - Added Load Script option on File menu
 - Added Search Dialog (Ctrl+F) (kichik)
 - Added Select All (Ctrl+A), Copy (Ctrl+C), Exit (Alt+X) keys
 - Branding text now reflects NSIS version
 - Added some simple tool tips
 - Added Context Menu in log window
 - Added resize gripper
 - Ctrl+L loads a script
 - Added Clear Log (Ctrl+W)
 - Browse Script (Ctrl+B) launches explorer in script directory
 - Check for Update command
 - Added link to the NSIS Forum under Help menu
 - Bunch of other stuff not worth mentioning
 - Define Symbols menu (Ctrl+D)

2.0
 - Improved user interface
 - Define Symbols is available even if a script is not loaded
 - Defined Symbols are saved on exit and reloaded on start
 - Added NSIS Update menu
 - Added toolbar for commonly used menus
 - Made the Toolbar style flat
 - Added option for compile & run
 - Added compressor setting option
 - Added support for lzma compression
 - Added named Symbols sets.

2.1
 - Added "Cancel compilation" menu item

2.2
- Settings saved in HKCU instead of HKLM
- Added menu accelerators to MRU list

2.3
- Escape button closes MakeNSISw

2.3.1
- Fixed broken command line parameter handling
 
Copyright Information
---------------------
Copyright (c) 2002 Robert Rainwater
Contributors: Justin Frankel, Fritz Elfert, Amir Szekely, Sunil Kamath, Joost Verburg

This software is provided 'as-is', without any express or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>NSIS Modern User Interface - Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
    <style type="text/css">
        /*<![CDATA[*/body
        {
            padding: 10px;
            background-color: #F0F0F0;
            font-size: 13px;
            font-family: Verdana, Arial, Helvetica, sans-serif;
            font-weight: normal;
            text-align: justify;
        }
        p, li
        {
            font-size: 13px;
        }
        table
        {
            margin: auto;
            background-color: #FFFFFF;
        }
        .maintable
        {
            border: 2px solid #376EAB;
        }
        .parameter
        {
            font-weight: bold;
            color: #6586AC;
        }
        h1
        {
            font-size: 20px;
            color: #7A7272;
            font-weight: normal;
        }
        h2
        {
            font-size: 17px;
            font-weight: bold;
            color: #303030;
        }
        h3
        {
            font-size: 14px;
            font-weight: bold;
            color: #2B5885;
        }
        pre
        {
            font-size: 13px;
        }
        div
        {
            margin: 20px;
        }
        div.settings
        {
            margin-right: 0;
        }
        a:link, a:visited, a:active
        {
            color: #294F75;
            text-decoration: none;
        }
        a:hover
        {
            color: #182634;
            text-decoration: underline;
        }
        .trigger
        {
            cursor: pointer;
            cursor: hand;
            height: 14px;
        }
        .toggle
        {
            display: none;
        }
        .options
        {
            text-align: center;
            cursor: pointer;
            cursor: hand;
            color: #294F75;
        }
        /*]]>*/</style>

    <script type="text/javascript">
//<![CDATA[

   var image_open = new Image();
   image_open.src = "images/open.gif";
   var image_closed = new Image();
   image_closed.src = "images/closed.gif";
   
   function toggle(image, section) {
   
      if(document.all) {
        if(document.all[section].style.display == "block") {
           document.all[section].style.display = "none";
           document.all[image].src = image_closed.src;
        }
        else
        {              
           document.all[section].style.display = "block";
           document.all[image].src = image_open.src;
        }
      }
      else
      {
      if(document.getElementById(section).style.display == "block") {
         document.getElementById(section).style.display = "none";
         document.getElementById(image).src = image_closed.src;
         }
      else
         {              
         document.getElementById(section).style.display = "block";
         document.getElementById(image).src = image_open.src;
         }
      }
   
   }

   function expandall() {

     var divNodeList = document.getElementsByTagName('div'); 
     for (i = 0; i < divNodeList.length; i++) { 
        if(divNodeList[i].id) {
           divNodeList[i].style.display = "block";
           document.getElementById('trigger_' + divNodeList[i].id.substr(7)).src = "images/open.gif";
        }
     }
     
   }

   function collapseall() {

     var divNodeList = document.getElementsByTagName('div'); 
     for (i = 0; i < divNodeList.length; i++) { 
        if(divNodeList[i].id) {
           divNodeList[i].style.display = "none";
           document.getElementById('trigger_' + divNodeList[i].id.substr(7)).src = "images/closed.gif";
        }
     }

   }

//]]>
    </script>

</head>
<body>
    <table width="750" class="maintable" cellspacing="0" cellpadding="0" align="center">
        <tr>
            <td>
                <img src="images/header.gif" width="750" height="80" alt="" />
                <p class="options">
                    <a onclick="expandall()">[Expand all]</a>&nbsp; &nbsp;<a onclick="collapseall()">[Collapse
                        all]</a></p>
                <div>
                    <h1>
                        Introduction</h1>
                    <div>
                        <p>
                            The Modern UI provides a user interface for NSIS installers with a modern wizard
                            style, similar to the wizards of recent Windows versions. It is based on the basic
                            user interface that is provided by the NSIS compiler itself and extends it with
                            more interface features and pages.</p>
                        <p>
                            All standard NSIS pages (such as the pages to select components and the installation
                            folder) are supported as well as a number of additional pages. The welcome page
                            allows you to provide an introduction to the installation process, while the finish
                            page provides a way to let the user decide what steps should be performed after
                            the setup wizard is closed (for example, whether the application should be started
                            immediately). A finish page can also be used to ask for a system restart is necessary.</p>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_scr" src="images/closed.gif"
                                onclick="toggle('trigger_scr', 'toggle_scr');" />
                            Screenshots</h3>
                        <div class="toggle" id="toggle_scr">
                            <p>
                                <img src="images/screen1.png" width="503" height="393" alt="" /></p>
                            <p>
                                <img src="images/screen2.png" width="503" height="393" alt="" /></p>
                        </div>
                    </div>
                    <h1>
                        Script header</h1>
                    <div>
                        <p>
                            The settings for the Modern UI should be inserted in the header of the script file.
                            It&#39;s important to follow the same order as the items below.&nbsp;For example,
                            interface settings should be defined before you insert pages, because the pages
                            depend on the interface configuration. It may be useful to look at the <a href="#examples">
                                example scripts</a> too see how this is done in actual script files.</p>
                        <p>
                            Parameters are given in this format: <span class="parameter">required (option1 | option2)
                                [optional]</span></p>
                        <h2>
                            1. Header file</h2>
                        <div>
                            <p>
                                First of all, add this line to the top of script to include the Modern UI:</p>
                            <pre>
!include &quot;MUI.nsh&quot;
</pre>
                        </div>
                        <h2>
                            2. Interface configuration</h2>
                        <div>
                            <p>
                                Then, you may want to use interface settings to change the look and feel of the
                                installer. These settings apply to all pages.<p>
                                    The interface settings provided by the NSIS compiler itself (such as LicenseText,
                                    Icon, CheckBitmap, InstallColors) should not be used in Modern UI scripts. The Modern
                                    UI provides equalivent or extended versions of these settings.<p>
                                        Examples:</p>
                                    <pre>
!define MUI_COMPONENTSPAGE_SMALLDESC ;No value
!define MUI_UI &quot;myUI.exe&quot; ;Value
!define MUI_INSTFILESPAGE_COLORS &quot;FFFFFF 000000&quot; ;Two colors
</pre>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_in" src="images/closed.gif"
                                            onclick="toggle('trigger_in', 'toggle_in');" />
                                        Interface settings</h3>
                                    <div class="toggle" id="toggle_in">
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_ingen" src="images/closed.gif"
                                                onclick="toggle('trigger_ingen', 'toggle_ingen');" />
                                            Page header</h3>
                                        <div class="toggle" id="toggle_ingen">
                                            <p>
                                                <strong>MUI_ICON</strong> <span class="parameter">icon_file</span><br />
                                                The icon for the installer.<br />
                                                <em>Default: ${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico</em></p>
                                            <p>
                                                <strong>MUI_UNICON</strong> <span class="parameter">icon_file</span><br />
                                                The icon for the uninstaller.<br />
                                                <em>Default: ${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico</em></p>
                                            <p>
                                                <strong>MUI_HEADERIMAGE</strong><br />
                                                Display an image on the header of the page.</p>
                                            <div class="settings">
                                                <p>
                                                    <strong>MUI_HEADERIMAGE_BITMAP</strong> <span class="parameter">bmp_file</span><br />
                                                    Bitmap image to display on the header of installers pages (recommended size: 150x57
                                                    pixels).<br />
                                                    <em>Default: ${NSISDIR}\Contrib\Graphics\Header\nsis.bmp</em></p>
                                                <div class="settings">
                                                    <p>
                                                        <strong>MUI_HEADERIMAGE_BITMAP_NOSTRETCH</strong><br />
                                                        Do not stretch the installer header bitmap to fit the size of the field. Use this
                                                        option only if you have an image that does not use the whole space. If you have
                                                        a full size bitmap that fits exactly, you should not use this option because the
                                                        size of the field will be different if the user has a custom DPI setting.</p>
                                                    <p>
                                                        <strong>MUI_HEADERIMAGE_BITMAP_RTL</strong> <span class="parameter">bmp_file</span><br />
                                                        Bitmap image to display on the header of installers pages when using a RTL language
                                                        (recommended size: 150x57 pixels).<br />
                                                        <em>Default: Non-RTL bitmap</em></p>
                                                    <div class="settings">
                                                        <p>
                                                            <strong>MUI_HEADERIMAGE_BITMAP_RTL_NOSTRETCH</strong><br />
                                                            Do not stretch the installer header bitmap when using a RTL language to fit the
                                                            size of the field. Use this option only if you have an image that does not use the
                                                            whole space. If you have a full size bitmap that fits exactly, you should not use
                                                            this option because the size of the field will be different if the user has a custom
                                                            DPI setting.</p>
                                                    </div>
                                                </div>
                                                <p>
                                                    <strong>MUI_HEADERIMAGE_UNBITMAP</strong> <span class="parameter">bmp_file</span><br />
                                                    Bitmap image to display on the header of uninstaller pages (recommended size: 150x57
                                                    pixels).<br />
                                                    <em>Default: Installer header bitmap</em></p>
                                                <div class="settings">
                                                    <p>
                                                        <strong>MUI_HEADERIMAGE_UNBITMAP_NOSTRETCH</strong><br />
                                                        Do not stretch the uninstaller header bitmap to fit the size of the field. Use this
                                                        option only if you have an image that does not use the whole space. If you have
                                                        a full size bitmap that fits exactly, you should not use this option because the
                                                        size of the field will be different if the user has a custom DPI setting.</p>
                                                    <p>
                                                        <strong>MUI_HEADERIMAGE_UNBITMAP_RTL</strong> <span class="parameter">bmp_file</span><br />
                                                        Bitmap image to display on the header of uninstallers pages when using a RTL language
                                                        (recommended size: 150x57 pixels).<br />
                                                        <em>Default: Installer RTL header bitmap</em></p>
                                                    <div class="settings">
                                                        <p>
                                                            <strong>MUI_HEADERIMAGE_UNBITMAP_RTL_NOSTRETCH</strong><br />
                                                            Do not stretch the uninstaller header bitmap when using a RTL language to fit the
                                                            size of the field. Use this option only if you have an image that does not use the
                                                            whole space. If you have a full size bitmap that fits exactly, you should not use
                                                            this option because the size of the field will be different if the user has a custom
                                                            DPI setting.</p>
                                                    </div>
                                                </div>
                                                <p>
                                                    <strong>MUI_HEADERIMAGE_RIGHT</strong><br />
                                                    Display the header image on the right side instead of the left side (when using
                                                    a RTL language it will be displayed on the left side instead of the right side).</p>
                                            </div>
                                            <p>
                                                <strong>MUI_BGCOLOR</strong> <span class="parameter">(color: RRGGBBR hexadecimal)</span><br />
                                                Background color for the header, the Welcome page and the Finish page.<br />
                                                <em>Default: FFFFFF</em></p>
                                            <p>
                                                <strong>MUI_HEADER_TRANSPARENT_TEXT</strong><br />
                                                Set a transparent background for the header's label controls. Useful for custom
                                                user interfaces that set a bigger header image.</p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_inres" src="images/closed.gif"
                                                onclick="toggle('trigger_inres', 'toggle_inres');" />
                                            Interface resources</h3>
                                        <div class="toggle" id="toggle_inres">
                                            <p>
                                                <strong>MUI_UI</strong> <span class="parameter">ui_file</span><br />
                                                The interface file with the dialog resources. Change this if you have made your
                                                own customized UI.<br />
                                                <em>Default: ${NSISDIR}\Contrib\UIs\modern.exe</em></p>
                                            <p>
                                                <strong>MUI_UI_HEADERIMAGE</strong> <span class="parameter">ui_file</span><br />
                                                The interface files with the dialog resource IDD_INST that contains a bitmap control
                                                and space for the header bitmap.<br />
                                                <em>Default: ${NSISDIR}\Contrib\UIs\modern_headerbmp.exe</em></p>
                                            <p>
                                                <strong>MUI_UI_HEADERIMAGE_RIGHT</strong> <span class="parameter">ui_file</span><br />
                                                The interface files with the dialog resource IDD_INST that contains a bitmap control
                                                and space for the header bitmap on the right side.<br />
                                                <em>Default: ${NSISDIR}\Contrib\UIs\modern_headerbmpr.exe</em></p>
                                            <p>
                                                <strong>MUI_UI_COMPONENTSPAGE_SMALLDESC</strong> <span class="parameter">ui_file</span><br />
                                                The interface files with a customized dialog resource IDD_SELCOM with a small description
                                                area.<br />
                                                <em>Default: ${NSISDIR}\Contrib\UIs\modern_smalldesc.exe</em></p>
                                            <p>
                                                <strong>MUI_UI_COMPONENTSPAGE_NODESC</strong> <span class="parameter">ui_file</span><br />
                                                The interface files with a customized dialog resource IDD_SELCOM without a description
                                                area.<br />
                                                <em>Default: ${NSISDIR}\Contrib\UIs\modern_nodesc.exe</em></p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_inwf" src="images/closed.gif"
                                                onclick="toggle('trigger_inwf', 'toggle_inwf');" />
                                            Installer welcome/finish page</h3>
                                        <div class="toggle" id="toggle_inwf">
                                            <p>
                                                <strong>MUI_WELCOMEFINISHPAGE_BITMAP</strong> <span class="parameter">bmp_file</span><br />
                                                Bitmap for the Welcome page and the Finish page (recommended size: 164x314 pixels).<br />
                                                <em>Default: ${NSISDIR}\Contrib\Graphics\Wizard\win.bmp</em></p>
                                            <div class="settings">
                                                <p>
                                                    <strong>MUI_WELCOMEFINISHPAGE_BITMAP_NOSTRETCH</strong><br />
                                                    Do not stretch the bitmap for the Welcome and Finish page to fit the size of the
                                                    field. Use this option only if you have an image that does not use the whole space.
                                                    If you have a full size bitmap that fits exactly, you should not use this option
                                                    because the size of the field will be different if the user has a custom DPI setting.</p>
                                            </div>
                                            <p>
                                                <strong>MUI_WELCOMEFINISHPAGE_INI</strong> <span class="parameter">ini_file</span><br />
                                                InstallOptions INI file for the Welcome page and the Finish page.<br />
                                                <em>Default: ${NSISDIR}\Contrib\Modern UI\ioSpecial.ini</em></p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_inuwf" src="images/closed.gif"
                                                onclick="toggle('trigger_inuwf', 'toggle_inuwf');" />
                                            Uninstaller welcome/finish page</h3>
                                        <div class="toggle" id="toggle_inuwf">
                                            <p>
                                                <strong>MUI_UNWELCOMEFINISHPAGE_BITMAP</strong> <span class="parameter">bmp_file</span><br />
                                                Bitmap for the Welcome page and the Finish page (recommended size: 164x314 pixels).<br />
                                                <em>Default: ${NSISDIR}\Contrib\Graphics\Wizard\win.bmp</em></p>
                                            <div class="settings">
                                                <p>
                                                    <strong>MUI_UNWELCOMEFINISHPAGE_BITMAP_NOSTRETCH</strong><br />
                                                    Do not stretch the bitmap for the Welcome and Finish page to fit the size of the
                                                    field. Use this option only if you have an image that does not use the whole space.
                                                    If you have a full size bitmap that fits exactly, you should not use this option
                                                    because the size of the field will be different if the user has a custom DPI setting.</p>
                                            </div>
                                            <p>
                                                <strong>MUI_UNWELCOMEFINISHPAGE_INI</strong> <span class="parameter">ini_file</span><br />
                                                InstallOptions INI file for the uninstaller Welcome page and the Finish page.<br />
                                                <em>Default: ${NSISDIR}\Contrib\Modern UI\ioSpecial.ini</em></p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_inl" src="images/closed.gif"
                                                onclick="toggle('trigger_inl', 'toggle_inl');" />
                                            License page</h3>
                                        <div class="toggle" id="toggle_inl">
                                            <p>
                                                <strong>MUI_LICENSEPAGE_BGCOLOR</strong> <span class="parameter">(/windows | /grey |
                                                    (color: RRGGBB hexadecimal))</span><br />
                                                The background color for the license textbox. Use /windows for the Windows text
                                                background color (usually white). Use the /grey for the window background color
                                                (usually grey).<br />
                                                <em>Default: /windows</em></p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_inc" src="images/closed.gif"
                                                onclick="toggle('trigger_inc', 'toggle_inc');" />
                                            Components page</h3>
                                        <div class="toggle" id="toggle_inc">
                                            <p>
                                                <strong>MUI_COMPONENTSPAGE_CHECKBITMAP</strong> <span class="parameter">bitmap_file</span><br />
                                                The bitmap with images for the checks of the component select treeview.<br />
                                                <em>Default: ${NSISDIR}\Contrib\Graphics\Checks\modern.bmp</em></p>
                                            <p>
                                                <strong>MUI_COMPONENTSPAGE_SMALLDESC</strong><br />
                                                A small description area on the bottom of the page. Use this layout if you have
                                                a lot of sections and don't need large descriptions.</p>
                                            <p>
                                                <strong>MUI_COMPONENTSPAGE_NODESC</strong><br />
                                                No description area.</p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_ind" src="images/closed.gif"
                                                onclick="toggle('trigger_ind', 'toggle_ind');" />
                                            Directory page</h3>
                                        <div class="toggle" id="toggle_ind">
                                            <p>
                                                <strong>MUI_DIRECTORYPAGE_BGCOLOR</strong> <span class="parameter">(color: RRGGBB hexadecimal)</span><br />
                                                The background color for the directory textbox.</p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_ins" src="images/closed.gif"
                                                onclick="toggle('trigger_ins', 'toggle_ins');" />
                                            Start Menu folder page</h3>
                                        <div class="toggle" id="toggle_ins">
                                            <p>
                                                <strong>MUI_STARTMENUPAGE_BGCOLOR</strong> <span class="parameter">(color: RRGGBB hexadecimal)</span><br />
                                                The background color for the startmenu directory list and textbox.</p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_ini" src="images/closed.gif"
                                                onclick="toggle('trigger_ini', 'toggle_ini');" />
                                            Installation page</h3>
                                        <div class="toggle" id="toggle_ini">
                                            <p>
                                                <strong>MUI_INSTFILESPAGE_COLORS</strong> <span class="parameter">(/windows | &quot;(foreground
                                                    color: RRGGBB hexadecimal) (background color: RRGGBB hexadecimal)&quot;)</span><br />
                                                The colors of the details screen. Use /windows for the default Windows colors.<br />
                                                <em>Default: /windows</em></p>
                                            <p>
                                                <strong>MUI_INSTFILESPAGE_PROGRESSBAR</strong> <span class="parameter">(&quot;&quot;
                                                    | colored | smooth)</span><br />
                                                The style of the progress bar. Colored makes it use the MUI_INSTALLCOLORS.<br />
                                                <em>Default: smooth</em></p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_inf" src="images/closed.gif"
                                                onclick="toggle('trigger_inf', 'toggle_inf');" />
                                            Installer finish page</h3>
                                        <div class="toggle" id="toggle_inf">
                                            <p>
                                                <strong>MUI_FINISHPAGE_NOAUTOCLOSE</strong><br />
                                                Do not automatically jump to the finish page, to allow the user to check the install
                                                log.</p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_uinf" src="images/closed.gif"
                                                onclick="toggle('trigger_uinf', 'toggle_uinf');" />
                                            Uninstaller finish page</h3>
                                        <div class="toggle" id="toggle_uinf">
                                            <p>
                                                <strong>MUI_UNFINISHPAGE_NOAUTOCLOSE</strong><br />
                                                Do not automatically jump to the finish page, to allow the user to check the uninstall
                                                log.</p>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_inaw" src="images/closed.gif"
                                                onclick="toggle('trigger_inaw', 'toggle_inaw');" />
                                            Abort warning</h3>
                                        <div class="toggle" id="toggle_inaw">
                                            <p>
                                                <strong>MUI_ABORTWARNING</strong><br />
                                                Show a message box with a warning when the user wants to close the installer.</p>
                                            <div class="settings">
                                                <p>
                                                    <strong>MUI_ABORTWARNING_TEXT</strong> <span class="parameter">text</span><br />
                                                    Text to display on the abort warning message box.</p>
                                                <p>
                                                    <strong>MUI_ABORTWARNING_CANCEL_DEFAULT</strong><br />
                                                    Set the Cancel button as the default button on the message box.</p>
                                            </div>
                                        </div>
                                        <h3>
                                            <img class="trigger" alt="Open/Close section" id="trigger_inuaw" src="images/closed.gif"
                                                onclick="toggle('trigger_inuaw', 'toggle_inuaw');" />
                                            Uninstaller abort warning</h3>
                                        <div class="toggle" id="toggle_inuaw">
                                            <p>
                                                <strong>MUI_UNABORTWARNING</strong><br />
                                                Show a message box with a warning when the user wants to close the uninstaller.</p>
                                            <div class="settings">
                                                <p>
                                                    <strong>MUI_UNABORTWARNING_TEXT</strong> <span class="parameter">text</span><br />
                                                    Text to display on the abort warning message box.</p>
                                                <p>
                                                    <strong>MUI_UNABORTWARNING_CANCEL_DEFAULT</strong><br />
                                                    Set the Cancel button as the default button on the message box.</p>
                                            </div>
                                        </div>
                                    </div>
                        </div>
                        <h2>
                            3. Pages</h2>
                        <div>
                            <p>
                                Insert the following macros to set the pages you want to use. The pages will appear
                                in the order in which you insert them in the script. You can also insert custom
                                Page commands between the macros to add custom pages.</p>
                            <p>
                                You can add multiple pages of certain types (for example, if you want the user to
                                specify multiple folders).</p>
                            <p>
                                Examples:</p>
                            <pre>
!insertmacro MUI_PAGE_LICENSE &quot;License.rtf&quot;
!insertmacro MUI_PAGE_COMPONENTS

Var StartMenuFolder
!insertmacro MUI_PAGE_STARTMENU &quot;Application&quot; $StartMenuFolder
</pre>
                            <p>
                                You will need the page ID for the Start Menu folder page when using the Start Menu
                                folder macros. The folder will be stored in the specified variable.</p>
                            <p>
                                <strong>Installer pages</strong><br />
                                MUI_PAGE_WELCOME<br />
                                MUI_PAGE_LICENSE <span class="parameter">textfile</span><br />
                                MUI_PAGE_COMPONENTS<br />
                                MUI_PAGE_DIRECTORY<br />
                                MUI_PAGE_STARTMENU <span class="parameter">pageid variable</span><br />
                                MUI_PAGE_INSTFILES<br />
                                MUI_PAGE_FINISH</p>
                            <p>
                                <strong>Uninstaller pages</strong><br />
                                MUI_UNPAGE_WELCOME<br />
                                MUI_UNPAGE_CONFIRM<br />
                                MUI_UNPAGE_LICENSE <span class="parameter">textfile</span><br />
                                MUI_UNPAGE_COMPONENTS<br />
                                MUI_UNPAGE_DIRECTORY<br />
                                MUI_UNPAGE_INSTFILES<br />
                                MUI_UNPAGE_FINISH</p>
                            <h3>
                                <img class="trigger" alt="Open/Close section" id="trigger_pg" src="images/closed.gif"
                                    onclick="toggle('trigger_pg', 'toggle_pg');" />
                                Page settings</h3>
                            <div class="toggle" id="toggle_pg">
                                <p>
                                    Page settings apply to a single page and should be set before inserting a page macro.
                                    The same settings can be used for installer and uninstaller pages. You have to repeat
                                    the setting if you want it to apply to multiple pages. Example:</p>
                                <pre>
;Add a directory page to let the user specify a plug-ins folder
;Store the folder in $PluginsFolder

Var PLUGINS_FOLDER
!define MUI_DIRECTORYPAGE_VARIABLE $PluginsFolder
!insertmacro MUI_PAGE_DIRECTORY
</pre>
                                <p>
                                    <p>
                                        All standard texts in the user interface are loaded from language files, which are
                                        available for all languages supported by NSIS. So you only need to define these
                                        texts if you want to change the default.</p>
                                    <p>
                                        If the parameter is a text that should be different for each language, define a
                                        language string using LangString and use $(LangStringName) as value. For a license
                                        text in multiple languages, LicenseLangString can be used. Refer the NSIS Users
                                        Manual for more information about installers with multiple languages.</p>
                                    <p>
                                        In all text settings, the doublequote character (&quot;) should be escaped in the
                                        following form: $\&quot;</p>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_pgg" src="images/closed.gif"
                                            onclick="toggle('trigger_pgg', 'toggle_pgg');" />
                                        General page settings</h3>
                                    <div class="toggle" id="toggle_pgg">
                                        <p>
                                            <strong>MUI_PAGE_HEADER_TEXT</strong> <span class="parameter">text</span><br />
                                            Text to display on the header of the page.</p>
                                        <p>
                                            <strong>MUI_PAGE_HEADER_SUBTEXT</strong> <span class="parameter">text</span><br />
                                            Subtext to display on the header of the page.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_pgw" src="images/closed.gif"
                                            onclick="toggle('trigger_pgw', 'toggle_pgw');" />
                                        Welcome page settings</h3>
                                    <div class="toggle" id="toggle_pgw">
                                        <p>
                                            To add a newline to any of these texts, use \r\n instead of $\r$\n.</p>
                                        <p>
                                            <strong>MUI_WELCOMEPAGE_TITLE</strong> <span class="parameter">title</span><br />
                                            Title to display on the top of the page.</p>
                                        <p>
                                            <strong>MUI_WELCOMEPAGE_TITLE_3LINES</strong><br />
                                            Extra space for the title area.</p>
                                        <p>
                                            <strong>MUI_WELCOMEPAGE_TEXT</strong> <span class="parameter">text</span><br />
                                            Text to display on the page.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_pgl" src="images/closed.gif"
                                            onclick="toggle('trigger_pgl', 'toggle_pgl');" />
                                        License page settings</h3>
                                    <div class="toggle" id="toggle_pgl">
                                        <p>
                                            <strong>MUI_LICENSEPAGE_TEXT_TOP</strong> <span class="parameter">text</span><br />
                                            Text to display on the top of the page.</p>
                                        <p>
                                            <strong>MUI_LICENSEPAGE_TEXT_BOTTOM</strong> <span class="parameter">text</span><br />
                                            Text to display on the bottom of the page.</p>
                                        <p>
                                            <strong>MUI_LICENSEPAGE_BUTTON</strong> <span class="parameter">button_text</span><br />
                                            Text to display on the 'I Agree' button.</p>
                                        <p>
                                            <strong>MUI_LICENSEPAGE_CHECKBOX</strong><br />
                                            Display a checkbox the user has to check to agree with the license terms.</p>
                                        <div class="settings">
                                            <p>
                                                <strong>MUI_LICENSEPAGE_CHECKBOX_TEXT</strong> <span class="parameter">text</span><br />
                                                Text to display next to the checkbox to agree with the license terms.</p>
                                        </div>
                                        <p>
                                            <strong>MUI_LICENSEPAGE_RADIOBUTTONS</strong><br />
                                            Display two radio buttons to allow the user to choose between accepting the license
                                            terms or not.</p>
                                        <div class="settings">
                                            <p>
                                                <strong>MUI_LICENSEPAGE_RADIOBUTTONS_TEXT_ACCEPT</strong> <span class="parameter">text</span><br />
                                                Text to display next to the checkbox to accept the license terms.</p>
                                            <p>
                                                <strong>MUI_LICENSEPAGE_RADIOBUTTONS_TEXT_DECLINE</strong> <span class="parameter">text</span><br />
                                                Text to display next to the checkbox to decline the license terms.</p>
                                        </div>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_pgc" src="images/closed.gif"
                                            onclick="toggle('trigger_pgc', 'toggle_pgc');" />
                                        Components page settings</h3>
                                    <div class="toggle" id="toggle_pgc">
                                        <p>
                                            <strong>MUI_COMPONENTSPAGE_TEXT_TOP</strong> <span class="parameter">text</span><br />
                                            Text to display on the top of the page.</p>
                                        <p>
                                            <strong>MUI_COMPONENTSPAGE_TEXT_COMPLIST</strong> <span class="parameter">text</span><br />
                                            Text to display on next to the components list.</p>
                                        <p>
                                            <strong>MUI_COMPONENTSPAGE_TEXT_INSTTYPE</strong> <span class="parameter">text</span><br />
                                            Text to display on next to the installation type combo box.</p>
                                        <p>
                                            <strong>MUI_COMPONENTSPAGE_TEXT_DESCRIPTION_TITLE</strong> <span class="parameter">text</span><br />
                                            Text to display on the of the top of the description box.</p>
                                        <p>
                                            <strong>MUI_COMPONENTSPAGE_TEXT_DESCRIPTION_INFO</strong> <span class="parameter">text</span><br />
                                            Text to display inside the description box when no section is selected.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_pgd" src="images/closed.gif"
                                            onclick="toggle('trigger_pgd', 'toggle_pgd');" />
                                        Directory page settings</h3>
                                    <div class="toggle" id="toggle_pgd">
                                        <p>
                                            <strong>MUI_DIRECTORYPAGE_TEXT_TOP</strong> <span class="parameter">text</span><br />
                                            Text to display on top of the page.</p>
                                        <p>
                                            <strong>MUI_DIRECTORYPAGE_TEXT_DESTINATION</strong> <span class="parameter">text</span><br />
                                            Text to display on the destination folder frame.</p>
                                        <p>
                                            <strong>MUI_DIRECTORYPAGE_VARIABLE</strong> <span class="parameter">variable</span><br />
                                            Variable in which to store the selected folder.<br />
                                            <em>Default: $INSTDIR</em></p>
                                        <p>
                                            <strong>MUI_DIRECTORYPAGE_VERIFYONLEAVE</strong><br />
                                            Does not disable the Next button when a folder is invalid but allows you to use
                                            GetInstDirError in the leave function to handle an invalid folder.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_pgs" src="images/closed.gif"
                                            onclick="toggle('trigger_pgs', 'toggle_pgs');" />
                                        Start Menu folder page settings</h3>
                                    <div class="toggle" id="toggle_pgs">
                                        <p>
                                            <strong>MUI_STARTMENUPAGE_TEXT_TOP</strong> <span class="parameter">text</span><br />
                                            Text to display on the top of the page.</p>
                                        <p>
                                            <strong>MUI_STARTMENUPAGE_TEXT_CHECKBOX</strong> <span class="parameter">text</span><br />
                                            Text to display next to the checkbox to disable the Start Menu folder creation.</p>
                                        <p>
                                            <strong>MUI_STARTMENUPAGE_DEFAULTFOLDER</strong> <span class="parameter">folder</span><br />
                                            The default Start Menu Folder.</p>
                                        <p>
                                            <strong>MUI_STARTMENUPAGE_NODISABLE</strong><br />
                                            Do not display the checkbox to disable the creation of Start Menu shortcuts.</p>
                                        <p>
                                            <strong>MUI_STARTMENUPAGE_REGISTRY_ROOT</strong> <span class="parameter">root</span><br />
                                            <strong>MUI_STARTMENUPAGE_REGISTRY_KEY</strong> <span class="parameter">key</span><br />
                                            <strong>MUI_STARTMENUPAGE_REGISTRY_VALUENAME</strong> <span class="parameter">value_name</span><br />
                                            The registry key to store the Start Menu folder. The page will use it to remember
                                            the users preference. You should also use for the uninstaller to remove the Start
                                            Menu folders. Don't forget to remove this key during uninstallation.</p>
                                        <p>
                                            For the uninstaller, use the MUI_STARTMENU_GETFOLDER macro to get the Start Menu
                                            folder:</p>
                                        <pre>
!insertmacro MUI_STARTMENU_GETFOLDER page_id $R0
  Delete &quot;$SMPROGRAMS\$R0\Your Shortcut.lnk&quot;
</pre>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_pgi" src="images/closed.gif"
                                            onclick="toggle('trigger_pgi', 'toggle_pgi');" />
                                        Installation page settings</h3>
                                    <div class="toggle" id="toggle_pgi">
                                        <p>
                                            <strong>MUI_INSTFILESPAGE_FINISHHEADER_TEXT</strong> <span class="parameter">text</span><br />
                                            Text to display on the header of the installation page when the installation has
                                            been completed (won't be displayed when using a Finish page without MUI_(UN)FINISHPAGE_NOAUTOCLOSE).</p>
                                        <p>
                                            <strong>MUI_INSTFILESPAGE_FINISHHEADER_SUBTEXT</strong> <span class="parameter">text</span><br />
                                            Subtext to display on the header of the installation page when the installation
                                            has been completed (won't be displayed when using a Finish page without MUI_(UN)FINISHPAGE_NOAUTOCLOSE).</p>
                                        <p>
                                            <strong>MUI_INSTFILESPAGE_ABORTHEADER_TEXT</strong> <span class="parameter">text</span><br />
                                            Text to display on the header of the installation page when the installation has
                                            been aborted.</p>
                                        <p>
                                            <strong>MUI_INSTFILESPAGE_ABORTHEADER_SUBTEXT</strong> <span class="parameter">text</span><br />
                                            Subext to display on the header of the installation page when the installation has
                                            been aborted.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_pgf" src="images/closed.gif"
                                            onclick="toggle('trigger_pgf', 'toggle_pgf');" />
                                        Finish page settings</h3>
                                    <div class="toggle" id="toggle_pgf">
                                        <p>
                                            To add a newline to any of these texts, use \r\n instead of $\r$\n.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_TITLE</strong> <span class="parameter">title</span><br />
                                            Title to display on the top of the page.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_TITLE_3LINES</strong><br />
                                            Extra space for the title area.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_TEXT</strong> <span class="parameter">text</span><br />
                                            Text to display on the page.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_TEXT_LARGE</strong><br />
                                            Extra space for the text area (if using checkboxes).</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_BUTTON</strong> <span class="parameter">text</span><br />
                                            Text to display on the Finish button.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_CANCEL_ENABLED</strong><br />
                                            Enable the Cancel button so the user can skip any options displayed on the finish
                                            page.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_TEXT_REBOOT</strong> <span class="parameter">text</span><br />
                                            Text to display on the finish page when asking for a system reboot.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_TEXT_REBOOTNOW</strong> <span class="parameter">text</span><br />
                                            Text to display next to the 'Reboot now' option button.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_TEXT_REBOOTLATER</strong> <span class="parameter">text</span><br />
                                            Text to display next to the 'Reboot later' option button.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_REBOOTLATER_DEFAULT</strong><br />
                                            Sets the 'Reboot later' option as the default option.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_RUN</strong> <span class="parameter">exe_file</span><br />
                                            Application which the user can select to run using a checkbox. You don't need to
                                            put quotes around the filename when it contains spaces.</p>
                                        <div class="settings">
                                            <p>
                                                <strong>MUI_FINISHPAGE_RUN_TEXT</strong> <span class="parameter">text</span><br />
                                                Texts to display next to the 'Run program' checkbox.</p>
                                            <p>
                                                <strong>MUI_FINISHPAGE_RUN_PARAMETERS</strong> <span class="parameter">parameters</span><br />
                                                Parameters for the application to run. Don't forget to escape double quotes in the
                                                value (use $\&quot;).</p>
                                            <p>
                                                <strong>MUI_FINISHPAGE_RUN_NOTCHECKED</strong><br />
                                                Do not check the 'Run program' checkbox by default</p>
                                            <p>
                                                <strong>MUI_FINISHPAGE_RUN_FUNCTION</strong> <span class="parameter">function</span><br />
                                                Call a function instead of executing an application (define MUI_FINISHPAGE_RUN without
                                                parameters). You can use the function to execute multiple applications or you can
                                                change the checkbox name and use it for other things.</p>
                                        </div>
                                        <p>
                                            <strong>MUI_FINISHPAGE_SHOWREADME</strong> <span class="parameter">file/url</span><br />
                                            File or website which the user can select to view using a checkbox. You don't need
                                            to put quotes around the filename when it contains spaces.</p>
                                        <div class="settings">
                                            <p>
                                                <strong>MUI_FINISHPAGE_SHOWREADME_TEXT</strong> <span class="parameter">text</span><br />
                                                Texts to display next to the 'Show Readme' checkbox.</p>
                                            <p>
                                                <strong>MUI_FINISHPAGE_SHOWREADME_NOTCHECKED</strong><br />
                                                Do not check the 'Show Readme' checkbox by default</p>
                                            <p>
                                                <strong>MUI_FINISHPAGE_SHOWREADME_FUNCTION</strong> <span class="parameter">function</span><br />
                                                Call a function instead of showing a file (define MUI_FINISHPAGE_SHOWREADME without
                                                parameters). You can use the function to show multiple files or you can change the
                                                checkbox name and use it for other things.</p>
                                        </div>
                                        <p>
                                            <strong>MUI_FINISHPAGE_LINK</strong> <span class="parameter">link_text</span><br />
                                            Text for a link on the which the user can click to view a website or file.</p>
                                        <div class="settings">
                                            <p>
                                                <strong>MUI_FINISHPAGE_LINK_LOCATION</strong> <span class="parameter">file/url</span><br />
                                                Website or file which the user can select to view using the link. You don't need
                                                to put quotes around the filename when it contains spaces.</p>
                                            <p>
                                                <strong>MUI_FINISHPAGE_LINK_COLOR</strong> <span class="parameter">(color: RRGGBB hexadecimal)</span><br />
                                                Text color for the link on the Finish page.<br />
                                                <em>Default: 000080</em></p>
                                        </div>
                                        <p>
                                            <strong>MUI_FINISHPAGE_NOREBOOTSUPPORT</strong><br />
                                            Disables support for the page that allows the user to reboot the system. Define
                                            this option to save some space if you are not using the /REBOOTOK flag or SetRebootFlag.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_pgu" src="images/closed.gif"
                                            onclick="toggle('trigger_pgu', 'toggle_pgu');" />
                                        Uninstall confirm page settings</h3>
                                    <div class="toggle" id="toggle_pgu">
                                        <p>
                                            <strong>MUI_UNCONFIRMPAGE_TEXT_TOP</strong> <span class="parameter">text</span><br />
                                            Text to display on the top of the page.</p>
                                        <p>
                                            <strong>MUI_UNCONFIRMPAGE_TEXT_LOCATION</strong> <span class="parameter">text</span><br />
                                            Text to display next to the uninstall location text box.</p>
                                    </div>
                            </div>
                        </div>
                        <h2>
                            4. Language files</h2>
                        <div>
                            <p>
                                Insert the Modern UI language files for the languages to want to include.</p>
                            <pre>
!insertmacro MUI_LANGUAGE &quot;English&quot;
</pre>
                            <p>
                                The standard NSIS language files are loaded automatically, there is no need to use
                                LoadLanguageFile.</p>
                        </div>
                        <h2>
                            5. Reserve files</h2>
                        <div>
                            <p>
                                If you are using solid compression, files that are required before the actual installation
                                should be stored first in the data block, because this will make your installer
                                start faster. Include reserve file commands for such files before your sections
                                and functions:</p>
                            <pre>
ReserveFile &quot;ioFile.ini&quot; ;Your own InstallOptions INI files
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS ;InstallOptions plug-in
!insertmacro MUI_RESERVEFILE_LANGDLL ;Language selection dialog
</pre>
                        </div>
                    </div>
                    <h1>
                        Script code for pages</h1>
                    <div>
                        <p>
                            Some pages allow you to show additional information or can be used to get user input.
                            Here you can find the script code to use these features.</p>
                        <h2>
                            Components page descriptions</h2>
                        <div>
                            <p>
                                The Modern UI components page has a text box in which a description can be shown
                                when the user hovers the mouse over a component. If you don't want to use these
                                descriptions, insert the MUI_COMPONENTSPAGE_NODESC interface setting.</p>
                            <p>
                                To set a description for a section, an additional parameter needs to be added to
                                Section commmand with a unique identifier for the section. This name can later be
                                used to set the description for this section.</p>
                            <pre>
Section &quot;Section Name 1&quot; Section1
   ...
SectionEnd
</pre>
                            <p>
                                After the sections, use these macros to set the descriptions:</p>
                            <pre>
LangString DESC_Section1 ${LANG_ENGLISH} &quot;Description of section 1.&quot;
LangString DESC_Section2 ${LANG_ENGLISH} &quot;Description of section 2.&quot;

!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${Section1} $(DESC_Section1)
  !insertmacro MUI_DESCRIPTION_TEXT ${Section2} $(DESC_Section2)
!insertmacro MUI_FUNCTION_DESCRIPTION_END
</pre>
                            <p>
                                For the uninstaller, use the MUI_UNFUNCTION_DESCRIPTION_BEGIN and MUI_UNFUNCTION_DESCRIPTION_END
                                macros.</p>
                        </div>
                        <h2>
                            Start Menu folder</h2>
                        <div>
                            <p>
                                Put the code to write the shortcuts (using CreateShortcut) between the MUI_STARTMENU_WRITE_BEGIN
                                and MUI_STARTMENU_WRITE_END macros:</p>
                            <pre>
!insertmacro MUI_STARTMENU_WRITE_BEGIN pageid
  ...create shortcuts...
!insertmacro MUI_STARTMENU_WRITE_END
</pre>
                            <p>
                                The page ID should be the ID of the page on which the user has selected the folder
                                for the shortcuts you want to write.</p>
                            <p>
                                The variable which contains the folder and the page ID are set as parameters of
                                the page macro.</p>
                        </div>
                    </div>
                    <h1>
                        Language selection dialog</h1>
                    <div>
                        <p>
                            If you want the installer to display a language selection dialog (see the the <a
                                href="../../Examples/Modern%20UI/MultiLanguage.nsi">MultiLanguage.nsi</a> example),
                            insert the MUI_LANGDLL_DISPLAY macro in the .onInit function:</p>
                        <pre>
Function .onInit

  !insertmacro MUI_LANGDLL_DISPLAY

FunctionEnd
</pre>
                        <p>
                            This macro can also be used in the un.onInit function.</p>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_lss" src="images/closed.gif"
                                onclick="toggle('trigger_lss', 'toggle_lss');" />
                            Settings for registry storage of selected language</h3>
                        <div class="toggle" id="toggle_lss">
                            <p>
                                To remember the user's preference, you can define a registry key. These defines
                                should be set before inserting the installation page macro.</p>
                            <p>
                                <strong>MUI_LANGDLL_REGISTRY_ROOT</strong> <span class="parameter">root</span><br />
                                <strong>MUI_LANGDLL_REGISTRY_KEY</strong> <span class="parameter">key</span><br />
                                <strong>MUI_LANGDLL_REGISTRY_VALUENAME</strong> <span class="parameter">value_name</span><br />
                                The registry key to store the language. The users preference will be remembered.
                                You can also use it for the uninstaller to display the right language. Don't forget
                                to remove this key in the uninstaller.</p>
                            <p>
                                For the uninstaller, insert the MUI_UNGETLANGUAGE macro in un.onInit to get the
                                stored language preference:</p>
                            <pre>
Function un.onInit

  !insertmacro MUI_UNGETLANGUAGE

FunctionEnd
</pre>
                        </div>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_lsin" src="images/closed.gif"
                                onclick="toggle('trigger_lsin', 'toggle_lsin');" />
                            Interface settings for selection dialog</h3>
                        <div class="toggle" id="toggle_lsin">
                            <p>
                                To customize the language selection dialog interface, use these defines before inserting
                                the MUI_LANGDLL_DISPLAY macro.</p>
                            <p>
                                <strong>MUI_LANGDLL_WINDOWTITLE</strong> <span class="parameter">text</span><br />
                                The window title of the language selection dialog.</p>
                            <p>
                                <strong>MUI_LANGDLL_INFO</strong> <span class="parameter">text</span><br />
                                The text to display on the language selection dialog.</p>
                            <p>
                                <strong>MUI_LANGDLL_ALWAYSSHOW</strong><br />
                                Always show the language selection dialog, even if a language has been stored in
                                the registry. The language stored in the registry will be selected by default.</p>
                            <p>
                                <strong>MUI_LANGDLL_ALLLANGUAGES</strong><br />
                                Always show all available languages and don't filter according to their codepage.</p>
                        </div>
                    </div>
                    <h1>
                        Custom pages</h1>
                    <div>
                        <p>
                            If you want add your custom pages to your installer, you can insert your own page
                            commands between the page macros. The <a href="../InstallOptions/Readme.html">InstallOptions
                                documentation</a> provides information about creating custom pages using InstallOptions.</p>
                        <pre>
!insertmacro MUI_PAGE_WELCOME
Page custom FunctionName ;Custom page
!insertmacro MUI_PAGE_COMPONENTS
 
;Uninstaller
!insertmacro MUI_UNPAGE_CONFIRM
UninstPage custom un.FunctionName ;Custom page
!insertmacro MUI_UNPAGE_INSTFILES
</pre>
                        <p>
                            Use the MUI_HEADER_TEXT macro to set the text on the page header in a page function:</p>
                        <pre>
LangString PAGE_TITLE ${LANG_ENGLISH} &quot;Title&quot;
LangString PAGE_SUBTITLE ${LANG_ENGLISH} &quot;Subtitle&quot;

Function CustomPageFunction
  !insertmacro MUI_HEADER_TEXT $(PAGE_TITLE) $(PAGE_SUBTITLE)
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY &quot;ioFile.ini&quot;
FuctionEnd
</pre>
                    </div>
                    <h1>
                        Custom functions</h1>
                    <div>
                        <p>
                            Interface functions provided by NSIS, like the .onGUIInit function and the page
                            functions are automatically included by the Modern UI and filled with code to support
                            new interface features. If you want to add additional code to these function, create
                            a function with the custom script code in the script use the Modern UI functions
                            call them.</p>
                        <p>
                            Example:</p>
                        <pre class="text">
!define MUI_CUSTOMFUNCTION_GUIINIT myGuiInit

Function myGUIInit
  ...your own code...
FunctionEnd
</pre>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_cfg" src="images/closed.gif"
                                onclick="toggle('trigger_cfg', 'toggle_cfg');" />
                            General Custom Functions</h3>
                        <div class="toggle" id="toggle_cfg">
                            <p>
                                These defines should be set before inserting the language macros.</p>
                            <p>
                                <strong>MUI_CUSTOMFUNCTION_GUIINIT</strong> <span class="parameter">function</span><br />
                                <strong>MUI_CUSTOMFUNCTION_UNGUIINIT</strong> <span class="parameter">function</span><br />
                                <strong>MUI_CUSTOMFUNCTION_ABORT</strong> <span class="parameter">function</span><br />
                                <strong>MUI_CUSTOMFUNCTION_UNABORT</strong> <span class="parameter">function</span><br />
                                <strong>MUI_CUSTOMFUNCTION_ONMOUSEOVERSECTION</strong> <span class="parameter">function</span><br />
                                <strong>MUI_CUSTOMFUNCTION_UNONMOUSEOVERSECTION</strong> <span class="parameter">function</span></p>
							<p>
                                Mouse over functions are only available when the description macros
								(MUI_FUNCTION_DESCRIPTION_BEGIN) are used. When component page descriptions are not
								used, regular .onMouseOverSection and un.onMouseOverSection must be used.</p>
                        </div>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_cfpg" src="images/closed.gif"
                                onclick="toggle('trigger_cfpg', 'toggle_cfpg');" />
                            Page Custom Functions</h3>
                        <div class="toggle" id="toggle_cfpg">
                            <p>
                                These defines should be set before inserting a page macro.</p>
                            <p>
                                <strong>MUI_PAGE_CUSTOMFUNCTION_PRE</strong> <span class="parameter">function</span><br />
                                <strong>MUI_PAGE_CUSTOMFUNCTION_SHOW</strong> <span class="parameter">function</span><br />
                                <strong>MUI_PAGE_CUSTOMFUNCTION_LEAVE</strong> <span class="parameter">function</span></p>
                            <p>
                                <strong>Notes:</strong></p>
                            <ul>
                                <li>In the Pre function of the Welcome page and the Finish page, you can write to the
                                    InstallOptions INI file of the page (ioSpecial.ini)</li>
                                <li>In the Show function of the Welcome, Finish and StartMenu pages, $MUI_HWND contains
                                    the HWND of the inner dialog</li>
                            </ul>
                        </div>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_cfwf" src="images/closed.gif"
                                onclick="toggle('trigger_cfwf', 'toggle_cfwf');" />
                            Welcome/Finish Page Custom Functions</h3>
                        <div class="toggle" id="toggle_cfwf">
                            <p>
                                This define should be inserted before a single Welcome or Finish page.</p>
                            <p>
                                <strong>MUI_WELCOMEFINISHPAGE_CUSTOMFUNCTION_INIT</strong> <span class="parameter">function</span></p>
                            <p>
                                This Init function is called before the InstallOptions INI file for the page is
                                written, so you can use it to initialize any variables used in the page settings.</p>
                        </div>
                    </div>
                    <h1>
                        <a name="examples" id="examples">Example scripts</a></h1>
                    <div>
                        <p>
                            Basic: <a href="../../Examples/Modern%20UI/Basic.nsi">Basic.nsi</a><br />
                            Welcome/Finish page: <a href="../../Examples/Modern%20UI/WelcomeFinish.nsi">WelcomeFinish.nsi</a><br />
                            Multiple languages: <a href="../../Examples/Modern%20UI/MultiLanguage.nsi">MultiLanguage.nsi</a><br />
                            Header image: <a href="../../Examples/Modern%20UI/HeaderBitmap.nsi">HeaderBitmap.nsi</a><br />
                            Custom pages: <a href="../../Examples/Modern%20UI/InstallOptions.nsi">InstallOptions.nsi</a><br />
                            Start Menu Folder page: <a href="../../Examples/Modern%20UI/StartMenu.nsi">StartMenu.nsi</a></p>
                    </div>
                    <h1>
                        Credits</h1>
                    <div>
                        <p>
                            Written by Joost Verburg.<br />
                            Icons designed by Nikos Adamamas, aka adni18.<br />
                            Thanks to Amir Szekely, aka KiCHiK, for his work on NSIS to make this possible.</p>
                    </div>
                    <h1>
                        License</h1>
                    <div>
                        <p>
                            The zlib/libpng license applies to the Modern UI.</p>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_lic" src="images/closed.gif"
                                onclick="toggle('trigger_lic', 'toggle_lic');" />
                            License Terms</h3>
                        <div class="toggle" id="toggle_lic">
                            <pre>
Copyright &copy; 2002-2009 Joost Verburg

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute
it freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; 
   you must not claim that you wrote the original software.
   If you use this software in a product, an acknowledgment in the
   product documentation would be appreciated but is not required.
2. Altered versions must be plainly marked as such,
   and must not be misrepresented as being the original software.
3. This notice may not be removed or altered from any distribution.
</pre>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
    </table>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>NSIS Modern User Interface - Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
    <style type="text/css">
        /*<![CDATA[*/body
        {
            padding: 10px;
            background-color: #F0F0F0;
            font-size: 13px;
            font-family: Verdana, Arial, Helvetica, sans-serif;
            font-weight: normal;
            text-align: justify;
        }
        p, li
        {
            font-size: 13px;
        }
        table
        {
            margin: auto;
            background-color: #FFFFFF;
        }
        .maintable
        {
            border: 2px solid #376EAB;
        }
        .parameter
        {
            font-weight: bold;
            color: #6586AC;
        }
        h1
        {
            font-size: 20px;
            color: #7A7272;
            font-weight: normal;
        }
        h2
        {
            font-size: 17px;
            font-weight: bold;
            color: #303030;
        }
        h3
        {
            font-size: 14px;
            font-weight: bold;
            color: #2B5885;
        }
        pre
        {
            font-size: 13px;
        }
        div
        {
            margin: 20px;
        }
        div.settings
        {
            margin-right: 0;
        }
        a:link, a:visited, a:active
        {
            color: #294F75;
            text-decoration: none;
        }
        a:hover
        {
            color: #182634;
            text-decoration: underline;
        }
        .trigger
        {
            cursor: pointer;
            cursor: hand;
            height: 14px;
        }
        .toggle
        {
            display: none;
        }
        .options
        {
            text-align: center;
            cursor: pointer;
            cursor: hand;
            color: #294F75;
        }
        /*]]>*/</style>

    <script type="text/javascript">
//<![CDATA[

   var image_open = new Image();
   image_open.src = "images/open.gif";
   var image_closed = new Image();
   image_closed.src = "images/closed.gif";
   
   function toggle(image, section) {
   
      if(document.all) {
        if(document.all[section].style.display == "block") {
           document.all[section].style.display = "none";
           document.all[image].src = image_closed.src;
        }
        else
        {              
           document.all[section].style.display = "block";
           document.all[image].src = image_open.src;
        }
      }
      else
      {
      if(document.getElementById(section).style.display == "block") {
         document.getElementById(section).style.display = "none";
         document.getElementById(image).src = image_closed.src;
         }
      else
         {              
         document.getElementById(section).style.display = "block";
         document.getElementById(image).src = image_open.src;
         }
      }
   
   }

   function expandall() {

     var divNodeList = document.getElementsByTagName('div'); 
     for (i = 0; i < divNodeList.length; i++) { 
        if(divNodeList[i].id) {
           divNodeList[i].style.display = "block";
           document.getElementById('trigger_' + divNodeList[i].id.substr(7)).src = "images/open.gif";
        }
     }
     
   }

   function collapseall() {

     var divNodeList = document.getElementsByTagName('div'); 
     for (i = 0; i < divNodeList.length; i++) { 
        if(divNodeList[i].id) {
           divNodeList[i].style.display = "none";
           document.getElementById('trigger_' + divNodeList[i].id.substr(7)).src = "images/closed.gif";
        }
     }

   }

//]]>
    </script>

</head>
<body>
    <table width="750" class="maintable" cellspacing="0" cellpadding="0" align="center">
        <tr>
            <td>
                <img src="images/header.gif" width="750" height="80" alt="" />
                <p class="options">
                    <a onclick="expandall()">[Expand all]</a>&nbsp; &nbsp;<a onclick="collapseall()">[Collapse
                        all]</a></p>
                <div>
                    <h1>
                        Introduction</h1>
                    <div>
                        <p>
                            The Modern UI provides a user interface for NSIS installers with a modern wizard
                            style, similar to the wizards of recent Windows versions. It is based on the basic
                            user interface that is provided by the NSIS compiler itself and extends it with
                            more interface features and pages.</p>
                        <p>
                            All standard NSIS pages (such as the pages to select components and the installation
                            folder) are supported as well as a number of additional pages. The welcome page
                            allows you to provide an introduction to the installation process, while the finish
                            page provides a way to let the user decide what steps should be performed after
                            the setup wizard is closed (for example, whether the application should be started
                            immediately). A finish page can also be used to ask for a system restart is necessary.</p>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_scr" src="images/closed.gif"
                                onclick="toggle('trigger_scr', 'toggle_scr');" />
                            Screenshots</h3>
                        <div class="toggle" id="toggle_scr">
                            <p>
                                <img src="images/screen1.png" width="503" height="393" alt="" /></p>
                            <p>
                                <img src="images/screen2.png" width="503" height="393" alt="" /></p>
                        </div>
                    </div>
                    <h1>
                        Modern UI 2.0</h1>
                    <div>
                        <p>
                            This new version makes it easier to customize pages, because the same method can
                            be used to&nbsp; change standard NSIS pages as well as additional pages provided
                            by the Modern UI. It is now also possible for other NSIS plug-ins to add new pages
                            to the Modern UI. You can expect to see examples of this soon.</p>
                        <p>
                            The welcome and finish page are no longer implemented using InstallOptions. Instead,
                            the new nsDialogs plug-in is used. nsDialogs allows you to create custom pages or
                            customize existing pages directly from the script.</p>
                        <p>
                            To upgrade a Modern UI 1.8 script, you should:</p>
                        <ul>
                            <li>Insert the MUI2.nsh header file instead of MUI.nsh.</li>
                            <li>The macros for InstallOptions have been moved to a separate header file unrelated
                                to the Modern UI. If you are still using InstallOptions for custom pages, insert
                                InstallOptions.nsh and use the INSTALLOPTIONS_* macros instead of the MUI_INSTALLOPTIONS_*
                                macros. The macros themselves have remained the same.</li>
                            <li>Rewrite customization code for the Modern UI 1.8 welcome and finish pages in which
                                the InstallOptions INI file is used. nsDialogs commands should be used instead.</li>
                            <li>Use the standard NSIS method to escape special characters in all texts. For example,
                                $\r$\n creates newline.</li>
                        </ul>
                    </div>
                    <h1>
                        Script header</h1>
                    <div>
                        <p>
                            The settings for the Modern UI should be inserted in the header of the script file.
                            It&#39;s important to follow the same order as the items below.&nbsp;For example,
                            interface settings should be defined before you insert pages, because the pages
                            depend on the interface configuration. It may be useful to look at the <a href="#examples">
                                example scripts</a> too see how this is done in actual script files.</p>
                        <p>
                            Parameters are given in this format: <span class="parameter">required (option1 | option2)
                                [optional]</span></p>
                    </div>
                    <h2>
                        1. Header file</h2>
                    <div>
                        <p>
                            First of all, add this line to the top of script to include the Modern UI:</p>
                        <pre>
!include MUI2.nsh
</pre>
                    </div>
                    <h2>
                        2. Interface configuration</h2>
                    <div>
                        <p>
                            Then, you may want to use interface settings to change the look and feel of the
                            installer. These settings apply to all pages.<p>
                                The interface settings provided by the NSIS compiler itself (such as LicenseText,
                                Icon, CheckBitmap, InstallColors) should not be used in Modern UI scripts. The Modern
                                UI provides equalivent or extended versions of these settings.<p>
                                    Examples:</p>
                                <pre>
!define MUI_COMPONENTSPAGE_SMALLDESC ;No value
!define MUI_UI &quot;myUI.exe&quot; ;Value
!define MUI_INSTFILESPAGE_COLORS &quot;FFFFFF 000000&quot; ;Two colors
</pre>
                                <h3>
                                    <img class="trigger" alt="Open/Close section" id="trigger_in" src="images/closed.gif"
                                        onclick="toggle('trigger_in', 'toggle_in');" />
                                    Interface settings</h3>
                                <div class="toggle" id="toggle_in">
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_ingen" src="images/closed.gif"
                                            onclick="toggle('trigger_ingen', 'toggle_ingen');" />
                                        Page header</h3>
                                    <div class="toggle" id="toggle_ingen">
                                        <p>
                                            <strong>MUI_ICON</strong> <span class="parameter">icon_file</span><br />
                                            The icon for the installer.<br />
                                            <em>Default: ${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico</em></p>
                                        <p>
                                            <strong>MUI_UNICON</strong> <span class="parameter">icon_file</span><br />
                                            The icon for the uninstaller.<br />
                                            <em>Default: ${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico</em></p>
                                        <p>
                                            <strong>MUI_HEADERIMAGE</strong><br />
                                            Display an image on the header of the page.</p>
                                        <div class="settings">
                                            <p>
                                                <strong>MUI_HEADERIMAGE_BITMAP</strong> <span class="parameter">bmp_file</span><br />
                                                Bitmap image to display on the header of installers pages (recommended size: 150x57
                                                pixels).<br />
                                                <em>Default: ${NSISDIR}\Contrib\Graphics\Header\nsis.bmp</em></p>
                                            <div class="settings">
                                                <p>
                                                    <strong>MUI_HEADERIMAGE_BITMAP_NOSTRETCH</strong><br />
                                                    Do not stretch the installer header bitmap to fit the size of the field. Use this
                                                    option only if you have an image that does not use the whole space. If you have
                                                    a full size bitmap that fits exactly, you should not use this option because the
                                                    size of the field will be different if the user has a custom DPI setting.</p>
                                                <p>
                                                    <strong>MUI_HEADERIMAGE_BITMAP_RTL</strong> <span class="parameter">bmp_file</span><br />
                                                    Bitmap image to display on the header of installers pages when using a RTL language
                                                    (recommended size: 150x57 pixels).<br />
                                                    <em>Default: Non-RTL bitmap</em></p>
                                                <div class="settings">
                                                    <p>
                                                        <strong>MUI_HEADERIMAGE_BITMAP_RTL_NOSTRETCH</strong><br />
                                                        Do not stretch the installer header bitmap when using a RTL language to fit the
                                                        size of the field. Use this option only if you have an image that does not use the
                                                        whole space. If you have a full size bitmap that fits exactly, you should not use
                                                        this option because the size of the field will be different if the user has a custom
                                                        DPI setting.</p>
                                                </div>
                                            </div>
                                            <p>
                                                <strong>MUI_HEADERIMAGE_UNBITMAP</strong> <span class="parameter">bmp_file</span><br />
                                                Bitmap image to display on the header of uninstaller pages (recommended size: 150x57
                                                pixels).<br />
                                                <em>Default: Installer header bitmap</em></p>
                                            <div class="settings">
                                                <p>
                                                    <strong>MUI_HEADERIMAGE_UNBITMAP_NOSTRETCH</strong><br />
                                                    Do not stretch the uninstaller header bitmap to fit the size of the field. Use this
                                                    option only if you have an image that does not use the whole space. If you have
                                                    a full size bitmap that fits exactly, you should not use this option because the
                                                    size of the field will be different if the user has a custom DPI setting.</p>
                                                <p>
                                                    <strong>MUI_HEADERIMAGE_UNBITMAP_RTL</strong> <span class="parameter">bmp_file</span><br />
                                                    Bitmap image to display on the header of uninstallers pages when using a RTL language
                                                    (recommended size: 150x57 pixels).<br />
                                                    <em>Default: Installer RTL header bitmap</em></p>
                                                <div class="settings">
                                                    <p>
                                                        <strong>MUI_HEADERIMAGE_UNBITMAP_RTL_NOSTRETCH</strong><br />
                                                        Do not stretch the uninstaller header bitmap when using a RTL language to fit the
                                                        size of the field. Use this option only if you have an image that does not use the
                                                        whole space. If you have a full size bitmap that fits exactly, you should not use
                                                        this option because the size of the field will be different if the user has a custom
                                                        DPI setting.</p>
                                                </div>
                                            </div>
                                            <p>
                                                <strong>MUI_HEADERIMAGE_RIGHT</strong><br />
                                                Display the header image on the right side instead of the left side (when using
                                                a RTL language it will be displayed on the left side instead of the right side).</p>
                                        </div>
                                        <p>
                                            <strong>MUI_BGCOLOR</strong> <span class="parameter">(color: RRGGBBR hexadecimal)</span><br />
                                            Background color for the header, the Welcome page and the Finish page.<br />
                                            <em>Default: FFFFFF</em></p>
                                        <p>
                                            <strong>MUI_HEADER_TRANSPARENT_TEXT</strong><br />
                                            Set a transparent background for the header's label controls. Useful for custom
                                            user interfaces that set a bigger header image.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_inres" src="images/closed.gif"
                                            onclick="toggle('trigger_inres', 'toggle_inres');" />
                                        Interface resources</h3>
                                    <div class="toggle" id="toggle_inres">
                                        <p>
                                            <strong>MUI_UI</strong> <span class="parameter">ui_file</span><br />
                                            The interface file with the dialog resources. Change this if you have made your
                                            own customized UI.<br />
                                            <em>Default: ${NSISDIR}\Contrib\UIs\modern.exe</em></p>
                                        <p>
                                            <strong>MUI_UI_HEADERIMAGE</strong> <span class="parameter">ui_file</span><br />
                                            The interface files with the dialog resource IDD_INST that contains a bitmap control
                                            and space for the header bitmap.<br />
                                            <em>Default: ${NSISDIR}\Contrib\UIs\modern_headerbmp.exe</em></p>
                                        <p>
                                            <strong>MUI_UI_HEADERIMAGE_RIGHT</strong> <span class="parameter">ui_file</span><br />
                                            The interface files with the dialog resource IDD_INST that contains a bitmap control
                                            and space for the header bitmap on the right side.<br />
                                            <em>Default: ${NSISDIR}\Contrib\UIs\modern_headerbmpr.exe</em></p>
                                        <p>
                                            <strong>MUI_UI_COMPONENTSPAGE_SMALLDESC</strong> <span class="parameter">ui_file</span><br />
                                            The interface files with a customized dialog resource IDD_SELCOM with a small description
                                            area.<br />
                                            <em>Default: ${NSISDIR}\Contrib\UIs\modern_smalldesc.exe</em></p>
                                        <p>
                                            <strong>MUI_UI_COMPONENTSPAGE_NODESC</strong> <span class="parameter">ui_file</span><br />
                                            The interface files with a customized dialog resource IDD_SELCOM without a description
                                            area.<br />
                                            <em>Default: ${NSISDIR}\Contrib\UIs\modern_nodesc.exe</em></p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_inwf" src="images/closed.gif"
                                            onclick="toggle('trigger_inwf', 'toggle_inwf');" />
                                        Installer welcome/finish page</h3>
                                    <div class="toggle" id="toggle_inwf">
                                        <p>
                                            <strong>MUI_WELCOMEFINISHPAGE_BITMAP</strong> <span class="parameter">bmp_file</span><br />
                                            Bitmap for the Welcome page and the Finish page (recommended size: 164x314 pixels).<br />
                                            <em>Default: ${NSISDIR}\Contrib\Graphics\Wizard\win.bmp</em></p>
                                        <div class="settings">
                                            <p>
                                                <strong>MUI_WELCOMEFINISHPAGE_BITMAP_NOSTRETCH</strong><br />
                                                Do not stretch the bitmap for the Welcome and Finish page to fit the size of the
                                                field. Use this option only if you have an image that does not use the whole space.
                                                If you have a full size bitmap that fits exactly, you should not use this option
                                                because the size of the field will be different if the user has a custom DPI setting.</p>
                                        </div>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_inuwf" src="images/closed.gif"
                                            onclick="toggle('trigger_inuwf', 'toggle_inuwf');" />
                                        Uninstaller welcome/finish page</h3>
                                    <div class="toggle" id="toggle_inuwf">
                                        <p>
                                            <strong>MUI_UNWELCOMEFINISHPAGE_BITMAP</strong> <span class="parameter">bmp_file</span><br />
                                            Bitmap for the Welcome page and the Finish page (recommended size: 164x314 pixels).<br />
                                            <em>Default: ${NSISDIR}\Contrib\Graphics\Wizard\win.bmp</em></p>
                                        <div class="settings">
                                            <p>
                                                <strong>MUI_UNWELCOMEFINISHPAGE_BITMAP_NOSTRETCH</strong><br />
                                                Do not stretch the bitmap for the Welcome and Finish page to fit the size of the
                                                field. Use this option only if you have an image that does not use the whole space.
                                                If you have a full size bitmap that fits exactly, you should not use this option
                                                because the size of the field will be different if the user has a custom DPI setting.</p>
                                        </div>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_inl" src="images/closed.gif"
                                            onclick="toggle('trigger_inl', 'toggle_inl');" />
                                        License page</h3>
                                    <div class="toggle" id="toggle_inl">
                                        <p>
                                            <strong>MUI_LICENSEPAGE_BGCOLOR</strong> <span class="parameter">(/windows | /grey |
                                                (color: RRGGBB hexadecimal))</span><br />
                                            The background color for the license textbox. Use /windows for the Windows text
                                            background color (usually white). Use the /grey for the window background color
                                            (usually grey).<br />
                                            <em>Default: /windows</em></p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_inc" src="images/closed.gif"
                                            onclick="toggle('trigger_inc', 'toggle_inc');" />
                                        Components page</h3>
                                    <div class="toggle" id="toggle_inc">
                                        <p>
                                            <strong>MUI_COMPONENTSPAGE_CHECKBITMAP</strong> <span class="parameter">bitmap_file</span><br />
                                            The bitmap with images for the checks of the component select treeview.<br />
                                            <em>Default: ${NSISDIR}\Contrib\Graphics\Checks\modern.bmp</em></p>
                                        <p>
                                            <strong>MUI_COMPONENTSPAGE_SMALLDESC</strong><br />
                                            A small description area on the bottom of the page. Use this layout if you have
                                            a lot of sections and don't need large descriptions.</p>
                                        <p>
                                            <strong>MUI_COMPONENTSPAGE_NODESC</strong><br />
                                            No description area.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_ind" src="images/closed.gif"
                                            onclick="toggle('trigger_ind', 'toggle_ind');" />
                                        Directory page</h3>
                                    <div class="toggle" id="toggle_ind">
                                        <p>
                                            <strong>MUI_DIRECTORYPAGE_BGCOLOR</strong> <span class="parameter">(color: RRGGBB hexadecimal)</span><br />
                                            The background color for the directory textbox.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_ins" src="images/closed.gif"
                                            onclick="toggle('trigger_ins', 'toggle_ins');" />
                                        Start Menu folder page</h3>
                                    <div class="toggle" id="toggle_ins">
                                        <p>
                                            <strong>MUI_STARTMENUPAGE_BGCOLOR</strong> <span class="parameter">(color: RRGGBB hexadecimal)</span><br />
                                            The background color for the startmenu directory list and textbox.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_ini" src="images/closed.gif"
                                            onclick="toggle('trigger_ini', 'toggle_ini');" />
                                        Installation page</h3>
                                    <div class="toggle" id="toggle_ini">
                                        <p>
                                            <strong>MUI_INSTFILESPAGE_COLORS</strong> <span class="parameter">(/windows | &quot;(foreground
                                                color: RRGGBB hexadecimal) (background color: RRGGBB hexadecimal)&quot;)</span><br />
                                            The colors of the details screen. Use /windows for the default Windows colors.<br />
                                            <em>Default: /windows</em></p>
                                        <p>
                                            <strong>MUI_INSTFILESPAGE_PROGRESSBAR</strong> <span class="parameter">(&quot;&quot;
                                                | colored | smooth)</span><br />
                                            The style of the progress bar. Colored makes it use the MUI_INSTALLCOLORS.<br />
                                            <em>Default: smooth</em></p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_inf" src="images/closed.gif"
                                            onclick="toggle('trigger_inf', 'toggle_inf');" />
                                        Installer finish page</h3>
                                    <div class="toggle" id="toggle_inf">
                                        <p>
                                            <strong>MUI_FINISHPAGE_NOAUTOCLOSE</strong><br />
                                            Do not automatically jump to the finish page, to allow the user to check the install
                                            log.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_uinf" src="images/closed.gif"
                                            onclick="toggle('trigger_uinf', 'toggle_uinf');" />
                                        Uninstaller finish page</h3>
                                    <div class="toggle" id="toggle_uinf">
                                        <p>
                                            <strong>MUI_UNFINISHPAGE_NOAUTOCLOSE</strong><br />
                                            Do not automatically jump to the finish page, to allow the user to check the uninstall
                                            log.</p>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_inaw" src="images/closed.gif"
                                            onclick="toggle('trigger_inaw', 'toggle_inaw');" />
                                        Abort warning</h3>
                                    <div class="toggle" id="toggle_inaw">
                                        <p>
                                            <strong>MUI_ABORTWARNING</strong><br />
                                            Show a message box with a warning when the user wants to close the installer.</p>
                                        <div class="settings">
                                            <p>
                                                <strong>MUI_ABORTWARNING_TEXT</strong> <span class="parameter">text</span><br />
                                                Text to display on the abort warning message box.</p>
                                            <p>
                                                <strong>MUI_ABORTWARNING_CANCEL_DEFAULT</strong><br />
                                                Set the Cancel button as the default button on the message box.</p>
                                        </div>
                                    </div>
                                    <h3>
                                        <img class="trigger" alt="Open/Close section" id="trigger_inuaw" src="images/closed.gif"
                                            onclick="toggle('trigger_inuaw', 'toggle_inuaw');" />
                                        Uninstaller abort warning</h3>
                                    <div class="toggle" id="toggle_inuaw">
                                        <p>
                                            <strong>MUI_UNABORTWARNING</strong><br />
                                            Show a message box with a warning when the user wants to close the uninstaller.</p>
                                        <div class="settings">
                                            <p>
                                                <strong>MUI_UNABORTWARNING_TEXT</strong> <span class="parameter">text</span><br />
                                                Text to display on the abort warning message box.</p>
                                            <p>
                                                <strong>MUI_UNABORTWARNING_CANCEL_DEFAULT</strong><br />
                                                Set the Cancel button as the default button on the message box.</p>
                                        </div>
                                    </div>
                                </div>
                    </div>
                    <h2>
                        3. Pages</h2>
                    <div>
                        <p>
                            Insert the following macros to set the pages you want to use. The pages will appear
                            in the order in which you insert them in the script. You can also insert custom
                            Page commands between the macros to add custom pages.</p>
                        <p>
                            You can add multiple pages of certain types (for example, if you want the user to
                            specify multiple folders).</p>
                        <p>
                            Examples:</p>
                        <pre>
!insertmacro MUI_PAGE_LICENSE &quot;License.rtf&quot;
!insertmacro MUI_PAGE_COMPONENTS

Var StartMenuFolder
!insertmacro MUI_PAGE_STARTMENU &quot;Application&quot; $StartMenuFolder
</pre>
                        <p>
                            You will need the page ID for the Start Menu folder page when using the Start Menu
                            folder macros. The folder will be stored in the specified variable.</p>
                        <p>
                            <strong>Installer pages</strong><br />
                            MUI_PAGE_WELCOME<br />
                            MUI_PAGE_LICENSE <span class="parameter">textfile</span><br />
                            MUI_PAGE_COMPONENTS<br />
                            MUI_PAGE_DIRECTORY<br />
                            MUI_PAGE_STARTMENU <span class="parameter">pageid variable</span><br />
                            MUI_PAGE_INSTFILES<br />
                            MUI_PAGE_FINISH</p>
                        <p>
                            <strong>Uninstaller pages</strong><br />
                            MUI_UNPAGE_WELCOME<br />
                            MUI_UNPAGE_CONFIRM<br />
                            MUI_UNPAGE_LICENSE <span class="parameter">textfile</span><br />
                            MUI_UNPAGE_COMPONENTS<br />
                            MUI_UNPAGE_DIRECTORY<br />
                            MUI_UNPAGE_INSTFILES<br />
                            MUI_UNPAGE_FINISH</p>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_pg" src="images/closed.gif"
                                onclick="toggle('trigger_pg', 'toggle_pg');" />
                            Page settings</h3>
                        <div class="toggle" id="toggle_pg">
                            <p>
                                Page settings apply to a single page and should be set before inserting a page macro.
                                The same settings can be used for installer and uninstaller pages. You have to repeat
                                the setting if you want it to apply to multiple pages. Example:</p>
                            <pre>
;Add a directory page to let the user specify a plug-ins folder
;Store the folder in $PluginsFolder

Var PLUGINS_FOLDER
!define MUI_DIRECTORYPAGE_VARIABLE $PluginsFolder
!insertmacro MUI_PAGE_DIRECTORY
</pre>
                            <p>
                                <p>
                                    All standard texts in the user interface are loaded from language files, which are
                                    available for all languages supported by NSIS. So you only need to define these
                                    texts if you want to change the default.</p>
                                <p>
                                    If the parameter is a text that should be different for each language, define a
                                    language string using LangString and use $(LangStringName) as value. For a license
                                    text in multiple languages, LicenseLangString can be used. Refer the NSIS Users
                                    Manual for more information about installers with multiple languages.</p>
                                <p>
                                    In all text settings, the doublequote character (&quot;) should be escaped in the
                                    following form: $\&quot;</p>
                                <h3>
                                    <img class="trigger" alt="Open/Close section" id="trigger_pgg" src="images/closed.gif"
                                        onclick="toggle('trigger_pgg', 'toggle_pgg');" />
                                    General page settings</h3>
                                <div class="toggle" id="toggle_pgg">
                                    <p>
                                        <strong>MUI_PAGE_HEADER_TEXT</strong> <span class="parameter">text</span><br />
                                        Text to display on the header of the page.</p>
                                    <p>
                                        <strong>MUI_PAGE_HEADER_SUBTEXT</strong> <span class="parameter">text</span><br />
                                        Subtext to display on the header of the page.</p>
                                </div>
                                <h3>
                                    <img class="trigger" alt="Open/Close section" id="trigger_pgw" src="images/closed.gif"
                                        onclick="toggle('trigger_pgw', 'toggle_pgw');" />
                                    Welcome page settings</h3>
                                <div class="toggle" id="toggle_pgw">
                                    <p>
                                        <strong>MUI_WELCOMEPAGE_TITLE</strong> <span class="parameter">title</span><br />
                                        Title to display on the top of the page.</p>
                                    <p>
                                        <strong>MUI_WELCOMEPAGE_TITLE_3LINES</strong><br />
                                        Extra space for the title area.</p>
                                    <p>
                                        <strong>MUI_WELCOMEPAGE_TEXT</strong> <span class="parameter">text</span><br />
                                        Text to display on the page.</p>
                                </div>
                                <h3>
                                    <img class="trigger" alt="Open/Close section" id="trigger_pgl" src="images/closed.gif"
                                        onclick="toggle('trigger_pgl', 'toggle_pgl');" />
                                    License page settings</h3>
                                <div class="toggle" id="toggle_pgl">
                                    <p>
                                        <strong>MUI_LICENSEPAGE_TEXT_TOP</strong> <span class="parameter">text</span><br />
                                        Text to display on the top of the page.</p>
                                    <p>
                                        <strong>MUI_LICENSEPAGE_TEXT_BOTTOM</strong> <span class="parameter">text</span><br />
                                        Text to display on the bottom of the page.</p>
                                    <p>
                                        <strong>MUI_LICENSEPAGE_BUTTON</strong> <span class="parameter">button_text</span><br />
                                        Text to display on the 'I Agree' button.</p>
                                    <p>
                                        <strong>MUI_LICENSEPAGE_CHECKBOX</strong><br />
                                        Display a checkbox the user has to check to agree with the license terms.</p>
                                    <div class="settings">
                                        <p>
                                            <strong>MUI_LICENSEPAGE_CHECKBOX_TEXT</strong> <span class="parameter">text</span><br />
                                            Text to display next to the checkbox to agree with the license terms.</p>
                                    </div>
                                    <p>
                                        <strong>MUI_LICENSEPAGE_RADIOBUTTONS</strong><br />
                                        Display two radio buttons to allow the user to choose between accepting the license
                                        terms or not.</p>
                                    <div class="settings">
                                        <p>
                                            <strong>MUI_LICENSEPAGE_RADIOBUTTONS_TEXT_ACCEPT</strong> <span class="parameter">text</span><br />
                                            Text to display next to the checkbox to accept the license terms.</p>
                                        <p>
                                            <strong>MUI_LICENSEPAGE_RADIOBUTTONS_TEXT_DECLINE</strong> <span class="parameter">text</span><br />
                                            Text to display next to the checkbox to decline the license terms.</p>
                                    </div>
                                </div>
                                <h3>
                                    <img class="trigger" alt="Open/Close section" id="trigger_pgc" src="images/closed.gif"
                                        onclick="toggle('trigger_pgc', 'toggle_pgc');" />
                                    Components page settings</h3>
                                <div class="toggle" id="toggle_pgc">
                                    <p>
                                        <strong>MUI_COMPONENTSPAGE_TEXT_TOP</strong> <span class="parameter">text</span><br />
                                        Text to display on the top of the page.</p>
                                    <p>
                                        <strong>MUI_COMPONENTSPAGE_TEXT_COMPLIST</strong> <span class="parameter">text</span><br />
                                        Text to display on next to the components list.</p>
                                    <p>
                                        <strong>MUI_COMPONENTSPAGE_TEXT_INSTTYPE</strong> <span class="parameter">text</span><br />
                                        Text to display on next to the installation type combo box.</p>
                                    <p>
                                        <strong>MUI_COMPONENTSPAGE_TEXT_DESCRIPTION_TITLE</strong> <span class="parameter">text</span><br />
                                        Text to display on the of the top of the description box.</p>
                                    <p>
                                        <strong>MUI_COMPONENTSPAGE_TEXT_DESCRIPTION_INFO</strong> <span class="parameter">text</span><br />
                                        Text to display inside the description box when no section is selected.</p>
                                </div>
                                <h3>
                                    <img class="trigger" alt="Open/Close section" id="trigger_pgd" src="images/closed.gif"
                                        onclick="toggle('trigger_pgd', 'toggle_pgd');" />
                                    Directory page settings</h3>
                                <div class="toggle" id="toggle_pgd">
                                    <p>
                                        <strong>MUI_DIRECTORYPAGE_TEXT_TOP</strong> <span class="parameter">text</span><br />
                                        Text to display on top of the page.</p>
                                    <p>
                                        <strong>MUI_DIRECTORYPAGE_TEXT_DESTINATION</strong> <span class="parameter">text</span><br />
                                        Text to display on the destination folder frame.</p>
                                    <p>
                                        <strong>MUI_DIRECTORYPAGE_VARIABLE</strong> <span class="parameter">variable</span><br />
                                        Variable in which to store the selected folder.<br />
                                        <em>Default: $INSTDIR</em></p>
                                    <p>
                                        <strong>MUI_DIRECTORYPAGE_VERIFYONLEAVE</strong><br />
                                        Does not disable the Next button when a folder is invalid but allows you to use
                                        GetInstDirError in the leave function to handle an invalid folder.</p>
                                </div>
                                <h3>
                                    <img class="trigger" alt="Open/Close section" id="trigger_pgs" src="images/closed.gif"
                                        onclick="toggle('trigger_pgs', 'toggle_pgs');" />
                                    Start Menu folder page settings</h3>
                                <div class="toggle" id="toggle_pgs">
                                    <p>
                                        <strong>MUI_STARTMENUPAGE_TEXT_TOP</strong> <span class="parameter">text</span><br />
                                        Text to display on the top of the page.</p>
                                    <p>
                                        <strong>MUI_STARTMENUPAGE_TEXT_CHECKBOX</strong> <span class="parameter">text</span><br />
                                        Text to display next to the checkbox to disable the Start Menu folder creation.</p>
                                    <p>
                                        <strong>MUI_STARTMENUPAGE_DEFAULTFOLDER</strong> <span class="parameter">folder</span><br />
                                        The default Start Menu Folder.</p>
                                    <p>
                                        <strong>MUI_STARTMENUPAGE_NODISABLE</strong><br />
                                        Do not display the checkbox to disable the creation of Start Menu shortcuts.</p>
                                    <p>
                                        <strong>MUI_STARTMENUPAGE_REGISTRY_ROOT</strong> <span class="parameter">root</span><br />
                                        <strong>MUI_STARTMENUPAGE_REGISTRY_KEY</strong> <span class="parameter">key</span><br />
                                        <strong>MUI_STARTMENUPAGE_REGISTRY_VALUENAME</strong> <span class="parameter">value_name</span><br />
                                        The registry key to store the Start Menu folder. The page will use it to remember
                                        the users preference. You should also use for the uninstaller to remove the Start
                                        Menu folders. Don't forget to remove this key during uninstallation.</p>
                                    <p>
                                        For the uninstaller, use the MUI_STARTMENU_GETFOLDER macro to get the Start Menu
                                        folder:</p>
                                    <pre>
!insertmacro MUI_STARTMENU_GETFOLDER page_id $R0
  Delete &quot;$SMPROGRAMS\$R0\Your Shortcut.lnk&quot;
</pre>
                                </div>
                                <h3>
                                    <img class="trigger" alt="Open/Close section" id="trigger_pgi" src="images/closed.gif"
                                        onclick="toggle('trigger_pgi', 'toggle_pgi');" />
                                    Installation page settings</h3>
                                <div class="toggle" id="toggle_pgi">
                                    <p>
                                        <strong>MUI_INSTFILESPAGE_FINISHHEADER_TEXT</strong> <span class="parameter">text</span><br />
                                        Text to display on the header of the installation page when the installation has
                                        been completed (won't be displayed when using a Finish page without MUI_(UN)FINISHPAGE_NOAUTOCLOSE).</p>
                                    <p>
                                        <strong>MUI_INSTFILESPAGE_FINISHHEADER_SUBTEXT</strong> <span class="parameter">text</span><br />
                                        Subtext to display on the header of the installation page when the installation
                                        has been completed (won't be displayed when using a Finish page without MUI_(UN)FINISHPAGE_NOAUTOCLOSE).</p>
                                    <p>
                                        <strong>MUI_INSTFILESPAGE_ABORTHEADER_TEXT</strong> <span class="parameter">text</span><br />
                                        Text to display on the header of the installation page when the installation has
                                        been aborted.</p>
                                    <p>
                                        <strong>MUI_INSTFILESPAGE_ABORTHEADER_SUBTEXT</strong> <span class="parameter">text</span><br />
                                        Subext to display on the header of the installation page when the installation has
                                        been aborted.</p>
                                </div>
                                <h3>
                                    <img class="trigger" alt="Open/Close section" id="trigger_pgf" src="images/closed.gif"
                                        onclick="toggle('trigger_pgf', 'toggle_pgf');" />
                                    Finish page settings</h3>
                                <div class="toggle" id="toggle_pgf">
                                    <p>
                                        <strong>MUI_FINISHPAGE_TITLE</strong> <span class="parameter">title</span><br />
                                        Title to display on the top of the page.</p>
                                    <p>
                                        <strong>MUI_FINISHPAGE_TITLE_3LINES</strong><br />
                                        Extra space for the title area.</p>
                                    <p>
                                        <strong>MUI_FINISHPAGE_TEXT</strong> <span class="parameter">text</span><br />
                                        Text to display on the page.</p>
                                    <p>
                                        <strong>MUI_FINISHPAGE_TEXT_LARGE</strong><br />
                                        Extra space for the text area (if using checkboxes).</p>
                                    <p>
                                        <strong>MUI_FINISHPAGE_BUTTON</strong> <span class="parameter">text</span><br />
                                        Text to display on the Finish button.</p>
                                    <p>
                                        <strong>MUI_FINISHPAGE_CANCEL_ENABLED</strong><br />
                                        Enable the Cancel button so the user can skip any options displayed on the finish
                                        page.</p>
                                    <p>
                                        <strong>MUI_FINISHPAGE_TEXT_REBOOT</strong> <span class="parameter">text</span><br />
                                        Text to display on the finish page when asking for a system reboot.</p>
                                    <p>
                                        <strong>MUI_FINISHPAGE_TEXT_REBOOTNOW</strong> <span class="parameter">text</span><br />
                                        Text to display next to the 'Reboot now' option button.</p>
                                    <p>
                                        <strong>MUI_FINISHPAGE_TEXT_REBOOTLATER</strong> <span class="parameter">text</span><br />
                                        Text to display next to the 'Reboot later' option button.</p>
                                    <p>
                                        <strong>MUI_FINISHPAGE_REBOOTLATER_DEFAULT</strong><br />
                                        Sets the 'Reboot later' option as the default option.</p>
                                    <p>
                                        <strong>MUI_FINISHPAGE_RUN</strong> <span class="parameter">exe_file</span><br />
                                        Application which the user can select to run using a checkbox. You don't need to
                                        put quotes around the filename when it contains spaces.</p>
                                    <div class="settings">
                                        <p>
                                            <strong>MUI_FINISHPAGE_RUN_TEXT</strong> <span class="parameter">text</span><br />
                                            Texts to display next to the 'Run program' checkbox.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_RUN_PARAMETERS</strong> <span class="parameter">parameters</span><br />
                                            Parameters for the application to run. Don't forget to escape double quotes in the
                                            value (use $\&quot;).</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_RUN_NOTCHECKED</strong><br />
                                            Do not check the 'Run program' checkbox by default</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_RUN_FUNCTION</strong> <span class="parameter">function</span><br />
                                            Call a function instead of executing an application (define MUI_FINISHPAGE_RUN without
                                            parameters). You can use the function to execute multiple applications or you can
                                            change the checkbox name and use it for other things.</p>
                                    </div>
                                    <p>
                                        <strong>MUI_FINISHPAGE_SHOWREADME</strong> <span class="parameter">file/url</span><br />
                                        File or website which the user can select to view using a checkbox. You don't need
                                        to put quotes around the filename when it contains spaces.</p>
                                    <div class="settings">
                                        <p>
                                            <strong>MUI_FINISHPAGE_SHOWREADME_TEXT</strong> <span class="parameter">text</span><br />
                                            Texts to display next to the 'Show Readme' checkbox.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_SHOWREADME_NOTCHECKED</strong><br />
                                            Do not check the 'Show Readme' checkbox by default</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_SHOWREADME_FUNCTION</strong> <span class="parameter">function</span><br />
                                            Call a function instead of showing a file (define MUI_FINISHPAGE_SHOWREADME without
                                            parameters). You can use the function to show multiple files or you can change the
                                            checkbox name and use it for other things.</p>
                                    </div>
                                    <p>
                                        <strong>MUI_FINISHPAGE_LINK</strong> <span class="parameter">link_text</span><br />
                                        Text for a link on the which the user can click to view a website or file.</p>
                                    <div class="settings">
                                        <p>
                                            <strong>MUI_FINISHPAGE_LINK_LOCATION</strong> <span class="parameter">file/url</span><br />
                                            Website or file which the user can select to view using the link. You don't need
                                            to put quotes around the filename when it contains spaces.</p>
                                        <p>
                                            <strong>MUI_FINISHPAGE_LINK_COLOR</strong> <span class="parameter">(color: RRGGBB hexadecimal)</span><br />
                                            Text color for the link on the Finish page.<br />
                                            <em>Default: 000080</em></p>
                                    </div>
                                    <p>
                                        <strong>MUI_FINISHPAGE_NOREBOOTSUPPORT</strong><br />
                                        Disables support for the page that allows the user to reboot the system. Define
                                        this option to save some space if you are not using the /REBOOTOK flag or SetRebootFlag.</p>
                                </div>
                                <h3>
                                    <img class="trigger" alt="Open/Close section" id="trigger_pgu" src="images/closed.gif"
                                        onclick="toggle('trigger_pgu', 'toggle_pgu');" />
                                    Uninstall confirm page settings</h3>
                                <div class="toggle" id="toggle_pgu">
                                    <p>
                                        <strong>MUI_UNCONFIRMPAGE_TEXT_TOP</strong> <span class="parameter">text</span><br />
                                        Text to display on the top of the page.</p>
                                    <p>
                                        <strong>MUI_UNCONFIRMPAGE_TEXT_LOCATION</strong> <span class="parameter">text</span><br />
                                        Text to display next to the uninstall location text box.</p>
                                </div>
                        </div>
                    </div>
                    <h2>
                        4. Language files</h2>
                    <div>
                        <p>
                            Insert the Modern UI language files for the languages to want to include.</p>
                        <pre>
!insertmacro MUI_LANGUAGE &quot;English&quot;
</pre>
                        <p>
                            The standard NSIS language files are loaded automatically, there is no need to use
                            LoadLanguageFile.</p>
                    </div>
                    <h2>
                        5. Reserve files</h2>
                    <div>
                        <p>
                            If you are using solid compression, files that are required before the actual installation
                            should be stored first in the data block, because this will make your installer
                            start faster. Include reserve file commands for such files before your sections
                            and functions:</p>
                        <pre>
ReserveFile MyPlugin.dll
!insertmacro MUI_RESERVEFILE_LANGDLL ;Language selection dialog
...
</pre>
                    </div>
                    <h1>
                        Script code for pages</h1>
                    <div>
                        <p>
                            Some pages allow you to show additional information or can be used to get user input.
                            Here you can find the script code to use these features.</p>
                        <h2>
                            Components page descriptions</h2>
                        <div>
                            <p>
                                The Modern UI components page has a text box in which a description can be shown
                                when the user hovers the mouse over a component. If you don't want to use these
                                descriptions, insert the MUI_COMPONENTSPAGE_NODESC interface setting.</p>
                            <p>
                                To set a description for a section, an additional parameter needs to be added to
                                Section commmand with a unique identifier for the section. This name can later be
                                used to set the description for this section.</p>
                            <pre>
Section &quot;Section Name 1&quot; Section1
   ...
SectionEnd
</pre>
                            <p>
                                After the sections, use these macros to set the descriptions:</p>
                            <pre>
LangString DESC_Section1 ${LANG_ENGLISH} &quot;Description of section 1.&quot;
LangString DESC_Section2 ${LANG_ENGLISH} &quot;Description of section 2.&quot;

!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${Section1} $(DESC_Section1)
  !insertmacro MUI_DESCRIPTION_TEXT ${Section2} $(DESC_Section2)
!insertmacro MUI_FUNCTION_DESCRIPTION_END
</pre>
                            <p>
                                For the uninstaller, use the MUI_UNFUNCTION_DESCRIPTION_BEGIN and MUI_UNFUNCTION_DESCRIPTION_END
                                macros.</p>
                        </div>
                        <h2>
                            Start Menu folder</h2>
                        <div>
                            <p>
                                Put the code to write the shortcuts (using CreateShortcut) between the MUI_STARTMENU_WRITE_BEGIN
                                and MUI_STARTMENU_WRITE_END macros:</p>
                            <pre>
!insertmacro MUI_STARTMENU_WRITE_BEGIN pageid
  ...create shortcuts...
!insertmacro MUI_STARTMENU_WRITE_END
</pre>
                            <p>
                                The page ID should be the ID of the page on which the user has selected the folder
                                for the shortcuts you want to write.</p>
                            <p>
                                The variable which contains the folder and the page ID are set as parameters of
                                the page macro.</p>
                        </div>
                    </div>
                    <h1>
                        Language selection dialog</h1>
                    <div>
                        <p>
                            If you want the installer to display a language selection dialog (see the the <a
                                href="../../Examples/Modern%20UI/MultiLanguage.nsi">MultiLanguage.nsi</a> example),
                            insert the MUI_LANGDLL_DISPLAY macro in the .onInit function:</p>
                        <pre>
Function .onInit

  !insertmacro MUI_LANGDLL_DISPLAY

FunctionEnd
</pre>
                        <p>
                            This macro can also be used in the un.onInit function.</p>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_lss" src="images/closed.gif"
                                onclick="toggle('trigger_lss', 'toggle_lss');" />
                            Settings for registry storage of selected language</h3>
                        <div class="toggle" id="toggle_lss">
                            <p>
                                To remember the user's preference, you can define a registry key. These defines
                                should be set before inserting the installation page macro.</p>
                            <p>
                                <strong>MUI_LANGDLL_REGISTRY_ROOT</strong> <span class="parameter">root</span><br />
                                <strong>MUI_LANGDLL_REGISTRY_KEY</strong> <span class="parameter">key</span><br />
                                <strong>MUI_LANGDLL_REGISTRY_VALUENAME</strong> <span class="parameter">value_name</span><br />
                                The registry key to store the language. The users preference will be remembered.
                                You can also use it for the uninstaller to display the right language. Don't forget
                                to remove this key in the uninstaller.</p>
                            <p>
                                For the uninstaller, insert the MUI_UNGETLANGUAGE macro in un.onInit to get the
                                stored language preference:</p>
                            <pre>
Function un.onInit

  !insertmacro MUI_UNGETLANGUAGE

FunctionEnd
</pre>
                        </div>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_lsin" src="images/closed.gif"
                                onclick="toggle('trigger_lsin', 'toggle_lsin');" />
                            Interface settings for selection dialog</h3>
                        <div class="toggle" id="toggle_lsin">
                            <p>
                                To customize the language selection dialog interface, use these defines before inserting
                                the MUI_LANGDLL_DISPLAY macro.</p>
                            <p>
                                <strong>MUI_LANGDLL_WINDOWTITLE</strong> <span class="parameter">text</span><br />
                                The window title of the language selection dialog.</p>
                            <p>
                                <strong>MUI_LANGDLL_INFO</strong> <span class="parameter">text</span><br />
                                The text to display on the language selection dialog.</p>
                            <p>
                                <strong>MUI_LANGDLL_ALWAYSSHOW</strong><br />
                                Always show the language selection dialog, even if a language has been stored in
                                the registry. The language stored in the registry will be selected by default.</p>
                            <p>
                                <strong>MUI_LANGDLL_ALLLANGUAGES</strong><br />
                                Always show all available languages and don't filter according to their codepage.</p>
                        </div>
                    </div>
                    <h1>
                        Custom pages</h1>
                    <div>
                        <p>
                            If you want add your custom pages to your installer, you can insert your own page
                            commands between the page macros.</p>
                        <pre>
!insertmacro MUI_PAGE_WELCOME
Page custom FunctionName ;Custom page
!insertmacro MUI_PAGE_COMPONENTS
 
;Uninstaller
!insertmacro MUI_UNPAGE_CONFIRM
UninstPage custom un.FunctionName ;Custom page
!insertmacro MUI_UNPAGE_INSTFILES
</pre>
                        <p>
                            Use the MUI_HEADER_TEXT macro to set the text on the page header in a page function:</p>
                        <pre>
LangString PAGE_TITLE ${LANG_ENGLISH} &quot;Title&quot;
LangString PAGE_SUBTITLE ${LANG_ENGLISH} &quot;Subtitle&quot;

Function CustomPageFunction
  !insermacro MUI_HEADER_TEXT $(PAGE_TITLE) $(PAGE_SUBTITLE)
  ...
FuctionEnd
</pre>
                    </div>
                    <h1>
                        Custom functions</h1>
                    <div>
                        <p>
                            Interface functions provided by NSIS, like the .onGUIInit function and the page
                            functions are automatically included by the Modern UI and filled with code to support
                            new interface features. If you want to add additional code to these function, create
                            a function with the custom script code in the script use the Modern UI functions
                            call them.</p>
                        <p>
                            Example:</p>
                        <pre class="text">
!define MUI_CUSTOMFUNCTION_GUIINIT myGuiInit

Function myGUIInit
  ...
FunctionEnd</pre>
                        <p>
                            Modern UI pages can also customized using custom functions.</p>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_cfg" src="images/closed.gif"
                                onclick="toggle('trigger_cfg', 'toggle_cfg');" />
                            General Custom Functions</h3>
                        <div class="toggle" id="toggle_cfg">
                            <p>
                                These defines should be set before inserting the language macros.</p>
                            <p>
                                <strong>MUI_CUSTOMFUNCTION_GUIINIT</strong> <span class="parameter">function</span><br />
                                <strong>MUI_CUSTOMFUNCTION_UNGUIINIT</strong> <span class="parameter">function</span><br />
                                <strong>MUI_CUSTOMFUNCTION_ABORT</strong> <span class="parameter">function</span><br />
                                <strong>MUI_CUSTOMFUNCTION_UNABORT</strong> <span class="parameter">function</span><br />
                                <strong>MUI_CUSTOMFUNCTION_ONMOUSEOVERSECTION</strong> <span class="parameter">function</span><br />
                                <strong>MUI_CUSTOMFUNCTION_UNONMOUSEOVERSECTION</strong> <span class="parameter">function</span></p>
							<p>
                                Mouse over functions are only available when the description macros
								(MUI_FUNCTION_DESCRIPTION_BEGIN) are used. When component page descriptions are not
								used, regular .onMouseOverSection and un.onMouseOverSection must be used.</p>
                        </div>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_cfpg" src="images/closed.gif"
                                onclick="toggle('trigger_cfpg', 'toggle_cfpg');" />
                            Page Custom Functions</h3>
                        <div class="toggle" id="toggle_cfpg">
                            <p>
                                These defines should be set before inserting a page macro.</p>
                            <p>
                                <strong>MUI_PAGE_CUSTOMFUNCTION_PRE</strong> <span class="parameter">function</span><br />
                                <strong>MUI_PAGE_CUSTOMFUNCTION_SHOW</strong> <span class="parameter">function</span><br />
                                <strong>MUI_PAGE_CUSTOMFUNCTION_LEAVE</strong> <span class="parameter">function</span><br />
                            </p>
                            <p>
                                The pre function is called first and allows you to initalize variables or decide
                                whether the page should be skipped. Then, the show function is called, which can
                                be used to customize the interface. Finally, the user input can be validated in the
								leave function. The NSIS Users Manual provides more information about these functions.</p>
                            <p>
                                In the show function, the window handles of all controls on the page can be retrieved
                                from a Modern UI variable. A list of the variables names is not yet available. For
                                now, refer to the source files of the Modern UI 2.0. The variable declarations can
                                be found in the first lines of the header file for a certain page.</p>
                        </div>
                    </div>
                    <h1>
                        <a name="examples" id="examples">Example scripts</a></h1>
                    <div>
                        <p>
                            Basic: <a href="../../Examples/Modern%20UI/Basic.nsi">Basic.nsi</a><br />
                            Welcome/Finish page: <a href="../../Examples/Modern%20UI/WelcomeFinish.nsi">WelcomeFinish.nsi</a><br />
                            Multiple languages: <a href="../../Examples/Modern%20UI/MultiLanguage.nsi">MultiLanguage.nsi</a><br />
                            Header image: <a href="../../Examples/Modern%20UI/HeaderBitmap.nsi">HeaderBitmap.nsi</a><br />
                            Start Menu Folder page: <a href="../../Examples/Modern%20UI/StartMenu.nsi">StartMenu.nsi</a></p>
                    </div>
                    <h1>
                        Credits</h1>
                    <div>
                        <p>
                            Written by Joost Verburg.<br />
                            Icons designed by Nikos Adamamas, aka adni18.<br />
                            Thanks to Amir Szekely, aka KiCHiK, for his work on NSIS to make this possible.</p>
                    </div>
                    <h1>
                        License</h1>
                    <div>
                        <p>
                            The zlib/libpng license applies to the Modern UI.</p>
                        <h3>
                            <img class="trigger" alt="Open/Close section" id="trigger_lic" src="images/closed.gif"
                                onclick="toggle('trigger_lic', 'toggle_lic');" />
                            License Terms</h3>
                        <div class="toggle" id="toggle_lic">
                            <pre>
Copyright &copy; 2002-2009 Joost Verburg

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute
it freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; 
   you must not claim that you wrote the original software.
   If you use this software in a product, an acknowledgment in the
   product documentation would be appreciated but is not required.
2. Altered versions must be plainly marked as such,
   and must not be misrepresented as being the original software.
3. This notice may not be removed or altered from any distribution.
</pre>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
    </table>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
    <title>Multi-User Header File (MultiUser.nsh)</title>
    <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
    <style type="text/css">
        td
        {
            padding: 5px;
            vertical-align: top;
            border-bottom: 1px solid black;
        }
    </style>
</head>
<body>
    <h1>
        Multi-User Header File (MultiUser.nsh)</h1>
    <p>
        <i>Installer configuration for multi-user Windows environments</i></p>
    <h2>
        Table of Contents</h2>
    <ul>
        <li><a href="#introduction">Introduction</a></li>
        <li><a href="#executionlevel">Initalization and Execution Level</a>
            <li><a href="#installationmode">Installation Mode</a></ul>
    <h2>
        <a name="introduction"></a>Introduction</h2>
    <p>
        Modern Windows versions support multiple users accounts on a single computer, each
        with different privileges. For security reasons, the privileges of applications
        can also be limited. For an installer, the <i>execution level</i> and <i>installation
            mode</i> are important. The execution level determines the privileges of the
        installer application. For example, to install hardware drivers, administrator privileges
        are required. Applications can also be installed for a single user or for all users
        on a computer, which is determined by the installation mode. Installation for all
        users requires a higher execution level as compared with a single user setup. The
        MultiUser.nsh header files provides the features to automatically handle all these
        aspects related to user accounts and installer privileges.</p>
    <p>
        Note that all settings need to be set before including the MultiUser.nsh header
        file.</p>
    <h2>
        Initialization and <a name="executionlevel"></a>Execution Level&nbsp;</h2>
    <p>
        Before the MultiUser.nsh file is included, the MULTIUSER_EXECUTIONLEVEL define should
        be set to one of the following values depending on the execution level that is required:</p>
    <table>
        <tr>
            <td>
                <b>Value </b>
            </td>
            <td>
                <b>Description</b>
            </td>
            <td>
                <b>Typical application</b>
            </td>
        </tr>
        <tr>
            <td>
                Admin
            </td>
            <td>
                Administrator privileges are required
            </td>
            <td>
                Access data of all users accounts
            </td>
        </tr>
        <tr>
            <td>
                Power
            </td>
            <td>
                Power User privileges are required<br />
                (Power Users no longer exist in Windows Vista. For Vista this is equivalent to Admin)
            </td>
            <td>
                Installation for all users (writing to &quot;Program Files&quot; or HKLM registry
                keys), driver installation
            </td>
        </tr>
        <tr>
            <td>
                Highest
            </td>
            <td>
                Request the highest possible execution level for the current user
            </td>
            <td>
                Mixed-mode installer that can both be installed per-machine or per-user
            </td>
        </tr>
        <tr>
            <td>
                Standard
            </td>
            <td>
                No special rights required
            </td>
            <td>
                Installation for current user only
            </td>
        </tr>
    </table>
    <p>
        Insert the MULTIUSER_INIT and MULTIUSER_UNINT macros in the .onInit and un.onInit
        function to verify these privileges. If no uninstaller is created in the script,
        set MULTIUSER_NOUNINSTALL.</p>
    <blockquote>
        <pre>!define MULTIUSER_EXECUTIONLEVEL Highest
;!define MULTIUSER_NOUNINSTALL ;Uncomment if no uninstaller is created
!include MultiUser.nsh

...

Function .onInit
  !insertmacro MULTIUSER_INIT
FunctionEnd

Function un.onInit
  !insertmacro MULTIUSER_UNINIT
FunctionEnd</pre>
    </blockquote>
    <p>
        Whether the required privileges can be obtained depends on the user that starts
        the installer:</p>
    <ul>
        <li>Windows NT 4/2000/XP/2003 give the installer the same privileges as the user itself.
            If the privileges of the user are not sufficient (e.g. Admin level is required is
            set but the user has no administrator rights), the macros will display an error
            message and quit the installer. If is however possible to manually run the installer
            with an administrator account.</li>
        <li>Windows Vista restricts the privileges of all applications by default. Depending
            on requested execution level, MultiUser.nsh will set the RequestExecutionLevel flag
            to request privileges. The user will be asked for confirmation and (if necessary)
            for an administrator password.</li>
        <li>Windows 95/98/98 do not set any restrictions on users or applications. Administrator
            rights are always available.</li>
    </ul>
    <p>
        It is recommended to insert these initialization macros before macros that require
        user intervention. For example, it does not make sense to ask a user for an installer
        language if the installer will quit afterwards because the user account does not
        have the required privileges. After the macros are inserted, the variable $MultiUser.Privileges
        will contain the current execution level (Admin, Power, User or Guest).</p>
    <p>
        The following additional settings are available to customize the initialization:</p>
    <table>
        <tr>
            <td>
                <b>Setting<td>
                    <b>Description</b>
                </td>
        </tr>
        <tr>
            <td>
                MULTIUSER_INIT_TEXT_ADMINREQUIRED
            </td>
            <td>
                Error message to be displayed when administrator rights are required but not available.
            </td>
        </tr>
        <tr>
            <td>
                MULTIUSER_INIT_TEXT_POWERREQUIRED
            </td>
            <td>
                Error message to be displayed when Power User rights are required but not available.
            </td>
        </tr>
        <tr>
            <td>
                MULTIUSER_INIT_TEXT_ALLUSERSNOTPOSSIBLE
            </td>
            <td>
                Error message to be displayed when administrator or Power User rights are required
                because of an installation mode setting on the command line (see below) but are
                not available.
            </td>
        </tr>
        <tr>
            <td>
                MULTIUSER_INIT_FUNCTIONQUIT<br />
                MULTIUSER_INIT_UNFUNCTIONQUIT
            </td>
            <td>
                A custom function to be called when the installer is closed due to insufficient
                privileges.
            </td>
        </tr>
    </table>
    <h2>
        <a name="installationmode"></a>Installation Mode</h2>
    <p>
        As mentioned before, applications can both be installed for a single users or for
        all users on a computer. Applications for all users are typically installed in the
        Program Files folder and appear in the Start Menu of every user. On the contrary,
        applications for a single user are usually installed in the local Application Data
        folder and only a appear in the Start Menu of the user who installed the application.</p>
    <p>
        By default, MultiUser.nsh will set the installation mode for a per-machine installation
        if Administrator or Power User rights are available (this is always the case if
        the execution level is set to Admin or Power, if Highest is set it depends on the
        user account). For the Standard execution level the installation will always be
        for a single user. On Windows 95/98/Me installation for a single user is not possible.</p>
    <p>
        The following settings are available to change the default installation mode:
        <table>
            <tr>
                <td>
                    <b>Setting</b>
                </td>
                <td>
                    <b>Description</b>
                </td>
                </td>
            </tr>
            <tr>
                <td>
                    MULTIUSER_INSTALLMODE_DEFAULT_CURRENTUSER
                </td>
                <td>
                    Set default to a per-user installation, even if the rights for a per-machine installation
                    are available.
                </td>
            </tr>
            <tr>
                <td>
                    MULTIUSER_INSTALLMODE_DEFAULT_REGISTRY_KEY MULTIUSER_INSTALLMODE_DEFAULT_REGISTRY_VALUENAME
                </td>
                <td>
                    Non-empty registry key that is created during the installation in either HKCU or
                    HKLM. The default installation mode will automatically be set to the previously
                    selected mode depending on the location of the key.
                </td>
            </tr>
        </table>
        <p>
            After initialization, the variable $MultiUser.InstallMode will contain the current
            installation mode (AllUsers or CurrentUser).
        </p>
        <h3>
            Mixed-Mode Installation</h3>
        <p>
            For the Admin and Power levels, both a per-machine as well as a per-user installation
            is possible. If the Highest level is set and the user is an Administrator or Power
            User, both options are also available.</p>
        <p>
            Usually it's a good thing to give the user to choice between these options. For
            users of the Modern UI version 2, a page is provided that asks the user for the
            installation mode. To use this page, define MULTIUSER_MUI before including User.nsh.
            Then, the MULTIUSER_PAGE_INSTALLMODE macro can be used just like a normal Modern
            UI page (this page will automatically be skipped when running Windows 95/98/Me):</p>
        <pre>!define MULTIUSER_EXECUTIONLEVEL Highest
<b>!define MULTIUSER_MUI</b>
!define MULTIUSER_INSTALLMODE_COMMANDLINE
!include MultiUser.nsh
!include MUI2.nsh

<b>!insertmacro MULTIUSER_PAGE_INSTALLMODE</b>
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES 

!insertmacro MUI_LANGUAGE English

...

Function .onInit
  !insertmacro MULTIUSER_INIT
FunctionEnd

Function un.onInit
  !insertmacro MULTIUSER_UNINIT
FunctionEnd
</pre>
        <p>
            The MULTIUSER_INSTALLMODE_COMMANDLINE setting that also appears in this example
            enables the installation mode to be set using the /AllUsers or /CurrentUser command
            line parameters. This is especially useful for silent setup.</p>
        <p>
            The following settings can be used to customize the texts on the page (in addition
            to the general Modern UI page settings):</p>
        <table>
            <tr>
                <td>
                    <b>Setting</b>
                </td>
                <td>
                    <b>Description</b>
                </td>
            </tr>
            <tr>
                <td>
                    MULTIUSER_INSTALLMODEPAGE_TEXT_TOP
                </td>
                <td>
                    Text to display on the top of the page.
                </td>
            </tr>
            <tr>
                <td>
                    MULTIUSER_INSTALLMODEPAGE_TEXT_ALLUSERS
                </td>
                <td>
                    Text to display on the combo button for a per-machine installation.
                </td>
            </tr>
            <tr>
                <td>
                    MULTIUSER_INSTALLMODEPAGE_TEXT_CURRENTUSER
                </td>
                <td>
                    Text to display on the combo button for a per-user installation.
                </td>
            </tr>
        </table>
        <h3>
            Installation Mode Initalization</h3>
        <p>
            The SetShellVarContext flag (which determines the folders for e.g. shortcuts, like
            $DESKTOP) is automatically set depending on the installation mode. In addition,
            the following settings can be used to perform additional actions when the installation
            mode is initialized:</p>
        <table>
            <tr>
                <td>
                    <b>Setting</b>
                </td>
                <td>
                    <b>Description</b>
                </td>
                </td>
            </tr>
            <tr>
                <td>
                    MULTIUSER_INSTALLMODE_INSTDIR
                </td>
                <td>
                    Name of the folder in which to install the application, without a path. This folder
                    will be located in Program Files for a per-machine installation and in the local
                    Application Data folder for a per-user installation (if supported).
                </td>
            </tr>
            <tr>
                <td>
                    MULTIUSER_INSTALLMODE_INSTDIR_REGISTRY_KEY MULTIUSER_INSTALLMODE_INSTDIR_REGISTRY_VALUENAME
                </td>
                <td>
                    Registry key from which to obtain a previously stored installation folder. It will
                    be retrieved from HKCU for per-user and HKLM for per-machine.
                </td>
            </tr>
            <tr>
                <td>
                    MULTIUSER_INSTALLMODE_FUNCTION<br />
                    MULTIUSER_INSTALLMODE_UNFUNCTION
                </td>
                <td>
                    A custom fuction to be called during the initialization of the installation mode
                    to set additional installer settings that depend on the mode
                </td>
        </table>
        <p>
            To set the installation mode manually, call one of these four functions:</p>
        <table>
            <tr>
                <td>
                    <b>Function name</b>
                </td>
                <td>
                    <b>Installation mode</b>
                </td>
            </tr>
            <tr>
                <td>
                    MultiUser.InstallMode.AllUsers
                </td>
                <td>
                    Installer: Per-machine installation
                </td>
            </tr>
            <tr>
                <td>
                    MultiUser.InstallMode.CurrentUser
                    <td>
                        Installer: Per-user installation
                    </td>
            </tr>
            <tr>
                <td>
                    un.MultiUser.InstallMode.AllUsers<td>
                        Uninstaller: Per-machine installation
                    </td>
            </tr>
            <tr>
                <td>
                    un.MultiUser.InstallMode.CurrentUser<td>
                        Uninstaller: Per-user installation
                    </td>
            </tr>
        </table>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>nsDialogs</title>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<style type="text/css">
b
{
	color: red;
}
code
{
	margin-left: 20px;
	padding: 7px;
	background-color: rgb(240,240,240);
}
</style>
</head>
<body>

<h1>NSIS nsDialogs Plug-in</h1>
<p><i>Next generation of user interface design</i></p>

<h2>Table of Contents</h2>

<ul>
<li><a href="#intro">Introduction</a></li>
<li>
<a href="#step">Step-by-Step Tutorial</a>
<ul>
<li><a href="#step-basic">Basic Script</a></li>
<li><a href="#step-page">Custom Page</a></li>
<li><a href="#step-create">Creating Page</a></li>
<li><a href="#step-show">Showing Page</a></li>
<li><a href="#step-add">Adding Controls</a></li>
<li><a href="#step-state">Control State</a></li>
<li><a href="#step-notify">Real-time Notification</a></li>
<li><a href="#step-memory">Memory</a></li>
</ul>
</li>
<li>
<a href="#ref">Function Reference</a>
<ul>
<li><a href="#ref-create">Create</a></li>
<li><a href="#ref-createcontrol">CreateControl</a></li>
<li><a href="#ref-show">Show</a></li>
<li><a href="#ref-selectfiledialog">SelectFileDialog</a></li>
<li><a href="#ref-selectfolderdialog">SelectFolderDialog</a></li>
<li><a href="#ref-setrtl">SetRTL</a></li>
<li><a href="#ref-getuserdata">GetUserData</a></li>
<li><a href="#ref-setuserdata">SetUserData</a></li>
<li><a href="#ref-onback">OnBack</a></li>
<li><a href="#ref-onchange">OnChange</a></li>
<li><a href="#ref-onclick">OnClick</a></li>
<li><a href="#ref-onnotify">OnNotify</a></li>
<li><a href="#ref-createtimer">CreateTimer</a></li>
<li><a href="#ref-killtimer">KillTimer</a></li>
</ul>
</li>
<li>
<a href="#mref">Macro Reference</a>
<ul>
<li><a href="#mref-create">NSD_Create*</a></li>
<li><a href="#mref-onback">NSD_OnBack</a></li>
<li><a href="#mref-onchange">NSD_OnChange</a></li>
<li><a href="#mref-onclick">NSD_OnClick</a></li>
<li><a href="#mref-onnotify">NSD_OnNotify</a></li>
<li><a href="#mref-createtimer">NSD_CreateTimer</a></li>
<li><a href="#mref-killtimer">NSD_KillTimer</a></li>
<li><a href="#mref-addstyle">NSD_AddStyle</a></li>
<li><a href="#mref-addexstyle">NSD_AddExStyle</a></li>
<li><a href="#mref-gettext">NSD_GetText</a></li>
<li><a href="#mref-settext">NSD_SetText</a></li>
<li><a href="#mref-settextlimit">NSD_SetTextLimit</a></li>
<li><a href="#mref-getstate">NSD_GetState</a></li>
<li><a href="#mref-setstate">NSD_SetState</a></li>
<li><a href="#mref-check">NSD_Check</a></li>
<li><a href="#mref-uncheck">NSD_Uncheck</a></li>
<li><a href="#mref-cbaddstring">NSD_CB_AddString</a></li>
<li><a href="#mref-cbselectstring">NSD_CB_SelectString</a></li>
<li><a href="#mref-lbaddstring">NSD_LB_AddString</a></li>
<li><a href="#mref-lbdelstring">NSD_LB_DelString</a></li>
<li><a href="#mref-lbclear">NSD_LB_Clear</a></li>
<li><a href="#mref-lbgetcount">NSD_LB_GetCount</a></li>
<li><a href="#mref-lbselectstring">NSD_LB_SelectString</a></li>
<li><a href="#mref-lbgetselection">NSD_LB_GetSelection</a></li>
<li><a href="#mref-setfocus">NSD_SetFocus</a></li>
<li><a href="#mref-setimage">NSD_SetImage</a></li>
<li><a href="#mref-setsimage">NSD_SetStretchedImage</a></li>
<li><a href="#mref-seticon">NSD_SetIcon</a></li>
<li><a href="#mref-seticonfrominstaller">NSD_SetIconFromInstaller</a></li>
<li><a href="#mref-clearimage">NSD_ClearImage</a></li>
<li><a href="#mref-clearicon">NSD_ClearIcon</a></li>
<li><a href="#mref-freeimage">NSD_FreeImage</a></li>
<li><a href="#mref-freeicon">NSD_FreeIcon</a></li>
</ul>
</li>
<li><a href="#faq">FAQ</a></li>
</ul>

<h2><a name="intro"></a>Introduction</h2>

<p>nsDialogs allows creation of custom pages in the installer. On top of the built-in pages, nsDialogs can create pages with any type of controls in any order and arrangement. It can create everything from a simple page with one label to form which reacts to user's actions. <a href="../Modern UI 2/Readme.html">Modern UI 2</a>, for example, uses nsDialogs to create the welcome and finish pages.</p>

<p>nsDialogs is a new NSIS plug-in, introduced in version 2.29 as a replacement for <a href="../InstallOptions/Readme.html">InstallOptions</a>. nsDialogs doesn't use INI files, so it's way faster than InstallOptions. Integration with the script is tighter and more natural - creating controls is done using plug-in functions and notification is done by directly calling a function in the script. Unlike InstallOptions, there isn't a predefined set of available control type and by providing a lower level access to Windows API, every type of control can be created and pages can be more customizable.</p>

<p>The same thing that makes nsDialogs more flexible can also make it more complicated for users with no knowledge of Win32 API. This is solved by creating a library of predefined functions, defined in script, that allow creation and handling of controls. This way, novices get easy access to the flexibility, while advanced users still get access to the core functionality by modifying the library or simply avoid using it.</p>

<h2><a name="step"></a>Step-by-Step Tutorial</h2>

<h3><a name="step-basic"></a>Basic Script</h3>

<p>Before using nsDialogs, lets first create a basic script as our skeleton.</p>

<blockquote><pre>Name nsDialogs
OutFile nsDialogs.exe

XPStyle on

Page instfiles

Section

	DetailPrint "hello world"

SectionEnd</pre></blockquote>

<h3><a name="step-page"></a>Custom Page</h3>

<p>Next, we'll add a custom page where we can use nsDialogs. nsDialogs cannot be used in sections or any other function but a custom page's function.</p>

<blockquote><pre>Name nsDialogs
OutFile nsDialogs.exe

XPStyle on

<b>Page custom nsDialogsPage</b>
Page instfiles

<b>Function nsDialogsPage
FunctionEnd</b>

Section

	DetailPrint "hello world"

SectionEnd</pre></blockquote>

<h3><a name="step-create"></a>Creating Page</h3>

<p>Now that the foundations are laid, it's time to use nsDialogs. The first call must always be to nsDialogs::Create. It will create a new dialog in the page and return its <i>HWND</i> on the stack. The result must be popped from the stack to prevent stack corruption. If the result is <i>error</i>, the dialog couldn't be created.</p>

<p>nsDialogs::Create accepts one parameter. It has a very specific function, but to keep things simple for this tutorial, it must always be 1018.</p>

<p><i>HWND</i> is a number that uniquely identifies the dialog and can be used with SendMessage, SetCtlColors and Win32 API.</p>

<blockquote><pre><b>!include LogicLib.nsh</b>

Name nsDialogs
OutFile nsDialogs.exe

XPStyle on

<b>Var Dialog</b>

Page custom nsDialogsPage
Page instfiles

Function nsDialogsPage
<b>
	nsDialogs::Create 1018
	Pop $Dialog

	${If} $Dialog == error
		Abort
	${EndIf}
</b>
FunctionEnd

Section

	DetailPrint "hello world"

SectionEnd</pre></blockquote>

<h3><a name="step-show"></a>Showing Page</h3>

<p>Now that the page is created, it's time to show it. This is done with nsDialogs::Show. This function will not return until the user clicks Next, Back or Cancel.</p>

<blockquote><pre>!include LogicLib.nsh

Name nsDialogs
OutFile nsDialogs.exe

XPStyle on

Var Dialog

Page custom nsDialogsPage
Page instfiles

Function nsDialogsPage
	nsDialogs::Create 1018
	Pop $Dialog

	${If} $Dialog == error
		Abort
	${EndIf}
<b>
	nsDialogs::Show
</b>
FunctionEnd

Section

	DetailPrint "hello world"

SectionEnd</pre></blockquote>

<h3><a name="step-add"></a>Adding Controls</h3>

<p>Compiling the last script and running it results in an empty page which is not very useful. So now we'll add some controls to it to. To do so, we'll use <a href="#mref-create">${NSD_Create*}</a> macros from nsDialogs.nsh. Each of those macros takes 5 parameters - x, y, width, height and text. Each macro also returns one value on the stack, which is the new control's HWND. Like the dialogs HWND, it must be popped from the stack and saved.</p>

<p>Each of the measurements that the macros take can use one of three unit types - pixels, dialog units or percentage of the dialog's size. It can also be negative to indicate it should be measured from the end. To use dialog units, the measurement must be suffixed with the letter <i>u</i>. To use percentage, the measurement must be suffixed with the percentage sign - <i>%</i>. Any other suffix, or no suffix, means pixels.</p>

<p>Dialog units allow creation of dialogs that scale well when different fonts or DPI is used. Its size in pixels is determined on runtime based on the font and the DPI. For example, standard pages in the classic NSIS user interface are 266 dialog units wide and 130 dialog units high. Pages in Modern UI are 300 dialogs units wide and 140 dialog units high. In different resolutions, using different fonts or DPI settings, the dialogs will always have the same size in dialog units, but different size in pixels.</p>

<blockquote><pre><b>!include nsDialogs.nsh</b>
!include LogicLib.nsh

Name nsDialogs
OutFile nsDialogs.exe

XPStyle on

Var Dialog
<b>Var Label
Var Text</b>

Page custom nsDialogsPage
Page instfiles

Function nsDialogsPage

	nsDialogs::Create 1018
	Pop $Dialog

	${If} $Dialog == error
		Abort
	${EndIf}
<b>
	${NSD_CreateLabel} 0 0 100% 12u "Hello, welcome to nsDialogs!"
	Pop $Label

	${NSD_CreateText} 0 13u 100% -13u "Type something here..."
	Pop $Text
</b>
	nsDialogs::Show

FunctionEnd

Section

	DetailPrint "hello world"

SectionEnd</pre></blockquote>

<p>Available control types that can be created with <a href="#mref-create">${NSD_Create*}</a> are:</p>

<ul>
<li>HLine</li>
<li>VLine</li>
<li>Label</li>
<li>Icon</li>
<li>Bitmap</li>
<li>BrowseButton</li>
<li>Link</li>
<li>Button</li>
<li>GroupBox</li>
<li>CheckBox</li>
<li>RadioButton</li>
<li>Text</li>
<li>Password</li>
<li>Number</li>
<li>FileRequest</li>
<li>DirRequest</li>
<li>ComboBox</li>
<li>DropList</li>
<li>ListBox</li>
<li>ProgressBar</li>
</ul>

<h3><a name="step-state"></a>Control State</h3>

<p>Now that we have some controls that the user can interact with, it's time to see what the user actually does with them. For that, we'll first add a <i>leave callback</i> function to our page. In that function, we'll query the state of the text control we've created and display it to the user. To do so, we'll use the <a href="#mref-gettext">${NSD_GetText}</a> macro. Use the <a href="#mref-getstate">${NSD_GetState}</a> macro for RadioButton and CheckBox controls.</p>

<p>Note that not all controls support <a href="#mref-gettext">${NSD_GetText}</a> and some require special handling with specific messages defined in WinMessages.nsh. For example, the ListBox control requires usage of <i>LB_GETCURSEL</i> and <i>LB_GETTEXT</i>. With time, the library of macros in nsDialogs.nsh will fill with more and more macros that'll handle more cases like this.</p>

<blockquote><pre>!include nsDialogs.nsh
!include LogicLib.nsh

Name nsDialogs
OutFile nsDialogs.exe

XPStyle on

Var Dialog
Var Label
Var Text

Page custom nsDialogsPage <b>nsDialogsPageLeave</b>
Page instfiles

Function nsDialogsPage

	nsDialogs::Create 1018
	Pop $Dialog

	${If} $Dialog == error
		Abort
	${EndIf}

	${NSD_CreateLabel} 0 0 100% 12u "Hello, welcome to nsDialogs!"
	Pop $Label

	${NSD_CreateText} 0 13u 100% -13u "Type something here..."
	Pop $Text

	nsDialogs::Show

FunctionEnd

<b>Function nsDialogsPageLeave

	${NSD_GetText} $Text $0
	MessageBox MB_OK "You typed:$\n$\n$0"

FunctionEnd</b>

Section

	DetailPrint "hello world"

SectionEnd</pre></blockquote>

<h3><a name="step-notify"></a>Real-time Notification</h3>

<p>One of the more exciting new features of nsDialogs is callback function notification of changes to the dialog. nsDialogs can call a function defined in a script in response to a user action such as changing of a text field or click of a button. To make nsDialogs notify us of events, we'll use <a href="#mref-onclick">${NSD_OnClick}</a> and <a href="#mref-onchange">${NSD_OnChange}</a>. Not every control supports both of the events. For example, there is nothing to notify about label changes, only clicks.</p>

<p>When the callback function is called, the control's HWND will be waiting on the stack and must be popped to prevent stack corruption. In this simple example, this is not so useful. But in case of a bigger script where several controls are associated with the same callback function, the HWND can shed some light on which control originated the event.</p>

<p>The new example will respond to the user type <i>hello</i> in the text box.</p>

<blockquote><pre>!include nsDialogs.nsh
!include LogicLib.nsh

Name nsDialogs
OutFile nsDialogs.exe

XPStyle on

Var Dialog
Var Label
Var Text

Page custom nsDialogsPage nsDialogsPageLeave
Page instfiles

Function nsDialogsPage

	nsDialogs::Create 1018
	Pop $Dialog

	${If} $Dialog == error
		Abort
	${EndIf}

	${NSD_CreateLabel} 0 0 100% 12u "Hello, welcome to nsDialogs!"
	Pop $Label

	${NSD_CreateText} 0 13u 100% -13u "Type something here..."
	Pop $Text
	<b>${NSD_OnChange} $Text nsDialogsPageTextChange</b>

	nsDialogs::Show

FunctionEnd

Function nsDialogsPageLeave

	${NSD_GetText} $Text $0
	MessageBox MB_OK "You typed:$\n$\n$0"

FunctionEnd

<b>Function nsDialogsPageTextChange

	Pop $1 # $1 == $ Text

	${NSD_GetText} $Text $0

	${If} $0 == "hello"

		MessageBox MB_OK "right back at ya!"

	${EndIf}

FunctionEnd</b>

Section

	DetailPrint "hello world"

SectionEnd</pre></blockquote>

<h3><a name="step-memory"></a>Memory</h3>

<p>So far we have a page that has some basic input controls. But what happens when the user goes to the next page and comes back? With the current code, the user's input will not be remembered. To remember, we'll use the already present leave callback function to store the user's choice in variables and pass these values when creating the controls the next time. For a better example, we'll also add a checkbox to the page and use <a href="#mref-getstate">${NSD_GetState}</a> and <a href="#mref-setstate">${NSD_SetState}</a> to get and set its state.</p>

<p>For clarity, we'll remove some of the notifications from the previous step.</p>

<blockquote><pre>!include nsDialogs.nsh
!include LogicLib.nsh

Name nsDialogs
OutFile nsDialogs.exe

XPStyle on

Var Dialog
Var Label
Var Text
<b>Var Text_State
Var Checkbox
Var Checkbox_State</b>

Page custom nsDialogsPage nsDialogsPageLeave
<b>Page license</b>
Page instfiles

<b>Function .onInit

	StrCpy $Text_State "Type something here..."

FunctionEnd</b>

Function nsDialogsPage

	nsDialogs::Create 1018
	Pop $Dialog

	${If} $Dialog == error
		Abort
	${EndIf}

	${NSD_CreateLabel} 0 0 100% 12u "Hello, welcome to nsDialogs!"
	Pop $Label

	${NSD_CreateText} 0 13u 100% <b>12u $Text_State</b>
	Pop $Text

	<b>${NSD_CreateCheckbox} 0 30u 100% 10u "&amp;Something"
	Pop $Checkbox

	${If} $Checkbox_State == ${BST_CHECKED}
		${NSD_Check} $Checkbox
	${EndIf}

	# alternative for the above ${If}:
	#${NSD_SetState} $Checkbox_State</b>

	nsDialogs::Show

FunctionEnd

Function nsDialogsPageLeave

	${NSD_GetText} $Text <b>$Text_State</b>
	<b>${NSD_GetState} $Checkbox $Checkbox_State</b>

FunctionEnd

Section

	DetailPrint "hello world"

SectionEnd</pre></blockquote>

<h2><a name="ref"></a>Function Reference</h2>

<h3><a name="ref-create"></a>Create</h3>

<p><code>nsDialogs::Create <i>rect</i></code></p>

<p>Creates a new dialog. <i>rect</i> specific the identifier of the control whose location will be mimiced. This should usually be 1018, which is control mimiced for creation of built-in pages. The Modern UI also has control 1040 for the welcome and the finish page.</p>

<p>Returns the new dialog's HWND on the stack or <i>error</i>.</p>

<h3><a name="ref-createcontrol"></a>CreateControl</h3>

<p><code>nsDialogs::CreateControl <i>class</i> <i>style</i> <i>extended_style</i> <i>x</i> <i>y</i> <i>width</i> <i>height</i> <i>text</i></code></p>

<p>Create a new control in the current dialog. A dialog must exist for this to work, so nsDialogs::Create must be called prior to this function.</p>

<p>Returns the new dialog's HWND on the stack or <i>error</i>.</p>

<h3><a name="ref-show"></a>Show</h3>

<p><code>nsDialogs::Show</code></p>

<p>Displays the page. Call this once finished with nsDialogs::Create, nsDialogs::CreateControl and the rest.</p>

<p>Returns nothing.</p>

<h3><a name="ref-selectfiledialog"></a>SelectFileDialog</h3>

<p><code>nsDialogs::SelectFileDialog <i>mode</i> <i>initial_selection</i> <i>filter</i></code></p>

<p>Displays a file selection dialog to the user. If <i>mode</i> is set to <i>save</i>, displays a file save dialog. If <i>mode</i> is set to <i>open</i>, displays a file open dialog. <i>filter</i> is a list of available file filters separated by pipes. If an empty string is passed, the default is used - <i>All Files|*.*</i>.</p>

<p><i>initial_selection</i> can be used to provide the user with a default file to look for and/or a default folder to look in. If <i>initial_selection</i> is empty no default filename will be provided for the user and the dialog will start in the current working directory. If <i>initial_selection</i> specifies just a filename, for example "test.exe", the dialog will be set up to look for a file called test.exe in the current working directory. If <i>initial_selection</i> specifies just a directory, for example "C:\Program Files", the dialog starts in the provided directory with no file name provided. If <i>initial_selection</i> specifies a directory and a filename, for example "C:\Windows\System32\calc.exe", the dialog will be set up to look for a file called calc.exe in the directory C:\Windows\System32.</p>

<p>Returns the selected file on the stack or an empty string if the user canceled the operation.</p>

<h3><a name="ref-selectfolderdialog"></a>SelectFolderDialog</h3>

<p><code>nsDialogs::SelectFolderDialog <i>title</i> <i>initial_selection</i></code></p>

<p>Displays a directory selection dialog to the user.</p>

<p>Returns the selected directory on the stack or "error" in case the user canceled the operation or an error occured.</p>

<h3><a name="ref-setrtl"></a>SetRTL</h3>

<p><code>nsDialogs::SetRTL <i>rtl_setting</i></code></p>

<p>Sets right-to-left mode on or off. If <i>rtl_setting</i> is 0, it's set to off. If <i>rtl_setting</i> is 1, it's set to on. This function must be called before any calls to nsDialogs::CreateControl.</p>

<p>Returns nothing.</p>

<h3><a name="ref-getuserdata"></a>GetUserData</h3>

<p><code>nsDialogs::GetUserData <i>control_HWND</i></code></p>

<p>Returns user data associated with the control on the stack.  Use nsDialogs::SetUserData to set this data.</p>

<h3><a name="ref-setuserdata"></a>SetUserData</h3>

<p><code>nsDialogs::SetUserData <i>control_HWND</i> <i>data</i></code></p>

<p>Associates <i>data</i> with the control. Use nsDialogs::GetUserData to get this data.</p>

<p>Returns nothing.</p>

<h3><a name="ref-onback"></a>OnBack</h3>

<p><code>nsDialogs::OnBack <i>function_address</i></code></p>

<p>Sets the callback function for the Back button. This function will be called when the user clicks the back button. Call Abort in this function to prevent the user from going back to the last page.</p>

<p>Use GetFunctionAddress to get the address of the desired callback function.</p>

<p>Returns nothing.</p>

<h3><a name="ref-onchange"></a>OnChange</h3>

<p><code>nsDialogs::OnChange <i>control_HWND</i> <i>function_address</i></code></p>

<p>Sets a change notification callback function for the given control. Whenever the control changes, the function will be called and the control's HWND will be waiting on its stack.</p>

<p>Use GetFunctionAddress to get the address of the desired callback function.</p>

<p>Returns nothing.</p>

<h3><a name="ref-onclick"></a>OnClick</h3>

<p><code>nsDialogs::OnClick <i>control_HWND</i> <i>function_address</i></code></p>

<p>Sets a click notification callback function for the given control. Whenever the control is clicked, the function will be called and the control's HWND will be waiting on its stack.</p>

<p>Use GetFunctionAddress to get the address of the desired callback function.</p>

<p>Returns nothing.</p>

<h3><a name="ref-onnotify"></a>OnNotify</h3>

<p><code>nsDialogs::OnNotify <i>control_HWND</i> <i>function_address</i></code></p>

<p>Sets a notification callback function for the given control. Whenever the control receives the WM_NOTIFY message, the function will be called and the control's HWND, notification code and a pointer to the MNHDR structure will be waiting on its stack.</p>

<p>Use GetFunctionAddress to get the address of the desired callback function.</p>

<p>Returns nothing.</p>

<h3><a name="ref-createtimer"></a>CreateTimer</h3>

<p><code>nsDialogs::CreateTimer <i>function_address</i> <i>timer_interval</i></code></p>

<p>Sets a timer that'd call the callback function for the given control every in a constant interval. Interval times are specified in milliseconds.</p>

<p>Use GetFunctionAddress to get the address of the desired callback function.</p>

<p>Returns nothing.</p>

<h3><a name="ref-killtimer"></a>KillTimer</h3>

<p><code>nsDialogs::KillTimer <i>function_address</i></code></p>

<p>Kills a previously set timer.</p>

<p>Use GetFunctionAddress to get the address of the desired callback function.</p>

<p>Returns nothing.</p>

<h2><a name="mref"></a>Macro Reference</h2>

<p>nsDialogs.nsh contains a lot of macros that can make nsDialogs usage a lot easier. Below is a description of each of those macros including purpose, syntax, input and output.</p>

<h3><a name="mref-create"></a>NSD_Create*</h3>

<p><code>${NSD_Create*} <i>x</i> <i>y</i> <i>width</i> <i>height</i> <i>text</i></code></p>

<p>Create a new control in the current dialog. A dialog must exist for this to work, so nsDialogs::Create must be called prior to this function.</p>

<p>Available variants:</p>

<ul>
<li>${NSD_CreateHLine}</li>
<li>${NSD_CreateVLine}</li>
<li>${NSD_CreateLabel}</li>
<li>${NSD_CreateIcon}</li>
<li>${NSD_CreateBitmap}</li>
<li>${NSD_CreateBrowseButton}</li>
<li>${NSD_CreateLink}</li>
<li>${NSD_CreateButton}</li>
<li>${NSD_CreateGroupBox}</li>
<li>${NSD_CreateCheckBox}</li>
<li>${NSD_CreateRadioButton}</li>
<li>${NSD_CreateText}</li>
<li>${NSD_CreatePassword}</li>
<li>${NSD_CreateNumber}</li>
<li>${NSD_CreateFileRequest}</li>
<li>${NSD_CreateDirRequest}</li>
<li>${NSD_CreateComboBox}</li>
<li>${NSD_CreateDropList}</li>
<li>${NSD_CreateListBox}</li>
<li>${NSD_CreateProgressBar}</li>
</ul>

<p>Returns the new dialog's HWND on the stack or error.</p>

<h3><a name="mref-onback"></a>NSD_OnBack</h3>

<p><code>${NSD_OnBack} <i>function_address</i></code></p>

<p>See <a href="#ref-onback">OnBack</a> for more details.</p>

<p></p>

<h3><a name="mref-onchange"></a>NSD_OnChange</h3>

<p><code>${NSD_OnChange} <i>control_HWND</i> <i>function_address</i></code></p>

<p>See <a href="#ref-onchange">OnChange</a> for more details.</p>

<p>See <a href="#step-notify">Real-time Notification</a> for usage example.</p>

<h3><a name="mref-onclick"></a>NSD_OnClick</h3>

<p><code>${NSD_OnClick} <i>control_HWND</i> <i>function_address</i></code></p>

<p>See <a href="#ref-onclick">OnClick</a> for more details.</p>

<h3><a name="mref-onnotify"></a>NSD_OnNotify</h3>

<p><code>${NSD_OnNotify} <i>control_HWND</i> <i>function_address</i></code></p>

<p>See <a href="#ref-onnotify">OnNotify</a> for more details.</p>

<h3><a name="mref-createtimer"></a>NSD_CreateTimer</h3>

<p><code>${NSD_CreateTimer} <i>function_address</i> <i>timer_interval</i></code></p>

<p>See <a href="#ref-createtimer">CreateTimer</a> for more details.</p>

<h3><a name="mref-killtimer"></a>NSD_KillTimer</h3>

<p><code>${NSD_KillTimer} <i>function_address</i></code></p>

<p>See <a href="#ref-killtimer">KillTimer</a> for more details.</p>

<h3><a name="mref-addstyle"></a>NSD_AddStyle</h3>

<p><code>${NSD_AddStyle} <i>control_HWND</i> <i>style</i></code></p>

<p>Adds one or more window style to a control. Multiple styles should be separated with pipes `|'.</p>

<p>See MSDN for style description.</p>

<h3><a name="mref-addexstyle"></a>NSD_AddExStyle</h3>

<p><code>${NSD_AddExStyle} <i>control_HWND</i> <i>style</i></code></p>

<p>Adds one or more extended window style to a control. Multiple styles should be separated with pipes `|'.</p>

<p>See MSDN for style description.</p>

<h3><a name="mref-gettext"></a>NSD_GetText</h3>

<p><code>${NSD_GetText} <i>control_HWND</i> <i>output_variable</i></code></p>

<p>Retrieves the text of a control and stores it into <i>output_variable</i>. Especially useful for textual controls.</p>

<p>See <a href="#step-state">Control State</a> for usage example.</p>

<h3><a name="mref-settext"></a>NSD_SetText</h3>

<p><code>${NSD_SetText} <i>control_HWND</i> <i>text</i></code></p>

<p>Sets the text of a control.</p>

<h3><a name="mref-settextlimit"></a>NSD_SetTextLimit</h3>

<p><code>${NSD_SetTextLimit} <i>control_HWND</i> <i>limit</i></code></p>

<p>Sets input size limit for a text control.</p>

<h3><a name="mref-getstate"></a>NSD_GetState</h3>

<p><code>${NSD_GetState} <i>control_HWND</i> <i>output_variable</i></code></p>

<p>Retrieves the state of a check box or a radio button control. Possible outputs are ${BST_CHECKED} and ${BST_UNCHECKED}.</p>

<p>See <a href="#step-memory">Memory</a> for usage example.</p>

<h3><a name="mref-setstate"></a>NSD_SetState</h3>

<p><code>${NSD_SetState} <i>control_HWND</i> <i>state</i></code></p>

<p>Sets the state of a check box or a radio button control. Possible values for <i>state</i> are ${BST_CHECKED} and ${BST_UNCHECKED}.</p>

<p>See <a href="#step-memory">Memory</a> for usage example.</p>

<h3><a name="mref-check"></a>NSD_Check</h3>

<p><code>${NSD_Check} <i>control_HWND</i></code></p>

<p>Checks a check box or a radio button control. Same as calling ${NSD_SetState} with ${BST_CHECKED}.</p>

<h3><a name="mref-uncheck"></a>NSD_Uncheck</h3>

<p><code>${NSD_Uncheck} <i>control_HWND</i></code></p>

<p>Unchecks a check box or a radio button control. Same as calling ${NSD_SetState} with ${BST_UNCHECKED}.</p>

<p>See <a href="#step-memory">Memory</a> for usage example.</p>

<h3><a name="mref-cbaddstring"></a>NSD_CB_AddString</h3>

<p><code>${NSD_CB_AddString} <i>combo_HWND</i> <i>string</i></code></p>

<p>Adds a string to a combo box.</p>

<h3><a name="mref-cbselectstring"></a>NSD_CB_SelectString</h3>

<p><code>${NSD_CB_SelectString} <i>combo_HWND</i> <i>string</i></code></p>

<p>Selects a string in a combo box.</p>

<h3><a name="mref-lbaddstring"></a>NSD_LB_AddString</h3>

<p><code>${NSD_LB_AddString} <i>listbox_HWND</i> <i>string</i></code></p>

<p>Adds a string to a list box.</p>

<h3><a name="mref-lbdelstring"></a>NSD_LB_DelString</h3>

<p><code>${NSD_LB_DelString} <i>listbox_HWND</i> <i>string</i></code></p>

<p>Deletes a string from a list box.</p>

<h3><a name="mref-lbcleqar">NSD_LB_Clear</a></h3>

<p><code>${NSD_LB_Clear} <i>listbox_HWND</i></code></p>

<p>Deletes all strings from a list box.</p>

<h3><a name="mref-lbgetcount">NSD_LB_GetCount</a></h3>

<p><code>${NSD_LB_GetCount} <i>listbox_HWND</i> <i>output_variable</i></code></p>

<p>Retrieves the number of strings from a list box.</p>

<h3><a name="mref-lbselectstring"></a>NSD_LB_SelectString</h3>

<p><code>${NSD_LB_SelectString} <i>listbox_HWND</i> <i>string</i></code></p>

<p>Selects a string in a list box.</p>

<h3><a name="mref-lbgetselection">NSD_LB_GetSelection</a></h3>

<p><code>${NSD_LB_GetSelection} <i>listbox_HWND</i> <i>output_variable</i></code></p>

<p>Retrieves the selected stringed from a list box. Returns an empty string if no string is selected.</p>

<h3><a name="mref-setfocus"></a>NSD_SetFocus</h3>

<p><code>${NSD_SetFocus} <i>control_HWND</i></code></p>

<p>Sets focus to a control.</p>

<h3><a name="mref-setimage"></a>NSD_SetImage</h3>

<p><code>${NSD_SetImage} <i>control_HWND</i> <i>image_path</i> <i>output_variable</i></code></p>

<p>Loads a bitmap from <i>image_path</i> and displays it on <i>control_HWND</i> created by <a href="#mref-create">${NSD_CreateBitmap}</a>. The image handle is stored in <i>output_variable</i> and should be freed using <a href="#mref-freeimage">${NSD_FreeImage}</a> once no longer necessary.</p>

<p>The image must be extracted to the user's computer prior to calling this macro. A good place to extract images is $PLUGINSDIR.</p>

<blockquote><pre>!include nsDialogs.nsh

Name nsDialogs
OutFile nsDialogs.exe

XPStyle on

Page custom nsDialogsImage
Page instfiles

Var Dialog
Var Image
Var ImageHandle

Function .onInit

	InitPluginsDir
	File /oname=$PLUGINSDIR\image.bmp "${NSISDIR}\Contrib\Graphics\Header\nsis-r.bmp"

FunctionEnd

Function nsDialogsImage

	nsDialogs::Create 1018
	Pop $Dialog

	${If} $Dialog == error
		Abort
	${EndIf}

	${NSD_CreateBitmap} 0 0 100% 100% ""
	Pop $Image
	${NSD_SetImage} $Image $PLUGINSDIR\image.bmp $ImageHandle

	nsDialogs::Show

	${NSD_FreeImage} $ImageHandle

FunctionEnd

Section
SectionEnd</pre></blockquote>

<h3><a name="mref-setsimage"></a>NSD_SetStretchedImage</h3>

<p><code>${NSD_SetStretchedImage} <i>control_HWND</i> <i>image_path</i> <i>output_variable</i></code></p>

<p>Loads and displays a bitmap just like <a href="#mref-setimage">${NSD_SetImage}</a>, but stretched the image to fit the control.</p>

<h3><a name="mref-seticon"></a>NSD_SetIcon</h3>

<p><code>${NSD_SetIcon} <i>control_HWND</i> <i>image_path</i> <i>output_variable</i></code></p>

<p>Same as <a href="#mref-setimage">${NSD_SetImage}</a>, but used for loading and setting an icon in a control created by <a href="#mref-create">${NSD_CreateIcon}</a>. The image handle is stored in <i>output_variable</i> and should be freed using <a href="#mref-freeicon">${NSD_FreeIcon}</a> once no longer necessary.</p>

<h3><a name="mref-seticonfrominstaller"></a>NSD_SetIconFromInstaller</h3>

<p><code>${NSD_SetIconFromInstaller} <i>control_HWND</i> <i>output_variable</i></code></p>

<p>Loads the icon used in the isntaller and displays it on <i>control_HWND</i> created by <a href="#mref-create">${NSD_CreateIcon}</a>. The image handle is stored in <i>output_variable</i> and should be freed using <a href="#mref-freeicon">${NSD_FreeIcon}</a> once no longer necessary.</p>

<h3><a name="mref-clearimage"></a>NSD_ClearImage</h3>

<p><code>${NSD_ClearImage} <i>control_HWND</i></code></p>

<p>Clears an image from a control.</p>

<h3><a name="mref-clearicon"></a>NSD_ClearIcon</h3>

<p><code>${NSD_ClearIcon} <i>control_HWND</i></code></p>

<p>Clears an icon from a control.</p>

<h3><a name="mref-freeimage"></a>NSD_FreeImage</h3>

<p><code>${NSD_FreeImage} <i>image_handle</i></code></p>

<p>Frees an image handle previously loaded with <a href="#mref-setimage">${NSD_SetImage}</a> or <a href="#mref-setsimage">${NSD_SetStretchedImage}</a>.</p>

<h3><a name="mref-freeicon"></a>NSD_FreeIcon</h3>

<p><code>${NSD_FreeIcon} <i>icon_handle</i></code></p>

<p>Frees an icon handle previously loaded with <a href="#mref-seticon">${NSD_SetIcon}</a> or <a href="#mref-seticonfrominstaller">${NSD_SetIconFromInstaller}</a>.</p>


<h2><a name="faq"></a>FAQ</h2>

<div>

<ul>

<li>
<b>Q:</b> Can nsDialogs handle InstallOptions INI files?
<blockquote>
<p><b>A:</b> nsDialogs.nsh contains a function called <i>CreateDialogFromINI</i> that can create nsDialogs' dialog from an INI file. It can handle every type of control InstallOptions supports, but doesn't handle the flags or notification yet. <i>Examples\nsDialogs\InstallOptions.nsi</i> shows a usage example of this function.</p><p>In the future there'll also be a function that creates the script itself.
</blockquote>
</li>

</ul>

</div>

</body>
</html>

NSISdl 1.3 - HTTP downloading plugin for NSIS
---------------------------------------------

Copyright (C) 2001-2002 Yaroslav Faybishenko & Justin Frankel

This plugin can be used from NSIS to download files via http.

To connect to the internet, use the Dialer plugin.

USAGE
-----

NSISdl::download http://www.domain.com/file localfile.exe

You can also pass /TIMEOUT to set the timeout in milliseconds:

NSISdl::download /TIMEOUT=30000 http://www.domain.com/file localfile.exe

The return value is pushed to the stack:

  "cancel" if cancelled
  "success" if success
  otherwise, an error string describing the error

If you don't want the progress window to appear, use NSISdl::download_quiet.

Example of usage:

NSISdl::download http://www.domain.com/file localfile.exe
Pop $R0 ;Get the return value
  StrCmp $R0 "success" +3
    MessageBox MB_OK "Download failed: $R0"
    Quit

For another example, see waplugin.nsi in the examples directory.

PROXIES
-------

NSISdl supports only basic configurations of proxies. It doesn't support
proxies which require authentication, automatic configuration script, etc.
NSISdl reads the proxy configuration from Internet Explorer's registry key
under HKLM\Software\Microsoft\Windows\CurrentVersion\Internet Settings. It
reads and parses ProxyEnable and ProxyServer.

If you don't want NSISdl to use Internet Explorer's settings, use the
/NOIEPROXY flag. /NOIEPROXY should be used after /TRANSLATE and
/TIMEOUT. For example:

If you want to specify a proxy on your own, use the /PROXY flag.

NSISdl::download /NOIEPROXY http://www.domain.com/file localfile.exe
NSISdl::download /TIMEOUT=30000 /NOIEPROXY http://www.domain.com/file localfile.exe
NSISdl::download /PROXY proxy.whatever.com http://www.domain.com/file localfile.exe
NSISdl::download /PROXY proxy.whatever.com:8080 http://www.domain.com/file localfile.exe

TRANSLATE
---------

To translate NSISdl add the following values to the call line:

/TRANSLATE2 downloading connecting second minute hour seconds minutes hours progress

Default values are:
 
  downloading - "Downloading %s"
  connecting - "Connecting ..."
  second - " (1 second remaining)"
  minute - " (1 minute remaining)"
  hour - " (1 hour remaining)"
  seconds - " (%u seconds remaining)"
  minutes - " (%u minutes remaining)"
  hours - " (%u hours remaining)"
  progress - "%skB (%d%%) of %skB @ %u.%01ukB/s"

The old /TRANSLATE method still works for backward compatibility.

/TRANSLATE downloading connecting second minute hour plural progress remianing

Default values are:

  downloading - "Downloading %s"
  connecting - "Connecting ..."
  second - "second"
  minute - "minute"
  hour - "hour"
  plural - "s"
  progress - "%dkB (%d%%) of %ukB @ %d.%01dkB/s"
  remaining -  " (%d %s%s remaining)"

/TRANSLATE and /TRANSLATE2 must come before /TIMEOUT.

StartMenu.dll shows a custom page that lets the user select a start menu program 
folder to put shortcuts in.

To show the dialog use the Select function. This function has one required parameter 
which is the program group default name, and some more optional switches:
  /autoadd - automatically adds the program name to the selected folder
  /noicon - doesn't show the icon in the top left corner
  /text [please select...] - sets the top text to something else than
                             "Select the Start Menu folder in which..."
  /lastused [folder] - sets the edit box to a specific value folder.
                       Use this to make this plug-in remember the last
                       folder selected by the user
  /checknoshortcuts text - Shows a check box with the text "text". If
                           the user checks this box, the return value
                           will have > as its first character and you
                           should not create the program group.
  /rtl - sets the direction of every control on the selection dialog
         to RTL. This means every text shown on the page will be
	 justified to the right.

The order of the switches doesn't matter but the required parameter must come after
all of them. Every switch after the required parameter will be ignored and left
on the stack.

The function pushes "success", "cancel" or an error to the stack. If there was no
error and the user didn't press on cancel it will push the selected folder name
after "success". If the user checked the no shortcuts checkbox the result will be
prefixed with '>'. The function does not push the full path but only the selected
sub-folder. It's up to you to decide if to put it in the current user or all
users start menu.

To set properties of the controls on the page, such as colors and fonts use Init
and Show instead of Select. Init will push the HWND of the page on the stack,
or an error string. For example:

StartMenu::Init "Test"
Pop $0
IntCmp $0 0 failed
GetDlgItem $0 $0 1003
SetCtlColors $0 "" FF0000
StartMenu::Show
# continue as with Select here
failed:

Look at Example.nsi for a full example (without Init and Select).

Created by Amir Szekely (aka KiCHiK)
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>VPatch 3</title>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<style type="text/css">
/*<![CDATA[*/

body
        {
        padding: 10px;
        background-color: #F0F0F0;
        font-family: Verdana, Arial, Helvetica, sans-serif;
        font-size: 13px;
        font-weight: normal;
        text-align: left;
        }

p, li
        {
        font-size: 13px;
        }

.center
        {
        text-align: center;
        }

table
        {
        margin: auto;
        font-size: 13px;
        background-color: #FFFFFF;
        }

.maintable
        {
        border: 2px solid #376EAB;
        }

.parameter
        {
        font-weight: bold;
        color: #6586AC;
        }


h1
        {
        font-size: 30px;
        color: #333333;
        font-weight: normal;
        text-align: center;
        margin-top: 20px;
        }

h2
        {
        font-size: 20px;
        color: #7A7272;
        font-weight: normal;
        }

h3
        {
        font-size: 17px;
        font-weight: bold;
        color: #303030;
        }

pre     {
        font-size: 13px;
        }

div
        {
        margin: 20px;
        }

a:link, a:visited, a:active
        {
        color: #294F75;
        text-decoration: none;
        }

a:hover
        {
        color: #182634;
        text-decoration: underline;
        }

/*]]>*/
</style>
</head>
<body>
<table width="750" class="maintable" cellspacing="0" cellpadding="0" align="center">
    <tr>
      <td>

      <h1>VPatch 3.1</h1>
        <div>
          <h2>Introduction</h2>
          <div>
          <p>VPatch allows to create a patch file to update previous versions
            of your software. The GenPat utility generates the patch file. The
            plug-in can use the patch to update a file. Using a patch, you can
            reduce the download size of your updates, because only the differences
            between the files are included in the patch file.</p>
          </div>
          <h2>How to use</h2>
          <div>
          <h3>Generate the patch file</h3>
          <div>
          <p>Make sure you have the source file (original version) and the target
            file (version to update to). For example, DATA.DTA (currently on user
            system) and DATA_20.DTA (version 2.0 of this data file). Now call
            the command line tool GenPat.exe:</p>
          <pre>
GENPAT oldfile.txt newfile.txt patch.pat
</pre>
          <p>Now, the patch will be generated, this will take some time.</p>
            <p>Using the /B=(BlockSize) parameter of the GenPat utility (put it
              after the filenames), you can use a different block size. A smaller
              block size may result in a smaller patch, but the generation will
              take more time (the default blocksize is 64).</p>
            <p>If you have trouble using this command-line utility, you can download
              a GUI (graphical user interface) for VPatch from its own website:
              <a href="http://www.tibed.net/vpatch">http://www.tibed.net/vpatch</a>.</p>
          </div>
          <h3>Update the file during installation</h3>
          <div>
          <p>Use the VPatch plug-in to update a file using a patch file:</p>
          <pre>
vpatch::vpatchfile "patch.pat" "oldfile.txt" "temporary_newfile.txt"
</pre>
          <p>The result of the patch operating will be added to the stack and
            can be one of the following texts:</p>
          <ul>
            <li>OK</li>
            <li>OK, new version already installed</li>
            <li>An error occurred while patching</li>
            <li>Patch data is invalid or corrupt</li>
            <li>No suitable patches were found</li>
          </ul>
            <p>Check <a href="../../Examples/VPatch/example.nsi">example.nsi</a> for an example. You
              should check whether the stack string starts with &quot;OK&quot;
              because then the patch has succeeded and you can rename &quot;temporary_newfile.txt&quot;
              to &quot;oldfile.txt&quot; to replace the original, if you want.</p>
          </div>
          <h3>Multiple patches in one file</h3>
          <div>
          <p>GenPat appends a patch to the file you specified. If there is already
            a patch for the same original file, with the same CRC/MD5, in the patch file,
            the patch will be replaced. For example, if you want to be able to upgrade
            version 1 and 2 to version 3, you can put a 1 &gt; 3 and 2 &gt; 3 patch in
            one file.</p>
          <p>You can also put patches for different files in one patch file, for
            example, a patch from file A version 1 to file A version 2 and a patch
            from file B version 1 to file B version 2. Just call the plug-in multiple
            times with the same patch file. It will automatically select the right
            patch (based on the file CRC).</p>
          </div>
          <h3>Patch generator (GenPat) exit codes</h3>
          <div>
            <p>In version 3 the following exit codes (known as error levels in
              the DOS period) can be returned by GenPat. GenPat will return an
              exit code based on success of the patch generation. Here is a list
              of the possible exit codes:</p>
            <table width="547" border="0" cellspacing="0" cellpadding="0">
              <tr>
                <td><b>Exit code</b></td>
                <td><b>Description</b></td>
              </tr>
              <tr>
                <td>0</td>
                <td>Success</td>
              </tr>
              <tr>
                <td>1</td>
                <td>Arguments missing</td>
              </tr>
              <tr>
                <td>2</td>
                <td>Other error</td>
              </tr>
              <tr>
                <td>3</td>
                <td>Source file already has a patch in specified patch file (ERROR),
                  use /R switch to override</td>
              </tr>
            </table>
            <p>These exit codes can be useful when you generate patch files through
              a NSIS script.</p>
        </div>
        </div>
        </div>
        <div>
          <h2>Source code</h2>
          <div>
          <p>Source code is available in the original package and in the SVN repository of NSIS.</p>
          <h3>NSIS plug-in (C++)</h3>
          <div>
          <p>The source of the NSIS plug-in that applies patches can be found
            in the Source\Plugin folder.</p>
          </div>
          <h3>Patch Generator (C++)</h3>
          <div>
            <p>The most interesting part of VPatch, the actual patch generation
              algorithm, can be found in Source\GenPat\PatchGenerator.cpp. The
              header of that file contains a brief explanation of the algorithm
              as well.</p>
          </div>
          <h3>User interface (Delphi)</h3>
          <div>
          <p>A user interface is included as well, which you will have to build
            yourself because the GUI executable was too large to include. Besides
            Borland Delphi 6 or higher (you can use the freely available Personal
            edition), you will also need to install the <a href=
"http://www.delphi-gems.com">VirtualTreeView</a> component by Mike Lischke.</p>
          </div>
          </div>
          <h2>Version history</h2>
          <div>
          <ul>
            <li>3.1
              <ul>
                <li>GenPat now compiles on POSIX platforms (MinGW/GCC), Visual
                  C++ 6 and Borland C++.</li>
                <li>More test cases to verify functionality of GenPat.</li>
              </ul>
            </li>
            <li>3.0
              <ul>
                <li><b>Final</b>: Updates to the GUI, installer</li>
                <li><b>RC8</b>: GenPat will now flag replacement of a patch (e.g.
                  the source file has the same contents as a previous patch inside
                  a patch file) as an error. You can specifically allow it using
                  the /R switch. Added license to source files.</li>
                <li><b>RC7</b>: Fixed critical bug in GenPat with multiple patches
                  in a single file. Fixed serious bug in stand-alone EXE runtime:
                  process kept on running forever. Included case testing through
                  a Python script to test common usage (and prevent bugs like
                  the one in GenPat in the future).</li>
                <li><b>RC6</b>: Upgraded to non-beta compiler. Added /A switch
                  to change block match limit and /O to deactivate the limit.
                  Updated GUI to support the /O switch.</li>
                <li><b>RC4a to RC5a</b>: input block size is now checked for power
                  of 2 and fixed if incorrect. When patch file does not yet exist,
                  no longer forgets to create the header. No longer tries to allocate
                  memory when there are no chunks. Fixed memory leaks.</li>
                <li>Target file date is now preserved inside a patch and restored
                  on the user system.</li>
                <li>MD5 checksums are now used instead of CRC32 checksums, unless
                  existing patches in a file already are in CRC32 mode.</li>
                <li>The patch generator, GenPat, has been completely rewritten
                  in C++. It no longer needs to keep the entire files in memory,
                  instead memory usage is a certain percentage of the source file
                  size. The percentage is based on the block size, larger block
                  sizes will reduce memory usage.</li>
                <li>All runtimes now share a common codebase, perform proper error
                  checking and don't leave behind files if the input file was
                  already up to date.</li>
                <li>Bug Fix: The patch generator algorithm no longer reduces to
                  a quadratic runtime if there are many blocks with the same content
                  in the files to patch.</li>
                <li>Bug Fix: The documentation of the command-line utilities was
                  incorrect and no warnings would be given by the runtimes, causing
                  the patch not to work (this does not apply to NSIS patches).</li>
              </ul>
            </li>
            <li>2.1
              <ul>
                <li>Added argument checking and error handling to GenPat. Now
                  returns exit codes as well to indicate success/failure (and
                  the reason for failure). Only GenPat has changed in this version
                  compared to 2.0 final.</li>
                <li>Bug Fix: GenPat no longer gives an Access Violation when attempting
                  to patch a file smaller than 64 bytes into a file larger than
                  64 bytes.</li>
              </ul>
            </li>
            <li>2.0 final
              <ul>
                <li>Cleaned up source code for the patch generator, which is now
                  included (this code is written in Borland Delphi 6 and compiles
                  with the freely available Personal edition).</li>
              </ul>
            </li>
            <li>2.0 beta 2
              <ul>
                <li>All new algorithm used in the patch generator: much faster
                  (up to 90%) while using smaller block sizes (higher compression)</li>
                <li>Created a NSIS 2 plugin</li>
                <li>Works with small files</li>
                <li>Replaces existing patch in file if original file CRC is identical</li>
              </ul>
            </li>
          </ul>
          </div>
          <h2>Credits</h2>
          <div>
          <p>Written by Koen van de Sande<br />
            C plug-in initially by Edgewize, updated by Koen van de Sande<br />
            New documentation and example by Joost Verburg and Koen van de Sande</p>
          </div>
          <h2>License</h2>
          <div>
          <pre>
Copyright (C) 2001-2005 Koen van de Sande / Van de Sande Productions

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute
it freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented;
   you must not claim that you wrote the original software.
   If you use this software in a product, an acknowledgment in the
   product documentation would be appreciated but is not required.
2. Altered versions must be plainly marked as such,
   and must not be misrepresented as being the original software.
3. This notice may not be removed or altered from any distribution.
</pre>
</div>
        </div>
      </td>
</tr>
</table>
</body>
</html>

This is a sample of a COM object ('server') implemented in Python.

This builds the pywin32 sample COM object 'interp' - see the win32com\servers 
directory.

Execute:

  setup.py py2exe

And in the dist directory you will find interp.exe and inter.dll.

You can register the objects with 'interp.exe /regserver' or 
'regsvr32 interp.dll'.  'interp.exe /unregister' and 'regsvr32 /u interp.dll'
will unregister the objects.

Once registered, test the object using 'test_interp.py' or 'test_interp.vbs'
Some py2exe samples relating to the use of typelibs and pywin32.

pywin32's COM support takes advantage of COM typelibs by generating Python
stubs for the objects in these typelibs.  This generation is often known as
a 'makepy' process, from the name of the script that performs the generation,
but it is not always necessary to explcitly invoke makepy.py - the use of
win32com.client.gencache will often cause implicit generation of these stubs.

This directory contains samples showing how to use these techniques with 
py2exe apps.  It contains the following samples.

build_gen: contains samples that demonstrate how to build a typelib as py2exe
           is run.  This means the machine running py2exe must have the 
           typelibs installed locally, but the target machines need not.
           py2exe generates the typelib stubs as it is run.

           There is currently a single sample which assumes MSWord is 
           installed.  Please contribute samples for other common objects!

pre_gen:   contains samples that demonstrate how to package typelib stubs 
           previously generated.  Such stubs will have come from a previous
           invocation of makepy, possibly on another computer and possibly
           from a source control system.  In this case, the computer running
           py2exe does *not* need to have the relevant typelibs installed.

A pywin32 ISAPI sample.

This builds the pywin32 isapi 'redirector' sample (see 
site-packages\isapi\samples) into a py2exe distribution.  Execute:

  setup.py py2exe

and in the 'dist' directory you will find 'redirector.exe' (used to
register/unregister the ISAPI extension), and 'redirector.dll' (the ISAPI
filter and extension loaded by IIS.)

See the pywin32 sample for more details about how to use the sample.

A new and improved py2exe for Python 2.3
========================================

Uses the zipimport mechanism, so it requires Python 2.3 or later.  The
zipimport mechanism is able to handle the early imports of the
warnings and also the encodings module which is done by Python.

Creates a single directory, which must be deployed completely.

(Most of this is based on ideas of Mark Hammond, he also implemented
most if the code:) Can create any number of console and gui
executables in this directory, plus optionally windows service exes,
plus optionally exe and dll com servers.  The com servers can expose
one or more com object classes.

All pure Python files are contained in a single zip archive, which is
shared by all the executables.  The zip archive may also be used by
programs embedding Python.  Since extension modules cannot be imported
from zipfiles, a simple pure Python loader is included in the zipfile
which loads the extension from the file system (without requiring that
the directory is in sys.path).

The executables run with only a single sys.path entry containing the
absolute filename of the zipfile archive. Absolute filenames are
constructed at runtime from the directory containing the executable,
and the zipfile name specified at build time.

The way has changed how build targets are specified in the setup
script. py2exe installs it own Distribution subclass, which enables
additional keyword arguments to the setup function:

console = [...] # list of scripts to convert into console executables
windows = [...] # list of scripts to convert into gui executables
com_servers = [...] # list of fully qualified class names to build into the exe com server
service = [...] # list of fully qualified class names to build into a service executable
isapi = [...], # list of script names to build into an ISAPI extension.
zipfile = "xxx.zip" # filename of the zipfile containing the pure Python modules

All of the above arguments are optional. The zipfile name defaults to
'library.zip'.

:Author: Joachim Bauch
:Contact: mail@joachim-bauch.de


.. contents::


Overview
=========

The default windows API functions to load external libraries into a program
(LoadLibrary, LoadLibraryEx) only work with files on the filesystem.  It's
therefore impossible to load a DLL from memory.
But sometimes, you need exactly this functionality (e.g. you don't want to
distribute a lot of files or want to make disassembling harder).  Common
workarounds for this problems are to write the DLL into a temporary file
first and import it from there.  When the program terminates, the temporary
file gets deleted.

In this tutorial, I will describe first, how DLL files are structured and
will present some code that can be used to load a DLL completely from memory -
without storing on the disk first.


Windows executables - the PE format
====================================

Most windows binaries that can contain executable code (.exe, .dll, .sys)
share a common file format that consists of the following parts:

+----------------+
| DOS header     |
|                |
| DOS stub       |
+----------------+
| PE header      |
+----------------+
| Section header |
+----------------+
| Section 1      |
+----------------+
| Section 2      |
+----------------+
| . . .          |
+----------------+
| Section n      |
+----------------+

All structures given below can be found in the header file `winnt.h`.


DOS header / stub
------------------

The DOS header is only used for backwards compatibility.  It precedes the DOS
stub that normally just displays an error message about the program not being
able to be run from DOS mode.

Microsoft defines the DOS header as follows::
    
    typedef struct _IMAGE_DOS_HEADER {      // DOS .EXE header
        WORD   e_magic;                     // Magic number
        WORD   e_cblp;                      // Bytes on last page of file
        WORD   e_cp;                        // Pages in file
        WORD   e_crlc;                      // Relocations
        WORD   e_cparhdr;                   // Size of header in paragraphs
        WORD   e_minalloc;                  // Minimum extra paragraphs needed
        WORD   e_maxalloc;                  // Maximum extra paragraphs needed
        WORD   e_ss;                        // Initial (relative) SS value
        WORD   e_sp;                        // Initial SP value
        WORD   e_csum;                      // Checksum
        WORD   e_ip;                        // Initial IP value
        WORD   e_cs;                        // Initial (relative) CS value
        WORD   e_lfarlc;                    // File address of relocation table
        WORD   e_ovno;                      // Overlay number
        WORD   e_res[4];                    // Reserved words
        WORD   e_oemid;                     // OEM identifier (for e_oeminfo)
        WORD   e_oeminfo;                   // OEM information; e_oemid specific
        WORD   e_res2[10];                  // Reserved words
        LONG   e_lfanew;                    // File address of new exe header
      } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;


PE header
----------

The PE header contains informations about the different sections inside the
executable that are used to store code and data or to define imports from other
libraries or exports this libraries provides.

It's defined as follows::

    typedef struct _IMAGE_NT_HEADERS {
        DWORD Signature;
        IMAGE_FILE_HEADER FileHeader;
        IMAGE_OPTIONAL_HEADER32 OptionalHeader;
    } IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

The `FileHeader` describes the *physical* format of the file, i.e. contents, informations
about symbols, etc::

    typedef struct _IMAGE_FILE_HEADER {
        WORD    Machine;
        WORD    NumberOfSections;
        DWORD   TimeDateStamp;
        DWORD   PointerToSymbolTable;
        DWORD   NumberOfSymbols;
        WORD    SizeOfOptionalHeader;
        WORD    Characteristics;
    } IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

.. _OptionalHeader:

The `OptionalHeader` contains informations about the *logical* format of the library, 
including required OS version, memory requirements and entry points::

    typedef struct _IMAGE_OPTIONAL_HEADER {
        //
        // Standard fields.
        //
    
        WORD    Magic;
        BYTE    MajorLinkerVersion;
        BYTE    MinorLinkerVersion;
        DWORD   SizeOfCode;
        DWORD   SizeOfInitializedData;
        DWORD   SizeOfUninitializedData;
        DWORD   AddressOfEntryPoint;
        DWORD   BaseOfCode;
        DWORD   BaseOfData;
    
        //
        // NT additional fields.
        //
    
        DWORD   ImageBase;
        DWORD   SectionAlignment;
        DWORD   FileAlignment;
        WORD    MajorOperatingSystemVersion;
        WORD    MinorOperatingSystemVersion;
        WORD    MajorImageVersion;
        WORD    MinorImageVersion;
        WORD    MajorSubsystemVersion;
        WORD    MinorSubsystemVersion;
        DWORD   Win32VersionValue;
        DWORD   SizeOfImage;
        DWORD   SizeOfHeaders;
        DWORD   CheckSum;
        WORD    Subsystem;
        WORD    DllCharacteristics;
        DWORD   SizeOfStackReserve;
        DWORD   SizeOfStackCommit;
        DWORD   SizeOfHeapReserve;
        DWORD   SizeOfHeapCommit;
        DWORD   LoaderFlags;
        DWORD   NumberOfRvaAndSizes;
        IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];
    } IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

.. _DataDirectory:

The `DataDirectory` contains 16 (`IMAGE_NUMBEROF_DIRECTORY_ENTRIES`) entries
defining the logical components of the library:

===== ==========================
Index Description
===== ==========================
0     Exported functions
----- --------------------------
1     Imported functions
----- --------------------------
2     Resources
----- --------------------------
3     Exception informations
----- --------------------------
4     Security informations
----- --------------------------
5     Base relocation table
----- --------------------------
6     Debug informations
----- --------------------------
7     Architecture specific data
----- --------------------------
8     Global pointer
----- --------------------------
9     Thread local storage
----- --------------------------
10    Load configuration
----- --------------------------
11    Bound imports
----- --------------------------
12    Import address table
----- --------------------------
13    Delay load imports
----- --------------------------
14    COM runtime descriptor
===== ==========================

For importing the DLL we only need the entries describing the imports and the
base relocation table.  In order to provide access to the exported functions,
the exports entry is required.


Section header
---------------

The section header is stored after the OptionalHeader_ structure in the PE
header.  Microsoft provides the macro `IMAGE_FIRST_SECTION` to get the start
address based on the PE header.

Actually, the section header is a list of informations about each section in
the file::

    typedef struct _IMAGE_SECTION_HEADER {
        BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];
        union {
                DWORD   PhysicalAddress;
                DWORD   VirtualSize;
        } Misc;
        DWORD   VirtualAddress;
        DWORD   SizeOfRawData;
        DWORD   PointerToRawData;
        DWORD   PointerToRelocations;
        DWORD   PointerToLinenumbers;
        WORD    NumberOfRelocations;
        WORD    NumberOfLinenumbers;
        DWORD   Characteristics;
    } IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

A section can contain code, data, relocation informations, resources, export or
import definitions, etc.


Loading the library
====================

To emulate the PE loader, we must first understand, which steps are neccessary
to load the file to memory and prepare the structures so they can be called from
other programs.

When issuing the API call `LoadLibrary`, Windows basically performs these tasks:

1. Open the given file and check the DOS and PE headers.

2. Try to allocate a memory block of `PEHeader.OptionalHeader.SizeOfImage` bytes
   at position `PEHeader.OptionalHeader.ImageBase`.
   
3. Parse section headers and copy sections to their addresses.  The destination
   address for each section, relative to the base of the allocated memory block,
   is stored in the `VirtualAddress` attribute of the `IMAGE_SECTION_HEADER`
   structure.
   
4. If the allocated memory block differs from `ImageBase`, various references in
   the code and/or data sections must be adjusted.  This is called *Base
   relocation*.
   
5. The required imports for the library must be resolved by loading the
   corresponding libraries.
   
6. The memory regions of the different sections must be protected depending on
   the section's characteristics.  Some sections are marked as *discardable*
   and therefore can be safely freed at this point.  These sections normally
   contain temporary data that is only needed during the import, like the
   informations for the base relocation.
   
7. Now the library is loaded completely.  It must be notified about this by
   calling the entry point using the flag `DLL_PROCESS_ATTACH`.

In the following paragraphs, each step is described.


Allocate memory
----------------

All memory required for the library must be reserved / allocated using
`VirtualAlloc`, as Windows provides functions to protect these memory blocks.
This is required to restrict access to the memory, like blocking write access
to the code or constant data.

The OptionalHeader_ structure defines the size of the required memory block
for the library.  It must be reserved at the address specified by `ImageBase`
if possible::

    memory = VirtualAlloc((LPVOID)(PEHeader->OptionalHeader.ImageBase),
        PEHeader->OptionalHeader.SizeOfImage,
        MEM_RESERVE,
        PAGE_READWRITE);

If the reserved memory differs from the address given in `ImageBase`, base
relocation as described below must be done.


Copy sections
--------------

Once the memory has been reserved, the file contents can be copied to the
system.  The section header must get evaluated in order to determine the
position in the file and the target area in memory.

Before copying the data, the memory block must get committed::

    dest = VirtualAlloc(baseAddress + section->VirtualAddress,
        section->SizeOfRawData,
        MEM_COMMIT,
        PAGE_READWRITE);

Sections without data in the file (like data sections for the used variables)
have a `SizeOfRawData` of `0`, so you can use the `SizeOfInitializedData`
or `SizeOfUninitializedData` of the OptionalHeader_.  Which one must get
choosen depending on the bit flags `IMAGE_SCN_CNT_INITIALIZED_DATA` and
`IMAGE_SCN_CNT_UNINITIALIZED_DATA` that may be set in the section`s
characteristics.


Base relocation
----------------

All memory addresses in the code / data sections of a library are stored relative
to the address defined by `ImageBase` in the OptionalHeader_.  If the library
can't be imported to this memory address, the references must get adjusted
=> *relocated*.  The file format helps for this by storing informations about
all these references in the base relocation table, which can be found in the
directory entry 5 of the DataDirectory_ in the OptionalHeader_.

This table consists of a series of this structure

::

    typedef struct _IMAGE_BASE_RELOCATION {
        DWORD   VirtualAddress;
        DWORD   SizeOfBlock;
    } IMAGE_BASE_RELOCATION;

It contains `(SizeOfBlock - IMAGE_SIZEOF_BASE_RELOCATION) / 2` entries of 16 bits
each.  The upper 4 bits define the type of relocation, the lower 12 bits define
the offset relative to the `VirtualAddress`.

The only types that seem to be used in DLLs are

IMAGE_REL_BASED_ABSOLUTE
    No operation relocation.  Used for padding.
IMAGE_REL_BASED_HIGHLOW
    Add the delta between the `ImageBase` and the allocated memory block to the
    32 bits found at the offset.


Resolve imports
----------------

The directory entry 1 of the DataDirectory_ in the OptionalHeader_ specifies
a list of libraries to import symbols from.  Each entry in this list is defined
as follows::

    typedef struct _IMAGE_IMPORT_DESCRIPTOR {
        union {
            DWORD   Characteristics;            // 0 for terminating null import descriptor
            DWORD   OriginalFirstThunk;         // RVA to original unbound IAT (PIMAGE_THUNK_DATA)
        };
        DWORD   TimeDateStamp;                  // 0 if not bound,
                                                // -1 if bound, and real date\time stamp
                                                //     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)
                                                // O.W. date/time stamp of DLL bound to (Old BIND)
    
        DWORD   ForwarderChain;                 // -1 if no forwarders
        DWORD   Name;
        DWORD   FirstThunk;                     // RVA to IAT (if bound this IAT has actual addresses)
    } IMAGE_IMPORT_DESCRIPTOR;

The `Name` entry describes the offset to the NULL-terminated string of the library
name (e.g. `KERNEL32.DLL`).  The `OriginalFirstThunk` entry points to a list
of references to the function names to import from the external library.
`FirstThunk` points to a list of addresses that gets filled with pointers to
the imported symbols.

When we resolve the imports, we walk both lists in parallel, import the function
defined by the name in the first list and store the pointer to the symbol in the
second list::

    nameRef = (DWORD *)(baseAddress + importDesc->OriginalFirstThunk);
    symbolRef = (DWORD *)(baseAddress + importDesc->FirstThunk);
    for (; *nameRef; nameRef++, symbolRef++)
    {
        PIMAGE_IMPORT_BY_NAME thunkData = (PIMAGE_IMPORT_BY_NAME)(codeBase + *nameRef);
        *symbolRef = (DWORD)GetProcAddress(handle, (LPCSTR)&thunkData->Name);
        if (*funcRef == 0)
        {
            handleImportError();
            return;
        }
    }


Protect memory
---------------

Every section specifies permission flags in it's `Characteristics` entry.
These flags can be one or a combination of

IMAGE_SCN_MEM_EXECUTE
    The section contains data that can be executed.
    
IMAGE_SCN_MEM_READ
    The section contains data that is readable.
    
IMAGE_SCN_MEM_WRITE
    The section contains data that is writeable.

These flags must get mapped to the protection flags

- PAGE_NOACCESS
- PAGE_WRITECOPY
- PAGE_READONLY
- PAGE_READWRITE
- PAGE_EXECUTE
- PAGE_EXECUTE_WRITECOPY
- PAGE_EXECUTE_READ
- PAGE_EXECUTE_READWRITE

Now, the function `VirtualProtect` can be used to limit access to the memory.
If the program tries to access it in a unauthorized way, an exception gets
raised by Windows.

In addition the section flags above, the following can be added:

IMAGE_SCN_MEM_DISCARDABLE
    The data in this section can be freed after the import.  Usually this is
    specified for relocation data.
    
IMAGE_SCN_MEM_NOT_CACHED
    The data in this section must not get cached by Windows.  Add the bit
    flag `PAGE_NOCACHE` to the protection flags above.


Notify library
---------------

The last thing to do is to call the DLL entry point (defined by
`AddressOfEntryPoint`) and so notifying the library about being attached
to a process.

The function at the entry point is defined as

::
    
    typedef BOOL (WINAPI *DllEntryProc)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);

So the last code we need to execute is

::

	DllEntryProc entry = (DllEntryProc)(baseAddress + PEHeader->OptionalHeader.AddressOfEntryPoint);
	(*entry)((HINSTANCE)baseAddress, DLL_PROCESS_ATTACH, 0);

Afterwards we can use the exported functions as with any normal library.


Exported functions
===================

If you want to access the functions that are exported by the library, you need to find the entry
point to a symbol, i.e. the name of the function to call.

The directory entry 0 of the DataDirectory_ in the OptionalHeader_ contains informations about
the exported functions. It's defined as follows::

    typedef struct _IMAGE_EXPORT_DIRECTORY {
        DWORD   Characteristics;
        DWORD   TimeDateStamp;
        WORD    MajorVersion;
        WORD    MinorVersion;
        DWORD   Name;
        DWORD   Base;
        DWORD   NumberOfFunctions;
        DWORD   NumberOfNames;
        DWORD   AddressOfFunctions;     // RVA from base of image
        DWORD   AddressOfNames;         // RVA from base of image
        DWORD   AddressOfNameOrdinals;  // RVA from base of image
    } IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;

First thing to do, is to map the name of the function to the ordinal number of the exported
symbol. Therefore, just walk the arrays defined by `AddressOfNames` and `AddressOfNameOrdinals`
parallel until you found the required name.

Now you can use the ordinal number to read the address by evaluating the n-th element of the
`AddressOfFunctions` array.


Freeing the library
====================

To free the custom loaded library, perform the steps

- Call entry point to notify library about being detached::

	DllEntryProc entry = (DllEntryProc)(baseAddress + PEHeader->OptionalHeader.AddressOfEntryPoint);
	(*entry)((HINSTANCE)baseAddress, DLL_PROCESS_ATTACH, 0);
    
- Free external libraries used to resolve imports.
- Free allocated memory.


MemoryModule
=============

MemoryModule is a C-library that can be used to load a DLL from memory.

The interface is very similar to the standard methods for loading of libraries::

    typedef void *HMEMORYMODULE;
    
    HMEMORYMODULE MemoryLoadLibrary(const void *);
    FARPROC MemoryGetProcAddress(HMEMORYMODULE, const char *);
    void MemoryFreeLibrary(HMEMORYMODULE);


Downloads
----------

The latest development release can always be grabbed from my development SVN-Server at
https://leviathan.joachim-bauch.de/cgi-bin/viewcvs.cgi/MemoryModule/trunk/?root=misc

Please note that it's located in my room so it doesn't run 24/7 and is often offline during
nights or on weekends.  If you encounter problems connecting, please try again some other
time of day.

All released versions can be downloaded from the list below.


Known issues
-------------

- All memory that is not protected by section flags is gets committed using `PAGE_READWRITE`.
  I don't know if this is correct.


License
--------

The MemoryModule library is released under the Lesser General Public License (LGPL).

It is provided as-is without ANY warranty.  You may use it at your own risk.


Copyright
==========

The MemoryModule library and this tutorial are
Copyright (c) 2004 by Joachim Bauch.

Required tools:
===============
 * [msysgit](http://code.google.com/p/msysgit/downloads/list)
 * [cygwin](http://svn.webkit.org/repository/webkit/trunk/Tools/CygwinDownloader/cygwin-downloader.zip)
    * Note: on windows with UAC enabled, it may fail to run setup.exe after downloading packages. You'll have to run it manually.
    * After installing, open a cygwin shell (cygwin.bat) and execute `perl -e "use Switch;"`
    * If you don't get an error, cygwin is configured properly. Otherwise, execute the following:
        * `curl -L http://search.cpan.org/CPAN/authors/id/R/RG/RGARCIA/Switch-2.16.tar.gz -o Switch-2.16.tar.gz`
        * `tar -xzf Switch-2.16.tar.gz`
        * `cd Switch-2.16`
        * `perl Makefile.PL && make && make install`
 * Microsoft Visual C++ and components
    * [Visual C++ Express](http://www.microsoft.com/visualstudio/en-us/products/2008-editions/express)
    * [.NET Framework 4](https://www.microsoft.com/en-us/download/details.aspx?id=17851)
    * [Windows SDK 7.1](http://www.microsoft.com/en-us/download/details.aspx?id=8279)
    * After installing these components, run `"c:\Program Files\Microsoft SDKs\Windows\v7.1\Setup\WindowsSdkVer.exe" -version:v7.1`
 * [SWIG](http://sourceforge.net/projects/swig/files/swigwin/swigwin-2.0.7/swigwin-2.0.7.zip/download)
    * You'll have to put this on your `PATH` manually.
 * An SVN client ([Tortoise](http://tortoisesvn.net/downloads.html), [Slik](http://www.sliksvn.com/en/download/), [CollabNet](http://www.collab.net/downloads/subversion))
    * Make sure the executing `svn` in your cmd.exe shell succeeds. If not, you'll have to add your client's `bin` directory to your `PATH` manually.
 * [Python 2.6.*](http://www.python.org/download/releases/)
    * As of 2012-Jul-25, the latest binary release is [2.6.6](http://www.python.org/ftp/python/2.6.6/python-2.6.6.msi)
    * Also unpack the [source distribution](http://www.python.org/ftp/python/2.6.6/Python-2.6.6.tgz) on top of your install directory. This will make the headers (\*.h) and object files (\*.lib) for components that will be compiled.
 * [setuptools](http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c11.win32-py2.6.exe#md5=1509752c3c2e64b5d0f9589aafe053dc)
 * [bakefile](http://iweb.dl.sourceforge.net/project/bakefile/bakefile/0.2.9/bakefile-0.2.9-setup.exe)
 * pip - install with `c:\Python26\Scripts\easy_install pip`
 * virtualenv - install with `c:\Python26\Scripts\pip install virtualenv`


Dependencies
============
Assumptions - replace where necessary:
 * Your digsby checkout is in `c:\digsby`
 * You python install is in `c:\Python26`

1. Open the 'Microsoft Visual Studio Command Prompt'
2. `cd c:\digsby`
3. `c:\Python26\Scripts\virtualenv -p c:\python26\python.exe --distribute digsby-venv`
4. `digsby-venv\Scripts\activate.bat`
5. `python bootstrap.py`
6. `deactivate`
7. `digsby-venv\Scripts\activate.bat`
    * bootstrap modifies the activate script.
8. Run MSYS from within your command prompt by executing `Git Bash.lnk` from your msysgit install directory
    * You should now be inside of an MSYS shell with the correct Visual Studio environment variables set.
9. `buildout`
10. `python sanity.py -_xmlextra -blist -cgui -sip -wx -wx.calendar -wx.lib -wx.py -wx.stc -wx.webview`
    * All components should be `OK`. If not, see `Dependency Troubleshooting`, below.
11. `python digsby\build\msw\build_all.py`
12. `python sanity.py`
    * All components should be `OK`. If not, see `Dependency Troubleshooting`, below.

Dependency Troubleshooting
==========================
TODO

Link explainin how to fix the missing: `vcvarsall.bat` file: [Fix](http://stackoverflow.com/questions/2667069/cannot-find-vcvarsall-bat-when-running-a-python-script)
Summary:
You need to create a variable called: `VS90COMNTOOLS` that has the contents of `VS100COMNTOOLS`

Running Digsby
==============
`python Digsby.py`

