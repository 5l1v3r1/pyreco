__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# pynsist documentation build configuration file, created by
# sphinx-quickstart on Sun Mar 30 13:33:08 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'pynsist'
copyright = u'2014, Thomas Kluyver'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.3'
# The full version, including alpha/beta/rc tags.
release = '0.3'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'pynsistdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'pynsist.tex', u'pynsist Documentation',
   u'Thomas Kluyver', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'pynsist', u'pynsist Documentation',
     [u'Thomas Kluyver'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'pynsist', u'pynsist Documentation',
   u'Thomas Kluyver', 'pynsist', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'python': ('http://docs.python.org/3', None)}

########NEW FILE########
__FILENAME__ = build_all_examples
import os
import nsist

example_cfgs = [
    'console/installer.cfg',
    'pyqt/installer.cfg',
    'tkinter/installer.cfg',
    'pygame/installer.cfg',
]

examples_dir = os.path.dirname(os.path.abspath(__file__))

for example_cfg in example_cfgs:
    os.chdir(examples_dir)
    nsist.main([example_cfg])

########NEW FILE########
__FILENAME__ = guessnumber
"""A fun number guessing game!"""

import random

def main():
    number = random.randint(1, 100)
    guesses = 0

    print("I'm thinking of a number, between 1 and 100. Can you guess what it is?")
    while True:
        guesses += 1
        guess = input('= ')
        try:
            guess = int(guess)
        except ValueError:
            print("Base 10 integers only, please.")
            continue

        if guess > number:
            print("Too high!")
        elif guess <  number:
            print("Too low!")
        else:
            print("That's right, {}. You got it in {} guesses.".format(number, guesses))
            break

    print()
    input("Press enter to quit.")

########NEW FILE########
__FILENAME__ = main
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'buttonapp/main.ui'
#
# Created: Wed Apr  2 16:57:10 2014
#      by: PyQt4 UI code generator 4.10.3
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.resize(393, 606)
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.horizontalLayout = QtGui.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.groupBox = QtGui.QGroupBox(self.centralwidget)
        self.groupBox.setObjectName(_fromUtf8("groupBox"))
        self.verticalLayout = QtGui.QVBoxLayout(self.groupBox)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.radio_1 = QtGui.QRadioButton(self.groupBox)
        self.radio_1.setObjectName(_fromUtf8("radio_1"))
        self.verticalLayout.addWidget(self.radio_1)
        self.radio_2 = QtGui.QRadioButton(self.groupBox)
        self.radio_2.setObjectName(_fromUtf8("radio_2"))
        self.verticalLayout.addWidget(self.radio_2)
        self.radio_3 = QtGui.QRadioButton(self.groupBox)
        self.radio_3.setObjectName(_fromUtf8("radio_3"))
        self.verticalLayout.addWidget(self.radio_3)
        self.radio_4 = QtGui.QRadioButton(self.groupBox)
        self.radio_4.setObjectName(_fromUtf8("radio_4"))
        self.verticalLayout.addWidget(self.radio_4)
        self.add_button = QtGui.QPushButton(self.groupBox)
        self.add_button.setObjectName(_fromUtf8("add_button"))
        self.verticalLayout.addWidget(self.add_button)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout.addWidget(self.groupBox)
        self.listWidget = QtGui.QListWidget(self.centralwidget)
        self.listWidget.setObjectName(_fromUtf8("listWidget"))
        self.horizontalLayout.addWidget(self.listWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 393, 24))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName(_fromUtf8("menuFile"))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(MainWindow)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtGui.QAction(MainWindow)
        self.actionNew.setObjectName(_fromUtf8("actionNew"))
        self.actionOpen = QtGui.QAction(MainWindow)
        self.actionOpen.setObjectName(_fromUtf8("actionOpen"))
        self.actionSave = QtGui.QAction(MainWindow)
        self.actionSave.setObjectName(_fromUtf8("actionSave"))
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow", None))
        self.groupBox.setTitle(_translate("MainWindow", "Click things", None))
        self.radio_1.setText(_translate("MainWindow", "Thing 1", None))
        self.radio_2.setText(_translate("MainWindow", "Thing 2", None))
        self.radio_3.setText(_translate("MainWindow", "Thing 3", None))
        self.radio_4.setText(_translate("MainWindow", "Last thing", None))
        self.add_button.setText(_translate("MainWindow", "Add to list", None))
        self.menuFile.setTitle(_translate("MainWindow", "File", None))
        self.actionNew.setText(_translate("MainWindow", "New", None))
        self.actionOpen.setText(_translate("MainWindow", "Open", None))
        self.actionSave.setText(_translate("MainWindow", "Save", None))


########NEW FILE########
__FILENAME__ = exampleapp
from tkinter import *

def main():
    root = Tk()
    root.title("Python Example App")
    t = Text(root)
    t.insert(END, "Type stuff here.")
    t.pack()

    w = Label(root, text="Hello, world!")
    w.pack()

    root.mainloop()

########NEW FILE########
__FILENAME__ = configreader
#!/usr/bin/python3

import configparser

class SectionValidator(object):
    def __init__(self, keys):
        """
        keys
            list of tuples containing the names and whether the
            key is mandatory
        """
        self.keys = keys
    
    def check(self, config, section_name):
        """
        validates the section, if this is the correct validator for it
        returns True if this is the correct validator for this section
        
        raises InvalidConfig if something inside the section is wrong
        """
        self._check_mandatory_fields(section_name, config[section_name])
        self._check_invalid_keys(section_name, config[section_name])

    def _check_mandatory_fields(self, section_name, key):
        for key_name, mandatory in self.keys:
            if mandatory:
                try:
                    key[key_name]
                except KeyError:
                    err_msg = ("The section '{0}' must contain a "
                               "key '{1}'!").format(
                                section_name,
                                key_name)
                    raise InvalidConfig(err_msg)
    
    def _check_invalid_keys(self, section_name, section):
        for key in section:
            key_name = str(key)
            valid_key_names = [s[0] for s in self.keys]
            is_valid_key = key_name in valid_key_names
            if not is_valid_key:
                err_msg = ("'{0}' is not a valid key name for '{1}'. Must "
                           "be one of these: {2}").format(
                            key_name,
                            section_name,
                            ', '.join(valid_key_names))
                raise InvalidConfig(err_msg)

# contains all configuration sections and keys
# the keys are a tuple with their name and a boolean, which
# tells us whether the option is mandatory
CONFIG_VALIDATORS = {
    'Application': SectionValidator([
        ('name', True),
        ('version', True),
        ('entry_point', False),
        ('script', False),
        ('target', False),
        ('parameters', False),
        ('icon', False),
        ('console', False),
    ]),
    'Build': SectionValidator([
        ('directory', False),
        ('installer_name', False),
        ('nsi_template', False),
    ]),
    'Include': SectionValidator([
        ('packages', False),
        ('files', False),
    ]),
    'Python': SectionValidator([
        ('version', True),
        ('bitness', False),
    ]),
    'Shortcut': SectionValidator([
        ('entry_point', False),
        ('script', False),
        ('target', False),
        ('parameters', False),
        ('icon', False),
        ('console', False),
    ]),
}

class InvalidConfig(ValueError):
    pass

def read_and_validate(config_file):
    # Interpolation interferes with Windows-style environment variables, so
    # it's disabled for now.
    config = configparser.ConfigParser(interpolation=None)
    config.read(config_file)
    for section in config.sections():
        if section in CONFIG_VALIDATORS:
            CONFIG_VALIDATORS[section].check(config, section)
        elif section.startswith('Shortcut '):
            CONFIG_VALIDATORS['Shortcut'].check(config, section)
        else:
            valid_section_names = CONFIG_VALIDATORS.keys()
            err_msg = ("{0} is not a valid section header. Must "
                       "be one of these: {1}").format(
                       section,
                       ', '.join(['"%s"' % n for n in valid_section_names]))
            raise InvalidConfig(err_msg)    
    return config

def read_extra_files(cfg):
    """Read the list of extra files from the config file.
    
    Returns a list of 2-tuples: (file, destination_directory), which can be
    passed as the ``extra_files`` parameter to :class:`nsist.InstallerBuilder`.
    """
    lines = cfg.get('Include', 'files', fallback='').splitlines()
    pairs = []
    for line in lines:
        if '>' in line:
            file, dest = line.rsplit('>', 1)
            pairs.append((file.strip(), dest.strip()))
        else:
            pairs.append((line, '$INSTDIR'))

    return pairs

def read_shortcuts_config(cfg):
    """Read and verify the shortcut definitions from the config file.
    
    There is one shortcut per 'Shortcut <name>' section, and one for the
    Application section.
    
    Returns a list of dictionaries with the fields from the shortcut sections.
    The optional 'icon' and 'console' fields will be filled with their
    default values if not supplied.
    """
    shortcuts = {}
    def _check_shortcut(name, sc, section):
        alternatives = ['entry_point', 'script', 'target']
        has_alternatives = sum(1 for k in alternatives if k in sc)
        if has_alternatives < 1:
            raise InvalidConfig('Section [{}] has none of {}.'.format(
                                    section, ', '.join(alternatives)))
        elif has_alternatives > 1:
            raise InvalidConfig('Section [{}] has more than one of {}.'.format(
                                    section, ', '.join(alternatives)))

        # Copy to a regular dict so it can hold a boolean value
        sc2 = dict(sc)
        if 'icon' not in sc2:
            from . import DEFAULT_ICON
            sc2['icon'] = DEFAULT_ICON
        sc2['console'] = sc.getboolean('console', fallback=False)
        sc2['parameters'] = sc.get('parameters', fallback='')
        shortcuts[name] = sc2

    for section in cfg.sections():
        if section.startswith("Shortcut "):
            name = section[len("Shortcut "):]
            _check_shortcut(name, cfg[section], section)

    appcfg = cfg['Application']
    _check_shortcut(appcfg['name'], appcfg, 'Application')

    return shortcuts

########NEW FILE########
__FILENAME__ = copymodules
import os
import shutil
import sys
import tempfile
import zipfile, zipimport

pjoin = os.path.join

PY2 = sys.version_info[0] == 2
running_python  = '.'.join(str(x) for x in sys.version_info[:2])

class ExtensionModuleMismatch(ImportError):
    pass

extensionmod_errmsg = """Found an extension module that will not be usable on %s:
%s
Put Windows packages in pynsist_pkgs/ to avoid this."""

def check_ext_mod(path, target_python):
    """If path is an extension module, check that it matches target platform.
    
    It should be for Windows and we should be running on the same version
    of Python that we're targeting. Raises ExtensionModuleMismatch if not.
    
    Does nothing if path is not an extension module.
    """
    if path.endswith('.so'):
        raise ExtensionModuleMismatch(extensionmod_errmsg % ('Windows', path))
    elif path.endswith('.pyd') and not target_python.startswith(running_python):
        # TODO: From Python 3.2, extension modules can restrict themselves
        # to a stable ABI. Can we detect this?
        raise ExtensionModuleMismatch(extensionmod_errmsg % ('Python '+target_python, path))

def check_package_for_ext_mods(path, target_python):
    """Walk the directory path, calling :func:`check_ext_mod` on each file.
    """
    for dirpath, dirnames, filenames in os.walk(path):
        for filename in filenames:
            check_ext_mod(os.path.join(path, dirpath, filename), target_python)

def copy_zipmodule(loader, modname, target):
    """Copy a module or package out of a zip file to the target directory."""
    file = loader.get_filename(modname)
    assert file.startswith(loader.archive)
    path_in_zip = file[len(loader.archive+'/'):]
    zf = zipfile.ZipFile(loader.archive)

    # If the packages are in a subdirectory, extracting them recreates the
    # directory structure from the zip file. So extract to a temp dir first,
    # and then copy the modules to target.
    tempdir = tempfile.mkdtemp()
    if loader.is_package(modname):
        # Extract everything in a folder
        pkgdir, basename = os.path.split(path_in_zip)
        assert basename.startswith('__init__')
        pkgfiles = [f for f in zf.namelist() if f.startswith(pkgdir)]
        zf.extractall(tempdir, pkgfiles)
        shutil.copytree(pjoin(tempdir, pkgdir), pjoin(target, modname))
    else:
        # Extract a single file
        zf.extract(path_in_zip, tempdir)
        shutil.copy2(pjoin(tempdir, path_in_zip), target)

    shutil.rmtree(tempdir)

if not PY2:
    import importlib
    import importlib.abc
    import importlib.machinery

    class ModuleCopier:
        """Finds and copies importable Python modules and packages.

        This is the Python >3.3 version and uses the `importlib` package to
        locate modules.
        """
        def __init__(self, py_version, path=None):
            self.py_version = py_version
            self.path = path if (path is not None) else ([''] + sys.path)

        def copy(self, modname, target):
            """Copy the importable module 'modname' to the directory 'target'.

            modname should be a top-level import, i.e. without any dots.
            Packages are always copied whole.

            This can currently copy regular filesystem files and directories,
            and extract modules and packages from appropriately structured zip
            files.
            """
            loader = importlib.find_loader(modname, self.path)
            if loader is None:
                raise ImportError('Could not find %s' % modname)
            pkg = loader.is_package(modname)

            if isinstance(loader, importlib.machinery.ExtensionFileLoader):
                check_ext_mod(loader.path, self.py_version)
                shutil.copy2(loader.path, target)

            elif isinstance(loader, importlib.abc.FileLoader):
                file = loader.get_filename(modname)
                if pkg:
                    pkgdir, basename = os.path.split(file)
                    assert basename.startswith('__init__')
                    check_package_for_ext_mods(pkgdir, self.py_version)
                    dest = os.path.join(target, modname)
                    shutil.copytree(pkgdir, dest,
                                    ignore=shutil.ignore_patterns('*.pyc'))
                else:
                    shutil.copy2(file, target)

            elif isinstance(loader, zipimport.zipimporter):
                copy_zipmodule(loader, modname, target)
else:
    import imp

    class ModuleCopier:
        """Finds and copies importable Python modules and packages.

        This is the Python 2.7 version and uses the `imp` package to locate
        modules.
        """
        def __init__(self, py_version, path=None):
            self.py_version = py_version
            self.path = path if (path is not None) else ([''] + sys.path)
            self.zip_paths = [p for p in self.path if zipfile.is_zipfile(p)]

        def copy(self, modname, target):
            """Copy the importable module 'modname' to the directory 'target'.

            modname should be a top-level import, i.e. without any dots.
            Packages are always copied whole.

            This can currently copy regular filesystem files and directories,
            and extract modules and packages from appropriately structured zip
            files.
            """
            try:
                info = imp.find_module(modname, self.path)
            except ImportError:
                # Search all ZIP files in self.path for the module name
                # NOTE: `imp.find_module(...)` will *not* find modules in ZIP
                #       files, so we have to check each file for ourselves
                for zpath in self.zip_paths:
                    loader = zipimport.zipimporter(zpath)
                    if loader.find_module(modname) is None:
                        continue
                    copy_zipmodule(loader, modname, target)
                    return
                # Not found in zip files either - re-raise exception
                raise

            path = info[1]
            modtype = info[2][2]

            if modtype == imp.C_EXTENSION:
                check_ext_mod(path, self.py_version)

            if modtype in (imp.PY_SOURCE, imp.C_EXTENSION):
                shutil.copy2(path, target)

            elif modtype == imp.PKG_DIRECTORY:
                check_package_for_ext_mods(path, self.py_version)
                dest = os.path.join(target, modname)
                shutil.copytree(path, dest,
                                ignore=shutil.ignore_patterns('*.pyc'))


def copy_modules(modnames, target, py_version, path=None):
    """Copy the specified importable modules to the target directory.
    
    By default, it finds modules in :data:`sys.path` - this can be overridden
    by passing the path parameter.
    """
    mc = ModuleCopier(py_version, path)
    files_in_target_noext = [os.path.splitext(f)[0] for f in os.listdir(target)]
    
    for modname in modnames:
        if modname in files_in_target_noext:
            # Already there, no need to copy it.
            continue
        mc.copy(modname, target)
    
    if not modnames:
        # NSIS abhors an empty folder, so give it a file to find.
        with open(os.path.join(target, 'placeholder'), 'w') as f:
            f.write('This file only exists so NSIS finds something in this directory.')

########NEW FILE########
__FILENAME__ = nsiswriter
import itertools
import operator
import ntpath
import re
import sys

PY2 = sys.version_info[0] == 2


class NSISFileWriter(object):
    """Write an .nsi script file by filling in a template.
    """
    def __init__(self, template_file, installerbuilder, definitions=None):
        """Instantiate an NSISFileWriter
        
        :param str template_file: Path to the .nsi template
        :param dict definitions: Mapping of name to value (values will be quoted)
        """
        self.template_file = template_file
        self.installerbuilder = installerbuilder
        self.definitions = definitions or {}
        self.template_fields = {
                ';INSTALL_FILES': self.files_install,
                ';INSTALL_DIRECTORIES': self.dirs_install,
                ';INSTALL_SHORTCUTS': self.shortcuts_install,
                ';UNINSTALL_FILES': self.files_uninstall,
                ';UNINSTALL_DIRECTORIES': self.dirs_uninstall,
                ';UNINSTALL_SHORTCUTS': self.shortcuts_uninstall,
        }
        if installerbuilder.py_version < '3.3':
            self.template_fields.update({
                ';PYLAUNCHER_INSTALL': self.pylauncher_install,
                ';PYLAUNCHER_HELP': self.pylauncher_help})

    def write(self, target):
        """Fill out the template and write the result to 'target'.
        
        :param str target: Path to the file to be written
        """
        with open(target, 'w') as fout, open(self.template_file) as fin:
            self.write_definitions(fout)

            for line in fin:
                fout.write(line)
                l = line.strip()
                if l in self.template_fields:
                    indent = re.match('\s*', line).group(0)
                    for fillline in self.template_fields[l]():
                        fout.write(indent+fillline+'\n')

    def write_definitions(self, f):
        """Write definition lines at the start of the file.
        
        :param f: A text-mode writable file handle
        """
        for name, value in self.definitions.items():
            f.write('!define {} "{}"\n'.format(name, value))

    # Template fillers
    # ----------------

    # These return an iterable of lines to fill after a given template field

    def files_install(self):
        for destination, group in itertools.groupby(
                    self.installerbuilder.install_files, operator.itemgetter(1)):
            yield 'SetOutPath "{}"'.format(destination)
            for file, _ in group:
                yield 'File "{}"'.format(file)
        yield 'SetOutPath "$INSTDIR"'

    def dirs_install(self):
        for dir, destination in self.installerbuilder.install_dirs:
            yield 'SetOutPath "{}"'.format(ntpath.join(destination, dir))
            yield 'File /r "{}\*.*"'.format(dir)
        yield 'SetOutPath "$INSTDIR"'
    
    def shortcuts_install(self):
        shortcuts = self.installerbuilder.shortcuts
        # The output path becomes the working directory for shortcuts.
        yield 'SetOutPath "%HOMEDRIVE%\\%HOMEPATH%"'
        if len(shortcuts) == 1:
            scname, sc = next(iter(shortcuts.items()))
            yield 'CreateShortCut "$SMPROGRAMS\{}.lnk" "{}" \'"$INSTDIR\{}"\' \\'.format(\
                    scname, ('py' if sc['console'] else 'pyw'), sc['script'])
            yield '    "$INSTDIR\{}"'.format(sc['icon'])
            yield 'SetOutPath "$INSTDIR"'
            return
        
        # Multiple shortcuts - make a folder
        yield 'CreateDirectory "$SMPROGRAMS\${PRODUCT_NAME}"'
        for scname, sc in shortcuts.items():
            yield 'CreateShortCut "$SMPROGRAMS\${{PRODUCT_NAME}}\{}.lnk" "{}" \\'.format(\
                    scname, sc['target'])
            yield '    \'{}\' "$INSTDIR\{}"'.format(sc['parameters'], sc['icon'])
        yield 'SetOutPath "$INSTDIR"'

    def files_uninstall(self):
        for file, destination in self.installerbuilder.install_files:
            yield 'Delete "{}"'.format(ntpath.join(destination, file))

    def dirs_uninstall(self):
        for dir, destination in self.installerbuilder.install_dirs:
            yield 'RMDir /r "{}"'.format(ntpath.join(destination, dir))
    
    def shortcuts_uninstall(self):
        shortcuts = self.installerbuilder.shortcuts
        if len(shortcuts) == 1:
            scname = next(iter(shortcuts))
            yield 'Delete "$SMPROGRAMS\{}.lnk"'.format(scname)
        else:
            yield 'RMDir /r "$SMPROGRAMS\${PRODUCT_NAME}"'

    def pylauncher_install(self):
        return ["Section \"PyLauncher\" sec_pylauncher",
            "    File \"launchwin${ARCH_TAG}.msi\"",
            "    ExecWait 'msiexec /i \"$INSTDIR\launchwin${ARCH_TAG}.msi\" /qb ALLUSERS=1'",
            "    Delete $INSTDIR\launchwin${ARCH_TAG}.msi",
            "SectionEnd",
           ]

    def pylauncher_help(self):
        return ["StrCmp $0 ${sec_pylauncher} 0 +2",
                "SendMessage $R0 ${WM_SETTEXT} 0 \"STR:The Python launcher. \\",
                "    This is required for ${PRODUCT_NAME} to run.\"",
               ]
########NEW FILE########
__FILENAME__ = plainmod

########NEW FILE########
__FILENAME__ = test_configuration_validator
from nose.tools import *
import os
from .. import configreader
import configparser

DATA_FILES = os.path.join(os.path.dirname(__file__), 'data_files')

def test_valid_config():
    configfile = os.path.join(DATA_FILES, 'valid_config.cfg')
    configreader.read_and_validate(configfile)

def test_valid_config_with_shortcut():
    configfile = os.path.join(DATA_FILES, 'valid_config_with_shortcut.cfg')
    configreader.read_and_validate(configfile)

@raises(configreader.InvalidConfig)
def test_invalid_config_keys():
    configfile = os.path.join(DATA_FILES, 'invalid_config_section.cfg')
    configreader.read_and_validate(configfile)

@raises(configreader.InvalidConfig)
def test_invalid_config_key():
    configfile = os.path.join(DATA_FILES, 'invalid_config_key.cfg')
    configreader.read_and_validate(configfile)

@raises(configreader.InvalidConfig)
def test_missing_config_key():
    configfile = os.path.join(DATA_FILES, 'missing_config_key.cfg')
    configreader.read_and_validate(configfile)

@raises(configparser.Error)
def test_invalid_config_file():
    configfile = os.path.join(DATA_FILES, 'not_a_config.cfg')
    configreader.read_and_validate(configfile)

########NEW FILE########
__FILENAME__ = test_copymodules
import os
import shutil
import sys
import tempfile
import unittest

pjoin = os.path.join

running_python = '.'.join(str(x) for x in sys.version_info[:3])
test_dir = os.path.dirname(__file__)
sample_path = [pjoin(test_dir, 'sample_pkgs'),
               pjoin(test_dir, 'sample_zip.egg'),
               pjoin(test_dir, 'sample_zip.egg/rootdir'),
              ]

from .utils import assert_is_file, assert_is_dir

from nsist.copymodules import copy_modules, ExtensionModuleMismatch


class TestCopyModules(unittest.TestCase):
    def setUp(self):
        self.target = tempfile.mkdtemp()
    
    def tearDown(self):
        shutil.rmtree(self.target)
    
    def test_copy_plain(self):
        copy_modules(['plainmod', 'plainpkg'], self.target, '3.3.5', sample_path)
        assert_is_file(pjoin(self.target, 'plainmod.py'))
        assert_is_dir(pjoin(self.target, 'plainpkg'))
    
    @unittest.skipIf(sys.platform.startswith("win"), "test for non-Windows platforms")
    def test_copy_wrong_platform(self):
        with self.assertRaisesRegexp(ExtensionModuleMismatch, "will not be usable on Windows"):
            copy_modules(['unix_extmod'], self.target, '3.3.5', sample_path)
        
        with self.assertRaisesRegexp(ExtensionModuleMismatch, "will not be usable on Windows"):
            copy_modules(['unix_extpkg'], self.target, '3.3.5', sample_path)
    
    @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
    def test_copy_windows(self):
        copy_modules(['win_extmod', 'win_extpkg'], self.target, running_python, sample_path)
        assert_is_file(pjoin(self.target, 'win_extmod.pyd'))
        assert_is_dir(pjoin(self.target, 'win_extpkg'))
        
    @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
    def test_copy_wrong_pyversion(self):
        with self.assertRaisesRegexp(ExtensionModuleMismatch, "on Python 4"):
            copy_modules(['win_extpkg'], self.target, '4.0.0', sample_path)
        
        with self.assertRaisesRegexp(ExtensionModuleMismatch, "on Python 4"):
            copy_modules(['win_extmod'], self.target, '4.0.0', sample_path)
    
    def test_copy_from_zipfile(self):
        copy_modules(['zippedmod2','zippedpkg2'],
                     self.target, running_python, sample_path)
#        assert_is_file(pjoin(self.target, 'zippedmod.py'))
#        assert_is_dir(pjoin(self.target, 'zippedpkg'))
        assert_is_file(pjoin(self.target, 'zippedmod2.py'))
        assert_is_dir(pjoin(self.target, 'zippedpkg2'))
    
    def test_module_not_found(self):
        with self.assertRaises(ImportError):
            copy_modules(['nonexistant'], self.target, '3.3.5', sample_path)
########NEW FILE########
__FILENAME__ = utils
from os.path import isfile, isdir, exists

def assert_is_file(path):
    assert exists(path), "%s does not exist"
    assert isfile(path), "%s exists but is not a directory."

def assert_is_dir(path):
    assert exists(path), "%s does not exist"
    assert isdir(path), "%s exists but is not a directory."

########NEW FILE########
__FILENAME__ = util
import requests

def download(url, target):
    """Download a file using requests.
    
    This is like urllib.request.urlretrieve, but requests validates SSL
    certificates by default.
    """
    r = requests.get(url, stream=True)
    r.raise_for_status()
    with open(target, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024): 
            if chunk:
                f.write(chunk)
########NEW FILE########
__FILENAME__ = __main__
from . import main
main()
########NEW FILE########
