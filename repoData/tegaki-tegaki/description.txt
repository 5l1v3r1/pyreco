ibus-tegaki
===========

Tegaki project integration in ibus.

Requirements
------------

Python         2.4         http://www.python.org
ibus           1.2         http://code.google.com/p/ibus/
tegaki-pygtk   0.3

Install
-------

($ su)
# python setup.py install --prefix /usr

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org

Welcome to the Tegaki git repository!
=====================================

Tegaki is composed of the following subprojects:

* tegaki-python: Base Python library.
* tegaki-pygtk: User-interface Python library.

* tegaki-recognize: Main program.
* tegaki-train: Character editor and training manager.
* tegaki-tools: Advanced-user and developer tools.

* ibus-tegaki: Tegaki integration in IBus.
* scim-tegaki: Tegaki integration in SCIM.

* tegaki-engines: Wagomu.
* tegaki-models: Handwriting recognition data models.

* tegaki-db: Community-based handwriting sample database.
* tegaki-lab: Handwriting recognition experimentation.
* tegaki-webcanvas: Canvas for the browser.

In order to download the latest source code, please use git.

$ git clone git://github.com/tegaki/tegaki.git

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org

scim-tegaki
===========

Tegaki project integration in SCIM.

Requirements
------------

Python         2.4         http://www.python.org
scim-python    0.1.13rc1   http://code.google.com/p/scim-python/
tegaki-pygtk   0.1

Install
-------

($ su)
# python setup.py install

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org

tegaki-db
=========

Web site to manage collections of handwriting samples written by contributors.

/!\ This package is for developers only. Simple users don't need it.

Requirements
------------

Python          2.4
Django          0.96


Setting the development environment
-----------------------------------
#See ENVIRONMENT text file for alternative build

$ cp data/conf/settings.py tegakidb/

# edit tegakidb/settings.py

$ mysql -u user -p

mysql > CREATE DATABASE tegakidb;

$ cd tegakidb/
$ ./manage.py syncdb

$ ./manage.py runserver

Then see http://localhost:8000.

Tests
-----

$ ./manage.py test

Homepage
--------

http://www.tegaki.org



tegaki-wagomu
=============

Simple handwriting recognition engine based on DTW.

Requirements
------------

Python        2.4    http://www.python.org
tegaki-python 0.3   

Compile
-------

$ python setup.py build

Better performance may be obtained by increasing the level of optimization:
$ CFLAGS="-O3" python setup.py build

On Intel/AMD, better performance can be obtained by turning on SIMD (SSE)
instructions:
$ CFLAGS="-O3 -msse" python setup.py build

Install
-------

($ su)
# python setup.py install

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org

tegaki-lab
===========

Placeholder for experiments with new recognition engines.

/!\ This package is for developers only. Simple users don't need it.

Requirements
------------

Python              2.4    http://www.python.org
tegaki-python       0.1
tegaki-pygtk        0.1

At least one of:

GHMM *              SVN    http://ghmm.sourceforge.net

Jython              2.5    http://www.jython.org
JaHmm               0.6.2  http://code.google.com/p/jahmm/

Hydroml             git    git clone http://www.mblondel.org/code/hydroml.git

[*] The Python bindings are also required.

Adding more training-data
-------------------------

Let's say we want to add training data for latin characters. The folder
structure is as follows.

data/eval/[corpus_name]/[set_name]/*.xml
data/train/[corpus_name]/[set_name]/*.xml

[corpus-name] and [set_name] can be pretty much whatever you like but it's
better to follow some kind of convention.

In case we have handwriting data for two different persons, we use
"latin-writer1" and "latin-writer2" as corpus folder names.

If each person writes three times each character, we could use "s1", "s2"
and "s3" as set folder names.

*.xml files are of the form char_code.xml where char_code is a the
unicode number of the character. For example, the file for "a" would be 97.xml.

To create the handwriting data, you can use the character editor. For example:

$ mkdir -p data/train/latin-writer1/s1
$ ./character-editor data/train/latin-writer1/s1 \
a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z

Adding a new model
------------------

Let's say we want to create a new model called basic_latin.

1) mkdir models/basic_latin
2) cp models/basic/__init__.py models/basic_latin/
3) Create a file models/basic_latin/model.py. The minimalist code is:

import os
from tegaki.arrayutils import *
import models.basic.model

class Model(models.basic.model.Model):

    def __init__(self, *args):
        models.basic.model.Model.__init__(self, *args)
        self.CORPORA = ["latin-writer1", "latin_writer2"]
        self.ROOT = os.path.join("models", "basic_latin")
        self.update_folder_paths()

4) To run through all the steps, run: ./mmanager basic_latin all

Run ./mmanager without arguments to see the help.

5) Have a look at models/basic/model.py to see what parameters and methods
   you can override. Change whatever you like to improve the accuracy.

6) Try with your own handwriting with:

./mmanager basic_latin pad

The above may yield strange results due to a bug in either pygtk or ghmm. In
that case, try:

./mmanager pad | ./mmanager basic_latin eval -s

The results appear in the console.

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org


Install
========

In Windows:
-----------

Copy the .meta and .model files to 
C:\Program Files\tegaki-recognize\models\[recognizer-name]\

In Mac OS X:
------------

Copy the .meta and .model files to 
/Library/Application Support/tegaki/models/[recognizer-name]/

UNIX
----

Run "make install".

Build model from source
=======================

This archive contains a pre-built model but if you like, you can
rebuild the model from source using "tegaki-build", available from
tegaki-tools.

$ make

Model files
===========

Model files (extension .model) contain the main handwriting model data.

Meta files
==========

Meta files (extension .meta) contain meta-data regarding model files. They
must be encoded in UTF-8. They are defined as key-value pairs, one per line.
Possible keys include:

* name: model full name (mandatory).
* shortname: name with less than 3 characters (mandatory).
* language: language code such as "ja" or "zh_CN" (optional).
* path: path of the associate model file. If the path is not specified,
        the model file is assumed to be in the same directory with the same base
        name and the .model extension. For example, if "file.meta" is present
        and it doesn't define a path key, the presence of "file.model" is
        assumed (optional).

License
========

See the COPYING file.

Homepage
========

http://www.tegaki.org


Bootstrapping
=============

This handwriting model is bootstrapped using other existing models. This process
helps to quickly create a large model, using data of characters' components.
This comes at a cost of potentially ill fitting models, as other sources might
employ different stroke order or other particular writing styles. Auto-generated
models can be easily overwritten by supplying a manual data set within the
source file.

Building
--------
This archive contains a pre-built .xml file but if you like, you can
re-run the bootstrapping process from source using "tegaki-bootstrap", available
from tegaki-tools. This requires external dependency cjklib
(http://code.google.com/p/cjklib).

$ tegaki-bootstrap -q --domain=BIG5 --locale=T --max-samples=1 \
    handwriting-zh_TW.xml \
    -c ../data/train/traditional-chinese/handwriting-zh_TW.xml \
    -d ../data/train/traditional-chinese/out-domain \
    -t ../data/train/simplified-chinese/handwriting-zh_CN.xml \
    -t ../data/train/japanese/handwriting-ja.xml

To build the final model file, please see README.txt.

$ tegaki-build -c handwriting-zh_TW.xml zinnia handwriting-zh_TW.meta

Evalutation
-----------
To evaluate the bootstrapped model against some test data, run:

$ tegaki-eval -d ../data/test/traditional-chinese/ zinnia "Traditional Chinese"

tegaki-pygtk
============

Base user interface library for the Tegaki project.

Requirements
------------

Python              2.4    http://www.python.org
pygtk               2.10   http://www.pygtk.org
tegaki-python       0.2

Install
-------

($ su)
# python setup.py install

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org

tegaki-python
=============

Base Python library for the Tegaki project.

Requirements
------------

Python       2.4    http://www.python.org
Zinnia *     0.05   http://zinnia.sourceforge.net/

[*] The Python bindings are also required.

Install
-------

($ su)
# python setup.py install

Developer
---------

If you intend to contribute to Tegaki, the most convenient way to install it
is to add the following to your ~/.bashrc file.

tegakiroot=/path/to/hwr/
export PYTHONPATH=$tegakiroot/tegaki-python:$tegakiroot/tegaki-pygtk

In order to download the latest source code, please use git.

$ git clone http://www.mblondel.org/code/hwr.git

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org

In order to prepare an app bundle for OSX
-----------------------------------------

1. Install macports

2. Edit /opt/local/share/macports/Tcl/port1.0/portconfigure.tcl

and change "default configure.ldflags" to:

default configure.ldflags   {"-L${prefix}/lib -Xlinker -headerpad_max_install_names"}

This leaves more space in the library headers for py2app.

3. Install py25-gtk. Make sure that tegaki-recognize works.

4. Run osx/create_app_bundle.sh then osx/create_dmg.sh

tegaki-recognize
=================

Tegaki project integration in the desktop.

Requirements
------------

tegaki-pygtk    0.2

Install
-------

($ su)
# python setup.py install

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org


1. Add the following at the beginning of bin/tegaki-recognize.
---
import os
import sys

def main_dir():
    return os.path.dirname(sys.executable)

def addpath(path, value):
    if not path in os.environ or len(os.environ[path]) == 0:
        os.environ[path] = value
    else:
         os.environ[path] = value + os.path.pathsep + os.environ[path]

addpath("TEGAKI_MODEL_PATH", os.path.join(main_dir(), "models"))
addpath("TEGAKI_ENGINE_PATH", os.path.join(main_dir(), "engines"))


2. Run "python setup.py py2exe".

3. Copy tegaki engines (tegaki*.py) to dist/engines/.

4. Copy etc/, lib/ and share/ from your GTK installation to dist/.

5. Compile tegaki-recognize.iss with Inno Setup (http://www.jrsoftware.org/isinfo.php).
tegaki-tools
============

A set of command-line tools for Tegaki.

Tools
------

* tegaki-boostrap: bootstrap a character collection using similar collections
                   and knowledge about the characters shape data.

* tegaki-build:    build/train handwriting recognition models.

* tegaki-convert:  convert and/or concat character collection files.

* tegaki-eval:     evaluate handwriting recognition models against test data.

* tegaki-render:   convert character file to an image or video.

* tegaki-stats:    show various statistics about a character collection.

Requirements
------------

tegaki-python    0.3
tegaki-pygtk     0.3

Install
-------

($ su)
# python setup.py install

Additionally, if you would like GIF support in tegaki-render:

$ cd tegaki-gifenc
$ python setup.py build
($ su)
# python setup.py install

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org


tegaki-train
============

Train Tegaki with your own handwriting.

Requirements
------------

tegaki-pygtk    0.2

Install
-------

($ su)
# python setup.py install

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org


tegaki-webcanvas
================

Canvas written in Javascript using the <canvas> HTML element.

/!\ This package is for developers only. Simple users don't need it.

License
-------

This package is distributed under the terms of the GNU General Public
License. See the COPYING file for more information.

Homepage
--------

http://www.tegaki.org

