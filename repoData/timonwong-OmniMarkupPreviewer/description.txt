OmniMarkupPreviewer Changes
---------------------------

**v2.0.8 (04/15/2014)**

* Fix Sublime Text 2 compatibility (crash).

**v2.0.7 (04/14/2014)**

* Fix unreliable default setting overriding, which confuses a lot of users when
  customizing their settings.
* Prevent preview from the console, which will simply lead to crash.

**v2.0.6 (01/27/2014)**

* Fix Sublime Text 2 compatibility (markdown).

**v2.0.5 (01/24/2014)**

* MathJax library is now bundled directly instead of on demand downloading.
* Python-Markdown module now upgraded to v2.4.
* Fix incompatibility when using Sublime Text 3 under XFCE.

**v2.0.4 (08/10/2013)**

* Fix ruby gems loading in OSX (Required by RDoc, AsciiDoc, Org Mode and MediaWiki).
* Add AsciiDoc syntax support.
* Ensure default setting for `export_options` when not available.

**v2.0.3 (07/18/2013)**

* Fix html exporting when file contains images in Sublime Text 3.
* Fix `smart_strong` and `meta_data` extention name for markdown.

**v2.0.2 (06/17/2013)**

* Update cherrypy server, add detail information if socket could not be created.
* Add support for file URIs in images path.

**v2.0.1 (05/12/2013)**

* Strip YAML frontmatter for Markdown files automatically.
* Check syntax name as well as filename extension for MediaWiki files.

**v2.0 (03/31/2013)**

* Added support for [Org Mode](http://orgmode.org) (Requires ruby, and gem
  `org-ruby` should be installed).
* Added support for [MediaWiki](http://www.mediawiki.org/) (Requires ruby, as
  well as gem `wikicloth`).
* Added support for [AsciiDoc](http://www.methods.co.nz/asciidoc/) (Requires ruby,
  as well as gem `asciidoctor`).
* Reviving view (redirecting to the new location) automatically after reconnected.
* Prevent Package Control for Sublime Text 3 installing this package as
  `.sublime-package` (zip archive).
* Fixed broken `ignored_renderer` setting.
* Improved Sublime Text 3 compatibility.

**v1.20 (03/15/2013)**

* Add support Sublime Text 3 (Experimental).
* Add new context command `Copy Markup as HTML`.
* Remove unused command `Sweep Cache (Remove Unused)`.
* Auto scroll now works correctly for documents contain images and MathJax equations.

**v1.12 (03/13/2013)**

* Renderes are now loaded asynchronously on startup (faster Sublime Text 2 startup).
* Add litcoffee support.

**v1.11 (12/24/2012)**

* Fix incorrect auto-scrolling behavior while pages contain images or mathjax equations.

**v1.10 (11/22/2012)**

* Fix `UnicodeEncodeError` exception while image file path conatins non-ascii characters.
* Fix missing background image for `hr` element from exported htmls.

**v1.9 (11/12/2012)**

* Provide support for exporting result to html file, images on disk will be inlined (data-url).
  You can customize the settings of the exporter through the `"export_options"` option.
* Fix incorrect code block detecting (due to wrong tab length setting) in
  markdown renderer.

**v1.8 (11/10/2012)**

* OmniMarkupPreview is now able to use user defined browser command for launching
  web browser, through the `"browser_command"` option.
* Unopened file can be previewed correctly in browser without returning "404" error.
* Update cherrypy module in order to fix a random server crash on startup in
  Windows (Refer to [CherrPy #1016])

[CherrPy #1016]: https://bitbucket.org/cherrypy/cherrypy/issue/1016/windowserror-error-6-the-handle-is-invalid

**v1.7 (11/07/2012)**

* Add option `"server_host"` for server listening address.
* Now OmniMarkupPreviewer doesn't require restart on some settings change anymore.
* On demand downloader for mathjax should work under Linux now (using `wget` or `curl`).
* Unsaved textile documents can now be previewed as well.

**v1.6 (11/03/2012)**

* [MathJax] support is now added (through the `"mathjax_enabled"` option), you can
  use `$..$` and `\(..\)` delimiters for inline math, `$$..$$` and `\[..\]` delimiters
  for display math. [MathJax] libraries will be downloaded on demand. for more
  information, visit [my blog](http://theo.im/blog/2012/11/03/latex-support-in-omnimarkuppreviewer/).
* Add support to custom the behavior of markdown renderer (through the
  `"renderer_options-MarkdownRenderer"` option).
* Responsive width on browser width change.
* Much better http server performance (Thanks to the [CherryPy] project).

[MathJax]: http://www.mathjax.org
[CherryPy]: http://www.cherrypy.org

**v1.5.1 (11/01/2012)**

* Fixed a bug that all renderers wouldn't work if any renderer raised exception
  while loading.

**v1.5 (10/31/2012)**

* Images on local machine can now be displayed corectlly.
* New `"ajax_polling_interval"` option.
* Allow users to use their own templates.

**v1.4 (10/28/2012)**

* Code blocks from [GitHub flavored markdown] is supported now, through the
  [Fenced Code Blocks Extension].
* [PHP Markdown Tables] support is added, through the [Tables Extension].
* Support strikeout extension syntax (Pandoc and GitHub) for markdown: `This ~~is deleted text.~~`
* Added `"ignored_renderers"` option to settings, in order to ignore specific
  markup renderers.

[GitHub flavored markdown]: http://github.github.com/github-flavored-markdown/
[Fenced Code Blocks Extension]: http://packages.python.org/Markdown/extensions/fenced_code_blocks.html
[PHP Markdown Tables]: http://michelf.ca/projects/php-markdown/extra/#table
[Tables Extension]: http://packages.python.org/Markdown/extensions/tables.html

**v1.3 (10/27/2012)**

* Added syntax highlight support for Markdown, through the [CodeHilite Extension].
* Unsaved buffer can now be previewed without error.
* Updated github template.

[CodeHilite Extension]: http://packages.python.org/Markdown/extensions/code_hilite.html

**v1.2 (10/16/2012)**

* OmniMarkupPreviewer now can be installed from Package Control under Linux.

**v1.1 (10/16/2012)**

* Added support for [RDoc](http://rdoc.sourceforge.net/) (Requires ruby).
* Added support for [Pod](http://search.cpan.org/dist/perl/pod/perlpod.pod) (Requires perl).
* Auto scroll while text added/deleted.

**v1.0.1 (10/14/2012)**

* OSX support added to Package Control.
* Added ability to clean cache.

**v1.0 (10/14/2012)**

* First release.

# Donors

Here is a list of donors, thanks all for your contribution/contributions!

(If you would like your entry to be updated or be removed, please contact me)

* Gregory Szilagyi

Introduction
------------

The desktop package provides desktop environment detection and resource
opening support for a selection of common and standardised desktop
environments.

Currently, in Python's standard library, there is apparently no coherent,
cross-platform way of getting the user's environment to "open" files or
resources (showing such files in browsers or editors, for example) when
requested by a Python program. There is an os.startfile function which works
for Windows, but no equivalent function for other desktop environments - the
webbrowser module seems to employ alternative mechanisms in choosing and
running external programs and presumably does not seek to provide general
support for non-URL resources anyway.  

Since desktop environments like KDE and GNOME provide mechanisms for running
browsers and editors according to the identified type of a file or resource,
just as Windows "runs" files or resources, it is appropriate to have a module
which accesses these mechanisms. It is this kind of functionality that the
desktop package aims to support. Note that this approach is arguably better
than that employed by the webbrowser module since most desktop environments
already provide mechanisms for configuring and choosing the user's preferred
programs for various activities, whereas the webbrowser module makes
relatively uninformed guesses (for example, opening Firefox on a KDE desktop
configured to use Konqueror as the default browser).

Some ideas for desktop detection (XFCE) and URL opening (XFCE, X11) were
obtained from the xdg-utils project which seeks to implement programs
performing similar functions to those found in the desktop module. The
xdg-utils project can be found here:

http://portland.freedesktop.org/

Other information regarding desktop icons and menus, screensavers and MIME
configuration can also be found in xdg-utils.

Contact, Copyright and Licence Information
------------------------------------------

No Web page has yet been made available for this work, but the author can be
contacted at the following e-mail address:

paul@boddie.org.uk

Copyright and licence information can be found in the docs directory - see
docs/COPYING.txt, docs/lgpl-3.0.txt and docs/gpl-3.0.txt for more information.

Notes
-----

Notes on desktop application/environment support:

KDE           Supports file and URL opening using kfmclient, where the openURL
              command opens the resource and the exec command runs the
              resource.

KDE 4         Similar to KDE but uses kioclient instead of kfmclient.

GNOME         Supports file and URL opening using gnome-open.

XFCE          Supports file and URL opening using exo-open.

ROX-Filer     Supports file opening using "rox <filename>" but not URL
              opening.

New in desktop 0.4.1 (Changes since desktop 0.4)
------------------------------------------------

  * Added KDE 4 and Lubuntu support contributed by Jérôme Laheurte.

New in desktop 0.4 (Changes since desktop 0.3)
----------------------------------------------

  * Improved docstrings.
  * Fixed support for examining the root window.
  * Changed the licence to the LGPL version 3 (or later).

New in desktop 0.3 (Changes since desktop 0.2.4)
------------------------------------------------

  * Made desktop a package.
  * Added support for graphical dialogue boxes through programs such as
    kdialog, zenity and Xdialog.
  * Added support for inspecting desktop windows (currently only for X11).

New in desktop 0.2.4 (Changes since desktop 0.2.3)
--------------------------------------------------

  * Added XFCE support (with advice from Miki Tebeka).
  * Added Ubuntu Feisty (7.04) package support.

New in desktop 0.2.3 (Changes since desktop 0.2.2)
--------------------------------------------------

  * Added Python 2.3 support (using popen2 instead of subprocess).

New in desktop 0.2.2 (Changes since desktop 0.2.1)
--------------------------------------------------

  * Changed the licence to LGPL.

New in desktop 0.2.1 (Changes since desktop 0.2)
------------------------------------------------

  * Added Debian/Ubuntu package support.

New in desktop 0.2 (Changes since desktop 0.1)
----------------------------------------------

  * Added support for waiting for launcher processes.
  * Added a tests directory.

Release Procedures
------------------

Update the desktop __version__ attribute.
Change the version number and package filename/directory in the documentation.
Update the release notes (see above).
Update the package information.
Check the release information in the PKG-INFO file.
Check the setup.py file.
Tag, export.
Archive, upload.
Update PyPI entry.

Making Packages
---------------

To make Debian-based packages:

  1. Create new package directories under packages if necessary.
  2. Make a symbolic link in the distribution's root directory to keep the
     Debian tools happy:

     ln -s packages/ubuntu-hoary/python2.4-desktop/debian/
     ln -s packages/ubuntu-feisty/python-desktop/debian/
     ln -s packages/ubuntu-hardy/python-desktop/debian/

  3. Run the package builder:

     dpkg-buildpackage -rfakeroot

  4. Locate and tidy up the packages in the parent directory of the
     distribution's root directory.

Installing Python-Markdown
==========================

As an Admin/Root user on your system do:

    pip install markdown

Or for more specific instructions, view the documentation in `docs/install.txt`
or on the website at <http://packages.python.org/Markdown/>.

Copyright 2007, 2008 The Python Markdown Project (v. 1.7 and later)  
Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b)  
Copyright 2004 Manfred Stienstra (the original version)  

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    
*   Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
*   Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
*   Neither the name of the <organization> nor the
    names of its contributors may be used to endorse or promote products
    derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE PYTHON MARKDOWN PROJECT ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL ANY CONTRIBUTORS TO THE PYTHON MARKDOWN PROJECT
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.


[Python-Markdown][]
===================

This is a Python implementation of John Gruber's [Markdown][]. 
It is almost completely compliant with the reference implementation,
though there are a few known issues. See [Features][] for information 
on what exactly is supported and what is not. Additional features are 
supported by the [Available Extensions][].

[Python-Markdown]: http://packages.python.org/Markdown/
[Markdown]: http://daringfireball.net/projects/markdown/
[Features]: http://packages.python.org/Markdown/index.html#Features
[Available Extensions]: http://packages.python.org/Markdown/extensions/index.html


Documentation
-------------

Installation and usage documentation is available in the `docs/` directory
of the distribution and on the project website at 
<http://packages.python.org/Markdown/>.

Support
-------

You may ask for help and discuss various other issues on the [mailing list][] and report bugs on the [bug tracker][].

[mailing list]: http://lists.sourceforge.net/lists/listinfo/python-markdown-discuss
[bug tracker]: http://github.com/waylan/Python-Markdown/issues 


About Creoleparser
==================

Creoleparser is a Python implementation of a parser for the Creole wiki markup language.

For more information please visit:

http://purl.oclc.org/creoleparser


============================================
 ``docutils/parsers/rst/include`` Directory
============================================

This directory contains standard data files intended for inclusion in
reStructuredText documents.  To access these files, use the "include"
directive with the special syntax for standard "include" data files,
angle brackets around the file name::

    .. include:: <isonum.txt>

See the documentation for the `"include" directive`__ and
`reStructuredText Standard Substitution Definition Sets`__ for
details.

__ http://docutils.sf.net/docs/ref/rst/directives.html#include
__ http://docutils.sf.net/docs/ref/rst/substitutions.html

======================
 README: Docutils 0.9
======================

:Author: David Goodger
:Contact: goodger@python.org
:Date: $Date$
:Web site: http://docutils.sourceforge.net/
:Copyright: This document has been placed in the public domain.

.. contents::


Quick-Start
===========

This is for those who want to get up & running quickly.

1. Docutils requires Python (version 2.4 or later), available from

     http://www.python.org/

   See Requirements_ below for details.

2. Use the latest Docutils code.  Get the code from the `Subversion
   repository`_ or from the snapshot:

     http://docutils.svn.sourceforge.net/viewvc/docutils/trunk/docutils/?view=tar

   See `Releases & Snapshots`_ below for details.

3. Unpack the tarball in a temporary directory (**not** directly in
   Python's ``site-packages``), go to the directory created by expanding
   the archive, and run ``setup.py install`` with admin rights. On
   Windows systems it may be sufficient to double-click ``install.py``.

   See Installation_ below for details.

4. Use the front-end scripts to convert reStructuredText documents.
   Try for example::

       rst2html.py FAQ.txt FAQ.html         (Unix)
       python tools/rst2html.py FAQ.txt FAQ.html  (Windows)

   See Usage_ below for details.


Purpose
=======

The purpose of the Docutils project is to create a set of tools for
processing plaintext documentation into useful formats, such as HTML,
XML, and LaTeX.  Support for the following sources has been
implemented:

* Standalone files.

* `PEPs (Python Enhancement Proposals)`_.

Support for the following sources is planned:

* Inline documentation from Python modules and packages, extracted
  with namespace context.

* Email (RFC-822 headers, quoted excerpts, signatures, MIME parts).

* Wikis, with global reference lookups of "wiki links".

* Compound documents, such as multiple chapter files merged into a
  book.

* And others as discovered.

.. _PEPs (Python Enhancement Proposals):
   http://www.python.org/peps/pep-0012.html


Releases & Snapshots
====================

While we are trying to follow a "release early & often" policy,
features are added very frequently.  Since the code in the Subversion
repository is usually in a bug-free state, we recommend that you use
the current snapshot (which is usually updated within an hour of
changes being committed to the repository):

* Snapshot of Docutils code, documentation, front-end tools, and
  tests:
  http://docutils.svn.sourceforge.net/viewvc/docutils/trunk/docutils/?view=tar

* Snapshot of the Sandbox (experimental, contributed code):
  http://docutils.svn.sourceforge.net/viewvc/docutils/trunk/sandbox/?view=tar

To keep up to date on the latest developments, download fresh copies of
the snapshots regularly or use a working copy of the
`Subversion repository`_.

.. _Subversion repository: docs/dev/repository.html


Requirements
============

To run the code, Python_ must be installed.
Docutils is compatible with Python versions from 2.4 up to 2.7 and
versions 3.1 and 3.2 (cf. `PythonÂ 3 compatibility`_).

Docutils uses the following packages for enhanced functionality, if they are
installed:

* The `Python Imaging Library`_, or PIL, is used for some image
  manipulation operations.

* The `Pygments`_ syntax highlighter is used for content of `code`
  directives and roles.

.. _Python: http://www.python.org/.
.. _Python Imaging Library: http://www.pythonware.com/products/pil/
.. _Pygments: http://pygments.org/


PythonÂ 3 compatibility
----------------------

The Docutils codebase is written for PythonÂ 2 and uses "on-demand"
translation for `porting to PythonÂ 3`_.

* The `setup.py` script generates PythonÂ 3 compatible sources in
  ``build/`` and tests in ``tests3/`` sub-directories during
  installation_ with PythonÂ 3.

* The scripts in the ``tools/`` sub-directory work with all supported
  Python versions without conversion.

* To convert the sources without installing (e.g. for testing), run
  ``python3 setup.py build``.

* When editing the source, do changes on the PythonÂ 2 versions of the
  files and re-run the build command.

Using Docutils with PythonÂ 3.x is less tested and might still have some
issues.

.. _porting to PythonÂ 3: http://docs.python.org/py3k/howto/pyporting.html


Project Files & Directories
===========================

* README.txt: You're reading it.

* COPYING.txt: Public Domain Dedication and copyright details for
  non-public-domain files (most are PD).

* FAQ.txt: Frequently Asked Questions (with answers!).

* RELEASE-NOTES.txt: Summary of the major changes in recent releases.

* HISTORY.txt: A detailed change log, for the current and all previous
  project releases.

* BUGS.txt: Known bugs, and how to report a bug.

* THANKS.txt: List of contributors.

* setup.py: Installation script.  See "Installation" below.

* install.py: Quick & dirty installation script.  Just run it.  For
  any kind of customization or help though, setup.py must be used.

* docutils: The project source directory, installed as a Python
  package.

* docs: The project documentation directory.  Read ``docs/index.txt``
  for an overview.

* docs/user: The project user documentation directory.  Contains the
  following documents, among others:

  - docs/user/tools.txt: Docutils Front-End Tools
  - docs/user/latex.txt: Docutils LaTeX Writer
  - docs/user/rst/quickstart.txt: A ReStructuredText Primer
  - docs/user/rst/quickref.html: Quick reStructuredText (HTML only)

* docs/ref: The project reference directory.
  ``docs/ref/rst/restructuredtext.txt`` is the reStructuredText
  reference.

* licenses: Directory containing copies of license files for
  non-public-domain files.

* tools: Directory for Docutils front-end tools.  See
  ``docs/user/tools.txt`` for documentation.

* test: Unit tests.  Not required to use the software, but very useful
  if you're planning to modify it.  See `Running the Test Suite`_
  below.

Generated directories when installing under PythonÂ 3:

* build: Converted sources.

* test3: Converted tests.


Installation
============

The first step is to expand the ``.tgz`` archive in a temporary
directory (**not** directly in Python's ``site-packages``).  It
contains a distutils setup file "setup.py".  OS-specific installation
instructions follow.


GNU/Linux, BSDs, Unix, Mac OS X, etc.
-------------------------------------

1. Open a shell.

2. Go to the directory created by expanding the archive::

       cd <archive_directory_path>

3. Install the package (you may need root permissions to complete this
   step)::

       su
       (enter admin password)
       python setup.py install

   If the python executable isn't on your path, you'll have to specify
   the complete path, such as ``/usr/local/bin/python``.

   To install for a specific Python version, use this version in the
   setup call, e.g. ::

       python3.1 setup.py install

   To install for different Python versions, repeat stepÂ 3 for every
   required version. The last installed version will be used in the
   `shebang line`_ of the ``rst2*.py`` wrapper scripts.

   .. _shebang line: http://en.wikipedia.org/wiki/Shebang_%28Unix%29

Windows
-------

Just double-click ``install.py``.  If this doesn't work, try the
following:

1. Open a DOS Box (Command Shell, MS-DOS Prompt, or whatever they're
   calling it these days).

2. Go to the directory created by expanding the archive::

       cd <archive_directory_path>

3. Install the package::

       <path_to_python.exe>\python setup.py install

   To install for a specific python version, specify the Python
   executable for this version.

   To install for different Python versions, repeat stepÂ 3 for every
   required version.

Optional steps:

* `running the test suite`_

* `converting the documentation`_


Usage
=====

There are many front-end tools in the unpacked "tools" subdirectory.
Installation under Unix places copies in the PATH.
You may want to begin with the "rst2html.py" front-end tool.  Most
tools take up to two arguments, the source path and destination path,
with STDIN and STDOUT being the defaults.  Use the "--help" option to
the front-end tools for details on options and arguments.  See
Docutils Front-End Tools (``docs/user/tools.txt``) for full documentation.

The package modules are continually growing and evolving.  The
``docutils.statemachine`` module is usable independently.  It contains
extensive inline documentation (in reStructuredText format of course).

Contributions are welcome!


Converting the documentation
============================

After unpacking and installing the Docutils package, the following
shell commands will generate HTML for all included documentation::

    cd <archive_directory_path>/tools
    ./buildhtml.py ../

On Windows systems, type::

    cd <archive_directory_path>\tools
    python buildhtml.py ..

The final directory name of the ``<archive_directory_path>`` is
"docutils" for snapshots.  For official releases, the directory may be
called "docutils-X.Y.Z", where "X.Y.Z" is the release version.
Alternatively::

    cd <archive_directory_path>
    tools/buildhtml.py --config=tools/docutils.conf          (Unix)
    python tools\buildhtml.py --config=tools\docutils.conf   (Windows)

Some files may generate system messages (warnings and errors).  The
``docs/user/rst/demo.txt`` file (under the archive directory) contains
five intentional errors.  (They test the error reporting mechanism!)


Running the Test Suite
======================

The test suite is documented in `Docutils Testing`_ (docs/dev/testing.txt).

To run the entire test suite, open a shell and use the following
commands::

    cd <archive_directory_path>/test
    ./alltests.py

Under Windows, type::

    cd <archive_directory_path>\test
    python alltests.py

For testing with PythonÂ 3 use the converted test suite::

    cd <archive_directory_path>/test3
    python3 alltests.py


You should see a long line of periods, one for each test, and then a
summary like this::

    Ran 1111 tests in 24.653s

    OK
    Elapsed time: 26.189 seconds

The number of tests will grow over time, and the times reported will
depend on the computer running the tests.  The difference between the
two times represents the time required to set up the tests (import
modules, create data structures, etc.).

If any of the tests fail, please `open a bug report`_, `send email`_,
or post a message via the `web interface`_ (see `Bugs <BUGS.html>`_).
Please include all relevant output, information about your operating
system, Python version, and Docutils version.  To see the Docutils
version, use one of the ``rst2*`` front ends or ``tools/quicktest.py``
with the ``--version`` option, e.g.::

    cd ../tools
    ./quicktest.py --version

Windows users type these commands::

    cd ..\tools
    python quicktest.py --version


.. _Docutils Testing: http://docutils.sourceforge.net/docs/dev/testing.html
.. _open a bug report:
   http://sourceforge.net/tracker/?group_id=38414&atid=422030
.. _send email: mailto:docutils-users@lists.sourceforge.net
   ?subject=Test%20suite%20failure
.. _web interface: http://post.gmane.org/post.php
   ?group=gmane.text.docutils.user&subject=Test+suite+failure


Getting Help
============

If you have questions or need assistance with Docutils or
reStructuredText, please post a message to the Docutils-users_ mailing
list.

.. _Docutils-users: docs/user/mailing-lists.html#docutils-users


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:

Except where otherwise noted (default/iepngfix.htc), all files in this
directory have been released into the Public Domain.

These files are based on files from S5 1.1, released into the Public
Domain by Eric Meyer.  For further details, please see
http://www.meyerweb.com/eric/tools/s5/credits.html.

About Genshi
============

Genshi is a Python library that provides an integrated set of
components for parsing, generating, and processing HTML, XML or other
textual content for output generation on the web. The major feature is
a template language, which is heavily inspired by Kid.

For more information please see the documentation in the `doc`
directory, and visit the Genshi web site:

  <http://genshi.edgewall.org/>

About Creoleparser
==================

Creoleparser is a Python implementation of a parser for the Creole wiki markup language.

For more information please visit:

http://purl.oclc.org/creoleparser


============================================
 ``docutils/parsers/rst/include`` Directory
============================================

This directory contains standard data files intended for inclusion in
reStructuredText documents.  To access these files, use the "include"
directive with the special syntax for standard "include" data files,
angle brackets around the file name::

    .. include:: <isonum.txt>

See the documentation for the `"include" directive`__ and
`reStructuredText Standard Substitution Definition Sets`__ for
details.

__ http://docutils.sf.net/docs/ref/rst/directives.html#include
__ http://docutils.sf.net/docs/ref/rst/substitutions.html

Except where otherwise noted (default/iepngfix.htc), all files in this
directory have been released into the Public Domain.

These files are based on files from S5 1.1, released into the Public
Domain by Eric Meyer.  For further details, please see
http://www.meyerweb.com/eric/tools/s5/credits.html.

About Genshi
============

Genshi is a Python library that provides an integrated set of
components for parsing, generating, and processing HTML, XML or other
textual content for output generation on the web. The major feature is
a template language, which is heavily inspired by Kid.

For more information please see the documentation in the `doc`
directory, and visit the Genshi web site:

  <http://genshi.edgewall.org/>

This is release branch v2.1 of MathJax

# MathJax

## Beautiful math in all browsers

MathJax is an open-source JavaScript display engine for LaTeX, MathML, and
AsciiMath notation that works in all modern browsers.  It was designed with
the goal of consolidating the recent advances in web technologies into a
single, definitive, math-on-the-web platform supporting the major browsers
and operating systems.  It requires no setup on the part of the user (no
plugins to download or software to install), so the page author can write
web documents that include mathematics and be confident that users will be
able to view it naturally and easily.  Simply include MathJax and some
mathematics in a web page, and MathJax does the rest.

Some of the main features of MathJax include:

- High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages

- Supported in most browsers with no plug-ins, extra fonts, or special
  setup for the reader

- Easy for authors, flexible for publishers, extensible for developers

- Supports math accessibility, cut-and-paste interoperability, and other
  advanced functionality

- Powerful API for integration with other web applications

See <http://www.mathjax.org/> for additional details.


## Installation and Usage

The MathJax installation and usage documentation is available in the
`docs/html` directory of the MathJax distribution (see
`docs/html/index.html` for the starting point).  The documents are also
available on the MathJax web site on line at <http://www.mathjax.org/resources/docs/>.


## Community

The main MathJax website is <http://www.mathjax.org>, and it includes
announcements and other important information.  MathJax is maintained and
distributed on GitHub at <http://github.com/mathjax/MathJax>.  A user forum
for asking questions and getting assistance is hosted at Google, and the
bug tracker is hosted at GitHub:

Bug tracker:         <https://github.com/mathjax/MathJax/issues>  
MathJax-Users Group: <http://groups.google.com/group/mathjax-users>

Before reporting a bug, please check that it has not already been reported.
Also, please use the bug tracker for reporting bugs rather than the help forum.

OmniMarkupPreviewer
===================

Description
-----------

OmniMarkupPreviewer is a plugin for both [Sublime Text 2] and [Sublime Text 3]
that preview markups in web browsers. OmniMarkupPreviewer renders markups into
htmls and send it to web browser in the backgound, which enables a live preview.
Besides, OmniMarkupPreviewer provide support for exporting result to
html file as well.

[Sublime Text 2]: http://www.sublimetext.com/2
[Sublime Text 3]: http://www.sublimetext.com/3

OmniMarkupPreviewer has builtin support following markups:

* [Markdown](http://daringfireball.net/projects/markdown/)
* [reStructuredText](http://docutils.sourceforge.net/rst.html)
* [WikiCreole](http://wikicreole.org/)
* [Textile](http://www.textism.com/tools/textile/)
* [Pod](http://search.cpan.org/dist/perl/pod/perlpod.pod) (Requires Perl >= `5.10`
  and can be found in `PATH`, if the perl version < `5.10`, `Pod::Simple` should be
  installed from `CPAN`.)
* [RDoc](http://rdoc.sourceforge.net/) (Requires `ruby` in your `PATH`)
* [Org Mode](http://orgmode.org) (Requires `ruby`, and gem `org-ruby` should be installed)
* [MediaWiki](http://www.mediawiki.org/) (Requires `ruby`, as well as gem `wikicloth`)
* [AsciiDoc](http://www.methods.co.nz/asciidoc/) (Requires `ruby`, as well as gem `asciidoctor`)
* Literate Haskell


### Donation

If you find my work useful, please consider buying me a cup of coffee, all
donations are much appreciated :)

[![Donate via PayPal](https://dl.dropbox.com/u/2451120/donate-with-paypal.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=TD4HF4X2R53NE)

Installation
------------

### With the Package Control plugin
The easiest way to install OmniMarkupPreviewer is through [Package Control].

[Package Control]: http://wbond.net/sublime_packages/package_control

Once you have Package Control installed, restart Sublime Text.

1. Bring up the Command Palette (<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd>
   on Windows and Linux. <kbd>â</kbd>+<kbd>â§</kbd>+<kbd>P</kbd> on OS X).
2. Type "Install" and select "Package Control: Install Package".
3. Select "OmniMarkupPreviewer" from list.

The advantage of using Package Control is that it will keep OmniMarkupPreviewer
up to date automatically.


### Manual Install
**Without Git:**
[Download](https://github.com/timonwong/OmniMarkupPreviewer) the latest source
code, and extract to the Packages directory.

**With Git:**
Type the following command in your Sublime Text Packages directory:

`git clone git://github.com/timonwong/OmniMarkupPreviewer.git`

The "Packages" directory for Sublime Text 2 is located at:

* **Windows:**  `%APPDATA%\Sublime Text 2\Packages\`
* **Linux:**    `~/.config/sublime-text-2/Packages/`
* **OS X:**     `~/Library/Application Support/Sublime Text 2/Packages/`

And for the Sublime Text 3:

* **Windows:**  `%APPDATA%\Sublime Text 3\Packages\`
* **Linux:**    `~/.config/sublime-text-3/Packages/`
* **OS X:**     `~/Library/Application Support/Sublime Text 3/Packages/`


Usage
-----

### Key Bindings

The default key bindings:

**Windows, Linux:**

* <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>O</kbd>: Preview Markup in Browser.
* <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>X</kbd>: Export Markup as HTML.
* <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd>: Copy Markup as HTML.

**OSX:**

* <kbd>â</kbd>+<kbd>â¥</kbd>+<kbd>O</kbd>: Preview Markup in Browser.
* <kbd>â</kbd>+<kbd>â¥</kbd>+<kbd>X</kbd>: Export Markup as HTML.
* <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd>: Copy Markup as HTML.

### Command Palette

Available OmniMarkupPreviewer commands in the command palette:

* `OmniMarkupPreviewer: Preview Current Markup in Browser`
* `OmniMarkupPreviewer: Export Current Markup as HTML`
* `OmniMarkupPreviewer: Empty Cache`


What's New
----------

**For a complete list of changes, see [CHANGELOG.md](./CHANGELOG.md)**

**v2.0.8 (04/15/2014)**

* Fix Sublime Text 2 compatibility (crash).

**v2.0.7 (04/14/2014)**

* Fix unreliable default setting overriding, which confuses a lot of users when
  customizing their settings.
* Prevent preview from the console, which will simply lead to crash.

**v2.0.6 (01/27/2014)**

* Fix Sublime Text 2 compatibility (markdown).

**v2.0.5 (01/24/2014)**

* MathJax library is now bundled directly instead of on demand downloading.
* Python-Markdown module now upgraded to v2.4.
* Fix incompatibility when using Sublime Text 3 under XFCE.

**v2.0.4 (08/10/2013)**

* Fix ruby gems loading in OSX (Required by RDoc, AsciiDoc, Org Mode and MediaWiki).
* Add AsciiDoc syntax support.
* Ensure default setting for `export_options` when not available.

**v2.0.3 (07/18/2013)**

* Fix html exporting when file contains images in Sublime Text 3.
* Fix `smart_strong` and `meta_data` extention name for markdown.

**v2.0.2 (06/17/2013)**

* Update cherrypy server, add detail information if socket could not be created.
* Add support for file URIs in images path.

**v2.0.1 (05/12/2013)**

* Strip YAML frontmatter for Markdown files automatically.
* Check syntax name as well as filename extension for MediaWiki files.

**v2.0 (03/31/2013)**

* Added support for [Org Mode](http://orgmode.org) (Requires ruby, and gem
  `org-ruby` should be installed).
* Added support for [MediaWiki](http://www.mediawiki.org/) (Requires ruby, as
  well as gem `wikicloth`).
* Added support for [AsciiDoc](http://www.methods.co.nz/asciidoc/) (Requires ruby,
  as well as gem `asciidoctor`).
* Reviving view (redirecting to the new location) automatically after reconnected.
* Prevent Package Control for Sublime Text 3 installing this package as
  `.sublime-package` (zip archive).
* Fixed broken `ignored_renderer` setting.
* Improved Sublime Text 3 compatibility.

**v1.20 (03/15/2013)**

* Add support Sublime Text 3 (Experimental).
* Add new context command `Copy Markup as HTML`.
* Remove unused command `Sweep Cache (Remove Unused)`.
* Auto scroll now works correctly for documents contain images and MathJax equations.

**v1.12 (03/13/2013)**

* Renderes are now loaded asynchronously on startup (faster Sublime Text 2 startup).
* Add litcoffee support.


License
-------

This plugin released under MIT License:

    Copyright (c) 2013 Timon Wong

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

Donors
------

[DONORS.md](./DONORS.md)

