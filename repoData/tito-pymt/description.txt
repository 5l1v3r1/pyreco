PyMT - Documentation
====================

You can access to the API documentation on web :
  * last released version : http://pymt.eu/docs/api
  * trunk version, nightly updated : http://pymt.eu/docs/api-trunk/


How to build the documentation
------------------------------

You need to install :
  * Python Sphinx (apt-get install python-sphinx)
  * Latest pymt

Run autobuild.py :
  python autobuild.py

And generate documentation
  make html

Documentation will be accessible in build/html/


About this example
==================

Idea
----

This fridgeletter example come from an idea of leijou on Nui forums.
More info at : http://nuigroup.com/forums/viewthread/6219/.

Letters
-------

Fridge letter came from http://moorstation.org/typoasis/designers/gaut/.

=============
MTwitter
=============

Dependencies:
simplejson

How To Use:

python start.py [username] [password]

=============
simplejson for python 2.6 : http://bugs.python.org/file10185/simplejson-1.9.tar.gz
ICONS are under Creative Commons. 
Thanks to 
spoongraphics - http://www.blog.spoongraphics.co.uk/freebies/free-cute-furry-monster-icons-for-mac-pc-and-web
cemagraphics - http://cemagraphics.deviantart.com/art/Candy-Clock-Icon-96460050
PyMT - Examples
===============

About
-----

All examples are made to show you how powerfull PyMT are.

If you want to play fast, just run (it will launch desktop app.) :

  python launcher-multi.py
  # or
  python launcher-single.py


Multi mean you'll launch the multi user desktop.
Single mean you'll launch the single user desktop.

Directories
-----------

You can found our games and apps their directory.
The directory framework is where we put all documentation examples.
Then, you have gallery, to show our widgets and animation framework.

If you want to test example, you can :

  python examples/games/untangle.py


PyMT Usage
----------

Some options are available in all pymt applications :

  -h, --help                        prints this mesage
  -a, --auto						do the best fullscreen available (fit to your current resolution)
  -f, --fullscreen                  force run in fullscreen
  -w, --windowed                    force run in window


All icons from video-*.png are coming from HumanH2O theme, under GPLV2 licence

The files in teh win32 and osx subdirectories are 
source and resource files that are used in the respective 
portable packaged versions of pymt for each OS.  Here, they
are under version controll.  

setup.py copies these files into the portable distribution 
package that is created when you launch 
'setup.py build_portable'


For example the win32 dir has the READMEand bat file which 
sets up the ENV variables and launches the python interpreter.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
READ THIS FIRST
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

This version of PyMT is a portable win32 version, 32 bits. (it work also for
64 bits Windows.) This means everything you need to run pymt (including 
python and all other dependencies etc) are included.

This README only addresses the things specific to the portable version of pymt.  
For general information on how to get started, where to find the documentation 
and configuration see the README file in the pymt directory about PyMT.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Running portable PyMT
=====================

The same directory that has this README file in it, contains a file called pymt.bat
running this pymt.bat file will set up the environment for pymt and starts the 
python interpreter with any arguments you passed

Example
~~~~~~~

If you open a command line and go to the directory (or add it to your PATH) 
You can run the following:

pymt -m pymt.tools.demo  <-- will run a simple pymt demo from teh pymt.tools module

pymt test.py -w  <-- will run test.py as a python script with pymt ready to use


Run a PyMT application without going to the command line
========================================================

Two options :

1. You can drag your python script on top the pymt.bat file and it will launch

2. If you right click on your python script (.py ending or whatever you named it), 
you can select properties and select an application to open this type of file with.
Navigate to the folder that includes this README and select the pymt.bat file.  
Now all you have to do is double click (check do this always for this file type 
to make this the default)


If you already have Python installed
====================================

The portable PyMT version shouldn't cause any conflicts and cooperate fairly well 
(at least if it's Python 2.6, otherwise some modules might cause problems if there
is entries on PYTHONPATH)


Install PyMT as a standard python module
========================================

Please refer to the install instructions in the complete README :
* inside the pymt folder inside this one
* or the wiki at http://pymt.eu/wiki


PyMT - A Multitouch Framework for Python
========================================

Website: http://pymt.eu/
Planet: http://pymt.eu/planet/


About 0.5
---------

This is beta, so keep in mind that it might not work as intended at all times.
You can post bug reports and feature requests on our Google Project page :

  http://code.google.com/p/pymt/issues/list

If you need more help, you can discuss on mailing list :

  * Google Group : http://groups.google.com/group/pymt-dev
  * Email        : pymt-dev@googlegroups.com

We also have an IRC channel :

  * Server  : irc.freenode.net
  * Channel : #pymt


Introduction
------------

PyMT is a python module for developing multi-touch enabled media rich
applications. Currently the aim is to allow for quick and easy interaction
design and rapid prototype development.

PyMT is written in python, based on OpenGL and supports different input methods
like Mouse, Dual Mouse, TUIO, WiiMote, WM_TOUCH, HIDtouch etc.

PyMT is actively being developed by a community and free to use. It operates on
all major platforms (Linux, OSX, Windows).


Installation
------------

Depending on your operating system you can follow one of the following guides
to install PyMT and the dependencies:

 * http://pymt.eu/wiki/DevGuide/InstallPymtUbuntu
 * http://pymt.eu/wiki/DevGuide/InstallPymtMacOSX
 * http://pymt.eu/wiki/DevGuide/InstallPymtWindows

If you chose to install all the dependencies (see below) yourself, you can invoke
the setup script as follows to install pymt systemwide for python:

  python setup.py install


Dependencies
------------

Since we abstract from the libraries that we use, some dependencies are
optional and may be used instead of others. A list of dependencies and what
we use them for is http://pymt.eu/wiki/Devel/FeaturesByLibraries

Here is what works best:

  * python (>= 2.6, < 3.0) - http://python.org
  * PyOpenGL >= 3.0.1
  * Pygame
  * PIL
  * GST + PyGST
  * Cython


Dcoumentation, Examples & Tutorials
-----------------------------------

There is an API reference included in doc. Check the doc/README about how
to build the documentation. It's also available online at :

	http://pymt.eu/docs/api/

There is some simple example apps in the examples folder that should get
you started for now. Additionally you may want to take a look at our wiki
at :

	http://pymt.eu/wiki/


Configuration
-------------

  [pymt]

  # show/hide fps
  show_fps = (0|1)

  # set log level
  log_level = (debug|info|warning|error|critical)

  # detection time of double tap (in milliseconds)
  double_tap_time = <integer>

  # max distance allowed for double tap (normalized in range 0 - 1000)
  double_tap_distance = <integer>

  # detection time of retain touch (in milliseconds)
  retain_time = <integer>

  # max distance allowed for retain touch (normalized in range 0 - 1000)
  retain_distance = <integer>

  # max distance to detect jittering (normalized in range 0 - 1000)
  jitter_distance = <integer>

  # list of device to ignore jittering
  jitter_ignore_devices = <devicename>,...

  # log directory
  log_dir = <string>

  # log name (can use format string from strftime)
  log_name = <string>

  # activate logging on file
  log_enable = (0|1)

  # GL error check (disable to have more speed)
  gl_error_check = (0|1)

  # ignore list
  ignore = [(xmin, ymin, xmax, ymax), ...]

  # INTERNAL, NEVER TOUCH TO config_version !!
  config_version = <integer>


  [keyboard]

  # default layout of keyboard
  layout = (azerty|qwerty)

  # repeat delay of the on-screen keyboard
  repeat_delay = <integer>

  # repeat rate of the on-screen keyboard
  repeat_rate = <integer>


  [graphics]

  # maximum fps allowed
  # if fps is <= 0, and vsync activated, the default maximum
  # fps will be set to 60.
  fps = <integer>

  # activate fullscreen
  fullscreen = (0|1)

  # width of window
  width = <integer>

  # height of window
  height = <integer>

  # force vsync
  vsync = (0|1)

  # force fbo type
  fbo = (hardware|software|force-hardware)

  # opengl line smooth
  line_smooth = (0|1)

  # show cursor on fullscreen
  show_cursor = (0|1)

  # position of the window on the screen
  # "auto" mean you have no control about the initial position
  # "custom" mean the position is controled with "top" and "left" attribute
  position = (auto|custom)

  # top position of the window (if position is custom)
  top = <integer>

  # left position of the window (if position is custom)
  left = <integer>

  # path to the window icon (for replacing the default pygame icon.)
  window_icon = <path>

  # rotation of the window
  rotation = (0|90|180|270)


  [input]

  # example of input provider instance
  yourid = providerid,parameters

  # example for tuio provider
  default = tuio,127.0.0.1:3333
  mytable = tuio,192.168.0.1:3334


  [dump]

  # activate record of frames
  enabled = (0|1)

  # prefix to use for dump
  prefix = <string>

  # format of dump image
  format = <jpeg|png>


  [widgets]

  # mtlist control

  # maximum distance to trigger down/up on child (pixels)
  list_trigger_distance = <int>

  # friction (factor, 1 = no friction)
  list_friction = <int>

  # friction when a bound have been hit
  list_friction_bound = <int>

  # keyboard type
  keyboard_type = <real|virtual>


  [modules]

  # modulename= to activate a module
  # you can have a list of module with :
  # python example.py -m list
  # example:
  keybinding=
  closeapp=
  feedback=
  touchring=



Other python/MT resources
-------------------------

movid.org
^^^^^^^^^

Another image tracker we are working on.

nuigroup.com
^^^^^^^^^^^^

THE resource and research community for open source multi touch and other
natural user interfaces.


Depend dot graph maker
======================

It's a tool to generated dependicies between files.

Dependices
----------

 * graphviz
 * find + grep


Usage
-----

 cd pymt
 python tools/depend/depend.py > depend.dot
 dot -Tjpg depend.dot > depend.jpg

NOTE: You can use dot or fdp to generate graph.

