__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# grs documentation build configuration file, created by
# sphinx-quickstart on Thu Jan 16 00:58:25 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
sys.path.insert(0, '../../')
import grs

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.pngmath',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'grs'
copyright = u'2014, Toomore Chiang'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = grs.__version__.rsplit('.', 1)[0]
# The full version, including alpha/beta/rc tags.
release = grs.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'nature'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'grsdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'grs.tex', u'grs Documentation',
   u'Toomore Chiang', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'grs', u'grs Documentation',
     [u'Toomore Chiang'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'grs', u'grs Documentation',
   u'Toomore Chiang', 'grs', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = u'grs'
epub_author = u'Toomore Chiang'
epub_publisher = u'Toomore Chiang'
epub_copyright = u'2014, Toomore Chiang'

# The basename for the epub file. It defaults to the project name.
#epub_basename = u'grs'

# The HTML theme for the epub output. Since the default themes are not optimized
# for small screen space, using the same theme for HTML and epub output is
# usually not wise. This defaults to 'epub', a theme designed to save visual
# space.
#epub_theme = 'epub'

# The language of the text. It defaults to the language option
# or en if the language is not set.
#epub_language = ''

# The scheme of the identifier. Typical schemes are ISBN or URL.
#epub_scheme = ''

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#epub_identifier = ''

# A unique identification for the text.
#epub_uid = ''

# A tuple containing the cover image and cover page html template filenames.
#epub_cover = ()

# A sequence of (type, uri, title) tuples for the guide element of content.opf.
#epub_guide = ()

# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_pre_files = []

# HTML files shat should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_post_files = []

# A list of files that should not be packed into the epub file.
#epub_exclude_files = []

# The depth of the table of contents in toc.ncx.
#epub_tocdepth = 3

# Allow duplicate toc entries.
#epub_tocdup = True

# Choose between 'default' and 'includehidden'.
#epub_tocscope = 'default'

# Fix unsupported image types using the PIL.
#epub_fix_images = False

# Scale large images.
#epub_max_image_width = 0

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#epub_show_urls = 'inline'

# If false, no index is generated.
#epub_use_index = True

todo_include_todos = True

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'http://docs.python.org/': None}

########NEW FILE########
__FILENAME__ = best_buy_or_sell
# -*- coding: utf-8 -*-
''' Best buy or sell '''
# Copyright (c) 2012, 2013, 2014 Toomore Chiang, http://toomore.net/
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


class BestFourPoint(object):
    """ 四大買點組合

        :param grs.Stock data: 個股資料
    """
    def __init__(self, data):
        self.data = data

    def bias_ratio(self, positive_or_negative=False):
        """ 判斷乖離

            :param bool positive_or_negative: 正乖離 為 True，負乖離 為 False
        """
        return self.data.check_moving_average_bias_ratio(
                               self.data.moving_average_bias_ratio(3, 6)[0],
                               positive_or_negative=positive_or_negative)[0]

    def check_plus_bias_ratio(self):
        """ 正乖離扣至最大 """
        return self.bias_ratio(True)

    def check_mins_bias_ratio(self):
        """ 負乖離扣至最大 """
        return self.bias_ratio()

    ##### 四大買點 #####
    def best_buy_1(self):
        """ 量大收紅 """
        result = self.data.value[-1] > self.data.value[-2] and \
                 self.data.price[-1] > self.data.openprice[-1]
        return result

    def best_buy_2(self):
        """ 量縮價不跌 """
        result = self.data.value[-1] < self.data.value[-2] and \
                 self.data.price[-1] > self.data.price[-2]
        return result

    def best_buy_3(self):
        """ 三日均價由下往上 """
        return self.data.moving_average(3)[1] == 1

    def best_buy_4(self):
        """ 三日均價大於六日均價 """
        return self.data.moving_average(3)[0][-1] > \
               self.data.moving_average(6)[0][-1]

    ##### 四大賣點 #####
    def best_sell_1(self):
        """ 量大收黑 """
        result = self.data.value[-1] > self.data.value[-2] and \
                 self.data.price[-1] < self.data.openprice[-1]
        return result

    def best_sell_2(self):
        """ 量縮價跌 """
        result = self.data.value[-1] < self.data.value[-2] and \
                 self.data.price[-1] < self.data.price[-2]
        return result

    def best_sell_3(self):
        """ 三日均價由上往下 """
        return self.data.moving_average(3)[1] == -1

    def best_sell_4(self):
        """ 三日均價小於六日均價 """
        return self.data.moving_average(3)[0][-1] < \
               self.data.moving_average(6)[0][-1]

    def best_four_point_to_buy(self):
        """ 判斷是否為四大買點 """
        result = []
        if self.check_mins_bias_ratio() and \
            (self.best_buy_1() or self.best_buy_2() or self.best_buy_3() or \
             self.best_buy_4()):
            if self.best_buy_1():
                result.append(self.best_buy_1.__doc__.strip().decode('utf-8'))
            if self.best_buy_2():
                result.append(self.best_buy_2.__doc__.strip().decode('utf-8'))
            if self.best_buy_3():
                result.append(self.best_buy_3.__doc__.strip().decode('utf-8'))
            if self.best_buy_4():
                result.append(self.best_buy_4.__doc__.strip().decode('utf-8'))
            result = ', '.join(result)
        else:
            result = False
        return result

    def best_four_point_to_sell(self):
        """ 判斷是否為四大賣點 """
        result = []
        if self.check_plus_bias_ratio() and \
            (self.best_sell_1() or self.best_sell_2() or self.best_sell_3() or \
             self.best_sell_4()):
            if self.best_sell_1():
                result.append(self.best_sell_1.__doc__.strip().decode('utf-8'))
            if self.best_sell_2():
                result.append(self.best_sell_2.__doc__.strip().decode('utf-8'))
            if self.best_sell_3():
                result.append(self.best_sell_3.__doc__.strip().decode('utf-8'))
            if self.best_sell_4():
                result.append(self.best_sell_4.__doc__.strip().decode('utf-8'))
            result = ', '.join(result)
        else:
            result = False
        return result

    def best_four_point(self):
        """ 判斷買點或賣點 """
        buy = self.best_four_point_to_buy()
        sell = self.best_four_point_to_sell()

        if buy:
            return True, buy
        elif sell:
            return False, sell

        return None

########NEW FILE########
__FILENAME__ = error
# -*- coding: utf-8 -*-
''' grs Exception '''
# Copyright (c) 2012, 2013, 2014 Toomore Chiang, http://toomore.net/
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


class Error(Exception):
    ''' Exception base '''


class StockNoError(Error):
    """ Exception for stock_no not in TWSE or OTC list. """


class ConnectionError(Error):
    """ Exception for no connection. """


########NEW FILE########
__FILENAME__ = fetch_data
# -*- coding: utf-8 -*-
'''' Fetch data from TWSE '''
# Copyright (c) 2012, 2013, 2014 Toomore Chiang, http://toomore.net/
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import csv
import logging
import random
import urllib2
from .error import ConnectionError
from .error import StockNoError
from .twseno import OTCNo
from .twseno import TWSENo
from datetime import datetime
from dateutil.relativedelta import relativedelta


class FetchData(object):
    ''' FetchData '''
    def __init__(self):
        self.__get_mons = 0
        self.__get_no = 0
        self.__info = ()
        self.__raw_rows_name = []
        self.__raw_data = ()
        self._twse = None

    def fetch_data(self, *args, **kwargs):
        """ Inherit :py:func:`grs.fetch_data.TWSEFetch.fetch_data` or
                    :py:func:`grs.fetch_data.OTCFetch.fetch_data`
        """
        return self.fetch_data(*args, **kwargs)

    def serial_fetch(self, stock_no, month, twse=None):
        """ 串接每月資料 舊→新

            :param str stock_no: 股票代碼
            :param int month: 擷取 n 個月的資料
            :param bool twse: 指定是否為上市資料
            :rtype: tuple
        """
        result = ()
        self.__get_mons = month
        self.__get_no = stock_no
        self._twse = twse
        for i in range(month):
            nowdatetime = datetime.today() - relativedelta(months=i)
            tolist = self.to_list(self.fetch_data(stock_no, nowdatetime))
            result = tolist + result
        return tuple(result)

    @property
    def info(self):
        """ (股票代碼, 股票名稱)

            :rtype: tuple
            :returns: (股票代碼, 股票名稱)
        """
        return self.__info

    def to_list(self, csv_file):
        """ 串接每日資料 舊→新

            :param csv csv_file: csv files
            :rtype: list
        """
        tolist = []
        for i in csv_file:
            i = [value.strip().replace(',', '') for value in i]
            try:
                for value in (1, 2, 3, 4, 5, 6, 8):
                    i[value] = float(i[value])
            except (IndexError, ValueError):
                pass
            tolist.append(i)
        if self._twse:
            if tolist:
                self.__info = (tolist[0][0].split(' ')[1],
                               tolist[0][0].split(' ')[2].decode('cp950'))
                self.__raw_rows_name = tolist[1]
                return tuple(tolist[2:])
            return tuple([])
        else:
            if len(tolist) > 6:
                self.__raw_rows_name = tolist[4]
                self.__info = (self.__get_no, OTCNo().all_stock[self.__get_no])
                if len(tolist[5:]) > 1:
                    return tuple(tolist[5:-1])
            return tuple([])

    def plus_mons(self, month):
        """ 增加 n 個月的資料

            :param int month: 增加 n 個月的資料
            :rtype: tuple
        """
        result = []
        exist_mons = self.__get_mons
        oldraw = list(self.__raw_data)
        for i in range(month):
            nowdatetime = datetime.today() - relativedelta(months=exist_mons) -\
                          relativedelta(months=i)
            tolist = self.to_list(self.fetch_data(self.__info[0], nowdatetime))
            result = list(tolist) + result
        result = result + oldraw
        self.__get_mons = exist_mons + month
        return tuple(result)


class OTCFetch(FetchData):
    ''' OTCFetch '''
    def __init__(self):
        self.__url = []

    def fetch_data(self, stock_no, nowdatetime):
        """ Fetch data from gretai.org.tw(OTC)
            return list.
            從 gretai.org.tw 下載資料，回傳格式為 csv.reader

            0. 日期
            1. 成交股數
            2. 成交金額
            3. 開盤價
            4. 最高價（續）
            5. 最低價
            6. 收盤價
            7. 漲跌價差
            8. 成交筆數

            :param str stock_no: 股票代碼
            :param datetime nowdatetime: 此刻時間
            :rtype: list
        """
        url = (
            'http://www.gretai.org.tw/ch/stock/aftertrading/' +
            'daily_trading_info/st43_download.php?d=%(year)d/%(mon)02d&' +
            'stkno=%(stock)s&r=%(rand)s') % {
                    'year': nowdatetime.year - 1911,
                    'mon': nowdatetime.month,
                    'stock': stock_no,
                    'rand': random.randrange(1, 1000000)}

        logging.info(url)
        csv_read = csv.reader(urllib2.urlopen(url).readlines())
        self.__url.append(url)
        return csv_read


class TWSEFetch(FetchData):
    ''' TWSEFetch '''

    def __init__(self):
        self.__url = []

    def fetch_data(self, stock_no, nowdatetime):
        """ Fetch data from twse.com.tw
            return list.
            從 twse.com.tw 下載資料，回傳格式為 csv.reader

            0. 日期
            1. 成交股數
            2. 成交金額
            3. 開盤價
            4. 最高價（續）
            5. 最低價
            6. 收盤價
            7. 漲跌價差
            8. 成交筆數

            :param str stock_no: 股票代碼
            :param datetime nowdatetime: 此刻時間
            :rtype: list
        """
        url = (
            'http://www.twse.com.tw/ch/trading/exchange/' +
            'STOCK_DAY/STOCK_DAY_print.php?genpage=genpage/' +
            'Report%(year)d%(mon)02d/%(year)d%(mon)02d_F3_1_8_%(stock)s.php' +
            '&type=csv&r=%(rand)s') % {'year': nowdatetime.year,
                                       'mon': nowdatetime.month,
                                       'stock': stock_no,
                                       'rand': random.randrange(1, 1000000)}
        logging.info(url)
        csv_read = csv.reader(urllib2.urlopen(url).readlines())
        self.__url.append(url)
        return csv_read


class SimpleAnalytics(object):
    """ 簡單計算 """

    def __init__(self):
        self.__raw_data = None
        self.__raw_rows_name = self.__raw_rows_name

    def _load_data(self, data):
        """ Load stock raw data.

            :param tuple data: from serial_fetch data.
        """
        self.__raw_data = data

    @property
    def raw(self):
        """ 擷取原始檔案

            :rtype: list
            :returns: data in list
        """
        return self.__raw_data

    def get_raw_rows(self, rows=6):
        """ 取出某一價格序列 *(舊→新)*

            預設序列收盤價 *(self.__serial_price(6))*

            :rtype: list
            :returns: 預設序列收盤價 *(self.__serial_price(6))*
        """
        return self.__serial_price(rows)

    @property
    def get_raw_rows_name(self):
        """ 原始檔案的欄位名稱

            0. 日期
            1. 成交股數
            2. 成交金額
            3. 開盤價
            4. 最高價（續）
            5. 最低價
            6. 收盤價
            7. 漲跌價差
            8. 成交筆數

            :rtype: list
        """
        result = [i.decode('cp950') for i in self.__raw_rows_name]
        return result

    def plus_mons(self, month):
        """ 新增擴充月份資料

            :param int month: 增加 n 個月的資料
        """
        self.__raw_data = self.plus_mons(month)

    def out_putfile(self, fpath):
        """ 輸出成 CSV 檔

            :param path fpath: 檔案輸出位置

            .. todo:: files output using `with` syntax.
        """
        with open(fpath, 'w') as csv_file:
            output = csv.writer(csv_file)
            output.writerows(self.__raw_data)

    def __serial_price(self, rows=6):
        """ 取出某一價格序列 *(舊→新)*

            預設序列收盤價 *(self.__serial_price(6))*

            :rtype: list
            :returns: 預設序列收盤價 *(self.__serial_price(6))*
        """
        result = (float(i[rows]) for i in self.__raw_data)
        return list(result)

    def __calculate_moving_average(self, date, row):
        """ 計算移動平均數

            :param int row: 收盤價(6)、成交股數(1)
            :rtype: tuple (序列 舊→新, 持續天數)
        """
        cal_data = self.__serial_price(row)
        result = []
        for dummy in range(len(cal_data) - int(date) + 1):
            result.append(round(sum(cal_data[-date:]) / date, 2))
            cal_data.pop()
        result.reverse()
        cont = self.__cal_continue(result)
        return result, cont

    @classmethod
    def __cal_continue(cls, list_data):
        """ 計算持續天數

            :rtype: int
            :returns: 向量數值：正數向上、負數向下。
        """
        diff_data = []
        for i in range(1, len(list_data)):
            if list_data[-i] > list_data[-i - 1]:
                diff_data.append(1)
            else:
                diff_data.append(-1)
        cont = 0
        for value in diff_data:
            if value == diff_data[0]:
                cont += 1
            else:
                break
        return cont * diff_data[0]

    def moving_average(self, date):
        """ 計算 n 日收盤均價與持續天數

            :param int date: n 日
            :rtype: tuple (序列 舊→新, 持續天數)
        """
        return self.__calculate_moving_average(date, 6)

    def MA(self, *args, **kwargs):
        """ alias :func:`grs.fetch_data.SimpleAnalytics.moving_average()` """
        return self.moving_average(*args, **kwargs)

    def moving_average_value(self, date):
        """ 計算 n 日成交股數均量與持續天數

            :param int date: n 日
            :rtype: tuple (序列 舊→新, 持續天數)
        """
        val, conti = self.__calculate_moving_average(date, 1)
        val = (round(i / 1000, 3) for i in val)
        return list(val), conti

    def MAV(self, *args, **kwargs):
        """ alias :func:`grs.fetch_data.SimpleAnalytics.moving_average_value()` """
        return self.moving_average_value(*args, **kwargs)

    def moving_average_bias_ratio(self, date1, date2):
        """ 計算乖離率（均價）
            date1 - date2

            :param int data1: n 日
            :param int data2: m 日
            :rtype: tuple (序列 舊→新, 持續天數)
        """
        data1 = self.moving_average(date1)[0]
        data2 = self.moving_average(date2)[0]
        cal_list = []
        for i in range(1, min(len(data1), len(data2)) + 1):
            cal_list.append(data1[-i] - data2[-i])
        cal_list.reverse()
        cont = self.__cal_continue(cal_list)
        return cal_list, cont

    def MAO(self, *args, **kwargs):
        """ alias :func:`grs.fetch_data.SimpleAnalytics.moving_average_bias_ratio()` """
        return self.moving_average_bias_ratio(*args, **kwargs)

    @property
    def price(self):
        """ 收盤價股價序列

            :rtype: list
        """
        return self.__serial_price()

    @property
    def openprice(self):
        """ 開盤價股價序列

            :rtype: list
        """
        return self.__serial_price(3)

    @property
    def value(self):
        """ 成交量序列

            :rtype: list
        """
        val = (round(i / 1000, 3) for i in self.__serial_price(1))
        return list(val)

    @classmethod
    def __cal_ma_bias_ratio_point(cls, data, sample=5,
                                  positive_or_negative=False):
        """判斷轉折點位置

           :param list data: 計算資料
           :param int sample: 計算的區間樣本數量
           :param bool positive_or_negative: 正乖離 為 True，負乖離 為 False
           :rtype: tuple
           :returns: (True or False, 第幾個轉折日, 轉折點值)
        """
        sample_data = data[-sample:]
        if positive_or_negative:  # 正
            ckvalue = max(sample_data)  # 尋找最大值
            preckvalue = max(sample_data) > 0  # 區間最大值必須為正
        else:
            ckvalue = min(sample_data)  # 尋找最小值
            preckvalue = max(sample_data) < 0  # 區間最大值必須為負
        return (sample - sample_data.index(ckvalue) < 4 and \
                sample_data.index(ckvalue) != sample - 1 and preckvalue,
                sample - sample_data.index(ckvalue) - 1,
                ckvalue)

    @classmethod
    def check_moving_average_bias_ratio(cls, data, sample=5,
                                        positive_or_negative=False):
        """判斷正負乖離轉折點位置

           :param list data: 計算資料
           :param int sample: 計算的區間樣本數量
           :param bool positive_or_negative: 正乖離 為 True，負乖離 為 False
           :rtype: tuple
           :returns: (True or False, 第幾個轉折日, 轉折點值)
        """
        return cls.__cal_ma_bias_ratio_point(data, sample,
                                              positive_or_negative)

    @classmethod
    def CKMAO(self, *args, **kwargs):
        """ alias :func:`grs.fetch_data.SimpleAnalytics.check_moving_average_bias_ratio()` """
        return self.check_moving_average_bias_ratio(*args, **kwargs)


class Stock(object):
    """ 擷取股票股價

        :param str stock_no: 股價代碼
        :param int mons: 擷取近 n 個月的資料
        :param bool twse: 直接指定 `stock_no` 為上市股票，否則會進行查表動作
        :param bool otc: 直接指定 `stock_no` 為上櫃股票，否則會進行查表動作
        :rtype: :class:`grs.fetch_data.TWSEFetch` or
                :class:`grs.fetch_data.OTCFetch` 並且繼承
                :class:`grs.fetch_data.SimpleAnalytics`

                :class: Stock(TWSEFetch, SimpleAnalytics)
                :class: Stock(OTCFetch, SimpleAnalytics)

        :returns: 依 `stock_no` 判斷上市或上櫃股票回傳資料
        :raises StockNoError: 查無股票代碼
    """
    def __init__(self, stock_no, mons=3, twse=False, otc=False):
        pass

    def __new__(cls, stock_no, mons=3, twse=False, otc=False):
        assert isinstance(stock_no, basestring), '`stock_no` must be a string'
        assert not twse == otc == True, 'Only `twse` or `otc` to be True'

        if twse and not otc:
            stock_proxy = type('Stock', (TWSEFetch, SimpleAnalytics), {})()
            twse = True
        elif not twse and otc:
            stock_proxy = type('Stock', (OTCFetch, SimpleAnalytics), {})()
            twse = False
        elif stock_no in TWSENo().all_stock_no:
            stock_proxy = type('Stock', (TWSEFetch, SimpleAnalytics), {})()
            twse = True
        elif stock_no in OTCNo().all_stock_no:
            stock_proxy = type('Stock', (OTCFetch, SimpleAnalytics), {})()
            twse = False
        else:
            raise StockNoError()

        stock_proxy.__init__()
        try:
            cls.__raw_data = stock_proxy.serial_fetch(stock_no, mons, twse)
            stock_proxy._load_data(cls.__raw_data)
        except urllib2.URLError:
            raise ConnectionError(), u'IN OFFLINE, NO DATA FETCH.'

        return stock_proxy

########NEW FILE########
__FILENAME__ = realtime
# -*- coding: utf-8 -*-
''' Get TWSE real time data. '''
# From http://github.com/toomore/tw-stock
# Copyright (c) 2012, 2013, 2014 Toomore Chiang, http://toomore.net/
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import csv
import logging
import random
import urllib2
from .error import ConnectionError


def covstr(strings):
    """ convert string to int or float. """
    try:
        result = int(strings)
    except ValueError:
        result = float(strings)
    return result


class RealtimeStock(object):
    """ Real time fetch TW stock data.
        擷取即時盤的股價資訊

        :param str no: 股票代碼
        :rtype: dict
    """
    def __init__(self, no):
        assert isinstance(no, basestring), '`no` must be a string'
        self.__raw = ''
        try:
            page = urllib2.urlopen(
                'http://mis.tse.com.tw/data/%s.csv?r=%s' % (no,
                        random.randrange(1, 10000)))
        except urllib2.URLError:
            raise ConnectionError(), u'IN OFFLINE, NO DATA FETCH.'

        logging.info('twsk no %s', no)
        reader = csv.reader(page)
        for i in reader:
            self.__raw = i

    @property
    def raw(self):
        ''' Return raw data

            :rtype: list
            :returns: raw data list
        '''
        return self.__raw

    @property
    def real(self):
        """ Real time data

            :rtype: dict
            :returns:

                :name:     股票名稱 Unicode
                :no:       股票代碼
                :range:    漲跌價
                :ranges:   漲跌判斷 True, False
                :time:     取得時間
                :max:      漲停價
                :min:      跌停價
                :unch:     昨日收盤價
                :pp:       漲跌幅 %
                :o:        開盤價
                :h:        當日最高價
                :l:        當日最低價
                :c:        成交價/收盤價
                :value:    累計成交量
                :pvalue:   該盤成交量
                :top5buy:  最佳五檔買進價量資訊
                :top5sell: 最佳五檔賣出價量資訊
                :crosspic: K線圖 by Google Chart
        """
        try:
            unch = sum([covstr(self.__raw[3]), covstr(self.__raw[4])]) / 2
            result = {
            'name': unicode(self.__raw[36].replace(' ', ''), 'cp950'),
            'no': self.__raw[0],
            'range': self.__raw[1],    # 漲跌價
            'time': self.__raw[2],     # 取得時間
            'max': self.__raw[3],      # 漲停價
            'min': self.__raw[4],      # 跌停價
            'unch': '%.2f' % unch,  # 昨日收盤價
            'pp': '%.2f' % ((covstr(self.__raw[8]) - unch) / unch * 100),
                                       # 漲跌幅 %
            'o': self.__raw[5],        # 開盤價
            'h': self.__raw[6],        # 當日最高價
            'l': self.__raw[7],        # 當日最低價
            'c': self.__raw[8],        # 成交價/收盤價
            'value': self.__raw[9],    # 累計成交量
            'pvalue': self.__raw[10],  # 該盤成交量
            'top5buy': [
                            (self.__raw[11], self.__raw[12]),
                            (self.__raw[13], self.__raw[14]),
                            (self.__raw[15], self.__raw[16]),
                            (self.__raw[17], self.__raw[18]),
                            (self.__raw[19], self.__raw[20])
                            ],
            'top5sell': [
                            (self.__raw[21], self.__raw[22]),
                            (self.__raw[23], self.__raw[24]),
                            (self.__raw[25], self.__raw[26]),
                            (self.__raw[27], self.__raw[28]),
                            (self.__raw[29], self.__raw[30])
                            ]
            }

            if '-' in self.__raw[1]:  # 漲跌判斷 True, False
                result['ranges'] = False  # price down
            else:
                result['ranges'] = True  # price up

            result['crosspic'] = ("http://chart.apis.google.com/chart?" +
                "chf=bg,s,ffffff&chs=20x50&cht=ls" +
                "&chd=t1:0,0,0|0,%(h)s,0|0,%(c)s,0|0,%(o)s,0|0,%(l)s,0" +
                "&chds=%(l)s,%(h)s&chm=F,,1,1:4,20") % result

            result['top5buy'].sort()
            result['top5sell'].sort()

            return result
        except (IndexError, ValueError):
            return False


class RealtimeWeight(object):
    """ 大盤/各類別即時盤資訊

        代碼可以參考：http://goristock.appspot.com/API#apiweight
    """
    def __init__(self):
        """ 大盤/各類別即時盤資訊
            代碼可以參考：http://goristock.appspot.com/API#apiweight
        """
        self.__raw = {}
        try:
            page = urllib2.urlopen(
                'http://mis.tse.com.tw/data/TSEIndex.csv?r=%s' % random.randrange(
                        1, 10000))
        except urllib2.URLError:
            raise ConnectionError(), u'IN OFFLINE, NO DATA FETCH.'

        reader = csv.reader(page)
        for i in reader:
            if len(i):
                if '-' in i[3]:
                    up_or_down = False
                else:
                    up_or_down = True
                self.__raw[i[0]] = {
                                    'no': i[0],
                                    'time': i[1],
                                    'value': i[2],
                                    'range': i[3],
                                    'up_or_down': up_or_down}
        # 大盤成交量，單位：億。
        self.__raw['200']['v2'] = int(
                    self.__raw['200']['value'].replace(',', '')) / 100000000

    @property
    def raw(self):
        ''' Return raw data

            :rtype: list
            :returns: raw data list
        '''
        return self.__raw

    @property
    def real(self):
        ''' Get realtime data

            :rtype: dict
            :returns: 代碼可以參考：http://goristock.appspot.com/API#apiweight
        '''
        result = self.__raw['1'].copy()
        result['c'] = self.__raw['1']['value']
        result['value'] = self.__raw['200']['v2']
        result['date'] = self.__raw['0']['time']
        return result

########NEW FILE########
__FILENAME__ = twseno
# -*- coding: utf-8 -*-
''' TWSE stock no. '''
# Copyright (c) 2012, 2013, 2014 Toomore Chiang, http://toomore.net/
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
import csv
import os
import re


class ImportCSV(object):
    """ Import CSV

        :param path stock_no_files: 個股檔案列表
        :param path industry_code_files: 個股分類表
    """
    def __init__(self, stock_no_files, industry_code_files):
        self.industry_code_files = industry_code_files
        self.last_update = ''
        self.stock_no_files = stock_no_files
        self.__allstockno = self.importcsv()

    def importcsv(self):
        ''' import data from csv '''
        csv_path = os.path.join(os.path.dirname(__file__), self.stock_no_files)
        with open(csv_path) as csv_file:
            csv_data = csv.reader(csv_file)
            result = {}
            for i in csv_data:
                try:
                    result[i[0]] = str(i[1]).decode('utf-8')
                except ValueError:
                    if i[0] == 'UPDATE':
                        self.last_update = str(i[1]).decode('utf-8')
                    else:
                        pass
        return result

    @staticmethod
    def __industry_code():
        ''' import industry_code '''
        csv_path = os.path.join(os.path.dirname(__file__),
                self.industry_code_files)
        with open(csv_path) as csv_file:
            csv_data = csv.reader(csv_file)
            result = {}
            for i in csv_data:
                result[i[0]] = i[1].decode('utf-8')
            return result

    @staticmethod
    def __loadindcomps():
        ''' import industry comps '''
        csv_path = os.path.join(os.path.dirname(__file__), self.stock_no_files)
        with open(csv_path) as csv_file:
            csv_data = csv.reader(csv_file)
            result = {}
            check_words = re.compile(r'^[\d]{2,}[\w]?')
            for i in csv_data:
                if check_words.match(i[2]):
                    try:
                        result[i[2]].append(i[0].decode('utf-8'))
                    except (ValueError, KeyError):
                        try:
                            result[i[2]] = [i[0].decode('utf-8')]
                        except KeyError:
                            pass
            return result

    def search(self, name):
        """ 搜尋股票名稱 by unicode

            :param str name: 欲搜尋的字串
            :rtype: dict
        """
        pattern = re.compile(name)
        result = {}
        for i in self.__allstockno:
            query = re.search(pattern, self.__allstockno[i])
            if query:
                query.group()
                result[i] = self.__allstockno[i]
        return result

    def searchbyno(self, no):
        """ 搜尋股票代碼

            :param str no: 欲搜尋的字串
            :rtype: dict
        """
        pattern = re.compile(str(no))
        result = {}
        for i in self.__allstockno:
            query = re.search(pattern, str(i))
            if query:
                query.group()
                result[i] = self.__allstockno[i]
        return result

    @property
    def all_stock(self):
        """ 回傳股票代碼與名稱

            :rtype: dict
        """
        return self.__allstockno

    @property
    def all_stock_no(self):
        """ 回傳股票代碼

            :rtype: list
        """
        return self.__allstockno.keys()

    @property
    def all_stock_name(self):
        """ 回傳股票名稱

            :rtype: list
        """
        return self.__allstockno.values()

    @property
    def industry_code(self):
        """ 回傳類別代碼

            :rtype: dict
        """
        return self.__industry_code()

    @property
    def industry_comps(self):
        """ 回傳分類的股票

            :rtype: dict
        """
        return self.__loadindcomps()


class TWSENo(ImportCSV):
    """ 上市股票代碼與搜尋 """
    def __init__(self):
        super(TWSENo, self).__init__('stock_no.csv', 'industry_code.csv')


class OTCNo(ImportCSV):
    """ 上櫃股票(OTC, Over-the-counter) 代碼與搜尋"""
    def __init__(self):
        super(OTCNo, self).__init__('otc_list.csv', 'industry_code_otc.csv')

########NEW FILE########
__FILENAME__ = twseopen
# -*- coding: utf-8 -*-
''' TWSE open date '''
# Copyright (c) 2012, 2013, 2014 Toomore Chiang, http://toomore.net/
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from .tw_time import TWTime
from datetime import datetime
import csv
import os


class TWSEOpen(object):
    ''' 判斷當日是否開市 '''
    def __init__(self):
        ''' 載入相關檔案 '''
        self.__ocdate = self.__loaddate()
        self.twtime = ''

    def d_day(self, time):
        ''' 指定日期

            :param datetime time: 欲判斷的日期
            :rtype: bool
            :returns: True 為開市、False 為休市
        '''
        if type(time) == type(TWTime().now):
            self.twtime = TWTime().now
        elif type(time) == type(TWTime().date):
            self.twtime = TWTime().date
        else:
            pass
        return self.caldata(time)

    @staticmethod
    def __loaddate():
        ''' 載入檔案
            檔案依據 http://www.twse.com.tw/ch/trading/trading_days.php
        '''
        csv_path = os.path.join(os.path.dirname(__file__), 'opendate.csv')
        with open(csv_path) as csv_file:
            csv_data = csv.reader(csv_file)
            result = {}
            result['close'] = []
            result['open'] = []
            for i in csv_data:
                if i[1] == '0':  # 0 = 休市
                    result['close'].append(datetime.strptime(i[0],
                                                             '%Y/%m/%d').date())
                elif i[1] == '1':  # 1 = 開市
                    result['open'].append(datetime.strptime(i[0],
                                                            '%Y/%m/%d').date())
                else:
                    pass
            return result

    def caldata(self, time):
        ''' Market open or not.

            :param datetime time: 欲判斷的日期
            :rtype: bool
            :returns: True 為開市、False 為休市
        '''
        if time.date() in self.__ocdate['close']:  # 判對是否為法定休市
            return False
        elif time.date() in self.__ocdate['open']:  # 判對是否為法定開市
            return True
        else:
            if time.weekday() <= 4:  # 判斷是否為平常日開市
                return True
            else:
                return False

########NEW FILE########
__FILENAME__ = tw_time
# -*- coding: utf-8 -*-
''' Taiwan time UTF+8  '''
# Copyright (c) 2012, 2013, 2014 Toomore Chiang, http://toomore.net/
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from datetime import datetime
from datetime import time
from datetime import timedelta


class TWTime(object):
    ''' Transform localtime to Taiwan time in UTF+8
        轉換當地時間到台灣時間 UTF+8

        :param int tz: 時區，預設為 8
    '''

    def __init__(self, tz=8):
        assert isinstance(tz, (int, float))
        self.time_zone = tz

    def now(self):
        ''' Display Taiwan Time now
            顯示台灣此刻時間
        '''
        utcnow = datetime.utcnow()
        return utcnow + timedelta(hours=self.time_zone)

    def date(self):
        ''' Display Taiwan date now
            顯示台灣此刻日期
        '''
        utcnow = datetime.utcnow()
        return (utcnow + timedelta(hours=self.time_zone)).date()

    @staticmethod
    def localtime():
        ''' Display localtime now
            顯示當地此刻時間
        '''
        return datetime.now()

    @staticmethod
    def localdate():
        ''' Display localdate now
            顯示當地此刻日期
        '''
        return datetime.today().date()


class Countdown(object):
    ''' 倒數

        :param int hour: 設定倒數的時刻小時，預設為 14
        :param int minutes: 設定倒數的時刻分鐘，預設為 30
    '''
    def __init__(self, hour=14, minutes=30):
        self.__back = timedelta(hours=hour - 8, minutes=minutes)
        self.__hour = hour
        self.__minutes = minutes

    @property
    def __zero(self):
        ''' 取得現在時間（秒） '''
        return datetime.utcnow() - self.__back

    @property
    def nextday(self):
        ''' nextday: 下一個日期

            :rtype: datetime
            :returns: 下一個預設時間日期
        '''
        nextday = self.__zero.date() + timedelta(days=1)
        return datetime.combine(nextday, time())

    @property
    def countdown(self):
        ''' countdown: 到達下一個日期的秒數

            :rtype: int
            :returns: 下一個預設的秒數
        '''
        return (self.nextday - self.__zero).seconds

    @property
    def exptime(self):
        ''' exptime: 下一個日期時間

            :returns: 下一個預設時間
        '''
        return self.nextday + timedelta(hours=self.__hour - 8,
                                        minutes=self.__minutes)

    @property
    def lastmod(self):
        ''' lastmod: 起點日期時間

            :returns: 起點日期時間
        '''
        return self.exptime - timedelta(days=1)

########NEW FILE########
__FILENAME__ = test_unittest
# -*- coding: utf-8 -*-
''' Unittest '''
import grs
import unittest
from datetime import datetime
from types import BooleanType
from types import NoneType


class TestGrs(unittest.TestCase):
    def get_data(self):
        self.stock_no = '2618'
        self.data = grs.Stock(self.stock_no)

    def test_stock(self):
        self.get_data()
        assert self.data.info[0] == self.stock_no

    def test_best_buy_or_sell(self):
        self.get_data()
        assert isinstance(grs.BestFourPoint(self.data).best_four_point(),
                          (tuple, NoneType))

    def test_moving_average(self):
        self.get_data()
        result = self.data.moving_average(3)
        assert isinstance(result[0], list)
        assert isinstance(result[1], int)
        assert result == self.data.MA(3)

    def test_moving_average_value(self):
        self.get_data()
        result = self.data.moving_average_value(3)
        assert isinstance(result[0], list)
        assert isinstance(result[1], int)
        assert result == self.data.MAV(3)

    def test_moving_average_bias_ratio(self):
        self.get_data()
        result = self.data.moving_average_bias_ratio(6, 3)
        assert isinstance(result[0], list)
        assert isinstance(result[1], int)
        assert result == self.data.MAO(6, 3)

    def test_check_moving_average_bias_ratio(self):
        self.get_data()
        param = (self.data.moving_average_bias_ratio(6, 3)[0], True)
        result = self.data.check_moving_average_bias_ratio(*param)[0]
        assert isinstance(result, BooleanType)
        assert result == self.data.CKMAO(*param)[0]

    def test_CKMAO_classmethod(self):
        self.get_data()
        result = grs.fetch_data.SimpleAnalytics.CKMAO(self.data.MAO(3, 6)[0])
        assert isinstance(result, tuple)
        assert len(result) == 3

    def test_stock_value(self):
        self.get_data()
        assert isinstance(self.data.price, list)
        assert isinstance(self.data.openprice, list)
        assert isinstance(self.data.value, list)

    @staticmethod
    def test_twse_no():
        twse_no = grs.TWSENo()
        assert isinstance(twse_no.all_stock, dict)
        result = twse_no.search(u'中')
        # 1701 中化
        assert '1701' in result
        result = twse_no.searchbyno(17)
        assert '1701' in result

    @staticmethod
    def test_otc_no():
        otc_no = grs.OTCNo()
        assert isinstance(otc_no.all_stock, dict)
        result = otc_no.search(u'華')
        # 8446 華研
        assert '8446' in result
        result = otc_no.searchbyno(46)
        assert '8446' in result

    @staticmethod
    def test_twse_open():
        is_open = grs.TWSEOpen()
        result = is_open.d_day(datetime(2014, 1, 1))
        assert result is False

    @staticmethod
    def test_realtime():
        real_time = grs.RealtimeStock('2618')
        assert real_time.real['no'] == '2618'
        real_time = grs.RealtimeWeight()
        assert real_time.real['no'] == '1'
        real_time = grs.RealtimeStock('0050')
        assert real_time.real['no'] == '0050'
        try:
            real_time = grs.RealtimeStock(0050)
        except AssertionError:
            pass

    @staticmethod
    def test_countdown():
        result = grs.Countdown().countdown
        assert isinstance(result, int)

    @staticmethod
    def test_taiwan_50():
        stock = grs.Stock('0050')
        assert u'台灣50' == stock.info[1]
        try:
            stock = grs.Stock(0050)
        except AssertionError:
            pass

class TestGrsOTC(unittest.TestCase):
    def get_data(self):
        self.stock_no = '8446'
        self.data = grs.Stock(self.stock_no)

    def test_stock(self):
        self.get_data()
        assert self.data.info[0] == self.stock_no

    def test_best_buy_or_sell(self):
        self.get_data()
        assert isinstance(grs.BestFourPoint(self.data).best_four_point(),
                          (tuple, NoneType))

    def test_moving_average(self):
        self.get_data()
        result = self.data.moving_average(3)
        assert isinstance(result[0], list)
        assert isinstance(result[1], int)

    def test_moving_average_value(self):
        self.get_data()
        result = self.data.moving_average_value(3)
        assert isinstance(result[0], list)
        assert isinstance(result[1], int)

    def test_moving_average_bias_ratio(self):
        self.get_data()
        result = self.data.moving_average_bias_ratio(6, 3)
        assert isinstance(result[0], list)
        assert isinstance(result[1], int)

    def test_check_moving_average_bias_ratio(self):
        self.get_data()
        result = self.data.check_moving_average_bias_ratio(
                               self.data.moving_average_bias_ratio(3, 6)[0],
                               positive_or_negative=True)[0]
        assert isinstance(result, BooleanType)

    def test_stock_value(self):
        self.get_data()
        assert isinstance(self.data.price, list)
        assert isinstance(self.data.openprice, list)
        assert isinstance(self.data.value, list)

if __name__ == '__main__':
    unittest.main()

########NEW FILE########
__FILENAME__ = make_otc_list
# -*- coding: utf-8 -*-
import csv
import re
import urllib2
from datetime import datetime


NOW = datetime(2014, 2, 21)
SAVEPATH = './otc_list.csv'
INDUSTRYCODE = './industry_code_otc.csv'

OTCURL = 'http://www.gretai.org.tw/ch/stock/aftertrading/otc_quotes_no1430/stk_wn1430_download.php?d=%(year)s/%(mon)02d/%(day)02d&se=%%s&s=0,asc,0' % {
        'year': NOW.year - 1911,
        'mon': NOW.month,
        'day': NOW.day,}

OTCCLS = {
           '01': u'水泥工業',
           '02': u'食品工業',
           '03': u'塑膠工業',
           '04': u'紡織纖維',
           '05': u'電機機械',
           '06': u'電器電纜',
           '07': u'化學生技醫療',
           '08': u'玻璃陶瓷',
           '09': u'造紙工業',
           '10': u'鋼鐵工業',
           '11': u'橡膠工業',
           '12': u'汽車工業',
           '13': u'電子工業',
           '14': u'建材營造',
           '15': u'航運業',
           '16': u'觀光事業',
           '17': u'金融保險',
           '18': u'貿易百貨',
           '19': u'綜合',
           '20': u'其他',
           '21': u'化學工業',
           '22': u'生技醫療業',
           '23': u'油電燃氣業',
           '24': u'半導體業',
           '25': u'電腦及週邊設備業',
           '26': u'光電業',
           '27': u'通信網路業',
           '28': u'電子零組件業',
           '29': u'電子通路業',
           '30': u'資訊服務業',
           '31': u'其他電子業',
           '32': u'文化創意業',
           '80': u'管理股票',
           'AA': u'受益證券',
           'EE': u'上櫃指數股票型基金(ETF)',
           'TD': u'台灣存託憑證(TDR)',
           'WW': u'認購售權證',
           'GG': u'認股權憑證',
           'BC': u'牛證熊證',
           #'EW': u'所有證券(不含權證、牛熊證)',
           #'AL': u'所有證券 ',
           #'OR': u'委託及成交資訊(16:05提供)',
           }

def fetch_otc_list():
    with open(SAVEPATH, 'w') as files:
        csv_file = csv.writer(files)
        re_pattern = re.compile(r'(=")?[\d\w]{4,6}(=)?')
        re_sub = re.compile(r'[^\w\d]')

        for no in OTCCLS:
            for i in csv.reader(urllib2.urlopen(OTCURL % no).readlines()):
                if len(i) >= 3 and re_pattern.match(i[0]):
                    pass
                else:
                    i.pop(0)

                if len(i) >= 2 and re_pattern.match(i[0]):
                    csv_file.writerow([re_sub.sub('', i[0]),
                                       i[1].decode('cp950').encode('utf-8'),
                                       no, OTCCLS[no].encode('utf-8')])

    with open(SAVEPATH, 'r') as files:
        csv_file = csv.reader(files)
        all_items = {}
        for i in csv_file:
            all_items.update({i[0]: i})

    with open(SAVEPATH, 'w') as files:
        csv_file = csv.writer(files)
        csv_file.writerow(['文件更新', datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 'x', 'x'])
        csv_file.writerow(['證期會代碼', '公司簡稱', '分類代碼', '分類名稱'])
        for i in sorted(all_items):
            csv_file.writerow(all_items[i])

def output_industry_code():
    with open(INDUSTRYCODE, 'w') as files:
        csv_file = csv.writer(files)
        for i in sorted(OTCCLS):
            csv_file.writerow([i, OTCCLS[i].encode('utf-8')])

if __name__ == '__main__':
    fetch_otc_list()
    output_industry_code()

########NEW FILE########
__FILENAME__ = make_twse_list
# -*- coding: utf-8 -*-
import csv
import re
import urllib2
from datetime import datetime


NOW = datetime(2013, 12, 17)
TWSEURL = 'http://www.twse.com.tw/ch/trading/exchange/MI_INDEX/MI_INDEX2_print.php?genpage=genpage/Report%(year-m)s/A112%(year-m)s%(day)s%%s.php&type=csv' % {'year-m': '%s%s' % (NOW.year, NOW.month), 'day': NOW.day}
TWSECLS = {'0049': u'封閉式基金',
           '0099P': u'ETF',
           '019919T': u'受益證券',
           '0999': u'認購權證',  #(不含牛證)
           '0999P': u'認售權證',  #(不含熊證)
           '0999C': u'牛證',
           '0999B': u'熊證',
           '0999GA': u'附認股權特別股',
           '0999GD': u'附認股權公司債',
           '0999G9': u'認股權憑證',
           '01': u'水泥工業',
           '02': u'食品工業',
           '03': u'塑膠工業',
           '04': u'紡織纖維',
           '05': u'電機機械',
           '06': u'電器電纜',
           '07': u'化學生技醫療',
           '21': u'化學工業',
           '22': u'生技醫療業',
           '08': u'玻璃陶瓷',
           '09': u'造紙工業',
           '10': u'鋼鐵工業',
           '11': u'橡膠工業',
           '12': u'汽車工業',
           '13': u'電子工業',
           '24': u'半導體業',
           '25': u'電腦及週邊設備業',
           '26': u'光電業',
           '27': u'通信網路業',
           '28': u'電子零組件業',
           '29': u'電子通路業',
           '30': u'資訊服務業',
           '31': u'其他電子業',
           '14': u'建材營造',
           '15': u'航運業',
           '16': u'觀光事業',
           '17': u'金融保險',
           '18': u'貿易百貨',
           '9299': u'存託憑證',
           '23': u'油電燃氣業',
           '19': u'綜合',
           '20': u'其他',
           'CB': u'可轉換公司債',}
           #'ALL_1': u'全部'}

def fetch_twse_list():
    with open('./twse_list.csv', 'w') as files:
        csv_file = csv.writer(files)
        re_pattern = re.compile(r'(=")?[\d\w]{4,6}(=)?')
        re_sub = re.compile(r'[^\w\d]')

        for no in TWSECLS:
            for i in csv.reader(urllib2.urlopen(TWSEURL % no).readlines()):
                if len(i) >= 3 and re_pattern.match(i[0]):
                    pass
                else:
                    i.pop(0)

                if len(i) >= 2 and re_pattern.match(i[0]):
                    csv_file.writerow([re_sub.sub('', i[0]),
                                       i[1].decode('cp950').encode('utf-8'),
                                       no, TWSECLS[no].encode('utf-8')])

    with open('./twse_list.csv', 'r') as files:
        csv_file = csv.reader(files)
        all_items = {}
        for i in csv_file:
            all_items.update({i[0]: i})

    with open('./twse_list.csv', 'w') as files:
        csv_file = csv.writer(files)
        csv_file.writerow(['文件更新', datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 'x', 'x'])
        csv_file.writerow(['證期會代碼', '公司簡稱', '分類代碼', '分類名稱'])
        for i in sorted(all_items):
            csv_file.writerow(all_items[i])

def output_industry_code():
    with open('./industry_code.csv', 'w') as files:
        csv_file = csv.writer(files)
        for i in sorted(TWSECLS):
            csv_file.writerow([i, TWSECLS[i].encode('utf-8')])

if __name__ == '__main__':
    fetch_twse_list()
    output_industry_code()

########NEW FILE########
