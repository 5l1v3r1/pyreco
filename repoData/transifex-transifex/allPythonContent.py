__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Transifex documentation build configuration file, created by
# sphinx-quickstart on Fri Sep 26 13:37:22 2008 +0300.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# The contents of this file are pickled, so don't put values in the namespace
# that aren't pickleable (module imports are okay, they're removed automatically).
#
# All configuration values have a default value; values that are commented out
# serve to show the default value.

def get_revision(repo_path='../..'):
    import subprocess
    try:
        rev = subprocess.check_output(["git", "log", "--pretty=format:'%h'", "-n", "1"], cwd=repo_path)
    except Exception:
        rev = ''
    return rev

import sys
import os
# If your extensions are in another directory, add it here.
#sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__),
#'../../transifex')))

#from txcommon import version as txversion, version_info

# General configuration
# ---------------------

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.txt'

# The master toctree document.
master_doc = 'index'

# General substitutions.
project = 'Transifex'
copyright = '<a href="https://www.transifex.com/">Transifex</a>'

# The default replacements for |version| and |release|, also used in various
# other places throughout the built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '%s-r%s' % (version, get_revision())

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
today_fmt = '%B %d, %Y'

# List of documents that shouldn't be included in the build.
#unused_docs = []

# List of directories, relative to source directories, that shouldn't be searched
# for source files.
#exclude_dirs = []

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
add_module_names = False

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'trac'

# Options for HTML output
# -----------------------

# The style sheet to use for HTML and HTML Help pages. A file of that name
# must exist either in Sphinx' static/ path, or in one of the custom paths
# given in html_static_path.
html_style = 'default.css'

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = "Transifex documentation"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# The name of an image file (within the static path) to place at the top of
# the sidebar.
html_logo = '_static/images/transifex-logo.png'

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
html_additional_pages = {}

# If false, no module index is generated.
#html_use_modindex = True

# If true, the reST sources are included in the HTML build as _sources/<name>.
html_copy_source = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = ''

# Output file base name for HTML help builder.
htmlhelp_basename = 'Transifexdoc'


# Options for LaTeX output
# ------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, document class [howto/manual]).
latex_documents = [('contents')
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_use_modindex = True

latex_use_parts = True

show_source = False
########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from actionlog.models import LogEntry

class LogEntryAdmin(admin.ModelAdmin):
    list_display = ('action_type', 'message_safe', 'user', 'generic_object',
        'action_time')
    search_fields = ('action_type__label', 'message')

    def generic_object(self, obj):
        return "<%s: %s>" % (obj.content_type.model.title(),
        obj.content_type.get_object_for_this_type(pk=obj.object_id))
    generic_object.short_description = 'Generic object'
    generic_object.admin_order_field = 'content_type'

admin.site.register(LogEntry, LogEntryAdmin)
########NEW FILE########
__FILENAME__ = api
# -*- coding: utf-8 -*-
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse

from piston.handler import BaseHandler, AnonymousBaseHandler
from piston.utils import rc, throttle, require_mime

from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.log import logger
from transifex.projects.permissions import *
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.projects.permissions.project import ProjectPermission

from transifex.resources.decorators import method_decorator
from transifex.resources.models import Resource
from transifex.teams.models import Team
from transifex.releases.models import Release

from transifex.api.utils import BAD_REQUEST
from django.contrib.contenttypes.models import ContentType

from transifex.actionlog.models import LogEntry



class BadRequest(Exception):
    pass

class NoContentError(Exception):
    pass

class ActionlogHandler(BaseHandler):
    """
    Actionlog Handler for Read operation.
    """
    allowed_methods = ('GET')
    exclude = ()

    def _has_perm(self, user, project):
        """
        Check that the user has access to this resource.
        """
        perm = ProjectPermission(user)
        if not perm.private(project):
            return False
        return True

    def read(self, request, project_slug=None, resource_slug=None, release_slug=None,
            username=None, language_code=None, api_version=2,):
        try:
            if request.GET.has_key('limit'):
                limit = request.GET['limit']
            else:
                limit = None

            if username:
                user = User.objects.get(username=username)
                if request.user == user:
                    feeds = LogEntry.objects.filter(user=user,
                            content_type=ContentType.objects.get(model='project'))
                else:
                    feeds = LogEntry.objects.filter(user=user,
                            content_type=ContentType.objects.get(model='project'),
                            project__private=False)

            elif not project_slug:
                private_slugs = list(
                    Project.objects.filter(private=True).values_list('slug', flat=True)
                )
                feeds = LogEntry.objects.filter(
                    content_type=ContentType.objects.get(model='project')
                ).exclude(
                    project__slug__in=private_slugs
                )
                for slug in private_slugs:
                    feeds = feeds.exclude(message__contains='/projects/p/%s/'%slug)

            else:
                project = Project.objects.get(slug=project_slug)
                if not self._has_perm(request.user, project):
                    return rc.FORBIDDEN
                if resource_slug:
                    resource = Resource.objects.get(slug=resource_slug,
                            project=project)
                    feeds = LogEntry.objects.by_object(resource)
                elif language_code:
                    team = Team.objects.get(language__code=language_code,
                            project=project)
                    feeds = LogEntry.objects.by_object(team)
                elif release_slug:
                    release = Release.objects.get(slug=release_slug,
                            project=project)
                    feeds = LogEntry.objects.by_object(release)
                elif project_slug and request.path == reverse('project_actionlogs', args=[project_slug]):
                    feeds = LogEntry.objects.by_object(project)
                else:
                    if request.path.find('resources/actionlog/') > 0:
                        feeds = LogEntry.objects.by_object(project).filter(
                                action_type__label__startswith='project_resource')
                    elif request.path.find('teams/actionlog/') > 0:
                        feeds = LogEntry.objects.by_object(project).filter(
                                action_type__label__startswith='project_team')
                    elif request.path.find('releases/actionlog/') > 0:
                        feeds = LogEntry.objects.by_object(project).filter(
                                action_type__label__startswith='project_release')
            feeds = feeds.values('action_time', 'message', 'user__username')
            if limit:
                feeds = feeds[:limit]
            return feeds

        except Project.DoesNotExist, e:
            logger.warning(unicode(e))
            return rc.NOT_FOUND
        except Resource.DoesNotExist, e:
            logger.warning(unicode(e))
            return rc.NOT_FOUND
        except Team.DoesNotExist, e:
            logger.warning(unicode(e))
            return rc.NOT_FOUND
        except Release.DoesNotExist, e:
            logger.warning(unicode(e))
            return rc.NOT_FOUND
        except User.DoesNotExist, e:
            logger.warning(unicode(e))
            return rc.NOT_FOUND

########NEW FILE########
__FILENAME__ = filters
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _

import django_filters
from actionlog.models import LogEntry
from ajax_select.fields import AutoCompleteSelectWidget

class LogEntryFilter(django_filters.FilterSet):
    action_time = django_filters.DateRangeFilter()
    user = django_filters.ModelChoiceFilter(queryset=User.objects.all(),
        widget=AutoCompleteSelectWidget('users'),
        help_text=_('Search for a username or leave it blank'))

    class Meta:
        model = LogEntry
        fields = ['user', 'action_type', 'action_time']

########NEW FILE########
__FILENAME__ = tx_project_history_init
# -*- coding: utf-8 -*-

from __future__ import absolute_import
from django.core.management.base import BaseCommand, CommandError
from django.contrib.contenttypes.models import ContentType
from transifex.actionlog.models import LogEntry
from transifex.actionlog.queues import redis_key_for_project
from datastores.txredis import TxRedisMapper
from transifex.projects.models import Project


class Command(BaseCommand):

    help = "Populate the latest history of a project."

    def handle(self, *args, **options):
        if not args:
            projects = Project.objects.all().iterator()
        else:
            projects = Projects.objects.filter(slug__in=args).iterator()
        for idx, p in enumerate(projects):
            if int(options.get('verbosity')) > 1:
                self.stdout.write("Project %d: %s\n" % (idx, p.slug))
            self._populate_history(p)

    def _populate_history(self, project):
        """Store the latest action log items for the specified project."""
        ids = [project.id]
        if project.is_hub:
            ids += project.outsourcing.all().values_list('id', flat=True)
        entries = LogEntry.objects.filter(
            content_type=ContentType.objects.get_for_model(Project),
            object_id__in=ids
        )[:5]
        r = TxRedisMapper()
        key = redis_key_for_project(project)
        for entry in entries:
            data = {
                'action_time': entry.action_time,
                'message': entry.message,
                'action_type': entry.action_type
            }
            r.rpush(key, data=data)
        r.ltrim(key, 0, 4)


########NEW FILE########
__FILENAME__ = tx_resource_history_init
# -*- coding: utf-8 -*-

from django.core.management.base import BaseCommand, CommandError
from django.db.models import get_model
from django.contrib.contenttypes.models import ContentType
from transifex.actionlog.models import LogEntry
from transifex.actionlog.queues import redis_key_for_resource
from datastores.txredis import TxRedisMapper


class Command(BaseCommand):

    help = (
        "Populate the latest history of a resource.\n"
        "You can specify the slug(s) of a project to initialize "
        "only the resources of those projects."
    )

    def handle(self, *args, **options):
        Resource = get_model('resources', 'Resource')
        if not args:
            resources = Resource.objects.all().iterator()
        else:
            resources = Resource.objects.filter(
                project__slug__in=args
            ).iterator()
        for idx, r in enumerate(resources):
            if int(options.get('verbosity')) > 1:
                self.stdout.write("Resource %d: %s\n" % (idx, r.slug))
            self._populate_history(r)

    def _populate_history(self, resource):
        """Store the latest action log items for the specified resources."""
        Resource = get_model('resources', 'Resource')
        entries = LogEntry.objects.filter(
            content_type=ContentType.objects.get_for_model(Resource),
            object_id=resource.id
        )[:5]
        r = TxRedisMapper()
        key = redis_key_for_resource(resource)
        for entry in entries:
            data = {
                'action_time': entry.action_time,
                'message': entry.message,
                'action_type': entry.action_type,
            }
            r.rpush(key, data=data)
        r.ltrim(key, 0, 4)


########NEW FILE########
__FILENAME__ = tx_team_history_init
# -*- coding: utf-8 -*-

from django.core.management.base import BaseCommand, CommandError
from django.db.models import get_model
from django.contrib.contenttypes.models import ContentType
from transifex.actionlog.models import LogEntry
from transifex.actionlog.queues import redis_key_for_team
from datastores.txredis import TxRedisMapper


class Command(BaseCommand):

    help = (
        "Populate the latest history of a team.\n"
        "You can specify the slug(s) of a project to initialize "
        "only the teams of those projects."
    )

    def handle(self, *args, **options):
        Team = get_model('teams', 'Team')
        if not args:
            teams = Team.objects.all().iterator()
        else:
            teams = Team.objects.filter(project__slug__in=args).iterator()
        for idx, t in enumerate(teams):
            if int(options.get('verbosity')) > 1:
                self.stdout.write("Team %d: %s\n" % (idx, t.id))
            self._populate_history(t)

    def _populate_history(self, team):
        """Store the latest action log items for the specified team."""
        Team = get_model('teams', 'Team')
        entries = LogEntry.objects.filter(
            content_type=ContentType.objects.get_for_model(Team),
            object_id=team.id
        )[:5]
        r = TxRedisMapper()
        key = redis_key_for_team(team)
        for entry in entries:
            data = {
                'action_time': entry.action_time,
                'message': entry.message,
                'action_type': entry.action_type,
            }
            r.rpush(key, data=data)
        r.ltrim(key, 0, 4)


########NEW FILE########
__FILENAME__ = tx_user_history_init
# -*- coding: utf-8 -*-

from django.core.management.base import BaseCommand, CommandError
from django.db.models import get_model
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from transifex.actionlog.models import LogEntry
from transifex.actionlog.queues import redis_key_for_user
from datastores.txredis import TxRedisMapper


class Command(BaseCommand):

    help = "Populate the latest history of a user."

    def handle(self, *args, **options):
        users = User.objects.all().iterator()
        for idx, u in enumerate(users):
            if int(options.get('verbosity')) > 1:
                self.stdout.write("User %d: %s\n" % (idx, u.username))
            self._populate_history(u)

    def _populate_history(self, user):
        """Store the latest action log items for the specified team."""
        entries = LogEntry.objects.by_user(user)[:12]
        r = TxRedisMapper()
        key = redis_key_for_user(user)
        for entry in entries:
            data = {
                'action_time': entry.action_time,
                'message': entry.message,
                'action_type': entry.action_type,
                'user': entry.user.username
            }
            r.rpush(key, data=data)
        r.ltrim(key, 0, 11)

########NEW FILE########
__FILENAME__ = 0001_initial

from south.db import db
from django.db import models
from actionlog.models import *

class Migration:

    def forwards(self, orm):

        # Adding model 'LogEntry'
        db.create_table('actionlog_logentry', (
            ('action_time', models.DateTimeField()),
            ('content_type', models.ForeignKey(orm['contenttypes.ContentType'], related_name="tx_object", null=True, blank=True)),
            ('object_id', models.IntegerField(null=True, blank=True)),
            ('object_name', models.CharField(max_length=200, blank=True)),
            ('user', models.ForeignKey(orm['auth.User'], related_name="tx_user_action", null=True, blank=True)),
            ('action_type', models.ForeignKey(orm['notification.NoticeType'])),
            ('message', models.TextField(null=True, blank=True)),
            ('id', models.AutoField(primary_key=True)),
        ))
        db.send_create_signal('actionlog', ['LogEntry'])



    def backwards(self, orm):

        # Deleting model 'LogEntry'
        db.delete_table('actionlog_logentry')



    models = {
        'auth.user': {
            '_stub': True,
            'id': ('models.AutoField', [], {'primary_key': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label','model'),)", 'db_table': "'django_content_type'"},
            '_stub': True,
            'id': ('models.AutoField', [], {'primary_key': 'True'})
        },
        'notification.noticetype': {
            '_stub': True,
            'id': ('models.AutoField', [], {'primary_key': 'True'})
        },
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)"},
            'action_time': ('models.DateTimeField', [], {}),
            'action_type': ('models.ForeignKey', ['NoticeType'], {}),
            'content_type': ('models.ForeignKey', ['ContentType'], {'related_name': '"tx_object"', 'null': 'True', 'blank': 'True'}),
            'id': ('models.AutoField', [], {'primary_key': 'True'}),
            'message': ('models.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('models.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('models.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('models.ForeignKey', ['User'], {'related_name': '"tx_user_action"', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['actionlog']

########NEW FILE########
__FILENAME__ = 0002_auto
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding index on 'LogEntry', fields ['action_time']
        db.create_index('actionlog_logentry', ['action_time'])

        # Adding index on 'LogEntry', fields ['object_id']
        db.create_index('actionlog_logentry', ['object_id'])


    def backwards(self, orm):
        
        # Removing index on 'LogEntry', fields ['object_id']
        db.delete_index('actionlog_logentry', ['object_id'])

        # Removing index on 'LogEntry', fields ['action_time']
        db.delete_index('actionlog_logentry', ['action_time'])


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        }
    }

    complete_apps = ['actionlog']

########NEW FILE########
__FILENAME__ = models
from __future__ import absolute_import
import datetime
from django.db import models
from django.db.models import get_model
from django.contrib.contenttypes import generic
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import User
from django.conf import settings
from django.utils.translation import ugettext_lazy as _
from django.utils.encoding import smart_unicode, force_unicode
from django.template import loader, Context, TemplateDoesNotExist
from django.utils.translation import get_language, activate
from notification.models import NoticeType
from transifex.txcommon.log import logger
from .queues import log_to_queues

def _get_formatted_message(label, context):
    """
    Return a message that is a rendered template with the given context using
    the default language of the system.
    """
    current_language = get_language()

    # Setting the environment to the default language
    activate(settings.LANGUAGE_CODE)

    c = Context(context)
    template = 'notification/%s/notice.html' % label
    try:
        msg = loader.get_template(template).render(c)
    except TemplateDoesNotExist:
        logger.error("Template '%s' doesn't exist." % template)
        msg = None

    # Reset environment to original language
    activate(current_language)

    return msg

def _user_counting(query):
    """
    Get a LogEntry queryset and return a list of dictionaries with the
    counting of times that the users appeared on the queryset.

    Example of the resultant dictionary:
    [{'user__username': u'editor', 'number': 5},
    {'user__username': u'guest', 'number': 1}]
    """
    query_result = query.values('user__username').annotate(
        number=models.Count('user')).order_by('-number')

    # Rename key from 'user__username' to 'username'
    result=[]
    for entry in query_result:
        result.append({'username': entry['user__username'],
                       'number': entry['number']})
    return result

def _distinct_action_time(query, limit=None):
    """
    Distinct rows by the 'action_time' field, keeping in the query only the
    entry with the highest 'id' for the related set of entries with equal
    'action_time'.

    If 'limit' is set, the function  will return the 'limit'-most-recent
    actionlogs.

    Example:

        For the following query set:

            id |          action_time
            ----+----------------------------
            1 | 2010-03-11 10:55:26.32941-03
            2 | 2010-03-11 10:55:26.32941-03
            3 | 2010-03-11 13:48:22.202596-09
            4 | 2010-03-11 13:48:53.505697-03
            5 | 2010-03-11 13:48:53.505697-03
            6 | 2010-03-11 13:51:09.013079-05
            7 | 2010-03-11 13:51:09.013079-05
            8 | 2010-03-11 13:51:09.013079-05

        After passing through this function the query will be:

            id |          action_time
            ----+----------------------------
            2 | 2010-03-11 10:55:26.32941-03
            3 | 2010-03-11 13:48:22.202596-09
            5 | 2010-03-11 13:48:53.505697-03
            8 | 2010-03-11 13:51:09.013079-05

        Rows with the same 'action_time' are eliminated, keeping the one with
        highest 'id'.
    """
    pks = query.defer('object_id', 'content_type').distinct()
    if limit:
        pks = pks.order_by('-id')[:limit]
    else:
        # For some reason, when using defer() the Meta ordering
        # is not respected so we have to set it explicitly.
        pks = pks.order_by('-action_time')
    return pks.select_related('user')

class LogEntryManager(models.Manager):
    def by_object(self, obj, limit=None):
        """Return LogEntries for a related object."""
        ctype = ContentType.objects.get_for_model(obj)
        q = self.filter(content_type__pk=ctype.pk, object_id=obj.pk)
        return _distinct_action_time(q, limit)

    def by_user(self, user, limit=None):
        """Return LogEntries for a specific user."""
        q = self.filter(user__pk__exact=user.pk)
        return _distinct_action_time(q, limit)

    def by_object_last_week(self, obj):
        """Return LogEntries of the related object for the last week."""
        last_week_date = datetime.datetime.today() - datetime.timedelta(days=7)
        ctype = ContentType.objects.get_for_model(obj)
        return self.filter(content_type__pk=ctype.pk, object_id=obj.pk,
            action_time__gt=last_week_date)

    def by_user_and_public_projects(self, user, limit=None):
        """
        Return LogEntries for a specific user and his actions on public projects.
        """
        # Avoiding circular import troubles. get_model didn't make it.
        from transifex.projects.models import Project
        ctype = ContentType.objects.get(model='project')
        q = self.filter(user__pk__exact=user.pk, content_type=ctype,
                object_id__in=Project.objects.filter(private=False))
        return _distinct_action_time(q, limit)

    def for_projects_by_user(self, user):
        """Return project LogEntries for a related user."""
        ctype = ContentType.objects.get(model='project')
        return self.filter(user__pk__exact=user.pk, content_type__pk=ctype.pk)

    def top_submitters_by_project_content_type(self, number=10):
        """
        Return a list of dicts with the ordered top submitters for the
        entries of the 'project' content type.
        """
        return self.top_submitters_by_content_type('projects.project', number)

    def top_submitters_by_team_content_type(self, number=10):
        """
        Return a list of dicts with the ordered top submitters for the
        entries of the 'team' content type.
        """
        return self.top_submitters_by_content_type('teams.team', number)

    def top_submitters_by_language_content_type(self, number=10):
        """
        Return a list of dicts with the ordered top submitters for the
        entries of the 'language' content type.
        """
        return self.top_submitters_by_content_type('languages.language', number)

class LogEntry(models.Model):
    """A Entry in an object's log."""
    user = models.ForeignKey(User, verbose_name=_('User'), blank=True,
        null=True, related_name="actionlogs")

    object_id = models.IntegerField(blank=True, null=True, db_index=True)
    content_type = models.ForeignKey(ContentType, blank=True, null=True,
                                     related_name="actionlogs")

    object = generic.GenericForeignKey('content_type', 'object_id')

    action_type = models.ForeignKey(NoticeType, verbose_name=_('Action type'))
    action_time = models.DateTimeField(_('Action time'), db_index=True)
    object_name = models.CharField(blank=True, max_length=200)
    message = models.TextField(blank=True, null=True)

    # Managers
    objects = LogEntryManager()

    class Meta:
        verbose_name = _('log entry')
        verbose_name_plural = _('log entries')
        ordering = ('-action_time',)

    def __unicode__(self):
        return u'%s.%s.%s' % (self.action_type, self.object_name, self.user)

    def __repr__(self):
        return smart_unicode("<LogEntry %d (%s)>" % (self.id,
                                                     self.action_type.label))

    def save(self, *args, **kwargs):
        """Save the object in the database."""
        if self.action_time is None:
           self.action_time = datetime.datetime.now()
        super(LogEntry, self).save(*args, **kwargs)

    def message_safe(self):
        """Return the message as HTML"""
        return self.message
    message_safe.allow_tags = True
    message_safe.admin_order_field = 'message'

    @property
    def action_type_short(self):
        """
        Return a shortened, generalized version of an action type.

        Useful for presenting an image signifying an action type. Example::
        >>> from notification.models import  NoticeType
        >>> nt = NoticeType(label='project_added')
        >>> zlog = LogEntry(action_type=nt)
        >>> nt
        <NoticeType: project_added>
        >>> zlog.action_type
        <NoticeType: project_added>
        >>> zlog.action_type_short
        'added'
        """
        return self.action_type.label.split('_')[-1]

def action_logging(user, object_list, action_type, message=None, context=None):
    """
    Add ActionLog using a set of parameters.

    user:
      The user that did the action.
    object_list:
      A list of objects that should be created the actionlog for.
    action_type:
      Label of a type of action from the NoticeType model.
    message:
      A message to be included at the actionlog. If no message is passed
      it will try do render a message using the notice.html from the
      notification application.
    context:
      To render the message using the notification files, sometimes it is
      necessary to pass some vars by using a context.

    Usage::

        al = 'project_added'
        context = {'project': object}
        action_logging(request.user, [object], al , context=context):
    """
    if not getattr(settings, 'ACTIONLOG_ENABLED', None):
        return

    if context is None:
        context = {}

    if message is None:
        message = _get_formatted_message(action_type, context)

    action_type_obj = NoticeType.objects.get(label=action_type)

    time = datetime.datetime.now()

    try:
        for object in object_list:
            l = LogEntry(
                    user_id = user.pk,
                    content_type = ContentType.objects.get_for_model(object),
                    object_id = object.pk,
                    object_name = force_unicode(object)[:200],
                    action_type = action_type_obj,
                    action_time = time,
                    message = message)
            l.save()
            if settings.USE_REDIS:
                log_to_queues(object, user, time, action_type_obj, message)
    except TypeError:
        raise TypeError("The 'object_list' parameter must be iterable")

########NEW FILE########
__FILENAME__ = queues
# -*- coding: utf-8 -*-

"""
Redis related stuff for action logs.
"""

from django.db.models import get_model
from django.utils.encoding import force_unicode
from django.contrib.auth.models import User
from transifex.txcommon.log import logger
from datastores.txredis import TxRedisMapper, redis_exception_handler


def redis_key_for_resource(resource):
    return 'resource:history:%s:%s' % (resource.project_id, resource.slug)


def redis_key_for_project(project):
    return 'project:history:%s' % project.slug


def redis_key_for_team(team):
    return 'team:history:%s:%s' % (team.project_id, team.language_id)


def redis_key_for_user(user):
    return 'user:history:%s' % user.id


@redis_exception_handler
def log_to_queues(o, user, action_time, action_type, message):
    """Log actions to redis' queues."""
    Project = get_model('projects', 'Project')
    Resource = get_model('resources', 'Resource')
    Team = get_model('teams', 'Team')
    _log_to_user_history(user, action_time, action_type, message)
    if isinstance(o, Project):
        _log_to_recent_project_actions(o, user.id, action_time, message)
        _log_to_project_history(o, action_time, action_type, message)
    elif isinstance(o, Resource):
        _log_to_resource_history(o, action_time, action_type, message)
    elif isinstance(o, Team):
        _log_to_team_history(o, action_time, action_type, message)

def _log_to_recent_project_actions(p, user_id, action_time, message):
    """Log actions that refer to projects to a queue of most recent actions.

    We use redis' list for that. We skip actions that refer to private projects.
    """
    Project = get_model('projects', 'Project')
    if p.private:
        return
    private_slugs = Project.objects.filter(
        private=True
    ).values_list('slug', flat=True)
    for slug in private_slugs:
        if ('/projects/p/%s/' % slug) in message:
            return

    key = 'event_feed'
    data = {
        'name': force_unicode(p)[:200],
        'user_id': user_id,
        'action_time': action_time,
        'message': message
    }
    r = TxRedisMapper()
    r.lpush(key, data=data)
    r.ltrim(key, 0, 11)


@redis_exception_handler
def _log_to_project_history(project, action_time, action_type, message):
    """Log a message to a project's history queue."""
    Project = get_model('projects', 'Project')
    key = redis_key_for_project(project)
    data = {
        'action_time': action_time,
        'message': message,
        'action_type': action_type,
    }
    r = TxRedisMapper()
    r.lpush(key, data=data)
    r.ltrim(key, 0, 4)

    # Store logs in hubs, too
    if project.outsource:
        _log_to_project_history(
            project.outsource, action_time, action_type, message
        )


@redis_exception_handler
def _log_to_resource_history(resource, action_time, action_type, message):
    """Log a message to a resource's history queue."""
    Resource = get_model('resources', 'Resource')
    key = redis_key_for_resource(resource)
    data = {
        'action_time': action_time,
        'message': message,
        'action_type': action_type,
    }
    r = TxRedisMapper()
    r.lpush(key, data=data)
    r.ltrim(key, 0, 4)


@redis_exception_handler
def _log_to_team_history(team, action_time, action_type, message):
    """Log a message to a team's history queue."""
    Resource = get_model('teams', 'Team')
    key = redis_key_for_team(team)
    data = {
        'action_time': action_time,
        'message': message,
        'action_type': action_type,
    }
    r = TxRedisMapper()
    r.lpush(key, data=data)
    r.ltrim(key, 0, 4)


@redis_exception_handler
def _log_to_user_history(user, action_time, action_type, message):
    """Log a message to a user's history queue."""
    key = redis_key_for_user(user)
    data = {
        'action_time': action_time,
        'message': message,
        'action_type': action_type,
        'user': user.username
    }
    r = TxRedisMapper()
    r.lpush(key, data=data)
    r.ltrim(key, 0, 11)

########NEW FILE########
__FILENAME__ = tx_action_log
from django import template
from django.conf import settings
from django.db.models import get_model
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import User
from actionlog.models import LogEntry
from actionlog.queues import redis_key_for_resource, redis_key_for_project, \
        redis_key_for_team, redis_key_for_user
from datastores.txredis import TxRedisMapper, redis_exception_handler


register = template.Library()

class LogNode(template.Node):
    def __init__(self, limit, varname, user=None, object=None, log_type='get_log'):
        self.limit, self.varname, self.object , self.user = (limit, varname,
                                                             object, user)
        self.log_type = log_type

    def __repr__(self):
        return "<GetLog Node>"

    def render(self, context):
        # XXX Should be fixed when ActionLog starts using Redis.
        # XXX __init_ is executed only once (before template compilation).
        # XXX NEEDS FIXING: get_public_log <limit>: limit is now useless.
        self.limit = 5

        if self.user is not None:
            user = template.Variable(self.user).resolve(context)
            if self.log_type and self.log_type == 'get_public_log':
                query = LogEntry.objects.by_user_and_public_projects(
                  user, self.limit)
            else:
                query = LogEntry.objects.by_user(user, self.limit)
        elif self.object is not None:
            obj = template.Variable(self.object).resolve(context)
            query = LogEntry.objects.by_object(obj)

        context[self.varname] = query
        return ''

class DoGetLog:
    """
    Populates a template variable with the log for the given criteria.

    Usage::

        {% get_log <limit> as <varname> [for object <context_var_containing_user_obj>] %}

    Examples::

        {% get_log 10 as action_log for_object foo %}
        {% get_log 10 as action_log for_user current_user %}
    """

    def __init__(self, tag_name):
        self.tag_name = tag_name

    def __call__(self, parser, token):
        tokens = token.contents.split()
        if len(tokens) < 4:
            raise template.TemplateSyntaxError, (
                "'%s' statements requires two arguments" % self.tag_name)
        if not tokens[1].isdigit():
            raise template.TemplateSyntaxError, (
                "First argument in '%s' must be an integer" % self.tag_name)
        if tokens[2] != 'as':
            raise template.TemplateSyntaxError, (
                "Second argument in '%s' must be 'as'" % self.tag_name)
        if len(tokens) > 4:
            if tokens[4] == 'for_user':
                return LogNode(limit=tokens[1], varname=tokens[3],
                               user=(len(tokens) > 5 and tokens[5] or None),
                               log_type=self.tag_name)
            elif tokens[4] == 'for_object':
                return LogNode(limit=tokens[1], varname=tokens[3],
                               object=(len(tokens) > 5 and tokens[5] or None),
                               log_type=self.tag_name)
            else:
                raise template.TemplateSyntaxError, (
                    "Fourth argument in '%s' must be either 'user' or "
                    "'object'" % self.tag_name)


class RecentLogNode(template.Node):
    """Node to get the most recent action logs for an item."""

    def __init__(self, model, obj, key_func, context_var):
        self.model = model
        self.obj = obj
        self.key_func = key_func
        self.context_var = context_var

    def render(self, context):
        obj = template.Variable(self.obj).resolve(context)
        redis_key = self.key_func(obj)
        events = self._action_logs_from_redis(redis_key)
        if events is None:
            Project = get_model('projects', 'Project')
            if isinstance(obj, Project) and obj.is_hub:
                ids = [obj.id, ]
                ids += obj.outsourcing.all().values_list('id', flat=True)
                events = LogEntry.objects.filter(
                    content_type=ContentType.objects.get_for_model(Project),
                    object_id__in=ids
                )[:5]
            else:
                events = LogEntry.objects.filter(
                    content_type=ContentType.objects.get_for_model(self.model),
                    object_id=obj.id
                )[:5]
        context[self.context_var] = events
        return ""

    @redis_exception_handler
    def _action_logs_from_redis(self, key):
        """Get the action logs for the key from redis."""
        if not settings.USE_REDIS:
            return None
        r = TxRedisMapper()
        return r.lrange(key, 0, -1)


def _parse_recent_log_args(token):
    """Parse the token of a recent log tags and return the useful values."""
    tokens = token.split_contents()
    if len(tokens) != 4:
        msg = "Wrong number of arguments for %s."
        raise template.TemplateSyntaxError(msg % tokens[0])
    elif tokens[2] != 'as':
        msg = "Wrong syntax for %s: third argument must be the keyword 'as'"
        raise template.TemplateSyntaxError(msg % tokens[0])
    return (tokens[1], tokens[3])


def recent_resource_log(parser, token):
    """Return the most recent logs of the specified resource."""
    (resource, context_var) = _parse_recent_log_args(token)
    Resource = get_model('resources', 'Resource')
    return RecentLogNode(Resource, resource, redis_key_for_resource, context_var)


def recent_project_log(parser, token):
    """Return the most recent logs of the specified resource."""
    (project, context_var) = _parse_recent_log_args(token)
    Project = get_model('projects', 'Project')
    return RecentLogNode(Project, project, redis_key_for_project, context_var)


def recent_team_log(parser, token):
    """Return the most recent logs of the specified team."""
    (team, context_var) = _parse_recent_log_args(token)
    Team = get_model('teams', 'Team')
    return RecentLogNode(Team, team, redis_key_for_team, context_var)


def recent_user_log(parser, token):
    """Return the most recent logs of the specified user."""
    (user, context_var) = _parse_recent_log_args(token)
    return RecentLogNode(User, user, redis_key_for_user, context_var)


register.tag('get_log', DoGetLog('get_log'))
register.tag('get_public_log', DoGetLog('get_public_log'))
register.tag('recent_resource_log', recent_resource_log)
register.tag('recent_project_log', recent_project_log)
register.tag('recent_team_log', recent_team_log)
register.tag('recent_user_log', recent_user_log)

########NEW FILE########
__FILENAME__ = api
#-*- coding: utf-8 -*-
from django.core.urlresolvers import reverse
from django.utils import simplejson
from transifex.txcommon.tests import base
from transifex.actionlog.models import *

class ActionlogAPITests(base.BaseTestCase):
    def setUp(self, *args, **kwargs):
        super(ActionlogAPITests, self).setUp(*args, **kwargs)

    def test_project_actionlogs(self):
        """Test API for global actionlogs and per project actionlogs"""
        for user in self.client.keys():
            #Test global actionlogs
            resp = self.client[user].get(reverse('global_actionlogs'), {'limit':10})
            if user == 'anonymous':
                self.assertEqual(resp.status_code, 401)
            else:
                self.assertEqual(resp.status_code, 200)

            #Test actionlogs for a public project
            resp = self.client[user].get(reverse('project_actionlogs',
                args=['project1']))
            if user == 'anonymous':
                self.assertEqual(resp.status_code, 401)
            else:
                self.assertEqual(resp.status_code, 200)

            #Test actionlogs for a private project
            resp = self.client[user].get(reverse('project_actionlogs',
                args=['project2']))
            if user == 'anonymous':
                self.assertEqual(resp.status_code, 401)
            else:
                if user in ['maintainer', 'team_member', 'team_coordinator',
                        'reviewer']:
                    self.assertEqual(resp.status_code, 200)
                else:
                    self.assertEqual(resp.status_code, 401)

        resp = self.client['maintainer'].get(reverse('project_actionlogs',
            args=['project_foo']))
        self.assertEqual(resp.status_code, 404)

    def test_team_actionlogs(self):
        """Test actionlogs API for teams"""
        for user in self.client.keys():
            #Test actionlogs for all teams in a public project
            resp = self.client[user].get(reverse('project_teams_actionlogs',
                args=['project1']))
            if user == 'anonymous':
                self.assertEqual(resp.status_code, 401)
            else:
                self.assertEqual(resp.status_code, 200)

            #Test actionlogs for all teams in a private project
            resp = self.client[user].get(reverse('project_teams_actionlogs',
                args=['project2']))
            if user in ['maintainer', 'team_coordinator', 'team_member',
                    'reviewer']:
                self.assertEqual(resp.status_code, 200)
            else:
                self.assertEqual(resp.status_code, 401)

            #Test actionlogs for a team in a public project
            resp = self.client[user].get(reverse('project_team_actionlogs',
                args=['project1', self.language.code]))
            if user == 'anonymous':
                self.assertEqual(resp.status_code, 401)
            else:
                self.assertEqual(resp.status_code, 200)

            #Test actionlogs for a team in a private project
            resp = self.client[user].get(reverse('project_team_actionlogs',
                args=['project2', self.language.code]))
            if user in ['maintainer', 'team_coordinator', 'team_member',
                    'reviewer']:
                self.assertEqual(resp.status_code, 200)
            else:
                self.assertEqual(resp.status_code, 401)

        resp = self.client['maintainer'].get(reverse('project_team_actionlogs',
            args=['project1', 'team_foo']))
        self.assertEqual(resp.status_code, 404)

    def test_release_actionlogs(self):
        """Test actionlogs API for releases"""
        for user in self.client.keys():
            #Test actionlogs for all releases in a public project
            resp = self.client[user].get(reverse('project_releases_actionlogs',
                args=['project1']))
            if user == 'anonymous':
                self.assertEqual(resp.status_code, 401)
            else:
                self.assertEqual(resp.status_code, 200)

            #Test actionlogs for all releases in a private project
            resp = self.client[user].get(reverse('project_releases_actionlogs',
                args=['project2']))
            if user in ['maintainer', 'team_coordinator', 'team_member',
                    'reviewer']:
                self.assertEqual(resp.status_code, 200)
            else:
                self.assertEqual(resp.status_code, 401)

            #Test actionlogs for a release in a public project
            resp = self.client[user].get(reverse('project_release_actionlogs',
                args=['project1', 'releaseslug1']))
            if user == 'anonymous':
                self.assertEqual(resp.status_code, 401)
            else:
                self.assertEqual(resp.status_code, 200)

            #Test actionlogs for a release in a private project
            resp = self.client[user].get(reverse('project_release_actionlogs',
                args=['project2', 'releaseslug2']))
            if user in ['maintainer', 'team_coordinator', 'team_member',
                    'reviewer']:
                self.assertEqual(resp.status_code, 200)
            else:
                self.assertEqual(resp.status_code, 401)

        resp = self.client['maintainer'].get(reverse('project_release_actionlogs',
            args=['project1', 'release_foo']))
        self.assertEqual(resp.status_code, 404)

    def test_resource_actionlogs(self):
        """Test actionlogs API for resources"""
        for user in self.client.keys():
            #Test actionlogs for all resources in a public project
            resp = self.client[user].get(reverse('project_resources_actionlogs',
                args=['project1']))
            if user == 'anonymous':
                self.assertEqual(resp.status_code, 401)
            else:
                self.assertEqual(resp.status_code, 200)

            #Test actionlogs for all resources in a private project
            resp = self.client[user].get(reverse('project_resources_actionlogs',
                args=['project2']))
            if user in ['maintainer', 'team_coordinator', 'team_member',
                    'reviewer']:
                self.assertEqual(resp.status_code, 200)
            else:
                self.assertEqual(resp.status_code, 401)

            #Test actionlogs for a resource in a public project
            resp = self.client[user].get(reverse('project_resource_actionlogs',
                args=['project1', 'resource1']))
            if user == 'anonymous':
                self.assertEqual(resp.status_code, 401)
            else:
                self.assertEqual(resp.status_code, 200)

            #Test actionlogs for a resource in a private project
            resp = self.client[user].get(reverse('project_resource_actionlogs',
                args=['project2', 'resource1']))
            if user in ['maintainer', 'team_coordinator', 'team_member',
                    'reviewer']:
                self.assertEqual(resp.status_code, 200)
            else:
                self.assertEqual(resp.status_code, 401)

        resp = self.client['maintainer'].get(reverse('project_resource_actionlogs',
            args=['project1', 'res_foo']))
        self.assertEqual(resp.status_code, 404)

    def test_user_actionlogs(self):
        """Test actionlogs API for a user"""
        l = LogEntry.objects.create(user=self.user['maintainer'],
                action_type=NoticeType.objects.get(label='project_changed'),
                content_type=ContentType.objects.get(model='project'),
                object_id = self.project_private.id,
                object = self.project_private,
                message='The project with slug project2 has been changed')
        for user in self.client.keys():
            resp = self.client[user].get(reverse('user_actionlogs',
                args=['maintainer']))
            if user == 'anonymous':
                self.assertEqual(resp.status_code, 401)
                continue
            else:
                self.assertEqual(resp.status_code, 200)
            if user == 'maintainer':
                self.assertContains(resp, 'project2')
            else:
                self.assertNotContains(resp, 'project2')

        resp = self.client['maintainer'].get(reverse('user_actionlogs',
            args=['foo']))
        self.assertEqual(resp.status_code, 404)

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from models import URLInfo

admin.site.register(URLInfo)


########NEW FILE########
__FILENAME__ = forms
from django import forms
from autofetch.models import URLInfo


class URLInfoForm(forms.ModelForm):
    class Meta:
        model = URLInfo
        fields = ('source_file_url','auto_update', )


########NEW FILE########
__FILENAME__ = txfetch
# -*- coding: utf-8 -*-
"""
File containing the necessary mechanics for the txlanguages management command.
"""
from optparse import make_option, OptionParser
import os.path
import sys
from django.core.management.base import (BaseCommand, LabelCommand, CommandError)
from django.db.models import get_model
from django.conf import settings

URLInfo = get_model("autofetch", "URLInfo")
Resource = get_model("resources", "Resource")

class Command(LabelCommand):
    """
    Management Command Class about resource source file updating
    """
    help = "Run this command to update resources which have provided a url"\
        " for their source\nfile. By default it updates all resources which"\
        " have auto_update set to True\nbut you can also specify the resources"\
        " you want updated by providing the project\nand resource slug."
    args = "<project_slug1.resource_slug1 project_slug1.resource_slug2>"
    option_list = LabelCommand.option_list + (
        make_option('--skip', action='store_true',
            dest='skip', default=False,
            help='Import data from a file or from the default '),
    )

    can_import_settings = True

    def handle(self, *args, **options):
        skip = options.get('skip')
        resource_urlhandlers = []
        if not args:
            resource_urlhandlers = URLInfo.objects.filter(auto_update=True)
        else:
            resources = []
            for arg in args:
                try:
                    prj, res = arg.split('.')
                    resources.extend(Resource.objects.filter(project__slug=prj,
                        slug=res) or None)
                except (ValueError, TypeError), e:
                    sys.stderr.write((u"No matching resource was found for %s\n" % arg).encode('UTF-8'))

            resource_urlhandlers = URLInfo.objects.filter(resource__in=resources)

        num = resource_urlhandlers.count()

        if num == 0:
            sys.stderr.write("No resources suitable for updating found. Exiting...\n")
            sys.exit()

        sys.stdout.write("A total of %s resources are listed for updating.\n" % num)

        for seq, handler in enumerate(resource_urlhandlers):
            sys.stdout.write((u"Updating resource %s.%s (%s of %s)\n" %
                ( handler.resource.project.slug, handler.resource.slug, seq+1,num)).encode('UTF-8'))
            try:
                handler.update_source_file()
            except Exception, e:
                sys.stderr.write((u"Error updating source file for resource %s.%s\n" %
                    ( handler.resource.project.slug, handler.resource.slug)).encode('UTF-8'))
                sys.stderr.write("Exception was: %s\n" % e)
                if skip:
                    continue
                sys.stderr.write("Aborting...\n")
                sys.exit(1)
            else:
               sys.stdout.write((u"Updated source file for resource %s.%s\n" %
                    (handler.resource.project.slug, handler.resource.slug)).encode('UTF-8'))

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    depends_on = (
        ("resources", "0001_initial"),
    )

    def forwards(self, orm):

        # Adding model 'URLInfo'
        db.create_table('autofetch_urlinfo', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('source_file_url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('auto_update', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('resource', self.gf('django.db.models.fields.related.ForeignKey')(related_name='url_info', unique=True, to=orm['resources.Resource'])),
        ))
        db.send_create_signal('autofetch', ['URLInfo'])


    def backwards(self, orm):

        # Deleting model 'URLInfo'
        db.delete_table('autofetch_urlinfo')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'autofetch.urlinfo': {
            'Meta': {'ordering': "('resource',)", 'object_name': 'URLInfo'},
            'auto_update': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'url_info'", 'unique': 'True', 'to': "orm['resources.Resource']"}),
            'source_file_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['autofetch']

########NEW FILE########
__FILENAME__ = 0002_convert_fk_to_1on1
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'URLInfo.resource'
        db.alter_column('autofetch_urlinfo', 'resource_id', self.gf('django.db.models.fields.related.OneToOneField')(unique=True, to=orm['resources.Resource']))


    def backwards(self, orm):

        # Changing field 'URLInfo.resource'
        db.alter_column('autofetch_urlinfo', 'resource_id', self.gf('django.db.models.fields.related.ForeignKey')(unique=True, to=orm['resources.Resource']))


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'autofetch.urlinfo': {
            'Meta': {'ordering': "('resource',)", 'object_name': 'URLInfo'},
            'auto_update': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'url_info'", 'unique': 'True', 'to': "orm['resources.Resource']"}),
            'source_file_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['autofetch']

########NEW FILE########
__FILENAME__ = models
import gc
from django.db import models
from django.utils.translation import ugettext_lazy as _

from transifex.resources.models import Resource
from transifex.txcommon.log import logger
from transifex.resources.formats.registry import registry

import os
import urllib2, urlparse
from uuid import uuid4


class URLInfo(models.Model):

   # URL info for remote fetching/updating
    source_file_url = models.URLField(_('Source file URL'),
        null=True, blank=True, verify_exists=True,
        help_text=_("A URL pointing to the source file of this resource"\
            " to be used for automatic updates."))
    auto_update = models.BooleanField(_("Automatically update source file"),
        default=False, help_text=_("A boolean field indicating whether the"\
        " file should be automatically updated by pulling and merging from"\
        " the given URL."))

    # Foreign keys
    resource = models.OneToOneField(Resource, verbose_name=_('Resource'),
        blank=False, null=False, related_name='url_info', unique=True,
        help_text=_("The translation resource."))

    class Meta:
        verbose_name = _('url handler')
        ordering  = ('resource',)

    def __unicode__(self):
        return "%s.%s" % (self.resource.project.slug, self.resource.slug)

    def update_source_file(self, fake=False):
        """
        Fetch source file from remote url and import it, updating existing
        entries.
        """
        try:
            source_file = urllib2.urlopen(self.source_file_url)
        except:
            logger.error("Could not pull source file for resource %s (%s)" %
                (self.resource.full_name, self.source_file_url))
            raise

        filename = ''
        if source_file.info().has_key('Content-Disposition'):
                # If the response has Content-Disposition, we try to take
                # filename from it
                content = source_file.info()['Content-Disposition']
                if 'filename' in content:
                    filename = content.split('filename')[1]
                    filename = filename.replace('"', '').replace("'", ""
                        ).replace("=", "").replace('/', '-').strip()

        if filename == '':
            parts = urlparse.urlsplit(self.source_file_url)
            #FIXME: This still might end empty
            filename = parts.path.split('/')[-1]

        try:
            if not self.resource.i18n_method:
                msg = "No i18n method defined for resource %s"
                logger.error(msg % self.resource)
                return
            parser = registry.appropriate_handler(
                self.resource, language=self.resource.source_language,
                filename=filename
            )
            language = self.resource.source_language
            content = source_file.read()
            parser.bind_content(content)
            parser.set_language(language)
            parser.bind_resource(self.resource)
            parser.is_content_valid()
            parser.parse_file(is_source=True)
            strings_added, strings_updated = 0, 0
            if not fake:
                strings_added, strings_updated = parser.save2db(is_source=True)
        except Exception,e:
            logger.error("Error importing source file for resource %s.%s (%s): %s" %
                ( self.resource.project.slug, self.resource.slug,
                    self.source_file_url, str(e)))
            raise
        finally:
            source_file.close()
            gc.collect()

        return strings_added, strings_updated

########NEW FILE########
__FILENAME__ = tests
import os
from django.core.urlresolvers import reverse
from django.conf import settings
from django.test.client import Client
from transifex.projects.models import Project
from transifex.resources.models import Resource
from transifex.txcommon.tests.base import BaseTestCase
from transifex.addons.autofetch.models import URLInfo

class TestFetchUrl(BaseTestCase):

    def setUp(self):
        super(TestFetchUrl, self).setUp()

        # Sanity checks
        self.assertTrue(
            Project.objects.count() >= 1,
            msg = "Base test case didn't create any projects"
        )
        self.assertTrue(
            Resource.objects.count() >= 1,
            msg = "Base test case didn't create any resources"
        )
        # Generate watch URLs
        self.url_fetch_url = reverse(
            'fetch_url', args=[self.project.slug, self.resource.slug]
        )

    def test_fetch_url(self):
        """Test fetch url"""
        resp = self.client['maintainer'].get(self.url_fetch_url)
        self.assertContains(
            resp, '"status": 404, "message": "URL not set for this resource."',
            status_code=200
        )

        source_url = os.path.join(
            settings.TX_ROOT, 'resources/tests/lib/pofile/tests.pot'
        )
        url_info = URLInfo.objects.create(
            source_file_url='file://' + source_url,
            auto_update=True, resource = self.resource
        )
        resp = self.client['maintainer'].get(self.url_fetch_url)
        self.assertContains(
            resp,
            '"status": 200, "message": "Source file updated successfully."',
            status_code=200
        )

        source_url = '/'.join(source_url.split('/')[:-1]) + '/tests1/pot'
        url_info.source_file_url = 'file://' + source_url
        url_info.save()
        resp = self.client['maintainer'].get(self.url_fetch_url)
        self.assertContains(
            resp,
            '"status": 500, "message": "Error updating source file."',
            status_code=200
        )

########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from views import fetch_url

urlpatterns = patterns('',
    url(
        regex = '^projects/p/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/fetch_url/$',
        view = fetch_url,
        name = 'fetch_url',),
)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.core.urlresolvers import reverse
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse, HttpResponseBadRequest
from django.utils import simplejson
from django.utils.translation import ugettext as _
from transifex.projects.models import Project
from transifex.projects.permissions import *
from transifex.txcommon.decorators import one_perm_required_or_403
from models import URLInfo

@one_perm_required_or_403(pr_resource_add_change,
                          (Project, "slug__exact", "project_slug"))
def fetch_url(request, project_slug, resource_slug):
    """
    Trigger the fetching of the source file url and then update the resource.
    """
    response_dict = {}
    try:
        urlinfo = URLInfo.objects.get(resource__slug=resource_slug,
            resource__project__slug=project_slug)
        urlinfo.update_source_file()
    except URLInfo.DoesNotExist:
        response_dict = { 'status':404,
                          'message':_("URL not set for this resource."),
                          'redirect_url':reverse('resource_detail',
                                                 args=[project_slug, resource_slug])}
    except:
        response_dict = { 'status':500,
                          'message':_("Error updating source file."),
                          'redirect_url':reverse('project_detail',
                                                 args=[project_slug,])}
    else:
        response_dict = { 'status':200,
                          'message':_("Source file updated successfully."),
                          'redirect_url':reverse('resource_detail',
                                                  args=[project_slug,
                                                        resource_slug])}

    json_dict = simplejson.dumps(response_dict)
    return HttpResponse(json_dict, mimetype='application/json')

########NEW FILE########
__FILENAME__ = gviz_api
#!/usr/bin/python
#
# Copyright (C) 2009 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Converts Python data into data for Google Visualization API clients.

This library can be used to create a google.visualization.DataTable usable by
visualizations built on the Google Visualization API. Output formats are raw
JSON, JSON response, and JavaScript.

See http://code.google.com/apis/visualization/ for documentation on the
Google Visualization API.
"""

__author__ = "Amit Weinstein, Misha Seltzer"

import cgi
import datetime
import types


class DataTableException(Exception):
  """The general exception object thrown by DataTable."""
  pass


class DataTable(object):
  """Wraps the data to convert to a Google Visualization API DataTable.

  Create this object, populate it with data, then call one of the ToJS...
  methods to return a string representation of the data in the format described.

  You can clear all data from the object to reuse it, but you cannot clear
  individual cells, rows, or columns. You also cannot modify the table schema
  specified in the class constructor.

  You can add new data one or more rows at a time. All data added to an
  instantiated DataTable must conform to the schema passed in to __init__().

  You can reorder the columns in the output table, and also specify row sorting
  order by column. The default column order is according to the original
  table_description parameter. Default row sort order is ascending, by column
  1 values. For a dictionary, we sort the keys for order.

  The data and the table_description are closely tied, as described here:

  The table schema is defined in the class constructor's table_description
  parameter. The user defines each column using a tuple of
  (id[, type[, label[, custom_properties]]]). The default value for type is
  string, label is the same as ID if not specified, and custom properties is
  an empty dictionary if not specified.

  table_description is a dictionary or list, containing one or more column
  descriptor tuples, nested dictionaries, and lists. Each dictionary key, list
  element, or dictionary element must eventually be defined as
  a column description tuple. Here's an example of a dictionary where the key
  is a tuple, and the value is a list of two tuples:
    {('a', 'number'): [('b', 'number'), ('c', 'string')]}

  This flexibility in data entry enables you to build and manipulate your data
  in a Python structure that makes sense for your program.

  Add data to the table using the same nested design as the table's
  table_description, replacing column descriptor tuples with cell data, and
  each row is an element in the top level collection. This will be a bit
  clearer after you look at the following examples showing the
  table_description, matching data, and the resulting table:

  Columns as list of tuples [col1, col2, col3]
    table_description: [('a', 'number'), ('b', 'string')]
    AppendData( [[1, 'z'], [2, 'w'], [4, 'o'], [5, 'k']] )
    Table:
    a  b   <--- these are column ids/labels
    1  z
    2  w
    4  o
    5  k

  Dictionary of columns, where key is a column, and value is a list of
  columns  {col1: [col2, col3]}
    table_description: {('a', 'number'): [('b', 'number'), ('c', 'string')]}
    AppendData( data: {1: [2, 'z'], 3: [4, 'w']}
    Table:
    a  b  c
    1  2  z
    3  4  w

  Dictionary where key is a column, and the value is itself a dictionary of
  columns {col1: {col2, col3}}
    table_description: {('a', 'number'): {'b': 'number', 'c': 'string'}}
    AppendData( data: {1: {'b': 2, 'c': 'z'}, 3: {'b': 4, 'c': 'w'}}
    Table:
    a  b  c
    1  2  z
    3  4  w
  """

  def __init__(self, table_description, data=None, custom_properties=None):
    """Initialize the data table from a table schema and (optionally) data.

    See the class documentation for more information on table schema and data
    values.

    Args:
      table_description: A table schema, following one of the formats described
                         in TableDescriptionParser(). Schemas describe the
                         column names, data types, and labels. See
                         TableDescriptionParser() for acceptable formats.
      data: Optional. If given, fills the table with the given data. The data
            structure must be consistent with schema in table_description. See
            the class documentation for more information on acceptable data. You
            can add data later by calling AppendData().
      custom_properties: Optional. A dictionary from string to string that
                         goes into the table's custom properties. This can be
                         later changed by changing self.custom_properties.

    Raises:
      DataTableException: Raised if the data and the description did not match,
                          or did not use the supported formats.
    """
    self.__columns = self.TableDescriptionParser(table_description)
    self.__data = []
    self.custom_properties = {}
    if custom_properties is not None:
      self.custom_properties = custom_properties
    if data:
      self.LoadData(data)

  @staticmethod
  def _EscapeValueForCsv(v):
    """Escapes the value for use in a CSV file.

    Puts the string in double-quotes, and escapes any inner double-quotes by
    doubling them.

    Args:
      v: The value to escape.

    Returns:
      The escaped values.
    """
    return '"%s"' % v.replace('"', '""')

  @staticmethod
  def _EscapeValue(v):
    """Puts the string in quotes, and escapes any inner quotes and slashes."""
    if isinstance(v, unicode):
      # Here we use repr as in the usual case, but on unicode strings, it
      # also escapes the unicode characters (which we want to leave as is).
      # So, after repr() we decode using raw-unicode-escape, which decodes
      # only the unicode characters, and leaves all the rest (", ', \n and
      # more) escaped.
      # We don't take the first character, because repr adds a u in the
      # beginning of the string (usual repr output for unicode is u'...').
      return repr(v).decode("raw-unicode-escape")[1:]
    # Here we use python built-in escaping mechanism for string using repr.
    return repr(str(v))

  @staticmethod
  def _EscapeCustomProperties(custom_properties):
    """Escapes the custom properties dictionary."""
    l = []
    for key, value in custom_properties.iteritems():
      l.append("%s:%s" % (DataTable._EscapeValue(key),
                          DataTable._EscapeValue(value)))
    return "{%s}" % ",".join(l)

  @staticmethod
  def SingleValueToJS(value, value_type, escape_func=None):
    """Translates a single value and type into a JS value.

    Internal helper method.

    Args:
      value: The value which should be converted
      value_type: One of "string", "number", "boolean", "date", "datetime" or
                  "timeofday".
      escape_func: The function to use for escaping strings.

    Returns:
      The proper JS format (as string) of the given value according to the
      given value_type. For None, we simply return "null".
      If a tuple is given, it should be in one of the following forms:
        - (value, formatted value)
        - (value, formatted value, custom properties)
      where the formatted value is a string, and custom properties is a
      dictionary of the custom properties for this cell.
      To specify custom properties without specifying formatted value, one can
      pass None as the formatted value.
      One can also have a null-valued cell with formatted value and/or custom
      properties by specifying None for the value.
      This method ignores the custom properties except for checking that it is a
      dictionary. The custom properties are handled in the ToJSon and ToJSCode
      methods.
      The real type of the given value is not strictly checked. For example,
      any type can be used for string - as we simply take its str( ) and for
      boolean value we just check "if value".
      Examples:
        SingleValueToJS(None, "boolean") returns "null"
        SingleValueToJS(False, "boolean") returns "false"
        SingleValueToJS((5, "5$"), "number") returns ("5", "'5$'")
        SingleValueToJS((None, "5$"), "number") returns ("null", "'5$'")

    Raises:
      DataTableException: The value and type did not match in a not-recoverable
                          way, for example given value 'abc' for type 'number'.
    """
    if escape_func is None:
      escape_func = DataTable._EscapeValue
    if isinstance(value, tuple):
      # In case of a tuple, we run the same function on the value itself and
      # add the formatted value.
      if (len(value) not in [2, 3] or
          (len(value) == 3 and not isinstance(value[2], dict))):
        raise DataTableException("Wrong format for value and formatting - %s." %
                                 str(value))
      if not isinstance(value[1], types.StringTypes + (types.NoneType,)):
        raise DataTableException("Formatted value is not string, given %s." %
                                 type(value[1]))
      js_value = DataTable.SingleValueToJS(value[0], value_type)
      if value[1] is None:
        return (js_value, None)
      return (js_value, escape_func(value[1]))

    # The standard case - no formatting.
    t_value = type(value)
    if value is None:
      return "null"
    if value_type == "boolean":
      if value:
        return "true"
      return "false"

    elif value_type == "number":
      if isinstance(value, (int, long, float)):
        return str(value)
      raise DataTableException("Wrong type %s when expected number" % t_value)

    elif value_type == "string":
      if isinstance(value, tuple):
        raise DataTableException("Tuple is not allowed as string value.")
      return escape_func(value)

    elif value_type == "date":
      if not isinstance(value, (datetime.date, datetime.datetime)):
        raise DataTableException("Wrong type %s when expected date" % t_value)
        # We need to shift the month by 1 to match JS Date format
      return "new Date(%d,%d,%d)" % (value.year, value.month - 1, value.day)

    elif value_type == "timeofday":
      if not isinstance(value, (datetime.time, datetime.datetime)):
        raise DataTableException("Wrong type %s when expected time" % t_value)
      return "[%d,%d,%d]" % (value.hour, value.minute, value.second)

    elif value_type == "datetime":
      if not isinstance(value, datetime.datetime):
        raise DataTableException("Wrong type %s when expected datetime" %
                                 t_value)
      return "new Date(%d,%d,%d,%d,%d,%d)" % (value.year,
                                              value.month - 1,  # To match JS
                                              value.day,
                                              value.hour,
                                              value.minute,
                                              value.second)
    # If we got here, it means the given value_type was not one of the
    # supported types.
    raise DataTableException("Unsupported type %s" % value_type)

  @staticmethod
  def ColumnTypeParser(description):
    """Parses a single column description. Internal helper method.

    Args:
      description: a column description in the possible formats:
       'id'
       ('id',)
       ('id', 'type')
       ('id', 'type', 'label')
       ('id', 'type', 'label', {'custom_prop1': 'custom_val1'})
    Returns:
      Dictionary with the following keys: id, label, type, and
      custom_properties where:
        - If label not given, it equals the id.
        - If type not given, string is used by default.
        - If custom properties are not given, an empty dictionary is used by
          default.

    Raises:
      DataTableException: The column description did not match the RE, or
          unsupported type was passed.
    """
    if not description:
      raise DataTableException("Description error: empty description given")

    if not isinstance(description, (types.StringTypes, tuple)):
      raise DataTableException("Description error: expected either string or "
                               "tuple, got %s." % type(description))

    if isinstance(description, types.StringTypes):
      description = (description,)

    # According to the tuple's length, we fill the keys
    # We verify everything is of type string
    for elem in description[:3]:
      if not isinstance(elem, types.StringTypes):
        raise DataTableException("Description error: expected tuple of "
                                 "strings, current element of type %s." %
                                 type(elem))
    desc_dict = {"id": description[0],
                 "label": description[0],
                 "type": "string",
                 "custom_properties": {}}
    if len(description) > 1:
      desc_dict["type"] = description[1].lower()
      if len(description) > 2:
        desc_dict["label"] = description[2]
        if len(description) > 3:
          if not isinstance(description[3], dict):
            raise DataTableException("Description error: expected custom "
                                     "properties of type dict, current element "
                                     "of type %s." % type(description[3]))
          desc_dict["custom_properties"] = description[3]
          if len(description) > 4:
            raise DataTableException("Description error: tuple of length > 4")
    if desc_dict["type"] not in ["string", "number", "boolean",
                                 "date", "datetime", "timeofday"]:
      raise DataTableException(
          "Description error: unsupported type '%s'" % desc_dict["type"])
    return desc_dict

  @staticmethod
  def TableDescriptionParser(table_description, depth=0):
    """Parses the table_description object for internal use.

    Parses the user-submitted table description into an internal format used
    by the Python DataTable class. Returns the flat list of parsed columns.

    Args:
      table_description: A description of the table which should comply
                         with one of the formats described below.
      depth: Optional. The depth of the first level in the current description.
             Used by recursive calls to this function.

    Returns:
      List of columns, where each column represented by a dictionary with the
      keys: id, label, type, depth, container which means the following:
      - id: the id of the column
      - name: The name of the column
      - type: The datatype of the elements in this column. Allowed types are
              described in ColumnTypeParser().
      - depth: The depth of this column in the table description
      - container: 'dict', 'iter' or 'scalar' for parsing the format easily.
      - custom_properties: The custom properties for this column.
      The returned description is flattened regardless of how it was given.

    Raises:
      DataTableException: Error in a column description or in the description
                          structure.

    Examples:
      A column description can be of the following forms:
       'id'
       ('id',)
       ('id', 'type')
       ('id', 'type', 'label')
       ('id', 'type', 'label', {'custom_prop1': 'custom_val1'})
       or as a dictionary:
       'id': 'type'
       'id': ('type',)
       'id': ('type', 'label')
       'id': ('type', 'label', {'custom_prop1': 'custom_val1'})
      If the type is not specified, we treat it as string.
      If no specific label is given, the label is simply the id.
      If no custom properties are given, we use an empty dictionary.

      input: [('a', 'date'), ('b', 'timeofday', 'b', {'foo': 'bar'})]
      output: [{'id': 'a', 'label': 'a', 'type': 'date',
                'depth': 0, 'container': 'iter', 'custom_properties': {}},
               {'id': 'b', 'label': 'b', 'type': 'timeofday',
                'depth': 0, 'container': 'iter',
                'custom_properties': {'foo': 'bar'}}]

      input: {'a': [('b', 'number'), ('c', 'string', 'column c')]}
      output: [{'id': 'a', 'label': 'a', 'type': 'string',
                'depth': 0, 'container': 'dict', 'custom_properties': {}},
               {'id': 'b', 'label': 'b', 'type': 'number',
                'depth': 1, 'container': 'iter', 'custom_properties': {}},
               {'id': 'c', 'label': 'column c', 'type': 'string',
                'depth': 1, 'container': 'iter', 'custom_properties': {}}]

      input:  {('a', 'number', 'column a'): { 'b': 'number', 'c': 'string'}}
      output: [{'id': 'a', 'label': 'column a', 'type': 'number',
                'depth': 0, 'container': 'dict', 'custom_properties': {}},
               {'id': 'b', 'label': 'b', 'type': 'number',
                'depth': 1, 'container': 'dict', 'custom_properties': {}},
               {'id': 'c', 'label': 'c', 'type': 'string',
                'depth': 1, 'container': 'dict', 'custom_properties': {}}]

      input: { ('w', 'string', 'word'): ('c', 'number', 'count') }
      output: [{'id': 'w', 'label': 'word', 'type': 'string',
                'depth': 0, 'container': 'dict', 'custom_properties': {}},
               {'id': 'c', 'label': 'count', 'type': 'number',
                'depth': 1, 'container': 'scalar', 'custom_properties': {}}]

      input: {'a': ('number', 'column a'), 'b': ('string', 'column b')}
      output: [{'id': 'a', 'label': 'column a', 'type': 'number', 'depth': 0,
               'container': 'dict', 'custom_properties': {}},
               {'id': 'b', 'label': 'column b', 'type': 'string', 'depth': 0,
               'container': 'dict', 'custom_properties': {}}

      NOTE: there might be ambiguity in the case of a dictionary representation
      of a single column. For example, the following description can be parsed
      in 2 different ways: {'a': ('b', 'c')} can be thought of a single column
      with the id 'a', of type 'b' and the label 'c', or as 2 columns: one named
      'a', and the other named 'b' of type 'c'. We choose the first option by
      default, and in case the second option is the right one, it is possible to
      make the key into a tuple (i.e. {('a',): ('b', 'c')}) or add more info
      into the tuple, thus making it look like this: {'a': ('b', 'c', 'b', {})}
      -- second 'b' is the label, and {} is the custom properties field.
    """
    # For the recursion step, we check for a scalar object (string or tuple)
    if isinstance(table_description, (types.StringTypes, tuple)):
      parsed_col = DataTable.ColumnTypeParser(table_description)
      parsed_col["depth"] = depth
      parsed_col["container"] = "scalar"
      return [parsed_col]

    # Since it is not scalar, table_description must be iterable.
    if not hasattr(table_description, "__iter__"):
      raise DataTableException("Expected an iterable object, got %s" %
                               type(table_description))
    if not isinstance(table_description, dict):
      # We expects a non-dictionary iterable item.
      columns = []
      for desc in table_description:
        parsed_col = DataTable.ColumnTypeParser(desc)
        parsed_col["depth"] = depth
        parsed_col["container"] = "iter"
        columns.append(parsed_col)
      if not columns:
        raise DataTableException("Description iterable objects should not"
                                 " be empty.")
      return columns
    # The other case is a dictionary
    if not table_description:
      raise DataTableException("Empty dictionaries are not allowed inside"
                               " description")

    # To differentiate between the two cases of more levels below or this is
    # the most inner dictionary, we consider the number of keys (more then one
    # key is indication for most inner dictionary) and the type of the key and
    # value in case of only 1 key (if the type of key is string and the type of
    # the value is a tuple of 0-3 items, we assume this is the most inner
    # dictionary).
    # NOTE: this way of differentiating might create ambiguity. See docs.
    if (len(table_description) != 1 or
        (isinstance(table_description.keys()[0], types.StringTypes) and
         isinstance(table_description.values()[0], tuple) and
         len(table_description.values()[0]) < 4)):
      # This is the most inner dictionary. Parsing types.
      columns = []
      # We sort the items, equivalent to sort the keys since they are unique
      for key, value in sorted(table_description.items()):
        # We parse the column type as (key, type) or (key, type, label) using
        # ColumnTypeParser.
        if isinstance(value, tuple):
          parsed_col = DataTable.ColumnTypeParser((key,) + value)
        else:
          parsed_col = DataTable.ColumnTypeParser((key, value))
        parsed_col["depth"] = depth
        parsed_col["container"] = "dict"
        columns.append(parsed_col)
      return columns
    # This is an outer dictionary, must have at most one key.
    parsed_col = DataTable.ColumnTypeParser(table_description.keys()[0])
    parsed_col["depth"] = depth
    parsed_col["container"] = "dict"
    return ([parsed_col] +
            DataTable.TableDescriptionParser(table_description.values()[0],
                                             depth=depth + 1))

  @property
  def columns(self):
    """Returns the parsed table description."""
    return self.__columns

  def NumberOfRows(self):
    """Returns the number of rows in the current data stored in the table."""
    return len(self.__data)

  def SetRowsCustomProperties(self, rows, custom_properties):
    """Sets the custom properties for given row(s).

    Can accept a single row or an iterable of rows.
    Sets the given custom properties for all specified rows.

    Args:
      rows: The row, or rows, to set the custom properties for.
      custom_properties: A string to string dictionary of custom properties to
      set for all rows.
    """
    if not hasattr(rows, "__iter__"):
      rows = [rows]
    for row in rows:
      self.__data[row] = (self.__data[row][0], custom_properties)

  def LoadData(self, data, custom_properties=None):
    """Loads new rows to the data table, clearing existing rows.

    May also set the custom_properties for the added rows. The given custom
    properties dictionary specifies the dictionary that will be used for *all*
    given rows.

    Args:
      data: The rows that the table will contain.
      custom_properties: A dictionary of string to string to set as the custom
                         properties for all rows.
    """
    self.__data = []
    self.AppendData(data, custom_properties)

  def AppendData(self, data, custom_properties=None):
    """Appends new data to the table.

    Data is appended in rows. Data must comply with
    the table schema passed in to __init__(). See SingleValueToJS() for a list
    of acceptable data types. See the class documentation for more information
    and examples of schema and data values.

    Args:
      data: The row to add to the table. The data must conform to the table
            description format.
      custom_properties: A dictionary of string to string, representing the
                         custom properties to add to all the rows.

    Raises:
      DataTableException: The data structure does not match the description.
    """
    # If the maximal depth is 0, we simply iterate over the data table
    # lines and insert them using _InnerAppendData. Otherwise, we simply
    # let the _InnerAppendData handle all the levels.
    if not self.__columns[-1]["depth"]:
      for row in data:
        self._InnerAppendData(({}, custom_properties), row, 0)
    else:
      self._InnerAppendData(({}, custom_properties), data, 0)

  def _InnerAppendData(self, prev_col_values, data, col_index):
    """Inner function to assist LoadData."""
    # We first check that col_index has not exceeded the columns size
    if col_index >= len(self.__columns):
      raise DataTableException("The data does not match description, too deep")

    # Dealing with the scalar case, the data is the last value.
    if self.__columns[col_index]["container"] == "scalar":
      prev_col_values[0][self.__columns[col_index]["id"]] = data
      self.__data.append(prev_col_values)
      return

    if self.__columns[col_index]["container"] == "iter":
      if not hasattr(data, "__iter__") or isinstance(data, dict):
        raise DataTableException("Expected iterable object, got %s" %
                                 type(data))
      # We only need to insert the rest of the columns
      # If there are less items than expected, we only add what there is.
      for value in data:
        if col_index >= len(self.__columns):
          raise DataTableException("Too many elements given in data")
        prev_col_values[0][self.__columns[col_index]["id"]] = value
        col_index += 1
      self.__data.append(prev_col_values)
      return

    # We know the current level is a dictionary, we verify the type.
    if not isinstance(data, dict):
      raise DataTableException("Expected dictionary at current level, got %s" %
                               type(data))
    # We check if this is the last level
    if self.__columns[col_index]["depth"] == self.__columns[-1]["depth"]:
      # We need to add the keys in the dictionary as they are
      for col in self.__columns[col_index:]:
        if col["id"] in data:
          prev_col_values[0][col["id"]] = data[col["id"]]
      self.__data.append(prev_col_values)
      return

    # We have a dictionary in an inner depth level.
    if not data.keys():
      # In case this is an empty dictionary, we add a record with the columns
      # filled only until this point.
      self.__data.append(prev_col_values)
    else:
      for key in sorted(data):
        col_values = dict(prev_col_values[0])
        col_values[self.__columns[col_index]["id"]] = key
        self._InnerAppendData((col_values, prev_col_values[1]),
                              data[key], col_index + 1)

  def _PreparedData(self, order_by=()):
    """Prepares the data for enumeration - sorting it by order_by.

    Args:
      order_by: Optional. Specifies the name of the column(s) to sort by, and
                (optionally) which direction to sort in. Default sort direction
                is asc. Following formats are accepted:
                "string_col_name"  -- For a single key in default (asc) order.
                ("string_col_name", "asc|desc") -- For a single key.
                [("col_1","asc|desc"), ("col_2","asc|desc")] -- For more than
                    one column, an array of tuples of (col_name, "asc|desc").

    Returns:
      The data sorted by the keys given.

    Raises:
      DataTableException: Sort direction not in 'asc' or 'desc'
    """
    if not order_by:
      return self.__data

    proper_sort_keys = []
    if isinstance(order_by, types.StringTypes) or (
        isinstance(order_by, tuple) and len(order_by) == 2 and
        order_by[1].lower() in ["asc", "desc"]):
      order_by = (order_by,)
    for key in order_by:
      if isinstance(key, types.StringTypes):
        proper_sort_keys.append((key, 1))
      elif (isinstance(key, (list, tuple)) and len(key) == 2 and
            key[1].lower() in ("asc", "desc")):
        proper_sort_keys.append((key[0], key[1].lower() == "asc" and 1 or -1))
      else:
        raise DataTableException("Expected tuple with second value: "
                                 "'asc' or 'desc'")

    def SortCmpFunc(row1, row2):
      """cmp function for sorted. Compares by keys and 'asc'/'desc' keywords."""
      for key, asc_mult in proper_sort_keys:
        cmp_result = asc_mult * cmp(row1[0].get(key), row2[0].get(key))
        if cmp_result:
          return cmp_result
      return 0

    return sorted(self.__data, cmp=SortCmpFunc)

  def ToJSCode(self, name, columns_order=None, order_by=()):
    """Writes the data table as a JS code string.

    This method writes a string of JS code that can be run to
    generate a DataTable with the specified data. Typically used for debugging
    only.

    Args:
      name: The name of the table. The name would be used as the DataTable's
            variable name in the created JS code.
      columns_order: Optional. Specifies the order of columns in the
                     output table. Specify a list of all column IDs in the order
                     in which you want the table created.
                     Note that you must list all column IDs in this parameter,
                     if you use it.
      order_by: Optional. Specifies the name of the column(s) to sort by.
                Passed as is to _PreparedData.

    Returns:
      A string of JS code that, when run, generates a DataTable with the given
      name and the data stored in the DataTable object.
      Example result:
        "var tab1 = new google.visualization.DataTable();
         tab1.addColumn('string', 'a', 'a');
         tab1.addColumn('number', 'b', 'b');
         tab1.addColumn('boolean', 'c', 'c');
         tab1.addRows(10);
         tab1.setCell(0, 0, 'a');
         tab1.setCell(0, 1, 1, null, {'foo': 'bar'});
         tab1.setCell(0, 2, true);
         ...
         tab1.setCell(9, 0, 'c');
         tab1.setCell(9, 1, 3, '3$');
         tab1.setCell(9, 2, false);"

    Raises:
      DataTableException: The data does not match the type.
    """
    if columns_order is None:
      columns_order = [col["id"] for col in self.__columns]
    col_dict = dict([(col["id"], col) for col in self.__columns])

    # We first create the table with the given name
    jscode = "var %s = new google.visualization.DataTable();\n" % name
    if self.custom_properties:
      jscode += "%s.setTableProperties(%s);\n" % (
          name, DataTable._EscapeCustomProperties(self.custom_properties))

    # We add the columns to the table
    for i, col in enumerate(columns_order):
      jscode += "%s.addColumn('%s', %s, %s);\n" % (
          name,
          col_dict[col]["type"],
          DataTable._EscapeValue(col_dict[col]["label"]),
          DataTable._EscapeValue(col_dict[col]["id"]))
      if col_dict[col]["custom_properties"]:
        jscode += "%s.setColumnProperties(%d, %s);\n" % (
            name, i, DataTable._EscapeCustomProperties(
                col_dict[col]["custom_properties"]))
    jscode += "%s.addRows(%d);\n" % (name, len(self.__data))

    # We now go over the data and add each row
    for (i, (row, cp)) in enumerate(self._PreparedData(order_by)):
      # We add all the elements of this row by their order
      for (j, col) in enumerate(columns_order):
        if col not in row or row[col] is None:
          continue
        cell_cp = ""
        if isinstance(row[col], tuple) and len(row[col]) == 3:
          cell_cp = ", %s" % DataTable._EscapeCustomProperties(row[col][2])
        value = self.SingleValueToJS(row[col], col_dict[col]["type"])
        if isinstance(value, tuple):
          # We have a formatted value or custom property as well
          if value[1] is None:
            value = (value[0], "null")
          jscode += ("%s.setCell(%d, %d, %s, %s%s);\n" %
                     (name, i, j, value[0], value[1], cell_cp))
        else:
          jscode += "%s.setCell(%d, %d, %s);\n" % (name, i, j, value)
      if cp:
        jscode += "%s.setRowProperties(%d, %s);\n" % (
            name, i, DataTable._EscapeCustomProperties(cp))
    return jscode

  def ToHtml(self, columns_order=None, order_by=()):
    """Writes the data table as an HTML table code string.

    Args:
      columns_order: Optional. Specifies the order of columns in the
                     output table. Specify a list of all column IDs in the order
                     in which you want the table created.
                     Note that you must list all column IDs in this parameter,
                     if you use it.
      order_by: Optional. Specifies the name of the column(s) to sort by.
                Passed as is to _PreparedData.

    Returns:
      An HTML table code string.
      Example result (the result is without the newlines):
       <html><body><table border='1'>
        <thead><tr><th>a</th><th>b</th><th>c</th></tr></thead>
        <tbody>
         <tr><td>1</td><td>"z"</td><td>2</td></tr>
         <tr><td>"3$"</td><td>"w"</td><td></td></tr>
        </tbody>
       </table></body></html>

    Raises:
      DataTableException: The data does not match the type.
    """
    table_template = "<html><body><table border='1'>%s</table></body></html>"
    columns_template = "<thead><tr>%s</tr></thead>"
    rows_template = "<tbody>%s</tbody>"
    row_template = "<tr>%s</tr>"
    header_cell_template = "<th>%s</th>"
    cell_template = "<td>%s</td>"

    if columns_order is None:
      columns_order = [col["id"] for col in self.__columns]
    col_dict = dict([(col["id"], col) for col in self.__columns])

    columns_list = []
    for col in columns_order:
      columns_list.append(header_cell_template %
                          cgi.escape(col_dict[col]["label"]))
    columns_html = columns_template % "".join(columns_list)

    rows_list = []
    # We now go over the data and add each row
    for row, unused_cp in self._PreparedData(order_by):
      cells_list = []
      # We add all the elements of this row by their order
      for col in columns_order:
        # For empty string we want empty quotes ("").
        value = ""
        if col in row and row[col] is not None:
          value = self.SingleValueToJS(row[col], col_dict[col]["type"])
        if isinstance(value, tuple):
          # We have a formatted value and we're going to use it
          cells_list.append(cell_template % cgi.escape(value[1]))
        else:
          cells_list.append(cell_template % cgi.escape(value))
      rows_list.append(row_template % "".join(cells_list))
    rows_html = rows_template % "".join(rows_list)

    return table_template % (columns_html + rows_html)

  def ToCsv(self, columns_order=None, order_by=(), separator=", "):
    """Writes the data table as a CSV string.

    Args:
      columns_order: Optional. Specifies the order of columns in the
                     output table. Specify a list of all column IDs in the order
                     in which you want the table created.
                     Note that you must list all column IDs in this parameter,
                     if you use it.
      order_by: Optional. Specifies the name of the column(s) to sort by.
                Passed as is to _PreparedData.
      separator: Optional. The separator to use between the values.

    Returns:
      A CSV string representing the table.
      Example result:
       'a', 'b', 'c'
       1, 'z', 2
       3, 'w', ''

    Raises:
      DataTableException: The data does not match the type.
    """
    if columns_order is None:
      columns_order = [col["id"] for col in self.__columns]
    col_dict = dict([(col["id"], col) for col in self.__columns])

    columns_list = []
    for col in columns_order:
      columns_list.append(DataTable._EscapeValueForCsv(col_dict[col]["label"]))
    columns_line = separator.join(columns_list)

    rows_list = []
    # We now go over the data and add each row
    for row, unused_cp in self._PreparedData(order_by):
      cells_list = []
      # We add all the elements of this row by their order
      for col in columns_order:
        value = '""'
        if col in row and row[col] is not None:
          value = self.SingleValueToJS(row[col], col_dict[col]["type"],
                                       DataTable._EscapeValueForCsv)
        if isinstance(value, tuple):
          # We have a formatted value. Using it only for date/time types.
          if col_dict[col]["type"] in ["date", "datetime", "timeofday"]:
            cells_list.append(value[1])
          else:
            cells_list.append(value[0])
        else:
          # We need to quote date types, because they contain commas.
          if (col_dict[col]["type"] in ["date", "datetime", "timeofday"] and
              value != '""'):
            value = '"%s"' % value
          cells_list.append(value)
      rows_list.append(separator.join(cells_list))
    rows = "\n".join(rows_list)

    return "%s\n%s" % (columns_line, rows)

  def ToTsvExcel(self, columns_order=None, order_by=()):
    """Returns a file in tab-separated-format readable by MS Excel.

    Returns a file in UTF-16 little endian encoding, with tabs separating the
    values.

    Args:
      columns_order: Delegated to ToCsv.
      order_by: Delegated to ToCsv.

    Returns:
      A tab-separated little endian UTF16 file representing the table.
    """
    return self.ToCsv(
        columns_order, order_by, separator="\t").encode("UTF-16LE")

  def ToJSon(self, columns_order=None, order_by=()):
    """Writes a JSON string that can be used in a JS DataTable constructor.

    This method writes a JSON string that can be passed directly into a Google
    Visualization API DataTable constructor. Use this output if you are
    hosting the visualization HTML on your site, and want to code the data
    table in Python. Pass this string into the
    google.visualization.DataTable constructor, e.g,:
      ... on my page that hosts my visualization ...
      google.setOnLoadCallback(drawTable);
      function drawTable() {
        var data = new google.visualization.DataTable(_my_JSon_string, 0.6);
        myTable.draw(data);
      }

    Args:
      columns_order: Optional. Specifies the order of columns in the
                     output table. Specify a list of all column IDs in the order
                     in which you want the table created.
                     Note that you must list all column IDs in this parameter,
                     if you use it.
      order_by: Optional. Specifies the name of the column(s) to sort by.
                Passed as is to _PreparedData().

    Returns:
      A JSon constructor string to generate a JS DataTable with the data
      stored in the DataTable object.
      Example result (the result is without the newlines):
       {cols: [{id:'a',label:'a',type:'number'},
               {id:'b',label:'b',type:'string'},
              {id:'c',label:'c',type:'number'}],
        rows: [{c:[{v:1},{v:'z'},{v:2}]}, c:{[{v:3,f:'3$'},{v:'w'},{v:null}]}],
        p:    {'foo': 'bar'}}

    Raises:
      DataTableException: The data does not match the type.
    """
    if columns_order is None:
      columns_order = [col["id"] for col in self.__columns]
    col_dict = dict([(col["id"], col) for col in self.__columns])

    # Creating the columns jsons
    cols_jsons = []
    for col_id in columns_order:
      d = dict(col_dict[col_id])
      d["id"] = DataTable._EscapeValue(d["id"])
      d["label"] = DataTable._EscapeValue(d["label"])
      d["cp"] = ""
      if col_dict[col_id]["custom_properties"]:
        d["cp"] = ",p:%s" % DataTable._EscapeCustomProperties(
            col_dict[col_id]["custom_properties"])
      cols_jsons.append(
          "{id:%(id)s,label:%(label)s,type:'%(type)s'%(cp)s}" % d)

    # Creating the rows jsons
    rows_jsons = []
    for row, cp in self._PreparedData(order_by):
      cells_jsons = []
      for col in columns_order:
        # We omit the {v:null} for a None value of the not last column
        value = row.get(col, None)
        if value is None and col != columns_order[-1]:
          cells_jsons.append("")
        else:
          value = self.SingleValueToJS(value, col_dict[col]["type"])
          if isinstance(value, tuple):
            # We have a formatted value or custom property as well
            if len(row.get(col)) == 3:
              if value[1] is None:
                cells_jsons.append("{v:%s,p:%s}" % (
                    value[0],
                    DataTable._EscapeCustomProperties(row.get(col)[2])))
              else:
                cells_jsons.append("{v:%s,f:%s,p:%s}" % (value + (
                    DataTable._EscapeCustomProperties(row.get(col)[2]),)))
            else:
              cells_jsons.append("{v:%s,f:%s}" % value)
          else:
            cells_jsons.append("{v:%s}" % value)
      if cp:
        rows_jsons.append("{c:[%s],p:%s}" % (
            ",".join(cells_jsons), DataTable._EscapeCustomProperties(cp)))
      else:
        rows_jsons.append("{c:[%s]}" % ",".join(cells_jsons))

    general_custom_properties = ""
    if self.custom_properties:
      general_custom_properties = (
          ",p:%s" % DataTable._EscapeCustomProperties(self.custom_properties))

    # We now join the columns jsons and the rows jsons
    json = "{cols:[%s],rows:[%s]%s}" % (",".join(cols_jsons),
                                        ",".join(rows_jsons),
                                        general_custom_properties)
    return json

  def ToJSonResponse(self, columns_order=None, order_by=(), req_id=0,
                     response_handler="google.visualization.Query.setResponse"):
    """Writes a table as a JSON response that can be returned as-is to a client.

    This method writes a JSON response to return to a client in response to a
    Google Visualization API query. This string can be processed by the calling
    page, and is used to deliver a data table to a visualization hosted on
    a different page.

    Args:
      columns_order: Optional. Passed straight to self.ToJSon().
      order_by: Optional. Passed straight to self.ToJSon().
      req_id: Optional. The response id, as retrieved by the request.
      response_handler: Optional. The response handler, as retrieved by the
          request.

    Returns:
      A JSON response string to be received by JS the visualization Query
      object. This response would be translated into a DataTable on the
      client side.
      Example result (newlines added for readability):
       google.visualization.Query.setResponse({
          'version':'0.6', 'reqId':'0', 'status':'OK',
          'table': {cols: [...], rows: [...]}});

    Note: The URL returning this string can be used as a data source by Google
          Visualization Gadgets or from JS code.
    """
    table = self.ToJSon(columns_order, order_by)
    return ("%s({'version':'0.6', 'reqId':'%s', 'status':'OK', "
            "'table': %s});") % (response_handler, req_id, table)

  def ToResponse(self, columns_order=None, order_by=(), tqx=""):
    """Writes the right response according to the request string passed in tqx.

    This method parses the tqx request string (format of which is defined in
    the documentation for implementing a data source of Google Visualization),
    and returns the right response according to the request.
    It parses out the "out" parameter of tqx, calls the relevant response
    (ToJSonResponse() for "json", ToCsv() for "csv", ToHtml() for "html",
    ToTsvExcel() for "tsv-excel") and passes the response function the rest of
    the relevant request keys.

    Args:
      columns_order: Optional. Passed as is to the relevant response function.
      order_by: Optional. Passed as is to the relevant response function.
      tqx: Optional. The request string as received by HTTP GET. Should be in
           the format "key1:value1;key2:value2...". All keys have a default
           value, so an empty string will just do the default (which is calling
           ToJSonResponse() with no extra parameters).

    Returns:
      A response string, as returned by the relevant response function.

    Raises:
      DataTableException: One of the parameters passed in tqx is not supported.
    """
    tqx_dict = {}
    if tqx:
      tqx_dict = dict(opt.split(":") for opt in tqx.split(";"))
    if tqx_dict.get("version", "0.6") != "0.6":
      raise DataTableException(
          "Version (%s) passed by request is not supported."
          % tqx_dict["version"])

    if tqx_dict.get("out", "json") == "json":
      response_handler = tqx_dict.get("responseHandler",
                                      "google.visualization.Query.setResponse")
      return self.ToJSonResponse(columns_order, order_by,
                                 req_id=tqx_dict.get("reqId", 0),
                                 response_handler=response_handler)
    elif tqx_dict["out"] == "html":
      return self.ToHtml(columns_order, order_by)
    elif tqx_dict["out"] == "csv":
      return self.ToCsv(columns_order, order_by)
    elif tqx_dict["out"] == "tsv-excel":
      return self.ToTsvExcel(columns_order, order_by)
    else:
      raise DataTableException(
          "'out' parameter: '%s' is not supported" % tqx_dict["out"])

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = tests
# -*- coding: utf-8 -*-
import unittest
from django.core import management
from django.core.urlresolvers import reverse
from django.conf import settings
from django.test.client import Client
from django.contrib.contenttypes.models import ContentType
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.txcommon.tests.base import BaseTestCase


JSON_RESPONSE = "google.visualization.Query.setResponse({'version':'0.6', 'reqId':'0', 'status':'OK', 'table': {cols:[{id:'lang',label:'Language',type:'string'},{id:'trans',label:'Translated',type:'number'}],rows:[{c:[{v:'Arabic'},{v:50}]},{c:[{v:'English (United States)'},{v:50}]},{c:[{v:'Portuguese (Brazil)'},{v:0}]}]}});"

PROJECT_JSON_RESPONSE = "google.visualization.Query.setResponse({'version':'0.6', 'reqId':'0', 'status':'OK', 'table': {cols:[{id:'lang',label:'Language',type:'string'},{id:'trans',label:'Translated',type:'number'}],rows:[{c:[{v:'English (United States)'},{v:50}]},{c:[{v:'Arabic'},{v:50}]},{c:[{v:'Portuguese (Brazil)'},{v:0}]}]}});"

REDIRECT_URL = 'http://chart.apis.google.com/chart?cht=bhs&chs=350x53&chd=s:ffA&chco=78dc7d,dae1ee,efefef&chxt=y,r&chxl=0:%7cPortuguese%20%28Brazil%29%7cEnglish%20%28United%20States%29%7cArabic%7c1:%7c0%25%7c50%25%7c50%25&chbh=9'

PROJECT_REDIRECT_URL = 'http://chart.apis.google.com/chart?cht=bhs&chs=350x53&chd=s:ffA&chco=78dc7d,dae1ee,efefef&chxt=y,r&chxl=0:%7cPortuguese%20%28Brazil%29%7cArabic%7cEnglish%20%28United%20States%29%7c1:%7c0%25%7c50%25%7c50%25&chbh=9'

class TestCharts(BaseTestCase):

    def test_img(self):
        resp = self.client['anonymous'].get(reverse('chart_resource_image',
            args=[self.project.slug, self.resource.slug]), follow=True)
        hops = resp.redirect_chain
        url, code = hops[0]
        self.assertEqual(url, REDIRECT_URL)
        resp = self.client['anonymous'].get(reverse('chart_project_image',
            args=[self.project.slug]), follow=True)
        hops = resp.redirect_chain
        url, code = hops[0]
        self.assertEqual(url, PROJECT_REDIRECT_URL)

    def test_json(self):
        # Check JSON output
        resp = self.client['anonymous'].get(reverse('chart_resource_json',
            args=[self.project.slug, self.resource.slug]))
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.content, JSON_RESPONSE)
        resp = self.client['anonymous'].get(reverse('chart_project_json',
            args=[self.project.slug]))
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.content, PROJECT_JSON_RESPONSE)

    def test_img_redirect(self):
        # Check whether image.png URL redirects
        resp = self.client['anonymous'].get(reverse('chart_resource_image',
            args=[self.project.slug, self.resource.slug]))
        self.assertEqual(resp.status_code, 302)
        resp = self.client['anonymous'].get(reverse('chart_project_image',
            args=[self.project.slug]))
        self.assertEqual(resp.status_code, 302)


########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from views import chart_resource_image, chart_resource_html_js,\
        chart_resource_json, chart_project_image, chart_project_html_js,\
        chart_project_html_js, chart_project_json

urlpatterns = patterns('',
    # Provide URL for static image of chart
    url(
        regex = '^projects/p/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/chart/image_png/$',
        view = chart_resource_image,
        name = 'chart_resource_image',),
    url(
        regex = '^projects/p/(?P<project_slug>[-\w]+)/chart/image_png/$',
        view = chart_project_image,
        name = 'chart_project_image',),

    # Serve includable JS
    url(
        regex = '^projects/p/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/chart/inc_js/$',
        view = chart_resource_html_js,
        name = 'chart_resource_js',
        kwargs = {"template_name": "resource_chart_js.html"}),
    url(
        regex = '^projects/p/(?P<project_slug>[-\w]+)/chart/inc_js/$',
        view = chart_project_html_js,
        name = 'chart_project_js',
        kwargs = {"template_name": "project_chart_js.html"}),

    # Serve HTML code which loads JS data
    url(
        regex = '^projects/p/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/chart/$',
        view = chart_resource_html_js,
        name = 'chart_resource_html',
        kwargs = {"template_name": "resource_chart.html"}),
    url(
        regex = '^projects/p/(?P<project_slug>[-\w]+)/chart/$',
        view = chart_project_html_js,
        name = 'chart_project_html',
        kwargs = {"template_name": "project_chart.html"}),

    # Serve JSON data for table/chart whatever
    url(
        regex = '^projects/p/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/chart/json/$',
        view = chart_resource_json,
        name = 'chart_resource_json',),
    url(
        regex = '^projects/p/(?P<project_slug>[-\w]+)/chart/json/$',
        view = chart_project_json,
        name = 'chart_project_json',),
)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.core.exceptions import PermissionDenied
from django.http import Http404, HttpResponseRedirect, HttpResponse
from django.shortcuts import get_object_or_404, render_to_response
from django.template import RequestContext
from transifex.projects.models import Project
from transifex.resources.models import Resource, RLStats
from transifex.txcommon.context_processors import site_url_prefix_processor
from transifex.txcommon.utils import key_sort

# For interactive charts:
import gviz_api

# For image charts:
from pygooglechart import StackedHorizontalBarChart, Axis

NUM_LANGS = 14

class PLStat(object):
    def __init__(self, translated_perc, language):
        self.language = language
        self.translated_perc = translated_perc

def get_sorted_stats(obj, project=False):
    if project:
        stats = []
        for i in obj:
            try:
                translated_perc = int((float(i.translated)/i.total)*100)
            except Exception, e:
                translated_perc = 0

            stats.append((translated_perc, i.object))
        stats.sort()
        stats.reverse()
        _stats = []
        for stat in stats[:NUM_LANGS]:
            _stats.append(PLStat(stat[0], stat[1]))
        return _stats
    else:
        return key_sort(obj, '-translated_perc')[:NUM_LANGS]

def get_image_url(obj, project=False):
    """
    Returns URL for the static image
    """
    height = 210

    trans = []
    fuzzy = []
    labels_left = []
    labels_right = []

    stats = get_sorted_stats(obj, project)
    for stat in stats:
        t = stat.translated_perc
        trans.append(t)
        labels_left.append(stat.language.name.encode('utf-8'))
        labels_right.append("%s%%" % t)

    labels_left.reverse()
    labels_right.reverse()

    chart = StackedHorizontalBarChart(
        width = 350,
        height = 14 + 13 * len(stats),
        x_range=(0, 100))
    chart.set_bar_width(9)
    chart.set_colours(['78dc7d', 'dae1ee', 'efefef']) # Green, dark gray, light gray
    chart.set_axis_labels(Axis.LEFT, labels_left)
    chart.set_axis_labels(Axis.RIGHT, labels_right)
    chart.add_data(trans)
    return chart.get_url()

def get_gviz_json(obj, project=False):
    """
    Returns JSON data of Google Visualization API
    """
    description = { "lang": ("string", "Language"),
                    "trans": ("number", "Translated")}
    data = []
    stats = get_sorted_stats(obj, project)
    for stat in stats:
        trans = stat.translated_perc
        data.append({
            "lang": stat.language.name,
            "trans": trans})
    data_table = gviz_api.DataTable(description)
    data_table.LoadData(data)
    return data_table.ToJSonResponse(columns_order=("lang", "trans"))

def chart_resource_image(request, project_slug, resource_slug):

    resource = get_object_or_404(Resource, slug=resource_slug,
                                    project__slug=project_slug)
    if resource.project.private:
        raise PermissionDenied
    return HttpResponseRedirect(get_image_url(RLStats.objects.by_resource(resource)))

def chart_project_image(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    if project.private:
        raise PermissionDenied
    return HttpResponseRedirect(get_image_url(
        RLStats.objects.by_project_language_aggregated(project
            ), True))

def chart_resource_html_js(request, project_slug, resource_slug, template_name):
    resource = get_object_or_404(Resource, slug=resource_slug,
                                    project__slug=project_slug)
    if resource.project.private:
        raise PermissionDenied
    return render_to_response(template_name,
        {   "project" : resource.project,
            "resource" : resource, },
        RequestContext(request, {}, [site_url_prefix_processor]))

def chart_project_html_js(request, project_slug, template_name):
    project = get_object_or_404(Project, slug=project_slug)
    if project.private:
        raise PermissionDenied
    return render_to_response(template_name,
        {"project" : project},
        RequestContext(request, {}, [site_url_prefix_processor]))

def chart_resource_json(request, project_slug, resource_slug):
    resource = get_object_or_404(Resource, slug=resource_slug,
                                    project__slug=project_slug)
    if resource.project.private:
        raise PermissionDenied
    return HttpResponse(content = get_gviz_json(
        RLStats.objects.by_resource(resource)))

def chart_project_json(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    if project.private:
        raise PermissionDenied
    return HttpResponse(content = get_gviz_json(
        RLStats.objects.by_project_language_aggregated(project
            ), True))

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from cla.models import Cla, ClaSignature

class ClaAdmin(admin.ModelAdmin):
    list_display = ('project', 'created_at','modified_at')
    ordering = ('created_at',)

class ClaSignatureAdmin(admin.ModelAdmin):
    list_display = ('cla', 'user','created_at')
    ordering = ('created_at',)

admin.site.register(Cla, ClaAdmin)
admin.site.register(ClaSignature, ClaSignatureAdmin)
########NEW FILE########
__FILENAME__ = forms
from django import forms

class ClaForm(forms.Form):
    cla_sign = forms.BooleanField('cla_sign')

########NEW FILE########
__FILENAME__ = handlers
from django import forms
from django.core.exceptions import ValidationError
from django.utils.translation import ugettext as _
from django.contrib import messages
from cla.models import Cla, ClaSignature
from transifex.projects.forms import ProjectAccessControlForm
from transifex.projects.signals import pre_team_request, pre_team_join, cla_create, project_access_control_form_start, ClaNotSignedError

def handle_pre_team(sender, **kwargs):
    project = kwargs['project']
    user = kwargs['user']
    cla_sign = kwargs['cla_sign']
    try:
        cla = project.cla
        if cla_sign:
            ClaSignature(cla=cla, user=user).save()
        try:
            cla.clasignature_set.get(user=user)
        except ClaSignature.DoesNotExist, e:
            raise ClaNotSignedError
    except Cla.DoesNotExist, e:
        pass

def handle_cla_create(sender, **kwargs):
    project = kwargs['project']
    license_text = kwargs['license_text']
    request = kwargs['request']
    if license_text:
        try:
            cla = Cla.objects.get(project=project)
            if license_text != cla.license_text:
                cla.license_text = license_text
                cla.save()
                messages.success(request, _(
                    "You have updated this project's CLA."
                ))
        except Cla.DoesNotExist, e:
            Cla(project=project, license_text=license_text).save()
            messages.success(request, _(
                "You have added a CLA to this project."
            ))
    else:
        try:
            project.cla.delete()
            messages.success(request, _(
                "You have deleted this project's CLA."
            ))
        except Cla.DoesNotExist, e:
            pass

def handle_project_access_control_form_start(sender, **kwargs):
    form = kwargs['instance']
    project = kwargs['project']
    form.fields['cla_enable'] = forms.BooleanField(
        help_text=_("Enforce a CLA for this project"),
        required=False
    )
    form.fields['cla_license_text'] = forms.CharField(
        help_text=_("License text"),
        required=False,
        widget=forms.widgets.Textarea(attrs={'cols': "80", 'rows': "10"})
    )
    if project:
        try:
            cla = project.cla
            form.fields['cla_enable'].initial = True
            form.fields['cla_license_text'].initial = cla.license_text
        except Cla.DoesNotExist, e:
            pass

    def get_clean_cla_license_text_method(form):
        def clean_cla_license_text():
            if 'cla_enable' in form.data and \
                    form.cleaned_data['cla_enable'] and \
                    not form.cleaned_data['cla_license_text']:
                raise ValidationError(u'This field is required.')
            if 'cla_enable' not in form.data or \
                    not form.cleaned_data['cla_enable']:
                return u''
            return form.cleaned_data['cla_license_text']
        return clean_cla_license_text
    form.clean_cla_license_text = get_clean_cla_license_text_method(form)

def connect():
    pre_team_request.connect(handle_pre_team)
    pre_team_join.connect(handle_pre_team)
    cla_create.connect(handle_cla_create)
    project_access_control_form_start.connect(
        handle_project_access_control_form_start,
        sender=ProjectAccessControlForm
    )

########NEW FILE########
__FILENAME__ = models
from django.contrib.auth.models import User
from django.db import models
from django.db.models import permalink
from django.db.models.signals import pre_save
from django.utils.translation import ugettext_lazy as _
from transifex.projects.models import Project

class Cla(models.Model):
    license_text = models.TextField(
        null=False,
        blank=False,
        help_text=_("This is the CLA text, keep it in markdown format.")
    )
    project = models.OneToOneField(
        Project,
        help_text=_("The project that this CLA belongs to.")
    )
    users = models.ManyToManyField(User, through='ClaSignature')
    created_at = models.DateTimeField(auto_now_add=True, editable=False)
    modified_at = models.DateTimeField(auto_now=True, editable=False)

    def __unicode__(self):
        return u'CLA: %s' % self.project

    @permalink
    def get_absolute_url(self):
        return ('cla_view', None, {'project_slug': self.project.slug})

    def get_users_url(self):
        return "%susers/" % self.get_absolute_url()

def handle_cla_pre_save(sender, **kwargs):
    cla = kwargs['instance']
    try:
        old_cla = Cla.objects.get(id=cla.id)
        if old_cla.license_text != cla.license_text:
            cla.clasignature_set.all().delete()
    except Cla.DoesNotExist, e:
        pass

pre_save.connect(handle_cla_pre_save, sender=Cla)

class ClaSignature(models.Model):
    user = models.ForeignKey(User)
    cla = models.ForeignKey(Cla)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together=('user', 'cla', )

    def __unicode__(self):
        return u'%s: %s' % (self.cla, self.user)
########NEW FILE########
__FILENAME__ = tests
"""
This file demonstrates two different styles of tests (one doctest and one
unittest). These will both pass when you run "manage.py test".

Replace these with more appropriate tests for your application.
"""

from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.test import TestCase, Client
from cla.models import Cla, ClaSignature
from transifex.projects.models import Project
from transifex.resources.models import Language
from transifex.txcommon.tests.base import BaseTestCase


class CLAMixin(BaseTestCase):

    def setUp(self):
        super(CLAMixin, self).setUp()
        self.cla = Cla(
            project=self.project,
            license_text="You have to agree to this test contribution license "\
                          "agreement before you contribute to my project."
        )
        self.cla.save()
        assert self.cla
        assert self.cla.id


class ModelApiTest(CLAMixin):

    def test_assign_signature(self):
        rel = ClaSignature(user=self.user['registered'], cla=self.cla)
        rel.save()
        assert rel
        assert rel.id
        self.assertEqual(rel.user, self.user['registered'])
        self.assertEqual(rel.cla, self.cla)
        self.assertEqual(self.user['registered'].cla_set.all()[0], self.cla)
        self.assertEqual(self.cla.users.all()[0], self.user['registered'])
        assert rel.created_at

    def test_signatures_get_deleted_on_cla_delete(self):
        rel = ClaSignature(user=self.user['registered'], cla=self.cla)
        rel.save()
        self.cla.delete()
        self.assertRaises(ClaSignature.DoesNotExist,
                          lambda: ClaSignature.objects.get(id=rel.id))

    def test_signatures_get_deleted_on_cla_update(self):
        rel = ClaSignature(user=self.user['registered'], cla=self.cla)
        rel.save()
        self.cla.license_text = "changed license text"
        self.cla.save()
        self.assertRaises(ClaSignature.DoesNotExist,
                          lambda: ClaSignature.objects.get(id=rel.id))


class UserExperienceTest(CLAMixin):
    @classmethod
    def setUpClass(cls):
        super(UserExperienceTest, cls).setUpClass()
        cls.language_fr = Language.objects.get(code='fr')

    def setUp(self):
        super(UserExperienceTest, self).setUp()
        self.post_url = reverse("project_access_control_edit",
                args=[self.project.slug])
        resp = self.client['maintainer'].post(self.post_url, {
            'project_type': "typical", 'access_control': "limited_access",
            'cla_enable': True, 'next': self.post_url,
            'cla_license_text': "this is the CLA of project kbairak",
        })

    def test_cla_sign(self):
        response = self.client['registered'].get(
            reverse('cla_project_sign', args=[self.project.slug])
        )
        self.assertEqual(response.status_code, 403)
        response = self.client['team_member'].get(
            reverse('cla_project_sign', args=[self.project.slug])
        )
        self.assertEqual(response.status_code, 200)
        response = self.client['team_member'].post(
            reverse('cla_project_sign', args=[self.project.slug]),
            {'cla_sign': 'on'}, follow=True
        )
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "You have signed the CLA")

    def test_cla_not_saved_is_cla_textarea_empty(self):
        response = self.client['maintainer'].post(self.post_url, {
            'project_type': "typical", 'access_control': "limited_access",
            'cla_enable': True, 'cla_license_text': "", 'next': self.post_url
        })
        self.assertContains(response, "This field is required.", count=1)

    def test_team_request_reject_if_not_cla(self):
        response = self.client['registered'].get(
            reverse('project_detail', args=[self.project.slug])
        )
        self.assertContains(response, "Request language")
        response = self.client['registered'].post(
            reverse('team_request', args=[self.project.slug]),
            {'language': self.language_fr.pk},
            follow=True
        )
        self.assertContains(response, 'Contribution License Agreement', count=1)

    def test_team_request_accept_if_cla(self):
        response = self.client['registered'].get(
            reverse('project_detail', args=[self.project.slug]),
        )
        self.assertContains(response, "Request language")
        response = self.client['registered'].post(
            reverse('team_request', args=[self.project.slug]),
            {'cla_sign': True, 'language': self.language_fr.pk},
            follow=True
        )
        self.assertContains(response, 'French')

    def test_cla_checkbox_shown_in_team_request(self):
        response = self.client['registered'].get(
            reverse('project_detail', args=[self.project.slug]),
        )
        self.assertContains(response, "I have read and agree with this project", count=1)

    def test_team_join_reject_if_not_cla(self):
        self.client['team_coordinator'].post(
            reverse('team_request', args=[self.project.slug]),
            {'cla_sign': True, 'language': self.language_fr.pk}
        )
        self.client['maintainer'].post(
            reverse('team_request_approve', args=[self.project.slug, 'fr']),
            {'team_request_approve': "Approve"}
        )
        response = self.client['registered'].get(
            reverse('team_detail', args=[self.project.slug, 'fr'])
        )
        self.assertContains(response, 'Join language translation')
        response = self.client['registered'].post(
            reverse('team_join_request', args=[self.project.slug, 'fr']),
            {'team_join': "Join this Team"},
            follow=True
        )
        self.assertContains(response, 'Contribution License Agreement')

    def test_team_join_accept_if_cla(self):
        self.client['team_coordinator'].post(
            reverse('team_request', args=[self.project.slug]),
            {'cla_sign': True, 'language': self.language_fr.pk}
        )
        self.client['maintainer'].post(
            reverse('team_request_approve', args=[self.project.slug, 'fr']),
            {'team_request_approve': "Approve"}
        )
        response = self.client['registered'].get(
            reverse('team_detail', args=[self.project.slug, 'fr']),
        )
        self.assertContains(response, 'Join language translation')
        response = self.client['registered'].post(
            reverse('team_join_request', args=[self.project.slug, 'fr']),
            {'cla_sign': True, 'team_join': "Join this Team"},
            follow=True
        )
        self.assertContains(response, 'You requested to join')

    def test_cla_checkbox_shown_in_join(self):
        response = self.client['team_coordinator'].get(
            reverse("project_detail", args=[self.project.slug])
        )
        response = self.client['team_coordinator'].post(
            reverse('team_request', args=[self.project.slug]),
            {'cla_sign': True, 'language': self.language_fr.pk},
            follow=True
        )
        self.client['maintainer'].post(
            reverse('team_request_approve', args=[self.project.slug, 'fr']),
            {'team_request_approve': "Approve"}
        )
        response = self.client['registered'].get(
            reverse('team_detail', args=[self.project.slug, 'fr']),
        )
        self.assertContains(response, "I have read and agree with this project")

    def test_show_cla(self):
        response = self.client['registered'].get(self.cla.get_absolute_url())
        self.assertContains(response, "this is the CLA of project kbairak")

    def test_show_signed_users(self):
        self.client['team_coordinator'].post(
            reverse('team_request', args=[self.project.slug]),
            {'cla_sign': True, 'language': self.language_fr.pk}
        )
        response = self.client['maintainer'].get(self.cla.get_users_url())
        self.assertContains(response, "team_coordinator")

    def test_dont_show_signed_users_if_not_project_maintainer(self):
        self.client['team_coordinator'].post(
            reverse('team_request', args=[self.project.slug]),
            {'cla_sign': True, 'language': self.language_fr.pk}
        )
        response = self.client['team_coordinator'].get(self.cla.get_users_url())
        self.assertEqual(response.status_code, 403)

    def test_outsourced_project_save(self):
        self.project_private.is_hub = True
        self.project_private.save()
        response = self.client['maintainer'].post(self.post_url, {
            'project_type': "outsourced",
            'outsource': self.project_private.id,
            'next': self.post_url,
            'cla_license_text': ''
        }, follow=True)
        assert self.project in self.project_private.outsourcing.all()

__test__ = {"doctest": """
Another way to test that 1 + 1 is equal to 2.

>>> 1 + 1 == 2
True
"""}


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import patterns, url
from transifex.projects.urls import PROJECT_URL
from cla.views import view, users, cla_project_sign

urlpatterns = patterns('',
    url(PROJECT_URL+r'cla/$', cla_project_sign, name="cla_project_sign"),
    url(PROJECT_URL+r'cla/snippet/$', view, name="cla_view"),
    url(PROJECT_URL+r'cla/snippet/users/$', users, name="cla_users"),
)

########NEW FILE########
__FILENAME__ = views
from django.contrib import messages
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.core.urlresolvers import reverse
from django.db.models import Q
from django.http import HttpResponse, HttpResponseRedirect
from django.template import RequestContext
from django.shortcuts import get_object_or_404, render_to_response
from django.utils.translation import ugettext_lazy as _
from django.views.generic.list_detail import object_list
from transifex.projects.models import Project
from transifex.projects.permissions import pr_project_add_change
from transifex.projects.permissions.project import ProjectPermission
from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.views import permission_denied

from cla.forms import ClaForm
from cla.models import Cla
from cla.handlers import handle_pre_team

@login_required
def view(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    cla = get_object_or_404(Cla, project=project)
    return render_to_response(
        "view_cla.html",
        {'project': project, 'cla': cla},
        context_instance= RequestContext(request)
    )
    
@login_required
def cla_project_sign(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    cla = get_object_or_404(Cla, project=project)

    check = ProjectPermission(request.user)
    if not check.submit_translations(project, any_team=True):
        return permission_denied(request)
    
    try:
        signed_cla = request.user.cla_set.filter(project=project)[0]
    except IndexError:
        signed_cla = None
    
    if request.method == 'POST' and not signed_cla:
        form = ClaForm(request.POST)
        if form.is_valid():
            kwargs = {'cla_sign':True, 'project':project, 'user':request.user}
            handle_pre_team(None, **kwargs)
            
            messages.success(request, _("You have signed the CLA."))

            return HttpResponseRedirect(reverse('cla_project_sign',
                args=[project_slug]),)
    else:
        form = ClaForm()
    
    return render_to_response(
        "project_cla.html",
        {'project': project, 
         'cla': cla, 
         'signed_cla': signed_cla,
         'form': form},
        context_instance= RequestContext(request)
    )

@login_required
@one_perm_required_or_403(pr_project_add_change,
    (Project, 'slug__exact', 'project_slug'))
def users(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    cla = get_object_or_404(Cla, project=project)
    
    signed_user_ids = cla.users.values_list('id', flat=True).query
    
    unsigned_user_list = User.objects.filter(
        Q(team_coordinators__project=project) | 
        Q(team_members__project=project) |
        Q(teamrequest__project=project) |
        Q(teamaccessrequest__team__project=project)
        ).exclude(id__in=signed_user_ids).distinct()

    return render_to_response(
        "user_list.html",
        {'project': project, 
         'cla': cla,
         'signed_user_list': cla.users.all().order_by('username'),
         'unsigned_user_list': unsigned_user_list.order_by('username')},
        context_instance= RequestContext(request)
    )

########NEW FILE########
__FILENAME__ = handlers
# -*- coding: utf-8 -*-

from datetime import date
from django.db.models import get_model
from django.conf import settings
from transifex.resources.signals import post_save_translation
from transifex.addons.lotte.signals import lotte_save_translation


def save_copyrights(sender, **kwargs):
    """
    Save copyright info for po files.
    """
    resource = kwargs['resource']
    language = kwargs['language']
    if resource.i18n_method != 'PO' or kwargs.get(
        'copyright-disabled', False):
        return
    copyrights = kwargs['copyrights']
    CModel = get_model('copyright', 'Copyright')
    for c in copyrights:
        owner = c[0]
        years = c[1]
        for year in years:
            CModel.objects.assign(
                resource=resource, language=language,
                owner=owner, year=year
            )


def lotte_copyrights(sender, **kwargs):
    """Save copyrights from lotte for PO files."""
    resource = kwargs['resource']
    if resource.i18n_method != 'PO':
        return
    language = kwargs['language']
    user = kwargs['user']

    firstname = user.first_name
    lastname = user.last_name
    email = user.email
    copyrights = [
        (
            ''.join([firstname, ' ', lastname, ' <', user.email, '>']),
            [str(date.today().year)]
        ),
    ]
    CModel = get_model('copyright', 'Copyright')
    for c in copyrights:
        owner = c[0]
        years = c[1]
        for year in years:
            CModel.objects.assign(
                resource=resource, language=language,
                owner=owner, year=year, user=user
            )


def connect():
    post_save_translation.connect(save_copyrights)
    lotte_save_translation.connect(lotte_copyrights)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Copyright'
        db.create_table('copyright_copyright', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('owner', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='copyrights', null=True, to=orm['auth.User'])),
            ('language', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['languages.Language'])),
            ('resource', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['resources.Resource'])),
            ('years', self.gf('django.db.models.fields.CommaSeparatedIntegerField')(max_length=80)),
            ('comment', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('imported_by', self.gf('django.db.models.fields.CharField')(max_length=1, null=True, blank=True)),
            ('years_text', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_update', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal('copyright', ['Copyright'])

        # Adding unique constraint on 'Copyright', fields ['language', 'resource', 'owner']
        db.create_unique('copyright_copyright', ['language_id', 'resource_id', 'owner'])


    def backwards(self, orm):
        
        # Removing unique constraint on 'Copyright', fields ['language', 'resource', 'owner']
        db.delete_unique('copyright_copyright', ['language_id', 'resource_id', 'owner'])

        # Deleting model 'Copyright'
        db.delete_table('copyright_copyright')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'copyright.copyright': {
            'Meta': {'unique_together': "(('language', 'resource', 'owner'),)", 'object_name': 'Copyright'},
            'comment': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_by': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'copyrights'", 'null': 'True', 'to': "orm['auth.User']"}),
            'years': ('django.db.models.fields.CommaSeparatedIntegerField', [], {'max_length': '80'}),
            'years_text': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['copyright']

########NEW FILE########
__FILENAME__ = 0002_populate_with_existing_data
# encoding: utf-8
import re
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        # Use the data from the database as initial copyrights.
        for r in orm['resources.Resource'].objects.all():
            for se in orm['resources.SourceEntity'].objects.filter(resource=r):
                for t in orm['resources.Translation'].objects.filter(source_entity=se):
                    try:
                        user = orm['txcommon.Profile'].objects.get(user__pk=t.user.pk)
                        if not user.firstname:
                            name = t.user.username
                        else:
                            name = ' '.join([user.firstname, user.surname])
                    except orm['txcommon.Profile'].DoesNotExist:
                        name = t.user.username
                    except Exception, e:
                        # translation entry has no user
                        continue
                    self.assign(
                        orm=orm,
                        language=t.language,
                        owner=''.join([name, ' <', t.user.email, '>']),
                        resource=r,
                        year=str(t.last_update.year)
                    )


    def backwards(self, orm):
        # Delete all data from copyrights
        for c in orm.Copyright.objects.all():
            # if c.user is not None:  # Pushed from lotte
            if not c.years_text:
                c.delete()

    def assign(self, orm, language, resource, owner, year):
        user = None
        email = re.search('<(.*?)>', owner)
        if email is not None and email.group(1):
            try:
                user = orm['auth.User'].objects.get(email=email.group(1))
            except orm['auth.User'].DoesNotExist, e:
                pass

        copyright, created = orm.Copyright.objects.get_or_create (
            owner=owner, language=language, resource=resource,
            defaults={'years': year}
        )
        if not created:
            # Copyright exists, let's update it
            years = copyright.years.split(',')
            if not year in years:
                years.append(year)
                copyright.years = ','.join(sorted(years))

        # User must be separately created, so that get_or_create works
        copyright.user = user
        copyright.years_text = self._compress_years(copyright.years)
        copyright.save()

        return copyright

    def _compress_years(self, years):
        return ", ".join(years.split(','))



    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.message': {
            'Meta': {'object_name': 'Message'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'_message_set'", 'to': "orm['auth.User']"})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'copyright.copyright': {
            'Meta': {'unique_together': "(('language', 'resource', 'owner'),)", 'object_name': 'Copyright'},
            'comment': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'imported_by': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'copyrights'", 'null': 'True', 'to': "orm['auth.User']"}),
            'years': ('django.db.models.fields.CommaSeparatedIntegerField', [], {'max_length': '80'}),
            'years_text': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        },
        'txcommon.profile': {
            'Meta': {'object_name': 'Profile'},
            'about': ('django.db.models.fields.TextField', [], {'max_length': '140', 'blank': 'True'}),
            'blog': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'country': ('userprofile.countries.CountryField', [], {'null': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'firstname': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'native_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'twitter': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'})
        }
    }

    complete_apps = ['resources', 'auth', 'txcommon', 'copyright']

########NEW FILE########
__FILENAME__ = models
import re
from datetime import date
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.contrib.auth.models import User
from django.core.exceptions import MultipleObjectsReturned

from transifex.languages.models import Language
from transifex.resources.models import Resource


class CopyrightManager(models.Manager):
    def assign(self, language, resource, owner, year=None, user=None):
        """Add copyright for a specific year to an object.

        If there is no copyright object, create. Otherwise, update if
        necessary.

        Should be called from Copyright.objects. Calling it from related models
        won't work.
        """

        if year is None:
            year = date.today().year
        if user is None:
            # Find if the email is registered to the db
            email = re.search('<(.*?)>', owner)
            if email is not None and email.group(1):
                try:
                    user = User.objects.get(email=email.group(1))
                except User.DoesNotExist, e:
                    pass
                except MultipleObjectsReturned:
                    users = User.objects.filter(email=email.group(1))
                    for u in users:
                        if u.first_name and u.last_name:
                            user = u
                            break
                        user = u

        #FIXME: Make this work with foreign-key calls, for example:
        #       tresource.objects.assign(owner=, year=)
        _qs = super(CopyrightManager, self).get_query_set()
        copyright, created = _qs.get_or_create(
            owner=owner, language=language, resource=resource,
            defaults={'years': year}
        )
        if not created:
            # Copyright exists, let's update it
            years = copyright.years.split(',')
            if not year in years:
                years.append(year)
                copyright.years = ','.join(sorted(years))

        # User must be separately created, to that get_or_create works
        copyright.user = user
        copyright.save()

        return copyright


class Copyright(models.Model):
    """A model holding copyrights.

    This should be representing a statement such as:
    # John Doe <jhon@doe.org> 2014.

    Years are stored in a CommaSeparatedIntegerField.
    """

    # The copyright owner. We don't make this a foreign key, since
    # it might or might not be a user in our database.
    owner = models.CharField(_('Owner'), max_length=255,
        help_text=_("The copyright owner in text form."))

    # The copyright owner, in case the assignment is happening inside Tx.
    # No reason to use this -- only for backup purposes.
    user = models.ForeignKey(User, blank=True, null=True,
        related_name='copyrights',
        verbose_name=_('User'),
        help_text=_("The Transifex user who owns the copyright, if applicable."))

    language = models.ForeignKey(
        Language, verbose_name=_("Language"),
        help_text=_("Language of the translation.")
    )

    resource = models.ForeignKey(
        Resource, verbose_name=_("Resource"),
        help_text = _("The resource this copyright is on.")
    )

    years = models.CommaSeparatedIntegerField(_('Copyright years'),
        max_length=80,
        help_text=_("The years the copyright is active in."))

    comment = models.CharField(_('Comment'),
        max_length=255,
        help_text=_("A comment for this copyright."),)

    IMPORT_CHOICES = (
        ('T', 'Transifex (Lotte/API)'),
        ('P', 'Po files'),
    )
    imported_by = models.CharField(
        max_length=1, choices=IMPORT_CHOICES,
        null=True, blank=True,
        verbose_name=_("Imported by"),
        help_text=_("How this copyright notice was created.")
    )

    # De-normalized fields

    # Store the years in a concise form. Responsible to convert years
    # 2010, 2011, 2012, 2013 to 2010-2013.
    years_text = models.CharField(_('Copyright Years Text'),
        max_length=50,
        help_text=_("Textual representation of the copyright years."))

    # Timestamps
    created = models.DateTimeField(auto_now_add=True, editable=False)
    last_update = models.DateTimeField(auto_now=True, editable=False)

    class Meta:
        unique_together = (('language', 'resource', 'owner'), )

    def __unicode__(self):
        return u'%(years)s %(owner)s' % {
            'years': self.years_text,
            'owner': self.owner
        }

    def __str__(self):
        return (u'%(owner)s, %(years)s.' % {
            'years': str(self.years_text),
            'owner': self.owner
        }).encode('UTF-8')

    def save(self, *args, **kwargs):
        """Override save to de-normalize the years_text."""
        self.years_text = self._compress_years(self.years)
        super(Copyright, self).save(*args, **kwargs)

    def _compress_years(self, years):
        #FIXME: Convert list of years to list of year periods
        # ie. 2010,2011,2012 to 2010-2012.
        return ", ".join(years.split(','))


    objects = CopyrightManager()


########NEW FILE########
__FILENAME__ = tests
import os
from django.conf import settings
from django.db.models.loading import get_model
from django.contrib.auth.models import User
from django.test import TestCase

from transifex.languages.models import Language
from transifex.resources.models import Resource
from transifex.resources.formats.pofile import POHandler
from transifex.txcommon.tests.base import BaseTestCase

from copyright.handlers import lotte_copyrights, save_copyrights

Copyright = get_model('copyright', 'Copyright')

class CopyrightTests(BaseTestCase):

    def test_manager(self):
        """Test manager's methods and attributes."""

        # Create basic copyright
        cr = Copyright.objects.assign(
            language=self.language_en, resource=self.resource,
            owner='John Doe', year='2014')
        self.assertEqual(str(cr), "John Doe, 2014.")

        # Test existing copyright
        cr = Copyright.objects.assign(
            language=self.language_en, resource=self.resource,
            owner='John Doe', year='2014')
        self.assertEqual(str(cr), "John Doe, 2014.")

        # Create consecutive copyright year
        cr = Copyright.objects.assign(
            language=self.language_en, resource=self.resource,
            owner='John Doe', year='2015')
        self.assertEqual(str(cr), "John Doe, 2014, 2015.")

        # Create non-consecutive copyright year
        cr = Copyright.objects.assign(
            language=self.language_en, resource=self.resource,
            owner='John Doe', year='2018')
        self.assertEqual(str(cr), "John Doe, 2014, 2015, 2018.")

        # Create another copyright holder
        cr = Copyright.objects.assign(
            language=self.language_en, resource=self.resource,
            owner='Django Reinhardt', year='2010')
        self.assertEqual(str(cr), "Django Reinhardt, 2010.")


    def copyright_text_load(self):
        """Test the conversion of a copyright text to db objects."""
        sample_text = "Copyright (C) 2007-2010 Indifex Ltd."
        # load sample text
        # test db objects

    def test_poheader_load_soureclang(self):
        """Test load of existing PO file with copyright headers."""

        test_file = os.path.join(settings.TX_ROOT,
                                 './resources/tests/lib/pofile/copyright.po')
        handler = POHandler(test_file)
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)
        c = Copyright.objects.filter(
            resource=self.resource, language=self.resource.source_language
        )
        self.assertEquals(len(c), 3)

    def test_user_from_db(self):
        cr = Copyright.objects.assign(
            language=self.language_en, resource=self.resource,
            owner='Test Test <test@test.org>', year='2010')
        self.assertTrue(cr.user is None)
        u = User.objects.create(username='test', email='test@test.org')
        cr = Copyright.objects.assign(
            language=self.language_en, resource=self.resource,
            owner='Test Test <test@test.org>', year='2010')
        self.assertTrue(cr.user == u)

    def test_lotte_copyrights(self):
        c = Copyright.objects.filter(
            resource=self.resource, language=self.language_en
        )
        self.assertEquals(len(c), 0)
        lotte_copyrights(
            sender=None, resource=self.resource, language=self.language_en,
            user=self.user['maintainer']
        )
        c = Copyright.objects.filter(
            resource=self.resource, language=self.language_en
        )
        self.assertEquals(len(c), 1)
        lotte_copyrights(
            sender=None, resource=self.resource, language=self.language_en,
            user=self.user['maintainer']
        )
        c = Copyright.objects.filter(
            resource=self.resource, language=self.language_en
        )
        self.assertEquals(len(c), 1)

    def test_multiple_emails(self):
        u1 = User.objects.create(
            username='copy1', email='copy@copy.org'
        )
        u2 = User.objects.create(
            username='copy2', email='copy@copy.org',
            first_name='Copy', last_name='Cat'
        )
        lotte_copyrights(
            None, resource=self.resource, language=self.language_en, user=u1
        )
        c = Copyright.objects.filter(
            resource=self.resource, language=self.language_en
        )
        self.assertEquals(len(c), 1)
        self.assertEquals(c[0].user, u1)
        lotte_copyrights(
            None, resource=self.resource, language=self.language_en, user=u2
        )
        c = Copyright.objects.filter(
            resource=self.resource, language=self.language_en
        )
        self.assertEquals(len(c), 2)
        self.assertIn(c[0].user, [u1, u2])
        self.assertIn(c[1].user, [u1, u2])
        save_copyrights(
            None, resource=self.resource, language=self.language_en,
            copyrights=[('Copy Cat <copy@copy.org>', ['2011', ]), ]
        )
        c = Copyright.objects.filter(
            resource=self.resource, language=self.language_en
        )
        self.assertEquals(len(c), 2)

        # no first/last names
        u1 = User.objects.create(
            username='copycat1', email='copy@cat.org'
        )
        u2 = User.objects.create(
            username='copycat2', email='copy@cat.org'
        )
        save_copyrights(
            None, resource=self.resource_private, language=self.language_en,
            copyrights=[('Copy Cat <copy@cat.org>', ['2011', ]), ]
        )
        c = Copyright.objects.filter(
            resource=self.resource_private, language=self.language_en
        )
        self.assertEquals(len(c), 1)
        self.assertEquals(c[0].user, u2)


########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-

########NEW FILE########
__FILENAME__ = redis_ds
# -*- coding: utf-8 -*-

from django.test import TestCase
from datastores import TxRedisMapper
from transifex.txcommon.log import logger


class TestRedis(TestCase):

    def setUp(self):
        logger.critical("This will delete everything in db=1 i n redis.")
        self.r = TxRedisMapper(db=1)

    def tearDown(self):
        self.r.flushdb()

    def test_json_suffix(self):
        key = 'key'
        data = {'lang': 'en', 'code': 'en'}
        res = self.r.lpush(key, data=data)
        self.assertEquals(res, 1)
        res = self.r.lpop(key)
        self.assertEquals(res, data)

########NEW FILE########
__FILENAME__ = txredis
# -*- coding: utf-8 -*-

"""
Redis backend.
"""

import cPickle as pickle
import functools
from redis import StrictRedis, ConnectionError
from django.conf import settings
from transifex.txcommon.log import logger


def redis_exception_handler(func):
    """Decorator to handle redis backend exceptions."""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ConnectionError, e:
            logger.critical("Cannot connect to redis: %s" % e, exc_info=True)
        except Exception, e:
            logger.error("Error from redis: %s" % e, exc_info=True)
    return wrapper


class TxRedis(object):
    """Wrapper class around redis for Transifex."""

    def __init__(self, host=None, port=None, db=None):
        if host is None:
            host = settings.REDIS_HOST
        if port is None:
            port = settings.REDIS_PORT
        if db is None:
            db = settings.REDIS_DATABASE
        self._r = StrictRedis(host=host, port=port, db=db)

    def __getattr__(self, name):
        """Forward all method calls to redis."""
        return getattr(self._r, name)


class TxRedisMapper(TxRedis):
    """A redis wrapper which provides support for objects, too."""

    set_methods = ['set', 'lpush', 'rpush', ]
    get_methods = ['get', 'lrange', 'lpop',]

    def __getattr__(self, name):
        """Send all method calls to redis, while serializing arguments and
        results.

        Using pickle for (de)serialization. For argument serialization,
        he must provide the data in a dictionary named `data`.
        """
        attr = getattr(self._r, name)
        if name in self.set_methods:
            def new_attr(*args, **kwargs):
                if kwargs:      # argument serialization
                    data = pickle.dumps(kwargs.pop('data'))
                    args = list(args)
                    # value data almost always goes to the end
                    # override the other methods manually
                    args.append(data)
                return attr(*args, **kwargs)
            return functools.update_wrapper(new_attr, attr)
        elif name in self.get_methods:
            def new_attr(*args, **kwargs):
                res = attr(*args, **kwargs)
                if isinstance(res, basestring):
                    return pickle.loads(res)
                elif isinstance(res, list):
                    new_res = []
                    for r in res:
                        new_res.append(pickle.loads(r))
                    return new_res
                else:
                    return res
            return functools.update_wrapper(new_attr, attr)
        else:
            return super(TxRedisMapper, self).__getattr__(name)

########NEW FILE########
__FILENAME__ = admin
# -*- coding: utf-8 -*-
from django.contrib import admin
from transifex.addons.gtranslate.models import Gtranslate

class GtranslateAdmin(admin.ModelAdmin):
    search_fields = ['project', 'project__name']
    raw_id_fields = ('project', )


admin.site.register(Gtranslate, GtranslateAdmin)

########NEW FILE########
__FILENAME__ = handlers
# -*- coding: utf-8 -*-

from django import forms
from django.db.models import get_model
from django.utils.translation import ugettext_lazy as _
from django.core.exceptions import ValidationError
from django.conf import settings
from transifex.projects.signals import project_created, project_deleted, \
        project_form_init, post_proj_save_m2m


def delete_gtranslate(sender, **kwargs):
    """
    Delete a Gtranslate object after its corresponding projet has been deleted.
    """
    GtModel = get_model('gtranslate', 'Gtranslate')
    try:
        gt = GtModel.objects.get(project=sender)
        gt.delete()
    except GtModel.DoesNotExist, e:
        pass


def add_auto_translate_field(sender, **kwargs):
    """Add the field for the API key in project edit form."""
    form = kwargs['form']
    project = form.instance

    GtModel = get_model('gtranslate', 'Gtranslate')
    try:
        auto_translate = GtModel.objects.get(project=project)
        api_key = auto_translate.api_key
        choice = auto_translate.service_type
    except GtModel.DoesNotExist:
        api_key = ''
        choice = ''

    form.fields['auto_translate_select_service'] = forms.ChoiceField(
        choices=GtModel.available_services, required=False,
        label=_("Auto Translate Service"), initial=choice,
        help_text=_(
            "Select the type of service you want to use for the "
            "auto-translate service. Leave it blank, if you do not "
            "want to have the feature enabled. You will have to insert "
            "your API key for the service, too."
        )
    )
    form.fields['auto_translate_api_key'] = forms.CharField(
        max_length=255, required=False, label=_("Auto Translate API Key"),
        initial=api_key, help_text=_(
            "Enter the API key that Transifex will use for the auto-translate "
            "service you have chosen."
        )
    )

    old_clean = getattr(form, "clean", None)
    def new_clean():
        service_type = form.cleaned_data['auto_translate_select_service']
        api_key = form.cleaned_data['auto_translate_api_key']
        if service_type and not api_key:
            raise ValidationError(_("You have to select an API key, too."))
        elif not service_type and api_key:
            raise ValidationError(_(
                "You have to select a service for the auto-translate "
                "feature, too."
            ))
        if old_clean:
            return old_clean()
        else:
            return form.cleaned_data
    form.clean = new_clean


def save_auto_translate(sender, **kwargs):
    """Save a web hook, after saving a project (if defined)."""
    GtModel = get_model('gtranslate', 'Gtranslate')
    project = kwargs['instance']
    form = kwargs['form']
    service_type = form.cleaned_data['auto_translate_select_service']
    api_key = form.cleaned_data['auto_translate_api_key']

    if service_type and api_key:
        try:
            auto_translate, created = GtModel.objects.get_or_create(
                project=project
            )
            auto_translate.service_type = service_type
            auto_translate.api_key = api_key
            auto_translate.save()
        except Exception, e:
            msg = "Error saving auto-translate service for project %s: %s"
            logger.error(msg % (project, e))
    else:
        try:
            auto_translate = GtModel.objects.get(project=project)
            auto_translate.delete()
        except GtModel.DoesNotExist:
            pass


def connect():
    project_deleted.connect(delete_gtranslate)
    project_form_init.connect(add_auto_translate_field)
    post_proj_save_m2m.connect(save_auto_translate)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Gtranslate'
        db.create_table('gtranslate_gtranslate', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('use_gtranslate', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('project', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['projects.Project'], unique=True)),
        ))
        db.send_create_signal('gtranslate', ['Gtranslate'])


    def backwards(self, orm):
        
        # Deleting model 'Gtranslate'
        db.delete_table('gtranslate_gtranslate')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'gtranslate.gtranslate': {
            'Meta': {'object_name': 'Gtranslate'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['projects.Project']", 'unique': 'True'}),
            'use_gtranslate': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['gtranslate']

########NEW FILE########
__FILENAME__ = 0002_use_api_keys
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Gtranslate.use_gtranslate'
        db.delete_column('gtranslate_gtranslate', 'use_gtranslate')

        # Adding field 'Gtranslate.api_key'
        db.add_column('gtranslate_gtranslate', 'api_key', self.gf('django.db.models.fields.CharField')(default='', max_length=255, blank=True), keep_default=False)

        # Adding field 'Gtranslate.service_type'
        db.add_column('gtranslate_gtranslate', 'service_type', self.gf('django.db.models.fields.CharField')(default='', max_length=2, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Adding field 'Gtranslate.use_gtranslate'
        db.add_column('gtranslate_gtranslate', 'use_gtranslate', self.gf('django.db.models.fields.BooleanField')(default=True), keep_default=False)

        # Deleting field 'Gtranslate.api_key'
        db.delete_column('gtranslate_gtranslate', 'api_key')

        # Deleting field 'Gtranslate.service_type'
        db.delete_column('gtranslate_gtranslate', 'service_type')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'gtranslate.gtranslate': {
            'Meta': {'object_name': 'Gtranslate'},
            'api_key': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['projects.Project']", 'unique': 'True'}),
            'service_type': ('django.db.models.fields.CharField', [], {'max_length': '2', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['gtranslate']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-
from django.db import models
from django.utils.translation import ugettext_lazy as _
from transifex.projects.models import Project
import requests

class Gtranslate(models.Model):
    """
    Control integration with Google Translate and other machine
    translation services.
    """

    available_services = (
        ('', '-' * 20),
        ('GT', 'Google Translate'),
        ('BT', 'Bing Translator'),
    )

    service_language_urls = {
        'GT': 'https://www.googleapis.com/language/translate/v2/languages',
        'BT': 'http://api.microsofttranslator.com/V2/Ajax.svc/GetLanguagesForTranslate'
    }

    service_translate_urls = {
        'GT': 'https://www.googleapis.com/language/translate/v2',
        'BT': 'http://api.microsofttranslator.com/V2/Ajax.svc/TranslateArray'
    }

    api_key = models.CharField(
        max_length=255, verbose_name=_("API key"), blank=True,
        help_text=_("The API key for the auto-translate service.")
    )

    service_type = models.CharField(
        max_length=2, verbose_name=_("Service"),
        choices=available_services, blank=True,
        help_text=_("The service you want to use for auto-translation.")
    )

    project = models.OneToOneField(
        Project, unique=True,
        verbose_name=_("Project"),
        help_text=_("The project this setting applies to.")
    )

    def __unicode__(self):
        return unicode(self.project)

    def get_language_url(self):
        return self.service_language_urls.get(self.service_type, None)

    def get_translate_url(self):
        return self.service_translate_urls.get(self.service_type, None)

    def languages(self, target_lang=None):
        """Request to check if the given target language code is
        supported by the corresponding translation API.
        """
        if self.service_type == 'GT':
            params = {
                'key': self.api_key,
                'target': target_lang,
            }
        elif self.service_type == 'BT':
            params = {
                'appId': self.api_key,
            }
        r = requests.get(self.get_language_url(), params=params)
        return r.content

    def translate(self, term, source, target):
        """Build and send the actual request to the corresponding
        translation API and return the response content.
        """
        if self.service_type == 'GT':
            params = {
                'key': self.api_key,
                'q': term,
                'source': source,
                'target': target,
            }
        elif self.service_type == 'BT':
            params = {
                'appId': self.api_key,
                'texts': '["' + term + '"]',
                'from': source,
                'to': target,
                'options': '{"State": ""}'
            }
        r = requests.get(self.get_translate_url(), params=params)
        return r.content

########NEW FILE########
__FILENAME__ = tests
# -*- coding: utf-8 -*-

from django.conf import settings
from transifex.txcommon.tests.base import BaseTestCase, Languages
from transifex.projects.models import Project
from handlers import *
from models import Gtranslate
from transifex.addons.gtranslate import is_gtranslate_allowed

class TestGtranslate(BaseTestCase):

    def test_delete(self):
        """Test, if a gtranslate entry is deleted, when the corresponding
        project is delete.
        """
        p = Project(slug="rm")
        p.name = "RM me"
        p.source_language = self.language_en
        p.save()
        Gtranslate.objects.create(project=p)
        p.delete()
        self.assertEquals(Gtranslate.objects.all().count(), 0)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *
from gtranslate.views import translate, languages

urlpatterns = patterns('',
    url('^ajax/projects/p/(?P<project_slug>[-\w]+)/autotranslate/$',
        translate, name='autotranslate_proxy'),
    url('^ajax/projects/p/(?P<project_slug>[-\w]+)/autotranslate/languages/$',
        languages, name='supported_langs'),
)
########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.conf import settings
from django.core.cache import cache
from django.http import HttpResponse
from django.shortcuts import get_object_or_404
from django.utils import simplejson
from transifex.projects.models import Project
from gtranslate.models import Gtranslate

def _get_canonical_name(target_lang):
    if '_' in target_lang or '-' in target_lang:
        return target_lang[:2]
    return target_lang

def translate(request, project_slug):
    """Wrapper view over the supported translation APIs. Captures the GET
    parameters and forwards the request to the suitable service."""
    source_lang = request.GET.get('source', None)
    target_lang = request.GET.get('target', None)
    term = request.GET.get('q', None)

    if not all([source_lang, target_lang, term]):
        return HttpResponse(status=400)

    target_lang = _get_canonical_name(target_lang)

    try:
        service = Gtranslate.objects.get(project__slug=project_slug)
        resp = service.translate(term, source_lang, target_lang)
        return HttpResponse(resp)
    except Gtranslate.DoesNotExist:
        return HttpResponse(simplejson.dumps({"error": "Auto-translate not available."}))

def languages(request, project_slug):
    """Thin wrapper over the translation APIs to check if the requested language
    is supported. If no services are enabled for the project, it has the ability
    to fallback to a common Transifex key for use by all projects.
    """
    target_lang = request.GET.get('target', None)
    if target_lang:
        target_lang = _get_canonical_name(target_lang)

    try:
        service = Gtranslate.objects.get(project__slug=project_slug)
        service_type = service.service_type
        if service_type == 'BT':
            cache_key = 'bing_translate'
        elif service_type == 'GT':
            cache_key = 'google_translate'
        if cache.get(cache_key, None):
            resp = cache.get(cache_key)
        else:
            resp = service.languages(target_lang)
            cache.set(cache_key, resp, 24*60*60)
        return HttpResponse(resp)
    except Gtranslate.DoesNotExist:
        return HttpResponse(simplejson.dumps({"error": "Auto-translate not available."}))

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = helptext_tags
import re
from django import template

register = template.Library()


class RegisterHelp(template.Node):
    """Put a text to the context with var_name as its id."""
    def __init__(self, var_name, nodelist):
        self.nodelist = nodelist
        self.var_name = var_name

    def render(self, context):
        if context.has_key("helptext_ext"):
            helptext_ext = context["helptext_ext"]
            helptext_ext[self.var_name] = self.nodelist.render(context)
        else:
            helptext_ext = { self.var_name : self.nodelist.render(context) }
            context["helptext_ext"] = helptext_ext
        return ''


@register.tag
def register_helptext(parser, token):
    """
    Register an object to be used with print_helptext

    This templatetag is used at the beginning of a template where a help text
    needs to be extending with extra text. CAUTION! It should be used before
    the inclusion tag print_helptext to work properly.

    Example: <% register_helptext "example_id" %>
    """
    # This version uses a regular expression to parse tag contents.
    try:
        # Splitting by None == splitting by spaces.
        tag_name, id_string = token.split_contents()
    except ValueError:
        raise template.TemplateSyntaxError, "%r tag requires a single argument" % token.contents.split()[0]
    if not (id_string[0] == id_string[-1] and id_string[0] in ('"', "'")):
        raise template.TemplateSyntaxError, "%r tag's argument should be in quotes" % tag_name
    nodelist = parser.parse(('endregister_helptext',))
    parser.delete_first_token()
    return RegisterHelp(id_string[1:-1], nodelist)


@register.inclusion_tag('extended_helptext.html', takes_context=True)
def print_helptext(context, code_name, icon=None):
    """Put the registered extended helptext in a hidden container.

    The text is presented in a popup, backed by a js script. If a "yes"
    string is given as second argument (you can give any string actually)
    then a help icon with a anchored link is appeared.
    """
    return {
        'extra_helptext': context["helptext_ext"].get(code_name, None),
        'code_name': code_name,
        'icon': icon,
        'STATIC_URL': context.get("STATIC_URL", None),
    }


@register.inclusion_tag('tooltip_helptext.html', takes_context=True)
def tooltip_helptext(context, code_name, helptext, icon=None):
    """Create a tooltip around an element with id code_name

    It gets 3 arguments, an element id, a string of the helptext and an optional
    icon "True" string. The latter adds an icon which is marked with the tooltip.
    """
    return {
        'helptext': helptext,
        'code_name': code_name,
        'icon': icon,
        'STATIC_URL': context.get("STATIC_URL", None),
    }


########NEW FILE########
__FILENAME__ = admin
# -*- coding: utf-8 -*-
from django.contrib import admin
from models import Lock

admin.site.register(Lock)
########NEW FILE########
__FILENAME__ = handlers
# -*- coding: utf-8 -*-
from datetime import datetime
from django.core.exceptions import PermissionDenied
from django.utils.translation import ugettext as _
from django.conf import settings
from django.db.models.signals import post_save, pre_delete
from django.contrib.sites.models import Site
from django.contrib import messages
from notification  import models as notification
from transifex.resources.models import Resource
from transifex.resources.utils import invalidate_template_cache
from transifex.teams.models import Team
from transifex.txcommon.log import logger
from txcron.signals import cron_daily, cron_hourly
from transifex.projects.signals import pre_submit_translation, post_submit_translation
from lotte.signals import lotte_init, lotte_done
from models import Lock, LockError


# Resource presubmit signal handler
# Allow only owner of the lock to submit translations, otherwise throw Exception
def pre_handler(sender, resource=None, language=None, user=None,
    instance=None, **kwargs):

    if not resource or not language or not user:
        # Invalid situation
        return

    lock = Lock.objects.get_valid(resource, language)
    if not lock:
        # Lock doesn't exist
        return

    if lock.owner != user:
        # Lock exists and person who wants to upload is not owner of the lock
        raise PermissionDenied


# Resource postsubmit signal handler
# Update the lock if user checked the checkbox
def post_handler(sender, request=None, resource=None, language=None,
    user=None, instance=None, **kwargs):
    if 'lock_extend' in request.POST and request.POST['lock_extend']:
        if user:
            Lock.objects.create_update(resource, language, user).expires


def lotte_init_handler(sender, request, resources=None, language=None,
    **kwargs):
    user = request.user
    logger.debug("lock-addon: Started editing in Lotte")
    for resource in resources:
        try:
            lock = Lock.objects.create_update(resource, language, user)
            logger.debug("lock-addon: Lock acquired/extended: '%s'" % lock)
        except LockError, e:
            logger.debug("lock-addon: %s" % e.message)
            messages.error(request,
                           _("This translation is "
                           "locked by someone else."))


def lotte_done_handler(sender, request, resources=None, language=None,
    **kwargs):
    user = request.user
    logger.debug("lock-addon: Finished editing in Lotte")
    for resource in resources:
        lock = Lock.objects.get_valid(resource, language)
        if lock:
            try:
                lock.delete_by_user(user)
                logger.debug("lock-addon: Lock deleted: '%s'" % lock)
            except LockError, e:
                logger.debug("lock-addon: User '%s' sent translations to a "
                    "resource/language locked by someone else: %s" %
                    (user, e.message))


def expiration_notification(sender, **kwargs):
    """
    FIXME: Migrate it (txcron) to work with the String Level.
    """
    logger.debug("lock-addon: Sending expiration notifications...")
    if not settings.ENABLE_NOTICES:
        logger.debug("lock-addon: ENABLE_NOTICES is not enabled")
        return
    current_site = Site.objects.get_current()
    locks = Lock.objects.expiring()
    nt = 'project_resource_language_lock_expiring'
    for lock in locks:
        context = { 'resource': lock.rlstats.resource,
                    'language': lock.rlstats.language,
                    'project' : lock.rlstats.resource.project,
                    'user': lock.owner,
                    'expires': lock.expires,
                    'current_site' : current_site }
        logger.debug("lock-addon: Sending notification about lock: %s" % lock)
        notification.send_now([lock.owner,], nt, context)
        lock.notified = True
        lock.save()


def db_cleanup(sender, **kwargs):
    logger.debug("lock-addon: Looking for expired locks")
    locks = Lock.objects.expired()
    for lock in locks:
        logger.debug("lock-addon: Deleting lock: %s" % lock)
        lock.delete()


def invalidate_cache(sender, instance, created=True, **kwargs):
    """
    Invalidate caching on places related to the lock icon in the stats table
    row.
    """
    if created:
        logger.debug("lock-addon: Invalidating cache: %s" % instance)

        invalidate_template_cache('resource_details_lang',
            instance.rlstats.resource.project.slug,
            instance.rlstats.resource.slug,
            instance.rlstats.language.code)

        invalidate_template_cache('resource_details',
            instance.rlstats.resource.project.slug,
            instance.rlstats.resource.slug)

        invalidate_template_cache("team_details",
            instance.rlstats.resource.project.slug,
            instance.rlstats.language.code,
            instance.rlstats.resource.id
        )

def connect():
    pre_submit_translation.connect(pre_handler, sender=Resource)
    post_submit_translation.connect(post_handler, sender=Resource)
    lotte_init.connect(lotte_init_handler)
    lotte_done.connect(lotte_done_handler)
    cron_hourly.connect(db_cleanup)
    cron_hourly.connect(expiration_notification)
    post_save.connect(invalidate_cache, sender=Lock)
    pre_delete.connect(invalidate_cache, sender=Lock)

########NEW FILE########
__FILENAME__ = 0001_initial_v2
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    depends_on = (
        ("resources", "0001_initial"),
        ("languages", "0001_initial"),
    )

    def forwards(self, orm):

        # Adding model 'Lock'
        db.create_table('addons_locks_lock', (
            ('resource', self.gf('django.db.models.fields.related.ForeignKey')(related_name='locks', to=orm['resources.Resource'])),
            ('language', self.gf('django.db.models.fields.related.ForeignKey')(related_name='locks', to=orm['languages.Language'])),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('notified', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('expires', self.gf('django.db.models.fields.DateTimeField')()),
            ('enabled', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True)),
            ('modified', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
        ))
        db.send_create_signal('locks', ['Lock'])

        # Adding unique constraint on 'Lock', fields ['resource', 'language']
        db.create_unique('addons_locks_lock', ['resource_id', 'language_id'])


    def backwards(self, orm):

        # Deleting model 'Lock'
        db.delete_table('addons_locks_lock')

        # Removing unique constraint on 'Lock', fields ['resource', 'language']
        db.delete_unique('addons_locks_lock', ['resource_id', 'language_id'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'locks.lock': {
            'Meta': {'unique_together': "(('resource', 'language'),)", 'object_name': 'Lock', 'db_table': "'addons_locks_lock'"},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'expires': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'locks'", 'to': "orm['languages.Language']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'notified': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'locks'", 'to': "orm['resources.Resource']"})
        },
        'projects.project': {
            'Meta': {'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['locks']

########NEW FILE########
__FILENAME__ = 0002_add_field_rlstats
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'Lock.rlstats'
        db.add_column('addons_locks_lock', 'rlstats', self.gf('django.db.models.fields.related.OneToOneField')(related_name='lock', unique=True, null=True, to=orm['resources.RLStats']), keep_default=False)


    def backwards(self, orm):

        # Deleting field 'Lock.rlstats'
        db.delete_column('addons_locks_lock', 'rlstats_id')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'locks.lock': {
            'Meta': {'ordering': "('-created',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'Lock', 'db_table': "'addons_locks_lock'"},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'expires': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'locks'", 'to': "orm['languages.Language']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'notified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'locks'", 'to': "orm['resources.Resource']"}),
            'rlstats': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'lock'", 'unique': 'True', 'null': 'True', 'to': "orm['resources.RLStats']"})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['locks']

########NEW FILE########
__FILENAME__ = 0003_data_for_rlstats
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):

        for lock in orm['locks.Lock'].objects.all():
            rlstats, created = orm['resources.RLStats'].objects.get_or_create(
                resource=lock.resource, language=lock.language)
            lock.rlstats = rlstats
            lock.save()

    def backwards(self, orm):

        for lock in orm['locks.Lock'].objects.all():
            lock.resource = rlstats.resource
            lock.language = rlstats.language
            lock.save()


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'locks.lock': {
            'Meta': {'ordering': "('-created',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'Lock', 'db_table': "'addons_locks_lock'"},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'expires': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'locks'", 'to': "orm['languages.Language']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'notified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'locks'", 'to': "orm['resources.Resource']"}),
            'rlstats': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'lock'", 'unique': 'True', 'null': 'True', 'to': "orm['resources.RLStats']"})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['locks']

########NEW FILE########
__FILENAME__ = 0004_del_field_resource_and_language
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Removing unique constraint on 'Lock', fields ['resource', 'language']
        db.delete_unique('addons_locks_lock', ['resource_id', 'language_id'])

        # Deleting field 'Lock.resource'
        db.delete_column('addons_locks_lock', 'resource_id')

        # Deleting field 'Lock.language'
        db.delete_column('addons_locks_lock', 'language_id')

        # Changing field 'Lock.rlstats'
        db.alter_column('addons_locks_lock', 'rlstats_id', self.gf('django.db.models.fields.related.OneToOneField')(unique=True, to=orm['resources.RLStats']))

        # Adding unique constraint on 'Lock', fields ['rlstats']
        db.create_unique('addons_locks_lock', ['rlstats_id'])


    def backwards(self, orm):

        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'locks.lock': {
            'Meta': {'ordering': "('-created',)", 'unique_together': "(('rlstats',),)", 'object_name': 'Lock', 'db_table': "'addons_locks_lock'"},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'expires': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'notified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'rlstats': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'lock'", 'unique': 'True', 'to': "orm['resources.RLStats']"})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['locks']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-
from datetime import datetime, timedelta
from django.db import models
from django.conf import settings
from django.utils.translation import ugettext_lazy as _
from django.contrib.auth.models import User
from django.contrib.contenttypes import generic
from django.contrib.contenttypes.models import ContentType
from django_addons.errors import AddonError
from transifex.txcommon.log import logger
from transifex.projects.permissions.project import ProjectPermission
from transifex.resources.models import RLStats

class LockError(AddonError):
    pass

class LockManager(models.Manager):
    def expiring(self):
        """Return list of locks that are about to expire."""
        return self.filter(
            notified = False,
            expires__lt = datetime.now() +
            timedelta(seconds=settings.LOCKS_EXPIRE_NOTIF))

    def expired(self):
        """Return list of expired locks."""
        return self.filter(
            expires__lt = datetime.now() )

    def valid(self):
        """Return list of valid locks."""
        return self.filter(expires__gt = datetime.now() )

    def get_valid(self, resource, language):
        """
        Return valid (not expired) lock for the given resource and language.
        """
        try:
            return self.valid().get(rlstats__resource=resource,
                rlstats__language=language)
        except Lock.DoesNotExist:
            return None

    def get_or_none(self, resource, language):
        """
        Return lock for the given resource and language.
        """
        try:
            return self.get(rlstats__resource=resource,
                rlstats__language=language)
        except Lock.DoesNotExist:
            return None

    def create_update(self, resource, language, user):
        """
        Create new or update existing lock object for the given resource and
        language

        * Checks whether 'user' has permissions to create the lock.
        * Checks whether 'user' has reached max number of locks.
        * Checks whether the given resource and language was already locked
          by someone else.
        """

        # Permission check
        if not Lock.can_lock(resource, language, user):
            raise LockError(_("User '%(user)s' has no permission to submit "
               "translations for '%(resource)s' to '%(language)s'.") % {
               "user" : user, "resource" : resource, "language": language})

        now = datetime.now()

        # Lock limit check
        if settings.LOCKS_PER_USER != None:
            locks = self.filter(
                owner = user,
                expires__gt = now)
            if len(locks) >= settings.LOCKS_PER_USER:
                raise LockError(_("User '%(user)s' already has maximum "
                "allowed %(locks)i locks.") % {"user" : user,
                "locks" : settings.LOCKS_PER_USER})

        expires = now + timedelta(seconds=settings.LOCKS_LIFETIME)

        rlstats, created = RLStats.objects.get_or_create(resource=resource,
            language=language)

        #Get existing lock if any, else create new one
        lock, created = self.get_or_create(rlstats=rlstats, defaults={'owner':user, 'expires':expires})
        # The new lock is not created and lock is not expired and user is not the owner
        if not created:
            if lock.expires and lock.expires > now and lock.owner != user:
                raise LockError(_("This resource language is already locked "
                    "by '%s'") % lock.owner)
            else:
                # Overwrite old owner
                lock.owner = user
            # Update expiration date
            lock.expires = expires

        # Set notified flag to False meaning that expiration notification
        # has not been sent about this lock yet
        lock.notified = False
        lock.save()
        return lock

class Lock(models.Model):
    """
    A lock/hold a Resource's language.

    This usually denotes something that someone is working on and shouldn't
    be touched by others.
    """
    enabled = models.BooleanField(default=True)
    created = models.DateTimeField(auto_now_add=True, editable=False)
    modified = models.DateTimeField(auto_now=True, editable=False)
    notified = models.BooleanField(default=False, help_text="Whether "
        "the owner was notified that the lock expired")
    expires = models.DateTimeField(help_text="Time the lock expired.")

    # ForeignKeys
    owner = models.ForeignKey(User)
    rlstats = models.OneToOneField('resources.RLStats', null=False, blank=False,
        related_name='lock')

    # Managers
    objects = LockManager()

    def __unicode__(self):
        return u"%(rlstats)s (%(owner)s)" % {
            'rlstats': self.rlstats,
            'owner': self.owner}

    def __repr__(self):
        return u"<Lock: %(rlstats)s (%(owner)s)>" % {
            'rlstats': self.rlstats,
            'owner': self.owner}

    class Meta:
        db_table = 'addons_locks_lock'
        unique_together = ('rlstats',)
        ordering  = ('-created',)
        get_latest_by = 'created'

    def can_unlock(self, user):
        """
        Perform permission check whether 'user' can unlock the Lock instance.
        """
        perm = ProjectPermission(user)
        return (self.owner == user) or perm.coordinate_team(
            project=self.rlstats.resource.project, language=self.rlstats.language)

    @staticmethod
    def can_lock(resource, language, user):
        """
        Perform permission check whether 'user' can create a Lock.

        CAUTION: It does not perform lock counting check!
        """
        perm = ProjectPermission(user)
        if resource.accept_translations and (
            perm.submit_translations(resource.project, language) or
            perm.coordinate_team(project=resource.project, language=language)):
            return True
        return False

    def delete_by_user(self, user, *args, **kwargs):
        """
        Delete the instance of Lock whether the 'user' has permission to do so.
        """
        if not self.can_unlock(user):
            raise LockError(_("User '%(user)s' is not allowed to remove "
                "lock '%(lock)s'") % { "user" : user, "lock" : self})
        return super(Lock, self).delete(*args, **kwargs)

    def valid(self):
        """Return True if lock is valid. Not expired."""
        return self.expires >= datetime.now()

########NEW FILE########
__FILENAME__ = notifications
# -*- coding: utf-8 -*-
from django.utils.translation import ugettext_noop as _
from transifex.txcommon.notifications import NOTICE_TYPES

# TODO: Move to signal based architecture
#       This would make heavy use of underlying database
#       and require modifications for Notice model
#       (the "show_to_user" field is missing)
#       Signal based architecture would be much better
#       For addons system also

NOTICE_TYPES += [
            {
                "label": "project_resource_language_lock_expiring",
                "display": _("Lock expiration"),
                "description": _("when a lock for a translation resource will "
                    "expire"),
                "default": 0,
                "show_to_user": True,
            },
]

########NEW FILE########
__FILENAME__ = permissions
# -*- coding: utf-8 -*-
pr_resource_language_lock = (
    ('granular', 'project_perm.maintain'),
    ('granular', 'project_perm.submit_translations'),
    ('general',  'locks.add_lock'),
    ('general',  'locks.delete_lock'),
)
########NEW FILE########
__FILENAME__ = locks_tags
# -*- coding: utf-8 -*-
from django.conf import settings
from django.db.models import get_model
from django.template import Library
from django.contrib.auth.models import AnonymousUser

Lock = get_model('locks', 'Lock')

register = Library()

@register.inclusion_tag('lock_resource_action.html', takes_context=True)
def lock_resource_action(context, resource, language):
    """Display a lock with the status of the object lock."""
    request = context['request']
    user = request.user
    lock = Lock.objects.get_or_none(resource, language)
    if request.user in (None, AnonymousUser()):
        context['can_lock'] = False
    else:
        context['can_lock'] = Lock.can_lock(resource, language, user)
    if lock:
        if not lock.valid():
            lock.delete()
            context['is_locked'] = False
        else:
            context['lock'] = lock
            context['is_unlockable'] = lock.can_unlock(user)
            context['is_locked'] = True
            context['is_owner'] = (lock.owner == user)
    else:
        context['is_locked'] = False
    context['resource'] = resource
    context['language'] = language
    context['locks_lifetime'] = settings.LOCKS_LIFETIME / 3600
    context['lock_html_id'] = '%s_%s' % (resource.id, language.id)
    context['next'] = request.META.get('HTTP_REFERER', None) or '/'
    return context


########NEW FILE########
__FILENAME__ = test_locking
# -*- coding: utf-8 -*-
from django.conf import settings
from django.core.urlresolvers import reverse
from locks.models import Lock
from transifex.resources.models import Resource
from transifex.teams.models import Team
from transifex.languages.models import Language
from transifex.txcommon.tests.base import BaseTestCase, USER_ROLES
from transifex.txcommon.log import logger
from notification.models import Notice

# These Languages and POFiles should exist:
TEAM_LANG_CODES = ['en_US', 'pt_BR', 'el']


class TestLocking(BaseTestCase):
    def setUp(self):
        self.assertFalse('external.csrf.middleware.CsrfMiddleware' in
            settings.MIDDLEWARE_CLASSES, msg = 'Locking test doesn\'t '
            'work with CSRF Middleware enabled')
        super(TestLocking, self).setUp()

        self.assertNoticeTypeExistence("project_resource_language_lock_expiring")

        # Set settings for testcase
        settings.LOCKS_PER_USER = 3
        settings.LOCKS_LIFETIME = 10
        settings.LOCKS_EXPIRE_NOTIF = 10

        # Generate URLs
        url_args = [self.resource.project.slug,
            self.resource.slug, self.language.code]
        self.url_lock = reverse('resource_language_lock', args=url_args)
        self.url_unlock = reverse('resource_language_unlock', args=url_args)
        self.url_extend = reverse('resource_language_extend', args=url_args)
        self.url_resource = reverse('resource_detail', args=url_args[:2])
        self.url_start_lotte = reverse('translate_resource', args=url_args)

        # Sanity checks
        self.assertEqual( Lock.objects.all().count(), 0)
        self.assertEqual( Lock.objects.valid().count(), 0)

    def test_lotte(self):
        # Try opening Lotte and check whether resource was locked
        resp = self.client['team_member'].post(self.url_start_lotte, follow = True)
        self.assertEqual( resp.status_code, 200 )
        self.assertEqual( Lock.objects.valid().count(), 1)

    def test_resource_popup_another_user(self):
        """Test how another user sees the resource popup."""
        resp = self.client['maintainer'].post(self.url_lock)
        resp = self.client['team_member'].post(self.urls['resource_actions'])
        self.assertContains(resp, "User 'maintainer' locked this translation")
        self.assertContains(resp, "Resource cannot be locked")
        self.assertContains(resp, "currently locked by 'maintainer'")

    def test_unlock_another_user(self):
        """Test if a different user can unlock a resource language."""
        resp = self.client['maintainer'].post(self.url_lock)

        resp = self.client['team_member'].post(self.url_unlock, follow=True)
        self.assertContains(resp,
            "You don't have permission to unlock this file", status_code=403)

        resp = self.client['registered'].post(self.url_unlock, follow=True)
        self.assertContains(resp,
            "Forbidden access", status_code=403)

        resp = self.client['anonymous'].post(self.url_unlock, follow=True)
        # Check that we are indeed in the login page
        self.assertTemplateUsed(resp, 'userena/signin_form.html')
        self.assertContains(resp, "Sign in", status_code=200)

    def test_unlock_same_user(self):
        """Test if the same user can unlock a resource language"""
        resp = self.client['maintainer'].post(self.url_unlock, follow=True)

        self.assertContains(resp, "Unlock failed. Lock doesn't exist.", status_code=200)

        resp = self.client['maintainer'].post(self.url_lock)

        #test sending a GET request
        resp = self.client['maintainer'].get(self.url_unlock, follow=True)
        self.assertContains(resp, "Sorry, but you need to send a POST request.", status_code=200)

        resp = self.client['maintainer'].post(self.url_unlock, follow=True)
        self.assertContains(resp, "Lock removed.", status_code=200)

    def test_lock_all_users(self):
        for user in USER_ROLES:
            resp = self.client[user].post(self.url_lock, follow=True)
            if user == 'anonymous':
                # Check that we are indeed in the login page
                self.assertTemplateUsed(resp, 'userena/signin_form.html')
                self.assertContains(resp, "Sign in", status_code=200)
            elif user == 'registered':
                self.assertContains(resp, "Forbidden access", status_code=403)
            else:
                self.assertContains(resp, "Lock created.", status_code=200)
                resp = self.client[user].post(self.url_unlock, follow=True)
                self.assertContains(resp, "Lock removed.", status_code=200)

        #try sending a GET request
        resp = self.client['maintainer'].get(self.url_lock)
        self.assertContains(resp, "Sorry, but you need to send a POST request.", status_code=200)
        #try creating an error
        resp = self.client['maintainer'].post(self.url_lock)
        resp = self.client['team_member'].post(self.url_lock)
        self.assertContains(resp, "This resource language is already locked by 'maintainer'", status_code=200)


########NEW FILE########
__FILENAME__ = test_staticfiles
# -*- coding: utf-8 -*-
import os
import unittest
from django.conf import settings
from django.db.models.loading import get_app
from django.contrib.staticfiles.finders import AppDirectoriesFinder

class TestStaticfiles(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    # FIXME: Why test the configuration of django_staticfiles in the locks app?
    def test_staticfiles(self):
        """
        Test whether django-staticfiles is properly configured.

        There are various reasons why this could fail:
         * App not loaded (not in get_apps())
         * models.py missing
         * Addon not appended to STATICFILES_PREPEND_LABEL_APPS
         * STATIC_ROOT is not absolute path
         * STATICFILES_MEDIA_DIRNAMES doesn't include 'media'
        """
        suffix = 'css/icons.css'
        for addons_root in settings.ADDONS_ROOTS:
            ref = os.path.realpath('%s/locks/static/locks/%s' % (addons_root, suffix))
            if os.path.exists(ref):
                break
        path = 'locks/%s' % suffix
        r = AppDirectoriesFinder()
        self.assertEqual(ref, r.find(path))


########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-

from django.conf.urls.defaults import *
from views import resource_language_lock, resource_language_unlock

urlpatterns = patterns('',
    url(
        regex = r'^ajax/projects/p/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/l/(?P<language_code>[\-_@\w\.]+)/lock/$',
        view = resource_language_lock,
        name = 'resource_language_lock',),
    url(
        regex = r'^ajax/projects/p/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/l/(?P<language_code>[\-_@\w\.]+)/unlock/$',
        view = resource_language_unlock,
        name = 'resource_language_unlock',),
    # We exploit the create_update to do the extend lock action with the same view as lock creation.
    url(
        regex = r'^ajax/projects/p/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/l/(?P<language_code>[\-_@\w\.]+)/extend/$',
        view = resource_language_lock,
        name = 'resource_language_extend',),
)


########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.utils import simplejson
from django.conf import settings
from django.http import HttpResponseForbidden, HttpResponse
from django.contrib.auth.decorators import login_required
from django.core.cache import cache
from django.shortcuts import get_object_or_404
from django.utils.timesince import timeuntil
from django.utils.translation import ugettext as _

from transifex.languages.models import Language
from models import Lock, LockError
from transifex.projects.models import Project
from transifex.resources.models import Resource
from transifex.resources.utils import invalidate_template_cache
from transifex.teams.models import Team
from transifex.txcommon.decorators import one_perm_required_or_403

from permissions import pr_resource_language_lock

#try:
    #TFC_CACHING_PREFIX = settings.TFC_CACHING_PREFIX
#except:
    #TFC_CACHING_PREFIX = ""

@login_required
@one_perm_required_or_403(pr_resource_language_lock,
    (Project, 'slug__exact', 'project_slug'))
def resource_language_lock(request, project_slug, resource_slug, language_code):
    """
    View to lock a resource language.

    It uses a json response to be used with Ajax requests.
    """
    response={}
    if request.method == 'POST':
        resource = get_object_or_404(Resource.objects.select_related('project'),
            slug=resource_slug, project__slug=project_slug)
        language = get_object_or_404(Language, code=language_code)
        team = Team.objects.get_or_none(resource.project, language_code)

        try:
            lock = Lock.objects.create_update(resource, language, request.user)
            response['status'] = "OK"
            response['message'] = _("Lock created.")
            response['timeuntil'] = timeuntil(lock.expires)
        except LockError, e:
            response['status'] = "FAILED"
            response['message'] = e.message
    else:
        response['status'] = "FAILED"
        response['message'] = _("Sorry, but you need to send a POST request.")

    return HttpResponse(simplejson.dumps(response),
        mimetype='application/json')


@login_required
@one_perm_required_or_403(pr_resource_language_lock,
    (Project, 'slug__exact', 'project_slug'))
def resource_language_unlock(request, project_slug, resource_slug,
    language_code):
    """
    View to unlock a resource language.

    It uses a json response to be used with Ajax requests.
    """
    response={}
    if request.method == 'POST':
        resource = get_object_or_404(Resource.objects.select_related('project'),
            slug=resource_slug, project__slug=project_slug)
        language = get_object_or_404(Language, code=language_code)
        team = Team.objects.get_or_none(resource.project, language_code)

        lock = Lock.objects.get_valid(resource, language)
        if lock:
            try:
                lock.delete_by_user(request.user)
                response['status'] = "OK"
                response['message'] = _("Lock removed.")
            except LockError, e:
                return HttpResponseForbidden(_("You don't have permission to "
                    "unlock this file."))
        else:
            response['status'] = "FAILED"
            response['message'] = _("Unlock failed. Lock doesn't exist.")
    else:
        response['status'] = "FAILED"
        response['message'] = _("Sorry, but you need to send a POST request.")

    return HttpResponse(simplejson.dumps(response),
        mimetype='application/json')



########NEW FILE########
__FILENAME__ = filters
# -*- coding: utf-8 -*-
import re, datetime
from django.db.models import Q

# Filters allowed in Lotte search box
SEARCH_FILTERS = {
    'after': {
        'validator': lambda date: validate_date(date),
        'query': lambda date: Q(last_update__gte=date)
        },
    'before': {
        'validator': lambda date: validate_date(date),
        'query': lambda date: Q(last_update__lte=date)
        },
    'file': {
        'validator': lambda fpath: re.match(r'^[\w\-\/\.\\]+$', fpath),
        'query': lambda fpath: Q(source_entity__occurrences__icontains=fpath)
        }
    }

def validate_date(date):
    """
    Check whether a date is valid. Match values in the following format
    AAAA-MM-DD.
    """
    regex = r'^[0-9]{4}\-(1[0-2]|0[1-9])\-(3[01]|[12][0-9]|0[1-9])$'
    if re.match(regex, date):
        year, month, day = map(int, date.split('-'))
        try:
            datetime.date(year, month, day)
            return True
        except ValueError:
            pass
    return False

def get_search_filter_query(search):
    """
    Create a query for eventual filters found within the search text and also
    drops theses filter keywords from the search.
    
    Return a tuple with the modified search text and the created query.
    """
    # Expression to match 'key:value' entries within the search box
    search_filter_expr = r'(?P<key>\w+)\:(?P<value>[\w\-\/\.\\]+)'
    search_filter_query = Q()
    # Check for filter entries
    for match in re.finditer(search_filter_expr, search):
        k, v = match.group('key'), match.group('value')
        # In case it's a valid filter
        if k in SEARCH_FILTERS.keys():
            # Drop filter from search text
            search = search.replace(':'.join([k,v]), '')
            # If value of the filter passes the validation, add it to the query
            if SEARCH_FILTERS[k]['validator'](v):
                search_filter_query &= SEARCH_FILTERS[k]['query'](v)
                
    return search, search_filter_query

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = signals
# -*- coding: utf-8 -*-
from django.dispatch import Signal

lotte_init = Signal(providing_args=["request", "resources", "language"])
lotte_done = Signal(providing_args=["request", "resources", "language", "modified"])
lotte_save_translation = Signal(providing_args=["resource", "language", "user", "year"])

########NEW FILE########
__FILENAME__ = permissions
# -*- coding: utf-8 -*-
from django.core.urlresolvers import reverse
from django.db.models.loading import get_model
from django.utils import simplejson as json
from transifex.txcommon.tests.base import BaseTestCase
from utils import *

Translation = get_model('resources', 'Translation')


class LottePermissionsTests(BaseTestCase):

    def setUp(self):
        super(LottePermissionsTests, self).setUp()
        self.entity = self.resource.entities[0]
        self.DataTable_params = default_params()

    def tearDown(self):
        super(LottePermissionsTests, self).tearDown()

    def test_anon(self):
        """
        Test anonymous user
        """
        login_url = reverse('userena_signin')

        # Test main lotte page
        page_url = reverse('translate_resource', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '%s?next=%s' % (login_url, page_url))

        # Test view_strings
        page_url = reverse('view_strings', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 200)

        # Test exit
        page_url = reverse('exit_lotte', args=[
            self.project.slug, self.language.code])
        # GET
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '%s?next=%s' % (login_url, page_url))
        # POST
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '%s?next=%s' % (login_url, page_url))

        # Test delete translation
        page_url = reverse('delete_translation', args=[
            self.project.slug, self.language.code])
        # GET
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        # POST
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Test stringset handling Ajax call
        page_url = reverse('stringset_handling',
            args=[self.project.slug, self.resource.slug, self.language.code])
        # POST
        resp = self.client['anonymous'].post(page_url, self.DataTable_params)
        self.assertEqual(resp.status_code, 200)
        # GET
        resp = self.client['anonymous'].get(page_url, self.DataTable_params)
        self.assertEqual(resp.status_code, 200)

        # Create source language translation. This is needed to push
        # additional translations
        source_trans = Translation.objects.get(
            source_entity=self.source_entity, language = self.language_en,
            rule=5
        )
        trans_lang = self.language.code
        trans = "foo"
        # Create new translation
        resp = self.client['anonymous'].post(reverse('push_translation',
            args=[self.project.slug, trans_lang,]),
            json.dumps({'strings':[{'id':source_trans.id,'translations':{ 'other': trans}}]}),
            content_type='application/json' )
        self.assertEqual(resp.status_code, 302)
        source_trans.delete()

        # Test translation details
        page_url = reverse('tab_details_snippet',
            args=[self.entity.id, self.language.code])
        # Test the response contents
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 200)
       
        # Test access for developer_comment_extra view
        data = {'source_entity_id':self.entity.id,
            'comment_extra': 'Extra comment'}
        page_url = reverse('developer_comment_extra',
            args=[self.project.slug])
        # Test the response contents
        resp = self.client['anonymous'].post(page_url, data)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '%s?next=%s' % (login_url, page_url))

    def test_registered(self):
        """
        Test random registered user
        """
        # Test main lotte page
        page_url = reverse('translate_resource', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check access to main lotte page for resource not accepting
        # translations.
        self.resource.accept_translations = False
        self.resource.save()
        page_url = reverse('translate_resource', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        self.resource.accept_translations = True
        self.resource.save()

        # Test view_strings
        page_url = reverse('view_strings', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 200)

        # Test exit
        page_url = reverse('exit_lotte', args=[
            self.project.slug, self.language.code])
        # GET
        resp = self.client['registered'].get(page_url, follow=True)
        self.assertEqual(resp.status_code, 405)
        # POST
        resp = self.client['registered'].post(page_url, follow=True)
        self.assertEqual(resp.status_code, 403)

        # Test delete translation
        page_url = reverse('delete_translation', args=[
            self.project.slug, self.language.code])
        # GET
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        # POST
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Test stringset handling Ajax call
        page_url = reverse('stringset_handling',
            args=[self.project.slug, self.resource.slug, self.language.code])
        # POST
        resp = self.client['registered'].post(page_url, self.DataTable_params)
        self.assertEqual(resp.status_code, 200)
        # GET
        resp = self.client['registered'].get(page_url, self.DataTable_params)
        self.assertEqual(resp.status_code, 200)

        # Create source language translation. This is needed to push
        # additional translations
        source_trans = Translation.objects.get(
            source_entity=self.source_entity,
            language = self.language_en, rule=5
        )
        trans_lang = self.language.code
        trans = "foo"
        # Create new translation
        resp = self.client['registered'].post(reverse('push_translation',
            args=[self.project.slug, trans_lang,]),
            json.dumps({'strings':[{'id':source_trans.id,'translations':{ 'other': trans}}]}),
            content_type='application/json' )
        self.assertEqual(resp.status_code, 403)
        source_trans.delete()

        # Test translation details
        page_url = reverse('tab_details_snippet',
            args=[self.entity.id, self.language.code])
        # Test the response contents
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 200)

        # Test access for developer_comment_extra view
        data = {'source_entity_id':self.entity.id,
            'comment_extra': 'Extra comment'}
        page_url = reverse('developer_comment_extra',
            args=[self.project.slug])
        # Test the response contents
        resp = self.client['registered'].post(page_url, data)
        self.assertEqual(resp.status_code, 200)
        self.assertContains(resp, 'Permission error.')

    def test_team_member(self):
        """
        Test team_member permissions
        """
        # Test main lotte page
        page_url = reverse('translate_resource', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check access to main lotte page for resource not accepting
        # translations.
        self.resource.accept_translations = False
        self.resource.save()
        page_url = reverse('translate_resource', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        self.resource.accept_translations = True
        self.resource.save()

        # Test view_strings
        page_url = reverse('view_strings', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 200)

        # Test exit
        page_url = reverse('exit_lotte', args=[
            self.project.slug, self.language.code])
        # GET
        resp = self.client['team_member'].get(page_url, follow=True)
        self.assertEqual(resp.status_code, 405)
        # POST
        resp = self.client['team_member'].post(page_url, '{"updated": "updated"}',
            content_type='application/json', follow=True)
        self.assertEqual(resp.status_code, 200)

        # Test delete translation
        page_url = reverse('delete_translation', args=[
            self.project.slug, self.language.code])
        # GET
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        # POST
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Test stringset handling Ajax call
        page_url = reverse('stringset_handling',
            args=[self.project.slug, self.resource.slug, self.language.code])
        # POST
        resp = self.client['team_member'].post(page_url, self.DataTable_params)
        self.assertEqual(resp.status_code, 200)
        # GET
        resp = self.client['team_member'].get(page_url, self.DataTable_params)
        self.assertEqual(resp.status_code, 200)

        # Test main lotte page for other team. This should fail
        page_url = reverse('translate_resource', args=[
            self.project.slug, self.resource.slug, 'el'])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 403)

        # Create source language translation. This is needed to push
        # additional translations
        source_trans = Translation.objects.get(
            source_entity=self.source_entity,
            language = self.language_en, rule=5
        )
        trans_lang = self.language.code
        trans = "foo"
        # Create new translation
        resp = self.client['team_member'].post(reverse('push_translation',
            args=[self.project.slug, trans_lang,]),
            json.dumps({'strings':[{'id':source_trans.id,'translations':{ 'other': trans}}]}),
            content_type='application/json' )
        self.assertEqual(resp.status_code, 200)

        # Create new translation in other team. Expect this to fail
        resp = self.client['team_member'].post(reverse('push_translation',
            args=[self.project.slug, 'ru']),
            json.dumps({'strings':[{'id':source_trans.id,'translations':{ 'other': trans}}]}),
            content_type='application/json' )
        self.assertEqual(resp.status_code, 403)
        source_trans.delete()

        # Test translation details
        page_url = reverse('tab_details_snippet',
            args=[self.entity.id, self.language.code])
        # Test the response contents
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 200)

        # Test access for developer_comment_extra view
        data = {'source_entity_id':self.entity.id,
            'comment_extra': 'Extra comment'}
        page_url = reverse('developer_comment_extra',
            args=[self.project.slug])
        # Test the response contents
        resp = self.client['team_member'].post(page_url, data)
        self.assertEqual(resp.status_code, 200)
        self.assertContains(resp, 'Permission error.')


    def test_maintainer(self):
        """
        Test maintainer permissions
        """
        # Test main lotte page
        page_url = reverse('translate_resource', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check access to main lotte page for resource not accepting
        # translations.
        self.resource.accept_translations = False
        self.resource.save()
        page_url = reverse('translate_resource', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        self.resource.accept_translations = True
        self.resource.save()

        # Test view_strings
        page_url = reverse('view_strings', args=[
            self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)

        # Test exit
        page_url = reverse('exit_lotte', args=[
            self.project.slug, self.language.code])
        # GET
        resp = self.client['maintainer'].get(page_url, follow=True)
        self.assertEqual(resp.status_code, 405)
        # POST
        resp = self.client['maintainer'].post(page_url, '{"updated": "updated"}',
            content_type='application/json', follow=True)
        self.assertEqual(resp.status_code, 200)

        # Test delete translation
        page_url = reverse('delete_translation', args=[
            self.project.slug, self.language.code])
        # GET
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 400)
        # POST
        #resp = self.client['maintainer'].post(page_url, json.dumps(
            #{"to_delete":[self.entity.id]}),
            #content_type='application/json')
        #self.assertEqual(resp.status_code, 200)

        # Test stringset handling Ajax call
        page_url = reverse('stringset_handling',
            args=[self.project.slug, self.resource.slug, self.language.code])
        # POST
        resp = self.client['maintainer'].post(page_url, self.DataTable_params)
        self.assertEqual(resp.status_code, 200)
        # GET
        resp = self.client['maintainer'].get(page_url, self.DataTable_params)
        self.assertEqual(resp.status_code, 200)

        # Create source language translation. This is needed to push
        # additional translations
        source_trans = Translation.objects.get(
            source_entity=self.source_entity,
            language = self.language_en, rule=5
        )
        trans_lang = self.language.code
        trans = "foo"
        # Create new translation
        resp = self.client['maintainer'].post(reverse('push_translation',
            args=[self.project.slug, trans_lang,]),
            json.dumps({'strings':[{'id':source_trans.id,'translations':{ 'other': trans}}]}),
            content_type='application/json' )
        self.assertEqual(resp.status_code, 200)
        source_trans.delete()

        # Test translation details
        page_url = reverse('tab_details_snippet',
            args=[self.entity.id, self.language.code])
        # Test the response contents
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)

        # Test access for developer_comment_extra view
        data = {'source_entity_id':self.entity.id,
            'comment_extra': 'Extra comment'}
        page_url = reverse('developer_comment_extra',
            args=[self.project.slug])
        # Test the response contents
        resp = self.client['maintainer'].post(page_url, data)
        self.assertEqual(resp.status_code, 200)
        self.assertContains(resp, 'Extra comment')

########NEW FILE########
__FILENAME__ = templates
# -*- coding: utf-8 -*-
from django.core.urlresolvers import reverse
from transifex.txcommon.tests.base import BaseTestCase
from transifex.resources.models import Translation
from utils import *

try:
    import json
except ImportError:
    import simplejson as json


class LotteTemplateTests(BaseTestCase):

    def setUp(self):
        super(LotteTemplateTests, self).setUp()
        # URLs
        self.translate_view_url = reverse('translate_resource',
            args=[self.project.slug, self.resource.slug, self.language.code])
        self.translate_content_arabic_url = reverse('stringset_handling',
            args=[self.project.slug, self.resource.slug, self.language_ar.code])

    def tearDown(self):
        super(LotteTemplateTests, self).tearDown()

    def test_breadcrumbs(self):
        resp = self.client['team_member'].get(self.translate_view_url)
        self.assertContains(resp, 'Translate')

    def test_filters(self):
        """Test that more languages, filter by users, resources appear."""

        # Test the response contents
        resp = self.client['team_member'].get(self.translate_view_url)
        self.assertTemplateUsed(resp, 'translate.html')
        self.assertContains(resp, 'More languages', status_code=200)
        self.assertContains(resp,
            'Show translations in<br /> the selected languages')
        self.assertContains(resp, '<input class="more_languages" type="checkbox"')
        self.assertContains(resp, 'Filter by users')
        self.assertContains(resp,
            'Show only the translations<br /> by the selected users')
        self.assertContains(resp, 'No active contributor!')

    def test_statistics_div(self):
        """Test that statistics div appears correctly."""

        # Test the response contents
        resp = self.client['team_member'].get(self.translate_view_url)
        self.assertTemplateUsed(resp, 'translate.html')

        self.assertContains(resp, 'Translated', status_code=200)
        self.assertContains(resp, 'Remaining')
        self.assertContains(resp, 'Modified')
        self.assertContains(resp, 'Total')
        self.assertContains(resp, ('<input id="translated" class="filters" '
            'type="checkbox"  name="only_translated"/>'))
        self.assertContains(resp, ('<input id="untranslated" class="filters" '
            'type="checkbox" checked="checked" name="only_untranslated"/>'))

    def test_footpanel_div(self):
        """Check that footpanel html snippet appears correctly."""
        # Test the response contents
        resp = self.client['team_member'].get(self.translate_view_url)
        self.assertTemplateUsed(resp, 'translate.html')

        self.assertContains(resp, 'General settings', status_code=200)
        self.assertContains(resp, 'Verbose editing')
        self.assertContains(resp, 'Auto save')

    def test_global_buttons(self):
        """Check that "Save all", "Delete translations", "Save and Exit" appear."""
        # Test the response contents
        resp = self.client['team_member'].get(self.translate_view_url)
        self.assertTemplateUsed(resp, 'translate.html')

        self.assertContains(resp, 'Save all', status_code=200)
        self.assertContains(resp, 'Save and Exit')
        # For the team_member "delete" should not appear
        self.assertNotContains(resp, 'Delete translations')

        # Test the response contents
        resp = self.client['maintainer'].get(self.translate_view_url)
        self.assertTemplateUsed(resp, 'translate.html')
        # For the team_member "delete" should not appear
        self.assertContains(resp, 'Delete translations')

    def test_push_translation_perms(self):
        """Test the push translation view"""
        for user in ['anonymous', 'registered']:
            pass

        for user in ['team_member', 'maintainer', 'team_coordinator']:
            pass

########NEW FILE########
__FILENAME__ = utils
# -*- coding: utf-8 -*-

def default_params():
    """Return the default parameters (in a dict) for the DataTables interaction."""
    return { 'bEscapeRegex':True, 'bEscapeRegex_0':True,
        'bEscapeRegex_1':True, 'bEscapeRegex_2':True, 'bEscapeRegex_3':True,
        'bEscapeRegex_4':True, 'bEscapeRegex_5':True, 'bSearchable_0':True,
        'bSearchable_1':True, 'bSearchable_2':True, 'bSearchable_3':True,
        'bSearchable_4':True, 'bSearchable_5':True, 'bSortable_0':True,
        'bSortable_1':False, 'bSortable_2':True, 'bSortable_3':False,
        'bSortable_4':False, 'bSortable_5':False, 'iColumns':6,
        'iDisplayLength':10, 'iDisplayStart':0, 'iSortCol_0':0, 'iSortingCols':1,
        'sSortDir_0':'asc'}

########NEW FILE########
__FILENAME__ = validation
# -*- coding: utf-8 -*-

from django.core.urlresolvers import reverse
from django.test import TransactionTestCase
from transifex.txcommon.tests.base import SampleData
from transifex.resources.models import Translation

try:
    import json
except ImportError:
    import simplejson as json


class LotteValidationTest(SampleData, TransactionTestCase):

    def test_push_translation_strings(self):
        """Test the push translation view warnings and errors"""

        cases = {
            200: {
                # 'source': ('trans', 'message')
                'foo': [ ('foo', ''),
                    ('     ', 'Translation string only contains whitespaces'),
                    ('foo(', 'Translation string doesn\'t contain the same number'),
                    ('foo)', 'Translation string doesn\'t contain the same number'),
                    ('foo{', 'Translation string doesn\'t contain the same number'),
                    ('foo}', 'Translation string doesn\'t contain the same number'),
                    ('foo[', 'Translation string doesn\'t contain the same number'),
                    ('foo]', 'Translation string doesn\'t contain the same number')],
                'foo\n': [ ('foo\n', ''), ],
                'foo 123': [
                    ('foo123', ''),
                    ('foo', 'Number 123 is in the source string but not')],
                'This is a url http://goatse.cx/': [
                    ('This is a url http://goatse.cx/', ''),
                    ('This is a url http://http://lemonparty.org/', 'The following url is either missing from the')],
                'This is an email email@example.com': [
                    ('This is an email email@example.com', ''),
                    ('This is an email email2@example.com', 'The following email is either missing from the')],
                'This is an email email@example.com': [
                    ('This is an email email@example.com', ''),
                    ('This is an email email2@example.com', 'The following email is either missing from the')],
                '%(count)s animals were hurt for this unit test': [
                    ('%(count)s animals were hurt for this unit test', '')],
            },
            400: {
                'foo': [
                    ('foo\n', 'Translation should not end with a newline'),
                    ('\nfoo', 'Translation should not start with a newline'),
                ],
                'foo\n': [
                    ('foo','Translation must end with a newline'),
                    ('\nfoo', 'Translation should not start with a newline')
                ],
                '%(count)s animals were hurt for this unit test': [
                    ('No animals were hurt for this unit test', 'The number of arguments seems to differ'),
                    ('%(count)s animals were hurt for this unit test by %(ppl)s people',
                     'The number of arguments seems to differ')]
            }
        }

        source_translation = self.source_entity.get_translation(self.language_en.code)

        for code in cases.keys():
            for source in cases[code].keys():
                for item in cases[code][source]:
                    translation, message = item
                    source_translation.string = source
                    source_translation.save()
                    resp = self.client['maintainer'].post(reverse('push_translation',
                        args=[self.project.slug, self.language.code]),
                        json.dumps({'strings':[{'id':source_translation.id,
                            'translations':{'other':translation}}]}),
                        content_type='application/json')
                    if message:
                        self.assertTrue(message in resp.content)
                    self.assertEqual(resp.status_code, 200)
                    self.assertEqual(Translation.objects.filter(source_entity__resource=self.resource,
                        language = self.language, string=translation).count(),
                        1 if code == 200 else 0,
                        "Check failed for translation '%s' against source '%s'" % (
                        translation, source))

                    # Update existing translation
                    resp = self.client['maintainer'].post(reverse('push_translation',
                        args=[self.project.slug, self.language.code]),
                        json.dumps({'strings':[{'id': source_translation.id,
                            'translations':{'other':translation}}]}),
                        content_type='application/json')
                    self.assertEqual(resp.status_code, 200)
                    translations = Translation.objects.filter(
                        source_entity__resource=self.resource,
                        language = self.language, string=translation)
                    self.assertEqual(translations.count(),
                        1 if code == 200 else 0,
                        "Check failed for translation '%s' against source '%s'" % (
                        translation, source))

    def test_push_translation_plural_strings(self):
        """Test the push translation view warnings and errors"""

        cases = {
            200: [{
                # 'source': ('trans', 'message')
                    'one': 'foo1',
                    'other': 'foo5',
                    'message': '',
                    'translations': {
                        'one': 'foo1',
                        'other': 'foo5',},
                }, {
                    'one': 'foo1',
                    'other': 'foo5\n',
                    'message': '',
                    'translations': {
                        'one': 'foo1',
                        'other': 'foo5\n',},
                }, {
                    'one': 'foo1\n',
                    'other': 'foo5',
                    'message': '',
                    'translations': {
                        'one': 'foo1\n',
                        'other': 'foo5',},
                }, {
                    'one': 'foo(',
                    'other': 'foo5',
                    'message': 'Translation string doesn\'t contain the same',
                    'translations': {
                        'one': 'foo',
                        'other': 'foo5)',},
                }, {
                    'one': 'foo{',
                    'other': 'foo5',
                    'message': 'Translation string doesn\'t contain the same',
                    'translations': {
                        'one': 'foo{}',
                        'other': 'foo5',},
                }, {
                    'one': 'foo[',
                    'other': 'foo5]',
                    'message': 'Translation string doesn\'t contain the same',
                    'translations': {
                        'one': 'foo[',
                        'other': 'foo5[]',},
                }, {
                    'one': 'email me@example.com',
                    'other': 'no email',
                    'message': '',
                    'translations': {
                        'one': 'email me@example.com',
                        'other': 'no email',},
                }, {
                    'one': 'email me@example.com',
                    'other': 'no email',
                    'message': 'The following email is either missing from the',
                    'translations': {
                        'one': 'no email',
                        'other': 'email me@example.com',},
                }, {
                    'one': 'url http://goatse.cx',
                    'other': 'no url',
                    'message': '',
                    'translations': {
                        'one': 'url http://goatse.cx',
                        'other': 'no url',},
                }, {
                    'one': 'url http://goatse.cx',
                    'other': 'no url',
                    'message': 'The following url is either missing from the',
                    'translations': {
                        'one': 'no url',
                        'other': 'url http://goatse.cx',},
                }, {
                    'one': 'foo1',
                    'other': 'foo5',
                    'message': 'Number 5 is in the source string but not',
                    'translations': {
                        'one': 'foo1',
                        'other': 'foo',},
                }, {
                    'one': 'foo1',
                    'other': 'foo5',
                    'message': 'Number 1 is in the source string but not',
                    'translations': {
                        'one': 'foo',
                        'other': 'foo5',},
                }, {
                    'one': '1 animal was hurt for this unit test',
                    'other': '%(count)s animals were hurt for this unit test',
                    'message': '',
                    'translations': {
                        'one': '1 animals was hurt for this unit test',
                        'other': '%(count)s animals were hurt for this unit test',},
                }, {
                    'one': '%(count)s animals were hurt for this unit test',
                    'other': '%(count)s animals were hurt for this unit test',
                    'message': '',
                    'translations': {
                        'one': '%(count)s animals were hurt for this unit test',
                        'other': '%(count)s animals were hurt for this unit test',},
                }, {
                    'one': 'foo1\n',
                    'other': 'foo5\n',
                    'message': '',
                    'translations': {
                        'one': 'foo1\n',
                        'other': 'foo5\n',},
                }],
            400: [{
                    'one': '1 animal was hurt for this unit test',
                    'other': '%(count)s animals were hurt for this unit test',
                    'message': 'The number of arguments seems to differ',
                    'translations': {
                        'one': '1 animals was hurt for this unit test',
                        'other': 'A lot of animals were hurt for this unit test',},
                }, {
                    'one': '1 animal was hurt for this unit test',
                    'other': '%(count)s animals were hurt for this unit test',
                    'message': 'The number of arguments seems to differ',
                    'translations': {
                        'one': '%(count) animals was hurt for this unit test',
                        'other': '%(count) animals were hurt for this unit test',},
                }, {
                    'one': 'efoo1\n',
                    'other': 'efoo5',
                    'message': 'Translation must end with a newline',
                    'translations': {
                        'one': 'efoo1',
                        'other': 'efoo5',},
                }, {
                    'one': 'efoo1',
                    'other': 'efoo5',
                    'message': 'Translation should not end with a newline',
                    'translations': {
                        'one': 'efoo1\n',
                        'other': 'efoo5',},
                }, {
                    'one': 'efoo1',
                    'other': 'efoo5',
                    'message': 'Cannot save unless plural translations are either',
                    'translations': {
                        'one': '',
                        'other': 'efoo5',},
                }, {
                    'one': 'efoo1',
                    'other': 'efoo5',
                    'message': 'Cannot save unless plural translations are either',
                    'translations': {
                        'one': 'efoo1',
                        'other': '',},
                }]
        }


        source_translation_1 = self.source_entity_plural.get_translation(self.language_en.code,
            rule=1)
        if not source_translation_1:
            self.source_entity_plural.translations.create(
                string='default',
                rule=1,
                source_entity=self.source_entity_plural,
                language=self.language_en,
                user=self.user['registered'],
                resource=self.resource
            )
            source_translation_1 = self.source_entity_plural.get_translation(self.language_en.code,
                rule=1)

        source_translation_5 = self.source_entity_plural.get_translation(self.language_en.code,
            rule=5)
        if not source_translation_5:
            self.source_entity_plural.translations.create(
                string='default',
                rule=5,
                source_entity=self.source_entity_plural,
                language=self.language_en,
                user=self.user['registered'],
                resource=self.resource
            )
            source_translation_5 = self.source_entity_plural.get_translation(self.language_en.code,
                rule=5)

        for code in cases.keys():
            for item in cases[code]:
                source_1 = item['one']
                source_5 = item['other']
                message = item['message']
                trans_1 = item['translations']['one']
                trans_5 = item['translations']['other']
                source_translation_1.string = source_1
                source_translation_1.save()
                source_translation_5.string = source_5
                source_translation_5.save()
                resp = self.client['maintainer'].post(reverse('push_translation',
                    args=[self.project.slug, self.language.code]),
                    json.dumps({'strings':[{'id':source_translation_5.id,
                        'translations':{'other':trans_5, 'one':trans_1}}]}),
                    content_type='application/json')
                if message:
                    self.assertTrue(message in resp.content, "Message '%s'"\
                        " couldn't be found in the response." % message)
                self.assertEqual(resp.status_code, 200)
                self.assertEqual(Translation.objects.filter(source_entity__resource=self.resource,
                    language = self.language, string=trans_5,rule=5).count(),
                    1 if code == 200 else 0)
                self.assertEqual(Translation.objects.filter(source_entity__resource=self.resource,
                    language = self.language, string=trans_1,rule=1).count(),
                    1 if code == 200 else 0)

                    # Update existing translation
                resp = self.client['maintainer'].post(reverse('push_translation',
                    args=[self.project.slug, self.language.code]),
                    json.dumps({'strings':[{'id':source_translation_5.id,
                        'translations':{'other':trans_5, 'one':trans_1}}]}),
                    content_type='application/json')
                if message:
                    self.assertTrue(message in resp.content, "Message '%s'"\
                        " couldn't be found in the response." % message)
                self.assertEqual(resp.status_code, 200)
                self.assertEqual(Translation.objects.filter(source_entity__resource=self.resource,
                    language = self.language, string=trans_5,rule=5).count(),
                    1 if code == 200 else 0)
                self.assertEqual(Translation.objects.filter(source_entity__resource=self.resource,
                    language = self.language, string=trans_1,rule=1).count(),
                    1 if code == 200 else 0)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.core.urlresolvers import reverse
from django.db.models.loading import get_model
from django.utils import simplejson as json
from transifex.txcommon.tests.base import BaseTestCase
from utils import *


Translation = get_model('resources', 'Translation')
SourceEntity = get_model('resources', 'SourceEntity')


class LotteViewsTests(BaseTestCase):

    def setUp(self):
        super(LotteViewsTests, self).setUp()
        self.entity = self.resource.entities[0]

        self.source_entity1 = SourceEntity.objects.create(string='String2',
            context='Context2', occurrences='Occurrences2', resource=self.resource)
        self.source_entity2 = SourceEntity.objects.create(string='String3',
            context='Context3', occurrences='Occurrences3', resource=self.resource)
        self.source_entity3 = SourceEntity.objects.create(string='String4',
            context='Context4', occurrences='Occurrences4', resource=self.resource)
        self.source_entity4 = SourceEntity.objects.create(string='String5',
            context='context5',occurrences='Occurreneces5', resource=self.resource)


        self.DataTable_params = default_params()

        # Set some custom translation data
        # Source strings
        self.source_string1 = self.source_entity1.translations.create(
            string="String2",
            language = self.language_en,
            user=self.user['maintainer'], rule=5,
            resource=self.resource
        )

        self.source_string2 = self.source_entity2.translations.create(
            string="String3",
            language = self.language_en,
            user=self.user['maintainer'], rule=5,
            resource=self.resource
        )

        self.source_string3 = self.source_entity3.translations.create(
            string="String4",
            language = self.language_en,
            user=self.user['maintainer'], rule=5,
            resource=self.resource
        )

        self.source_string4 = self.source_entity4.translations.create(
            string="String with arguments: %s %d",
            language = self.language_en,
            user=self.user['maintainer'], rule=5,
            resource=self.resource
        )

        self.source_string_plural1 = self.source_entity_plural.translations.create(
            string="SourceArabicTrans1",
            language=self.language_en,
            user=self.user["maintainer"], rule=1,
            resource=self.resource
        )
        self.source_string_plural2 = self.source_entity_plural.translations.create(
            string="SourceArabicTrans2",
            language=self.language_en,
            user=self.user["maintainer"], rule=5,
            resource=self.resource
        )
        # Translation strings
        self.source_entity1.translations.create(
            string="ArabicString2", language=self.language_ar,
            user=self.user["maintainer"], rule=5,
            resource=self.resource
        )
        self.source_entity2.translations.create(
            string="", language=self.language_ar,
            user=self.user["maintainer"], rule=5,
            resource=self.resource
        )

        self.source_entity_plural.translations.create(
            string="ArabicTrans0", language=self.language_ar,
            user=self.user["maintainer"], rule=0,
            resource=self.resource
        )
        self.source_entity_plural.translations.create(
            string="ArabicTrans1", language=self.language_ar,
            user=self.user["maintainer"], rule=1,
            resource=self.resource
        )
        self.source_entity_plural.translations.create(
            string="ArabicTrans2", language=self.language_ar,
            user=self.user["maintainer"], rule=2,
            resource=self.resource
        )
        self.source_entity_plural.translations.create(
            string="ArabicTrans3", language=self.language_ar,
            user=self.user["maintainer"], rule=3,
            resource=self.resource
        )
        self.source_entity_plural.translations.create(
            string="ArabicTrans4", language=self.language_ar,
            user=self.user["maintainer"], rule=4,
            resource=self.resource
        )
        self.source_entity_plural.translations.create(
            string="ArabicTrans5", language=self.language_ar,
            user=self.user["maintainer"], rule=5,
            resource=self.resource
        )

        # URLs
        self.snippet_url = reverse('tab_details_snippet',
            args=[self.entity.id, self.language.code])
        self.translate_view_url = reverse('translate_resource',
            args=[self.project.slug, self.resource.slug, self.language.code])
        self.translate_content_arabic_url = reverse('stringset_handling',
            args=[self.project.slug, self.resource.slug, self.language_ar.code])
        self.push_translation = reverse('push_translation',
            args=[self.project.slug, self.language_ar.code])
        self.translation_delete_url = reverse('delete_translation',
            args=[self.project.slug, self.resource.slug, self.language_ar.code])

    def tearDown(self):
        super(LotteViewsTests, self).tearDown()
        self.source_entity_plural.translations.all().delete()

    def test_snippet_entities_data(self):
        """Test the entity details part of the snippet is correct."""
        # Create custom fields in entity
        self.entity.string = "Key1"
        self.entity.context = "Description1"
        self.entity.occurrences = "Occurrences1"
        self.entity.developer_comment = "Comment1"
        self.entity.save()
        # Test the response contents
        resp = self.client['team_member'].get(self.snippet_url)
        self.assertContains(resp, self.entity.string, status_code=200)
        self.assertContains(resp, self.entity.context[0])
        self.assertContains(resp, self.entity.occurrences)
        self.assertContains(resp, self.entity.developer_comment)
        self.assertTemplateUsed(resp, 'tab_details_snippet.html')

    def test_snippet_translation_data(self):
        """Test the translation details part of the snippet is correct."""
        # Set some custom data
        self.entity.translations.create(string="StringTrans1",
            language=self.language, user=self.user["team_member"],
            resource=self.resource
        )
        # Test the response contents
        resp = self.client['team_member'].get(self.snippet_url)
        self.assertContains(resp, '0 minutes', status_code=200)

    def test_translate_view(self):
        """Test the basic response of the main view for lotte."""
        # Check page status
        resp = self.client['maintainer'].get(self.translate_view_url)
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'translate.html')

    def test_plural_data(self):
        """Test that all plural fields are sent."""

        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity_plural,
            language=self.language_en).count(), 2)

        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity_plural,
            language=self.language_ar).count(), 6)

        resp = self.client['maintainer'].post(
            self.translate_content_arabic_url, self.DataTable_params)
        self.assertContains(resp, 'ArabicTrans1', status_code=200)
        self.assertContains(resp, 'ArabicTrans2')
        self.assertContains(resp, 'ArabicTrans3')
        self.assertContains(resp, 'ArabicTrans4')

    def test_push_plural_translation(self):
        """Test pushing pluralized translations."""
        data1 = {"strings":[{"id":self.source_string_plural1.id,
                            "translations":{
                                "zero":"ArabicTrans0",
                                "one":"ArabicTrans1",
                                "few":"ArabicTrans3",
                                "other":"ArabicTrans5",}
                           },]
               }
        data2 = {"strings":[{"id":self.source_string_plural1.id,
                            "translations":{
                                "zero":"ArabicTrans0_1",
                                "one":"ArabicTrans1_1",
                                "two":"ArabicTrans2_1",
                                "few":"ArabicTrans3_1",
                                "many":"ArabicTrans4_1",}
                           },]
               }
        data3 = {"strings":[{"id":self.source_string_plural1.id,
                            "translations":{
                                "zero":"ArabicTrans0_1",
                                "one":"ArabicTrans1_1",
                                "two":"ArabicTrans2_1",
                                "few":"ArabicTrans3_1",
                                "many":"ArabicTrans4_1",
                                "other":"ArabicTrans5_1",}
                           },]
               }
        data4 = {"strings":[{"id":self.source_string_plural1.id,
                            "translations":{
                                "zero":"",
                                "one":"",
                                "two":"",
                                "few":"",
                                "many":"",
                                "other":"",}
                           },]
               }
        resp1 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data1), content_type='application/json')
        self.assertContains(resp1,
            'Cannot save unless plural translations are either', status_code=200)

        resp2 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data2), content_type='application/json')
        self.assertContains(resp2,
            'Cannot save unless plural translations are either', status_code=200)

        resp3 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data3), content_type='application/json')
        self.assertEqual(resp3.status_code, 200)

        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity_plural,
            language=self.language_ar).count(), 6)

        resp4 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data4), content_type='application/json')
        self.assertEqual(resp4.status_code, 200)

        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity_plural,
            language=self.language_ar).count(), 0)

        #to check that translation strings are not created for empty strings
        resp5 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data4), content_type='application/json')
        self.assertEqual(resp5.status_code, 200)

        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity_plural,
            language=self.language_ar).count(), 0)

        #This will try to create empty plural translations
        resp6 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data3), content_type='application/json')
        self.assertEqual(resp6.status_code, 200)

        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity_plural,
            language=self.language_ar).count(), 6)

        # We push again the data to return to the setup state.
        resp7 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data3), content_type='application/json')
        self.assertEqual(resp3.status_code, 200)
        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity_plural,
            language=self.language_ar).count(), 6)

    def test_push_singular_translation(self):
        data1 = {"strings":[{"id":self.source_string3.id,
                             "translations":{
                                "other":"",}
                             },]
                }

        data2 = {"strings":[{"id":self.source_string4.id,
                             "translations":{
                                "other":"String with arguments: %s %f",}
                             },]
                }

        data3 = {"strings":[{"id":self.source_string3.id,
                             "translations":{
                                "other":"String4",}
                             },]
                }

        data4 = {"strings":[{"id":self.source_string4.id,
                             "translations":{
                                "other":"String with arguments: %s %d",}
                             },]
                }

        #This will try to create singular "" string translation
        resp1 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data1), content_type='application/json')
        self.assertContains(resp1, 'The translation string is empty', status_code=200)
        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity3,
            language=self.language_ar).count(), 0)

        #This will try to create a translation string with arguments not equal to those in source string
        resp2 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data2), content_type='application/json')
        self.assertContains(resp2, "The expression '%d' is not present in the translation.", status_code=200)
        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity4,
            language=self.language_ar).count(), 0)

        resp3 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data3), content_type='application/json')
        self.assertEqual(resp3.status_code, 200)
        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity3,
            language=self.language_ar).count(), 1)

        resp4 = self.client['maintainer'].post(self.push_translation,
            json.dumps(data4), content_type='application/json')
        self.assertEqual(resp4.status_code, 200)
        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity4,
            language=self.language_ar).count(), 1)

    def test_dt_search_string(self):
        """Test the Datatable's search."""
        self.DataTable_params["sSearch"] = "ArabicTrans"
        resp = self.client['maintainer'].post(
            self.translate_content_arabic_url, self.DataTable_params)
        self.assertContains(resp, 'ArabicTrans', status_code=200)
        self.DataTable_params["sSearch"] = "Empty result"
        resp = self.client['maintainer'].post(
            self.translate_content_arabic_url, self.DataTable_params)
        self.assertNotContains(resp, 'ArabicTrans', status_code=200)

    def test_dt_pagination(self):
        """Test the Datatable's pagination mechanism."""
        self.DataTable_params["iDisplayStart"] = 0
        resp = self.client['maintainer'].post(
            self.translate_content_arabic_url, self.DataTable_params)
        self.assertContains(resp, 'ArabicTrans', status_code=200)

    def test_dt_show_num_entries(self):
        """Test the Datatable's show num entries mechanism."""
        self.DataTable_params["iDisplayLength"] = 20
        resp = self.client['maintainer'].post(
            self.translate_content_arabic_url, self.DataTable_params)
        self.assertContains(resp, 'ArabicTrans', status_code=200)

    def test_filters(self):
        """Test lotte filters one by one."""
        pass

    def test_delete_translation(self):
        """Test translation delete"""
        to_delete = []
        for source_entity in SourceEntity.objects.filter(resource=self.resource):
            translations = source_entity.translations.filter(language=self.language_ar)
            if len(translations) == 1 and translations[0].string=="":
                pass
            else:
                to_delete.append(source_entity.id)
        data = {"to_delete": to_delete}
        resp = self.client['maintainer'].post(self.translation_delete_url,
            json.dumps(data), content_type='application/json')
        self.assertContains(resp, '', status_code=200)


    def test_add_edit_developer_commant_extra(self):
        """
        Test addition and edition of developer extra comment through Lotte.
        """

        # Test access for developer_comment_extra view
        data = {'source_entity_id':self.entity.id,
            'comment_extra': 'Extra comment'}
        page_url = reverse('developer_comment_extra',
            args=[self.project.slug])
        resp = self.client['maintainer'].post(page_url, data)
        self.assertEqual(resp.status_code, 200)
        self.assertContains(resp, 'Extra comment')

        # Test passing a wrong SE id
        data = {'source_entity_id':0,
            'comment_extra': 'Extra comment'}
        resp = self.client['maintainer'].post(page_url, data)
        self.assertEqual(resp.status_code, 200)
        self.assertContains(resp, 'No such Source Entity for the given project.')

        # Test doing a GET request
        data = {'source_entity_id': self.entity.id,
            'comment_extra': 'Extra comment'}
        resp = self.client['maintainer'].get(page_url, data)
        self.assertEqual(resp.status_code, 200)
        self.assertContains(resp, 'Bad request.')






########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from django.conf import settings
from lotte.views import *
from transifex.projects.urls import PROJECT_URL
from transifex.resources.urls import RESOURCE_URL
from transifex.resources.views import clone_language


# Project-language URLs
# Prefix example: /projects/p/<project_slug>/l/<lang_code>/
PROJECT_LANG_URL = PROJECT_URL + r'l/(?P<lang_code>[\-_@\w\.]+)/'

urlpatterns = patterns('',
    # Project-wide Lotte
    url(PROJECT_LANG_URL+'$', translate, name='translate_project'),
    url(PROJECT_LANG_URL+'stringset/$', stringset_handling, name='stringset_handling'),
    url(PROJECT_LANG_URL+'push_translations/$', push_translation, name='push_translation'),
    url(PROJECT_URL+'developer_comment/$', add_edit_developer_comment_extra, name='developer_comment_extra'),
    url(PROJECT_LANG_URL+'delete/$', delete_translation, name='delete_translation'),
    url(PROJECT_LANG_URL+'exit/$', exit, name='exit_lotte'),
    url(PROJECT_LANG_URL+'proofread/$', proofread, name='proofread'),
)

# Resource-language URLs
# Prefix example: /projects/p/<project_slug>/resource/<resource_slug>/l/<lang_code>/
RESOURCE_LANG_URL = RESOURCE_URL + r'l/(?P<lang_code>[\-_@\w\.]+)/'

urlpatterns += patterns('',
    # Resource-specific Lotte
    url(RESOURCE_LANG_URL+'spellcheck/$', spellcheck, name='spellcheckurl'),
    url(RESOURCE_LANG_URL+'$', translate, name='translate_resource'),
    url(RESOURCE_LANG_URL+'view/$', view_strings, name='view_strings'),
    url(RESOURCE_URL+r'l/(?P<source_lang_code>[\-_@\w\.]+)/clone/(?P<target_lang_code>[\-_@\w\.]+)/$', clone_language, name='clone_translate'),
    url(RESOURCE_LANG_URL+'stringset/$', stringset_handling, name='stringset_handling'),
    url(RESOURCE_LANG_URL+'delete/$', delete_translation, name='delete_translation'),
    url(RESOURCE_LANG_URL+'proofread/$', proofread, name='proofread'),
    url(RESOURCE_LANG_URL+'exit/$', exit, name='exit_lotte'),
)

# General URLs

urlpatterns += patterns('',
    url('^entities/(?P<entity_id>\d+)/l/(?P<lang_code>[\-_@\w\.]+)/tab_details_snippet/$',
        tab_details_snippet, name='tab_details_snippet'),
    url('^entities/(?P<entity_id>\d+)/l/(?P<lang_code>[\-_@\w\.]+)/tab_suggestions_snippet/$',
        tab_suggestions_snippet, name='tab_suggestions_snippet'),
)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
import re, httplib
from polib import escape, unescape
from django.conf import settings
from django.core.urlresolvers import reverse
from django.core.cache import cache
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.contrib import messages
from django.db.models import Count, Q
from django.db.models.loading import get_model
from django.http import (HttpResponseRedirect, HttpResponse, Http404,
                         HttpResponseForbidden, HttpResponseBadRequest)
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils import simplejson
from django.utils.translation import ugettext as _
from django.utils.html import escape
from django.views.generic import list_detail
from django.db import transaction
from authority.views import permission_denied

from actionlog.models import action_logging
from transifex.txcommon.log import logger
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.projects.permissions import *
from transifex.projects.permissions.project import ProjectPermission
from transifex.resources.models import Translation, Resource, SourceEntity, \
    ReviewHistory, get_source_language
from transifex.resources.handlers import invalidate_stats_cache
from transifex.resources.formats.validators import create_error_validators, \
        create_warning_validators, ValidationError
from transifex.teams.models import Team
from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.utils import normalize_query

# Temporary
from transifex.txcommon import notifications as txnotification

from signals import lotte_init, lotte_done, lotte_save_translation
from filters import get_search_filter_query

Suggestion = get_model('suggestions', 'Suggestion')

class LotteBadRequestError(Exception):
    pass

#Languages suported by google-spellcheck as mentioned at
#http://www.google.com/support/toolbar/bin/answer.py?hl=en&answer=32703
SPELLCHECK_SUPPORTED_LANGS = ['da', 'de', 'en', 'en_US', 'es', 'fi', 'fr',
    'it', 'nl', 'pl', 'pt', 'pt_BR', 'ru', 'sv']

# Restrict access only to : (The checks are done in the view's body)
# 1)those belonging to the specific language team (coordinators or members)
# 2)project maintainers
# 3)global submitters (perms given through access control tab)
# 4)superusers
@login_required
def translate(request, project_slug, lang_code, resource_slug=None,
                     *args, **kwargs):
    """
    Main lotte view.
    """

    # Permissions handling
    # Project should always be available
    project = get_object_or_404(Project, slug=project_slug)
    team = Team.objects.get_or_none(project, lang_code)
    check = ProjectPermission(request.user)
    if not check.submit_translations(team or project) and not\
        check.maintain(project):
        return permission_denied(request)

    resources = []
    if resource_slug:
        resource_list = [get_object_or_404(Resource, slug=resource_slug,
            project=project)]
    else:
        resource_list = Resource.objects.filter(project=project)

        # Return a page explaining that the project has multiple source langs and
        # cannot be translated as a whole.
        if resource_list.values('source_language').distinct().count() > 1:
            messages.info(request,_(
                          "There are multiple source languages for this project. "
                          "You will only be able to translate resources for one "
                          "source language at a time."))
            return HttpResponseRedirect(reverse('project_detail',
                                        args=[project_slug]),)

    # Filter resources that are not accepting translations
    for resource in resource_list:
        if resource.accept_translations:
            resources.append(resource)

    # If no resource accepting translations, raise a 403
    if not resources:
        return permission_denied(request)

    target_language = Language.objects.by_code_or_alias_or_404(lang_code)

    # If it is an attempt to edit the source language, redirect the user to
    # resource_detail and show him a message explaining the reason.
    if target_language == get_source_language(resources):
        messages.error(request,_(
                       "Cannot edit the source language because this would "
                       "result in translation mismatches! If you want to "
                       "update the source strings consider using the transifex "
                       "command-line client."))
        if resource_slug:
            return HttpResponseRedirect(reverse('resource_detail',
                                                args=[project_slug,
                                                      resource_slug]),)
        else:
            return HttpResponseRedirect(reverse('project_detail',
                                                args=[project_slug]),)

    total_strings = SourceEntity.objects.filter(
        resource__in = resources).count()

    translated_strings = Translation.objects.filter(
        resource__in=resources,
        language=target_language,
        source_entity__pluralized=False,
        rule=5).count()

    reviewed_strings = Translation.objects.filter(
        resource__in=resources,
        language=target_language,
        source_entity__pluralized=False,
        rule=5,
        reviewed=True).count()

    # Include counting of pluralized entities
    for pluralized_entity in SourceEntity.objects.filter(resource__in = resources,
                                                         pluralized=True):
        plurals_translated = Translation.objects.filter(
            language=target_language,
            source_entity=pluralized_entity).count()
        if plurals_translated == len(target_language.get_pluralrules()):
            translated_strings += 1

    if len(resources) > 1:
        translation_resource = None
    else:
        translation_resource = resources[0]

    contributors = User.objects.filter(pk__in=Translation.objects.filter(
        resource__in = resources,
        language = target_language,
        rule = 5).values_list("user", flat=True))

    lotte_init.send(None, request=request, resources=resources,
        language=target_language)

    if target_language in [team.language for team in project.available_teams]:
        team_language = True
    else:
        team_language = False

    GtModel = get_model('gtranslate', 'Gtranslate')
    try:
        auto_translate = GtModel.objects.get(project=project)
    except GtModel.DoesNotExist:
        auto_translate = None
    """
    if cache.get('lotte_%s' % request.session.session_key, None):
        cache.delete('lotte_%s' % request.session.session_key)
    """

    #Set rtl to True if target_language is an RTL language
    rtl = False
    if target_language.code in settings.RTL_LANGUAGE_CODES:
        rtl = True

    return render_to_response("translate.html", {
        'project': project,
        'resource': translation_resource,
        'target_language': target_language,
        'translated_strings': translated_strings,
        'reviewed_strings': reviewed_strings,
        'untranslated_strings': total_strings - translated_strings,
        'contributors': contributors,
        'resources': resources,
        'resource_slug': resource_slug,
        'languages': Language.objects.all(),
        'auto_translate': auto_translate,
        'spellcheck_supported_langs': SPELLCHECK_SUPPORTED_LANGS,
        'team_language': team_language,
        'RTL': rtl,
    }, context_instance = RequestContext(request))

@login_required
def exit(request, project_slug, lang_code, resource_slug=None, *args, **kwargs):
    """
    Exiting Lotte
    """
    if request.method != 'POST':
        return HttpResponse(status=405)

    # Permissions handling
    # Project should always be available
    project = get_object_or_404(Project, slug=project_slug)
    team = Team.objects.get_or_none(project, lang_code)
    check = ProjectPermission(request.user)
    if not check.submit_translations(team or project) and not\
        check.maintain(project):
        return permission_denied(request)

    language = Language.objects.by_code_or_alias(lang_code)

    resources = []
    if resource_slug:
        resources = Resource.objects.filter(slug=resource_slug, project=project)
        if not resources:
            raise Http404
    else:
        resources = Resource.objects.filter(project=project)


    data = simplejson.loads(request.raw_post_data)

    if data.get('updated'):
        modified = True
        # ActionLog & Notification
        for resource in resources:
            nt = 'project_resource_translated'
            context = {'project': project,
                       'resource': resource,
                       'language': language,
                       'sender': request.user}
            object_list = [project, resource, language]
            if team:
                object_list.append(team)
            action_logging(request.user, object_list, nt, context=context)
    else:
        modified = False

    lotte_done.send(None, request=request, resources=resources,
        language=language, modified=modified)

    redirect_url = reverse('team_detail', args=[project_slug, language.code])

    if request.is_ajax():
        json = simplejson.dumps(dict(redirect=redirect_url))
        return HttpResponse(json, mimetype='application/json')

    return HttpResponseRedirect(redirect_url)


# Restrict access only for private projects
# Allow even anonymous access on public projects
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def view_strings(request, project_slug, lang_code, resource_slug=None,
                 *args, **kwargs):
    """
    View for observing the translations strings on a specific language.
    """

    resource = get_object_or_404(Resource,
        slug = resource_slug,
        project__slug = project_slug
    )
    try:
        target_language = Language.objects.by_code_or_alias(lang_code)
    except Language.DoesNotExist:
        raise Http404

    total_strings = SourceEntity.objects.filter(
        resource=resource).count()

    translated_strings = Translation.objects.filter(
        resource=resource,
        language=target_language,
        rule=5).count()

    return render_to_response("view_strings.html",
        { 'project' : resource.project,
          'resource' : resource,
          'target_language' : target_language,
          'translated_strings': translated_strings,
          'untranslated_strings': total_strings - translated_strings,
        },
        context_instance = RequestContext(request))


#FIXME: Find a more clever way to do it, to avoid putting placeholders.
SORTING_DICT=( 'id', 'id', 'string')

# Restrict access only for private projects since this is used to fetch stuff!
# Allow even anonymous access on public projects
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def stringset_handling(request, project_slug, lang_code, resource_slug=None,
                     *args, **kwargs):
    """
    Function to serve AJAX data to the datatable holding the translating
    stringset.
    """

    project = get_object_or_404(Project, slug=project_slug)

    resources = []
    if resource_slug:
        try:
            resources = [ Resource.objects.get(slug=resource_slug,
                                    project__slug = project_slug) ]
        except Resource.DoesNotExist:
            raise Http404
    else:
        resources = Resource.objects.filter(project__slug = project_slug)

    try:
        language = Language.objects.by_code_or_alias(lang_code)
    except Language.DoesNotExist:
        raise Http404

    # Check if user is a team reviewer so that we can
    # send the extra info.
    check = ProjectPermission(request.user)
    review = check.proofread(project, language)

    # FIXME Do we need to check for non-POST requests and return an error?
    return _get_stringset(request.POST, resources, language, review=review,
            session=request.session)


def _get_stringset(post_data, resources, language, review=False, session='', *args, **kwargs):
    """Return the source strings for the specified resources and language
    based on the filters active in the request.

    Filters are: translated|untranslated, specific user and specific
    resources, which must be a subset of the resources argument. Also, the
    user can select to search for a term, sort the columns and show more
    languages other than the selected one.
    """
    # Find a way to determine the source language of multiple resources #FIXME
    source_language = get_source_language(resources)
    try:
        source_strings = _get_source_strings_for_request(
            post_data, resources, source_language, language,
            session
        )
    except LotteBadRequestError, e:
        logger.warning("Error in lotte filters: %s" % e.message, exc_info=True)
        return HttpResponseBadRequest()

    translated_strings = Translation.objects.filter(
        resource__in=resources,
        language=language)

    if not isinstance(source_strings, list):
        more_languages = []
        if post_data and post_data.has_key('more_languages'):
            # rsplit is used to remove the trailing ','
            more_languages = post_data.get('more_languages').rstrip(',').split(',')

        # keyword filtering
        search = post_data.get('sSearch', '')
        if not search == '':
            search, search_filter_query = get_search_filter_query(search)
            query = Q()
            for term in normalize_query(search):
                query &= Q(string__icontains=term)
                query |= Q(source_entity__string__icontains=term)
            if query:
                source_entities = translated_strings.filter(query).values('source_entity')
                query |= Q(source_entity__in=source_entities)
                source_strings = source_strings.filter(query)
            if search_filter_query:
                source_strings = source_strings.filter(search_filter_query)

        # sorting
        scols = post_data.get('iSortingCols', '0')
        for i in range(0,int(scols)):
            if post_data.has_key('iSortCol_'+str(i)):
                col = int(post_data.get('iSortCol_'+str(i)))
                if post_data.has_key('sSortDir_'+str(i)) and \
                    post_data['sSortDir_'+str(i)] == 'asc':
                    source_strings=source_strings.order_by(SORTING_DICT[col])
                else:
                    source_strings=source_strings.order_by(SORTING_DICT[col]).reverse()

        # for statistics
        total = source_strings.count()
    else:
        total = 0

    # for items displayed
    try:
        dlength = int(post_data.get('iDisplayLength','50'))
        dstart = int(post_data.get('iDisplayStart','0'))
    except ValueError, e:
        return HttpResponseBadRequest()

    # NOTE: It's important to keep the translation string matching inside this
    # iteration to prevent extra un-needed queries. In this iteration only the
    # strings displayed are calculated, saving a lot of resources.
    response_dict = {
        'sEcho': post_data.get('sEcho','1'),
        'iTotalRecords': total,
        'iTotalDisplayRecords': total,
        'aaData': [
            [
                # 1. Translation object's "id"
                s.id,
                # 2. SourceEntity object's "string" content
                s.source_entity.string,
                # 3. Get all the necessary source strings, including plurals and
                # similar langs, all in a dictionary (see also below)
                _get_source_strings(s, source_language, language.code, more_languages),
                # 4. Get all the Translation strings mapped with plural rules
                # in a single dictionary (see docstring of function)
                _get_strings(translated_strings, language, s.source_entity),
                # 5. A number which indicates the number of Suggestion objects
                # attached to this row of the table.
                Suggestion.objects.filter(source_entity=s.source_entity, language__code=language.code).count(),
                # 6. save buttons and hidden context (ready to inject snippet)
                # It includes the following content, wrapped in span tags:
                # * SourceEntity object's "context" value
                # * SourceEntity object's "id" value
                ('<span class="save edit-panel inactive" id="save_' + str(counter) + '" style="border:0" title="' + _("Save the specific change") + '"></span>'
                 '<span class="spellcheck edit-panel inactive" id="spellcheck_' + str(counter) + '" style="border:0" title="' + _("Check spelling") + '"></span>'
                 '<span class="undo edit-panel inactive" id="undo_' + str(counter) + '" style="border:0" title="' + _("Undo to initial text") + '"></span>'
                 '<span class="context" id="context_' + str(counter) + '" style="display:none;">' + escape(str(s.source_entity.context_string.encode('UTF-8'))) + '</span>'
                 '<span class="source_id" id="sourceid_' + str(counter) + '"style="display:none;">' + str(s.source_entity.id) + '</span>'),
            ] for counter,s in enumerate(source_strings[dstart:dstart+dlength])
        ],
    }

    if review:
        for counter, s in enumerate(source_strings[dstart:dstart+dlength]):
            try:
                translation = Translation.objects.get(
                    source_entity__id=s.source_entity.id,
                    language__code=language.code, rule=5
                )
                review_snippet = '<span><input class="review-check" title="' + _("Reviewed string") + '" id="review_source_' + str(s.source_entity.id) + '" type="checkbox" name="review" ' + ('checked="checked"' if translation.reviewed else '') + ' value="Review"/></span>',
            except Translation.DoesNotExist:
                review_snippet = '<span><input class="review-check" title="' + _("Reviewed string") + '" id="review_source_' + str(s.source_entity.id) + '" type="checkbox" name="review" disabled="disabled" value="Review"/></span>',

            response_dict['aaData'][counter].append(review_snippet)

    json = simplejson.dumps(response_dict)
    return HttpResponse(json, mimetype='application/json')


def proofread(request, project_slug, lang_code, resource_slug=None, *args, **kwargs):
    """AJAX view that sets the reviewed flag on Translations to true or false.

    The request data is expected in JSON, with the following format:

    {
        'true': [1,2,3]
        'false': [4,5]
    }

    Note: The IDs are source entity IDs.
    """
    if request.method != 'POST':
        return HttpResponse(status=405)

    project = get_object_or_404(Project, slug=project_slug)
    resource = get_object_or_404(Resource, slug=resource_slug, project=project)

    try:
        language = Language.objects.by_code_or_alias(lang_code)
    except Language.DoesNotExist:
        raise Http404

    # Check if the user has the necessary permissions to review strings.
    check = ProjectPermission(request.user)
    if not check.proofread(project, language):
        return permission_denied(request)

    request_data = simplejson.loads(request.raw_post_data)

    if 'true' in request_data:
        source_entity_ids = request_data['true']
        translations = Translation.objects.filter(
            source_entity__id__in=source_entity_ids,
            language__code=lang_code,
        )
        translations.update(reviewed=True)
        ReviewHistory.add_many(translations, request.user, project.id, reviewed=True)

    if 'false' in request_data:
        source_entity_ids = request_data['false']
        translations = Translation.objects.filter(
            source_entity__id__in=source_entity_ids,
            language__code=lang_code,
        )
        translations.update(reviewed=False)
        ReviewHistory.add_many(translations, request.user, project.id, reviewed=False)

    invalidate_stats_cache(resource, language, user=request.user)

    return HttpResponse(status=200)


def _get_source_strings_for_request(post_data, resources, source_language,
        language, session):
    """Return the source strings that correspond to the filters in the request.

    Use powers of two for each possible filter, so that we can get a unique
    number for each possible combination. Use that number as index to call
    the specialized for the combination function.
    This allows to optimize queries based on the specific filters applied
    and bypass the database for combinations which are guaranteed to return
    empty results.
    """
    # FIXME Is this possible?
    if not post_data:
        return Translation.objects.filter(
            resource__in=resources,
            language=source_language,
            rule=5
        )

    if 'resource_filters' in post_data:
        requested_resources = set(
            post_data['resource_filters'].rstrip(',').split(',')
        )
        resources = filter(lambda r: r in requested_resources, resources)

    # FIXME handle exceptions
    index = 0
    if 'filters' in post_data:
        # Handle 'translated'/'untranslated' filter
        filters = post_data['filters'].rstrip(',').split(',')
        if len(filters) == 1:
            if 'translated' in filters:
                index += 5
            elif 'untranslated' in filters:
                index += 1
            elif 'reviewed' in filters:
                index += 4
        elif len(filters) == 2:
            if 'translated' in filters and 'untranslated' in filters:
                index += 0
            if 'translated' in filters and 'reviewed' in filters:
                index += 2
            if 'untranslated' in filters and 'reviewed' in filters:
                index += 6
        elif len(filters) == 3: # translated, untranslated, reviewed
            index += 0
        else:
            raise LotteBadRequestError('Invalid filter: %s' % filters[0])

    users = None
    if 'user_filters' in post_data:
        try:
            users = map(int, post_data['user_filters'].rstrip(',').split(','))
        except ValueError, e:
            raise LotteBadRequestError(
                "Invalid user id specified: %s" % post_data['user_filters']
            )
        index += 7

    querysets = [
        _get_all_source_strings,
        _get_untranslated_source_strings,
        _get_translated_source_strings,
        _get_none_source_strings,
        _get_reviewed_source_strings,
        _get_unreviewed_source_strings,
        _get_untranslated_and_reviewed_source_strings,
        _get_user_filtered_source_strings,
        _get_user_filtered_source_strings,
        _get_user_filtered_source_strings,
        _get_user_filtered_source_strings,
        _get_user_filtered_source_strings,
        _get_user_filtered_source_strings,
        _get_user_filtered_source_strings,
        _get_none_source_strings,
        _get_none_source_strings,
    ]
    """
    if cache.get('lotte_%s' % session.session_key, None):
        cached_data = cache.get('lotte_%s' % session.session_key)
        if index != cached_data['index']:
            qset = querysets[index](
                resources=resources,
                language=language,
                users=users
            )
            cached_data['index'] = index
            cached_data['qset'] = qset
            cache.set('lotte_%s' % session.session_key, cached_data,
                    2*60*60)
            return qset
        else:
            return cached_data['qset']
    else:
        qset =  querysets[index](
            resources=resources,
            language=language,
            users=users
        )
        cache.set('lotte_%s' % session.session_key, {'index': index,
            'qset': qset}, 2*60*60)
        return qset
    """
    return querysets[index](
            resources=resources,
            language=language,
            users=users
        )


def _get_all_source_strings(resources, *args, **kwargs):
    """Return all source strings for the resources."""
    return Translation.objects.source_strings(resources)


def _get_untranslated_source_strings(resources, language, *args, **kwargs):
    """
    Get only the source strigns that haven't been translated
    in the specified language.
    """
    return Translation.objects.untranslated_source_strings(resources, language)


def _get_translated_source_strings(resources, language, *args, **kwargs):
    """
    Get only the source strigns that haven't been translated
    in the specified language.
    """
    return Translation.objects.translated_source_strings(resources, language)


def _get_reviewed_source_strings(resources, language, *args, **kwargs):
    """
    Get only the source strings that have been translated in the
    specified language and their translations are marked as reviewed.
    """
    return Translation.objects.reviewed_source_strings(resources, language)


def _get_unreviewed_source_strings(resources, language, *args, **kwargs):
    """
    Get only the source strings that have been translated in the
    specified language but their translations are not yet reviewed.
    """
    return Translation.objects.unreviewed_source_strings(resources, language)


def _get_untranslated_and_reviewed_source_strings(resources, language, *args, **kwargs):
    """
    Combine ``untranslated`` and ``reviewed`` querysets.
    """
    return (_get_untranslated_source_strings(resources, language) |
        _get_reviewed_source_strings(resources, language))


def _get_none_source_strings(*args, **kwargs):
    """Return an empty set.

    There are combinations that return emty sets, so let's optimize those
    cases and return an empty set without querying the database.
    """
    return []


def _get_user_filtered_source_strings(resources, users, language, *args, **kwargs):
    """Return all source strings created/edited by the specified users."""
    return Translation.objects.user_translated_strings(resources, language, users)


def _get_source_strings(source_string, source_language, lang_code, more_languages):
    """
    Get all the necessary source strings, including plurals and similar langs.

    Returns a dictionary with the keys:
    'source_strings' : {"one":<string>, "two":<string>, ... , "other":<string>}
    'similar_lang_strings' :
        {"lang1": {"one":<string>, ... , "other":<string>},
         "lang2": {"one":<string>, "two":<string>, ... , "other":<string>}}
    """
    source_entity = source_string.source_entity
    # This is the rule 5 ('other')
    source_strings = { "other":source_string.string }
    # List that will contain all the similar translations
    similar_lang_strings = {}

    if source_entity.pluralized:
        # These are the remaining plural forms of the source string.
        plural_strings = Translation.objects.filter(
            source_entity = source_entity,
            language = source_language).exclude(rule=5).order_by('rule')
        for pl_string in plural_strings:
            plural_name = source_language.get_rule_name_from_num(pl_string.rule)
            source_strings[plural_name] = pl_string.string

    # for each similar language fetch all the translation strings
    for lang_id in more_languages:
        l = Language.objects.get(pk=lang_id)
        similar_lang_strings[l.name] = {}
        for t in Translation.objects.filter(source_entity=source_entity, language=l).order_by('rule'):
            plural_name = source_language.get_rule_name_from_num(t.rule)
            similar_lang_strings[l.name][plural_name] = t.string
    return { 'source_strings' : source_strings,
             'similar_lang_strings' : similar_lang_strings }


def _get_strings(query, target_language, source_entity):
    """
    Helper function for returning all the Translation strings or an empty dict.

    Used in the list concatenation above to preserve code sanity.
    Returns a dictionary in the following form:
    {"zero":<string>, "one":<string>, ... , "other":<string>},
    where the 'zero', 'one', ... are the plural names of the corresponding
    plural forms.
    """
    # It includes the plural translations, too!
    translation_strings = {}
    if source_entity.pluralized:
        translations = query.filter(source_entity=source_entity).order_by('rule')
        # Fill with empty strings to have the Untranslated entries!
        for rule in target_language.get_pluralrules():
            translation_strings[rule] = ""
        for translation in translations:
            plural_name = target_language.get_rule_name_from_num(translation.rule)
            translation_strings[plural_name] = translation.string
    else:
        try:
            translation_strings["other"] = query.get(source_entity=source_entity,
                                                     rule=5).string
        except Translation.DoesNotExist:
            translation_strings["other"] = ""
    return translation_strings


# Restrict access only to : (The checks are done in the view's body)
# 1)those belonging to the specific language team (coordinators or members)
# 2)project maintainers
# 3)global submitters (perms given through access control tab)
# 4)superusers
# CAUTION!!! WE RETURN 404 instead of 403 for security reasons
@login_required
def push_translation(request, project_slug, lang_code, *args, **kwargs):
    """
    Client pushes an id and a translation string.

    Id is considered to be of the source translation string and the string is
    in the target_lang.

    FIXME: Document in detail the form of the 'strings' POST variable.
    """

    logger.debug("POST data when saving translation: %s" % request.POST)
    # Permissions handling
    # Project should always be available
    project = get_object_or_404(Project, slug=project_slug)
    team = Team.objects.get_or_none(project, lang_code)
    check = ProjectPermission(request.user)
    if not check.submit_translations(team or project) and not\
        check.maintain(project):
        return permission_denied(request)

    if not request.POST:
        return HttpResponseBadRequest()

    data = simplejson.loads(request.raw_post_data)
    strings = data["strings"]

    try:
        target_language = Language.objects.by_code_or_alias(lang_code)
    except Language.DoesNotExist:
        raise Http404

    # This dictionary will hold the results of the save operation and will map
    # status code for each translation pushed, to indicate the result on each
    # translation push separately.
    push_response_dict = {}

    # Form the strings dictionary, get as Json object
    # The fields are the following:
    # id-> source_entity id
    # translations-> translation strings (includes all plurals)
    # context-> source_entity context
    # occurrence-> occurrence (not yet well supported)
    # Iterate through all the row data that have been sent.
    for row in strings:
        source_id = int(row['id'])
        try:
            source_string = Translation.objects.select_related(depth=1).get(
                id=source_id
            )
        except Translation.DoesNotExist:
            # TODO: Log or inform here
            push_response_dict[source_id] = { 'status':400,
                 'message':_("Source string cannot be identified in the DB")}
            # If the source_string cannot be identified in the DB then go to next
            # translation pair.
            continue

        if not source_string.resource.accept_translations:
            push_response_dict[source_id] = { 'status':400,
                 'message':_("The resource of this source string is not "
                    "accepting translations.") }

        # If the translated source string is pluralized check that all the
        # source language supported rules have been filled in, else return error
        # and donot save the translations.
        if source_string.source_entity.pluralized:
            error_flag = False
            for rule in target_language.get_pluralrules():
                if rule in row['translations'] and row['translations'][rule] != "":
                    continue
                else:
                    error_flag = True
            if error_flag:
                error_flag = False
                # Check also if all of them are "". If yes, delete all the plurals!
                for rule in target_language.get_pluralrules():
                    if rule in row['translations'] and row['translations'][rule] == "":
                        continue
                    else:
                        error_flag = True
            if error_flag:
                push_response_dict[source_id] = { 'status':400,
                    'message':(_("Cannot save unless plural translations are either "
                               "completely specified or entirely empty!"))}
                # Skip the save as we hit on an error.
                continue
        try:
            msgs = _save_translation(
                source_string, row['translations'],
                target_language, request.user
            )
            if not msgs:
                push_response_dict[source_id] = {'status': 200}
            else:
                push_response_dict[source_id] = {
                    'status': 200, 'message': msgs[-1]
                }
        except LotteBadRequestError, e:
            push_response_dict[source_id] = {
                'status': 400, 'message': e.message
            }
        except Exception, e:
            logger.error(
                "Unexpected exception raised: %s" % e.message, exc_info=True
            )
            push_response_dict[source_id] = {
                'status': 400, 'message': e.message
            }

    json_dict = simplejson.dumps(push_response_dict)
    return HttpResponse(json_dict, mimetype='application/json')


@transaction.commit_on_success
def _save_translation(source_string, translations, target_language, user):
    """Save a translation string to the database.

    This functions handle a signle source entity translation
    (could be pluralized).

    Currently, the function only returns warning strings.
    There is no message for success.

    Args:
        source_string: A Translation object of the string in the source
            language.
        translations: A (rule, string) tuple.
        target_language: The language the string is translated to.
        user: The translator.
    Returns:
        A list if strings to display to the user.
    Raises:
        An LotteBadRequestError exception in case of errors.
    """
    source_id = source_string.pk
    resource = source_string.resource
    source_language = resource.source_language
    warnings = []

    check = ProjectPermission(user)
    review_perm = check.proofread(resource.project, target_language)

    for rule, target_string in translations.items():
        rule = target_language.get_rule_num_from_name(rule)
        if rule != 5:
            # fetch correct source string for plural rule
            try:
                source_string = Translation.objects.get(
                    source_entity=source_string.source_entity,
                    language=source_language, rule=rule
                )
            except Translation.DoesNotExist:
                # target language has extra plural forms
                pass

        # check for errors
        try:
            for ErrorValidator in create_error_validators(resource.i18n_method):
                v = ErrorValidator(source_language, target_language, rule)
                v(source_string.string, target_string)
        except ValidationError, e:
            raise LotteBadRequestError(e.message)
        # check for warnings
        for WarningValidator in create_warning_validators(resource.i18n_method):
            v = WarningValidator(source_language, target_language, rule)
            try:
                v(source_string.string, target_string)
            except ValidationError, e:
                warnings.append(e.message)
        try:
            # TODO: Implement get based on context and/or on context too!
            translation_string = Translation.objects.get(
                source_entity=source_string.source_entity,
                language=target_language, rule=rule
            )

            if translation_string.reviewed:
                if not review_perm:
                    raise LotteBadRequestError(
                        _('You are not allowed to edit a reviewed string.')
                    )

            # FIXME: Maybe we don't want to permit anyone to delete!!!
            # If an empty string has been issued then we delete the translation.
            if target_string == "":
                translation_string.delete()
            else:
                translation_string.string = target_string
                translation_string.user = user
                translation_string.save()

            _add_copyright(source_string, target_language, user)
            invalidate_stats_cache(resource, target_language, user=user)
        except Translation.DoesNotExist:
            # Only create new if the translation string sent, is not empty!
            if target_string != "":
                Translation.objects.create(
                    source_entity=source_string.source_entity, user=user,
                    language=target_language, rule=rule, string=target_string,
                    resource=resource
                )
                _add_copyright(source_string, target_language, user)
                invalidate_stats_cache(resource, target_language, user=user)
            else:
                # In cases of pluralized translations, sometimes only one
                # translation will exist and the rest plural forms will be
                # empty. If the user wants to delete all of them, we need
                # to let by the ones that don't already have a translation.
                if not source_string.source_entity.pluralized:
                    raise LotteBadRequestError(
                        _("The translation string is empty")
                    )
        except LotteBadRequestError, e:
            logger.debug("%s" % e, exc_info=True)
            raise
        # catch-all. if we don't save we _MUST_ inform the user
        except Exception, e:
            msg = _(
                "Error occurred while trying to save translation: %s" % unicode(e)
            )
            logger.error(msg, exc_info=True)
            raise LotteBadRequestError(msg)
    return warnings


def _add_copyright(source_string, target_language, user):
    from transifex.addons.copyright.handlers import lotte_copyrights
    lotte_save_translation.connect(lotte_copyrights)
    lotte_save_translation.send(
        None, resource=source_string.resource,
        language=target_language, user=user
    )


# Restrict access only for private projects since this is used to fetch stuff
# Allow even anonymous access on public projects
def tab_details_snippet(request, entity_id, lang_code):
    """Return a template snippet with entity & translation details."""

    source_entity = get_object_or_404(SourceEntity, pk=entity_id)

    check = ProjectPermission(request.user)
    if not check.private(source_entity.resource.project):
        return permission_denied(request)

    language = get_object_or_404(Language, code=lang_code)
    translation = source_entity.get_translation(language.code)

    return list_detail.object_detail(request,
        queryset=SourceEntity.objects.all(),
        object_id=entity_id,
        template_name="tab_details_snippet.html",
        template_object_name='source_entity',
        extra_context={"translation": translation,
            "project": source_entity.resource.project})


# Restrict access only for private projects since this is used to fetch stuff
# Allow even anonymous access on public projects
def tab_suggestions_snippet(request, entity_id, lang_code):
    """Return a template snippet with entity & translation details."""

    source_entity = get_object_or_404(SourceEntity, pk=entity_id)

    check = ProjectPermission(request.user)
    if not check.private(source_entity.resource.project):
        return permission_denied(request)

    current_translation = source_entity.get_translation(lang_code)

    return render_to_response("tab_suggestions_snippet.html", {
        'source_entity': source_entity,
        'lang_code': lang_code,
        'current_translation': current_translation
        },
    context_instance = RequestContext(request))


# Restrict access only to :
# 1)project maintainers
# 2)superusers
@one_perm_required_or_403(pr_resource_translations_delete,
                          (Project, "slug__exact", "project_slug"))
def delete_translation(request, project_slug=None, resource_slug=None,
                        lang_code=None):
    """
    Delete a list of translations according to the post request.
    """

    if not request.POST:
        return HttpResponseBadRequest()

    project = get_object_or_404(Project, slug=project_slug)

    resource = get_object_or_404(Resource, slug=resource_slug, project=project)
    language = get_object_or_404(Language, code=lang_code)
    data = simplejson.loads(request.raw_post_data)
    to_delete = data["to_delete"]
    ids = []
    # Ensure that there are no empty '' ids
    for se_id in to_delete:
        if se_id:
            ids.append(se_id)


    try:
        translations = Translation.objects.filter(source_entity__pk__in=ids,
                                   language=language)

        translations.delete()
#        request.user.message_set.create(
#            message=_("Translations deleted successfully!"))
    except:
#        request.user.message_set.create(
#            message=_("Failed to delete translations due to some error!"))
        raise Http404

    invalidate_stats_cache(resource, language, user=request.user)

    return HttpResponse(status=200)

def spellcheck(request, project_slug, lang_code, resource_slug=None):
    """
    Shows mispelled words along with suggestions
    """
    data = simplejson.loads(request.raw_post_data)
    lang_code = lang_code.encode('utf-8')
    string = escape(data["text"])
    string_ = string
    string = string.encode('utf-8')
    lang_codes = SPELLCHECK_SUPPORTED_LANGS
    if lang_code in lang_codes:
        xmlData = '''<?xml version="1.0" encoding="UTF-8" ?>
                        <spellrequest textalreadyclipped="0" ignoredups="1" ignoredigits="1" ignoreallcaps="1" suggestedlang="%s">
                            <text>%s</text>
                        </spellrequest>'''%(lang_code, string)
        headers = {"Content-type": "text/xml; charset=utf-8",
                   "Request-number":"1",
                   "Document-type":"Request",
                   "Connection":"close"}
        con = httplib.HTTPSConnection('www.google.com')
        con.request('POST', '/tbproxy/spell?lang=%s'%(lang_code), xmlData, headers)
        response = con.getresponse().read().decode('utf-8')
        pattern = re.compile(r'<c o="(?P<o>\d*)" l="(?P<l>\d*)" s="\d*">(?P<suggestions>[^<]*)<\/c>', re.UNICODE)
        matches = pattern.findall(response)
        d = []
        for i in matches:
            o = int(i[0])
            l = int(i[1])
            suggestions = i[2].split('\t')
            word_with_ws = string_[o:o+l]
            word = word_with_ws.strip()
            if len(word) < len(word_with_ws):
                start, end = re.search(re.escape(word), word_with_ws).span()
                l = end - start + 1
                o = o + start
            d.append([(o, l), word, suggestions])
    else:
        d = []
    d.sort()
    json_dict = simplejson.dumps(d, 'utf-8')
    return HttpResponse(json_dict, mimetype='application/json')



@login_required
def add_edit_developer_comment_extra(request, project_slug, *args, **kwargs):
    """
    View for handling AJAX calls from Lotte in order to add/edit the
    developer comment for a source entity.

    Only maintainers can edit it.
    """

    # Permissions handling
    project = get_object_or_404(Project, slug=project_slug)
    check = ProjectPermission(request.user)
    if not check.maintain(project):
        content = {'error': True, 'message': _('Permission error.')}
    elif not request.POST:
        content = {'error': True, 'message': _('Bad request.')}
    else:
        previous_comment = None
        try:
            se = SourceEntity.objects.get(
                id=request.POST.get('source_entity_id', None),
                resource__project=project)
            previous_comment_extra = se.developer_comment_extra
            se.developer_comment_extra = request.POST.get('comment_extra', '')
            se.save()
            content = {
                'error': False,
                'comment': se.developer_comment,
                'comment_extra': se.developer_comment_extra,
                }
        except SourceEntity.DoesNotExist:
            content = {
                'error': True,
                'message': _('No such Source Entity for the given project.'),
                }
        except Exception, e:
            logger.error('Lotte: Error while editing developer comment: %s' %
                (e.message or str(e)))
            content = {
                'error': True,
                'message': _('Ops! Something weird happened. The admins '
                    'were notified about it.'),
                }

    return HttpResponse(simplejson.dumps(content), mimetype='application/json')

########NEW FILE########
__FILENAME__ = handlers
# -*- coding: utf-8 -*-
from django.db.models.signals import post_save
from django.utils.translation import ugettext as _
from models import ResourcePriority
from transifex.resources.models import Resource
from transifex.txcommon.log import logger


def priority_creation(**kwargs):
    """Create the default priority on Resource creation."""
    if 'created' in kwargs and kwargs['created'] is True:
        resource = kwargs['instance']
        if resource:
            ResourcePriority.objects.create(resource=resource)
            logger.debug("Resource %s: New ResourcePriority created." % (
                         resource.name))


def connect():
    """Django-addons method to connect handlers to specific signals."""

    # Deletion is automatically done (django cascading deletes)
    # On new usersubscription creation.
    post_save.connect(priority_creation, sender=Resource)


########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    depends_on = (
        ("resources", "0001_initial"),
    )

    def forwards(self, orm):

        # Adding model 'ResourcePriority'
        db.create_table('priorities_resourcepriority', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('resource', self.gf('django.db.models.fields.related.OneToOneField')(related_name='priority', unique=True, to=orm['resources.Resource'])),
            ('level', self.gf('django.db.models.fields.CharField')(default='0', max_length=1)),
        ))
        db.send_create_signal('priorities', ['ResourcePriority'])


    def backwards(self, orm):

        # Deleting model 'ResourcePriority'
        db.delete_table('priorities_resourcepriority')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'priorities.resourcepriority': {
            'Meta': {'object_name': 'ResourcePriority'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.CharField', [], {'default': "'0'", 'max_length': '1'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'priority'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['priorities']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-
from django.db import models
from django.utils.translation import ugettext_lazy as _

from transifex.resources.models import Resource

PRIORITY_LEVELS = (
    ('0', _('Normal')),
    ('1', _('High')),
    ('2', _('Urgent')),
)


class ResourcePriority(models.Model):
    """
    A priority level associated with one Resource item.
    """
    resource = models.OneToOneField(Resource, related_name='priority',
        help_text=_("The resource associated with this priority."))
    level = models.CharField(_('Priority Levels'),
        max_length=1, choices=PRIORITY_LEVELS, default='0',
        help_text=_("The priority levels, indicating the importance of "
                    "completing translations for the resource."))

    def __unicode__(self):
        return u'%s' % (self.get_level_display(),)

    def __repr__(self):
        return u'<ResourcePriority: %s>' % (self.get_level_display(),)

    @property
    def display_level(self):
        return self.get_level_display()

    class Meta:
        verbose_name = _('resource priority')
        verbose_name_plural = _('resource priorities')

    def cycle(self):
        """Cycle through the states of the priority object."""
        self.level = str((int(self.level) + 1) % int(len(PRIORITY_LEVELS)))
        self.save()


def level_display(level):
    """Return the display name for the specified level."""
    for lvl, name in PRIORITY_LEVELS:
        if lvl == level:
            return name

########NEW FILE########
__FILENAME__ = priority_images
# -*- coding: utf-8 -*-

from django import template
from django.utils.safestring import mark_safe
from priorities.models import PRIORITY_LEVELS


register = template.Library()

@register.filter
def priority_image_path(level):
    """Return the path to the appropriate image for the specified level."""
    if level not in map(lambda e: e[0], PRIORITY_LEVELS):
        level = 0
    return mark_safe("priorities/images/%s.png" % level)

########NEW FILE########
__FILENAME__ = tests
from django.core.urlresolvers import reverse
from transifex.txcommon.tests.base import BaseTestCase


class PrioritiesModelTests(BaseTestCase):
    """Testcase which includes all the tests referring to models interaction."""

    def setUp(self):
        super(PrioritiesModelTests, self).setUp()

    def tearDown(self):
        super(PrioritiesModelTests, self).tearDown()

    def test_priority_creation(self):
        """Test priority creation through signal handler."""
        self.assertTrue(self.resource.priority)

    def test_priority_rotation(self):
        """Test priority level cycling."""
        self.resource.priority.cycle()
        self.assertEqual(self.resource.priority.get_level_display(), 'High')
        self.resource.priority.cycle()
        self.assertEqual(self.resource.priority.get_level_display(), 'Urgent')
        self.resource.priority.cycle()
        self.assertEqual(self.resource.priority.get_level_display(), 'Normal')

class PrioritiesViewTests(BaseTestCase):
    """Testcase which includes all the tests referring to models interaction."""

    def setUp(self):
        super(PrioritiesViewTests, self).setUp()
        self.cycle_resource_priority_url = reverse('cycle_resource_priority',
            args=[self.project.slug, self.resource.slug])

    def tearDown(self):
        super(PrioritiesViewTests, self).tearDown()

    def test_priority_cycle_view(self):
        """Test priority cycle view."""
        self.assertTrue(self.resource.priority)
        # Test the response contents
        resp = self.client['maintainer'].get(self.cycle_resource_priority_url)
        self.assertContains(resp, 'High', status_code=200)
        self.assertTemplateUsed(resp, 'resource_priority_snippet.html')

        resp = self.client['anonymous'].get(self.cycle_resource_priority_url)
        self.assertEqual(resp.status_code, 403)

        resp = self.client['registered'].get(self.cycle_resource_priority_url)
        self.assertEqual(resp.status_code, 403)

        resp = self.client['team_member'].get(self.cycle_resource_priority_url)
        self.assertEqual(resp.status_code, 403)

########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from priorities.views import *
from transifex.resources.urls import RESOURCE_URL

urlpatterns = patterns('',
    # Resource-specific Lotte
    url(RESOURCE_URL+'cycle_priority/$', cycle_resource_priority,
        name='cycle_resource_priority'),
)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext

from django.utils.translation import ugettext as _

from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.projects.models import Project
from transifex.projects.permissions import pr_resource_priority
from transifex.resources.models import Resource

# Allow only maintainers to cycle priority
@one_perm_required_or_403(pr_resource_priority,
                          (Project, "slug__exact", "project_slug"))
def cycle_resource_priority(request, project_slug, resource_slug,*args, **kwargs):
    """Return a template snippet with the new priority image."""

    resource = get_object_or_404(Resource, project__slug=project_slug,
                                 slug=resource_slug)

    resource.priority.cycle()

    return render_to_response("resource_priority_snippet.html",
        { 'priority': resource.priority },
        context_instance = RequestContext(request))

########NEW FILE########
__FILENAME__ = formats
# -*- coding: utf-8 -*-
"""Module for handling suggestions in resources."""

from django.conf import settings
from suggestions.models import Suggestion
from transifex.txcommon.log import logger
from transifex.resources.models import Translation, SourceEntity
from transifex.resources.formats.utils.string_utils import percent_diff


class SuggestionFormat(object):
    """Base class for suggestion formats."""

    def __init__(self, resource, language, user):
        self.resource = resource
        self.language = language
        self.user = user


    def _convert_to_suggestions(self, source, dest, user=None, langs=None):
        """This function takes all translations that belong to source and
        adds them as suggestion to dest. Both source and dest are
        SourceEntity objects.

        The langs can contain a list of all languages for which the conversion
        will take place. Defaults to all available languages.
        """
        if langs:
            translations = Translation.objects.filter(source_entity=source,
                language__in=langs, rule=5)
        else:
            translations = Translation.objects.filter(source_entity=source, rule=5)

        for t in translations:
            # Skip source language translations
            if t.language == dest.resource.source_language:
                continue

            tr, created = Suggestion.objects.get_or_create(
                string = t.string,
                source_entity = dest,
                language = t.language
            )

            # If the suggestion was created and we have a user assign him as the
            # one who made the suggestion
            if created and user:
                tr.user = user
                tr.save()
        return

    def create_suggestions(self, original, new):
        """Create new suggestions.

        Find similar strings in original and new lists.

        Args:
            original: Original set of resources.
            new: Set of new resources.
        """
        raise NotImplementedError

    def add_from_strings(self, strings):
        """Add the strings as suggestions.

        Args:
            strings: An iterable of strings to add as suggestions
        """
        for j in strings:
            # Check SE existence
            try:
                se = SourceEntity.objects.get(
                    string = j.source_entity, context = j.context or "None",
                    resource = self.resource
                )
            except SourceEntity.DoesNotExist:
                logger.warning(
                    "Source entity %s does not exist" % j.source_entity
                )
                continue
            Suggestion.objects.get_or_create(
                string = j.translation, source_entity = se,
                language = self.language
            )


class KeySuggestionFormat(SuggestionFormat):
    """Class for formats the suggestions for which are based on
    similarities of keys.
    """
    pass


class ContentSuggestionFormat(SuggestionFormat):
    """Class for formats the suggestions of which are based on similarities
    of the content.
    """

    def create_suggestions(self, original, new):
        iterations = len(original)*len(new)
        # If it's not over the limit, then do it
        if iterations < settings.MAX_STRING_ITERATIONS:
            for se in original:
                for ne in new:
                    try:
                        old_trans = Translation.objects.get(source_entity=se,
                            language=se.resource.source_language, rule=5)
                        new_trans = Translation.objects.get(source_entity=ne,
                            language=se.resource.source_language, rule=5)
                    except Translation.DoesNotExist:
                        # Source language translation should always exist
                        # but just in case...
                        continue
                    # find Levenshtein distance
                    if percent_diff(old_trans.string, new_trans.string) < settings.MAX_STRING_DISTANCE:
                        self._convert_to_suggestions(se, ne, self.user)
                        break

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    depends_on = (
        ("resources", "0001_initial"),
        ("languages", "0001_initial"),
    )

    def forwards(self, orm):

        # Adding model 'Suggestion'
        db.create_table('suggestions_suggestion', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('string', self.gf('django.db.models.fields.TextField')()),
            ('string_hash', self.gf('django.db.models.fields.CharField')(max_length=32)),
            ('score', self.gf('django.db.models.fields.FloatField')(default=0, blank=True)),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_update', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('source_entity', self.gf('django.db.models.fields.related.ForeignKey')(related_name='suggestions', to=orm['resources.SourceEntity'])),
            ('language', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['languages.Language'], null=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], null=True)),
            ('_order', self.gf('django.db.models.fields.IntegerField')(default=0)),
        ))
        db.send_create_signal('suggestions', ['Suggestion'])

        # Adding unique constraint on 'Suggestion', fields ['source_entity', 'language', 'string_hash']
        db.create_unique('suggestions_suggestion', ['source_entity_id', 'language_id', 'string_hash'])

        # Adding model 'Vote'
        db.create_table('suggestions_vote', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('suggestion', self.gf('django.db.models.fields.related.ForeignKey')(related_name='votes', to=orm['suggestions.Suggestion'])),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(related_name='votes', to=orm['auth.User'])),
            ('vote_type', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_update', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
        ))
        db.send_create_signal('suggestions', ['Vote'])

        # Adding unique constraint on 'Vote', fields ['suggestion', 'user']
        db.create_unique('suggestions_vote', ['suggestion_id', 'user_id'])


    def backwards(self, orm):

        # Removing unique constraint on 'Vote', fields ['suggestion', 'user']
        db.delete_unique('suggestions_vote', ['suggestion_id', 'user_id'])

        # Removing unique constraint on 'Suggestion', fields ['source_entity', 'language', 'string_hash']
        db.delete_unique('suggestions_suggestion', ['source_entity_id', 'language_id', 'string_hash'])

        # Deleting model 'Suggestion'
        db.delete_table('suggestions_suggestion')

        # Deleting model 'Vote'
        db.delete_table('suggestions_vote')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        },
        'suggestions.suggestion': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'string_hash'),)", 'object_name': 'Suggestion'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suggestions'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
        },
        'suggestions.vote': {
            'Meta': {'unique_together': "(('suggestion', 'user'),)", 'object_name': 'Vote'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'suggestion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'votes'", 'to': "orm['suggestions.Suggestion']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'votes'", 'to': "orm['auth.User']"}),
            'vote_type': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        }
    }

    complete_apps = ['suggestions']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-

from hashlib import md5
from django.contrib.auth.models import User
from django.db import models
from django.utils.translation import ugettext_lazy as _

from transifex.languages.models import Language
from transifex.resources.models import Resource, SourceEntity


class Suggestion(models.Model):
    """
    The representation of a suggestion for a translation on a source string.

    More or less it is a duplication of the Translation model with a different
    way to determine the unique instances.
    """

    string = models.TextField(_('String'), blank=False, null=False,
        help_text=_("The actual string content of suggestion."))
    string_hash = models.CharField(_('String Hash'), blank=False, null=False,
        max_length=32, editable=False,
        help_text=_("The hash of the suggestion string used for indexing"))
    score = models.FloatField(_('Score Value'), default=0, blank=True,
        help_text=_("A value which indicates the relevance of this suggestion"
                    " to the translation of the source string."))

    # Timestamps
    created = models.DateTimeField(auto_now_add=True, editable=False)
    last_update = models.DateTimeField(auto_now=True, editable=False)

    # Foreign Keys
    source_entity = models.ForeignKey(SourceEntity,
        verbose_name=_('Source Entity'), blank=False, null=False,
        related_name='suggestions',
        help_text=_("The source entity this suggestion instance"
                    " translates or affects."))

    language = models.ForeignKey(Language,
        verbose_name=_('Target Language'), blank=False, null=True,
        help_text=_("The language in which this translation string is written."))

    user = models.ForeignKey(User,
        verbose_name=_('User'), blank=False, null=True,
        help_text=_("The user who committed the specific suggestion."))

    def __unicode__(self):
        return self.string

    class Meta:
        unique_together = ('source_entity', 'language', 'string_hash',)
        verbose_name = _('suggestion')
        verbose_name_plural = _('suggestions')
        ordering  = ('-score',)
        order_with_respect_to = 'source_entity'
        get_latest_by = "created"

    def vote_up(self, user):
        try:
            existing_vote = self.votes.get(user=user)
            if existing_vote.vote_type == False:
                existing_vote.delete()
                self.score += 1
                self.save()
        except Vote.DoesNotExist:
            vote = self.votes.create(user=user, vote_type=True)
            self.score += 1
            self.save()


    def vote_down(self, user):
        try:
            existing_vote = self.votes.get(user=user)
            if existing_vote.vote_type == True:
                existing_vote.delete()
                self.score -= 1
                self.save()
        except Vote.DoesNotExist:
            vote = self.votes.create(user=user, vote_type=False)
            self.score -= 1
            self.save()


    def get_vote_or_none(self, user):
        try:
            self.votes.get(user=user)
        except Vote.DoesNotExist:
            return None

    @property
    def score_rounded(self):
        """Return a nice, rounded (integer) version of the score."""
        return int(self.score)

    def save(self, *args, **kwargs):
        # Encoding happens to support unicode characters
        self.string_hash = md5(self.string.encode('utf-8')).hexdigest()
        super(Suggestion, self).save(*args, **kwargs)


class Vote(models.Model):
    """
    A user vote for a suggestion.
    """
    suggestion = models.ForeignKey(Suggestion,
        verbose_name=_('Suggestion'), blank=False, null=False,
        related_name='votes',
        help_text=_("The suggestion about which the user is voting."))
    user = models.ForeignKey(User,
        verbose_name=_('User'), blank=False, null=False,
        related_name='votes',
        help_text=_("The user who voted for the specific suggestion."))

     # False = -1, True = +1
    vote_type = models.BooleanField()

    # Timestamps
    created = models.DateTimeField(auto_now_add=True, editable=False)
    last_update = models.DateTimeField(auto_now=True, editable=False)

    class Meta:
        unique_together = (('suggestion', 'user'))
        verbose_name = _('vote')
        verbose_name_plural = _('votes')


########NEW FILE########
__FILENAME__ = suggestions_tags
# -*- coding: utf-8 -*-
from django import template
from django.db.models import get_model

from transifex.txcommon.templatetags.txcommontags import ResolverNode

Suggestion = get_model('suggestions', 'Suggestion')

register = template.Library()

class SuggestionsNode(ResolverNode):

    @classmethod
    def handle_token(cls, parser, token, name):
        bits = token.contents.split()
        tag_name = bits[0]
        kwargs = {
            'source_entity_id': cls.next_bit_for(bits, tag_name),
            'lang_code': cls.next_bit_for(bits, 'for'),
            'var_name': cls.next_bit_for(bits, 'as', name),
        }
        return cls(**kwargs)

    def __init__(self, source_entity_id, lang_code, var_name):
        self.source_entity_id = source_entity_id
        self.lang_code = lang_code
        self.var_name = var_name

    def render(self, context):
        # Get values from context
        source_entity_id = self.resolve(self.source_entity_id, context)
        lang_code = self.resolve(self.lang_code, context)
        
        # Do what's needed to be done
        suggestions = Suggestion.objects.filter(
            source_entity__id=source_entity_id,
            language__code=lang_code).order_by('-score')

        # Put the result into the context
        context[self.var_name] = suggestions
        return ''

@register.tag
def get_suggestions(parser, token):
    """
    Retrieves all suggestions associated with the given source_entity_id and
    lang_code and assigns the result to a context variable.
    
    Syntax::

        {% get_suggestions source_entity_id for lang_code %}
        {% for s in suggestions %}
            {{ s }}
        {% endfor %}

        {% get_suggestions source_entity_id for lang_code as my_suggestions %}
        
    """
    return SuggestionsNode.handle_token(parser, token, name='suggestions')
########NEW FILE########
__FILENAME__ = tests
from django.db import IntegrityError
from django.core.urlresolvers import reverse
from django.utils import simplejson as json
from transifex.txcommon.tests.base import BaseTestCase



class SuggestionsViewsTests(BaseTestCase):

    def setUp(self):
        super(SuggestionsViewsTests, self).setUp()
        self.entity = self.resource.entities[0]
        self.URL_PREFIX = '/entities/%s/lang/%s/' % (self.entity.id,
                                                     self.language.code)
    def testAnonymousPagesStatusCode(self):
        #TODO: Why is the following 302 instead of 200?
        pages = {302: [(self.URL_PREFIX + 'snippet'),],
                 #400: [(self.URL_PREFIX + 'create'),
                 #      (self.URL_PREFIX + '1/vote-up/')],
                 404: [(self.URL_PREFIX + '2/vote-up/'),]}
        self.assert_url_statuses(pages, self.client["anonymous"])

    #def testMemberPagesStatusCode(self):
    #    raise NotImplementedError

    def _create_entity_suggestion(self):
        url = reverse('suggestion_create',
            args=[self.entity.id, self.language.code],)
        post_vars = {'suggestion_string': 'Hey!'}
        resp = self.client['team_member'].post(url, data=post_vars)
        self.assertEqual(resp.status_code, 200)
        suggestion = self.entity.suggestions.filter(language=self.language).latest()
        return suggestion

    def test_create_entitysuggestion(self):
        suggestion = self._create_entity_suggestion()
        self.assertTrue(suggestion.string == 'Hey!')

    def test_get_snippet(self):
        # Create a suggestion:
        suggestion = self._create_entity_suggestion()
        url = reverse('tab_suggestions_snippet',
            args=[self.entity.id, self.language.code])
        resp = self.client['anonymous'].get(url)
        self.assertContains(resp, 'Hey!', status_code=200)
        self.assertTemplateUsed(resp, 'tab_suggestions_snippet.html')

    def _vote_up(self, suggestion):
        url = reverse('suggestion_vote_up',
            args=[self.entity.id, self.language.code, suggestion.id],)
        resp = self.client['team_member'].post(url)
        self.assertEqual(resp.status_code, 200)
        return resp

    def _vote_down(self, suggestion):
        url = reverse('suggestion_vote_down',
            args=[self.entity.id, self.language.code, suggestion.id],)
        resp = self.client['team_member'].post(url)
        self.assertEqual(resp.status_code, 200)
        return resp

    def test_votes(self):
        latest_sug = self.entity.suggestions.filter(language=self.language).latest
        self._create_entity_suggestion()
        s = latest_sug()
        self.assertEqual(s.score_rounded, 0)
        self._vote_up(s)
        s = latest_sug()
        self.assertEqual(s.score_rounded, 1)
        self._vote_up(s)
        s = latest_sug()
        self.assertEqual(s.score_rounded, 1)
        self._vote_down(s)
        s = latest_sug()
        self.assertEqual(s.score_rounded, 0)
        self._vote_down(s)
        s = latest_sug()
        self.assertEqual(s.score_rounded, -1)
        self._vote_down(s)
        s = latest_sug()
        self.assertEqual(s.score_rounded, -1)
        self._vote_up(s)
        s = latest_sug()
        self.assertEqual(s.score_rounded, 0)


    #def test_private_project(self):
    #    """Test access to various methods if the project is private."""
    #    raise NotImplementedError



class SuggestionsModelsTests(BaseTestCase):

    def setUp(self):
        super(SuggestionsModelsTests, self).setUp()
        self.entity = self.resource.entities[0]
        self.suggestion = self.entity.suggestions.create(
            language=self.language, string="Hey!", user=self.user["registered"])

    def test_votes(self):
        u = self.user["registered"]
        s = self.suggestion
        self.assertEqual(s.score_rounded, 0)
        s.vote_up(u)
        self.assertEqual(s.score_rounded, 1)
        s.vote_up(u)
        self.assertEqual(s.score_rounded, 1)
        s.vote_down(u)
        self.assertEqual(s.score_rounded, 0)
        s.vote_down(u)
        self.assertEqual(s.score_rounded, -1)
        s.vote_down(u)
        self.assertEqual(s.score_rounded, -1)
        s.vote_up(u)
        self.assertEqual(s.score_rounded, 0)

    def _create_suggestion(self):
        suggestion = self.entity.suggestions.create(
            language=self.language, string="Hey!", user=self.user["registered"])

    def test_double_suggestion(self):
        self.assertRaises(IntegrityError, self._create_suggestion)



########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from views import *

from transifex.resources.urls import RESOURCE_LANG_URL

#FIXME: Move this to resource if we agree.
ENTITY_URL = '^entities/(?P<entity_id>\d+)/'
SUGGESTIONS_URL = ENTITY_URL + 'lang/(?P<lang_code>[\-_@\w\.]+)/suggestions/'

urlpatterns = patterns('',
    url(SUGGESTIONS_URL+'create/$',
        suggestion_create, name='suggestion_create'),
    url(SUGGESTIONS_URL+'(?P<suggestion_id>\d+)/vote/1/$',
        suggestion_vote, {'direction': 'up'},
        name='suggestion_vote_up',),
    url(SUGGESTIONS_URL+'(?P<suggestion_id>\d+)/vote/-1/$',
        suggestion_vote, {'direction': 'down'},
        name='suggestion_vote_down',),
)


########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.http import (HttpResponse, HttpResponseBadRequest)
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils.translation import ugettext as _

from authority.views import permission_denied

from transifex.languages.models import Language
from transifex.projects.permissions.project import ProjectPermission
from transifex.resources.models import SourceEntity

from models import Suggestion

#FIXME: Get this into Piston instead, as part of the normal API.
def suggestion_create(request, entity_id, lang_code):
    """Create a suggestion for an entity and a language."""

    source_entity = get_object_or_404(SourceEntity, pk=entity_id)

    # Permissions handling
    check = ProjectPermission(request.user)
    if not check.private(source_entity.resource.project):
        return permission_denied(request)

    #FIXME: All basic POST checks could be done in a decorator.
    if not request.method == "POST":
        return HttpResponseBadRequest(_("POST method only allowed."))
    suggestion_string = request.POST['suggestion_string']
    if not suggestion_string:
        return HttpResponseBadRequest(_("POST variable 'suggestion_string' missing."))

    language = Language.objects.by_code_or_alias(lang_code)
    source_entity.suggestions.create(language=language,
                                     string=request.POST['suggestion_string'],
                                     user=request.user)
    return HttpResponse(status=200)


#FIXME: Get this into Piston instead, as part of the normal API.
def suggestion_vote(request, entity_id, lang_code, suggestion_id, direction):
    
    """Vote up or down for a suggestion."""

    suggestion = get_object_or_404(Suggestion, pk=suggestion_id)

    # Permissions handling
    check = ProjectPermission(request.user)
    if not check.private(suggestion.source_entity.resource.project):
        return permission_denied(request)

    #FIXME: All basic POST checks could be done in a decorator.
    if not request.method == "POST":
        return HttpResponseBadRequest(_("POST method only allowed."))

    if direction == 'up':
        suggestion.vote_up(request.user)
    elif direction == 'down':
        suggestion.vote_down(request.user)

    return HttpResponse(status=200)

########NEW FILE########
__FILENAME__ = filters
import django_filters
from actionlog.models import LogEntry

class LogEntryFilter(django_filters.FilterSet):
    action_time = django_filters.DateRangeFilter()
    class Meta:
        model = LogEntry
        fields = ['action_type','action_time']

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = tests
# -*- coding: utf-8 -*-
from django.core.urlresolvers import reverse
from django.test.client import Client
from transifex.projects.models import Project
from transifex.txcommon.tests.base import BaseTestCase

class TestTimeline(BaseTestCase):

    def setUp(self):
        super(TestTimeline, self).setUp()

        # Sanity checks
        self.assertTrue(Project.objects.count() >= 1,
            msg="Base test case didn't create any projects"
        )

        self.url_user_timeline = reverse('user_timeline')
        self.url_user_profile = reverse('userena_profile_detail',
            args=[self.user['registered'].username])

        self.url_project_timeline = reverse('project_timeline',
            args=[self.project.slug])
        self.url_private_project_timeline = reverse('project_timeline',
            args=[self.project_private.slug])
        self.url_project_edit = reverse('project_edit',
            args=[self.project.slug])

    def test_regular(self):
        """Test regular registered user."""

        # Check user timeline page as regular user
        resp = self.client['registered'].get(self.url_user_timeline)
        self.assertEqual(resp.status_code, 200)
        self.assertTrue("Timeline" in resp.content)
        a = ("The query returned " in resp.content)
        b = ("None available" in resp.content)
        self.assertTrue( a or b)

        # Check project timeline page as regular user
        resp = self.client['registered'].get(self.url_project_timeline)
        self.assertEqual(resp.status_code, 200)

        # Check private project timeline page as regular user
        resp = self.client['registered'].get(self.url_private_project_timeline)
        self.assertEqual(resp.status_code, 403)

        # Anonymous should require a login
        resp = self.client['anonymous'].get(self.url_project_timeline, follow=True)
        #FIXME
        #self.assertTemplateUsed(resp, 'userena/signin_form.html')
        self.assertContains(resp, 'input type="submit" class="i16 tick '\
                'buttonized" value="Sign in"', status_code=200)

        # Check whether link to user timeline is injected to profile page
        # Comment out since user timeline is not visible in the user profile
        # resp = self.client['registered'].get(self.url_user_profile)
        # self.assertEqual(resp.status_code, 200)
        # self.assertTrue("My Timeline" in resp.content)

    def test_maint(self):
        """Test maintainer."""

        # Check user timeline page as regular user
        resp = self.client['registered'].get(self.url_user_timeline)
        self.assertEqual(resp.status_code, 200)

        # Check project timeline as maintainer
        resp = self.client['maintainer'].get(self.url_project_timeline)
        self.assertEqual(resp.status_code, 200)

        # Fetch project edit page and check that timeline is there
        resp = self.client['maintainer'].get(self.url_project_edit)
        self.assertEqual(resp.status_code, 200)
        self.assertTrue(self.url_project_timeline in resp.content)

########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-

from django.conf.urls.defaults import *
from transifex.projects.models import Project
from views import user_timeline, project_timeline

from transifex.projects.urls import PROJECT_URL

urlpatterns = patterns('',
    url(
        regex = r'^accounts/timeline/$',
        view = user_timeline,
        name='user_timeline'),

    url(
        regex = PROJECT_URL+'timeline/$',
        view = project_timeline,
        name = 'project_timeline',
        kwargs = {'queryset': Project.objects.all(),
                  'template_object_name': 'project',
                  'template_name': 'timeline/timeline_project.html',
                  'extra_context': {'project_timeline': True},},),

)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.views.generic import list_detail
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.projects.models import Project
from transifex.projects.permissions import pr_project_add_change,\
        pr_project_private_perm
from actionlog.models import LogEntry
from filters import LogEntryFilter


@login_required
def user_timeline(request, *args, **kwargs):
    """
    Present a log of the latest actions of a user.

    The view limits the results and uses filters to allow the user to even
    further refine the set.
    """
    log_entries = LogEntry.objects.by_user(request.user)
    f = LogEntryFilter(request.GET, queryset=log_entries)

    return render_to_response("timeline/timeline_user.html",
        {'f': f,
         'actionlog': f.qs},
        context_instance = RequestContext(request))


@login_required
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=False)
def project_timeline(request, project_slug, *args, **kwargs):
    """
    Present a log of the latest actions on the project.

    The view limits the results and uses filters to allow the user to even
    further refine the set.
    """
    project = get_object_or_404(Project, slug=project_slug)
    log_entries = LogEntry.objects.by_object(project)
    f = LogEntryFilter(request.POST, queryset=log_entries)
    # The template needs both these variables. The first is used in filtering,
    # the second is used for pagination and sorting.
    kwargs.setdefault('extra_context', {}).update(
        {'f': f,
         'actionlog': f.qs.select_related('action_type', 'user')})
    return list_detail.object_detail(request, slug=project_slug, *args, **kwargs)

########NEW FILE########
__FILENAME__ = admin
# -*- coding: utf-8 -*-

from django.contrib import admin
from txapps.models import TxApp


class TxAppAdmin(admin.ModelAdmin):
    pass

admin.site.register(TxApp, TxAppAdmin)

########NEW FILE########
__FILENAME__ = exceptions
# -*- coding: utf-8 -*-

"""
Exceptions used in TxApps.
"""


class RemoteTxAppError(Exception):
    """Exception raised when the remote TxApp returned an error."""

    def __init__(self, status_code, content, *args, **kwargs):
        self.status_code = status_code
        self.content = content

    def __unicode__(self):
        return u"TxApp error: status_code is %s, message is %s" % (
            self.status_code, self.content
        )

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'TxApp'
        db.create_table('txapps_txapp', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=30, db_index=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('description', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('url', self.gf('django.db.models.fields.URLField')(unique=True, max_length=200)),
        ))
        db.send_create_signal('txapps', ['TxApp'])

        # Adding M2M table for field projects on 'TxApp'
        db.create_table('txapps_txapp_projects', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('txapp', models.ForeignKey(orm['txapps.txapp'], null=False)),
            ('project', models.ForeignKey(orm['projects.project'], null=False))
        ))
        db.create_unique('txapps_txapp_projects', ['txapp_id', 'project_id'])


    def backwards(self, orm):
        
        # Deleting model 'TxApp'
        db.delete_table('txapps_txapp')

        # Removing M2M table for field projects on 'TxApp'
        db.delete_table('txapps_txapp_projects')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'txapps.txapp': {
            'Meta': {'object_name': 'TxApp'},
            'description': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'apps'", 'symmetrical': 'False', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'unique': 'True', 'max_length': '200'})
        }
    }

    complete_apps = ['txapps']

########NEW FILE########
__FILENAME__ = 0002_specify_allowed_views
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'TxApp.team_allowed'
        db.add_column('txapps_txapp', 'team_allowed', self.gf('picklefield.fields.PickledObjectField')(null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'TxApp.team_allowed'
        db.delete_column('txapps_txapp', 'team_allowed')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'txapps.txapp': {
            'Meta': {'object_name': 'TxApp'},
            'description': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'apps'", 'blank': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'team_allowed': ('picklefield.fields.PickledObjectField', [], {'null': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'unique': 'True', 'max_length': '200'})
        }
    }

    complete_apps = ['txapps']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-

"""
Models for txapps support.
"""

from django.db import models
from django.utils.translation import ugettext_lazy as _
from picklefield import PickledObjectField
from transifex.txcommon.validators import validate_http_url


class TxAppManager(models.Manager):
    """Manager for the tx apps."""

    def enable_app_for_project(self, txapp, project):
        """Enale an app for a project.

        Args:
            txapp: A TxApp.
            project: A project.
        """
        txapp.projects.add(project)

    def disable_app_for_project(self, txapp, project):
        """Disable an app for a project.

        Args:
            txapp: A TxApp.
            project: A project.
        """
        txapp.projects.remove(project)



class TxApp(models.Model):
    """A tx app."""

    slug = models.SlugField(
        _("Slug"), unique=True, max_length=30, help_text=_(
            "A short label to be used in the URL, containing only "
            "letters, numbers, underscores or hyphens."
        )
    )
    name = models.CharField(
        _("Name"), max_length=50, help_text=_("A short name.")
    )
    description = models.CharField(
        _("Description"), max_length=200,
        help_text=_("A small description for the app.")
    )
    url = models.URLField(
        _("URL"), unique=True, verify_exists=False, validators=[validate_http_url, ],
        help_text=_("The URL where the app is hosted.")
    )
    team_allowed = PickledObjectField(
        _("Allowed URLs"), null=True,
        help_text=_("URLs allowed to be accessed by team members.")
    )

    # foreign keys
    projects = models.ManyToManyField(
        'projects.project', related_name='apps',
        verbose_name=_("Projects"), blank=True,
        help_text=_("The projects that have enabled this app.")
    )

    objects = TxAppManager()

    def __unicode__(self):
        return u"<TxApp %s>" % self.slug

    def save(self, **kwargs):
        """Save the object.

        Make sure the URL does not end with a slash.
        """
        if self.url.endswith('/'):
            self.url = self.url[:-1]
        super(TxApp, self).save(**kwargs)

    def access_is_allowed(self, user, project, path):
        """Return True, if the user is allowed to access the path specified.

        Args:
            user: The user who wants to access the path.
            project: The project accessed.
            path: The path to access.
        Returns:
            Trueo or False.
        """
        # most common cases first
        if user == project.owner:
            return True
        if self.team_allowed is None:
            return False
        if path in self.team_allowed and user in project.team_members:
            return True
        return False

########NEW FILE########
__FILENAME__ = tests
# -*- coding: utf-8 -*-

from __future__ import with_statement
import requests
from mock import patch
from django.test import TestCase
from transifex.txcommon.tests.base import Users, BaseTestCase
from txapps.views import _root_namespace, _remove_namespace_from_path, \
        _add_namespace_to_path, _forward_to_app
from txapps.models import TxApp
from txapps.exceptions import RemoteTxAppError


class TestTxApp(Users, TestCase):
    """Test Transifex's TxApp support."""

    @classmethod
    def setUpClass(cls):
        app_slug = 'test_txapp'
        cls.app = TxApp.objects.create(
            slug=app_slug, name='Test TxApp',
            description='Desc', url='http://127.0.0.1'
        )
        cls.root_path = 'root/path/'
        cls.namespace_path = ''.join([cls.root_path, app_slug])

    @classmethod
    def tearDownClass(cls):
        cls.app.delete()

    def test_finding_root_namespace(self):
        """Test root namespaces."""
        path = '/'.join([self.namespace_path, 'overview'])
        res = _root_namespace(path, self.app)
        self.assertEquals(res, self.namespace_path)

    def test_path_sent_to_txapp(self):
        """Test the extraction of the path sent to TxApp."""
        path_wanted = 'overview/'
        path = '/'.join([self.namespace_path, path_wanted])
        res = _remove_namespace_from_path(self.namespace_path, path)
        self.assertEquals(res, path_wanted)

    def test_adding_namespace_to_path(self):
        """Test the insertion of the namespace path to a path
        returned by a TxApp.
        """
        path_returned = 'token/'
        full_path = '/'.join([self.namespace_path, path_returned])
        self.assertEquals(
            full_path,
            _add_namespace_to_path(self.namespace_path, path_returned)
        )
        path_returned = '/token/'
        full_path = ''.join([self.namespace_path, path_returned])
        self.assertEquals(
            full_path,
            _add_namespace_to_path(self.namespace_path, path_returned)
        )

    def test_forward_request_to_app(self):
        """Test forwarding a request to TxApp."""
        class Response(object):
            def __init__(self, ok, content, status_code):
                self.ok = ok
                self.content = content
                self.status_code = status_code

        with patch('requests.post') as mock:
            mock.return_value = Response(True, '"OK"', 200)
            res = _forward_to_app(self.app.url, 'POST')
            self.assertEquals(res, "OK")

        with patch('requests.post') as mock:
            mock.return_value = Response(False, '"Error"', 404)
            self.assertRaises(
                RemoteTxAppError, _forward_to_app, self.app.url, 'POST'
            )

class TestTxAppPermissions(BaseTestCase):
    """Test permissions in tx apps."""

    def setUp(self):
        super(TestTxAppPermissions, self).setUp()
        app_slug = 'test_txapp'
        self.app = TxApp.objects.create(
            slug=app_slug, name='Test TxApp',
            description='Desc', url='http://127.0.0.1'
        )
        self.root_path = 'root/path/'
        self.namespace_path = ''.join([self.root_path, app_slug])
        TxApp.objects.enable_app_for_project(self.app, self.project)

    def test_no_exceptions(self):
        """Test permissions."""
        user = self.project.owner
        path = 'foo'
        self.assertTrue(self.app.access_is_allowed(user, self.project, path))
        for user in [self.user['team_member'], self.user['registered'], ]:
            self.assertFalse(
                self.app.access_is_allowed(user, self.project, path)
            )

    def test_exceptions(self):
        path_allowed = 'allowed'
        path_not_allowed = 'notallowed'
        self.app.team_allowed = [path_allowed]
        self.app.save()
        user = self.project.owner
        self.assertTrue(
            self.app.access_is_allowed(user, self.project, path_allowed)
        )
        self.assertTrue(
            self.app.access_is_allowed(user, self.project, path_not_allowed)
        )
        user = self.user['team_member']
        self.assertTrue(self.app.access_is_allowed(
                user, self.project, path_allowed)
        )
        self.assertFalse(
            self.app.access_is_allowed(user, self.project, path_not_allowed)
        )

########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-

from django.conf.urls.defaults import *
from transifex.projects.urls import PROJECT_URL
from txapps.models import TxApp
from txapps.views import apps_list, get_from_app, enable_app, disable_app


urlpatterns = patterns('',
    url(
        PROJECT_URL + r'apps/$',
        apps_list,
        name='txapps_list',
        kwargs={
            'queryset': TxApp.objects.select_related('projects.Project').all(),
            'template_object_name': 'txapps',
            'template_name': 'txapps_list.html',
        },
    ), url(
        '^ajax/projects/p/(?P<project_slug>[-\w]+)' + r'/apps/(?P<txapp_slug>[\w-]+)/enable',
        enable_app,
        name='enable_app_for_project',
    ), url(
        '^ajax/projects/p/(?P<project_slug>[-\w]+)' + r'/apps/(?P<txapp_slug>[\w-]+)/disable',
        disable_app,
        name='disable_app_for_project',
    ), url(
        PROJECT_URL + r'apps/(?P<txapp_slug>[\w-]+)/',
        get_from_app,
        name='get_from_app',
    )
)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-

import requests
from django.utils import simplejson as json
from django.http import HttpResponse, HttpResponseRedirect, \
        HttpResponseForbidden
from django.views.generic.list_detail import object_list
from django.shortcuts import get_object_or_404, render_to_response
from django.template import Template, RequestContext
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
from django.utils.translation import ugettext as _
from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.log import logger
from transifex.projects.models import Project
from transifex.projects.permissions import pr_project_add_change
from txapps.models import TxApp
from txapps.exceptions import RemoteTxAppError
from webhooks.models import WebHook


@one_perm_required_or_403(
    pr_project_add_change,
    (Project, 'slug__exact', 'project_slug')
)
def apps_list(request, project_slug, **kwargs):
    """List the tx apps."""
    kwargs['extra_context'] = {
        'project_slug': project_slug,
        'apps_for_p': Project.objects.get(
            slug=project_slug).apps.values_list('slug', flat=True)
    }

    return object_list(request, **kwargs)


@one_perm_required_or_403(
    pr_project_add_change,
    (Project, 'slug__exact', 'project_slug')
)
def enable_app(request, project_slug, txapp_slug, **kwargs):
    """Enable an app for the specified project.

    Handle this as an AJAX view.
    """
    # TODO don't hardcode source language for projects
    # TODO Handle content=None, status=None (no response)
    txapp = get_object_or_404(TxApp, slug=txapp_slug)
    project = get_object_or_404(Project, slug=project_slug)
    url = '/'.join([txapp.url, 'tx/register',  project_slug])
    method = 'POST'
    try:
        res = _forward_to_app(url, method, post_data={'source_language': 'en'})
    except RemoteTxAppError, e:
        return HttpResponse(unicode(e))
    except Exception, e:
        msg = "Uncaught exception while enabling app %(app)s for %(project)s"
        logger.error(
            msg % {'app': txapp_slug, 'project': project_slug}, exc_info=True
        )
        return HttpResponse(unicode(e))
    url = '/'.join([txapp.url, 'tx/translated'])
    WebHook.objects.get_or_create(project=project, url=url, kind='a')
    txapp.projects.add(project)
    return HttpResponse('')


@one_perm_required_or_403(
    pr_project_add_change,
    (Project, 'slug__exact', 'project_slug')
)
def disable_app(request, project_slug, txapp_slug, **kwargs):
    """Disable an ap for the specified project.

    Handle this as an AJAX view.
    """
    txapp = get_object_or_404(TxApp, slug=txapp_slug)
    project = get_object_or_404(Project, slug=project_slug)
    url = '/'.join([txapp.url, 'tx/unregister',  project_slug])
    method = 'POST'
    try:
        res = _forward_to_app(url, method)
    except RemoteTxAppError, e:
        return HttpResponse(unicode(e))
    except Exception, e:
        msg = "Uncaught exception while enabling app %(app)s for %(project)s"
        logger.error(
            msg % {'app': txapp_slug, 'project': project_slug}, exc_info=True
        )
        return HttpResponse(unicode(e))
    url = '/'.join([txapp.url, 'tx/translated'])
    WebHook.objects.filter(project=project, url=url).delete()
    txapp.projects.remove(project)
    return HttpResponse('')


@csrf_exempt
@one_perm_required_or_403(
    pr_project_add_change,
    (Project, 'slug__exact', 'project_slug')
)
def get_from_app(request, project_slug, txapp_slug):
    """Get a template string from a tx app."""
    txapp = get_object_or_404(TxApp, slug=txapp_slug)
    project = get_object_or_404(Project, slug=project_slug)

    root_path = _root_namespace(request.path, txapp)
    requested_path = _remove_namespace_from_path(root_path, request.path)
    if not txapp.access_is_allowed(request.user, project, requested_path):
        return HttpResponseForbidden()
    logger.debug(
        "Path requested from tx app %s is %s" % (txapp_slug, requested_path)
    )

    url = '/'.join([txapp.url, project_slug, requested_path])
    try:
        res = _forward_to_app(url, request.method, dict(request.POST.items()))
    except RemoteTxAppError, e:
        return error_contacting_app(request, url, txapp, e)
    if 'next_url' in res:
        path = _add_namespace_to_path(root_path, res['next_url'])
        return HttpResponseRedirect(path)
    template = '\n'.join([
            '{% extends "txapp_base.html" %}',
            '{% block txapp %}',
            res['content'],
            '{% endblock %}',
    ]).replace("\{", "{").replace("\}", "}").replace("\%", "%")
    t = Template(template)
    context = RequestContext(
        request,
        {'txapp_root_url': root_path, 'is_owner': request.user == project.owner}
    )
    return HttpResponse(
        t.render(context)
    )


def _forward_to_app(url, method, post_data=None):
    """Forward the request to the tx app."""
    if method == "GET":
        res = requests.get(url)
    else:
        res = requests.post(url, data=post_data)
    if not res.ok:
        content = res.content if hasattr(res, 'content') else ''
        status_code = res.status_code if hasattr(res, 'status_code') else ''
        raise RemoteTxAppError(status_code, content)
    return json.loads(res.content)


def error_contacting_app(request, url, app, exception):
    """Handle the case, where an app did not respond.

    This view is called, if there was a HTTP error, when contacting the remote
    tx app.
    """
    if all([exception.status_code, exception.content]):
        log_msg = (
            "Error visiting URL %s for app %s: status code "
            "was %s and error_message %s" % (
                url, app.name, exception.status_code, exception.content
            )
        )
        view_msg = _("TxApp responded with an error: %s" % exception.content)
    else:
        log_msg = "Error contacting remote server: url is %s" % url
        view_msg = _("Error contacting app.")
    logger.error(log_msg)
    return render_to_response(
        'txapp_error.html',
        {
            'app_name': app.name,
            'error_message': view_msg
        },
        context_instance=RequestContext(request)
    )


def _add_namespace_to_path(root_path, path):
    """Add the necessary namespace to the specified path.

    The ``path`` should not start with '/'.
    """
    if path.startswith('/'):
        path = path[1:]
    return '/'.join([root_path, path])


def _remove_namespace_from_path(root_path, path):
    """Remove the namespace from the specified ``path``.

    The value returned does not begin with a '/'.
    """
    return path[len(root_path) + 1:]


def _root_namespace(request_path, txapp):
    """Find the root path for this ``txapp``."""
    pos = request_path.find(txapp.slug)
    return request_path[:pos + len(txapp.slug)]

########NEW FILE########
__FILENAME__ = cron
# -*- coding: utf-8 -*-
import sys
from django.dispatch import Signal
from django.core.management.base import BaseCommand
from optparse import make_option
from txcron import signals
from django_addons.autodiscover import autodiscover

class Command(BaseCommand):
    option_list = BaseCommand.option_list + (
        make_option('--interval', '-i', default=None, dest='interval',
            help='Target signal group to execute'),
    )
    help = "Emits signals associated with crontab handlers."

    requires_model_validation = True
    can_import_settings = True

    def handle(self, *args, **options):
        # We need this to connect signals
        autodiscover()
        prefix = "cron_"
        interval = options.get('interval')
        if interval:
            if prefix + interval in dir(signals):
                inst = getattr(signals, prefix + interval, None)
                inst.send(None)
                return
            else:
                sys.stdout.write("Couldn't find signal definition.\n")
        else:
            sys.stderr.write("No interval specified.\n")
        signal_list = [i[len(prefix):] for i in dir(signals) if i.startswith(prefix)]
        sys.stdout.write("Valid signals are: %s.\n" % ", ".join(signal_list))

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = signals
# -*- coding: utf-8 -*-
from django.dispatch import Signal

# 00:00:00
cron_nightly = Signal()

# 12:00:00
cron_daily = Signal()

# 06:00:00 || 18:00:00
cron_twicedaily = Signal()

# xx:00:00
cron_hourly = Signal()

cron_30min = Signal()

cron_15min = Signal()

cron_10min = Signal()

cron_5min = Signal()

cron_3min = Signal()

cron_1min = Signal()

cron_30sec = Signal()
########NEW FILE########
__FILENAME__ = runner
from django.test.simple import DjangoTestSuiteRunner
from django.core import management
from django.db import (connections, DEFAULT_DB_ALIAS)

fixtures = ["sample_users", "sample_site", "sample_languages", "sample_data"]

class TxTestSuiteRunner(DjangoTestSuiteRunner):
    def setup_test_environment(self, **kwargs):
        super(TxTestSuiteRunner, self).setup_test_environment(**kwargs)

    def teardown_test_environment(self, **kwargs):
        super(TxTestSuiteRunner, self).teardown_test_environment(**kwargs)

    def setup_databases(self, **kwargs):
        return_val = super(TxTestSuiteRunner, self).setup_databases(**kwargs)
        databases = connections
        for db in databases:
            management.call_command('loaddata', *fixtures,
                    **{'verbosity': 0, 'database': db})
        return return_val


########NEW FILE########
__FILENAME__ = base2
# -*- coding: utf-8 -*-
import os
from copy import copy
from django.core import management, mail
from django.core.urlresolvers import reverse
from django.conf import settings
from django.utils import unittest
from django.db.models.loading import get_model
from django.db import (connections, DEFAULT_DB_ALIAS,
        transaction, IntegrityError)
from django.test import TestCase, TransactionTestCase
from django.test.testcases import (connections_support_transactions,
        disable_transaction_methods, restore_transaction_methods)
from django.test.client import Client
from django.contrib.auth.models import User, Group, Permission as DjPermission
from django.contrib.contenttypes.models import ContentType
from django_addons.autodiscover import autodiscover_notifications
from transifex.txcommon.notifications import NOTICE_TYPES
from transifex.txcommon.log import logger


# Load models
Language = get_model('languages', 'Language')
AuPermission = get_model('authority', 'Permission')
Project = get_model('projects', 'Project')
Resource = get_model('resources', 'Resource')
Release = get_model('releases', 'Release')
Team = get_model('teams', 'Team')
SourceEntity = get_model('resources', 'SourceEntity')

def skip(func):
    func_name = func.__name__
    def decorator(func):
        msg = "%s skipped. Please implement it in your project path."%func_name
        if settings.TX_ROOT != settings.PROJECT_PATH:
            logger.debug(msg)
        return unittest.skipUnless(settings.TX_ROOT == settings.PROJECT_PATH, msg)
    return decorator

# Please refer to the README file in the tests directory for more info about
# the various user roles.
USER_ROLES = [
    'anonymous',
    'registered',
    'maintainer',
    'writer',
    'team_coordinator',
    'team_member',
    'reviewer']
PASSWORD = '123412341234'


def deactivate_caching_middleware():
    list_middle_c = list(settings.MIDDLEWARE_CLASSES)
    try:
        list_middle_c.remove('django.middleware.cache.FetchFromCacheMiddleware')
    except ValueError:
        pass
    try:
        list_middle_c.remove('django.middleware.cache.UpdateCacheMiddleware')
    except ValueError:
        pass


def deactivate_csrf_middleware():
    list_middle_c = list(settings.MIDDLEWARE_CLASSES)
    try:
        list_middle_c.remove('external.csrf.middleware.CsrfMiddleware')
    except ValueError:
        pass
    settings.MIDDLEWARE_CLASSES = list_middle_c


class TestCaseMixin(object):

    @staticmethod
    def response_in_browser(resp, halt=True):
        """
        Useful for debugging it shows the content of a http response in the
        browser when called.
        """
        from transifex.txcommon.tests.utils import response_in_browser
        return response_in_browser(resp, halt=True)

def create_users_and_clients(USER_ROLES):
    registered = Group.objects.get(name="registered")
    registered.permissions.add(
        DjPermission.objects.get_or_create(
            codename='add_project', name='Can add project',
            content_type=ContentType.objects.get_for_model(Project))[0])

    user = {}
    client = {}

    # Create users, respective clients and login users
    for nick in USER_ROLES:
        client[nick] = Client()
        if nick != 'anonymous':
            # Create respective users
            if User.objects.filter(username=nick):
                user[nick] = User.objects.get(username=nick)
            else:
                user[nick] = User.objects.create_user(
                    nick, '%s@localhost' % nick, PASSWORD)
            user[nick].groups.add(registered)
            # Login non-anonymous personas
            client[nick].login(username=nick, password=PASSWORD)

    return user, client


class TransactionUsers(TestCaseMixin):
    """A class to create users in setUp().

    Use this as a mixin.
    """

    fixtures = ["sample_users", "sample_site", "sample_languages", "sample_data"]

    def setUp(self):
        self.user, self.client = create_users_and_clients(USER_ROLES)
        for nick in USER_ROLES:
            if nick != 'anonymous':
                self.assertTrue(self.user[nick].is_authenticated())

        super(TransactionUsers, self).setUp()

class Users(TestCaseMixin):
    """A class to create users in setUp().

    Use this as a mixin.
    """

    @classmethod
    def setUpClass(cls):
        registered = Group.objects.get(name="registered")
        registered.permissions.add(
            DjPermission.objects.get_or_create(
                codename='add_project', name='Can add project',
                content_type=ContentType.objects.get_for_model(Project))[0])

        cls._user = {}
        cls._client = {}

        # Create users, respective clients and login users
        for nick in USER_ROLES:
            cls._client[nick] = Client()
            if nick != 'anonymous':
                # Create respective users
                if User.objects.filter(username=nick):
                    cls._user[nick] = User.objects.get(username=nick)
                else:
                    cls._user[nick] = User.objects.create_user(
                        nick, '%s@localhost' % nick, PASSWORD)
                cls._user[nick].groups.add(registered)
                # Login non-anonymous personas
                cls._client[nick].login(username=nick, password=PASSWORD)
                #cls._assertTrue(cls._user[nick].is_authenticated())
        cls._client_dict = cls._client
        super(Users, cls).setUpClass()

class TransactionNoticeTypes(TestCaseMixin):
    """A class to create default notice types.

    Use this as a mixin in tests.
    """

    def setUp(self):
        from django.core import management
        management.call_command('txcreatenoticetypes', verbosity=0)
        super(TransactionNoticeTypes, self).setUp()


class NoticeTypes(TestCaseMixin):
    """A class to create default notice types.

    Use this as a mixin in tests.
    """

    @classmethod
    def setUpClass(cls):
        from django.core import management
        management.call_command('txcreatenoticetypes', verbosity=0)
        super(NoticeTypes, cls).setUpClass()

class Languages(TestCaseMixin):
    """A class to create default languages.

    Use this as a mixin in tests.
    """

    @classmethod
    def setUpClass(cls):
        from django.core import management
        management.call_command('txlanguages', verbosity=0)
        cls._language = Language.objects.get(code='pt_BR')
        cls._language_en = Language.objects.get(code='en_US')
        cls._language_ar = Language.objects.get(code='ar')
        #self.language_hi_IN = Language.objects.get(code='hi_IN')
        super(Languages, cls).setUpClass()


class TransactionLanguages(TestCaseMixin):
    """A class to create default languages.

    Use this as a mixin in transaction-based tests.
    """

    def setUp(self):
        from django.core import management
        management.call_command('txlanguages', verbosity=0)
        self.language = Language.objects.get(code='pt_BR')
        self.language_en = Language.objects.get(code='en_US')
        self.language_ar = Language.objects.get(code='ar')
        super(TransactionLanguages, self).setUp()

class TransactionProjects(TransactionUsers):
    """A class to create sample projects.

    Use this as a mixin in tests.
    """

    fixtures = ["sample_users", "sample_languages", "sample_data", ]

    def setUp(self):
        super(TransactionProjects, self).setUp()
        self.project = Project.objects.get(slug='project1')
        self.project.maintainers.add(self.user['maintainer'])
        self.project.owner = self.user['maintainer']
        self.project.save()

        self.project_private = Project.objects.get(slug='project2')
        self.project_private.maintainers.add(self.user['maintainer'])
        self.project_private.owner = self.user['maintainer']
        self.project_private.save()



class Projects(Users):
    """A class to create sample projects.

    Use this as a mixin in tests.
    """


    @classmethod
    def setUpClass(cls):
        super(Projects, cls).setUpClass()
        cls._project = Project.objects.get(slug='project1')
        cls._project.maintainers.add(cls._user['maintainer'])
        cls._project.owner = cls._user['maintainer']
        cls._project.save()

        cls._project_private = Project.objects.get(slug='project2')
        cls._project_private.maintainers.add(cls._user['maintainer'])
        cls._project_private.owner = cls._user['maintainer']
        cls._project_private.save()

class TransactionResources(TransactionProjects):
    """A class to create sample resources.

    Use this as a mixin in tests.
    """

    def setUp(self):
        # Create a resource
        super(TransactionResources, self).setUp()
        self.resource = Resource.objects.create(
            slug="resource1", name="Resource1", project=self.project,
            i18n_type='PO'
        )
        self.resource_private = Resource.objects.create(
            slug="resource1", name="Resource1", project=self.project_private,
            i18n_type='PO'
        )



class Resources(Projects):
    """A class to create sample resources.

    Use this as a mixin in tests.
    """

    @classmethod
    def setUpClass(cls):
        # Create a resource
        super(Resources, cls).setUpClass()
        cls._resource = Resource.objects.get_or_create(
            slug="resource1", name="Resource1", project=cls._project,
            i18n_type='PO'
        )[0]
        cls._resource_private = Resource.objects.get_or_create(
            slug="resource1", name="Resource1", project=cls._project_private,
            i18n_type='PO'
        )[0]


class TransactionSourceEntities(TransactionResources):
    """A class to create some sample source entities.

    Use this as a mixin in tests.
    """

    def setUp(self):
        super(TransactionSourceEntities, self).setUp()
        self.source_entity = SourceEntity.objects.create(
            string='String1', context='Context1', occurrences='Occurrences1',
            resource=self.resource
        )
        self.source_entity_private = SourceEntity.objects.create(
            string='String1', context='Context1', occurrences='Occurrences1',
            resource=self.resource_private
        )
        self.source_entity_plural = SourceEntity.objects.create(
            string='pluralized_String1', context='Context1',
            occurrences='Occurrences1_plural', resource= self.resource,
            pluralized=True
        )
        self.source_entity_plural_private = SourceEntity.objects.create(
            string='pluralized_String1', context='Context1',
            occurrences='Occurrences1_plural', resource= self.resource_private,
            pluralized=True
        )


class SourceEntities(Resources):
    """A class to create some sample source entities.

    Use this as a mixin in tests.
    """

    @classmethod
    def setUpClass(cls):
        super(SourceEntities, cls).setUpClass()
        cls._source_entity = SourceEntity.objects.get_or_create(
            string='String1', context='Context1', occurrences='Occurrences1',
            resource=cls._resource
        )[0]
        cls._source_entity_private = SourceEntity.objects.get_or_create(
            string='String1', context='Context1', occurrences='Occurrences1',
            resource=cls._resource_private
        )[0]
        cls._source_entity_plural = SourceEntity.objects.get_or_create(
            string='pluralized_String1', context='Context1',
            occurrences='Occurrences1_plural', resource= cls._resource,
            pluralized=True
        )[0]
        cls._source_entity_plural_private = SourceEntity.objects.get_or_create(
            string='pluralized_String1', context='Context1',
            occurrences='Occurrences1_plural', resource= cls._resource_private,
            pluralized=True
        )[0]


class TransactionTranslations(TransactionSourceEntities):
    """A class to create some sample translations.

    Use this as a mixin in tests.
    """

    def setUp(self):
        # Create one translation
        super(TransactionTranslations, self).setUp()
        self.translation_en = self.source_entity.translations.create(
            string='Buy me some BEER :)',
            rule=5,
            source_entity=self.source_entity,
            resource=self.resource,
            language=self.language_en,
            user=self.user['registered'],
        )
        self.translation_ar = self.source_entity.translations.create(
            string=u'This is supposed to be arabic text! αβγ',
            rule=5,
            source_entity=self.source_entity,
            resource=self.resource,
            language=self.language_ar,
            user=self.user['registered'],
        )


class Translations(SourceEntities):
    """A class to create some sample translations.

    Use this as a mixin in tests.
    """

    @classmethod
    def setUpClass(cls):
        # Create one translation
        super(Translations, cls).setUpClass()
        cls._translation_en = cls._source_entity.translations.get_or_create(
            string='Buy me some BEER :)',
            rule=5,
            source_entity=cls._source_entity,
            language=cls._language_en,
            user=cls._user['registered'],
            resource=cls._resource
        )[0]
        cls._translation_ar = cls._source_entity.translations.get_or_create(
            string=u'This is supposed to be arabic text! αβγ',
            rule=5,
            source_entity=cls._source_entity,
            language=cls._language_ar,
            user=cls._user['registered'],
            resource=cls._resource
        )[0]

class SampleData(TransactionLanguages, TransactionTranslations,
        TransactionNoticeTypes):
    """A class that has all sample data defined."""

class TransactionBaseTestCase(SampleData, TransactionTestCase,):
    fixtures = ["sample_users", "sample_site", "sample_languages", "sample_data"]

    def __init__(self, *args, **kwargs):
        super(TransactionBaseTestCase, self).__init__(*args, **kwargs)

        # Useful for writing tests: Enter ipython anywhere w/ ``self.ipython()``
        try:
            from IPython.frontend.terminal.embed import InteractiveShellEmbed as shell
            self.ipython = shell()
        except ImportError:
            pass

        #FIXME: This should not happen, since it diverges away the test suite
        # from the actual deployment.
        # Remove the caching middlewares because they interfere with the
        # anonymous client.
        deactivate_caching_middleware()
        deactivate_csrf_middleware()
        # Disable actionlog, which in turn disables noticetype requirement.
        settings.ACTIONLOG_ENABLED = False

    def setUp(self):
        """Set up a sample set of base objects for inherited tests.

        If you are inheriting the class and overriding setUp, don't forget to
        call super::

          from transifex.txcommon.tests import (base, utils)
          class TestClassName(base.BaseTestCase)
              def setUp(self):
                  super(TestClassName, self).setUp()

        """
        super(TransactionBaseTestCase, self).setUp()

        # Add django-authority permission for writer
        self.permission = AuPermission.objects.create(
            codename='project_perm.submit_translations',
            approved=True, user=self.user['writer'],
            content_object=self.project, creator=self.user['maintainer'])

        # Create teams
        self.team = Team.objects.get_or_create(language=self.language,
            project=self.project, creator=self.user['maintainer'])[0]
        self.team_private = Team.objects.get_or_create(language=self.language,
            project=self.project_private, creator=self.user['maintainer'])[0]
        self.team.coordinators.add(self.user['team_coordinator'])
        self.team.members.add(self.user['team_member'])
        self.team.reviewers.add(self.user['reviewer'])
        self.team_private.coordinators.add(self.user['team_coordinator'])
        self.team_private.members.add(self.user['team_member'])
        self.team_private.reviewers.add(self.user['reviewer'])

        # Create a release
        self.release = Release.objects.create(slug="releaseslug1",
            name="Release1", project=self.project)
        self.release.resources.add(self.resource)
        self.release_private = Release.objects.create(slug="releaseslug2",
            name="Release2", project=self.project_private)
        self.release_private.resources.add(self.resource_private)


        # Create common URLs
        # Easier to call common URLs in your view/template unit tests.
        self.urls = {
            'project': reverse('project_detail', args=[self.project.slug]),
            'project_edit': reverse('project_edit', args=[self.project.slug]),
            'project_resources': reverse('project_resources', args=[self.project.slug]),
            'resource': reverse('resource_detail', args=[self.resource.project.slug, self.resource.slug]),
            'resource_actions': reverse('resource_actions', args=[self.resource.project.slug, self.resource.slug, self.language.code]),
            'resource_edit': reverse('resource_edit', args=[self.resource.project.slug, self.resource.slug]),
            'translate': reverse('translate_resource', args=[self.resource.project.slug, self.resource.slug, self.language.code]),
            'release': reverse('release_detail', args=[self.release.project.slug, self.release.slug]),
            'release_create': reverse('release_create', args=[self.project.slug]),
            'team': reverse('team_detail', args=[self.resource.project.slug,
                                                 self.language.code]),

            'project_private': reverse('project_detail', args=[self.project_private.slug]),
            'resource_private': reverse('resource_detail', args=[self.resource_private.project.slug, self.resource_private.slug]),
            'translate_private': reverse('translate_resource', args=[self.resource_private.project.slug, self.resource_private.slug, self.language.code]),
        }

        from django.core import management
        management.call_command('txstatsupdate', verbosity=0)



class BaseTestCase(Languages, NoticeTypes, Translations, TestCase):
    """Provide a solid test case for all tests to inherit from."""

    def __init__(self, *args, **kwargs):
        super(BaseTestCase, self).__init__(*args, **kwargs)

        # Useful for writing tests: Enter ipython anywhere w/ ``self.ipython()``
        try:
            from IPython.frontend.terminal.embed import InteractiveShellEmbed as shell
            self.ipython = shell()
        except ImportError:
            pass

        #FIXME: This should not happen, since it diverges away the test suite
        # from the actual deployment.
        # Remove the caching middlewares because they interfere with the
        # anonymous client.
        deactivate_caching_middleware()
        deactivate_csrf_middleware()
        # Disable actionlog, which in turn disables noticetype requirement.
        settings.ACTIONLOG_ENABLED = False

    @classmethod
    def setUpClass(cls):
        """Set up a sample set of class wide base objects for inherited tests.
        NOTE: Use this Test Suite with
          TEST_RUNNER = 'txtestrunner.runner.TxTestSuiteRunner'
        in settings.
        If you are inheriting the class and overriding setUpClass, don't forget to
        call super::

          from transifex.txcommon.tests import (base2, utils)
          class TestClassName(base2.BaseTestCase):
              @classmethod
              def setUpClass(self):
                  super(TestClassName, self).setUpClass()

        """
        super(BaseTestCase, cls).setUpClass()

        # Add django-authority permission for writer
        cls._permission = AuPermission.objects.create(
            codename='project_perm.submit_translations',
            approved=True, user=cls._user['writer'],
            content_object=cls._project, creator=cls._user['maintainer'])

        # Create teams
        cls._team = Team.objects.get_or_create(language=cls._language,
            project=cls._project, creator=cls._user['maintainer'])[0]
        cls._team_private = Team.objects.get_or_create(language=cls._language,
            project=cls._project_private, creator=cls._user['maintainer'])[0]
        cls._team.coordinators.add(cls._user['team_coordinator'])
        cls._team.members.add(cls._user['team_member'])
        cls._team.members.add(cls._user['reviewer'])
        cls._team_private.coordinators.add(cls._user['team_coordinator'])
        cls._team_private.members.add(cls._user['team_member'])
        cls._team_private.members.add(cls._user['reviewer'])

        # Create a release
        cls._release = Release.objects.get_or_create(slug="releaseslug1",
            name="Release1", project=cls._project)[0]
        cls._release.resources.add(cls._resource)
        cls._release_private = Release.objects.get_or_create(slug="releaseslug2",
            name="Release2", project=cls._project_private)[0]
        cls._release_private.resources.add(cls._resource_private)


        # Create common URLs
        # Easier to call common URLs in your view/template unit tests.
        cls._urls = {
            'project': reverse('project_detail', args=[cls._project.slug]),
            'project_edit': reverse('project_edit', args=[cls._project.slug]),
            'project_resources': reverse('project_resources', args=[cls._project.slug]),
            'resource': reverse('resource_detail', args=[cls._resource.project.slug, cls._resource.slug]),
            'resource_actions': reverse('resource_actions', args=[cls._resource.project.slug, cls._resource.slug, cls._language.code]),
            'resource_edit': reverse('resource_edit', args=[cls._resource.project.slug, cls._resource.slug]),
            'translate': reverse('translate_resource', args=[cls._resource.project.slug, cls._resource.slug, cls._language.code]),
            'release': reverse('release_detail', args=[cls._release.project.slug, cls._release.slug]),
            'release_create': reverse('release_create', args=[cls._project.slug]),
            'team': reverse('team_detail', args=[cls._resource.project.slug,
                                                 cls._language.code]),

            'project_private': reverse('project_detail', args=[cls._project_private.slug]),
            'resource_private': reverse('resource_detail', args=[cls._resource_private.project.slug, cls._resource_private.slug]),
            'translate_private': reverse('translate_resource', args=[cls._resource_private.project.slug, cls._resource_private.slug, cls._language.code]),
        }


        from django.core import management
        management.call_command('txstatsupdate', verbosity=0)

    def _pre_setup(self):
        if not connections_support_transactions():
            fixtures = ["sample_users", "sample_site", "sample_languages", "sample_data"]
            if getattr(self, 'multi_db', False):
                databases = connections
            else:
                databases = [DEFAULT_DB_ALIAS]
            for db in databases:
                management.call_command('flush', verbosity=0,
                interactive=False, database=db)
                management.call_command('loaddata', *fixtures, **{
                    'verbosity': 0, 'database': db})

        else:
            if getattr(self, 'multi_db', False):
                databases = connections
            else:
                databases = [DEFAULT_DB_ALIAS]

            for db in databases:
                transaction.enter_transaction_management(using=db)
                transaction.managed(True, using=db)
            disable_transaction_methods()
        mail.outbox = []

    def _post_teardown(self):
        if connections_support_transactions():
            # If the test case has a multi_db=True flag, teardown all databases.
            # Otherwise, just teardown default.
            if getattr(self, 'multi_db', False):
                databases = connections
            else:
                databases = [DEFAULT_DB_ALIAS]

            restore_transaction_methods()
            for db in databases:
                transaction.rollback(using=db)
                transaction.leave_transaction_management(using=db)
        for connection in connections.all():
            connection.close()

    def setUp(self):
        super(BaseTestCase, self).setUp()
        self.client = copy(self._client_dict)
        self.user = copy(self._user)
        self.language = copy(self._language)
        self.language_en = copy(self._language_en)
        self.language_ar = copy(self._language_ar)
        self.project = copy(self._project)
        self.project_private = copy(self._project_private)
        self.resource = copy(self._resource)
        self.resource_private = copy(self._resource_private)
        self.source_entity = copy(self._source_entity)
        self.source_entity_private = copy(self._source_entity_private)
        self.source_entity_plural = copy(self._source_entity_plural)
        self.source_entity_plural_private = copy(self._source_entity_plural_private)
        self.translation_en = copy(self._translation_en)
        self.translation_ar = copy(self._translation_ar)
        self.permission = copy(self._permission)
        self.team = copy(self._team)
        self.team_private = copy(self._team_private)
        self.release = copy(self._release)
        self.release_private = copy(self._release_private)
        self.urls = copy(self._urls)


    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls):
        pass

    def create_more_entities(self, total=1):
        """A method to create more entities for those tests that require them."""
        self.source_entity2 = SourceEntity.objects.create(string='String2',
            context='Context1', occurrences='Occurrences1', resource=self.resource)
        self.translation_en2 = self.source_entity2.translations.create(
            string='Translation String 2',
            rule=5,
            source_entity=self.source_entity,
            resource=self.resource,
            language=self.language_en,
            user=self.user['registered'])
        self.resource.update_total_entities()
        self.resource.update_wordcount()

    # Custom assertions
    def assertNoticeTypeExistence(self, noticetype_label):
        """Assert that a specific noticetype was created."""
        found = False
        for n in NOTICE_TYPES:
             if n["label"] == noticetype_label:
                 found = True
        self.assertTrue(found, msg = "Notice type '%s' wasn't "
            "added" % noticetype_label)

    #FIXME: Port all status checks to this method.
    def assert_url_statuses(self, pages_dict, client):
        """Test whether a list of URLs return the correct status codes.

        'pages_dict':
          A dictionary of status codes, each one listing a
          set of pages to test whether they return that status code.
        'client': A django.test.client.Client object.

        >>> pages = {200: ['/', '/projects/',],
                     404: ['/foobar'],}
        >>> self.assert_url_statuses(pages, self.client["anonymous"])

        """

        for expected_code, pages in pages_dict.items():
            for page_url in pages:
                page = client.get(page_url)
                self.assertEquals(page.status_code, expected_code,
                    "Status code for page '%s' was %s instead of %s" %
                    (page_url, page.status_code, expected_code))


class BaseTestCase2Tests(BaseTestCase):
    """Test the base test case itself."""

    @skip
    def test_basetest_users(self):
        """Test that basic users can function normally."""
        for role in USER_ROLES:
            print role
            # All users should be able to see the homepage
            resp = self.client[role].get('/')
            self.assertEquals(resp.status_code, 200)


########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from models import TranslationWatch

admin.site.register(TranslationWatch)

########NEW FILE########
__FILENAME__ = handlers
# -*- coding: utf-8 -*-
from django.conf import settings

from notification import models as notification

from lotte.signals import lotte_done
from transifex.projects.signals import post_submit_translation
from transifex.projects.signals import post_resource_save, \
        post_release_save
from transifex.txcommon import notifications as txnotification
from transifex.txcommon.log import logger

from models import TranslationWatch

release_signals = ['project_release_changed',]

resource_signals = ['project_resource_changed',]

def _notify_translationwatchers(resource, language):
    """
    Notify the watchers for a specific TranslationWatch
    """
    context = {
        'project': resource.project,
        'resource': resource,
        'language': language,
    }

    twatch = TranslationWatch.objects.get_or_create(resource=resource,
        language=language)[0]

    logger.debug("addon-watches: Sending notification for '%s'" % twatch)
    txnotification.send_observation_notices_for(twatch,
        signal='project_resource_translation_changed', extra_context=context)

def _notify_releasewatchers(project, release, signal):
    """
    Notify watchers of a release add/change
    """
    context = {'project': project,
               'release': release,
    }
    logger.debug("addon-watches: Sending notification for '%s'" % release)
    if signal == "project_release_added":
        observed_instance = project
    else:
        observed_instance = release
    txnotification.send_observation_notices_for(observed_instance,
            signal=signal, extra_context=context)

def _notify_resourcewatchers(project, resource, signal):
    """
    Notify watchers of a resource add/change
    """
    context = {'project': project,
               'resource': resource,
    }
    logger.debug("addon-watches: Sending notification for '%s'" % resource)
    if signal == 'project_resource_added':
        observed_instance = project
    else:
        observed_instance = resource
    txnotification.send_observation_notices_for(observed_instance,
            signal=signal, extra_context=context)

def post_release_save_handler(sender, instance, created, user, **kwargs):
    if settings.ENABLE_NOTICES:
        release = instance
        project = release.project
        users = [watch.user for watch in notification.ObservedItem.objects.filter(content_type__model='project', object_id = project.id, signal="project_changed").select_related('user')]
        for user in users:
            try:
                notification.ObservedItem.objects.get_for(release.project, user, "project_changed")
                if created:
                    for signal in release_signals:
                        try:
                            notification.ObservedItem.objects.get_for(release, user, signal)
                        except notification.ObservedItem.DoesNotExist:
                            notification.observe(release, user, signal, signal)
                    nt = "project_release_added"
                else:
                    nt = "project_release_changed"
                project = release.project
                _notify_releasewatchers(project, release, nt)
            except notification.ObservedItem.DoesNotExist, e:
                logger.debug("Watches: %s" % unicode(e))

def post_resource_save_handler(sender, instance, created, user, **kwargs):
    if settings.ENABLE_NOTICES:
        resource = instance
        project = resource.project
        users = [watch.user for watch in notification.ObservedItem.objects.filter(content_type__model='project', object_id = project.id, signal="project_changed").select_related('user')]
        for user in users:
            try:
                notification.ObservedItem.objects.get_for(resource.project, user, "project_changed")
                if created:
                    for signal in resource_signals:
                        try:
                            notification.ObservedItem.objects.get_for(resource, user, signal)
                        except notification.ObservedItem.DoesNotExist:
                            notification.observe(resource, user, signal, signal)
                    nt = "project_resource_added"
                else:
                    nt = "project_resource_changed"
                project = resource.project
                _notify_resourcewatchers(project, resource, nt)
            except notification.ObservedItem.DoesNotExist, e:
                logger.debug("Watches: %s" % unicode(e))

def lotte_done_handler(sender, request, resources, language, modified,
    **kwargs):
    if modified and settings.ENABLE_NOTICES:
        for resource in resources:
            _notify_translationwatchers(resource, language)


def post_submit_translation_handler(sender, request, resource, language,
    modified, **kwargs):
    if modified and settings.ENABLE_NOTICES:
        _notify_translationwatchers(resource, language)

def connect():
    lotte_done.connect(lotte_done_handler)
    post_submit_translation.connect(post_submit_translation_handler)
    post_release_save.connect(post_release_save_handler)
    post_resource_save.connect(post_resource_save_handler)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    depends_on = (
        ("resources", "0001_initial"),
        ("languages", "0001_initial"),
    )

    def forwards(self, orm):

        # Adding model 'TranslationWatch'
        db.create_table('watches_translationwatch', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('resource', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['resources.Resource'])),
            ('language', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['languages.Language'])),
        ))
        db.send_create_signal('watches', ['TranslationWatch'])

        # Adding unique constraint on 'TranslationWatch', fields ['resource', 'language']
        db.create_unique('watches_translationwatch', ['resource_id', 'language_id'])


    def backwards(self, orm):

        # Removing unique constraint on 'TranslationWatch', fields ['resource', 'language']
        db.delete_unique('watches_translationwatch', ['resource_id', 'language_id'])

        # Deleting model 'TranslationWatch'
        db.delete_table('watches_translationwatch')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        },
        'watches.translationwatch': {
            'Meta': {'unique_together': "(('resource', 'language'),)", 'object_name': 'TranslationWatch'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"})
        }
    }

    complete_apps = ['watches']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-
from django.db import models
from django.contrib.auth.models import User, AnonymousUser
from django.contrib.contenttypes.models import ContentType
from django.utils.translation import ugettext_lazy as _

from transifex.languages.models import Language
from transifex.resources.models import Resource
from transifex.txcommon.db.models import IntegerTupleField
from transifex.txcommon.log import logger

from transifex.projects.models import Project
#Project = get_model('projects', 'Project')

from notification.models import ObservedItem, is_observing

class WatchException(Exception):
    pass

class TranslationWatch(models.Model):
    """
    An unique association of a Resource and a Language to be watched.

    Different translators eventually will use the same TranslationWatch
    objects for watching translation changes.
    """
    resource = models.ForeignKey(Resource,
        help_text=_('Resource to watch.'))
    language = models.ForeignKey(Language,
        help_text=_('Language of the translation.'))

    def __unicode__(self):
        return u'%s: %s' % (self.resource, self.language)

    def __repr__(self):
        return u'<TranslationWatch: %s (%s)>' % (
            self.resource.full_name, self.language)

    class Meta:
        unique_together = ('resource', 'language')
        verbose_name = _('translation watch')
        verbose_name_plural = _('translation watches')


def is_watched(self, user, signal=None):
    """
    Return a boolean value if an object is watched by an user or not

    It is possible also verify if it is watched by a user in a specific
    signal, passing the signal as a second parameter
    """
    if signal:
        return is_observing(self, user, signal)

    if isinstance(user, AnonymousUser):
        return False

    ctype = ContentType.objects.get_for_model(self)
    observed_items = ObservedItem.objects.filter(content_type=ctype,
        object_id=self.id, user=user)
    if observed_items:
        return True
    else:
        return False


def get_watched(cls, user):
    """
    Return list of 'cls' objects watched by 'user'.

    cls  - is a class model, not an instance.
    user - is a user object.
    """
    return cls.objects.filter(id__in=user.observeditem_set.filter(
        content_type=ContentType.objects.get_for_model(cls)
        ).values_list('object_id', flat=True).query)


Project.add_to_class("is_watched", is_watched)
TranslationWatch.add_to_class("is_watched", is_watched)

Project.add_to_class("get_watched", classmethod(get_watched))
TranslationWatch.add_to_class("get_watched", classmethod(get_watched))

########NEW FILE########
__FILENAME__ = watches_tags
# -*- coding: utf-8 -*-
from django.conf import settings
from django.core.urlresolvers import reverse
from django.db.models import get_model
from django import template
from django.contrib.contenttypes.models import ContentType
from django.utils.translation import ugettext_noop as _

Project = get_model('projects', 'Project')
Resource = get_model('resources', 'Resource')
TranslationWatch = get_model('watches', 'TranslationWatch')

register = template.Library()

@register.inclusion_tag('watch_toggle.html', takes_context=True)
def watch_toggle(context, obj, language=None):
    """
    Handle watch links for objects by the logged in user
    """
    if isinstance(obj, Project):
        obj.toggle_watch_url = reverse('project_toggle_watch',
            args=(obj.slug,))
        obj.is_project = True

    elif isinstance(obj, Resource) and language:
        obj = TranslationWatch.objects.get_or_create(resource=obj,
            language=language)[0]
        obj.toggle_watch_url = reverse('resource_translation_toggle_watch',
            args=(obj.resource.project.slug, obj.resource.slug, language.code,))
        obj.is_resource = True

    user = context['request'].user
    obj.is_watched = obj.is_watched(user)
    context['obj'] = obj
    context['ENABLE_NOTICES'] = settings.ENABLE_NOTICES
    return context

########NEW FILE########
__FILENAME__ = tests
# -*- coding: utf-8 -*-
import os
from django.core.urlresolvers import reverse
from django.test.client import Client
from transifex.projects.models import Project
from transifex.resources.models import Resource
from transifex.txcommon.tests.base import BaseTestCase, USER_ROLES, NoticeTypes
from transifex.resources.models import Resource
from transifex.releases.models import Release
from django.utils import simplejson
from django.conf import settings
from notification.models import ObservedItem

class TestWatches(BaseTestCase):

    def setUp(self):
        super(TestWatches, self).setUp()
        self.project_signals = ['project_changed',
                                'project_deleted',
                                'project_release_added',
                                'project_release_deleted',
                                'project_resource_added',
                                'project_resource_deleted']

        self.release_signals = ['project_release_changed',]

        self.resource_signals = ['project_resource_changed']
        # Sanity checks
        self.assertTrue( Project.objects.count() >= 1, msg = "Base test case didn't create any projects" )
        self.assertTrue( Resource.objects.count() >= 1, msg = "Base test case didn't create any resources")
        # Generate watch URLs
        self.url_project_toggle_watch = reverse('project_toggle_watch', args=[self.project.slug])
        self.url_resource_translation_toggle_watch = reverse('resource_translation_toggle_watch',
                args = [self.project.slug, self.resource.slug, self.language.code])

    def test_templates(self):
        """
        Test templates to see if it is properly rendered for different types of users
        """
        for user in USER_ROLES:
            resp = self.client[user].get(self.urls['project'])
            resp1 = self.client[user].get(self.urls['resource_actions'])
            if user != 'anonymous':
                if settings.ENABLE_NOTICES:
                    self.assertContains(resp, "watch_toggle(this, '/ajax/p/%s/toggle_watch/')"%self.project.slug, status_code=200)
                    self.assertContains(resp1, "watch_toggle(this, '/ajax/p/%s/resource/%s/l/%s/toggle_watch/')"%
                                        (self.project.slug, self.resource.slug, self.language.code), status_code=200)
                else:
                    self.assertNotContains(resp, "watch_toggle(this, '/ajax/p/%s/toggle_watch/')"%self.project.slug, status_code=200)
                    self.assertNotContains(resp1, "watch_toggle(this, '/ajax/p/%s/resource/%s/l/%s/toggle_watch/')"%
                                        (self.project.slug, self.resource.slug, self.language.code), status_code=200)


            else:
                self.assertNotContains(resp, '''onclick="watch_toggle(this, '/ajax/p/%s/toggle_watch/')" title="Watch it"'''%self.project.slug, status_code=200)
                self.assertNotContains(resp1, "watch_toggle(this, '/ajax/p/%s/resource/%s/l/%s/toggle_watch/')"%
                                    (self.project.slug, self.resource.slug, self.language.code), status_code=200)

    def test_project_toggle_watch(self):
        """
        Test toggle watch for project
        """
        for user in USER_ROLES:
            resp = self.client[user].post(self.url_project_toggle_watch, {},)
            if user != 'anonymous':
                self.assertEqual(resp.status_code, 200)
                json = simplejson.loads(resp.content)
                if settings.ENABLE_NOTICES:
                    self.assertTrue(json['project'])
                    self.assertEqual(json['url'], '/ajax/p/%s/toggle_watch/'%self.project.slug)
                    self.assertEqual(json['style'], 'watch_remove')
                    self.assertEqual(json['title'], 'Stop watching this project')
                    self.assertEqual(json['error'], None)
                    self.assertEqual(ObservedItem.objects.filter(content_type__model='project',
                        signal__in=self.project_signals, object_id=self.project.id, user__username=user).count(), 6)
                else:
                    self.assertEqual(json['error'], "Notification is not enabled")
            else:
                self.assertEqual(resp.status_code, 302)

        resp = self.client['maintainer'].post(self.urls['release_create'], {
            'slug': 'nice-release',
            'name': 'Nice Release',
            'project': self.project.id,
            'resources': self.project.resources.all()[0].id,
            'description': '',
            'release_date': '',
            'resources_text': '',
            'stringfreeze_date': '',
            'homepage': '',
            'long_description': '',
            'develfreeze_date': '',
        }, follow=True)

        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, "projects/release_detail.html")

        r = Release.objects.get(slug='nice-release')
        self.assertEqual(ObservedItem.objects.filter(content_type__model='release',
            signal__in=self.release_signals, object_id=Release.objects.get(
                slug='nice-release', project=self.project).id,
                 user__username='maintainer').count(), 1)

        self.pofile_path = os.path.join(
            settings.TX_ROOT, 'resources/tests/lib/pofile'
        )
        self.po_file = os.path.join(self.pofile_path, "tests.pot")
        self.url_create_resource = reverse(
            'apiv2_resources', kwargs={'project_slug': self.project.slug}
        )
        with open(self.po_file) as f:
            content = f.read()

        res = self.client['maintainer'].post(
            self.url_create_resource,
            data=simplejson.dumps({
                    'name': "resource1",
                    'slug': 'r1',
                    'i18n_type': 'PO',
                    'content': content,
            }),
            content_type='application/json'
        )
        self.assertEqual(res.status_code, 201)
        new_resource = Resource.objects.get(slug='r1', project=self.project)
        self.assertEqual(ObservedItem.objects.filter(content_type__model='resource',
            signal__in=self.resource_signals, object_id=new_resource.id).count(), 6)

        for user in USER_ROLES:
            resp = self.client[user].post(self.url_project_toggle_watch, {},)
            if user != 'anonymous':
                self.assertEqual(resp.status_code, 200)
                json = simplejson.loads(resp.content)
                if settings.ENABLE_NOTICES:
                    self.assertTrue(json['project'])
                    self.assertEqual(json['url'], '/ajax/p/%s/toggle_watch/'%self.project.slug)
                    self.assertEqual(json['style'], 'watch_add')
                    self.assertEqual(json['title'], 'Watch this project')
                    self.assertEqual(json['error'], None)
                else:
                    self.assertEqual(json['error'], "Notification is not enabled")
            else:
                self.assertEqual(resp.status_code, 302)

    def test_resource_translation_toggle_watch(self):
        """
        Test toggle watch for resource translation
        """
        for user in USER_ROLES:
            resp = self.client[user].post(self.url_resource_translation_toggle_watch, {},)
            if user not in ['anonymous', 'registered']:
                self.assertEqual(resp.status_code, 200)
                json = simplejson.loads(resp.content)
                if settings.ENABLE_NOTICES:
                    self.assertEqual(json['url'], '/ajax/p/%s/resource/%s/l/%s/toggle_watch/'%
                                     (self.project.slug, self.resource.slug, self.language.code))
                    self.assertEqual(json['style'], 'watch_remove')
                    self.assertEqual(json['title'], 'Stop watching')
                    self.assertEqual(json['error'], None)
                else:
                    self.assertEqual(json['error'], "Notification is not enabled")
            else:
                if user == 'anonymous':
                    self.assertEqual(resp.status_code, 302)
                else:
                    if settings.ENABLE_NOTICES:
                        self.assertEqual(resp.status_code, 403)
                    else:
                        self.assertContains(resp, "Notification is not enabled", status_code=200)

            resp = self.client[user].post(self.url_resource_translation_toggle_watch, {},)
            if user not in ['anonymous', 'registered']:
                self.assertEqual(resp.status_code, 200)
                json = simplejson.loads(resp.content)
                if settings.ENABLE_NOTICES:
                    self.assertEqual(json['url'], '/ajax/p/%s/resource/%s/l/%s/toggle_watch/'%
                                 (self.project.slug, self.resource.slug, self.language.code))
                    self.assertEqual(json['style'], 'watch_add')
                    self.assertEqual(json['title'], 'Watch it')
                    self.assertEqual(json['error'], None)
                else:
                    self.assertEqual(json['error'], "Notification is not enabled")
            else:
                if user == 'anonymous':
                    self.assertEqual(resp.status_code, 302)
                else:
                    if settings.ENABLE_NOTICES:
                        self.assertEqual(resp.status_code, 403)
                    else:
                        self.assertContains(resp, "Notification is not enabled", status_code=200)



########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from views import project_toggle_watch, resource_translation_toggle_watch

urlpatterns = patterns('',
    url(
        regex = '^ajax/p/(?P<project_slug>[-\w]+)/toggle_watch/$',
        view = project_toggle_watch,
        name = 'project_toggle_watch',),
    url(
        regex = '^ajax/p/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/l/(?P<language_code>[\-_@\w\.]+)/toggle_watch/$',
        view = resource_translation_toggle_watch,
        name = 'resource_translation_toggle_watch',),
)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.conf import settings
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from django.contrib.auth.decorators import login_required
from django.shortcuts import get_object_or_404
from notification import models as notification

from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.projects.permissions import pr_project_private_perm
from transifex.projects.permissions.project import ProjectPermission
from transifex.resources.models import Resource
from transifex.teams.models import Team
from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.views import (json_result, json_error, permission_denied)

from models import TranslationWatch, WatchException


@login_required
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'))
def resource_translation_toggle_watch(request, project_slug, resource_slug, language_code):
    """Add/Remove a TranslationWatch for a specific user."""

    if request.method != 'POST':
        return json_error(_('Must use POST to activate'))

    if not settings.ENABLE_NOTICES:
        return json_error(_('Notification is not enabled'))

    resource = get_object_or_404(Resource, slug=resource_slug,
                                project__slug=project_slug)
    project = resource.project
    language = get_object_or_404(Language, code=language_code)
    team = Team.objects.get_or_none(project, language_code)

    check = ProjectPermission(request.user)
    if not check.submit_translations(team or project) and not \
        check.maintain(project) and not \
        request.user.has_perm('watches.add_translationwatch') and not \
        request.user.has_perm('watches.delete_translationwatch'):
        return permission_denied(request)

    url = reverse('resource_translation_toggle_watch', args=(project_slug,
        resource_slug, language_code))

    try:
        twatch = TranslationWatch.objects.get(resource=resource,
            language=language)

        result = {
            'style': 'watch_add',
            'title': _('Watch it'),
            'id': twatch.id,
            'url': url,
            'error': None,
        }

        notification.stop_observing(twatch, request.user,
            signal='project_resource_translation_changed')

    except (TranslationWatch.DoesNotExist,
        notification.ObservedItem.DoesNotExist):

        try:
            twatch = TranslationWatch.objects.get_or_create(resource=resource,
                language=language)[0]

            result = {
                'style': 'watch_remove',
                'title': _('Stop watching'),
                'id': twatch.id,
                'url': url,
                'error': None,
            }

            notification.observe(twatch, request.user,
                'project_resource_translation_changed',
                signal='project_resource_translation_changed')

        except WatchException, e:
            return json_error(e.message, result)
    return json_result(result)


@login_required
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=False)
def project_toggle_watch(request, project_slug):
    """Add/Remove watches on a project for a specific user."""
    if request.method != 'POST':
        return json_error(_('Must use POST to activate'))

    if not settings.ENABLE_NOTICES:
        return json_error(_('Notification is not enabled'))

    project = get_object_or_404(Project, slug=project_slug)
    url = reverse('project_toggle_watch', args=(project_slug,))

    project_signals = ['project_changed',
                       'project_deleted',
                       'project_release_added',
                       'project_release_deleted',
                       'project_resource_added',
                       'project_resource_deleted']
    release_signals = ['project_release_changed',]

    resource_signals = ['project_resource_changed']
    try:
        result = {
            'style': 'watch_add',
            'title': _('Watch this project'),
            'project': True,
            'url': url,
            'error': None,
        }

        for signal in project_signals:
            try:
                notification.stop_observing(project, request.user, signal)
            except notification.ObservedItem.MultipleObjectsReturned, e:
                notification.ObservedItem.objects.filter(user=request.user,
                        signal=signal, content_type__model='project',
                        object_id = project.id).delete()
        for release in project.releases.all():
            for signal in release_signals:
                try:
                    notification.stop_observing(release, request.user, signal)
                except notification.ObservedItem.MultipleObjectsReturned, e:
                    notification.ObservedItem.objects.filter(user=request.user,
                        signal=signal, content_type__model='release',
                        object_id = release.id).delete()
        for resource in project.resources.all():
            for signal in resource_signals:
                try:
                    notification.stop_observing(resource, request.user, signal)
                except notification.ObservedItem.MultipleObjectsReturned, e:
                    notification.ObservedItem.objects.filter(user=request.user,
                        signal=signal, content_type__model='resource',
                        object_id=resource.id).delete()

    except notification.ObservedItem.DoesNotExist:
        try:
            result = {
                'style': 'watch_remove',
                'title': _('Stop watching this project'),
                'project': True,
                'url': url,
                'error': None,
            }

            for signal in project_signals:
                notification.observe(project, request.user, signal, signal)
            for release in project.releases.all():
                for signal in release_signals:
                    notification.observe(release, request.user, signal, signal)
            for resource in project.resources.all():
                for signal in resource_signals:
                    notification.observe(resource, request.user, signal, signal)

        except WatchException, e:
            return json_error(e.message, result)
    return json_result(result)

########NEW FILE########
__FILENAME__ = admin
# -*- coding: utf-8 -*-

from django.contrib import admin
from webhooks.models import WebHook


class WebHookAdmin(admin.ModelAdmin):
    pass

admin.site.register(WebHook, WebHookAdmin)

########NEW FILE########
__FILENAME__ = handlers
# -*- coding: utf-8 -*-

"""
Handlers for the addon.
"""

import requests
from django.db.models import get_model
from django import forms
from django.utils.translation import ugettext_lazy as _
from transifex.txcommon.log import logger
from transifex.txcommon.validators import validate_http_url
from transifex.resources.signals import post_update_rlstats
from transifex.projects.signals import project_form_init, post_proj_save_m2m
from webhooks.models import WebHook


def visit_url(sender, **kwargs):
    """Visit the URL for the project.

    Send the slug of the project, the slug of the resource and the language
    of the translation as identifiers. Send the translation percentage
    as information.

    Args:
        sender: The rlstats object itself.
    Returns:
        True of False for success (or not).
    """
    # TODO make it a celery task
    # TODO increase the timeout in celery

    stats = sender
    resource = stats.resource
    project = resource.project
    language = stats.language

    if 'post_function' in kwargs:
        post_function = kwargs['post_function']
    else:
        post_function = requests.post

    hooks = WebHook.objects.filter(project=project)
    if not hooks:
        logger.debug("Project %s has no web hooks" % project.slug)
        return

    event_info = {
        'project': project.slug,
        'resource': resource.slug,
        'language': language.code,
        'percent': stats.translated_perc,
    }
    logger.debug(
        "POST data for %s: %s" % (stats.resource.project.slug, event_info)
    )

    for hook in hooks:
        res = post_function(hook.url,
          data=event_info, allow_redirects=False, timeout=2.0)

        if res.ok:
            logger.debug("POST for project %s successful." % project)
        else:
            msg = "Error visiting webhook %s: HTTP code is %s" % (
              hook, res.status_code)
            logger.error(msg)


def add_web_hook_field(sender, **kwargs):
    """Add the field for a web hook to the project edit form."""
    form = kwargs['form']
    project =form.instance

    try:
        url = WebHook.objects.get(project=project, kind='p').url
    except WebHook.DoesNotExist:
        url = ''

    form.fields['webhook'] = forms.URLField(
        verify_exists=False, required=False, initial=url,
        label=_("Web hook URL"), validators=[validate_http_url, ],
        help_text=_("You can specify a URL which Transifex will visit whenever "
                    "a translation of a resource of the project is changed.")
    )


def save_web_hook(sender, **kwargs):
    """Save a web hook, after saving a project (if defined)."""
    project = kwargs['instance']
    form = kwargs['form']
    url = form.cleaned_data['webhook']
    if url:
        try:
            hook, created = WebHook.objects.get_or_create(
                project=project, kind='p', defaults={'url': url}
            )
            if not created:
                hook.url = url
                hook.save()
        except Exception, e:
            logger.error("Error saving hook for project %s: %s" % (project, e))


def connect():
    # TODO catch other cases, too (eg project.pre_delete
    post_update_rlstats.connect(visit_url)
    project_form_init.connect(add_web_hook_field)
    post_proj_save_m2m.connect(save_web_hook)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'WebHook'
        db.create_table('webhooks_webhook', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('project', self.gf('django.db.models.fields.related.OneToOneField')(related_name='webhook', unique=True, to=orm['projects.Project'])),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200)),
        ))
        db.send_create_signal('webhooks', ['WebHook'])


    def backwards(self, orm):
        
        # Deleting model 'WebHook'
        db.delete_table('webhooks_webhook')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'webhooks.webhook': {
            'Meta': {'object_name': 'WebHook'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'webhook'", 'unique': 'True', 'to': "orm['projects.Project']"}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['webhooks']

########NEW FILE########
__FILENAME__ = 0002_allow_many_hooks_to_a_project
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Removing unique constraint on 'WebHook', fields ['project']
        db.delete_unique('webhooks_webhook', ['project_id'])

        # Changing field 'WebHook.project'
        db.alter_column('webhooks_webhook', 'project_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['projects.Project']))


    def backwards(self, orm):
        
        # Changing field 'WebHook.project'
        db.alter_column('webhooks_webhook', 'project_id', self.gf('django.db.models.fields.related.OneToOneField')(unique=True, to=orm['projects.Project']))

        # Adding unique constraint on 'WebHook', fields ['project']
        db.create_unique('webhooks_webhook', ['project_id'])


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'webhooks.webhook': {
            'Meta': {'object_name': 'WebHook'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'webhook'", 'to': "orm['projects.Project']"}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['webhooks']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_webhook_kind
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'WebHook.kind'
        db.add_column('webhooks_webhook', 'kind', self.gf('django.db.models.fields.CharField')(default='a', max_length=1), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'WebHook.kind'
        db.delete_column('webhooks_webhook', 'kind')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'webhooks.webhook': {
            'Meta': {'object_name': 'WebHook'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.CharField', [], {'default': "'a'", 'max_length': '1'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'webhook'", 'to': "orm['projects.Project']"}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['webhooks']

########NEW FILE########
__FILENAME__ = 0004_add_index_to_projects
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding index on 'WebHook', fields ['project']
        db.create_index('webhooks_webhook', ['project_id'])


    def backwards(self, orm):
        
        # Removing index on 'WebHook', fields ['project']
        db.delete_index('webhooks_webhook', ['project_id'])


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'webhooks.webhook': {
            'Meta': {'object_name': 'WebHook'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.CharField', [], {'default': "'a'", 'max_length': '1'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'webhook'", 'to': "orm['projects.Project']"}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['webhooks']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-

"""
Models for the web hook addon.
"""

from django.db import models
from django.utils.translation import ugettext_lazy as _
from transifex.txcommon.validators import validate_http_url


class WebHook(models.Model):
    """A model for web hooks.

    Each project may have one web hook with a URL to hit whenever on of the
    translations is changed.
    """

    project = models.ForeignKey(
        'projects.Project', related_name='webhook', verbose_name=_('Project'),
        db_index=True, help_text=_('The id of the project for the web hook.')

    )
    url = models.URLField(
        verbose_name=_('URL'), validators=[validate_http_url, ],
        help_text=_('The URL to send the notification to.')
    )

    kind = models.CharField(
        verbose_name=_('Kind'), choices=[('a', 'Txapp'), ('p', 'Project')],
        default='a', max_length=1,
        help_text=_("The kind of web hook (apps or project)")
    )

    def __unicode__(self):
        return '<Webhoook for %s: %s>' % (self.project.slug, self.url)


########NEW FILE########
__FILENAME__ = tests
# -*- coding: utf-8 -*-

"""
Tests for the webhook addon.
"""

from __future__ import with_statement
from mock import patch
from django.core.exceptions import ValidationError
from transifex.txcommon.log import logger
from transifex.txcommon.tests.base import BaseTestCase
from webhooks.models import WebHook
from webhooks.handlers import visit_url, add_web_hook_field, save_web_hook
from transifex.resources.models import RLStats
from transifex.projects.forms import ProjectForm


class TestWebHooks(BaseTestCase):
    """Test the web hooks addon."""

    def setup():
        super(TestWebHooks, self).setUp()
        self.web_hook = WebHook.objects.create(
            project=self.project, url='https://127.0.0.1'
        )

    def test_no_hook(self):
        """Test the case where the project hasn't defined a web hook."""
        stats = RLStats.objects.get(
            resource=self.resource, language=self.language_en
        )
        with patch.object(logger, 'error') as log_mock:
            visit_url(sender=stats)
            self.assertFalse(log_mock.called)

    def test_wrong_url(self):
        """Test that an error occurs, if you try to create a web hook
        with a local URI.
        """
        hook = WebHook.objects.create(
            project=self.project, url='file:///etc/passwd'
        )
        self.assertRaises(ValidationError, hook.full_clean)

    def test_error_response(self):
        stats = RLStats.objects.get(
            resource=self.resource, language=self.language_en
        )
        web_hook = WebHook.objects.create(
            project=self.resource.project, url='https://127.0.0.1'
        )
        with patch.object(logger, 'error') as log_mock:
            visit_url(stats, post_function=_mock_error_request)
            self.assertTrue(log_mock.called)

    def test_successful_response(self):
        stats = RLStats.objects.get(
            resource=self.resource, language=self.language_en
        )
        web_hook = WebHook.objects.create(
            project=self.resource.project, url='https://127.0.0.1'
        )
        with patch.object(logger, 'error') as log_mock:
            visit_url(stats, post_function=_mock_successful_request)
            self.assertFalse(log_mock.called)


class TestWebHookHandlers(BaseTestCase):
    """Test signal handlers for project edit form."""

    def test_add_field(self):
        kwargs = {'form': ProjectForm()}
        add_web_hook_field(None, **kwargs)
        self.assertIn('webhook', kwargs['form'].fields)


def _mock_successful_request(*args, **kwargs):
    """Mock a request and return a success status code."""
    return MockResponse(200)


def _mock_error_request(*args, **kwargs):
    """Mock a request and return an error status code."""
    return MockResponse(400)


class MockResponse(object):
    """Mock a response object.

    Mimic the response object of the requests library.
    """

    def __init__(self, code):
        self.status_code = code
        self.ok = self.status_code == 200

########NEW FILE########
__FILENAME__ = models

########NEW FILE########
__FILENAME__ = tests
# -*- coding: utf-8 -*-
from transifex.txcommon.tests.base import BaseTestCase
from django.core.urlresolvers import reverse
from django.conf import settings
from django.test.client import Client
from transifex.projects.models import Project

class TestCharts(BaseTestCase):
    def setUp(self):
        super(TestCharts, self).setUp()

    def tearDown(self):
        super(TestCharts, self).tearDown()

    def test_main(self):
        # Check if widgets page is available
        resp = self.client['registered'].get(reverse('project_widgets',
            kwargs={'project_slug': self.project.slug}))
        self.assertEqual(resp.status_code, 200)
        # Check if we got correct file
        self.assertTrue("code_snippet" in resp.content)
########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from views import view_project_widgets

urlpatterns = patterns('',
    url(
        regex = '^projects/p/(?P<project_slug>[-\w]+)/widgets/$',
        view = view_project_widgets,
        name = 'project_widgets',
    )
)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.core.exceptions import PermissionDenied
from django.http import HttpResponse
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from transifex.projects.models import Project
from transifex.projects.permissions import pr_project_private_perm
from transifex.resources.models import Resource
from transifex.txcommon.context_processors import site_url_prefix_processor
from transifex.txcommon.decorators import one_perm_required_or_403

def view_project_widgets(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    if project.private:
        raise PermissionDenied
    resources = Resource.objects.filter(project=project)
    if len(resources) > 0:
        default_resource = resources[0]
    else:
        default_resource = None
    return render_to_response("project_widgets.html",
        {
            'project' : project,
            'project_widgets' : True,
            'default_resource' : default_resource,
            'resources' : resources,
        },
        RequestContext(request, {}, [site_url_prefix_processor]))
########NEW FILE########
__FILENAME__ = authentication
import binascii
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib.auth.models import User, AnonymousUser
from django.contrib.auth import authenticate
from piston.authentication import HttpBasicAuthentication

class CustomHttpBasicAuthentication(HttpBasicAuthentication):
    """
    Basic Http Authenticator that also checks if the user is currently
    registered with Django.
    """

    def is_authenticated(self, request):
        auth_string = request.META.get('HTTP_AUTHORIZATION', None)

        if auth_string:

            try:
                (authmeth, auth) = auth_string.split(" ", 1)

                if not authmeth.lower() == 'basic':
                    return False

                auth = auth.strip().decode('base64')
                (username, password) = auth.split(':', 1)
            except (ValueError, binascii.Error):
                return False


            request.user = self.auth_func(username=username, password=password) \
                or AnonymousUser()

        return not request.user in (False, None, AnonymousUser())

########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from django.views.decorators.cache import never_cache
from piston.resource import Resource
#from piston.authentication import OAuthAuthentication
from transifex.api.authentication import CustomHttpBasicAuthentication

#TODO: Implement full support for OAUTH and refactor URLs!
#auth = OAuthAuthentication(realm='Transifex API')

from transifex.languages.api import LanguageHandler
from transifex.projects.api import ProjectHandler
from transifex.resources.api import ResourceHandler, StatsHandler, \
        TranslationHandler, FormatsHandler, TranslationObjectsHandler,\
        SingleTranslationHandler
from transifex.releases.api import ReleaseHandler
from transifex.actionlog.api import ActionlogHandler
from transifex.api.views import reject_legacy_api

auth = CustomHttpBasicAuthentication(realm='Transifex API')

resource_handler = Resource(ResourceHandler, authentication=auth)
release_handler = Resource(ReleaseHandler, authentication=auth)
project_handler = Resource(ProjectHandler, authentication=auth)
stats_handler = Resource(StatsHandler, authentication=auth)
translation_handler = Resource(TranslationHandler, authentication=auth)
actionlog_handler = Resource(ActionlogHandler, authentication=auth)
formats_handler = Resource(FormatsHandler, authentication=auth)
translation_objects_handler = Resource(TranslationObjectsHandler,
        authentication=auth)
single_translation_handler = Resource(SingleTranslationHandler,
        authentication=auth)

urlpatterns = patterns('',
    url(
        r'^languages/$',
        reject_legacy_api,
        {'api_version': 1},
        name='api.languages',
    ), url(
        r'^projects/$',
        reject_legacy_api,
        {'api_version': 1},
        name='api_projects',
    ), url(
        r'^project/',
        reject_legacy_api,
        {'api_version': 1},
        name='api_project',
     ), url(
        r'^storage/',
        reject_legacy_api,
        {'api_version': 1},
        name='api.storage',
    ), url(
        r'^1/',
        reject_legacy_api,
        {'api_version': 1},
        name='api.languages',
    ), url(
        r'^2/projects/$',
        never_cache(project_handler),
        {'api_version': 2},
        name='apiv2_projects',
    ), url(
        r'^2/project/(?P<project_slug>[-\w]+)/$',
        never_cache(project_handler),
        {'api_version': 2},
        name='apiv2_project',
    ), url(
        r'^2/project/(?P<project_slug>[-\w]+)/resources/$',
        never_cache(resource_handler),
        {'api_version': 2},
        name='apiv2_resources',
    ), url(
        r'^2/project/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/$',
        never_cache(resource_handler),
        {'api_version': 2},
        name='apiv2_resource',
    ), url(
        r'^2/project/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/content/$',
        never_cache(translation_handler),
        {'api_version': 2, 'lang_code': 'source'},
        name='apiv2_source_content',
    ), url(
        r'^2/project/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/pseudo/$',
        never_cache(translation_handler),
        {'api_version': 2, 'lang_code': 'source', 'is_pseudo':True},
        name='apiv2_pseudo_content',
    ), url(
        r'^2/project/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/translation/(?P<lang_code>[\-_@\w\.]+)/$',
        never_cache(translation_handler),
        {'api_version': 2},
        name='apiv2_translation',
    ), url(
        r'^2/project/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/stats/$',
        never_cache(stats_handler),
        {'api_version': 2, 'lang_code': None},
        name='apiv2_stats',
    ), url(
        r'^2/project/(?P<project_slug>[-\w]+)/resource/(?P<resource_slug>[-\w]+)/stats/(?P<lang_code>[\-_@\w\.]+)/$',
        never_cache(stats_handler),
        {'api_version': 2},
        name='apiv2_stats',
    ), url(
        r'^2/project/(?P<project_slug>[-\w]+)/release/(?P<release_slug>[-\w]+)/$',
        never_cache(release_handler),
        {'api_version': 2},
        name='apiv2_release',
    ), url(
        r'^2/actionlog/$',
        actionlog_handler,
        {'api_version': 2},
        name='global_actionlogs',
    ), url(
        r'^2/accounts/profile/(?P<username>[\.\w-]+)/actionlog/$',
        actionlog_handler,
        {'api_version': 2},
        name='user_actionlogs',
    ), url(
        r'^2/project/(?P<project_slug>[\w-]+)/actionlog/$',
        actionlog_handler,
        {'api_version': 2},
        name='project_actionlogs',
    ), url(
        r'^2/projects/actionlog/$',
        actionlog_handler,
        {'api_version': 2},
        name='projects_actionlogs',
    ), url(
        r'^2/project/(?P<project_slug>[\w-]+)/teams/actionlog/$',
        actionlog_handler,
        {'api_version': 2},
        name='project_teams_actionlogs',
    ), url(
        r'^2/project/(?P<project_slug>[\w-]+)/team/(?P<language_code>[\-_@\w\.]+)/actionlog/$',
        actionlog_handler,
        {'api_version': 2},
        name='project_team_actionlogs',
    ), url(
        r'^2/project/(?P<project_slug>[\w-]+)/releases/actionlog/$',
        actionlog_handler,
        {'api_version': 2},
        name='project_releases_actionlogs',
    ), url(
        r'^2/project/(?P<project_slug>[\w-]+)/r/(?P<release_slug>[\w-]+)/actionlog/$',
        actionlog_handler,
        {'api_version': 2},
        name='project_release_actionlogs',
    ), url(
        r'^2/project/(?P<project_slug>[\w-]+)/resources/actionlog/$',
        actionlog_handler,
        {'api_version': 2},
        name='project_resources_actionlogs',
    ), url(
        r'^2/project/(?P<project_slug>[\w-]+)/resource/(?P<resource_slug>[\w-]+)/actionlog/$',
        actionlog_handler,
        {'api_version': 2},
        name='project_resource_actionlogs',
    ), url(
       r'^2/formats/$',
       formats_handler,
       {'api_version': 2},
       name='supported_formats',
    ), url(
       r'^2/project/(?P<project_slug>[\w-]+)/resource/(?P<resource_slug>[\w-]+)/translation/(?P<language_code>[\-_@\w\.]+)/strings/$',
       translation_objects_handler,
       {'api_version': 2},
       name='translation_strings'
    ), url(
       r'^2/project/(?P<project_slug>[\w-]+)/resource/(?P<resource_slug>[\w-]+)/translation/(?P<language_code>[\-_@\w\.]+)/string/(?P<source_hash>[0-9a-f]{32})/$',
       single_translation_handler,
       {'api_version': 2},
       name='translation_string'
    )
)

########NEW FILE########
__FILENAME__ = utils
from django.http import HttpResponse

class BAD_REQUEST(HttpResponse):
    """
    A class extending HttpResponse for creating user friendly error messages
    on HTTP 400 errors from the API.
    """
    def __init__(self, content='',status=400,content_type="text/plain"):
        super(BAD_REQUEST, self).__init__(content=content, status=status,
            content_type=content_type)


class FORBIDDEN_REQUEST(HttpResponse):
    """
    A class extending HttpResponse for creating user friendly error messages
    on HTTP 403 errors from the API.
    """
    def __init__(self, content='',status=403,content_type="text/plain"):
        super(FORBIDDEN_REQUEST, self).__init__(content=content, status=status,
            content_type=content_type)

class NOT_FOUND_REQUEST(HttpResponse):
    """
    A class extending HttpResponse for creating user friendly error messages
    on HTTP 404 errors from the API.
    """
    def __init__(self, content='',status=404,content_type="text/plain"):
        super(NOT_FOUND_REQUEST, self).__init__(content=content, status=status,
            content_type=content_type)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.http import HttpResponseBadRequest
from django.utils.translation import ugettext as _

def reject_legacy_api(request, *args, **kwargs):
    return HttpResponseBadRequest(_("This version of API is obsolete. "\
            "Please have a look at %(url)s for details."
            ) % {'url': 'http://help.transifex.com/features/api/'\
                    'index.html#api-index' }
    )


########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from models import Language

class LanguageAdmin(admin.ModelAdmin):
    search_fields = ['name', 'code', 'code_aliases']

admin.site.register(Language, LanguageAdmin)


########NEW FILE########
__FILENAME__ = api
# -*- coding: utf-8 -*-
from piston.handler import BaseHandler
from piston.utils import rc
from django.template.defaultfilters import slugify
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.txcommon.log import logger
from django.db import transaction
from uuid import uuid4

class LanguageHandler(BaseHandler):
    """
    API call for retrieving languages available on Tx

    [
        {
            'code' : 'cd',
            'code_aliases : ' cd-al1 cd-al2 ... ',
            'name' : Language name'
        },
        ...
    ]
    """
    allowed_methods = ('GET',)
    model = Language
    fields = ('code', 'code_aliases', 'name')
    def read(self, request):
        logger.debug("Returned list of all languages")
        return Language.objects.all()

########NEW FILE########
__FILENAME__ = feeds
from django.core.exceptions import ObjectDoesNotExist
from django.core.urlresolvers import reverse
from django.conf import settings
from django.shortcuts import get_object_or_404
from django.utils.translation import ugettext_lazy as _
from django.contrib.syndication.feeds import Feed
from django.contrib.sites.models import Site
from models import Language
from transifex.txcommon.utils import key_sort
current_site = Site.objects.get_current()

class AllLanguages(Feed):
    current_site = Site.objects.get_current()
    title = _("Languages on %(site_name)s") % {
        'site_name': current_site.name }
    link = current_site.domain
    description = _("The languages spoken on %s.") % current_site.name

    def items(self):
        return Language.objects.all()

    # FIXME: Pointing language details page link to language list page, once
    # it's disabled for now.
    def item_link(self, item):
        return reverse("language_list")

########NEW FILE########
__FILENAME__ = txlanguages
# -*- coding: utf-8 -*-
"""
File containing the necessary mechanics for the txlanguages management command.
"""
from optparse import make_option, OptionParser
import os.path
import sys
from django.db import transaction
from django.utils import simplejson
from django.core import serializers
from django.core.management.base import (BaseCommand, LabelCommand, CommandError)
from django.conf import settings
from transifex.languages.models import Language

_DEFAULT_FIXTURE = 'languages/fixtures/all_languages.json'

_help_text = ('Create, Update, or Export the default languages.\n'
        '\t--export [filename] for export to stdout or to the filename '
        '(filename is optional)\n'
        '\t--import [filename] to import from a file. If not given will try '
        'to load data from the default fixture file (%s)\n' %
        _DEFAULT_FIXTURE)


class Command(LabelCommand):
    """
    Management Command Class about language updates
    """
    help = _help_text
    option_list = LabelCommand.option_list + (
        make_option('--import', action='store_true',
                    dest='doimport', default=False,
            help='Import data from a file or from the default '),
        make_option('--export', action='store_true',
                    dest='doexport', default=False,
            help='Be more verbose in reporting progress.'),
    )

    requires_model_validation = False
    can_import_settings = True

    def handle(self, *args, **options):
        verbose = int(options.get('verbosity'))
        doimport = options.get('doimport')
        doexport = options.get('doexport')

        if doimport and doexport:
            raise CommandError("The arguments '--import' and '--export' can "
                "not be used simultaneously.")

        if doimport:
            import_lang(filename=get_filename(args), verbose=verbose)
            return
        if doexport:
            export_lang(filename=get_filename(args), verbose=verbose)
            return

        #default functionality of previous version.
        import_lang(verbose=verbose)

def export_lang(filename=None, verbose=False):
    """
    Export the already existing languages

    Just like the dumpdata does but just for a specific model it serializes the
    models contents and depending on the filename it either writes to it or to
    stdout.
    """
    print 'Exporting languages...'
    data = serializers.serialize("json", Language.objects.all().order_by('id'),
        indent=2)
    if filename:
        storefile = None
        try:
            storefile = open(filename, 'w')
            storefile.write(data)
        except:
            pass
        if storefile:
            storefile.close()
    else:
        sys.stdout.write(data)

def import_lang(filename=None, verbose=False):
    """
    Import languages

    Input (optional) : filepath(relative or full) to the json file
    If not given load the default fixture.

    Its logic is simple:
        1) Open the fixture file
        2) Read the json data
        3) For each model's object at the json data update references in the db
    """
    if verbose:
        sys.stdout.write('Importing initial set of languages...\n')

    if not filename:
        filename = os.path.abspath(os.path.join(settings.TX_ROOT,
                                                _DEFAULT_FIXTURE))
        if not os.path.exists(filename):
            raise CommandError("Could not find fixture %s." % filename)

    if verbose:
        print (u'Importing languages from %s' % filename).encode('UTF-8')

    try:
        datafile = open(filename, 'r')
    except IOError:
        print (u'Cannot open %s' % filename).encode('UTF-8')
        return
    except:
        print "Unexpected error: %s" % sys.exc_info()[0]
        return

    data = simplejson.load(datafile)
    if verbose:
        fill_the_database_verbose(data)
    else:
        fill_the_database_silently(data)

@transaction.commit_on_success
def fill_the_database_verbose(data):
    """
    Update the language object and be verbose about it.
    """
    for obj in data:
        fields = obj['fields']
        lang, created = Language.objects.get_or_create(code=fields['code'])
        if created:
            print (u'Creating %s language (%s)' % (fields['name'], fields['code'])).encode('UTF-8')
        else:
            print (u'Updating %s language (%s)' % (fields['name'], fields['code'])).encode('UTF-8')
        fill_language_data(lang, fields)

@transaction.commit_on_success
def fill_the_database_silently(data):
    """
    Update the language object without producing any more noise.
    """
    for obj in data:
        fields = obj['fields']
        lang, created = Language.objects.get_or_create(code=fields['code'])
        fill_language_data(lang, fields)

def fill_language_data(lang, fields):
    """
    Based on the fields update the lang object.
    """
    lang.code_aliases = fields['code_aliases']
    lang.name = fields['name']
    lang.description = fields['description']
    lang.specialchars = fields['specialchars']
    lang.nplurals = fields['nplurals']
    lang.pluralequation = fields['pluralequation']
    lang.rule_zero = fields['rule_zero']
    lang.rule_one = fields['rule_one']
    lang.rule_two = fields['rule_two']
    lang.rule_few = fields['rule_few']
    lang.rule_many = fields['rule_many']
    lang.rule_other = fields['rule_other']
    lang.save()

def get_filename(args):
    ret=None
    try:
        ret=args[0]
    except:
        pass
    return ret

########NEW FILE########
__FILENAME__ = 0001_initial

from south.db import db
from django.db import models
from transifex.languages.models import Language

class Migration:

    def forwards(self, orm):

        # Adding model 'Language'
        db.create_table('translations_language', (
            ('code_aliases', models.CharField(_('Code aliases'), default='', max_length=100, null=True)),
            ('code', models.CharField(_('Code'), max_length=50, unique=True)),
            ('description', models.CharField(_('Description'), max_length=255, blank=True)),
            ('pluralequation', models.CharField(_("Plural Equation"), max_length=255, blank=True)),
            ('nplurals', models.SmallIntegerField(_("Number of Plurals"), default=0)),
            ('specialchars', models.CharField(_("Special Chars"), max_length=255, blank=True)),
            ('id', models.AutoField(primary_key=True)),
            ('name', models.CharField(_('Name'), max_length=50, unique=True)),
        ))
        db.send_create_signal('languages', ['Language'])



    def backwards(self, orm):

        # Deleting model 'Language'
        db.delete_table('translations_language')



    models = {
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'db_table': "'translations_language'"},
            'code': ('models.CharField', ["_('Code')"], {'max_length': '50', 'unique': 'True'}),
            'code_aliases': ('models.CharField', ["_('Code aliases')"], {'default': "''", 'max_length': '100', 'null': 'True'}),
            'description': ('models.CharField', ["_('Description')"], {'max_length': '255', 'blank': 'True'}),
            'id': ('models.AutoField', [], {'primary_key': 'True'}),
            'name': ('models.CharField', ["_('Name')"], {'max_length': '50', 'unique': 'True'}),
            'nplurals': ('models.SmallIntegerField', ['_("Number of Plurals")'], {'default': '0'}),
            'pluralequation': ('models.CharField', ['_("Plural Equation")'], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('models.CharField', ['_("Special Chars")'], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['languages']

########NEW FILE########
__FILENAME__ = 0002_added_rules_f
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    depends_on = (
        ("languages", "0001_initial"),
    )

    def forwards(self, orm):

        # Adding field 'Language.rule_zero'
        db.add_column('translations_language', 'rule_zero', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'Language.rule_one'
        db.add_column('translations_language', 'rule_one', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'Language.rule_two'
        db.add_column('translations_language', 'rule_two', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'Language.rule_few'
        db.add_column('translations_language', 'rule_few', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'Language.rule_many'
        db.add_column('translations_language', 'rule_many', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'Language.rule_other'
        db.add_column('translations_language', 'rule_other', self.gf('django.db.models.fields.CharField')(default='everything', max_length=255), keep_default=False)

        # Changing field 'Language.code_aliases'
        db.alter_column('translations_language', 'code_aliases', self.gf('django.db.models.fields.CharField')(max_length=100, null=True))

        # Changing field 'Language.code'
        db.alter_column('translations_language', 'code', self.gf('django.db.models.fields.CharField')(unique=True, max_length=50))

        # Changing field 'Language.description'
        db.alter_column('translations_language', 'description', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True))

        # Changing field 'Language.pluralequation'
        db.alter_column('translations_language', 'pluralequation', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True))

        # Changing field 'Language.nplurals'
        db.alter_column('translations_language', 'nplurals', self.gf('django.db.models.fields.SmallIntegerField')())

        # Changing field 'Language.specialchars'
        db.alter_column('translations_language', 'specialchars', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True))

        # Changing field 'Language.name'
        db.alter_column('translations_language', 'name', self.gf('django.db.models.fields.CharField')(unique=True, max_length=50))


    def backwards(self, orm):

        # Deleting field 'Language.rule_zero'
        db.delete_column('translations_language', 'rule_zero')

        # Deleting field 'Language.rule_one'
        db.delete_column('translations_language', 'rule_one')

        # Deleting field 'Language.rule_two'
        db.delete_column('translations_language', 'rule_two')

        # Deleting field 'Language.rule_few'
        db.delete_column('translations_language', 'rule_few')

        # Deleting field 'Language.rule_many'
        db.delete_column('translations_language', 'rule_many')

        # Deleting field 'Language.rule_other'
        db.delete_column('translations_language', 'rule_other')

        # Changing field 'Language.code_aliases'
        db.alter_column('translations_language', 'code_aliases', self.gf('models.CharField')(_('Code aliases'), max_length=100, null=True))

        # Changing field 'Language.code'
        db.alter_column('translations_language', 'code', self.gf('models.CharField')(_('Code'), unique=True, max_length=50))

        # Changing field 'Language.description'
        db.alter_column('translations_language', 'description', self.gf('models.CharField')(_('Description'), max_length=255, blank=True))

        # Changing field 'Language.pluralequation'
        db.alter_column('translations_language', 'pluralequation', self.gf('models.CharField')(_("Plural Equation"), max_length=255, blank=True))

        # Changing field 'Language.nplurals'
        db.alter_column('translations_language', 'nplurals', self.gf('models.SmallIntegerField')(_("Number of Plurals")))

        # Changing field 'Language.specialchars'
        db.alter_column('translations_language', 'specialchars', self.gf('models.CharField')(_("Special Chars"), max_length=255, blank=True))

        # Changing field 'Language.name'
        db.alter_column('translations_language', 'name', self.gf('models.CharField')(_('Name'), unique=True, max_length=50))


    models = {
        'languages.language': {
            'Meta': {'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['languages']

########NEW FILE########
__FILENAME__ = 0003_changed_rules_equations
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.core.management import call_command
from django.db import models

class Migration(DataMigration):

    depends_on = (
        ('resources', '0009_added_translation_wordcount',),
    )

    def forwards(self, orm):
        """
        Drop extra remaining translations after decreasing the nplural of
        some languages.
        """

        def get_pluralrules_numbers(t):
            """
            Clone of the method available in resources.models.Translation.
            This is needed once the south orm object does have access to class
            methods.

            The arg `t` must be a Translation object.
            """

            rules=[]
            if t.rule_zero:
                rules.append(0)
            if t.rule_one:
                rules.append(1)
            if t.rule_two:
                rules.append(2)
            if t.rule_few:
                rules.append(3)
            if t.rule_many:
                rules.append(4)
            rules.append(5)
            return rules

        # Making sure languages are updated from the latest fixture
        #FIXME: Doesn't seem to work. It's not been saved into the db. :/
        call_command('txlanguages', '--import', verbosity=2)


        # Migration for languages that had its nplurals decreased
        # Remove extra (unneeded) translations
        LANGS = ['bs', 'hr', 'sr', 'uk']

        for l in LANGS:
            for lang in orm.Language.objects.filter(code__startswith=l):
                rule = get_pluralrules_numbers(lang)[-2:][0]
                orm['resources.Translation'].objects.filter(language=lang,
                    rule__gt=rule).exclude(rule=5).delete()


        # Migration for languages that had its nplurals increased
        # Remove all translations and add the 'other' one as a suggestion.
        LANGS = ['ga']

        for l in LANGS:
            translations = orm['resources.Translation'].objects.filter(
                language__code__startswith=l, source_entity__pluralized=True,
                rule=5)
            print translations
            for t in translations:
                sug, created = orm['suggestions.Suggestion'].objects.get_or_create(
                    string = t.string,
                    source_entity = t.source_entity,
                    language = t.language)

                if created and t.user:
                    sug.user = t.user
                    sug.save()

            orm['resources.Translation'].objects.filter(
                language__code__startswith=l,
                source_entity__pluralized=True).delete()

    def backwards(self, orm):

        raise Exception("Cannot reverse this migration.")


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        },
        'suggestions.suggestion': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'string_hash'),)", 'object_name': 'Suggestion'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'score': ('django.db.models.fields.FloatField', [], {'default': '0', 'blank': 'True'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suggestions'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
        },
        'suggestions.vote': {
            'Meta': {'unique_together': "(('suggestion', 'user'),)", 'object_name': 'Vote'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'suggestion': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'votes'", 'to': "orm['suggestions.Suggestion']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'votes'", 'to': "orm['auth.User']"}),
            'vote_type': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        }
    }

    complete_apps = ['resources', 'suggestions', 'languages']

########NEW FILE########
__FILENAME__ = 0004_changed_russian_plural
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.core.management import call_command
from django.db import models

"""
Additional migrations (langs: ru) accidentaly left out from r2803.

Refer to 0003_changed_rules_equations for more information.
"""

def get_pluralrules_numbers(t):
    """
    Clone of the method available in resources.models.Translation.
    This is needed once the south orm object does have access to class
    methods.

    The arg `t` must be a Translation object.
    """

    rules=[]
    if t.rule_zero:
        rules.append(0)
    if t.rule_one:
        rules.append(1)
    if t.rule_two:
        rules.append(2)
    if t.rule_few:
        rules.append(3)
    if t.rule_many:
        rules.append(4)
    rules.append(5)
    return rules

class Migration(DataMigration):

    depends_on = (
        ('resources', '0009_added_translation_wordcount',),
    )

    def forwards(self, orm):
        """Change Russian nplural and remove rule=5 plural translations."""

        # Make sure languages are updated from the latest fixture.
        # This will change the nplural.
        #FIXME: Doesn't seem to work. It's not been saved into the db. :/
        call_command('txlanguages', '--import', verbosity=2)

        # Remove all rule=5 translations for Russian, to match nplural.
        for lang in orm['languages.Language'].objects.filter(code__startswith='ru'):
            rule = get_pluralrules_numbers(lang)[-2:][0]
            orm['resources.Translation'].objects.filter(
                language=lang, rule__gt=rule).exclude(rule=5).delete()

    def backwards(self, orm):

        raise Exception("Cannot reverse this migration.")


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources', 'languages']

########NEW FILE########
__FILENAME__ = 0005_rename_zh_TWBig5
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        """Remove extra space from zh_TW.Big5 code."""
        try:
            zw_tw_big5 = orm['languages.Language'].objects.get(code='zh_TW.Big5 ')
            zw_tw_big5.code = 'zh_TW.Big5'
            zw_tw_big5.save()
        except orm['languages.Language'].DoesNotExist:
            pass


    def backwards(self, orm):
        """Add the extra space to zh_TW.Big5 code."""
        try:
            zw_tw_big5 = orm['languages.Language'].objects.get(code='zh_TW.Big5')
            zw_tw_big5.code = 'zh_TW.Big5 '
            zw_tw_big5.save()
        except orm['languages.Language'].DoesNotExist:
            pass


    models = {
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['languages']

########NEW FILE########
__FILENAME__ = models
from datetime import datetime
from django.contrib import admin
from django.db import models
from django.db.models import permalink, get_model
from django.core.cache import cache
from django.http import Http404
from django.utils.translation import ugettext_lazy as _
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic


class LanguageManager(models.Manager):
    def by_code_or_alias(self, code):
        """
        Return a language that matches either with the code or something
        inside the code_aliases field.
        """
        if not code:
            raise Language.DoesNotExist("No language matched the query.")
        lang = cache.get('languages:code_or_alias:%s' % code, None)
        if lang is None:
            lang = Language.objects.get(
                models.Q(code=code) |
                models.Q(code_aliases__contains=' %s ' % code)
            )
            cache.set('languages:code_or_alias:%s' % code, lang)
        return lang

    def by_code_or_alias_or_none(self, code):
        """
        Return a language that matches either with the code or something
        inside the code_aliases field. If no match is found return None.
        """
        try:
            return self.by_code_or_alias(code)
        except Language.DoesNotExist:
            return None

    def by_code_or_alias_or_404(self, code):
        """
        Return a language matches the code or something in code_aliases.

        If no match is found, raise a 404 exception.

        This method should be used in views.
        """
        try:
            return self.by_code_or_alias(code)
        except Language.DoesNotExist:
            raise Http404


class Language(models.Model):
    """
    A spoken language or dialect, with a distinct locale.
    """
    nplural_choices = ((0, u'unknown'), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6))

    name = models.CharField(_('Name'), unique=True, max_length=50,
        help_text="The name of the language including dialect, script, etc.")
    description = models.CharField(_('Description'), blank=True, max_length=255)
    code = models.CharField(_('Code'), unique=True, max_length=50,
        help_text=("The primary language code, used in file naming, etc."
                   "(e.g. pt_BR for Brazilian Portuguese.)"))
    code_aliases = models.CharField(_('Code aliases'), max_length=100,
        help_text=("A space-separated list of alternative locales."),
        null=True, blank=True, default='')
    specialchars = models.CharField(_("Special Chars"), max_length=255,
        help_text=_("Enter any special characters that users might find"
                    " difficult to type"),
        blank=True)
    nplurals = models.SmallIntegerField(_("Number of Plurals"), default=0,
        choices=nplural_choices)
    pluralequation = models.CharField(_("Plural Equation"), max_length=255,
        blank=True)

    # Plural rules
    rule_zero = models.CharField(_("Rule zero"), max_length=255,
        blank=True, null=True)
    rule_one = models.CharField(_("Rule one"), max_length=255,
        blank=True, null=True)
    rule_two = models.CharField(_("Rule two"), max_length=255,
        blank=True, null=True)
    rule_few = models.CharField(_("Rule few"), max_length=255,
        blank=True, null=True)
    rule_many = models.CharField(_("Rule many"), max_length=255,
        blank=True, null=True)
    rule_other = models.CharField(_("Rule other"), max_length=255,
        blank=False, null=False, default="everything")


    # Managers
    objects = LanguageManager()

    def __unicode__(self):
        return u'%s (%s)' % (self.name, self.code)

    class Meta:
        verbose_name = _('language')
        verbose_name_plural = _('languages')
        #FIXME: Remove the 'translations' prefix.
        db_table  = 'translations_language'
        ordering  = ('name',)

    def save(self, *args, **kwargs):
        # It's needed to ensure that when we compare this field with the
        # 'contain' action, we will always take the whole alias for a
        # language, instead of part of it. We compare the alias with spaces
        # at the beginning and at the end of it.
        # TODO: check if alias does not already exist
        if not self.code_aliases.startswith(' '):
            self.code_aliases=' %s' % self.code_aliases
        if not self.code_aliases.endswith(' '):
            self.code_aliases='%s ' % self.code_aliases

        super(Language, self).save(*args, **kwargs)

    def get_rule_name_from_num(self, num):
        if num == 0:
            return 'zero'
        elif num == 1:
            return 'one'
        elif num == 2:
            return 'two'
        elif num == 3:
            return 'few'
        elif num == 4:
            return 'many'
        elif num == 5:
            return 'other'

    def get_rule_num_from_name(self, name):
        if name == 'zero':
            return 0
        elif name == 'one':
            return 1
        elif name == 'two':
            return 2
        elif name == 'few':
            return 3
        elif name == 'many':
            return 4
        elif name == 'other':
            return 5

    def get_pluralrules(self):
        rules=[]
        if self.rule_zero:
            rules.append('zero')
        if self.rule_one:
            rules.append('one')
        if self.rule_two:
            rules.append('two')
        if self.rule_few:
            rules.append('few')
        if self.rule_many:
            rules.append('many')
        rules.append('other')
        return rules

    def get_pluralrules_numbers(self):
        rules=[]
        if self.rule_zero:
            rules.append(0)
        if self.rule_one:
            rules.append(1)
        if self.rule_two:
            rules.append(2)
        if self.rule_few:
            rules.append(3)
        if self.rule_many:
            rules.append(4)
        rules.append(5)
        return rules


class LanguagesAsChoices(object):

    def __init__(self):
        self._cache = None

    def __call__(self):
        if self._cache is None:
            self._cache = [(l.code, l) for l in Language.objects.all()]
        return self._cache

language_choice_list = LanguagesAsChoices()


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *
from django.conf import settings
from transifex.languages.models import Language
from transifex.languages.feeds import AllLanguages
from transifex.languages.views import slug_feed

feeds = {
    'all': AllLanguages,
}

#TODO: Temporary until we import view from a common place
SLUG_FEED = 'languages.views.slug_feed'
urlpatterns = patterns('',
    url(
        regex = r'^feed/$',
        view = SLUG_FEED,
        name = 'languages_latest_feed',
        kwargs = {'feed_dict': feeds,
                  'slug': 'all'}),
)


urlpatterns += patterns('django.views.generic',
    url (
        name = 'language_list',
        regex = '^$',
        view = 'list_detail.object_list',
        kwargs = {"template_object_name" : "language",
                  'queryset': Language.objects.all()}
    ),
)

########NEW FILE########
__FILENAME__ = views
import os

from django.http import Http404, HttpResponseRedirect, HttpResponse
from django.shortcuts import render_to_response, get_object_or_404
from django.views.generic import list_detail
from django.utils.translation import ugettext_lazy as _
from django.contrib.syndication.views import feed
from django.template import RequestContext

from models import Language
from transifex.projects.models import Project
from transifex.releases.models import Release

def slug_feed(request, slug=None, param='', feed_dict=None):
    """
    Override default feed, using custom (including nonexistent) slug.

    Provides the functionality needed to decouple the Feed's slug from
    the urlconf, so a feed mounted at "^/feed" can exist.

    See also http://code.djangoproject.com/ticket/6969.
    """
    if slug:
        url = "%s/%s" % (slug, param)
    else:
        url = param
    return feed(request, url, feed_dict)

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python

from django.core.management import execute_manager

try:
    import settings # Assumed to be in the same directory.
except ImportError, e:
    import os
    import sys

    dname = os.path.dirname(__file__)
    sfile = 'settings.py'
    err = sys.stderr.write

    err("ERROR: Cannot locate `%s/%s'\n" % (dname, sfile))
    err("Please re-run `django-admin.py' on the appropriate `%s' file.\n" % sfile)
    err("Details: '%s'\n" % e.message)
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = admin
from django import forms
from django.contrib import admin
from django.utils.translation import ugettext, ungettext, ugettext_lazy as _
from django.contrib.contenttypes import generic
from transifex.projects.models import Project, HubRequest
#from authority.admin import PermissionInline
from authority.models import Permission
from authority import get_choices_for

class PermissionInline(generic.GenericTabularInline):
    model = Permission
    raw_id_fields = ('user', 'group', 'creator')
    extra = 1

    def formfield_for_dbfield(self, db_field, **kwargs):
        if db_field.name == 'codename':
            perm_choices = get_choices_for(self.parent_model)
            kwargs['label'] = _('permission')
            kwargs['widget'] = forms.Select(choices=perm_choices)
        return super(PermissionInline, self).formfield_for_dbfield(db_field, **kwargs)

class ProjectAdmin(admin.ModelAdmin):
    search_fields = ['name', 'description']
    list_display = ['name', 'description']

admin.site.register(Project, ProjectAdmin, inlines=(PermissionInline,))
admin.site.register(HubRequest)


########NEW FILE########
__FILENAME__ = api
# -*- coding: utf-8 -*-
from django.conf import settings
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User
from django.db import transaction, DatabaseError, IntegrityError
from django.http import HttpResponse, HttpResponseServerError
from django.utils import simplejson
from django.utils.translation import ugettext_lazy as _
from django.template.defaultfilters import slugify

from piston.handler import BaseHandler
from piston.utils import rc, throttle, require_mime

from transifex.actionlog.models import action_logging
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.projects.permissions import *
from transifex.projects.permissions.project import ProjectPermission
from transifex.projects.signals import post_submit_translation, post_resource_save
from transifex.resources.decorators import method_decorator
from transifex.resources.formats.registry import registry
from transifex.resources.handlers import get_project_teams
from transifex.resources.models import *
from transifex.teams.models import Team
from transifex.txcommon.log import logger
from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.utils import paginate
from transifex.api.utils import BAD_REQUEST
from uuid import uuid4

# Temporary
from transifex.txcommon import notifications as txnotification


class ProjectHandler(BaseHandler):
    """
    API handler for model Project.
    """
    allowed_methods = ('GET','POST','PUT','DELETE')
    details_fields = (
        'slug', 'name', 'description', 'long_description', 'homepage', 'feed',
        'created', 'anyone_submit', 'bug_tracker', 'trans_instructions',
        'tags', 'outsource', ('maintainers', ('username', )),
        ('owner', ('username', )), ('resources', ('slug', 'name', )),
        'teams', 'source_language_code',
    )
    default_fields = ('slug', 'name', 'description', 'source_language_code', )
    fields = default_fields
    allowed_fields = (
        'name', 'slug', 'description', 'long_description', 'private',
        'homepage', 'feed', 'anyone_submit', 'hidden', 'bug_tracker',
        'trans_instructions', 'tags', 'maintainers', 'outsource',
        'source_language_code',
    )
    exclude = ()

    @classmethod
    def source_language_code(cls, p):
        """Add the source language as a field."""
        return p.source_language.code

    @classmethod
    def teams(cls, p):
        """Show the language codes for which there are teams as list.

        Return an empty list in case there are no teams defined.
        """
        team_set = get_project_teams(p)
        return team_set.values_list('language__code', flat=True)

    def read(self, request, project_slug=None, api_version=1):
        """
        Get project details in json format
        """
        # Reset fields to default value
        ProjectHandler.fields = ProjectHandler.default_fields
        if "details" in request.GET.iterkeys():
            if project_slug is None:
                return rc.NOT_IMPLEMENTED
            ProjectHandler.fields = ProjectHandler.details_fields
        return self._read(request, project_slug)

    @require_mime('json')
    @method_decorator(one_perm_required_or_403(pr_project_add))
    def create(self, request, project_slug=None, api_version=1):
        """
        API call to create new projects via POST.
        """
        data = getattr(request, 'data', None)
        if project_slug is not None:
            return BAD_REQUEST("POSTing to this url is not allowed.")
        if data is None:
            return BAD_REQUEST(
                "At least parameters 'slug', 'name' and "
                "'source_language' are needed."
            )
        return self._create(request, data)

    @require_mime('json')
    @method_decorator(one_perm_required_or_403(pr_project_add_change,
        (Project, 'slug__exact', 'project_slug')))
    def update(self, request, project_slug, api_version=1):
        """
        API call to update project details via PUT.
        """
        if project_slug is None:
            return BAD_REQUEST("Project slug not specified.")
        data = request.data
        if data is None:
            return BAD_REQUEST("Empty request.")
        return self._update(request, project_slug, data)

    @method_decorator(one_perm_required_or_403(pr_project_delete,
        (Project, 'slug__exact', 'project_slug')))
    def delete(self, request, project_slug=None, api_version=1):
        """
        API call to delete projects via DELETE.
        """
        if project_slug is None:
            return BAD_REQUEST("Project slug not specified.")
        return self._delete(request, project_slug)

    def _read(self, request, project_slug):
        """
        Return a list of projects or the details for a specific project.
        """
        if project_slug is None:
            # Use pagination
            p = Project.objects.for_user(request.user)
            res, msg = paginate(
                p, request.GET.get('start'), request.GET.get('end')
            )
            if res is None:
                return BAD_REQUEST(msg)
            return res
        else:
            try:
                p = Project.objects.get(slug=project_slug)
                perm = ProjectPermission(request.user)
                if not perm.private(p):
                    return rc.FORBIDDEN
            except Project.DoesNotExist:
                return rc.NOT_FOUND
            return p

    def _create(self, request, data):
        """
        Create a new project.
        """
        mandatory_fields = ('slug', 'name', 'source_language_code', )
        msg = "Field '%s' is required to create a project."
        for field in mandatory_fields:
            if field not in data:
                return BAD_REQUEST(msg % field)
        if 'owner' in data:
            return BAD_REQUEST("Owner cannot be set explicitly.")

        try:
            self._check_fields(data.iterkeys())
        except AttributeError, e:
            return BAD_REQUEST("Field '%s' is not available." % e.message)

        # outsource and maintainers are ForeignKey
        outsource = data.pop('outsource', {})
        maintainers = data.pop('maintainers', {})

        lang = data.pop('source_language_code')
        try:
            source_language = Language.objects.by_code_or_alias(lang)
        except Language.DoesNotExist:
            return BAD_REQUEST("Language %s does not exist." % lang)

        try:
            p = Project(**data)
            p.source_language = source_language
        except Exception:
            return BAD_REQUEST("Invalid arguments given.")
        try:
            p.full_clean()
        except ValidationError, e:
            return BAD_REQUEST("%s" % e)
        try:
            p.save()
        except IntegrityError:
            return rc.DUPLICATE_ENTRY

        p.owner = request.user
        if outsource:
            try:
                outsource_project = Project.objects.get(slug=outsource)
            except Project.DoesNotExist:
                p.delete()
                return BAD_REQUEST("Project for outsource does not exist.")
            p.outsource = outsource_project

        if maintainers:
            for user in maintainers.split(','):
                try:
                    u = User.objects.get(username=user)
                except User.DoesNotExist:
                    p.delete()
                    return BAD_REQUEST("User %s does not exist." % user)
                p.maintainers.add(u)
        else:
            p.maintainers.add(p.owner)
        p.save()
        return rc.CREATED

    def _update(self, request, project_slug, data):
        try:
            self._check_fields(data.iterkeys(), extra_exclude=['slug'])
        except AttributeError, e:
            return BAD_REQUEST("Field '%s' is not available." % e)

        outsource = data.pop('outsource', {})
        maintainers = data.pop('maintainers', {})
        try:
            p = Project.objects.get(slug=project_slug)
        except Project.DoesNotExist:
            return BAD_REQUEST("Project not found")

        lang = data.pop('source_language_code', None)
        if lang is not None:
            try:
                source_language = Language.objects.by_code_or_alias(lang)
            except Language.DoesNotExist:
                return BAD_REQUEST('Specified source language does not exist.')
            if p.resources.count() == 0:
                p.source_language = source_language
            else:
                msg = (
                    "The project has resources. Changing its source "
                    "language is not allowed."
                )
                return BAD_REQUEST(msg)

        try:
            for key,value in data.items():
                setattr(p, key,value)

            # Outsourcing
            if outsource:
                if outsource == p.slug:
                    return BAD_REQUEST("Original and outsource projects are the same.")
                try:
                    outsource_project = Project.objects.get(slug=outsource)
                except Project.DoesNotExist:
                    return BAD_REQUEST("Project for outsource does not exist.")
                p.outsource = outsource_project

            # Handler m2m with maintainers
            if maintainers:
                # remove existing maintainers and add new ones
                p.maintainers.clear()
                for user in maintainers.split(','):
                    try:
                        p.maintainers.add(User.objects.get(username=user))
                    except User.DoesNotExist:
                        return BAD_REQUEST("User %s does not exist." % user)
            p.save()
        except Exception, e:
            return BAD_REQUEST("Error parsing request data: %s" % e)
        return rc.ALL_OK

    def _delete(self, request, project_slug):
        try:
            project = Project.objects.get(slug=project_slug)
        except Project.DoesNotExist:
            return rc.NOT_FOUND
        try:
            project.delete()
        except:
            return rc.INTERNAL_ERROR
        return rc.DELETED

    def _check_fields(self, fields, extra_exclude=[]):
        """
        Check if supplied fields are allowed to be given in a
        POST or PUT request.

        Args:
            fields: An iterable of fields to check.
            extra_exclude: A list of fields that should not be used.
        Raises:
            AttributeError, in case a field is not in the allowed fields
                or is in the ``extra_exclude`` list.
        """
        for field in fields:
            if field not in self.allowed_fields or field in extra_exclude:
                raise AttributeError(field)

########NEW FILE########
__FILENAME__ = feeds
from django.core.exceptions import ObjectDoesNotExist
from django.conf import settings
from django.contrib.syndication.feeds import Feed, FeedDoesNotExist
from django.contrib.sites.models import Site
from django.shortcuts import get_object_or_404
from django.utils.translation import ugettext_lazy as _

from actionlog.models import LogEntry
from transifex.projects.models import Project

current_site = Site.objects.get_current()

class LatestProjects(Feed):
    title = _("Latest projects on %(site_name)s") % {
        'site_name': current_site.name }
    link = current_site.domain
    description = _("Updates on changes and additions to registered projects.")

    def items(self):
        return Project.public.order_by('-created')[:10]


class ProjectFeed(Feed):

    def get_object(self, bits):
        # In case of "/rss/name/foo/bar/baz/", or other such clutter,
        # check that the bits parameter has only one member.
        if len(bits) != 1:
            raise ObjectDoesNotExist
        return Project.objects.get(slug__exact=bits[0])

    def title(self, obj):
        return _("%(site_name)s: Resources in %(project)s") % {
            'site_name': current_site.name,
            'project': obj.name }

    def description(self, obj):
        return _("Latest resources in project %s.") % obj.name

    def link(self, obj):
        if not obj:
            raise FeedDoesNotExist
        return obj.get_absolute_url()

    def items(self, obj):
        return obj.resources.order_by('-name')[:50]

class ProjectTimelineFeed(Feed):  

    def get_object(self, bits):
        # In case of "/rss/name/foo/bar/baz", or other such clutter
        # check that the bits parameter has only one member.
        if len(bits) != 1:
            raise ObjectDoesNotExist
        return Project.objects.get(slug__exact=bits[0])
        
    def title(self, obj):
        return _("%(site_name)s: Timeline for %(project)s") % {
            'site_name':current_site.name,
            'project':obj.name }
            
    def description(self, obj):
        return _("History of the project %s.") % obj.name
        
    def link(self, obj):
        if not obj:
            raise FeedDoesNotExist
        return  obj.get_absolute_url()

    def items(self, obj):
        return obj.get_action_logs()[:10]

    def item_link(self, obj):
        return obj.object.get_absolute_url()

########NEW FILE########
__FILENAME__ = forms
from django import forms
from django.db import models
from django.utils.translation import ugettext as _
from django.db.models import permalink
from django.conf import settings
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from django.forms import widgets
from django.utils.encoding import force_unicode
from django.utils.safestring import mark_safe
from django.contrib.auth import authenticate

from ajax_select.fields import AutoCompleteSelectMultipleField
from tagging.forms import TagField
from tagging_autocomplete.widgets import TagAutocomplete

from transifex.projects.models import Project
from transifex.projects.signals import (project_access_control_form_start,
                                        project_form_init, project_form_save,
                                        project_private_check,
                                        project_type_check)
from transifex.txcommon.widgets import SplitSelectDateTimeWidget


class ProjectForm(forms.ModelForm):
    maintainers = AutoCompleteSelectMultipleField(
        'users', label=_("Maintainers"), required=True,
        help_text=_('Search for a username')
    )
    tags = TagField(label=_("Tags"), widget=TagAutocomplete(), required=False)

    class Meta:
        model = Project
        exclude = ('anyone_submit', 'outsource', 'owner')
        fields = (
            'name', 'slug', 'description', 'trans_instructions', 'tags',
            'long_description', 'maintainers', 'private', 'homepage', 'feed',
            'bug_tracker', 'source_language', 'logo',
        )

    def __init__(self, *args, **kwargs):
        # we need this because the number of private projects validation may
        # depend on the owner's subscription
        self.owner = kwargs.pop('owner', None)

        super(ProjectForm, self).__init__(*args, **kwargs)
        # Disable the source_language widget when updating
        if self.instance and self.instance.id:
            if self.instance.resources.count():
                self.fields['source_language'].required = False
                self.fields['source_language'].widget.attrs['disabled'] = 'disabled'
        project_form_init.send(sender=ProjectForm, form=self)

    def save(self, *args, **kwargs):
        retval = super(ProjectForm, self).save(*args, **kwargs)
        project_form_save.send(sender=ProjectForm, form=self, instance=retval)
        return retval

    def clean_private(self):
        project_private_check.send(sender=ProjectForm, instance=self)
        return self.cleaned_data['private']

    def clean_tags(self):
        project_tags_list = self.cleaned_data['tags']
        tags = list(set([tag.strip() for tag in project_tags_list.split(',')])) or []
        for i in tags:
            if not i.strip():
                tags.remove(i)
        tags.append(u'')
        project_tags_list = ', '.join(tags)
        return project_tags_list

    def clean_source_language(self):
        if self.instance and self.instance.id:
            if self.instance.resources.count():
                return self.instance.source_language
            else:
                return self.cleaned_data['source_language']
        else:
            return self.cleaned_data['source_language']


class ProjectDeleteForm(forms.Form):
    """
    A form used to check the user password before deleting a project.
    """
    password = forms.CharField(widget=forms.PasswordInput,
                               label=_('Your password'))

    def __init__(self, request, *args, **kwargs):
        self.request = request
        self.user_cache = None
        super(ProjectDeleteForm, self).__init__(*args, **kwargs)

    def clean(self):
        password = self.cleaned_data.get('password')
        if password:
            self.user_cache = authenticate(username=self.request.user.username, password=password)
            if self.user_cache is None:
                raise forms.ValidationError(_("Invalid password."))

        return self.cleaned_data


class RadioFieldRenderer(widgets.RadioFieldRenderer):
    """
    An object used by RadioSelect to enable customization of radio widgets.
    """
    def get_class(self, v, v2):
        """
        Return the string 'selected' if both values are equal.

        This is used to set a class attr on the selected radio button.
        """
        if v==v2:
            return 'selected'
        else:
            return ''

    def render(self):
        """Outputs a <ul> for this set of radio fields."""
        help_text = self.attrs.get('help_text', {})
        return mark_safe(u'<ul>\n%s\n</ul>' % u'\n'.join(
            [u'<li class="%s"><span>%s</span><p class="helptext">%s</p></li>'
                % (self.get_class(w.value, w.choice_value),
                   force_unicode(w),
                   help_text.get(w.choice_value, '')) for w in self]))


class ProjectAccessControlForm(forms.ModelForm):
    """Form to handle the Access Control options of a project."""
    type_options = [
        {'typical': {
            'label': _('Typical project'),
            'help_text': _(
                "Access control and teams are managed under a single project. "
                "Best option for most cases.")
            }
        },
        {'hub': {
            'label': _('Project hub'),
            'help_text': _(
                "Option for a parent project which will host translation teams "
                "and will acts as an umbrella to others. Ideal for organizations "
                "with multiple products."),
            }
        },
        {'outsourced': {
            'label': _('Outsourced project'),
            'help_text': _(
                "Option for the child of a hub project. This project will have no "
                "teams of its own but will re-use the parent's ones."),
            }
        },
    ]

    access_control_options = [
        {'free_for_all': {
            'label': _('Free for all'),
            'help_text': _(
                "Allow any logged-in user to submit files to my project. "
                "<a href=\"http://www.youtube.com/watch?v=DCX3ZNDZAwY\" "
                "target=\"_blank\">Imagine</a> all the people, sharing all the "
                "world. Recommended for quick translations, and when a "
                "post-translation, pre-commit review process is in place.")
            }
        },
        {'limited_access': {
            'label': _('Limited access (teams)'),
            'help_text': _(
                "Give access to specific people. Language teams will have "
                "access to their language's files only, and global writers "
                "will have access to all translation files. Recommended for "
                "most projects."),
            }
        },
    ]

    # Setting up some vars based on the 'types_options' var
    types = []
    types_help = {}
    types_help2 = []
    for o in type_options:
        for k, v in o.items():
            types.append((k, v['label']))
            types_help.update({k: v['help_text']})
            types_help2.append((v['label'], v['help_text']))
    types_help2 = '<br/><br/>'.join(
        ['<b>%s</b>: %s' % (v[0], v[1]) for v in types_help2])
        
    # Setting up some vars based on the 'access_control_options' var
    access_control_types = []
    access_control_help = {}
    access_control_help2 = []
    for o in access_control_options:
        for k, v in o.items():
            access_control_types.append((k, v['label']))
            access_control_help.update({k: v['help_text']})
            access_control_help2.append((v['label'], v['help_text']))
    access_control_help2 = '<br/><br/>'.join(
        ['<b>%s</b>: %s' % (v[0], v[1]) for v in access_control_help2])

    
    project_type = forms.ChoiceField(choices=types, required=True,
        #widget=forms.RadioSelect, #help_text=types_help2,
        widget=forms.RadioSelect(renderer=RadioFieldRenderer,
        attrs={'help_text': types_help})
        )

    access_control = forms.ChoiceField(choices=access_control_types,
        required=True, 
        #widget=forms.RadioSelect, #help_text=access_control_help2,
        widget=forms.RadioSelect(renderer=RadioFieldRenderer,
        attrs={'help_text': access_control_help})
        )

    class Meta:
        model = Project
        fields = ('project_type', 'outsource', 'access_control')

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super(ProjectAccessControlForm, self).__init__(*args, **kwargs)       
        self.project = kwargs.get('instance', None)

        outsource_required = False
        access_control_required = True
        project_type_initial = None
        access_control_initial = None

        self.hub_request = self.project.hub_request

        # Disable all form fields if there is a open hub request
        if self.hub_request:
            for f in self.fields:
                self.fields[f].widget.attrs['disabled'] = 'disabled'
        if args:
            if 'outsourced' == args[0].get('project_type'):
                outsource_required = True
                access_control_required = False
        elif self.project:
            
            if self.project.anyone_submit:
                access_control_initial = 'free_for_all'
            else:
                access_control_initial = 'limited_access'

            if self.project.outsource:
                access_control_initial = None
                project_type_initial = 'outsourced'
                outsource_required = True
                access_control_required = False
            else:
                if not access_control_initial:
                    access_control_initial = 'limited_access'
                if self.project.is_hub:
                    project_type_initial = 'hub'
                else:
                    project_type_initial = 'typical'

        if project_type_initial:
            self.fields['project_type'].initial = project_type_initial
        
        if access_control_initial:
            self.fields['access_control'].initial = access_control_initial
        
        self.fields['access_control'].required = access_control_required
        self.fields['outsource'].required = outsource_required
        
        self.fields['outsource'].label = _('Outsource access to')
        
        ## Filtering project list
        if self.user:
            projects = Project.objects.for_user(self.user).filter(is_hub=True
                ).exclude(id=self.project.id).only('id', 'name')
        else:
            projects = Project.objects.filter(is_hub=True
                ).exclude(models.Q(id=self.project.id) | models.Q(private=True))

        self.fields["outsource"].queryset = projects
        
        project_access_control_form_start.send(sender=ProjectAccessControlForm,
            instance=self, project=self.project)

    def clean(self):
        cleaned_data = self.cleaned_data
        project_type = cleaned_data.get('project_type')
        outsource = cleaned_data.get('outsource', None)
        project_type_msg = ''
        
        if project_type != 'outsourced' and outsource:
            project_type_msg = _("Project type do not accept outsource project")
            
        elif (self.project.is_hub and project_type != 'hub' and 
            self.project.outsourcing.all()):
            project_type_msg = _("This project is being used "
                "as outsource by other projects, thus it can not be set "
                "to other project type until having all the outsourced "
                "projects disassociated to it.")

        if project_type_msg:
            self._errors["project_type"] = self.error_class([project_type_msg])
            del cleaned_data["project_type"]

        return cleaned_data

    def clean_project_type(self):
        project_type_check.send(sender=ProjectForm, instance=self)
        return self.cleaned_data['project_type']

########NEW FILE########
__FILENAME__ = handlers
# -*- coding: utf-8 -*-

from __future__ import absolute_import
from transifex.txcommon.cache import update_template_cache


def on_outsource_change(sender, **kwargs):
    """Signal handler for changes in the outsource project."""
    if sender is None:
        return
    project = sender
    update_template_cache(
        'projects/project_hub_projects.html', ['hub_projects', ],
        key_vars=[project, ],
        context={
            'project': project,
            'outsourcing_projects': project.outsourcing.all()
        }
    )

########NEW FILE########
__FILENAME__ = lookups
from django.db.models import Q
from transifex.projects.models import Project

class ProjectsLookup(object):
    """A lookup class, used by django-ajax-select app to search Project objects."""

    def get_query(self, q, request):
        """
        Return a query set.

        You also have access to request.user if needed.
        """
        return Project.objects.for_user(request.user).filter(
                                      Q(slug__istartswith=q) |
                                      Q(name__istartswith=q))

    def format_item(self, project):
        """Simple display of an project object when displayed in the list."""
        return unicode(project)

    def format_result(self, project):
        """
        A more verbose display, used in the search results display.

        It may contain html and multi-lines.
        """
        return u"%s" % (project)

    def get_objects(self, ids):
        """Given a list of ids, return the projects ordered."""
        return Project.objects.filter(pk__in=ids).order_by('name')

########NEW FILE########
__FILENAME__ = txreport
from django.conf import settings
from django.core.management.base import LabelCommand, CommandError
from actionlog.models import LogEntry
from notification import models as notification
from transifex.projects.models import Project
from transifex.txcommon import rst

_HELP_TEXT = """Generate reports with the statistics and action logs for a period of time,
depending on the parameters, and send it by email.

Report types::
    weekly-maintainers: Sends reports of the last week activities to the project
                        maintainers.

A project slug can be passed too, in order to generate the report only for a
specific project.

Example::
    python manage.py txreport weekly-maintainers project-foo"""


class Command(LabelCommand):
    help = (_HELP_TEXT)

    args = '[report-type [project_slug, project_slug, ...]]'

    report_types = ['weekly-maintainers',]

    # Validation is called explicitly each time the server is reloaded.
    requires_model_validation = False

    def handle(self, *args, **options):
        """Override default method to make it work without arguments."""

        if not settings.ENABLE_NOTICES:
            raise CommandError("Notifications are not enable in the system.")
        if not args:
            raise CommandError("You need to specify the report type.")
        elif not args[0] in self.report_types:
            raise CommandError("Report type invalid.")

        if len(args)==1:
            projects = Project.objects.all()
        else:
            projects = Project.objects.filter(slug__in=list(args[1:]))

        if not projects:
            raise CommandError("No project found with the given slug(s).")
        else:
            self.projects = projects
            self.report_type = args[0]

        # Find the function name to be called based on the report_type
        function_report_type = self.report_type.replace('-','_')

        #Call the related function to the wanted report_type
        self.__getattribute__(function_report_type)()

    def weekly_maintainers(self):
        for project in self.projects:
            result = project_report_weekly_maintainers(project)


def project_report_weekly_maintainers(p):

    actionlogs = LogEntry.objects.by_object_last_week(p)[:30]
    nt = 'project_report_weekly_maintainers'
    context = {'project': p,
               'actionlogs': actionlogs}

    # Send notification for maintainers
    notification.send(p.maintainers.all(), nt, context)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Project'
        db.create_table('projects_project', (
            ('feed', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=30, db_index=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('long_description_html', self.gf('django.db.models.fields.TextField')(max_length=1000, blank=True)),
            ('tags', self.gf('tagging.fields.TagField')()),
            ('enabled', self.gf('django.db.models.fields.BooleanField')(default=True, blank=True)),
            ('modified', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('private', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('anyone_submit', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('outsource', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['projects.Project'], null=True, blank=True)),
            ('bug_tracker', self.gf('django.db.models.fields.URLField')(max_length=200, blank=True)),
            ('hidden', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], null=True, blank=True)),
            ('homepage', self.gf('django.db.models.fields.URLField')(max_length=200, blank=True)),
            ('long_description', self.gf('django.db.models.fields.TextField')(max_length=1000, blank=True)),
            ('description', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
        ))
        db.send_create_signal('projects', ['Project'])

        # Adding M2M table for field maintainers on 'Project'
        db.create_table('projects_project_maintainers', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('project', models.ForeignKey(orm['projects.project'], null=False)),
            ('user', models.ForeignKey(orm['auth.user'], null=False))
        ))
        db.create_unique('projects_project_maintainers', ['project_id', 'user_id'])


    def backwards(self, orm):

        # Deleting model 'Project'
        db.delete_table('projects_project')

        # Removing M2M table for field maintainers on 'Project'
        db.delete_table('projects_project_maintainers')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'projects.project': {
            'Meta': {'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0002_add_trans_instructions_field
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'Project.trans_instructions'
        db.add_column('projects_project', 'trans_instructions', self.gf('django.db.models.fields.URLField')(default='', max_length=200, blank=True), keep_default=False)


    def backwards(self, orm):

        # Deleting field 'Project.trans_instructions'
        db.delete_column('projects_project', 'trans_instructions')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0003_auto__chg_field_project_tags
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'Project.tags'
        db.alter_column('projects_project', 'tags', self.gf('tagging_autocomplete.models.TagAutocompleteField')(null=True))


    def backwards(self, orm):
        
        # Changing field 'Project.tags'
        db.alter_column('projects_project', 'tags', self.gf('tagging.fields.TagField')(default=''))


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0004_add_source_language_set_null
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Project.source_language'
        db.add_column('projects_project', 'source_language', self.gf('django.db.models.fields.IntegerField')(null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Project.source_language'
        db.delete_column('projects_project', 'source_language')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0005_set_source_language_from_resources
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        Resource = orm['resources.Resource']
        for project in orm['projects.Project'].objects.all():
            try:
                resource = Resource.objects.filter(project=project)[0]
                lang = resource.source_language
            except IndexError, e:
                lang = orm['languages.Language'].objects.get(code='en')
            project.source_language = lang
            project.save()


    def backwards(self, orm):
        "Write your backwards methods here."
        for project in orm['projects.Project'].objects.all():
            project.source_language = None
            project.save()


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'category': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'origin': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['resources', 'languages', 'projects']

########NEW FILE########
__FILENAME__ = 0006_finalize_source_language_field
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Renaming column for 'Project.source_language' to match new field type.
        db.rename_column('projects_project', 'source_language', 'source_language_id')
        # Changing field 'Project.source_language'
        db.alter_column('projects_project', 'source_language_id', self.gf('django.db.models.fields.related.ForeignKey')(default=20, to=orm['languages.Language']))


    def backwards(self, orm):
        
        # Renaming column for 'Project.source_language' to match new field type.
        db.rename_column('projects_project', 'source_language_id', 'source_language')
        # Changing field 'Project.source_language'
        db.alter_column('projects_project', 'source_language', self.gf('django.db.models.fields.IntegerField')(null=True))


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'db_index': 'False'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0007_auto__add_field_project_is_hub
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Project.is_hub'
        db.add_column('projects_project', 'is_hub', self.gf('django.db.models.fields.BooleanField')(default=False), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Project.is_hub'
        db.delete_column('projects_project', 'is_hub')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_hub': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'hub'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'db_index': 'False'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0008_auto__add_hubrequest__add_unique_hubrequest_project
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'HubRequest'
        db.create_table('projects_hubrequest', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('project_hub', self.gf('django.db.models.fields.related.ForeignKey')(related_name='hub_request', to=orm['projects.Project'])),
            ('project', self.gf('django.db.models.fields.related.ForeignKey')(related_name='hub_requesting', unique=True, to=orm['projects.Project'])),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('projects', ['HubRequest'])

        # Adding unique constraint on 'HubRequest', fields ['project']
        db.create_unique('projects_hubrequest', ['project_id'])


    def backwards(self, orm):
        
        # Removing unique constraint on 'HubRequest', fields ['project']
        db.delete_unique('projects_hubrequest', ['project_id'])

        # Deleting model 'HubRequest'
        db.delete_table('projects_hubrequest')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.hubrequest': {
            'Meta': {'unique_together': "(('project',),)", 'object_name': 'HubRequest'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'hub_requesting'", 'unique': 'True', 'to': "orm['projects.Project']"}),
            'project_hub': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'hub_request'", 'to': "orm['projects.Project']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_hub': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outsourcing'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'db_index': 'False'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0009_auto__add_field_project_logo
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Project.logo'
        db.add_column('projects_project', 'logo', self.gf('django.db.models.fields.files.ImageField')(max_length=100, null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Project.logo'
        db.delete_column('projects_project', 'logo')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.hubrequest': {
            'Meta': {'unique_together': "(('project',),)", 'object_name': 'HubRequest'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'hub_requesting'", 'unique': 'True', 'to': "orm['projects.Project']"}),
            'project_hub': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'hub_requests'", 'to': "orm['projects.Project']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_hub': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'logo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outsourcing'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'db_index': 'False'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0010_set_project_hubs
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        """Projects used as outsource should have flag is_hub set to True."""
        project_ids = set(orm['projects.Project'].objects.filter(
            outsource__isnull=False).values_list('outsource', flat=True))
        orm['projects.Project'].objects.filter(id__in=project_ids).update(is_hub=True)

    def backwards(self, orm):
        orm['projects.Project'].objects.filter(is_hub=True).update(is_hub=False)


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.hubrequest': {
            'Meta': {'unique_together': "(('project',),)", 'object_name': 'HubRequest'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'hub_requesting'", 'unique': 'True', 'to': "orm['projects.Project']"}),
            'project_hub': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'hub_requests'", 'to': "orm['projects.Project']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_hub': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'logo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outsourcing'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'db_index': 'False'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-

from __future__ import absolute_import
import os
from datetime import datetime
import tagging
from tagging.fields import TagField
from tagging_autocomplete.models import TagAutocompleteField
import markdown

from django.conf import settings
from django.contrib.auth.models import User, AnonymousUser
from django.contrib.contenttypes import generic
from django.core.cache import cache
from django.core.exceptions import ValidationError
from django.core.validators import validate_slug
from django.db import models, IntegrityError
from django.db.models import Sum
from django.db.models import permalink, get_model, Q
from django.dispatch import Signal
from django.forms import ModelForm
from django.utils.html import escape
from django.utils.translation import ugettext_lazy as _
from django.contrib.contenttypes.models import ContentType

from authority.models import Permission
from notification.models import ObservedItem
from userena.models import upload_to_mugshot
from easy_thumbnails.fields import ThumbnailerImageField

from transifex.actionlog.models import LogEntry
from transifex.txcommon.db.models import ChainerManager
from transifex.txcommon.log import log_model, logger
from transifex.languages.models import Language
from datastores import TxRedisMapper, redis_exception_handler
from .signals import project_created, project_deleted, \
        project_outsourced_changed
from .handlers import on_outsource_change

from south.modelsinspector import add_introspection_rules
add_introspection_rules([], ["tagging_autocomplete.models.TagAutocompleteField"])

# Settings for the Project.logo field, based on the userena settings mugshot
# settings
PROJECT_LOGO_SETTINGS = {'size': (settings.USERENA_MUGSHOT_SIZE,
                                  settings.USERENA_MUGSHOT_SIZE),
                         'crop': settings.USERENA_MUGSHOT_CROP_TYPE}

class DefaultProjectQuerySet(models.query.QuerySet):
    """
    This is the default manager of the project model (assigned to objects field).
    """

    def watched_by(self, user):
        """
        Retrieve projects being watched by the specific user.
        """
        try:
            ct = ContentType.objects.get(name="project")
        except ContentType.DoesNotExist:
            pass
        observed_projects = [i[0] for i in list(set(ObservedItem.objects.filter(user=user, content_type=ct).values_list("object_id")))]
        watched_projects = []
        for object_id in observed_projects:
            try:
                watched_projects.append(Project.objects.get(id=object_id))
            except Project.DoesNotExist:
                pass
        return watched_projects

    def maintained_by(self,user):
        """
        Retrieve projects being maintained by the specific user.
        """
        return Project.objects.filter(maintainers__id=user.id)

    def translated_by(self, user):
        """
        Retrieve projects being translated by the specific user.

        The method returns all the projects in which user has been granted
        permission to submit translations.
        """
        try:
            ct = ContentType.objects.get(name="project")
        except ContentType.DoesNotExist:
            pass
        return Permission.objects.filter(user=user, content_type=ct, approved=True)

    def involved_with(self, user):
        """
        Returns all projects that the given user is involved in (as a project
        maintainer, team coordinator or team member).

        Includes private projects.
        """
        Team = get_model('teams', 'Team')
        return self.filter(
            Q(maintainers__in=[user]) |
            Q(team__in=Team.objects.for_user(user))
        ).distinct()

    def for_user(self, user):
        """
        Filter available projects based on the user doing the query. This
        checks permissions and filters out private projects that the user
        doesn't have access to.
        """
        projects = self
        if user in [None, AnonymousUser()]:
            projects = projects.filter(private=False)
        else:
            if not user.is_superuser:
                Team = get_model('teams', 'Team')
                projects = projects.exclude(
                    Q(private=True) & ~(Q(maintainers__in=[user]) |
                    Q(team__in=Team.objects.for_user(user)))).distinct()
        return projects

    def public(self):
        return self.filter(private=False)

    def private(self):
        return self.filter(private=True)


class PublicProjectManager(models.Manager):
    """
    Return a QuerySet of public projects.

    Usage: Projects.public.all()
    """

    def get_query_set(self):
        return super(PublicProjectManager, self).get_query_set().filter(private=False)

    def recent(self):
        return self.order_by('-created')

    def open_translations(self):
        #FIXME: This should look like this, more or less:
        #open_resources = Resource.objects.filter(accept_translations=True)
        #return self.filter(resource__in=open_resources).distinct()
        return self.all()


def validate_slug_not_in_blacklisted(value):
    blacklist = getattr(settings, "SUBDOMAIN_BLACKLIST", ())
    if value in blacklist:
        raise ValidationError("this slug is reverved")

class Project(models.Model):
    """
    A project is a group of translatable resources.
    """

    private = models.BooleanField(default=False, verbose_name=_('Private'),
        help_text=_('A private project is visible only by you and your team. '
                    'Moreover, private projects are limited according to billing '
                    'plans for the user account.'))
    slug = models.SlugField(_('Slug'), max_length=30, unique=True,
        validators=[validate_slug_not_in_blacklisted, validate_slug, ],
        help_text=_('A short label to be used in the URL, containing only '
                    'letters, numbers, underscores or hyphens.'))
    name = models.CharField(_('Name'), max_length=50,
        help_text=_('A short name or very short description.'))
    description = models.CharField(_('Description'), blank=False, max_length=255,
        help_text=_('A sentence or two describing the object.'))
    long_description = models.TextField(_('Long description'), blank=True,
        max_length=1000,
        help_text=_('A longer description (optional). Use Markdown syntax.'))
    homepage = models.URLField(_('Homepage'), blank=True, verify_exists=False)
    feed = models.CharField(_('Feed'), blank=True, max_length=255,
        help_text=_('An RSS feed with updates to the project.'))
    bug_tracker = models.URLField(_('Bug tracker'), blank=True,
        help_text=_('The URL for the bug and tickets tracking system '
                    '(Bugzilla, Trac, etc.)'))
    trans_instructions = models.URLField(_('Translator Instructions'), blank=True,
        help_text=_("A web page containing documentation or instructions for "
                    "translators, or localization tips for your community."))
    anyone_submit = models.BooleanField(_('Anyone can submit'),
        default=False, blank=False,
        help_text=_('Can anyone submit files to this project?'))

    hidden = models.BooleanField(_('Hidden'), default=False, editable=False,
        help_text=_('Hide this object from the list view?'))
    enabled = models.BooleanField(_('Enabled'),default=True, editable=False,
        help_text=_('Enable this object or disable its use?'))
    created = models.DateTimeField(auto_now_add=True, editable=False)
    modified = models.DateTimeField(auto_now=True, editable=False)

    tags = TagAutocompleteField(verbose_name=_('Tags'), blank=True, null=True)

    logo = ThumbnailerImageField(_('Logo'), blank=True, null=True,
        upload_to=upload_to_mugshot, resize_source=PROJECT_LOGO_SETTINGS,
        help_text=_('A logo image displayed for the project.'))

    # Relations
    maintainers = models.ManyToManyField(User, verbose_name=_('Maintainers'),
        related_name='projects_maintaining', blank=False, null=True)

    outsource = models.ForeignKey('Project', blank=True, null=True,
        verbose_name=_('Outsource project'), related_name="outsourcing",
        help_text=_('Project hub that owns the access control of this project.'))

    owner = models.ForeignKey(User, blank=True, null=True,
        verbose_name=_('Owner'), related_name='projects_owning',
        help_text=_('The user who owns this project.'))

    source_language = models.ForeignKey(
        Language, verbose_name=_('Source Language'),
        blank=False, null=False, db_index=False,
        help_text=_("The source language of this Resource.")
    )

    # Denormalized fields
    is_hub = models.BooleanField(_('Project Hub?'),
        default=False, blank=True,
        help_text=_('Is it a project hub that other regular projects can '
            'use to outsource teams to receive translations?'))

    # Normalized fields
    long_description_html = models.TextField(_('HTML Description'), blank=True,
        max_length=1000,
        help_text=_('Description in HTML.'), editable=False)

    # Reverse Relation for LogEntry GenericForeignkey
    # Allows to access LogEntry objects for a given project
    actionlogs = generic.GenericRelation(LogEntry,
        object_id_field="object_id", content_type_field="content_type")

    # Managers
    objects = ChainerManager(DefaultProjectQuerySet)
    public = PublicProjectManager()

    def __unicode__(self):
        return self.name

    def __repr__(self):
        return repr(u'<Project: %s>' % self.name)

    class Meta:
        verbose_name = _('project')
        verbose_name_plural = _('projects')
        db_table  = 'projects_project'
        ordering  = ('name',)
        get_latest_by = 'created'

    def save(self, *args, **kwargs):
        """Save the object in the database."""
        long_desc = escape(self.long_description)
        self.long_description_html = markdown.markdown(long_desc)
        if self.id is None:
            is_new = True
        else:
            is_new = False
        super(Project, self).save(*args, **kwargs)
        if is_new:
            project_created.send(sender=self)

    def delete(self, *args, **kwargs):
        self.resources.all().delete()
        project_deleted.send(sender=self)
        super(Project, self).delete(*args, **kwargs)

    @permalink
    def get_absolute_url(self):
        return ('project_detail', None, { 'project_slug': self.slug })

    @property
    def hub_request(self):
        """
        Return a HubRequest object if a request to join a project hub exists.
        Otherwise it returns None.
        """
        try:
            return self.hub_requesting.all()[0]
        except IndexError:
            return None

    @property
    def wordcount(self):
        return self.resources.aggregate(Sum('wordcount'))['wordcount__sum'] or 0

    @property
    def num_languages(self):
        return Language.objects.filter(rlstats__resource__project=self).distinct().count()

    @property
    def max_hostable_wordcount(self):
        return self.num_languages * self.wordcount

    @property
    def entities(self):
        return self.resources.aggregate(Sum('total_entities'))['total_entities__sum'] or 0

    @property
    def team_members(self):
        """Return a queryset of all memebers of a project."""
        return User.objects.filter(
            Q(team_members__project=self) | Q(team_coordinators__project=self) |\
            Q(team_reviewers__project=self) | Q(projects_owning=self) |\
            Q(projects_maintaining=self)
        ).distinct()

    @property
    def team_member_count(self):
        return User.objects.filter(
            Q(team_members__project=self) | Q(team_coordinators__project=self) |\
            Q(projects_owning=self) | Q(projects_maintaining=self)
        ).distinct().count()

    def languages(self):
        """
        The languages this project's resources are being translated into
        excluding the source language, ordered by number of translations.
        """
        return Language.objects.filter(
            rlstats__resource__in=self.resources.all()
        ).exclude(code=self.source_language.code).order_by(
            '-rlstats__translated').distinct()

    def get_logo_url(self):
        """
        Returns the image containing the mugshot for the user.

        The mugshot can be a uploaded image or a Gravatar.

        :return:
            ``None`` when no default image is supplied by ``PROJECT_LOGO_DEFAULT``.
        """
        # First check for a uploaded logo image and if any return that.
        if self.logo:
            return self.logo.url
        # Check for a default image.
        elif getattr(settings, 'PROJECT_LOGO_DEFAULT', None):
            return os.path.join(settings.STATIC_URL, settings.PROJECT_LOGO_DEFAULT)
        else:
            return None

    def get_action_logs(self):
        """
        Return actionlog entries for the given project plus the actionlogs of
        the hub projects, in case it's a hub.
        """
        ids = [self.id]
        if self.is_hub:
            ids += self.outsourcing.all().values_list('id', flat=True)
        return LogEntry.objects.filter(
            content_type=ContentType.objects.get_for_model(Project),
            object_id__in=ids)


try:
    tagging.register(Project, tag_descriptor_attr='tagsobj')
except tagging.AlreadyRegistered, e:
    logger.debug('Tagging: %s' % str(e))

log_model(Project)


class HubRequest(models.Model):
    """
    Model to handle outsource requests of project to project hubs. A project
    only can have one request for a project hub and it can only be associated
    to a project hub once at a time.
    """
    project_hub = models.ForeignKey(Project, verbose_name=_('Project Hub'),
        blank=False, null=False, related_name="hub_requests",
        help_text=_("The project hub to outsource teams from."))

    project = models.ForeignKey(Project, verbose_name=_('Project'),
        unique=True, blank=False, null=False, related_name="hub_requesting",
        help_text=_("The project that wants to outsource teams from "
            "another project."))
    user = models.ForeignKey(User, verbose_name=_('User'),
        blank=False, null=False,
        help_text=_("The user who is requesting to join the project hub."))

    created = models.DateTimeField(auto_now_add=True, editable=False)

    def __unicode__(self):
        return u'%s.%s' % (self.project_hub.slug,
            self.project.slug)

    def __repr__(self):
        return '<HubRequest: %s.%s>' % (self.project_hub.slug,
            self.project.slug)

    class Meta:
        unique_together = ("project",)
        verbose_name = _('hub joining request')
        verbose_name_plural = _('hub joining requests')


# Connect to signals
project_outsourced_changed.connect(on_outsource_change)

########NEW FILE########
__FILENAME__ = project
# -*- coding: utf-8 -*-
from django.db.models import Q
from django.shortcuts import get_object_or_404
from django.utils.translation import ugettext_lazy as _

import authority
from authority.permissions import BasePermission
from transifex.projects.models import Project
from transifex.teams.models import Team
from transifex.txcommon.log import logger


def _check_outsource_project(obj):
    """
    Check if the project, to which the obj passed by parameter belongs, has
    outsourced the access control to another project.

    The parameter 'obj' can be a Project, Team instance, etc.

    Return a tuple '(project, team)'. The 'team' might be None.
    """
    outsourced_project = None
    if isinstance(obj, Project):
        if obj.outsource:
            project = obj.outsource
            outsourced_project = obj
        else:
            project = obj
        team = None
    elif isinstance(obj, Team):
        team = obj
        project = team.project
    return (project, team, outsourced_project)

class ProjectPermission(BasePermission):

    label = 'project_perm'
    checks = ('maintain', 'coordinate_team', 'proofread', 'submit_translations')

    def maintain(self, project=None):
        if project:
            if project.maintainers.filter(id=self.user.id) or \
                project.owner == self.user:
                return True
        return False
    maintain.short_description=_('Is allowed to maintain this project')

    def coordinate_team(self, project=None, language=None):
        if project:
            #Maintainer
            if self.maintain(project):
                return True
            if language:
                team = Team.objects.get_or_none(project, language.code)
                #Coordinator
                if team and self.user in team.coordinators.all():
                    return True
        return False
    coordinate_team.short_description = _("Is allowed to coordinate a "
        "team project")

    def proofread(self, project=None, language=None, any_team=False):
        if project:
            if self.maintain(project):
                # Maintainers can review
                return True

            if language:
                team = Team.objects.get_or_none(project, language.code)
                if team:
                    if self.user in team.reviewers.all() or self.user in team.coordinators.all():
                        return True
            elif any_team:
                user_teams = project.team_set.filter(
                    Q(reviewers=self.user)).distinct()
                if user_teams:
                    return True
        return False
    proofread.short_description = _("Is allowed to review translations for "
        "a team project")

    def submit_translations(self, obj, any_team=False):
        """
        Check whether a user can submit translations to a project.

        This method can receive two kinds of object through the parameter
        'obj', which can be Project and Team instances. Depending on the
        object type different checks are done.

        The parameter 'any_team' can be used when a it is necessary to verify
        that a user has submit access for at least one project team. If a
        Project object is passed and the parameter 'any_team' is False, the
        verification of access will only return True for maintainers and
        writers.
        """
        project, team = None, None
        if obj:
            # The `project` is the project against which we check the team
            # permissions. For writers/maintainers we need to check against the
            # `outsourced_project` if it exists.
            project, team, outsourced_project = _check_outsource_project(obj)
            if project:
                if project.anyone_submit:
                    return True
                # Maintainers
                # A maintainer should have access to his project only and not
                # to the project that are outsourced to his project as well
                if (outsourced_project and self.maintain(outsourced_project)):
                    return True
                if self.maintain(project) and not outsourced_project:
                    return True
                #Writers
                perm = '%s.submit_translations' % self.label
                if self.has_perm(perm, project):
                    return True
                if team:
                    # Coordinators or members
                    if self.user in team.coordinators.all() or \
                        self.user in team.members.all() or \
                        self.user in team.reviewers.all():
                        return True
                if any_team and not team:
                    user_teams = project.team_set.filter(
                        Q(coordinators=self.user)|
                        Q(members=self.user)|
                        Q(reviewers=self.user)
                    ).distinct()
                    if user_teams:
                        return True
        return False
    submit_translations.short_description = _("Is allowed to submit "
        "translations to this project")

    def private(self, project=None):
        """Test if a user has access to a private project."""
        if project:
            if project.private:
                # To avoid doing all the checks below!
                if self.user.is_anonymous():
                    return False
                # Maintainers, writers (submitters, coordinators, members)
                return self.maintain(project) or \
                    self.submit_translations(project, any_team=True) or\
                    self.proofread(project, any_team=True)
            else:
                # The project is public so let them continue
                return True
        return False
    private.short_description=_('Is allowed to browse this private project')

authority.register(Project, ProjectPermission)

########NEW FILE########
__FILENAME__ = search_indexes
import datetime
from haystack import indexes
from django.contrib.contenttypes.models import ContentType
from transifex.actionlog.models import LogEntry
from transifex.projects.models import Project

class ProjectIndex(indexes.RealTimeSearchIndex, indexes.Indexable):

    text = indexes.CharField(document=True, use_template=True)
    
    slug = indexes.CharField(model_attr='slug', null=False)
    name = indexes.CharField(model_attr='name', null=False, boost=1.125)
    description = indexes.CharField(model_attr='description', null=True)
    tags = indexes.MultiValueField()
    created = indexes.DateTimeField(model_attr='created', null=False)

    activity = indexes.IntegerField()
    suggestions = indexes.FacetCharField()


    def get_model(self):
        return Project

    @property
    def _get_content_type(self):
        return ContentType.objects.get_for_model(self.get_model())

    @property
    def _six_month_ago(self):
        """Return date from 6 month ago."""
        return datetime.datetime.now() - datetime.timedelta(6*365/12)

    def prepare(self, obj):
        prepared_data = super(ProjectIndex, self).prepare(obj)
        prepared_data['suggestions'] = prepared_data['text']
        prepared_data['tags'] = [tag.name for tag in obj.tagsobj]
        
        # Number of actionlog for the last 6 months
        activity = LogEntry.objects.filter(
            content_type=self._get_content_type,
            object_id=obj.id,
            action_time__gte=self._six_month_ago
            ).order_by().count()
        prepared_data['activity'] = activity if activity else 0

        return prepared_data

    def index_queryset(self):
        """Used when the entire index for model is updated."""
        # Do not index private projects
        return self.get_model().objects.exclude(private=True).filter(
            modified__lte=datetime.datetime.now())

    def should_update(self, instance, **kwargs):
        """
        Determine if an object should be updated in the index.
        """
        if instance.private:
            return False
        return True

    # TODO: Newer version of django-haystack has support for .using() and this
    # method needs to be refactored once using that.
    def update_object(self, instance, using=None, **kwargs):
        """
        Update the index for a single object. Attached to the class's
        post-save hook.
        """
        # Check to make sure we want to index this first.
        if self.should_update(instance, **kwargs):
            self._get_backend(using).update(self, [instance])
        else:
            # self.should_update checks whether a project is private or not.
            # If it was open and now it's private, it should be removed from the
            # indexing. Private projects should NOT be indexed for now.
            self.remove_object(instance, using, **kwargs)

    def get_updated_field(self):
        """Project mode field used to identify new/modified object to index."""
        return 'modified'
########NEW FILE########
__FILENAME__ = signals
# -*- coding: utf-8 -*-
from django.dispatch import Signal

pre_proj_save = Signal(providing_args=['instance', 'form'])
post_proj_save_m2m = Signal(providing_args=['instance', 'form'])
pre_comp_prep = Signal(providing_args=['instance'])
post_comp_prep = Signal(providing_args=['instance'])
submission_error = Signal(providing_args=['filename', 'message'])
# Signal emitted when a new project is created
project_created = Signal()
project_deleted = Signal()

pre_set_stats = Signal(providing_args=['instance'])
post_set_stats = Signal(providing_args=['instance'])

# Resource signals
post_resource_save = Signal(providing_args=['instance', 'created', 'user'])
post_resource_delete = Signal(providing_args=['instance', 'user'])

# Release signals
post_release_save = Signal(providing_args=['instance', 'created', 'user'])

# SL Submit Translations signal
pre_submit_translation = Signal(providing_args=['instance'])
post_submit_translation = Signal(providing_args=['request', 'resource', 'language', 'modified'])

# This is obsolete:
sig_refresh_cache = Signal(providing_args=["resource"])
pre_refresh_cache = sig_refresh_cache
post_refresh_cache = Signal(providing_args=["resource"])

# This is obsolete:
sig_clear_cache = Signal(providing_args=["resource"])
pre_clear_cache = sig_clear_cache
post_clear_cache = Signal(providing_args=["resource"])

# Signals used by cla addon:
pre_team_request = Signal(providing_args=['project', 'user'])
pre_team_join = Signal(providing_args=['project', 'user'])
cla_create = Signal(providing_args=['project', 'license_text', 'request'])
project_access_control_form_start = Signal(providing_args=['instance', 'project'])

# Signals used by licenses addon
project_form_init = Signal(providing_args=['form'])
project_form_save = Signal(providing_args=['form', 'instance'])

#Signals used by subscriptions
project_private_check = Signal(providing_args=['instance'])
project_type_check = Signal(providing_args=['instance'])

# Cache signals
project_outsourced_changed = Signal(providing_args=['project'])

class ClaNotSignedError(Exception): pass

########NEW FILE########
__FILENAME__ = forms_template_style
from django import template

register = template.Library()

@register.inclusion_tag("form_as_table_rows.html")
def form_as_table_rows(form):
    """
    Create a form using HTML table rows.
    """
    return {"form": form}

########NEW FILE########
__FILENAME__ = project_hub
# -*- coding: utf-8 -*-
from django.conf import settings
from django.core.urlresolvers import reverse
from django.db.models import get_model
from django import template
from django.contrib.contenttypes.models import ContentType
from django.utils.translation import ugettext_noop as _

Project = get_model('projects', 'Project')

register = template.Library()

@register.inclusion_tag('projects/project_hub_projects_toogler.html', takes_context=True)
def hub_associate_project_toogler(context, hub_project, outsourced_project):
    """Handle watch links for objects by the logged in user."""
    context['ENABLE_NOTICES'] = settings.ENABLE_NOTICES
    outsourced_project.url = reverse('project_hub_projects_toggler',
        args=(hub_project.slug,))
    context['outsourced_project'] = outsourced_project

    return context

########NEW FILE########
__FILENAME__ = project_tags
from django import template
from django.db.models import Sum
from transifex.languages.models import Language
from transifex.resources.models import RLStats, Resource
from transifex.txcommon.utils import StatBarsPositions

register = template.Library()

@register.inclusion_tag('resources/stats_bar_simple.html')
def progress_for_project(project, language_code=None, width=100):
    """Render a progressbar for the specified project."""

    stats = RLStats.objects.by_project(project).filter(
        language__code=language_code
    ).values('language__code').annotate(
        trans=Sum('translated'),
        untrans=Sum('untranslated')
    ).order_by()

    total = Resource.objects.by_project(project).aggregate(
        total_entities=Sum('total_entities')
    )['total_entities']

    if not stats:
        # Project has no resources
        bar_data = [
            ('trans', 0),
            ('untrans', 100)
        ]
        return {
            'untrans_percent': 100,
            'trans_percent': 0,
            'untrans': 0,
            'trans': 0,
            'pos': StatBarsPositions(bar_data, width),
            'width': width
        }

    stats = stats[0]
    translated = stats['trans']
    untranslated = stats['untrans']

    try:
        translated_perc = translated * 100 / total
    except ZeroDivisionError:
        translated_perc = 100

    untranslated_perc = 100 - translated_perc

    bar_data = [
        ('trans', translated_perc),
        ('untrans', untranslated_perc)
    ]

    return {
        'untrans_percent': untranslated_perc,
        'trans_percent': translated_perc,
        'untrans': untranslated,
        'trans': translated,
        'pos': StatBarsPositions(bar_data, width),
        'width': width
    }

########NEW FILE########
__FILENAME__ = access_control
from django.core.urlresolvers import reverse
from transifex.txcommon.tests.base import (Project, Language, Team, AuPermission,
    BaseTestCase, USER_ROLES, create_users_and_clients, skip)
from transifex.txcommon.tests.utils import (check_page_status,
    convert_url_roles, assert_status_code)

URL_ROLES = {
    '(301, )':[
        'GET:/projects/p/project1/access/pm/add',
    ],
    '(403, )':[
        'POST:/projects/p/project1/access/pm/1/delete/',
        'POST:/projects/p/project1/access/rq/1/delete/',
        'POST:/projects/p/project1/access/rq/1/approve/',
    ],
    '(200, {}, "This project does not maintain its own translation teams")':[
        'GET:/projects/p/project1/languages/add/',
        'GET:/projects/p/project1/language/pt_BR/',
        'GET:/projects/p/project1/language/pt_BR/members/',
        'GET:/projects/p/project1/language/pt_BR/edit/',
        'GET:/projects/p/project1/language/pt_BR/delete/',
        'POST:/projects/p/project1/language/pt_BR/request/',
        'POST:/projects/p/project1/language/pt_BR/approve/diegobz/',
        'POST:/projects/p/project1/language/pt_BR/deny/diegobz/',
        'POST:/projects/p/project1/language/pt_BR/withdraw/',
        'POST:/projects/p/project1/language/pt_BR/leave/',
        'POST:/projects/p/project1/languages/request/',
        'POST:/projects/p/project1/language/el/approve/',
        'POST:/projects/p/project1/language/el/deny/',
    ],
}

URL_ROLES_FREE = {
    '(301, )':[
        'GET:/projects/p/project1/access/pm/add',
    ],
    '(403, )':[
        'POST:/projects/p/project1/access/pm/1/delete/',
        'POST:/projects/p/project1/access/rq/1/delete/',
        'POST:/projects/p/project1/access/rq/1/approve/',
    ],
    '(200, {}, "Free for all")':[
        'GET:/projects/p/project1/languages/add/',
        'GET:/projects/p/project1/language/pt_BR/',
        'GET:/projects/p/project1/language/pt_BR/members/',
        'GET:/projects/p/project1/language/pt_BR/edit/',
        'GET:/projects/p/project1/language/pt_BR/delete/',
        'POST:/projects/p/project1/language/pt_BR/request/',
        'POST:/projects/p/project1/language/pt_BR/approve/diegobz/',
        'POST:/projects/p/project1/language/pt_BR/deny/diegobz/',
        'POST:/projects/p/project1/language/pt_BR/withdraw/',
        'POST:/projects/p/project1/language/pt_BR/leave/',
        'POST:/projects/p/project1/languages/request/',
        'POST:/projects/p/project1/language/el/approve/',
        'POST:/projects/p/project1/language/el/deny/',
    ],
}

URL_ROLES_OUTSOURCE = {
    '(301, )':[
        'GET:/projects/p/project1/access/pm/add',
    ],
    '(403, )':[
        'POST:/projects/p/project1/access/pm/1/delete/',
        'POST:/projects/p/project1/access/rq/1/delete/',
        'POST:/projects/p/project1/access/rq/1/approve/',
    ],
    '(200, {}, "Outsourcing")':[
        'GET:/projects/p/project1/language/pt_BR/',
        'GET:/projects/p/project1/language/pt_BR/members/',
        'GET:/projects/p/project1/language/pt_BR/edit/',
        'GET:/projects/p/project1/language/pt_BR/delete/',
        'POST:/projects/p/project1/language/pt_BR/request/',
        'POST:/projects/p/project1/language/pt_BR/approve/diegobz/',
        'POST:/projects/p/project1/language/pt_BR/deny/diegobz/',
        'POST:/projects/p/project1/language/pt_BR/withdraw/',
        'POST:/projects/p/project1/language/pt_BR/leave/',
        'POST:/projects/p/project1/language/el/approve/',
        'POST:/projects/p/project1/language/el/deny/',
    ],
    '(200, {}, "Child project")': [
        'GET:/projects/p/project1/languages/add/',
        'POST:/projects/p/project1/languages/request/',
     ]
}

class ProjectAccessControlTestCase(BaseTestCase):
    """
    Test if all project URLs return correct status code depending on each
    user role.
    """
    EXTRA_USER_ROLES = ['outsource_writer', 'outsource_team_member',
        'outsource_maintainer']

    def setUp(self):
        super(ProjectAccessControlTestCase, self).setUp()
        if 'anonymous' in USER_ROLES:
            USER_ROLES.remove('anonymous')
        # Extending users and clients
        extra_users, extra_clients = create_users_and_clients(
                self.EXTRA_USER_ROLES)
        self.user.update(extra_users)
        self.client.update(extra_clients)

        # Create an extra project to use it as the outsource
        self.project_outsource = Project.objects.get_or_create(
            slug="project1_outsource", name="Test Outsource Project",
            source_language=self.language_en
        )[0]
        self.project_outsource.maintainers.add(self.user['outsource_maintainer'])

        # Add django-authority permission for outsource writer
        self.perm_outsource = AuPermission(codename='project_perm.submit_translations',
            approved=True, user=self.user['outsource_writer'],
            content_object=self.project_outsource,
            creator=self.user['maintainer'])
        self.perm_outsource.save()

        # Create a team to the outsource project
        self.team_outsource = Team.objects.get_or_create(
            language=self.language, project=self.project_outsource,
            creator=self.user['maintainer'])[0]
        self.team_outsource.coordinators.add(self.user['team_coordinator'])
        self.team_outsource.members.add(self.user['outsource_team_member'])

    def tearDown(self):
        USER_ROLES.extend(self.EXTRA_USER_ROLES)
        super(ProjectAccessControlTestCase, self).tearDown()
        for u in self.EXTRA_USER_ROLES:
            USER_ROLES.remove(u)
        USER_ROLES.append('anonymous')


    def testAnyoneCanSubmit(self):
        """Check URL access when anyone can submit to a project."""
        self.project.anyone_submit = True
        self.project.save()

        for user_role in USER_ROLES:
            check_page_status(self, user_role, convert_url_roles(URL_ROLES_FREE))

        # Check if a simple registered user can open up Lotte
        expected_code = 200
        url = '/projects/p/project1/resource/resource1/l/pt_BR/'
        for user_role in ['registered']:
            response = self.client[user_role].get(url)
            assert_status_code(self, response, expected_code, url,
                user_role)


    def testOutsourcedAccess(self):
        """Check URL access when a project outsources its access control."""

        self.project.outsource = self.project_outsource
        self.project.save()

        for user_role in USER_ROLES:
            check_page_status(self, user_role, convert_url_roles(URL_ROLES_OUTSOURCE))

        # Check if a writer and a team member of the outsource project can
        # open up Lotte
        expected_code = 200
        url = '/projects/p/project1/resource/resource1/l/pt_BR/'
        for user_role in self.EXTRA_USER_ROLES:
            response = self.client[user_role].get(url)
            assert_status_code(self, response, expected_code, url,
                user_role)

    def testOriginalMaintainer(self):
        """
        Even if a project is outsourced, its maintainer needs to be able to
        edit the source language and add translations as well.
        """

        self.project.outsource = self.project_outsource
        self.project.save()

        maintainer = self.project.maintainers.all()[0]

        # Check if the maintainer can add translations.
        expected_code = 200
        url = reverse('translate_resource', args=[self.project.slug,
            self.resource.slug, self.language.code])
        response = self.client[maintainer.username].get(url)
        assert_status_code(self, response, expected_code, url,
            str(maintainer.username))

        # Check if the maintainer can edit the resource
        expected_code = 200
        url = reverse('resource_edit', args=[self.project.slug,
            self.resource.slug])
        response = self.client[maintainer.username].get(url)
        assert_status_code(self, response, expected_code, url,
            str(maintainer.username))

    def test_project_access_control_edit(self):
        """Test edit of project access control"""
        url = reverse('project_access_control_edit', args=[self.project.slug,])
        resp = self.client['maintainer'].get(url)
        self.assertContains(resp, '<label for="id_access_control_1">'\
                '<input checked="checked" name="access_control" value='\
                '"limited_access"', status_code=200)

        #change access control to outsourced access
        DATA = {'project_type':'outsourced', 'access_control':"free_for_all",
                'next': url, 'outsource': '22'}
        resp = self.client['maintainer'].post(url, DATA, follow=True)
        self.assertContains(resp, '<label for="id_project_type_2"><input'\
                ' checked="checked" name="project_type" value="outsourced"',
                status_code=200)

        #change access control to outsourced with not outsource field filled
        DATA = {'project_type':'outsourced', 'next': url, 'outsource': ''}
        resp = self.client['maintainer'].post(url, DATA, follow=True)
        self.assertContains(resp, 'This field is required', status_code=200)

        #change access control to typical and free for all
        DATA = {'project_type':'typical', 'access_control':"free_for_all", 'next': url, 'outsource': ''}
        resp = self.client['maintainer'].post(url, DATA, follow=True)
        self.assertContains(resp, 'Free for all', status_code=200)

        #change access control to typical with limited access
        DATA = {'project_type':'typical', 'access_control':"limited_access", 'next': url, 'outsource': ''}
        resp = self.client['maintainer'].post(url, DATA, follow=True)
        self.assertNotContains(resp, 'Free for all', status_code=200)

        #change access control to typical with not access_control field filled
        DATA = {'project_type':'typical', 'next': url, 'outsource': ''}
        resp = self.client['maintainer'].post(url, DATA, follow=True)
        self.assertContains(resp, 'This field is required', status_code=200)

    @skip
    def test_project_hub_access_control_edit(self):
        """Test edit of project hub access control"""
        url = reverse('project_access_control_edit', args=[self.project.slug,])

        #change access control as hub and free for all
        DATA = {'project_type':'hub', 'access_control':"free_for_all",
                'next': url, 'outsource': ''}
        resp = self.client['maintainer'].post(url, DATA, follow=True)
        self.assertContains(resp, 'Free for all')
        self.assertContains(resp, 'Hub')

        #change access control as hub with limited access
        DATA = {'project_type':'hub', 'access_control':"limited_access", 'next': url, 'outsource': ''}
        resp = self.client['maintainer'].post(url, DATA, follow=True)
        self.assertNotContains(resp, 'Free for all')
        self.assertContains(resp, 'Hub')

        #change access control as hub with not access_control field filled
        DATA = {'project_type':'hub', 'next': url, 'outsource': ''}
        resp = self.client['maintainer'].post(url, DATA, follow=True)
        self.assertContains(resp, 'This field is required', status_code=200)

    def test_public_project_can_outsource_from_my_private_project(self):
        url = reverse('project_detail',
            kwargs={'project_slug': self.project.slug})

        self.project_private.is_hub = True
        self.project_private.save()

        response = self.client['maintainer'].post(url, {
            'project_type': "outsourced",
            'outsource': self.project_private.id,
            'next': url}
            )

        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'projects/project_detail.html')

########NEW FILE########
__FILENAME__ = api
# -*- coding: utf-8 -*-
import os
from django.core.urlresolvers import reverse
from django.utils import unittest
from django.conf import settings
from django.utils import simplejson
from django.test import TestCase, TransactionTestCase
from django.contrib.auth.models import User, Permission
from transifex.txcommon.tests.base import Users, Languages, \
        NoticeTypes, Projects, Resources, TransactionNoticeTypes, \
        TransactionLanguages, TransactionProjects, TransactionUsers,\
        BaseTestCase
from transifex.txcommon.utils import log_skip_transaction_test
from transifex.resources.models import RLStats, Resource
from transifex.projects.models import Project


class TestProjectAPI(BaseTestCase):

    def setUp(self):
        super(TestProjectAPI, self).setUp()
        self.url_projects = reverse('apiv2_projects')
        self.url_project = reverse('apiv2_project', kwargs={'project_slug': 'foo'})

    def test_get(self):
        res = self.client['anonymous'].get(self.url_projects)
        self.assertEquals(res.status_code, 401)
        res = self.client['maintainer'].get(self.url_projects + "?details")
        self.assertEquals(res.status_code, 501)
        res = self.client['maintainer'].get(self.url_projects)
        self.assertEquals(res.status_code, 200)
        data = simplejson.loads(res.content)
        self.assertEquals(len(data), 7)
        self.assertFalse('created' in data[0])
        self.assertTrue('slug' in data[0])
        self.assertTrue('name' in data[0])
        res = self.client['registered'].get(self.url_projects)
        self.assertEquals(res.status_code, 200)
        data = simplejson.loads(res.content)
        self.assertEquals(len(data), 6)
        res = self.client['anonymous'].get(self.url_project)
        self.assertEquals(res.status_code, 401)
        res = self.client['registered'].get(self.url_project)
        self.assertEquals(res.status_code, 404)
        private_url = "/".join([self.url_projects[:-2], self.project_private.slug, ''])
        res = self.client['registered'].get(private_url)
        self.assertEquals(res.status_code, 401)
        res = self.client['maintainer'].get(private_url)
        self.assertEquals(res.status_code, 200)
        public_url = "/".join([self.url_projects[:-2], self.project.slug, ''])
        res = self.client['registered'].get(public_url + "?details")
        self.assertEquals(res.status_code, 200)
        self.assertEquals(len(simplejson.loads(res.content)), 17)
        self.assertTrue('created' in simplejson.loads(res.content))
        public_url = "/".join(
            [self.url_projects[:-2], self.project.slug, ""]
        )
        res = self.client['registered'].get(public_url)
        self.assertEquals(res.status_code, 200)
        self.assertTrue('slug' in simplejson.loads(res.content))
        self.assertTrue('name' in simplejson.loads(res.content))
        self.assertTrue('description' in simplejson.loads(res.content))
        self.assertTrue('source_language_code' in simplejson.loads(res.content))
        self.assertEquals(len(simplejson.loads(res.content)), 4)

        # Test pagination
        res = self.client['registered'].get(self.url_projects + "?start=5")
        self.assertEquals(res.status_code, 200)
        data = simplejson.loads(res.content)
        self.assertEquals(len(data), 2)
        res = self.client['registered'].get(self.url_projects + "?end=5")
        self.assertEquals(res.status_code, 200)
        data = simplejson.loads(res.content)
        self.assertEquals(len(data), 4)
        res = self.client['registered'].get(self.url_projects + "?start=a")
        self.assertEquals(res.status_code, 400)
        res = self.client['registered'].get(self.url_projects + "?start=0")
        self.assertEquals(res.status_code, 400)
        res = self.client['registered'].get(self.url_projects + "?end=0")
        self.assertEquals(res.status_code, 400)
        res = self.client['registered'].get(self.url_projects + "?start=1&end=4")
        self.assertEquals(res.status_code, 200)
        data = simplejson.loads(res.content)
        self.assertEquals(len(data), 3)
        res = self.client['registered'].get(self.url_projects + "?start=1&end=4")
        data = simplejson.loads(res.content)
        self.assertEquals(len(data), 3)
        self.assertEquals(res.status_code, 200)

    def test_get_teams(self):
        """Test the teams field for the project."""
        url = reverse(
            'apiv2_project', kwargs={'project_slug': self.project.slug}
        )
        res = self.client['registered'].get(url + '?details')
        self.assertContains(res, 'teams', status_code=200)
        self.assertIsInstance(simplejson.loads(res.content)['teams'], list)

    def test_post(self):
        res = self.client['anonymous'].post(self.url_projects, content_type='application/json')
        self.assertEquals(res.status_code, 401)
        res = self.client['registered'].post(self.url_project, content_type='application/json')
        self.assertContains(res, "POSTing to this url is not allowed", status_code=400)
        res = self.client['registered'].post(self.url_projects)
        self.assertContains(res, "Bad Request", status_code=400)
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({'name': 'name of project'}),
            content_type="application/json"
        )
        self.assertContains(res, "Field 'slug' is required to create", status_code=400)
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({'slug': 'slug'}), content_type='application/json'
        )
        self.assertContains(res, "Field 'name' is required to create", status_code=400)
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({'slug': 'slug', 'name': 'name'}),
            content_type='application/json'
        )
        self.assertContains(res, "Field 'source_language_code' is required to create", status_code=400)
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'slug', 'name': 'name', 'owner': 'owner',
                'source_language_code': 'en',
            }),
            content_type='application/json'
        )
        self.assertContains(res, "Owner cannot be set explicitly.", status_code=400)
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'api_project',
                'name': 'Project from API',
                'source_language_code': 'en',
                'description': 'desc',
                'outsource': 'not_exists',
            }),
            content_type='application/json'
        )
        self.assertContains(res, "Project for outsource does not exist", status_code=400)
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'api_project', 'name': 'Project from API',
                'source_language_code': 'en', 'maintainers': 'not_exists',
                'description': 'desc',
            }),
            content_type='application/json'
        )
        self.assertContains(res, "User", status_code=400)
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'api_project_maintainers',
                'name': 'Project from API',
                'source_language_code': 'en',
                'maintainers': 'registered',
                'none': 'none'
            }),
            content_type='application/json'
        )
        self.assertContains(res, "Field 'none'", status_code=400)
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'api_project_maintainers',
                'name': 'Project from API',
                'source_language_code': 'en',
                'maintainers': 'registered',
                'description': 'desc',
            }),
            content_type='application/json'
        )
        self.assertEquals(res.status_code, 201)
        self.assertEquals(len(Project.objects.all()), 8)
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'api_project', 'name': 'Project from API',
                'source_language_code': 'en_US', 'description': 'desc',
            }),
            content_type='application/json'
        )
        p = Project.objects.get(slug='api_project')
        user = User.objects.get(username='registered')
        self.assertTrue(user in p.maintainers.all())
        self.assertEquals(res.status_code, 201)
        self.assertEquals(len(Project.objects.all()), 9)
        self.assertEquals(p.source_language, self.language_en)

        # Check permissions
        user = User.objects.get(username='registered')
        user.groups = []
        user.save()
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'api_project_2', 'name': 'Project from API - second',
                'source_language_code': 'en_US', 'desctiption': 'desc',
            }),
            content_type='application/json'
        )
        self.assertEquals(res.status_code, 403)

    def test_put(self):
        res = self.client['anonymous'].put(
            self.url_project, data=simplejson.dumps({}),
            content_type='application/json'
        )
        self.assertEquals(res.status_code, 401)
        res = self.client['registered'].put(self.url_project)
        self.assertEquals(res.status_code, 400)
        res = self.client['registered'].put(
            self.url_project[:-1] + "1/",
            simplejson.dumps({'name': 'name of project'}),
            content_type="application/json"
        )
        self.assertEquals(res.status_code, 404)
        res = self.client['maintainer'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'foo', 'name': 'Foo Project',
                'source_language_code': 'en', 'description': 'desc',
            }),
            content_type='application/json'
        )
        self.assertEquals(res.status_code, 201)
        res = self.client['registered'].put(
            self.url_project, data=simplejson.dumps({}),
            content_type='application/json'
        )
        self.assertEquals(res.status_code, 403)
        user = User.objects.get(username='registered')
        user.user_permissions.add(
            Permission.objects.get(codename="change_project")
        )
        res = self.client['registered'].put(
            self.url_project,
            data=simplejson.dumps({'foo': 'foo'}),
            content_type='application/json'
        )
        self.assertContains(res, "Field 'foo'", status_code=400)
        res = self.client['registered'].put(
            self.url_project, data=simplejson.dumps({}),
            content_type='application/json'
        )
        self.assertEquals(res.status_code, 200)
        name = 'New name for foo'
        res = self.client['registered'].put(
            self.url_project,
            data=simplejson.dumps({'name': name}),
            content_type='application/json'
        )
        self.assertEquals(res.status_code, 200)
        p_foo = Project.objects.get(slug="foo")
        self.assertEquals(p_foo.name, name)
        res = self.client['registered'].put(
            self.url_project,
            data=simplejson.dumps({'outsource': "foo"}),
            content_type='application/json'
        )
        self.assertContains(res, "Original and outsource projects are the same", status_code=400)
        res = self.client['registered'].put(
            self.url_project,
            data=simplejson.dumps({'outsource': "bar"}),
            content_type='application/json'
        )
        self.assertContains(res, "Project for outsource does not exist", status_code=400)
        res = self.client['registered'].put(
            self.url_project,
            data=simplejson.dumps({'maintainers': 'none, not'}),
            content_type='application/json'
        )
        self.assertContains(res, "User", status_code=400)

    def test_update_source_language(self):
        """Test source language updating.

        It is allowed, only if the project has no resources.
        """
        self._set_permissions()
        res = self.client['maintainer'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'foo', 'name': 'Foo Project',
                'source_language_code': 'en', 'description': 'desc',
            }),
            content_type='application/json'
        )
        self.assertEquals(res.status_code, 201)
        res = self.client['registered'].put(
            self.url_project,
            data=simplejson.dumps({'source_language_code': 'en'}),
            content_type='application/json'
        )
        self.assertEquals(res.status_code, 200)
        p_foo = Project.objects.get(slug="foo")
        self.assertEquals(p_foo.source_language.code, 'en')
        url = reverse(
            'apiv2_project', kwargs={'project_slug': self.project.slug}
        )
        res = self.client['registered'].put(
            url,
            data=simplejson.dumps({'source_language_code': 'en'}),
            content_type='application/json'
        )
        self.assertContains(
            res, "source language is not allowed", status_code=400
        )

    def test_update_slug(self):
        """Test that updating the slug through the API is not allowed."""
        self._set_permissions()
        url = reverse(
            'apiv2_project', kwargs={'project_slug': self.project.slug}
        )
        res = self.client['registered'].put(
            url,
            data=simplejson.dumps({'slug': 'blah'}),
            content_type='application/json'
        )
        self.assertContains(
            res, "'slug' is not available", status_code=400
        )

    def test_delete(self):
        res = self.client['anonymous'].delete(self.url_project)
        self.assertEquals(res.status_code, 401)
        res = self.client['registered'].delete(self.url_projects)
        self.assertEquals(res.status_code, 403)
        self._set_permissions(perms=['delete_project'])
        res = self.client['registered'].delete(self.url_projects)
        self.assertEquals(res.status_code, 400)
        self.assertContains(res, "Project slug not specified", status_code=400)
        res = self.client['registered'].delete(self.url_project)
        self.assertEquals(res.status_code, 404)
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'foo', 'name': 'Foo Project',
                'source_language_code': 'en', 'description': 'desc',
            }),
            content_type='application/json'
        )
        self.assertEquals(res.status_code, 201)
        res = self.client['registered'].delete(self.url_project)
        self.assertEquals(res.status_code, 204)

    def test_project_validation(self):
        """Test that a project created through the API gets validated."""
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'ab+cd': 'api_project', 'name': 'Project from API',
                'source_language_code': 'en_US', 'description': 'desc',
            }),
            content_type='application/json'
        )
        self.assertContains(res, "'slug' is required", status_code=400)

    def _set_permissions(self, username='registered', perms=['change_project']):
        """Set the permissions for the user ``username`` to
        update a project.
        """
        user = User.objects.get(username=username)
        for perm in perms:
            user.user_permissions.add(
                Permission.objects.get(codename=perm)
            )


class TestTransactionProjectAPI(TransactionUsers, TransactionLanguages,
                                TransactionTestCase):

    def setUp(self):
        super(TestTransactionProjectAPI, self).setUp()
        self.url_projects = reverse('apiv2_projects')

    def test_duplciate_entry(self):
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'api_project', 'name': 'Project from API',
                'source_language_code': 'en_US', 'description': 'desc',
            }),
            content_type='application/json'
        )
        res = self.client['registered'].post(
            self.url_projects, simplejson.dumps({
                'slug': 'api_project', 'name': 'Project from API',
                'source_language_code': 'en_US', 'description': 'desc',
            }),
            content_type='application/json'
        )
        self.assertContains(res, "already exists", status_code=400)

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-
from django.db import IntegrityError
from django.test import TestCase
from django.core.exceptions import ValidationError
from transifex.txcommon.tests.base import BaseTestCase
from transifex.languages.models import Language
from transifex.resources.models import Translation
from transifex.projects.models import Project
from transifex.resources.models import Resource


class ModelTests(BaseTestCase):

    def test_project_slug_integrity(self):
        """ Check duplication of project slug."""
        p, created = Project.objects.get_or_create(
            slug="foo", name="Foo Project", source_language=self.language_en
        )
        new_p = Project(
            slug="foo", name="Foo Project", source_language = self.language_en
        )
        self.assertRaises(IntegrityError, new_p.save)

    def test_def_manager_public(self):
        """Test that managers behave the same between models and relations.

        Grab a maintainer's public projects through the model and compare them
        with the ones returned from his own instance's foreign key relation.
        """
        self.assertEqual(
            Project.objects.filter(maintainers__id=self.user['maintainer'].pk).public().count(),
            self.user['maintainer'].projects_maintaining.filter(private=False).count(),)

    def test_project_resource_source_lang(self):
        """Test the source_language field against a resource."""
        p = Project.objects.create(slug='slug', source_language=self.language_en)
        self.assertEquals(p.source_language, self.language_en)
        r = Resource.objects.create(
            slug='rslug', project=p, source_language=self.language_ar
        )
        self.assertEqual(r.source_language, p.source_language)

    def test_slug_validation(self):
        """Test that validation for slugs works."""
        slug = 'abc'
        p = Project(
            slug=slug, name='a', source_language=self.language_en,
            description='d'
        )
        p.clean_fields()
        slug = 'abc+'
        p = Project(
            slug=slug, name='a', source_language=self.language_en,
            description='d'
        )
        self.assertRaises(ValidationError, p.clean_fields)

########NEW FILE########
__FILENAME__ = private_projects
import os

from django.conf import settings
from django.contrib.auth import models
from django.contrib.auth.models import User, Group, Permission
from django.contrib.contenttypes.models import ContentType
from django.core import management
from django.core.urlresolvers import reverse
from django.db.models import get_model
from django.test import TestCase
from django.test.client import Client

from authority.models import Permission
from django_addons.autodiscover import autodiscover_notifications

from transifex.txcommon.tests.base import BaseTestCase, USER_ROLES,\
        NoticeTypes, skip
from transifex.txcommon.log import logger
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.projects.permissions.project import ProjectPermission
from transifex.teams.models import Team
from django.utils import unittest

# TODO: POST requests should also be tested everywhere (teams, tr. actions etc.)

Watch = get_model('repowatch', 'Watch')
POFileLock = get_model('locks', 'POFileLock')

class PrivateProjectTest(BaseTestCase):
    """
    Test private projects overall.

    Permissions, get, post return codes etc.
    """
    @skip
    def test_project_list_with_anonymous_user(self):
        """
        Test that project list pages contain only the public project and not
        the private, if the user is anonymous.
        """

        ### project list ALL
        # Issue a GET request.
        response = self.client['anonymous'].get(reverse('project_list'))

        # Check that the response is 200 OK.
        self.failUnlessEqual(response.status_code, 200)

        # Check that the rendered context contains all public projects (see setup)
        self.failUnlessEqual(len(response.context['project_list']),
            Project.objects.filter(private=False).count())

        # Ensure that private project does NOT appear
        for project in response.context['project_list']:
            self.failIfEqual(project.slug, self.project_private.slug)

        ### project list RECENT
        # Issue a GET request.
        response = self.client['anonymous'].get(reverse('project_list_recent'))

        # Check that the response is 200 OK.
        self.failUnlessEqual(response.status_code, 200)

        # Check that the rendered context contains all (public) projects (see setup)
        self.failUnlessEqual(len(response.context['project_list']),
            Project.objects.filter(private=False).count())

        # Ensure that private project does NOT appear
        self.failIfEqual(response.context['project_list'][0].slug, self.project_private.slug)

        #TODO: FEATURED, OPEN TRANSLATIONS list testing

    @skip
    def test_project_list_with_logged_in_user(self):
        """
        Test that project list pages contain only the public project and not
        the private, if the user is logged in.
        """

        ### project list ALL
        # Issue a GET request.
        response = self.client['registered'].get(reverse('project_list'))

        # Check that the response is 200 OK.
        self.failUnlessEqual(response.status_code, 200)

        # Check that the rendered context contains all public projects (see setup)
        self.failUnlessEqual(len(response.context['project_list']),
            Project.objects.filter(private=False).count())

        # Ensure that private project does NOT appear
        for project in response.context['project_list']:
            self.failIfEqual(project.slug, self.project_private.slug)

        ### project list RECENT
        # Issue a GET request.
        response = self.client['registered'].get(reverse('project_list_recent'))

        # Check that the response is 200 OK.
        self.failUnlessEqual(response.status_code, 200)

        # Check that the rendered context contains all (public) projects (see setup)
        self.failUnlessEqual(len(response.context['project_list']),
            Project.objects.filter(private=False).count())

        # Ensure that private project does NOT appear
        for project in response.context['project_list']:
            self.failIfEqual(project.slug, self.project_private.slug)


    def test_project_detail(self):
        """
        Check private project details access.
        """

        # Check anonymous user and logged in user with no permissions
        for user in ['anonymous', 'registered']:
            response = self.client[user].get(self.urls['project_private'])
            self.failUnlessEqual(response.status_code, 403)

        # Check people who should have access to the private project
        for user in ['maintainer', 'team_coordinator', 'team_member',
                'reviewer']: # 'writer',
            response = self.client[user].get(self.urls['project_private'])
            self.failUnlessEqual(response.status_code, 200)

    def test_resource_details(self):
        """
        Check private project components' detail access.
        """

        # Check anonymous user and logged in user with no permissions
        for user in ['anonymous', 'registered']:
            response = self.client[user].get(self.urls['resource_private'])
            self.failUnlessEqual(response.status_code, 403)

        # Check people who should have access to the private project
        for user in ['maintainer', 'team_coordinator', 'team_member',
                'reviewer']: # 'writer',
            response = self.client[user].get(self.urls['resource_private'])
            self.failUnlessEqual(response.status_code, 200)

    def test_widgets(self):
        """
        Test if the permissions to project widgets page are the correct ones.
        """
        #'/projects/p/priv_test/''/projects/p/priv_test/widgets/'
        url = reverse('project_widgets', kwargs={'project_slug':self.project_private.slug})

        # Check anonymous user and logged in user with no permissions
        for user in ['anonymous', 'registered']:
            response = self.client[user].get(url)
            self.failUnlessEqual(response.status_code, 403)

        # Check people who should have access to the private project
        for user in ['maintainer', 'writer', 'team_coordinator',
                'team_member', 'reviewer']:
            response = self.client[user].get(url)
            self.failUnlessEqual(response.status_code, 403)

    def test_search_project(self):
        """
        Test that searching for the private project does not return it.

        We also check the appearance of the public project
        """
        URL = reverse('search')
        TERMS_1_1 = {'q': self.project_private.slug}
        TERMS_1_2 = {'q': self.resource_private.slug}
        TERMS_1_3 = {'q': self.project_private.name}


        # All type of users should not see private projects in search results!
        for user in USER_ROLES:
            response = self.client[user].get(URL, TERMS_1_1)
            self.failUnlessEqual(response.status_code, 200)
            self.assertFalse(self.project_private in response.context['results'])

            response = self.client[user].get(URL, TERMS_1_2)
            self.failUnlessEqual(response.status_code, 200)
            self.assertFalse(self.project_private in response.context['results'])

            response = self.client[user].get(URL, TERMS_1_3)
            self.failUnlessEqual(response.status_code, 200)
            self.assertFalse(self.project_private in response.context['results'])

    def test_teams_access(self):
        """
        Check private project teams' pages access.
        """
        URLs = {
            'anonymous' : {
                403 : [
                    '/projects/p/%s/language/%s/' % (self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/members/' % (self.project_private.slug, self.language.code)
                ],
                302 : [
                    '/projects/p/%s/languages/add/' % self.project_private.slug,
                    '/projects/p/%s/language/%s/edit/' % (self.project_private.slug,
                        self.language.code),
                    '/projects/p/%s/language/%s/delete/' % (self.project_private.slug,
                         self.language.code),
                    '/projects/p/%s/language/%s/request/' % (self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/approve/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username),
                    '/projects/p/%s/language/%s/deny/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username),
                    '/projects/p/%s/language/%s/withdraw/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/leave/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/languages/request/' % self.project_private.slug,
                    '/projects/p/%s/language/%s/approve/' % (self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/deny/' %(self.project_private.slug, self.language.code),
                ]
            },
            'registered' : {
                403 : [
                    '/projects/p/%s/language/%s/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/members/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/languages/add/' % self.project_private.slug,
                    '/projects/p/%s/language/%s/edit/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/delete/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/request/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/approve/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username),
                    '/projects/p/%s/language/%s/deny/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username),
                    '/projects/p/%s/language/%s/withdraw/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/leave/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/languages/request/' % self.project_private.slug,
                    '/projects/p/%s/language/%s/approve/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/deny/' %(self.project_private.slug, self.language.code)
                ]
            },
            'maintainer' : {
                200 : [
                    '/projects/p/%s/language/%s/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/members/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/languages/add/' % self.project_private.slug,
                    '/projects/p/%s/language/%s/edit/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/delete/' %(self.project_private.slug, self.language.code)
                ],
                302 : [
                    '/projects/p/%s/language/%s/request/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/leave/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/languages/request/' % self.project_private.slug
                ],
                404 : [
                    '/projects/p/%s/language/%s/approve/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username),
                    '/projects/p/%s/language/%s/deny/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username),
                    '/projects/p/%s/language/%s/withdraw/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/approve/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/deny/' %(self.project_private.slug, self.language.code)
                ],
            },
            #'writer' : {
            #    200 : [
            #        '/projects/p/%s/languages/',
            #        '/projects/p/%s/language/%s/' %(self.project_private.slug, self.language.code)
            #    ],
            #    302 : [
            #        '/projects/p/%s/language/%s/request/' %(self.project_private.slug, self.language.code),
            #        '/projects/p/%s/language/%s/leave/' %(self.project_private.slug, self.language.code),
            #        '/projects/p/%s/languages/request/'
            #    ],
            #    404 : [
            #        '/projects/p/%s/language/%s/withdraw/' %(self.project_private.slug, self.language.code)
            #    ],
            #    403 : [
            #        '/projects/p/%s/languages/add/',
            #        '/projects/p/%s/language/%s/edit/' %(self.project_private.slug, self.language.code),
            #        '/projects/p/%s/language/%s/delete/' %(self.project_private.slug, self.language.code),
            #        '/projects/p/%s/language/%s/approve/%s/' % (self.project_private.slug, self.language.code,
            #            self.user['team_member'].username),
            #        '/projects/p/%s/language/%s/deny/%s/' % (self.project_private.slug, self.language.code,
            #            self.user['team_member'].username),
            #        '/projects/p/%s/language/%s/approve/' %(self.project_private.slug, self.language.code),
            #        '/projects/p/%s/language/%s/deny/' %(self.project_private.slug, self.language.code)
            #    ]
            #},
            'team_coordinator' : {
                200 : [
                    '/projects/p/%s/language/%s/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/members/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/edit/' %(self.project_private.slug, self.language.code)
                ],
                302 : [
                    '/projects/p/%s/language/%s/request/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/leave/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/languages/request/' % self.project_private.slug
                ],
                404 : [
                    '/projects/p/%s/language/%s/withdraw/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/approve/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username),
                    '/projects/p/%s/language/%s/deny/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username)
                ],
                403 : [
                    '/projects/p/%s/languages/add/' % self.project_private.slug,
                    '/projects/p/%s/language/%s/delete/' %(self.project_private.slug, self.language.code),
                    # TODO: Add a second team to check if coordinator has access too.
                    '/projects/p/%s/language/%s/approve/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/deny/' %(self.project_private.slug, self.language.code)
                ]
            },
            'team_member' : {
                200 : [
                    '/projects/p/%s/language/%s/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/members/' %(self.project_private.slug, self.language.code)
                ],
                302 : [
                    '/projects/p/%s/language/%s/request/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/leave/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/languages/request/' % self.project_private.slug
                ],
                404 : [
                    '/projects/p/%s/language/%s/withdraw/' %(self.project_private.slug, self.language.code),
                ],
                403 : [
                    '/projects/p/%s/languages/add/' % self.project_private.slug,
                    '/projects/p/%s/language/%s/edit/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/delete/' %(self.project_private.slug, self.language.code),
                    # TODO: Add a second team to check if coordinator has access too.
                    '/projects/p/%s/language/%s/approve/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/deny/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/approve/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username),
                    '/projects/p/%s/language/%s/deny/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username)
                ]
            },
            'reviewer' : {
                200 : [
                    '/projects/p/%s/language/%s/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/members/' %(self.project_private.slug, self.language.code)
                ],
                302 : [
                    '/projects/p/%s/language/%s/request/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/leave/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/languages/request/' % self.project_private.slug
                ],
                404 : [
                    '/projects/p/%s/language/%s/withdraw/' %(self.project_private.slug, self.language.code),
                ],
                403 : [
                    '/projects/p/%s/languages/add/' % self.project_private.slug,
                    '/projects/p/%s/language/%s/edit/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/delete/' %(self.project_private.slug, self.language.code),
                    # TODO: Add a second team to check if coordinator has access too.
                    '/projects/p/%s/language/%s/approve/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/deny/' %(self.project_private.slug, self.language.code),
                    '/projects/p/%s/language/%s/approve/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username),
                    '/projects/p/%s/language/%s/deny/%s/' % (self.project_private.slug, self.language.code,
                        self.user['team_member'].username)
                ]
            }
        }

        for user in URLs.keys():
            for status_code in URLs[user].keys():
                for url in URLs[user][status_code]:
                    response = self.client[user].get(url)
                    self.failUnlessEqual(response.status_code, status_code,
                        "Wrong status code for user '%s' and url '%s' ( %s != %s)" % (
                        user, url, response.status_code,status_code))

    def test_view_strings(self):
        """
        Check access to view lotte for a resource in a private project (read
        only access)
        """

        # Check access to lotte for a language with a team.
        URL = self.urls['translate_private']

        for user in ['anonymous']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 302)

        for user in ['registered']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer', 'team_coordinator', 'team_member',
                'reviewer']:# 'writer',
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 200)

        # Check access to lotte for a language without a team.
        URL = reverse('translate_resource', kwargs={'project_slug':self.project_private.slug,
            'resource_slug':self.resource_private.slug,
            'lang_code': self.language_ar.code })

        for user in ['anonymous']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 302)

        for user in ['registered', 'team_coordinator', 'team_member',
                'reviewer']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer']: #'writer',
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 200)

    def test_edit_strings(self):
        """
        Check access to view lotte for a resource in a private project
        """

        # Check access to lotte for a language with a team.
        URL = self.urls['translate_private']

        for user in ['anonymous']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 302)

        # Maybe this should be 404?
        for user in ['registered']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer',  'team_coordinator', 'team_member',
                'reviewer']: # 'writer'?
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 200)

        # Check access to lotte for a language without a team.
        URL = reverse('translate_resource', kwargs={'project_slug':self.project_private.slug,
            'resource_slug':self.resource_private.slug,
            'lang_code': self.language_ar.code })

        for user in ['anonymous']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 302)

        for user in ['registered']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['team_coordinator', 'team_member', 'reviewer']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer']: # 'writer'?
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 200)

    def test_download_file(self):
        """
        Check access to download translation file for a resource in a private
        project.
        """

        # Check who has access to download pofile for language with team
        URL = reverse('download_for_translation', kwargs={'project_slug':self.project_private.slug,
            'resource_slug':self.resource_private.slug,
            'lang_code': self.language.code })

        for user in ['anonymous']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 302)

        for user in ['registered']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 403) # better 404?

        for user in ['maintainer', 'team_coordinator', 'team_member',
                'reviewer']: #'writer'?
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 302) # why not 200?

        # Check who has access to download pofile for language without team
        URL = reverse('translate_resource', kwargs={'project_slug':self.project_private.slug,
            'resource_slug':self.resource_private.slug,
            'lang_code': self.language_ar.code })

        for user in ['anonymous']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 302)

        for user in ['team_coordinator', 'team_member', 'registered',
                'reviewer']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer']: # 'writer'?
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 200)

    #def test_submit_file(self):
        #"""
        #Check access to submit pofile in a component of a private project.
        #"""
        #URL = reverse('component_edit_file', kwargs={'project_slug':self.project_private.slug,
        #    'component_slug':'priv_component',
        #    'filename': self.FILEPATHS[0] })
        #
        ## POST Requests
        ## Anonymous user should not have access to submit files!
        #response = self.client.post(URL, follow=True)
        ## Login required will redirect use to the login page
        #self.failUnlessEqual(response.status_code, 200)
        #self.failUnlessEqual(('http://testserver/accounts/login/?next=%s' %
        #    (URL), 302), response.redirect_chain[0])
        #
        ## Logged in user without permissions should not have acces too!
        #test_user = User.objects.create_user('test_login', 'test@transifex.net',
        #    'test_login')
        #self.assertTrue(self.client.login(username='test_login',
        #    password='test_login'))
        #response = self.client.post(URL)
        #self.failUnlessEqual(response.status_code, 403)
        #self.client.logout()
        #
        ## Maintainer should have permission to submit files
        ## (Owner should have been put to maintainers!)
        #self.assertTrue(self.client.login(username='priv_owner',
        #    password='priv_owner'))
        #response = self.client.post(URL, follow=True)
        #self.failUnlessEqual(response.status_code, 200)
        #self.client.logout()
        #
        ## Check that a submitter (writer) has access to submit file.
        #self.assertTrue(self.client.login(username='priv_submitter',
        #    password='priv_submitter'))
        #response = self.client.post(URL, follow=True)
        #self.failUnlessEqual(response.status_code, 200)
        #self.client.logout()
        #
        ##TODO: ONLY team members and coordinators of the specific team where
        ## the file belongs to must have access to it.
        #
        ## Check that a team coordinator (writer) has access to submit a file of his team
        #self.assertTrue(self.client.login(username='priv_coordinator',
        #    password='priv_coordinator'))
        #response = self.client.post(URL, follow=True)
        #self.failUnlessEqual(response.status_code, 200)
        #self.client.logout()
        #
        ## Check that a team member (writer) has access to submit a file of his team.
        #self.assertTrue(self.client.login(username='priv_member',
        #    password='priv_member'))
        #response = self.client.post(URL, follow=True)
        #self.failUnlessEqual(response.status_code, 200)
        #self.client.logout()


    def test_lock_unlock_file(self):
        """
        Check access to lock and unlock pofile in a component of a private project.
        """
        URL = reverse('resource_language_lock', kwargs={'project_slug':self.project_private.slug,
            'resource_slug': self.resource_private.slug,
            'language_code': self.language.code} )

        # POST Requests
        for user in ['anonymous']:
            # the redirect works for the login page but we get 200 status? how
            # come?? XXX! FIXME
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 200)

        for user in ['registered']:
            # Anonymous and registered user should not have access to lock the files!
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer', 'team_coordinator', 'team_member',
                'reviewer']: #'writer',
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 200)

        URL = reverse('resource_language_lock', kwargs={'project_slug':self.project_private.slug,
            'resource_slug': self.resource_private.slug,
            'language_code': self.language_ar.code})

        for user in ['anonymous']: #, 'writer'
            # the redirect works for the login page but we get 200 status? how
            # come?? XXX! FIXME
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 200)

        # Why do team_co && team_member return 200? XXX ! FIXME
        for user in ['registered']:# 'team_coordinator','team_member'
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer']: #, 'writer'
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 200)


    def test_watch_unwatch_file(self):
        """
        Check access to watch/unwatch file in a component of a private project.
        """
        from notification.models import NoticeType

        URL = reverse('resource_translation_toggle_watch',
            kwargs={ 'project_slug':self.project_private.slug,
                'resource_slug': self.resource_private.slug,
                'language_code': self.language.code })

        # POST Requests
        for user in ['anonymous']:
            response = self.client[user].post(URL)
            self.failUnlessEqual(response.status_code, 302)

        for user in ['registered']:
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer', 'team_coordinator', 'team_member',
                'reviewer']: #'writer',
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 200)

        URL = reverse('resource_language_lock', kwargs={'project_slug':self.project_private.slug,
            'resource_slug': self.resource_private.slug,
            'language_code': self.language_ar.code})

        for user in ['anonymous']:
            response = self.client[user].post(URL)
            self.failUnlessEqual(response.status_code, 302)

        # Why do team_co && team_member return 200? XXX ! FIXME
        for user in ['registered']: # , 'team_coordinator', 'team_member'
            # Anonymous and registered user should not have access to lock the files!
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer']: # , 'writer'
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 200)


    def test_watch_unwatch_project(self):
        """
        Check access to watch/unwatch project in a component of a private project.
        """
        from notification.models import NoticeType

        URL = reverse('project_toggle_watch',
            kwargs={ 'project_slug':self.project_private.slug})

        # POST Requests
        for user in ['anonymous']:
            response = self.client[user].post(URL)
            self.failUnlessEqual(response.status_code, 302)

        for user in ['registered']:
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer', 'team_coordinator', 'team_member',
                'reviewer']: # 'writer',
            response = self.client[user].post(URL, follow=True)
            self.failUnlessEqual(response.status_code, 200)

    def test_charts(self):
        """
        Check access to component charts.
        """
        # images and charts urls
        URLs = [
            reverse('chart_resource_image', kwargs={'project_slug':self.project_private.slug,
                'resource_slug': self.resource_private.slug}),
            reverse('chart_resource_js', kwargs={'project_slug':self.project_private.slug,
                'resource_slug': self.resource_private.slug}),
            reverse('chart_resource_html', kwargs={'project_slug':self.project_private.slug,
                'resource_slug': self.resource_private.slug}),
            reverse('chart_resource_json', kwargs={'project_slug':self.project_private.slug,
                'resource_slug': self.resource_private.slug})
        ]

        for user in ['anonymous', 'registered']:
            for url in URLs:
                response = self.client[user].get(url)
                self.failUnlessEqual(response.status_code, 403)

        # For now charts are disabled for private projects
        for user in ['maintainer', 'writer', 'team_coordinator',
                'team_member', 'reviewer']:
            for url in URLs:
                response = self.client[user].get(url)
                self.failUnlessEqual(response.status_code, 403)

    def test_timeline(self):
        """
        Check access to component charts.
        """
        URL = reverse('project_timeline', kwargs={'project_slug':self.project_private.slug,})

        # Only maintainers have access to the project timeline ???

        for user in ['anonymous']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 302)

        for user in ['registered', 'writer']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 403)

        for user in ['maintainer', 'team_coordinator',
                'team_member', 'reviewer']:
            response = self.client[user].get(URL)
            self.failUnlessEqual(response.status_code, 200)

    def test_public_to_private(self):
        """
        Test the process of transforming a public project to private.
        """
        pass


    def test_private_to_public(self):
        """
        Test the process of transforming a public project to private.
        """
        pass


class ProjectLookupsTests(BaseTestCase):

    def test_private_projects_ajax_lookup(self):
        """Test that a private project isn't present in lookups.

        This AJAX lookup/dropdown is present in the Team Outsource form.
        """

        public_project = "Test Project"
        private_project = "Test Private Project"

        # Test that a private project is not visible to a random user
        self.assertTrue(self.user['registered'] not in self.project_private.maintainers.all())
        resp = self.client['registered'].get('/ajax/ajax_lookup/projects', {'q': 'p', 'limit': '150', })
        self.assertContains(resp, public_project, status_code=200)
        self.assertNotContains(resp, private_project, status_code=200)

        # Test that a private project is visible to its maintainer
        self.assertTrue(self.user['maintainer'] in self.project_private.maintainers.all())
        resp = self.client['maintainer'].get('/ajax/ajax_lookup/projects', {'q': 'p', 'limit': '150', })
        self.assertContains(resp, public_project, status_code=200)
        self.assertContains(resp, private_project, status_code=200)

        # Test that a private project is visible to a member of its teams
        self.assertTrue(self.user['team_member'] in self.team_private.members.all())
        self.assertFalse(self.user['team_member'] in self.project_private.maintainers.all())
        resp = self.client['team_member'].get('/ajax/ajax_lookup/projects', {'q': 'p', 'limit': '150', })
        self.assertContains(resp, public_project, status_code=200)
        self.assertContains(resp, private_project, status_code=200)

        # Test that a private project is visible to a reviewer of its teams
        self.assertTrue(self.user['reviewer'] in self.team_private.members.all())
        self.assertFalse(self.user['reviewer'] in self.project_private.maintainers.all())
        resp = self.client['reviewer'].get('/ajax/ajax_lookup/projects', {'q': 'p', 'limit': '150', })
        self.assertContains(resp, public_project, status_code=200)
        self.assertContains(resp, private_project, status_code=200)


########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.core.urlresolvers import reverse
from transifex.txcommon.tests import base, utils
from transifex.projects.models import Project

class ProjectViewsTests(base.BaseTestCase, base.NoticeTypes):

    # Note: The Project lookup field is tested elsewhere.
    def setUp(self, *args, **kwargs):
        super(ProjectViewsTests, self).setUp(*args, **kwargs)
        self.url_acc = reverse('project_access_control_edit', args=[self.project.slug])

    # Outsource tests
    def test_project_outsource_good(self):
        """Test that a private project is visible to its maintainer."""
        resp = self.client['maintainer'].get(self.url_acc, {})
        self.assertContains(resp, "Test Project", status_code=200)
        self.assertNotContains(resp, "Test Private Project", status_code=200)


    def test_project_outsource_bad(self):
        # Private project is not visible to another maintainer
        self.assertTrue(self.user['registered'] not in self.project_private.maintainers.all())
        self.project.maintainers.add(self.user['registered'])
        self.assertTrue(self.user['registered'] in self.project.maintainers.all())
        resp = self.client['registered'].get(self.url_acc, {})
        self.assertContains(resp, "Test Project", status_code=200)
        self.assertNotContains(resp, "Test Private Project", status_code=200)

        # Private project cannot be used by another maintainer to outsource
        resp = self.client['registered'].post(self.url_acc, {
            'outsource': self.project_private.id,
            'submit_access_control': 'Save Access Control Settings',
            'access_control': 'outsourced_access',
            'next': '/projects/p/desktop-effects/edit/access/', })
        self.assertFalse(self.project.outsource)
        self.assertTemplateUsed(resp, "projects/project_form_access_control.html")
        self.assertContains(resp, "Select a valid choice.")

    def test_trans_instructions(self):
        """Test the project.trans_instructions model field & templates."""
        self.project.trans_instructions = "http://help.transifex.net/"\
            "technical/contributing.html#updating-translation-files-po-files"
        self.project.save()
        resp = self.client['anonymous'].get(self.urls['project'])
        self.assertContains(resp, "contributing.html")
        self.assertContains(resp, "Translation help pages")

    def test_delete_project(self):
        url = reverse('project_delete', args=[self.project.slug])
        resp = self.client['maintainer'].get(url)
        self.assertContains(resp, "Delete project")
        user = self.user['maintainer']
        resp = self.client['maintainer'].post(url, {'password': base.PASSWORD}, follow=True)
        self.assertContains(resp, "was deleted.")
        self.assertTrue(Project.objects.filter(slug=self.project.slug).count() == 0)
        # Test messages:
        self.assertContains(resp, "message_success")

    def test_project_edit(self):
        resp = self.client['maintainer'].get(self.urls['project_edit'])
        self.assertContains(resp, "Edit the details of your project", status_code=200)
        self.assertContains(resp, self.project.maintainers.all()[0])
        self.assertNotContains(resp, "Owner")
        #save edited project
        DATA = {'project-bug_tracker':'',
                'project-description':'Test Project',
                'project-feed':'',
                'project-homepage':'',
                'project-long_description':'',
                'project-maintainers':'|%s|'%self.user['maintainer'].id,
                'project-maintainers_text':'',
                'project-name':'Test Project',
                'project-slug':'project1',
                'project-tags':'',
                'project-trans_instructions':''}
        resp = self.client['maintainer'].post(self.urls['project_edit'], DATA, follow=True)
        self.assertEqual(resp.status_code, 200)

########NEW FILE########
__FILENAME__ = view_permission_access
from django.utils.datastructures import SortedDict
from transifex.txcommon.tests.base import BaseTestCase
from transifex.txcommon.tests.utils import check_page_status

"""
The following variable stores the roles for testing URLs against the different
types of user access on the system.

See txcommon.tests.utils.check_page_status for more info.
"""

#Project URLs
URL_ROLES = SortedDict({
    'GET:/projects/add/':{
        'anonymous':(302,),
        'registered':(200,),
        'maintainer':(200,),
        'writer':(200,),
        'team_coordinator':(200,),
        'team_member':(200,),
        'reviewer':(200,),
        },
    'GET:/projects/feed/':{
        'anonymous':(200,),
        'registered':(200,),
        'maintainer':(200,),
        'writer':(200,),
        'team_coordinator':(200,),
        'team_member':(200,),
        'reviewer':(200,),
        },
    'GET:/projects/p/project1/':{
        'anonymous':(200,),
        'registered':(200,),
        'maintainer':(200,),
        'writer':(200,),
        'team_coordinator':(200,),
        'team_member':(200,),
        'reviewer':(200,),
        },
    'GET:/projects/p/project1/edit/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'GET:/projects/p/project1/edit/access/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'GET:/projects/p/project1/access/pm/add/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    #'POST:/projects/p/project1/access/pm/1/delete/':{
        #'anonymous':(302,),
        #'registered':(403,),
        #'maintainer':(302,),
        #'writer':(403,),
        #'team_coordinator':(403,),
        #'team_member':(403,),
        #},
    #'POST:/projects/p/project1/access/rq/1/delete/':{
        #'anonymous':(302,),
        #'registered':(403,),
        #'maintainer':(404,),
        #'writer':(403,),
        #'team_coordinator':(403,),
        #'team_member':(403,),
        #},
    #'POST:/projects/p/project1/access/rq/1/approve/':{
        #'anonymous':(302,),
        #'registered':(403,),
        #'maintainer':(302,),
        #'writer':(403,),
        #'team_coordinator':(403,),
        #'team_member':(403,),
        #},
    'GET:/projects/p/project1/delete/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
})

# Resource URLs
URL_ROLES.update({
    'GET:/projects/p/project1/resource/resource1/':{
        'anonymous':(200,),
        'registered':(200,),
        'maintainer':(200,),
        'writer':(200,),
        'team_coordinator':(200,),
        'team_member':(200,),
        'reviewer':(200,),
        },
    'GET:/projects/p/project1/resource/resource1/edit/':{
        'anonymous':(403,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'GET:/projects/p/project1/resource/resource1/delete/':{
        'anonymous':(403,),
        'registered':(403,),
        'maintainer':(302,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'POST:/projects/p/project1/resource/resource1/l/pt_BR/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(200,),
        'team_coordinator':(200,),
        'team_member':(200,),
        'reviewer':(200,),
        },
    'GET:/projects/p/project1/resource/resource1/l/pt_BR/view/':{
        'anonymous':(200,),
        'registered':(200, {}, "#stringset_table"),
        'maintainer':(200, {}, "#stringset_table"),
        'writer':(200, {}, "#stringset_table"),
        'team_coordinator':(200, {}, "#stringset_table"),
        'team_member':(200, {}, "#stringset_table"),
        'reviewer':(200, {}, "#stringset_table"),
        },
    'GET:/projects/p/project1/resource/resource1/l/pt_BR/download/for_use/':{
        'anonymous':(302,),
        'registered':(302,),
        'maintainer':(302,),
        'writer':(302,),
        'team_coordinator':(302,),
        'team_member':(302,),
        'reviewer':(302,),
        },
    'GET:/projects/p/project1/resource/resource1/l/pt_BR/download/for_translation/':{
        'anonymous':(302,),
        'registered':(302,),
        'maintainer':(302,),
        'writer':(302,),
        'team_coordinator':(302,),
        'team_member':(302,),
        'reviewer':(302,),
        },
    'GET:/projects/p/project1/resource/resource1/l/pt_BR/download/reviewed/':{
        'anonymous':(302,),
        'registered':(302,),
        'maintainer':(302,),
        'writer':(302,),
        'team_coordinator':(302,),
        'team_member':(302,),
        'reviewer':(302,),
        },
})

# Release URLs
URL_ROLES.update({
    'GET:/projects/p/project1/add-release/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'GET:/projects/p/project1/r/releaseslug1/':{
        'anonymous':(200,),
        'registered':(200,),
        'maintainer':(200,),
        'writer':(200,),
        'team_coordinator':(200,),
        'team_member':(200,),
        'reviewer':(200,),
        },
    'GET:/projects/p/project1/r/releaseslug1/edit/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'GET:/projects/p/project1/r/releaseslug1/delete/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(302,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'GET:/projects/p/project1/r/releaseslug1/l/pt_BR/':{
        'anonymous':(200,),
        'registered':(200,),
        'maintainer':(200,),
        'writer':(200,),
        'team_coordinator':(200,),
        'team_member':(200,),
        'reviewer':(200,),
        },
})

# Team URLs
URL_ROLES.update({
    'GET:/projects/p/project1/languages/add/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'GET:/projects/p/project1/language/pt_BR/':{
        'anonymous':(200,),
        'registered':(200,),
        'maintainer':(200,),
        'writer':(200,),
        'team_coordinator':(200,),
        'team_member':(200,),
        'reviewer':(200,),
        },
    'GET:/projects/p/project1/language/pt_BR/members/':{
        'anonymous':(200,),
        'registered':(200,),
        'maintainer':(200,),
        'writer':(200,),
        'team_coordinator':(200,),
        'team_member':(200,),
        'reviewer':(200,),
        },
    'GET:/projects/p/project1/language/pt_BR/edit/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(403,),
        'team_coordinator':(200,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'GET:/projects/p/project1/language/pt_BR/delete/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(200,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'POST:/projects/p/project1/language/pt_BR/request/':{
        'anonymous':(302,),
        'registered':(302,),
        'maintainer':(302,),
        'writer':(302,),
        'team_coordinator':(302,),
        'team_member':(302,),
        'reviewer':(302,),
        },
    'POST:/projects/p/project1/language/pt_BR/approve/diegobz/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(404,),
        'writer':(403,),
        'team_coordinator':(404,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'POST:/projects/p/project1/language/pt_BR/deny/diegobz/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(404,),
        'writer':(403,),
        'team_coordinator':(404,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'POST:/projects/p/project1/language/pt_BR/withdraw/':{
        'anonymous':(302,),
        'registered':(404,),
        'maintainer':(404,),
        'writer':(404,),
        'team_coordinator':(404,),
        'team_member':(404,),
        'reviewer':(404,),
        },
    'POST:/projects/p/project1/language/pt_BR/leave/':{
        'anonymous':(302,),
        'registered':(302,),
        'maintainer':(302,),
        'writer':(302,),
        'team_coordinator':(302,),
        'team_member':(302,),
        'reviewer':(302,),
        },
    'POST:/projects/p/project1/languages/request/':{
        'anonymous':(302,),
        'registered':(302,),
        'maintainer':(302,),
        'writer':(302,),
        'team_coordinator':(302,),
        'team_member':(302,),
        'reviewer':(302,),
        },
    'POST:/projects/p/project1/language/el/approve/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(404,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
    'POST:/projects/p/project1/language/el/deny/':{
        'anonymous':(302,),
        'registered':(403,),
        'maintainer':(404,),
        'writer':(403,),
        'team_coordinator':(403,),
        'team_member':(403,),
        'reviewer':(403,),
        },
})



class ViewPermissionAccessTestCase(BaseTestCase):
    """
    Test if all project URLs return correct status code depending on each
    user role.
    """
    def testAnonymousUser(self):
        """Check URL access for anonymous user."""
        check_page_status(self, 'anonymous', URL_ROLES)

    def testRegisteredUser(self):
        """Check URL access for authenticated (guest) user."""
        check_page_status(self, 'registered', URL_ROLES)

    def testMaintainerUser(self):
        """Check URL access for authenticated project maintainer."""
        check_page_status(self, 'maintainer', URL_ROLES)

    def testWriterUser(self):
        """Check URL access for authenticated project writer."""
        check_page_status(self, 'writer', URL_ROLES)

    def testTeamCoordinatorUser(self):
        """Check URL access for authenticated team coordinator."""
        check_page_status(self, 'team_coordinator', URL_ROLES)

    def testTeamMemberUser(self):
        """Check URL access for authenticated team member."""
        check_page_status(self, 'team_member', URL_ROLES)

    def testReviewerUser(self):
        """Check URL access for authenticated reviewer."""
        check_page_status(self, 'reviewer', URL_ROLES)

########NEW FILE########
__FILENAME__ = ajax
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *

from transifex.projects.views.hub import (project_hub_projects,
    project_hub_projects_toggler)
from transifex.projects.urls import PROJECT_URL_PARTIAL

# Project
urlpatterns = patterns('',
    url(
        regex = PROJECT_URL_PARTIAL+r'access/outsource/projects/association/$',
        view = project_hub_projects_toggler,
        name = 'project_hub_projects_toggler'),
)




########NEW FILE########
__FILENAME__ = extra
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *

from transifex.projects.models import Project
from transifex.projects.views.project import myprojects
from transifex.projects.urls import PROJECT_URL_PARTIAL, public_project_list

# Project
urlpatterns = patterns('',
    url(
        regex = '^myprojects/$',
        view = myprojects,
        name = 'myprojects'),
)

urlpatterns += patterns('django.views.generic',
    url(
        regex = '^$',
        view = 'list_detail.object_list',
        kwargs = public_project_list,
        name = 'project_list'),
    url(
        '^recent/$', 'list_detail.object_list',
        kwargs = {
            'queryset': Project.public.recent(),
            'template_object_name': 'project',
            'extra_context' : {'type_of_qset' : 'projects.recent',},
        },
        name = 'project_list_recent'),
    url (
        regex = '^open_translations/$',
        view = 'list_detail.object_list',
        kwargs = {
            'queryset': Project.public.open_translations(),
            'template_object_name': 'project',
            'extra_context' : {'type_of_qset' : 'projects.open_translations',},
        },
        name = 'project_list_open_translations'),
)
########NEW FILE########
__FILENAME__ = hub
# -*- coding: utf-8 -*-
import copy
from django.conf import settings
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.urlresolvers import reverse
from django.db import IntegrityError
from django.db import transaction
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils.translation import ugettext as _

from actionlog.models import action_logging
from notification import models as notification
from transifex.projects.models import Project, HubRequest
from transifex.projects.permissions import *
from transifex.projects.signals import project_outsourced_changed

# Temporary
from transifex.txcommon import notifications as txnotification

from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.log import logger
from transifex.txcommon.views import json_result, json_error


@one_perm_required_or_403(pr_project_add_change,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=False)
def project_hub_projects(request, project_slug):
    project = get_object_or_404(
        Project.objects.select_related(), slug=project_slug
    )

    return render_to_response('projects/project_hub_projects.html', {
        'project': project,
        'hub_projects_page': True,
    }, context_instance=RequestContext(request))


@login_required
@one_perm_required_or_403(pr_project_add_change,
    (Project, "slug__exact", "project_slug"))
@transaction.commit_on_success
def project_hub_join_approve(request, project_slug, outsourced_project_slug):

    hub_request = get_object_or_404(HubRequest,
        project__slug=outsourced_project_slug,
        project_hub__slug=project_slug)

    outsourced_project = hub_request.project

    if request.POST:
        try:
            outsourced_project.outsource = hub_request.project_hub
            outsourced_project.anyone_submit = False
            outsourced_project.save()

            _hub_request = copy.copy(hub_request)
            hub_request.delete()

            messages.success(request, _("You added '%(project)s' to the "
                "'%(project_hub)s' project hub")% {
                    'project':outsourced_project,
                    'project_hub':hub_request.project_hub})

            # ActionLog & Notification
            nt = 'project_hub_join_approved'
            context = {'hub_request': hub_request,
                       'sender': request.user}

            # Logging action
            action_logging(request.user, [outsourced_project,
                hub_request.project_hub], nt, context=context)

            if settings.ENABLE_NOTICES:
                # Send notification for maintainers, coordinators and the user
                notification.send(outsourced_project.maintainers.all(), nt, context)

        except IntegrityError, e:
            transaction.rollback()
            logger.error("Something weird happened: %s" % str(e))

        project_outsourced_changed.send(sender=hub_request.project_hub)
    return HttpResponseRedirect(reverse("project_detail", args=(project_slug,)))


@login_required
@one_perm_required_or_403(pr_project_add_change,
    (Project, "slug__exact", "project_slug"))
@transaction.commit_on_success
def project_hub_join_deny(request, project_slug, outsourced_project_slug):

    hub_request = get_object_or_404(HubRequest,
        project__slug=outsourced_project_slug,
        project_hub__slug=project_slug)

    outsourced_project = hub_request.project

    if request.POST:
        try:
            _hub_request = copy.copy(hub_request)
            hub_request.delete()

            messages.info(request, _("You rejected the request of "
                "'%(project)s' to join the '%(project_hub)s' project hub")% {
                    'project': outsourced_project,
                    'project_hub':_hub_request.project_hub})

            # ActionLog & Notification
            # TODO: Use signals
            nt = 'project_hub_join_denied'
            context = {'hub_request': hub_request,
                       'sender': request.user}

            # Logging action
            action_logging(request.user, [outsourced_project,
                _hub_request.project_hub], nt, context=context)

            if settings.ENABLE_NOTICES:
                # Send notification for maintainers, coordinators and the user
                notification.send(outsourced_project.maintainers.all(), nt, context)

        except IntegrityError, e:
            transaction.rollback()
            logger.error("Something weird happened: %s" % e.message)

        project_outsourced_changed.send(sender=hub_request.project_hub)
    return HttpResponseRedirect(reverse("project_detail", args=(project_slug,)))


@login_required
@one_perm_required_or_403(pr_project_add_change,
    (Project, 'slug__exact', 'project_slug'))
@transaction.commit_on_success
def project_hub_join_withdraw(request, project_slug):

    # project_slug here refers to outsourced_project_slug. It was kept like
    # it to keep consistency across url regexes.
    hub_request = get_object_or_404(HubRequest, project__slug=project_slug)

    if request.POST:
        try:
            _hub_request = copy.copy(hub_request)
            hub_request.delete()
            messages.success(request, _("Request to join '%s' project hub "
                "was withdrawn") % _hub_request.project_hub)

            # ActionLog & Notification
            # TODO: Use signals
            nt = 'project_hub_join_withdrawn'
            context = {'hub_request': _hub_request,
                       'performer': request.user,
                       'sender': request.user}

            # Logging action
            action_logging(request.user, [_hub_request.project,
                hub_request.project_hub], nt, context=context)

            if settings.ENABLE_NOTICES:
                # Send notification for maintainers, coordinators and the user
                notification.send(_hub_request.project_hub.maintainers.all(),
                    nt, context)
        except IntegrityError, e:
            transaction.rollback()
            logger.error("Something weird happened: %s" % e.message)

    return HttpResponseRedirect(reverse("project_access_control_edit",
        args=(project_slug,)))


@login_required
@one_perm_required_or_403(pr_project_add_change,
    (Project, "slug__exact", "project_slug"),)
def project_hub_projects_toggler(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    url = reverse('project_hub_projects_toggler', args=(project_slug,))

    if request.method != 'POST':
        return json_error(_('Must use POST to activate'))

    # POST request must have a 'outsourced_project_slug' parameter
    outsourced_project_slug = request.POST.get('outsourced_project_slug', None)
    if not outsourced_project_slug:
        return json_error(_('Bad request.'))

    try:
        outsourced_project = project.outsourcing.get(slug=outsourced_project_slug)
        outsourced_project.outsource = None
        outsourced_project.save()

        ## ActionLog & Notification
        #nt = 'project_hub_added'
        #context = {'team': team,
                   #'sender': request.user}

        ## Logging action
        #action_logging(request.user, [project, team], nt, context=context)

        #if settings.ENABLE_NOTICES:
            ## Send notification for those that are observing this project
            #txnotification.send_observation_notices_for(project,
                    #signal=nt, extra_context=context)
            ## Send notification for maintainers and coordinators
            #notification.send(set(itertools.chain(project.maintainers.all(),
                #team.coordinators.all())), nt, context)

        result = {
            'style': 'undo',
            'title': _('Undo'),
            'outsourced_project_slug': outsourced_project_slug,
            'url': url,
            'error': None,
            }

    except Project.DoesNotExist:

        outsourced_project = get_object_or_404(Project,
            slug=outsourced_project_slug)
        outsourced_project.outsource = project
        outsourced_project.save()

        result = {
            'style': 'connect',
            'title': _('Disassociate'),
            'outsourced_project_slug': outsourced_project_slug,
            'url': url,
            'error': None,
            }

    except Exception, e:
        return json_error(e.message, result)

    project_outsourced_changed.send(sender=project)
    return json_result(result)

########NEW FILE########
__FILENAME__ = permission
# -*- coding: utf-8 -*-
from django.conf import settings
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib.contenttypes.models import ContentType
from django.shortcuts import get_object_or_404
from django.utils.translation import ugettext as _
from django.utils.datastructures import MultiValueDictKeyError

from authority.models import Permission
from authority.views import permission_denied
from transifex.projects.forms import ProjectAccessControlForm
from transifex.projects.models import Project
from transifex.projects.permissions import *
from transifex.projects.permissions.project import ProjectPermission

# Temporary
from transifex.txcommon import notifications as txnotification

from transifex.txcommon.decorators import one_perm_required_or_403, access_off
from transifex.txcommon.log import logger
from transifex.txcommon.views import permission_denied
from transifex.txpermissions.views import (add_permission_or_request,
                                 approve_permission_request,
                                 delete_permission_or_request)

def _get_project_and_permission(project_slug, permission_pk):
    """
    Handler to return a project and a permission instance or a 404 error, based
    on the slugs passed by parameter.
    """
    project = get_object_or_404(Project, slug=project_slug)
    ctype = ContentType.objects.get_for_model(Project)
    permission = get_object_or_404(Permission, object_id=project.pk,
                                   content_type=ctype, id=permission_pk)
    return project, permission

@access_off(permission_denied)
@login_required
@one_perm_required_or_403(pr_project_add_perm,
    (Project, 'slug__exact', 'project_slug'))
def project_add_permission(request, project_slug):
    """
    Return a view with a form for adding a permission for a user.

    This view is an abstraction of a txpermissions.views method to be able to
    apply granular permission on it using a decorator.
    """
    project = get_object_or_404(Project, slug=project_slug)

    # When adding a permission it's necessary to query the user object in
    # order to be able to pass the extra_context for the notification/actionlog
    try:
        username = request.POST['user']
        sendto = User.objects.get(username=username)
    except (MultiValueDictKeyError, User.DoesNotExist):
        sendto=None

    notice = {
            'type': 'project_submit_access_granted',
            'object': project,
            'sendto': [sendto],
            'extra_context': {'project': project,
                              'user_request': sendto,
                              'user_action': request.user,
            },
        }
    return add_permission_or_request(request, project,
        view_name='project_add_permission',
        approved=True,
        extra_context={
            'project_permission': True,
            'project': project,
            'project_access_control_form': ProjectAccessControlForm(instance=project),
            'notice': notice,
        },
        template_name='projects/project_form_permissions.html')


#@login_required
#def project_add_permission_request(request, project_slug):
    #"""
    #Return a view with a form for adding a request of permission for a user.

    #This view is an abstraction of a txpermissions.views method.
    #"""
    #project = get_object_or_404(Project, slug=project_slug)
    #notice = {
            #'type': 'project_submit_access_requested',
            #'object': project,
            #'sendto': project.maintainers.all(),
            #'extra_context': {'project': project,
                              #'user_request': request.user
            #},
        #}
    #return add_permission_or_request(request, project,
        #view_name='project_add_permission_request',
        #approved=False,
        #extra_context={
            #'project_permission': True,
            #'project': project,
            #'project_permission_form': ProjectAccessControlForm(instance=project),
            #'notice': notice
        #},
        #template_name='projects/project_form_permissions.html')


@access_off(permission_denied)
@login_required
@one_perm_required_or_403(pr_project_approve_perm,
    (Project, 'slug__exact', 'project_slug'))
def project_approve_permission_request(request, project_slug, permission_pk):
    project, permission=_get_project_and_permission(project_slug, permission_pk)
    notice = {
            'type': 'project_submit_access_granted',
            'object': project,
            'sendto': [permission.user],
            'extra_context': {'project': project,
                              'user_request': permission.user,
                              'user_action': request.user,
            },
        }
    return approve_permission_request(request, permission,
                                      extra_context={ 'notice': notice })


@access_off(permission_denied)
@login_required
@one_perm_required_or_403(pr_project_delete_perm,
    (Project, 'slug__exact', 'project_slug'))
def project_delete_permission(request, project_slug, permission_pk):
    """
    View for deleting a permission of a user.

    This view is an abstraction of a txpermissions.views method to be able to
    apply granular permission on it using a decorator.
    """
    project, permission=_get_project_and_permission(project_slug, permission_pk)
    notice = {
            'type': 'project_submit_access_revoked',
            'object': project,
            'sendto': [permission.user],
            'extra_context': {'project': project,
                              'user_request': permission.user,
                              'user_action': request.user,
            },
        }
    return delete_permission_or_request(request, permission, True,
                                        extra_context={ 'notice': notice })


@access_off(permission_denied)
@login_required
def project_delete_permission_request(request, project_slug, permission_pk):
    """
    View for deleting a request of permission of a user.

    This view is an abstraction of a txpermissions.views method.
    """
    project, permission=_get_project_and_permission(project_slug, permission_pk)

    # It's necessary to distinguish between maintainer and normal users that
    # did the request
    if request.user.id==permission.user.id:
        notice_type = 'project_submit_access_request_withdrawn'
        sendto = project.maintainers.all()
    else:
        notice_type = 'project_submit_access_request_denied'
        sendto = [permission.user]

    notice = {
            'type': notice_type,
            'object': project,
            'sendto': sendto,
            'extra_context': {'project': project,
                              'user_request': permission.user,
                              'user_action': request.user,
            },
        }

    check = ProjectPermission(request.user)
    if check.maintain(project) or \
        request.user.has_perm('authority.delete_permission') or \
        request.user.pk == permission.creator.pk:
        return delete_permission_or_request(request, permission, False,
                                            extra_context={ 'notice': notice },)


    check = ProjectPermission(request.user)
    if check.maintain(project) or \
            request.user.has_perm('authority.delete_permission') or \
            request.user.pk == permission.creator.pk:
        return delete_permission_or_request(request, permission, False)

    return permission_denied(request)


########NEW FILE########
__FILENAME__ = project
# -*- coding: utf-8 -*-
import copy
from django.contrib import messages
from django.core.exceptions import ObjectDoesNotExist
from django.core.urlresolvers import reverse
from django.db.models import Q, get_model, Sum, Max, Count
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.dispatch import Signal
from django.utils.translation import ugettext as _
from django.conf import settings
from django.views.generic import list_detail
from django.contrib import messages
from django.contrib.auth.decorators import login_required

from actionlog.models import action_logging, LogEntry
from actionlog.filters import LogEntryFilter
from notification import models as notification
from transifex.projects.models import Project, HubRequest
from transifex.projects.forms import ProjectAccessControlForm, \
    ProjectForm, ProjectDeleteForm
from transifex.projects.permissions import *
from transifex.projects import signals

from transifex.languages.models import Language
from transifex.projects.permissions.project import ProjectPermission
from transifex.projects.signals import project_outsourced_changed
from transifex.releases.handlers import update_all_release
from transifex.resources.models import Resource, RLStats
from transifex.resources.utils import invalidate_template_cache
from transifex.teams.forms import TeamRequestSimpleForm
from transifex.projects.models import Permission

# Temporary
from transifex.txcommon import notifications as txnotification

from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.log import logger
from transifex.txcommon.views import json_result, json_error
# To calculate user_teams
from transifex.teams.models import Team

from priorities.models import level_display

Lock = get_model('locks', 'Lock')
TranslationWatch = get_model('watches', 'TranslationWatch')


def _project_create_update(request, project_slug=None,
    template_name='projects/project_form.html'):
    """
    Handler for creating and updating a project.

    This function helps to eliminate duplication of code between those two
    actions, and also allows to apply different permission checks in the
    respective views.
    """

    if project_slug:
        project = get_object_or_404(Project, slug=project_slug)
    else:
        project = None

    if request.method == 'POST':
        owner = project and project.owner or request.user
        project_form = ProjectForm(
            request.POST, request.FILES, instance=project, prefix='project',
            owner=owner
        )
        if project_form.is_valid():
            project = project_form.save(commit=False)
            project_id = project.id
            # Only here the owner is written to the project model
            if not project_id:
                project.owner = request.user

            # provide the form data to any signal handlers before project_save
            Signal.send(signals.pre_proj_save, sender=Project, instance=project,
                        form=project_form)
            project.save()
            project_form.save_m2m()

            # TODO: Not sure if here is the best place to put it
            Signal.send(signals.post_proj_save_m2m, sender=Project,
                        instance=project, form=project_form)

            # ActionLog & Notification
            context = {'project': project,
                       'sender': request.user}
            if not project_id:
                nt = 'project_added'
                action_logging(request.user, [project], nt, context=context)
            else:
                nt = 'project_changed'
                action_logging(request.user, [project], nt, context=context)
                if settings.ENABLE_NOTICES:
                    txnotification.send_observation_notices_for(project,
                                        signal=nt, extra_context=context)

            return HttpResponseRedirect(reverse('project_detail',
                                        args=[project.slug]),)
    else:
        # Make the current user the maintainer when adding a project
        if project:
            initial_data = {}
        else:
            initial_data = {"maintainers": [request.user.pk]}

        project_form = ProjectForm(instance=project, prefix='project',
                                   initial=initial_data)

    return render_to_response(template_name, {
        'project_form': project_form,
        'project': project,
    }, context_instance=RequestContext(request))


# Projects
@login_required
@one_perm_required_or_403(pr_project_add)
def project_create(request):
    return _project_create_update(request)

@login_required
@one_perm_required_or_403(pr_project_add_change,
    (Project, 'slug__exact', 'project_slug'))
def project_update(request, project_slug):
        return _project_create_update(request, project_slug)


@login_required
@one_perm_required_or_403(pr_project_add_change,
    (Project, 'slug__exact', 'project_slug'))
def project_access_control_edit(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    outsourced = project.outsource
    if request.method == 'POST':
        form = ProjectAccessControlForm(request.POST, instance=project,
            user=request.user)
        if form.is_valid():
            access_control = form.cleaned_data['access_control']
            project_type = form.cleaned_data['project_type']
            project = form.save(commit=False)
            project_hub = project.outsource
            hub_request = None

            # TODO call signal project_outsourced_changed
            if 'outsourced' != project_type:
                project.outsource = None
            else:
                check = ProjectPermission(request.user)
                if not (check.maintain(project) and check.maintain(project_hub)):
                    # If the user is not maintainer of both projects it does
                    # not associate the outsource project directly.
                    # It does a request instead.
                    try:
                        hub_request = HubRequest.objects.get(project=project)
                    except ObjectDoesNotExist:
                        hub_request = HubRequest(project=project)
                    hub_request.project_hub = project_hub
                    hub_request.user = request.user
                    hub_request.save()

                    messages.success(request,
                        _("Requested to join the '%s' project hub.") % project_hub)
                    # ActionLog & Notification
                    # TODO: Use signals
                    nt = 'project_hub_join_requested'
                    context = {'hub_request': hub_request,
                               'sender': request.user}

                    # Logging action
                    action_logging(request.user, [project, project_hub], nt, context=context)

                    if settings.ENABLE_NOTICES:
                        # Send notification for project hub maintainers
                        notification.send(project_hub.maintainers.all(), nt, context)

                    return HttpResponseRedirect(reverse('project_detail',args=[project.slug]),)


            if 'hub' == project_type:
                project.is_hub = True
            else:
                project.is_hub = False

            if ('free_for_all' == access_control and
                project_type != "outsourced"):
                project.anyone_submit = True
            else:
                project.anyone_submit = False

            # Check if cla form exists before sending the signal
            if 'limited_access' == access_control and \
            form.cleaned_data.has_key('cla_license_text'):
                # send signal to save CLA
                signals.cla_create.send(
                    sender='project_access_control_edit_view',
                    project=project,
                    license_text=form.cleaned_data['cla_license_text'],
                    request=request
                )

            project.save()
            form.save_m2m()
            handle_stats_on_access_control_edit(project)
            project_outsourced_changed.send(sender=project_hub)

            if outsourced and not project.outsource:
                # Drop resources from all-resources release of the hub project
                update_all_release(outsourced)

                # Logging action
                nt = 'project_hub_left'
                context = {'project': project, 'project_hub': outsourced,
                           'sender': request.user}
                action_logging(request.user, [project, outsourced], nt, context=context)

            return HttpResponseRedirect(reverse('project_detail',args=[project.slug]),)

    else:
        form = ProjectAccessControlForm(instance=project, user=request.user)

    return render_to_response('projects/project_form_access_control.html', {
        'project_permission': True,
        'project': project,
        'form': form,
    }, context_instance=RequestContext(request))


def handle_stats_on_access_control_edit(project):
    """
    This function is called in the access_control_edit of a project and deals
    with add/remove of RLStats for existing teams based on whether the project
    is outsourced or not.
    """
    if project.outsource:
        # The project got outsourced. Create RLStats for all teams of the
        # master project
        teams = project.outsource.team_set.all()
        for resource in project.resources.all():
            new_stats = teams.exclude(language__in=RLStats.objects.filter(resource=resource).values(
                'language'))
            for stat in new_stats:
                RLStats.objects.get_or_create(resource=resource,
                    language=stat.language)
            invalidate_template_cache("project_resource_details",
                project.slug, resource.slug)
            invalidate_template_cache("resource_details",
                project.slug, resource.slug)
    else:
        teams = project.team_set.all()
        for resource in project.resources.all():
            old_stats = RLStats.objects.filter(Q(resource=resource) &
                Q(translated=0) & ~Q(language__in=teams.values('language')))
            for stat in old_stats:
                stat.delete()
            invalidate_template_cache("project_resource_details",
                project.slug, resource.slug)
            invalidate_template_cache("resource_details",
                project.slug, resource.slug)


def _delete_project(request, project):
    project_ = copy.copy(project)
    project.delete()
    Permission.objects.filter(content_type__model="project",object_id=project_.id).delete()

    messages.success(request, _("The project '%s' was deleted." % project.name))

    # ActionLog & Notification
    nt = 'project_deleted'
    context = {'project': project_,
               'sender': request.user}
    action_logging(request.user, [project_], nt, context=context)
    if settings.ENABLE_NOTICES:
        txnotification.send_observation_notices_for(project_,
            signal=nt, extra_context=context)


@login_required
@one_perm_required_or_403(pr_project_delete,
    (Project, 'slug__exact', 'project_slug'))
def project_delete(request, project_slug):
    project = get_object_or_404(Project, slug=project_slug)
    if request.method == 'POST':
        delete_form = ProjectDeleteForm(data=request.POST, request=request)
        if delete_form.is_valid():
            _delete_project(request, project)
            return HttpResponseRedirect(reverse(getattr(settings,
                    "REDIRECT_AFTER_PROJECT_DELETE", "project_list")))
        else:
            return render_to_response('projects/project_delete.html', {
                'project': project,
                'delete_form': delete_form,
            }, context_instance=RequestContext(request))
    else:
        delete_form = ProjectDeleteForm(request=request)
        return render_to_response('projects/project_delete.html', {
            'project': project,
            'delete_form': delete_form,
        }, context_instance=RequestContext(request))


@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def project_detail(request, project_slug):
    project = get_object_or_404(Project.objects.select_related(), slug=project_slug)
    team_request_form = TeamRequestSimpleForm(project)

    source_language_codes = Language.objects.filter(
        Q(id=project.source_language.id) |
        Q(id__in=project.outsourcing.all().values('source_language').distinct())
    ).distinct().values_list('code', flat=True)

    language_stats = RLStats.objects.for_user(request.user
        ).by_project_language_aggregated(project)

    teams = project.available_teams.values('id').annotate(
        request_count=Count('join_requests', distinct=True),
        member_count=Count('members', distinct=True),
        reviewer_count=Count('reviewers', distinct=True),
        coordinator_count=Count('coordinators', distinct=True)
    ).values(
        'language__code', 'request_count', 'member_count',
        'reviewer_count', 'coordinator_count'
    )

    available_teams_codes = project.available_teams.values_list('language__code',
        flat=True)

    team_requests = project.teamrequest_set.select_related('language',
        'project', 'user').all().order_by('language__name')

    team_dict = {}
    for t in teams:
        lang_code = t['language__code']
        request_count = t['request_count']
        total_members = t['member_count'] + t['coordinator_count'] + t['reviewer_count']
        team_dict[lang_code] = (request_count, total_members)

    return render_to_response('projects/project_detail.html', {
        'project_overview': True,
        'project': project,
        'teams': team_dict,
        'languages': Language.objects.all(),
        'language_stats': language_stats,
        'source_language_codes': source_language_codes,
        'team_request_form': team_request_form,
        'available_teams_codes': available_teams_codes,
        'team_requests': team_requests,
        'maintainers': project.maintainers.select_related('profile').all()[:6],
        'releases': project.releases.select_related('project').all(),
    }, context_instance=RequestContext(request))


@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def project_resources(request, project_slug):
    project = get_object_or_404(Project.objects.select_related(), slug=project_slug)

    statslist = Resource.objects.filter(
        project=project
    ).values(
        'slug', 'name', 'category', 'priority__level',
        'total_entities', 'wordcount'
    ).annotate(
        last_update=Max('rlstats__last_update')
    )
    for stat in statslist:
        stat['priority__display'] = level_display(stat['priority__level'])

    return render_to_response('projects/project_resources.html', {
        'project_resources': True,
        'project': project,
        'statslist': statslist,
    }, context_instance=RequestContext(request))


@login_required
def myprojects(request):
    user = request.user

    maintain = Project.objects.maintained_by(user)
    submit_projects = Project.objects.translated_by(user)
    watched_projects = Project.get_watched(user)
    watched_resource_translations = TranslationWatch.get_watched(user)
    locks = Lock.objects.valid().filter(owner=user)

    context_var = {
        'maintain_projects': maintain,
        'submit_project_permissions': submit_projects,
        'watched_projects': watched_projects,
        'watched_resource_translations': watched_resource_translations,
        'locks': locks,
        'coordinator_teams': user.team_coordinators.all(),
        'member_teams': user.team_members.all(),
    }

    return render_to_response("projects/project_myprojects.html",
            context_var,
            context_instance = RequestContext(request))




########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from transifex.releases.models import Release

class ReleaseAdmin(admin.ModelAdmin):
    search_fields = ['name', 'description', 'project__name', 'resources__name']
    list_display = ['name', 'description', 'project']

admin.site.register(Release, ReleaseAdmin)

########NEW FILE########
__FILENAME__ = api
# -*- coding: utf-8 -*-
from piston.handler import BaseHandler, AnonymousBaseHandler
from piston.utils import rc, throttle
from transifex.releases.models import Release
from transifex.api.utils import BAD_REQUEST


class ReleaseHandler(BaseHandler):
    """
    Release Handler for CRUD operations.
    """

    allowed_methods = ('GET',)
    model = Release
    fields = ('slug', 'name', 'release_date', ('resources', ('slug', 'name', ('project', ('slug', )))))
    exclude = ()

    def read(self, request, project_slug, release_slug=None, api_version=1):
        """
        Get details of a release.
        """
        try:
            return Release.objects.get(
                slug=release_slug, project__slug=project_slug
            )
        except Release.DoesNotExist:
            return BAD_REQUEST(
                "Release %s.%s does not exist." % (project_slug, release_slug)
            )

########NEW FILE########
__FILENAME__ = feeds
from django.core.exceptions import ObjectDoesNotExist
from django.conf import settings
from django.contrib.syndication.feeds import Feed, FeedDoesNotExist
from django.contrib.sites.models import Site
from django.shortcuts import get_object_or_404
from django.utils.translation import ugettext_lazy as _

from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.resources.models import RLStats
from transifex.releases.models import Release

current_site = Site.objects.get_current()

class ReleaseFeed(Feed):
    """
    A feed for all the languages for this release.
    """

    def get_object(self, bits):
        if len(bits) != 2:
            raise ObjectDoesNotExist
        project_slug, release_slug = bits
        self.project = get_object_or_404(Project,
                                         slug__exact=project_slug)
        self.release = get_object_or_404(Release, slug__exact=release_slug,
                                         project__id=self.project.pk)
        return self.release

    def title(self, obj):
        return _("%(site_name)s: %(project)s :: %(release)s release") % {
            'site_name': current_site.name,
            'project': self.project.name,
            'release': obj.name,}

    def description(self, obj):
        return _("Translation statistics for all languages against "
                 "%s release.") % obj.name

    def link(self, obj):
        if not obj:
            raise FeedDoesNotExist
        return obj.get_absolute_url()

    def items(self, obj):
        return RLStats.objects.by_release_aggregated(self.release)

    def item_link(self, obj):
        return self.release.get_absolute_url()


class ReleaseLanguageFeed(Feed):
    """
    A feed for all the languages for this release.
    """

    def get_object(self, bits):
        if len(bits) != 3:
            raise ObjectDoesNotExist
        project_slug, release_slug, language_code = bits
        self.project = get_object_or_404(Project, slug__exact=project_slug)
        self.release = get_object_or_404(Release, slug__exact=release_slug,
                                         project__id=self.project.pk)
        self.language = get_object_or_404(Language, code__exact=language_code)

        return self.release

    def title(self, obj):
        return _("%(site_name)s: %(project)s :: %(release)s release :: %(lang)s") % {
            'site_name': current_site.name,
            'project': self.project.name,
            'release': obj.name,
            'lang': self.language.name,}

    def description(self, obj):
        return _("Translation statistics for %(lang)s language against "
                 "%(release)s release.") % {'lang': self.language.name,
                                            'release': obj.name}

    def link(self, obj):
        if not obj:
            raise FeedDoesNotExist
        return obj.get_absolute_url()

    def items(self, obj):
        return RLStats.objects.by_release_and_language(self.release,
            self.language)

    def item_link(self, obj):
        return obj.resource.get_absolute_url()

########NEW FILE########
__FILENAME__ = forms
from django import forms
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.core.exceptions import ValidationError
from ajax_select.fields import AutoCompleteSelectMultipleField
from transifex.resources.models import Resource
from transifex.releases.models import Release
from transifex.releases import RELEASE_ALL_DATA, RESERVED_RELEASE_SLUGS

class ReleaseForm(forms.ModelForm):

    resources = AutoCompleteSelectMultipleField('resources', required=True,
        help_text=_('Search for a resource'))

    # FIXME: Weird, the following message should be displayed by default, but
    # it was necessary to make it explicit here be able to display the correct
    # 'invalid' message for datetime fields, which has a suggestion of the
    # format to be used.
    error_messages = {'invalid': _('Enter a valid date/time in '
        'YYYY-MM-DD HH:MM[:ss[.uuuuuu]] format.')}
    release_date = forms.DateTimeField(required=False,
        error_messages=error_messages)
    stringfreeze_date = forms.DateTimeField(required=False,
        error_messages=error_messages)
    develfreeze_date = forms.DateTimeField(required=False,
        error_messages=error_messages)

    class Meta:
        model = Release

    def __init__(self, project, user, *args, **kwargs):
        super(ReleaseForm, self).__init__(*args, **kwargs)
        projects = self.fields["project"].queryset.filter(slug=project.slug)
        self.fields["project"].queryset = projects
        self.fields["project"].empty_label = None
        self.user = user

        if not project.is_hub:
            queryset = Resource.objects.filter(project=project)
            self.fields["resources"] = forms.ModelMultipleChoiceField(
                queryset=queryset, required=True, 
                help_text=_('Select the resources to add to the Release. '
                    'Once this project is not a Project Hub, it is only '
                    'possible to choose resources that belong to this '
                    'project.'))

    def clean_resources(self):
        resources_list = self.cleaned_data['resources']
        for resource in resources_list:
            if not isinstance(resource, Resource):
                try:
                    resource = Resource.objects.select_related().get(pk=int(resource))
                except Resource.DoesNotExist, e:
                    raise ValidationError(_("Invalid resource used."))
            if resource.project.private:
                if self.user not in resource.project.maintainers.all():
                    raise ValidationError(
                     _("%s is an inaccessible private resource. "
                       "Remove it!" % resource.name)
                    )
        return resources_list

    def clean_slug(self):
        """Ensure that reserved slugs are not used."""
        slug = self.cleaned_data['slug']
        if slug in RESERVED_RELEASE_SLUGS:
            raise ValidationError(_("This value is reserved and cannot be used."))
        return slug

    def clean(self):
        """Check whether the dates of the release are valid."""
        cleaned_data = self.cleaned_data
        stringfreeze_date = cleaned_data.get('stringfreeze_date')
        develfreeze_date = cleaned_data.get('develfreeze_date')
        release_date = cleaned_data.get('release_date')

        if develfreeze_date and stringfreeze_date and \
            develfreeze_date <= stringfreeze_date:
            msg = _("Devel freeze date must be after the String freeze date.")
            self._errors["develfreeze_date"] = self.error_class([msg])
            del cleaned_data["develfreeze_date"]

        if release_date and stringfreeze_date and \
            release_date <= stringfreeze_date:
            msg = _("Release date must be after the String freeze date.")
            self._errors["release_date"] = self.error_class([msg])
            del cleaned_data["release_date"]

        elif release_date and develfreeze_date and \
            release_date <= develfreeze_date:
            msg = _("Release date must be after the Devel freeze date.")
            self._errors["release_date"] = self.error_class([msg])
            del cleaned_data["release_date"]

        return cleaned_data

########NEW FILE########
__FILENAME__ = handlers
from __future__ import absolute_import
import datetime
from django.conf import settings
from django.contrib.auth.models import User
from django.db.models import get_model, signals, Q
from django.utils.translation import ugettext_lazy as _

from notification import models as notification
from txcron import signals as txcron_signals

from transifex.resources.signals import post_save_translation
from transifex.resources.models import Resource, RLStats
from transifex.releases import RELEASE_ALL_DATA
from transifex.txcommon.log import logger
from .models import Release


def update_all_release(project):
    """
    Update all-resources release for the given project and also for the
    related project hub in case the project is outsourcing its access.
    """
    projects = [project,]
    if project.outsource:
        projects.append(project.outsource)

    for p in projects:
        resources = p.resources.all()
        if p.is_hub:
            resources |= Resource.objects.filter(project__outsource=p)

        if resources.count():
            rel, rel_created = p.releases.get_or_create(
                slug=RELEASE_ALL_DATA['slug'],
                defaults={'name': RELEASE_ALL_DATA['name'],
                        'description': RELEASE_ALL_DATA['description'],})
            rel.resources = resources

def release_all_push(sender, instance, **kwargs):
    """
    Append newly created resource to the 'all' release.

    Add newly created resources to the special release called 'All Resources',
    which contains all the resources for a project at all times. If it is the
    first create the release when the first resource is added to the project.

    Called every time a resource is created.
    """

    resource = instance
    created = kwargs['created']
    if created:
        update_all_release(resource.project)


def release_all_pop(sender, instance, **kwargs):
    """
    Remove newly deleted resource to the 'all' release.

    Remove newly deleted resources from the special release called
    'All Resources'. Delete the release when the last resource is added to it.

    Called every time a resource is deleted.
    """

    resource = instance
    if resource.project is None:
        # The whole project is being deleted, so postgresql will handle the
        # removal of relevant objects.
        return
    try:
        rel = resource.project.releases.get(slug=RELEASE_ALL_DATA['slug'])
    except Release.DoesNotExist:
        rel = None
    if rel and not rel.resources.count():
        rel.delete()


def notify_string_freeze(sender=None, instance=None, **kwargs):
    """
    Handler to notify people about string freeze of releases.
    """
    now = datetime.datetime.now()
    # 48hs before
    logger.debug("release: Sending notifications 48hs before entering the "
        "String Freeze period.")
    timestamp =  now + datetime.timedelta(hours=48)
    releases = Release.objects.filter(stringfreeze_date__lte=timestamp,
        notifications__before_stringfreeze=False)
    for release in releases:
        logger.debug("release: Sending notifications for '%s'." % release)
        project = release.project.outsource or release.project

        # List with project maintainers of the given release PLUS maintainers
        # of projects that outsource theirs team to the project of the release
        resource_ids = release.resources.all().values('id').query
        users = User.objects.filter(
            (Q(projects_maintaining__resources__in=resource_ids) &
                Q(projects_maintaining__outsource=project)) |
            Q(projects_maintaining=project)).distinct()

        # Notification
        context = {'project': release.project, 'release': release}
        if release.project != project:
            context.update({'parent_project': project})

        nt = "project_release_before_stringfreeze"
        #TODO: Add support for actionlog without a user author.
        #action_logging(None, [project, release], nt, context=context)
        if settings.ENABLE_NOTICES:
            notification.send(users, nt, context)

        release.notifications.before_stringfreeze=True
        release.notifications.save()

    # Exactly on time
    logger.debug("release: Sending notifications about being in String "
        "Freeze period.")
    releases = Release.objects.filter(stringfreeze_date__lte=now,
        notifications__in_stringfreeze=False)
    for release in releases:
        logger.debug("release: Sending notifications for '%s'." % release)
        project = release.project.outsource or release.project

        # List with project maintainers of the given release PLUS maintainers
        # of projects that outsource theirs team to the project of the release
        # PLUS team coordinators and team members
        resource_ids = release.resources.all().values('id').query
        users = User.objects.filter(
            (Q(projects_maintaining__resources__in=resource_ids) &
                Q(projects_maintaining__outsource=project)) |
            Q(projects_maintaining=project) |
            Q(team_coordinators__project=project) |
            Q(team_members__project=project)).distinct()

        # Notification
        context = {'project': release.project, 'release': release}
        if release.project != project:
            context.update({'parent_project': project})

        nt = "project_release_in_stringfreeze"
        #TODO: Add support for actionlog without a user author.
        #action_logging(None, [project, release], nt, context=context)
        if settings.ENABLE_NOTICES:
            notification.send(users, nt, context)

        release.notifications.in_stringfreeze=True
        release.notifications.save()


def notify_translation_deadline(sender=None, instance=None, **kwargs):
    """
    Handler to notify people about translation deadline of releases.
    """
    now = datetime.datetime.now()
    # 48hs before
    logger.debug("release: Sending notifications 48hs before hitting the "
        "Translation deadline date.")
    timestamp =  now + datetime.timedelta(hours=48)
    releases = Release.objects.filter(develfreeze_date__lte=timestamp,
        notifications__before_trans_deadline=False)
    for release in releases:
        logger.debug("release: Sending notifications for '%s'." % release)
        project = release.project.outsource or release.project

        # List with team coordinators and team members for the given project
        # release
        users = User.objects.filter(
            Q(team_coordinators__project=project) |
            Q(team_members__project=project)).distinct()

        # Notification
        context = {'project': release.project, 'release': release}
        if release.project != project:
            context.update({'parent_project': project})

        nt = "project_release_before_trans_deadline"
        #TODO: Add support for actionlog without a user author.
        #action_logging(None, [project, release], nt, context=context)
        if settings.ENABLE_NOTICES:
            notification.send(users, nt, context)

        release.notifications.before_trans_deadline=True
        release.notifications.save()

    # Exactly on time
    logger.debug("release: Sending notifications for Translation period being "
        "over.")
    releases = Release.objects.filter(develfreeze_date__lte=now,
        notifications__trans_deadline=False)
    for release in releases:
        logger.debug("release: Sending notifications for '%s'." % release)
        project = release.project.outsource or release.project

        # List with project maintainers of the given release PLUS maintainers
        # of projects that outsource theirs team to the project of the release
        # PLUS team coordinators and team members
        resource_ids = release.resources.all().values('id').query
        users = User.objects.filter(
            (Q(projects_maintaining__resources__in=resource_ids) &
                Q(projects_maintaining__outsource=project)) |
            Q(projects_maintaining=project) |
            Q(team_coordinators__project=project) |
            Q(team_members__project=project)).distinct()

        # Notification
        context = {'project': release.project, 'release': release}
        if release.project != project:
            context.update({'parent_project': project})

        nt = "project_release_hit_trans_deadline"
        #TODO: Add support for actionlog without a user author.
        #action_logging(None, [project, release], nt, context=context)
        if settings.ENABLE_NOTICES:
            notification.send(users, nt, context)

        release.notifications.trans_deadline=True
        release.notifications.save()


# TODO: Candidate for a celery task
def check_and_notify_string_freeze_breakage(sender, **kwargs):
    """
    Handler to notify people about string freeze breakage of releases.

    This happens whenever a resource source file changes in the string freeze
    period.
    """
    resource = kwargs.pop('resource')
    language = kwargs.pop('language')

    # Check it only for source languages
    if kwargs.pop('is_source'):
        logger.debug("release: Checking string freeze breakage.")
        # FIXME: Get timestamp from RLStats last_update field, but it depends
        # on some changes on formats/core.py. At this point the RLStats object
        # wasn't created yet.
        timestamp = datetime.datetime.now()
        project = resource.project.outsource or resource.project
        releases = Release.objects.filter(resources=resource, project=project,
            stringfreeze_date__lte=timestamp, develfreeze_date__gte=timestamp)
        for release in releases:
            logger.debug("release: Sending notifications about string "
                "freeze breakage for '%s'" % release)
            project = release.project.outsource or release.project

            # User list with project maintainers and team coordinators of the
            # given release PLUS maintainers of the project that the RLStats
            # object belongs to PLUS
            users = User.objects.filter(
                Q(projects_maintaining=resource.project) |
                Q(projects_maintaining=project) |
                Q(team_coordinators__project=project)).distinct()

            # Notification
            context = {'project': release.project, 'release': release,
                'resource': resource}
            if release.project != project:
                context.update({'parent_project': project})

            nt = "project_release_stringfreeze_breakage"
            #TODO: Add support for actionlog without a user author.
            #action_logging(None, [project, release], nt, context=context)
            if settings.ENABLE_NOTICES:
                notification.send(users, nt, context)


# Connect handlers to populate 'all' release (more info in handler docstrings):
signals.post_save.connect(release_all_push, sender=Resource)
signals.post_delete.connect(release_all_pop, sender=Resource)

# Connect handlers to notify people whenever the specific signals from txcron
# are raise.
label = settings.RELEASE_NOTIFICATION_CRON['notify_string_freeze']
getattr(txcron_signals, label).connect(notify_string_freeze)

label = settings.RELEASE_NOTIFICATION_CRON['notify_translation_deadline']
getattr(txcron_signals, label).connect(notify_translation_deadline)

# Connect handler for string freeze breakage to the RLStats post_save signal
post_save_translation.connect(check_and_notify_string_freeze_breakage)

########NEW FILE########
__FILENAME__ = 0001_initial

from south.db import db
from django.db import models
from transifex.releases.models import *

class Migration:

    def forwards(self, orm):
        "Write your forwards migration here"


    def backwards(self, orm):
        "Write your backwards migration here"


    models = {

    }

    complete_apps = ['releases']

########NEW FILE########
__FILENAME__ = 0001_initial_release
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

"""
Fix for the initial migration of releases app. The 0001_initial migration
of the app actually does not do anything, as it is empty.
"""

class Migration(SchemaMigration):

    depends_on = (
        ("projects", "0001_initial"),
        ("resources", "0001_initial"),
        ("releases", "0001_initial"),
    )

    def forwards(self, orm):

        # Adding model 'Release'
        db.create_table('releases_release', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(max_length=30, db_index=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('description', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
            ('long_description', self.gf('django.db.models.fields.TextField')(max_length=1000, blank=True)),
            ('homepage', self.gf('django.db.models.fields.URLField')(max_length=200, blank=True)),
            ('release_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('stringfreeze_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('develfreeze_date', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('long_description_html', self.gf('django.db.models.fields.TextField')(max_length=1000, blank=True)),
            ('project', self.gf('django.db.models.fields.related.ForeignKey')(related_name='releases', to=orm['projects.Project'])),
        ))
        db.send_create_signal('releases', ['Release'])

        # Adding M2M table for field resources on 'Release'
        db.create_table('releases_release_resources', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('release', models.ForeignKey(orm['releases.release'], null=False)),
            ('resource', models.ForeignKey(orm['resources.resource'], null=False))
        ))
        db.create_unique('releases_release_resources', ['release_id', 'resource_id'])


    def backwards(self, orm):

        # Deleting model 'Release'
        db.delete_table('releases_release')

        # Removing M2M table for field resources on 'Release'
        db.delete_table('releases_release_resources')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'resources.resource': {
            'Meta': {'unique_together': "(('name', 'project'), ('slug', 'project'))", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True'}),
            'resource_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.ResourceGroup']", 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"})
        },
        'resources.resourcegroup': {
            'Meta': {'object_name': 'ResourceGroup'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'languages.language': {
            'Meta': {'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'projects.project': {
            'Meta': {'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'releases.release': {
            'Meta': {'unique_together': "(('slug', 'project'),)", 'object_name': 'Release'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'develfreeze_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'releases'", 'to': "orm['projects.Project']"}),
            'release_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'resources': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'releases'", 'symmetrical': 'False', 'to': "orm['resources.Resource']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '30', 'db_index': 'True'}),
            'stringfreeze_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['releases']

########NEW FILE########
__FILENAME__ = 0002_all_resources_release
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models
from transifex.projects.models import Project
from transifex.releases import RELEASE_ALL_DATA, RESERVED_RELEASE_SLUGS
from transifex.releases.models import Release
from transifex.releases.handlers import update_all_release

def get_new_slug(slug):
    """Return a new un-reserved slug.
    
    Ideally this should iterate until it finds an unreserved slug, but we
    should be OK for now with this, since the migration will fail if the
    slug exists already and the admin can update it manually.
    """
    return "%s-2" % slug


class Migration(SchemaMigration):
    """Ensure the "all-resources" release will work."""
    def forwards(self, orm):
    
        # Rename releases if needed, since we now have reserved release slugs.
        for res_slug in RESERVED_RELEASE_SLUGS:
            for rel in Release.objects.filter(slug=res_slug):
                rel.slug = get_new_slug(rel.slug)
                rel.save()

        # Populate all-resources release:
        for project in Project.objects.all():
            update_all_release(project)


    def backwards(self, orm):
        """Remove all 'all-resources' releases."""
        Release.objects.filter(slug=RELEASE_ALL_DATA['slug']).delete()


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'releases.release': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Release'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'develfreeze_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'releases'", 'to': "orm['projects.Project']"}),
            'release_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'resources': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'releases'", 'symmetrical': 'False', 'to': "orm['resources.Resource']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '30', 'db_index': 'True'}),
            'stringfreeze_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['releases']

########NEW FILE########
__FILENAME__ = 0003_auto__add_releasenotifications
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'ReleaseNotifications'
        db.create_table('releases_releasenotifications', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('before_stringfreeze', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('in_stringfreeze', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('before_trans_deadline', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('trans_deadline', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('release', self.gf('django.db.models.fields.related.OneToOneField')(related_name='notifications', unique=True, to=orm['releases.Release'])),
        ))
        db.send_create_signal('releases', ['ReleaseNotifications'])


    def backwards(self, orm):
        
        # Deleting model 'ReleaseNotifications'
        db.delete_table('releases_releasenotifications')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'releases.release': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Release'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'develfreeze_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'releases'", 'to': "orm['projects.Project']"}),
            'release_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'resources': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'releases'", 'symmetrical': 'False', 'to': "orm['resources.Resource']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '30', 'db_index': 'True'}),
            'stringfreeze_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'})
        },
        'releases.releasenotifications': {
            'Meta': {'object_name': 'ReleaseNotifications'},
            'before_stringfreeze': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'before_trans_deadline': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_stringfreeze': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'release': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'notifications'", 'unique': 'True', 'to': "orm['releases.Release']"}),
            'trans_deadline': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['releases']

########NEW FILE########
__FILENAME__ = 0004_add_unique_index_for_slug_project
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        db.create_unique('releases_release', ['project_id', 'slug'])


    def backwards(self, orm):
        db.delete_unique('releases_release', ['project_id', 'slug'])


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'releases.release': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Release'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'develfreeze_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'releases'", 'to': "orm['projects.Project']"}),
            'release_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'resources': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'releases'", 'symmetrical': 'False', 'to': "orm['resources.Resource']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '30', 'db_index': 'True'}),
            'stringfreeze_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'})
        },
        'releases.releasenotifications': {
            'Meta': {'object_name': 'ReleaseNotifications'},
            'before_stringfreeze': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'before_trans_deadline': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_stringfreeze': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'release': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'notifications'", 'unique': 'True', 'to': "orm['releases.Release']"}),
            'trans_deadline': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['releases']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-
import os
from datetime import datetime
import markdown

from django.conf import settings
from django.core.cache import cache
from django.db.models import get_model
from django.utils.translation import ugettext_lazy as _
from django.db import models, IntegrityError
from django.db.models import permalink
from django.utils.html import escape

from transifex.txcommon.log import log_model
from transifex.resources.utils import invalidate_template_cache

RLStats = get_model('resources', 'RLStats')

class Release(models.Model):

    """
    A release of a project, as in 'a set of specific resources'.

    Represents the packaging and releasing of a software project (big or
    small) on a particular date, for which makes sense to track
    translations across the whole release.

    Examples of Releases is Transifex 1.0, GNOME 2.26, Fedora 10, etc.
    """

    slug = models.SlugField(_('Slug'), max_length=30,
        help_text=_('A short label to be used in the URL, containing only '
                    'letters, numbers, underscores or hyphens.'))
    name = models.CharField(_('Name'), max_length=50,
        help_text=_('A string like a name or very short description.'))
    description = models.CharField(_('Description'),
        blank=True, max_length=255,
        help_text=_('A sentence or two describing the object.'))
    long_description = models.TextField(_('Long description'),
        blank=True, max_length=1000,
        help_text=_('Use Markdown syntax.'))
    homepage = models.URLField(_("Homepage"), blank=True, verify_exists=False)

    release_date = models.DateTimeField(_('Release date'),
        blank=True, null=True,
        help_text=_('When this release will be available.'))
    stringfreeze_date = models.DateTimeField(_('String freeze date'),
        blank=True, null=True,
        help_text=_("When the translatable strings will be frozen (no strings "
                    "can be added/modified which affect translations."))
    develfreeze_date = models.DateTimeField(_('Devel freeze date'),
        blank=True, null=True,
        help_text=_("The last date packages from this release can be built "
                    "from the developers. Translations sent after this date "
                    "will not be included in the released version."))

    created = models.DateTimeField(auto_now_add=True, editable=False)
    modified = models.DateTimeField(auto_now=True, editable=False)

    # Normalized fields
    long_description_html = models.TextField(_('HTML Description'),
        blank=True, max_length=1000,
         help_text=_('Description in HTML.'), editable=False)

    # Relations
    project = models.ForeignKey('projects.Project', verbose_name=_('Project'), related_name='releases')

    resources = models.ManyToManyField('resources.Resource',
        verbose_name=_('Resources'), related_name='releases',
        blank=False, null=False)

    def __unicode__(self):
        return u'%s: %s' % (self.project.name, self.name)

    def __repr__(self):
        return _('<Release: %(rel)s (Project %(proj)s)>') % {
            'rel': self.name,
            'proj': self.project.name}

    @property
    def full_name(self):
        #return "%s: %s" % (self.project.name, self.name)
        return "%s.%s" % (self.project.slug, self.slug)

    class Meta:
        unique_together = ("slug", "project")
        verbose_name = _('release')
        verbose_name_plural = _('releases')
        ordering  = ('name',)
        get_latest_by = 'created'

    def save(self, *args, **kwargs):
        desc_escaped = escape(self.long_description)
        self.long_description_html = markdown.markdown(desc_escaped)
        created = self.created
        super(Release, self).save(*args, **kwargs)

        #TODO: Find way to update the object accordingly if *_date fields change
        rn = ReleaseNotifications.objects.get_or_create(release=self)[0]

        for stat in RLStats.objects.by_release_aggregated(self):
            invalidate_template_cache("release_details",
                self.pk, stat.object.id)

    @permalink
    def get_absolute_url(self):
        return ('release_detail', None,
                { 'project_slug': self.project.slug,
                 'release_slug': self.slug })


class ReleaseNotifications(models.Model):
    """The notifications sent for a given release of a project."""

    before_stringfreeze = models.BooleanField(_('Before String Freeze'),
        blank=True, default=False,
        help_text=_("Whether the 'Before String Freeze' notification was "
            "sent or not."))

    in_stringfreeze = models.BooleanField(_('Being in String Freeze'),
        blank=True, default=False,
        help_text=_("Whether the 'Being in String Freeze' notification was "
            "sent or not."))
    
    before_trans_deadline = models.BooleanField(
        _('Before Translation Deadline'), blank=True, default=False,
        help_text=_("Whether the 'Before Translation Deadline' notification "
            "was sent or not."))
            
    trans_deadline = models.BooleanField(_('Hit Translation Deadline'),
        blank=True, default=False,
        help_text=_("Whether the 'Hit Translation Deadline' notification "
            "was sent or not."))

    # Relations
    release = models.OneToOneField('Release', unique=True, 
        verbose_name=_('Release'), related_name='notifications')

    def __unicode__(self):
        return u'%s' % self.release

    def __repr__(self):
        return _('<ReleaseNotification: %(rel)s (Project %(proj)s)>') % {
            'rel': self.release.name,
            'proj': self.release.project.name}

    class Meta:
        verbose_name = _('release notification')
        verbose_name_plural = _('release notifications')


log_model(Release)
log_model(ReleaseNotifications)

########NEW FILE########
__FILENAME__ = notifications
# -*- coding: utf-8 -*-
import os, datetime
from django.conf import settings
from django.contrib.auth.models import User
from django.core import mail
from django.core.urlresolvers import reverse
from django.test.client import Client
from transifex.txcommon.tests import base, utils
from transifex.projects.models import Project
from transifex.resources.formats.pofile import POHandler
from transifex.resources.models import Resource
from transifex.releases.handlers import notify_string_freeze, \
    notify_translation_deadline
from transifex.txcommon.utils import key_sort


class ReleaseNotificationTests(base.BaseTestCase):
    """Test notification of events around releases."""

    def _gen_assert_msg(self, msg):
        if settings.TX_ROOT != settings.PROJECT_PATH:
            return msg.lstrip('[localhost] ')
        return msg

    def setUp(self):
        self.current_path = os.path.split(__file__)[0]
        super(ReleaseNotificationTests, self).setUp()
        self.pofile_path = os.path.join(
            settings.TX_ROOT, 'resources/tests/lib/pofile')

        # Brand new objects named with 3 suffix
        # self.project3 outsources its access to self.project and
        # self.resource3 is part of self.release which belongs to self.project
        self.maintainer3 = User.objects.create_user('maintainer3',
            'maintainer3@localhost', 'PASSWORD')
        self.project3 = Project.objects.create(slug="project3",
            name="Project3", owner=self.maintainer3,
            source_language=self.language_en)
        self.project3.maintainers.add(self.maintainer3)
        self.project3.outsource = self.project
        self.project3.save()
        self.resource3 = Resource.objects.create(slug="resource3",
            name="Resource3", project=self.project3, i18n_type='PO',
            source_language=self.language_en)
        self.release.resources.add(self.resource3)

        # Brand new objects named with 4 suffix
        # self.project4 DO NOT outsources its access to self.project and
        # self.resource4 is part of self.release which belongs to self.project
        self.maintainer4 = User.objects.create_user('maintainer4',
            'maintainer4@localhost', 'PASSWORD')
        self.project4 = Project.objects.create(slug="project4",
            name="Project4", owner=self.maintainer4,
            source_language=self.language_en)
        self.project4.maintainers.add(self.maintainer4)
        self.project4.save()
        self.resource4 = Resource.objects.create(slug="resource4",
            name="Resource4", project=self.project4, i18n_type='PO',
            source_language=self.language_en)
        self.release.resources.add(self.resource4)


    def test_before_string_freeze_notifications(self):
        """
        Check whether notifications are sent to the correct people whenever
        the string freeze period approaches.
        """
        timestamp = datetime.datetime.now() + datetime.timedelta(hours=47)
        self.release.stringfreeze_date = timestamp
        self.release.save()

        notify_string_freeze()

        # Sorted mails list
        mails = key_sort(mail.outbox, 'to')

        self.assertEqual(len(mails), 2)
        self.assertEqual(mails[0].subject, self._gen_assert_msg(
            '[localhost] Release about to '
            'enter the string freeze period: Release1'))

        self.assertEqual(mails[0].to, ['maintainer3@localhost'])
        self.assertEqual(mails[1].to, ['maintainer@localhost'])


    def test_in_string_freeze_notifications(self):
        """
        Check whether notifications are sent to the correct people whenever
        the string freeze period starts.
        """
        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
        self.release.stringfreeze_date = timestamp
        self.release.notifications.before_stringfreeze = True
        self.release.notifications.save()
        self.release.save()

        notify_string_freeze()

        # Sorted mails list
        mails = key_sort(mail.outbox, 'to')

        self.assertEqual(len(mails), 5)
        self.assertEqual(mails[0].subject, self._gen_assert_msg(
            '[localhost] Release is in string '
            'freeze period: Release1'))

        self.assertEqual(mails[0].to, ['maintainer3@localhost'])
        self.assertEqual(mails[1].to, ['maintainer@localhost'])
        self.assertEqual(mails[2].to, ['reviewer@localhost'])
        self.assertEqual(mails[3].to, ['team_coordinator@localhost'])
        self.assertEqual(mails[4].to, ['team_member@localhost'])


    def test_before_trans_deadline_notifications(self):
        """
        Check whether notifications are sent to the correct people whenever a
        the translation deadline approaches.
        """
        timestamp = datetime.datetime.now() + datetime.timedelta(hours=47)
        self.release.develfreeze_date = timestamp
        self.release.save()

        notify_translation_deadline()

        # Sorted mails list
        mails = key_sort(mail.outbox, 'to')

        self.assertEqual(len(mails), 3)
        self.assertEqual(mails[0].subject, self._gen_assert_msg(
            '[localhost] Release about '
            'to hit the translation deadline: Release1'))

        self.assertEqual(mails[0].to, ['reviewer@localhost'])
        self.assertEqual(mails[1].to, ['team_coordinator@localhost'])
        self.assertEqual(mails[2].to, ['team_member@localhost'])


    def test_hit_trans_deadline_notifications(self):
        """
        Check whether notifications are sent to the correct people whenever a
        translation period is over.
        """
        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
        self.release.develfreeze_date = timestamp
        self.release.notifications.before_trans_deadline = True
        self.release.notifications.save()
        self.release.save()

        notify_translation_deadline()

        # Sorted mails list
        mails = key_sort(mail.outbox, 'to')

        self.assertEqual(len(mails), 5)
        self.assertEqual(mails[0].subject, self._gen_assert_msg(
            '[localhost] Release has '
            'hit the translation deadline: Release1'))

        self.assertEqual(mails[0].to, ['maintainer3@localhost'])
        self.assertEqual(mails[1].to, ['maintainer@localhost'])
        self.assertEqual(mails[2].to, ['reviewer@localhost'])
        self.assertEqual(mails[3].to, ['team_coordinator@localhost'])
        self.assertEqual(mails[4].to, ['team_member@localhost'])


    def test_string_freeze_breakage_outsourced(self):
        """Check string breakage for outsourced projects."""

        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
        timestamp2 = datetime.datetime.now() + datetime.timedelta(hours=1)
        self.release.stringfreeze_date = timestamp
        self.release.develfreeze_date = timestamp2
        self.release.save()

        ## Loading POT (en_US) into the self.resource3
        handler = POHandler('%s/tests.pot' % self.pofile_path)
        handler.set_language(self.language_en)
        handler.parse_file(is_source=True)
        # Resource 3 - Outsourced
        handler.bind_resource(self.resource3)
        # We are listing to the post_save_translation signal raised in
        # _post_save2db method.
        handler.save2db(is_source=True)

        # Sorted mails list
        mails = key_sort(mail.outbox, 'to')

        self.assertEqual(len(mails), 3)
        self.assertEqual(mails[0].subject, self._gen_assert_msg(
            '[localhost] Release string '
            'freeze breakage: Release1'))

        self.assertEqual(mails[0].to, ['maintainer3@localhost'])
        self.assertEqual(mails[1].to, ['maintainer@localhost'])
        self.assertEqual(mails[2].to, ['team_coordinator@localhost'])


    def test_string_freeze_breakage(self):
        """Check string breakage for non-outsourced projects."""

        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
        timestamp2 = datetime.datetime.now() + datetime.timedelta(hours=1)
        self.release.stringfreeze_date = timestamp
        self.release.develfreeze_date = timestamp2
        self.release.save()

        ## Loading POT (en_US) into the self.resource4
        handler = POHandler('%s/tests.pot' % self.pofile_path)
        handler.set_language(self.language_en)
        handler.parse_file(is_source=True)
        # Resource 4 - Not outsourced
        handler.bind_resource(self.resource4)
        # We are listing to the post_save_translation signal raised in
        # _post_save2db method.
        handler.save2db(is_source=True)

        # Should not send any notification once the project do not outsources
        # its teams
        self.assertEqual(len(mail.outbox), 0)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
import datetime
from django.db.models import get_model
from django.core.urlresolvers import reverse
from transifex.txcommon.tests import base

Project = get_model('projects', 'Project')
Resource = get_model('resources', 'Resource')
Release = get_model('releases', 'Release')

class ReleasesViewsTests(base.BaseTestCase):

    # Note: The Resource lookup field is tested in the resources app.

    def test_release_list(self):
        self.assertTrue(self.project.releases.all())

        # Anonymous and maintainer should see it
        resp = self.client['anonymous'].get(self.urls['project'])
        self.assertContains(resp, self.release.name)
        resp = self.client['maintainer'].get(self.urls['project'])
        self.assertContains(resp, self.release.name)

    def test_release_list_noreleases(self):
        self.project.releases.all().delete()

        # Maintainer should see things
        resp = self.client['maintainer'].get(self.urls['project'])
        self.assertContains(resp, "No releases are registered")

        # Anonymous should not see anything
        resp = self.client['anonymous'].get(self.urls['project'])
        self.assertNotContains(resp, "PROJECT RELEASES")

    def test_release_details_resources(self):
        """Test whether the right resources show up on details page."""
        resp = self.client['anonymous'].get(self.urls['release'])

        # The list at the top of the page should include this resource.
        self.assertContains(resp, "Test Project: Resource1")

        # One of the languages is totally untranslated.
        self.assertContains(resp, "Untranslated: %s" % self.resource.source_entities.count())

    def test_release_language_detail(self):
        """Test language detail for a release"""
        url = reverse('release_language_detail', args=[self.project.slug, self.release.slug, self.language_ar.code])
        resp = self.client['anonymous'].get(url)
        self.assertContains(resp,'50%', status_code=200)

    def test_release_create_good_and_bad_resources(self):
        """
        Test whether resources added to a release are valid or not depending
        on the project, if it's a hub or not.
        """
        # Create a regular project with a resource
        self.project3 = Project.objects.create(slug='project3',
            source_language=self.language_en, owner = self.user['maintainer'])
        self.project3.maintainers.add(self.user['maintainer'])
        self.resource3 = Resource.objects.create(slug="resource3",
            name="Resource3", project=self.project3, i18n_type='PO')

        # Regular projects can't add resources from other projects
        resp = self.client['maintainer'].post(self.urls['release_create'],
            {'slug': 'nice-release', 'name': 'Nice Release',
                'project': self.project.id, 'resources': [self.resource3.id]
            }, follow=True)
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, "projects/release_form.html")
        self.assertContains(resp, "Select a valid choice. %s is not one of "
            "the available choices" % self.resource3.id)

        # Once a project becomes a hub it can add resources from any project
        self.project.is_hub = True
        self.project.save()
        resp = self.client['maintainer'].post(self.urls['release_create'],
            {'slug': 'nice-release', 'name': 'Nice Release',
            'project': self.project.id, 
            'resources': '|%s|' % self.resource3.id}, follow=True)
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, "projects/release_detail.html")
        self.assertContains(resp, self.resource3.name)

    def test_release_create_good_private_resources(self):
        """Test Release creation with private resources.

        User with access to a private resource should be able to add it to a
        release.
        """
        self.project.is_hub = True
        self.project.save()

        resp = self.client['maintainer'].post(self.urls['release_create'],
            {'slug': 'nice-release', 'name': 'Nice Release',
            'project': self.project.id, 
            'resources': '|%s|' % self.resource_private.id,
            'description': '', 'release_date': '', 'resources_text': '',
            'stringfreeze_date': '', 'homepage': '', 'long_description': '',
             'develfreeze_date': '', }, follow=True)
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, "projects/release_detail.html")

        # Test that a maintainer can see the private resource.
        resp = self.client['maintainer'].get(reverse('release_detail',
            args=[self.project.slug, 'nice-release']))
        self.assertContains(resp, "Release 'Nice Release'", status_code=200)
        self.assertContains(resp, "1 private resources you have access to")
        self.assertContains(resp, "Portuguese (Brazil)")

        # Priv proj member can see the private resource.
        resp = self.client['team_member'].get(reverse('release_detail',
            args=[self.project.slug, 'nice-release']))
        self.assertContains(resp, "Release 'Nice Release'", status_code=200)
        self.assertContains(resp, "1 private resources you have access to")
        self.assertContains(resp, "Portuguese (Brazil)")

        # Priv proj non-member cannot see the private resource.
        resp = self.client['registered'].get(reverse('release_detail',
            args=[self.project.slug, 'nice-release']))
        self.assertContains(resp, "Release 'Nice Release'", status_code=200)
        self.assertNotContains(resp, "private resources")
        self.assertNotContains(resp, "Portuguese (Brazil)")

        # ...even if he is a member of the public project teams.
        resp = self.client['registered'].get(reverse('release_detail',
            args=[self.project.slug, 'nice-release']))
        self.team.members.add(self.user['registered'])
        self.assertTrue(self.user['registered'] in self.team.members.all())
        self.assertContains(resp, "Release 'Nice Release'", status_code=200)
        self.assertNotContains(resp, "private resources")
        self.assertNotContains(resp, "Portuguese (Brazil)")

    def test_release_delete(self):
        """Test deleting a release"""
        release = Release.objects.create(slug='nice-release', name='Nice',
            project=self.project)
        release.resources.add(self.resource)
        url = reverse('release_delete', args=[self.project.slug, release.slug])
        resp = self.client['maintainer'].post(url, {}, follow=True)
        self.assertContains(resp, "was deleted.", status_code=200)

    def test_release_create_bad_private_resources(self):
        """Test Release creation with private resource w/o access.

        Public project release with a private resource I don't have access to.
        Use the registered user as the giunea pig.
        """
        self.project.is_hub = True
        self.project.save()
        self.project.maintainers.add(self.user['registered'])
        self.assertFalse(
            self.user['registered'] in self.project_private.maintainers.all()
        )
        r = self.client['registered'].post(self.urls['release_create'],
            {'slug': 'nice-release', 'name': 'Nice Release',
            'project': self.project.id, 
            'resources': '|%s|' % self.resource_private.id,
            'description': '', 'release_date': '', 'resources_text': '',
            'stringfreeze_date': '', 'homepage': '', 'long_description': '',
             'develfreeze_date': '', }, follow=True)
        # The release shouldn't even be allowed to be created.
        self.assertRaises(
            Release.DoesNotExist, self.project.releases.get, slug='nice-release'
        )
        self.assertTemplateUsed(r, "projects/release_form.html")
        self.assertContains(r, "inaccessible private resource")

    def test_add_release_button_shown_on_project_deatils_page(self):
        response = self.client['maintainer'].get(self.urls['project'])
        self.assertContains(response, 'Add')
        self.assertContains(response, 'href="%sadd-release/"' % self.urls['project'])


class AllReleaseTests(base.BaseTestCase):
    """Test the All Release model."""

    def test_no_resource(self):
        self.project.resources.all().delete()
        self.assertEquals(self.project.releases.filter(slug='all-resources').count(), 0)

    def _create_new_resource(self, project=None):
        if not project:
            project = self.project
        self.res2 = Resource.objects.create(
            slug="resource2", name="Resource2",
            project=project, source_language=self.language_en,
            i18n_type='PO')

    def test_first_resource(self):
        self.project.resources.all().delete()
        self._create_new_resource()
        self.assertTrue(self.res2 in
            self.project.releases.get(slug='all-resources').resources.all())

    def test_extra_resource(self):
        self._create_new_resource()
        rel_resources = self.project.releases.get(slug='all-resources').resources.all()
        self.assertTrue(self.resource in rel_resources)
        self.assertTrue(self.res2 in rel_resources)

    def test_extra_resource_deletion(self):
        self._create_new_resource()
        self.res2.delete()
        rel_resources = self.project.releases.get(slug='all-resources').resources.all()
        self.assertTrue(self.resource in rel_resources)
        self.assertFalse(self.res2 in rel_resources)

    def test_all_resources_deleted_no_all_release(self):
        self.resource.delete()
        self.assertFalse(self.project.releases.filter(slug='all-resources').count())

    def test_reserved_slug(self):
        resp = self.client['maintainer'].post('/projects/p/project1/add-release/', {'slug': 'all-resources', 'project': '1', 'name': 'test', })
        self.assertContains(resp, "value is reserved")
        # Still at the right URL
        self.assertContains(resp, "Add a release")

        resp = self.client['maintainer'].post('/projects/p/project1/add-release/', {'slug': 'foobar', 'project': '1', 'name': 'test', })
        self.assertNotContains(resp, "value is reserved")

    def test_project_hub(self):
        """
        Test whether resources from projects outsourcing theirs access are 
        also added in the outsourced all-resources release.
        """
        self._project = Project.objects.create(slug="hub", is_hub=True,
            source_language=self.language_en)
        self._create_new_resource(self._project)
        self.project.outsource = self._project
        self.project.save()
        self._create_new_resource()
        rel_resources = self._project.releases.get(slug='all-resources').resources.all()
        self.assertTrue(self.res2 in rel_resources)
        self.assertTrue(rel_resources.count() == 3)


class ReleaseFormDateFieldsTests(base.BaseTestCase):
    """
    Test the datetime field validations for the release form as well as the
    use of a custom widget for rendering the datetime fields.
    """

    url = reverse('release_create', args=['project1'])

    def setUp(self):
        super(ReleaseFormDateFieldsTests, self).setUp()
        self.data = {
            'slug': 'r1',
            'project': '1',
            'name': 'release',
        }

    def tearDown(self):
        super(ReleaseFormDateFieldsTests, self).tearDown()
        Release.objects.filter(slug='r1', project__id=1).delete()

    def test_release_date(self):
        """Test the release date field of release form."""
        now = datetime.datetime.now()
        release_date = {
            'release_date': now.strftime('%Y-%m-%d')
        }
        self.data.update(release_date)

        now = now + datetime.timedelta(days=1)
        develfreeze_date = {
            'develfreeze_date': now.strftime('%Y-%m-%d')
        }
        self.data.update(develfreeze_date)

        resp = self.client['maintainer'].post(self.url, self.data)
        self.assertContains(resp, "Release date must be after the Devel freeze date.")


    def test_develfreeze_date(self):
        """Test the devel freeze date field of release form."""
        # Update form data with develfreeze_date
        now = datetime.datetime.now()
        develfreeze_date = {
            'develfreeze_date': now.strftime('%Y-%m-%d')
        }
        self.data.update(develfreeze_date)

        now = now + datetime.timedelta(days=1)
        stringfreeze_date = {
            'stringfreeze_date': now.strftime('%Y-%m-%d')
        }
        self.data.update(stringfreeze_date)

        resp = self.client['maintainer'].post(self.url, self.data)
        self.assertContains(resp, "Devel freeze date must be after the String freeze date.")


########NEW FILE########
__FILENAME__ = urls
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from django.conf import settings
from django.contrib.auth.decorators import login_required

from transifex.releases.feeds import ReleaseFeed, ReleaseLanguageFeed
from transifex.releases.views import *

RELEASE_URL_PARTIAL = r'^r/(?P<release_slug>[\-\w_]+)/'

feeds = {
    'release': ReleaseFeed,
    'release_language': ReleaseLanguageFeed,
}

urlpatterns = patterns('',
    url(
        regex = RELEASE_URL_PARTIAL + r'feed/$',
        view = release_feed,
        name = 'release_feed',
        kwargs = {'feed_dict': feeds,
                  'slug': 'release'}),
    url(
        regex = RELEASE_URL_PARTIAL + r'l/(?P<language_code>[\-_@\w\.]+)/feed/$',
        view = release_language_feed,
        name = 'release_language_feed',
        kwargs = {'feed_dict': feeds, 'slug': 'release_language'}),
)

urlpatterns += patterns('',
    url(
        regex = r'add-release/$',
        view = release_create_update,
        name = 'release_create',),
    url(
        regex = RELEASE_URL_PARTIAL + r'$',
        view = release_detail,
        name = 'release_detail'),
    url(
        regex = RELEASE_URL_PARTIAL + r'edit/$',
        view = release_create_update,
        name = 'release_edit',),
    url(
        regex = RELEASE_URL_PARTIAL + r'delete/$',
        view = release_delete,
        name = 'release_delete',),
    url(
        regex = RELEASE_URL_PARTIAL + r'l/(?P<language_code>[\-_@\w\.]+)/$',
        view = release_language_detail,
        name = 'release_language_detail',
    ),
)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from django.core.urlresolvers import reverse
from django.http import Http404, HttpResponseRedirect, HttpResponse
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils.translation import ugettext as _
from django.conf import settings
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import AnonymousUser
from django.db.models import F

from actionlog.models import action_logging
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.projects.signals import post_release_save
from transifex.projects.permissions import *
from transifex.releases import RELEASE_ALL_DATA
from transifex.releases.models import Release
from transifex.releases.forms import ReleaseForm
from transifex.resources.models import Resource, RLStats

# Temporary
from transifex.txcommon import notifications as txnotification
from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.log import logger

from django.contrib.syndication.views import feed
from transifex.projects.permissions import pr_project_private_perm

@login_required
@one_perm_required_or_403(pr_release_add_change,
    (Project, 'slug__exact', 'project_slug'))
def release_create_update(request, project_slug, release_slug=None, *args, **kwargs):
    project = get_object_or_404(Project, slug__exact=project_slug)
    if release_slug:
        release = get_object_or_404(Release, slug=release_slug,
                                    project__slug=project_slug)
    else:
        release = None
    if request.method == 'POST':
        release_form = ReleaseForm(
            project, request.user, request.POST, instance=release
        )
        if release_form.is_valid():
            if release:
                nt = "project_release_changed"
                created = False
            else:
                nt = "project_release_added"
                created = True
            release = release_form.save()
            context = {'project': project,
                       'release': release,}
            object_list = [project, release]
            action_logging(request.user, object_list, nt, context=context)
            post_release_save.send(sender=None, instance=release,
                    created=created, user=request.user)
            return HttpResponseRedirect(
                reverse('release_detail',
                         args=[project_slug, release.slug]))
    else:
        release_form = ReleaseForm(project, request.user, instance=release)

    return render_to_response('projects/release_form.html', {
        'form': release_form,
        'project': project,
        'release': release,
    }, context_instance=RequestContext(request))


@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def release_detail(request, project_slug, release_slug):
    release = get_object_or_404(Release, slug=release_slug,
        project__slug=project_slug)
    resources = Resource.objects.select_related('project',
        'source_language').filter(releases=release, project__private=False
        ).order_by('project__name')

    source_languages = Language.objects.filter(
        id__in=resources.values('project__source_language')).distinct()

    if request.user in (None, AnonymousUser()):
        private_resources = []
    else:
        private_resources = Resource.objects.select_related('project',
            'source_language').for_user(request.user).filter(
            releases=release, project__private=True
            ).order_by('project__name').distinct()
    if not len(source_languages) == 1:
        source_languages = ()

    statslist = RLStats.objects.select_related('language', 'last_committer'
        ).for_user(request.user).by_release_aggregated(release)

    return render_to_response('projects/release_detail.html', {
        'release': release,
        'alldata_slug': RELEASE_ALL_DATA['slug'],
        'project': release.project,
        'resources': resources,
        'private_resources': private_resources,
        'source_languages' : source_languages,
        'statslist': statslist,
    }, context_instance=RequestContext(request))

@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def release_language_detail(request, project_slug, release_slug, language_code):

    language = get_object_or_404(Language, code__iexact=language_code)
    project = get_object_or_404(Project, slug__exact=project_slug)
    release = get_object_or_404(Release, slug__exact=release_slug,
        project__id=project.pk)

    stats = RLStats.objects.select_related('resource', 'resource__project',
        'lock', 'last_committer', 'resource__priority').public(
        ).by_release_and_language(release, language)

    private_stats = RLStats.objects.select_related('resource', 'resource__project',
        'lock', 'last_committer', 'resource__priority').for_user(request.user
            ).private().by_release_and_language(release, language)

    empty_rlstats = Resource.objects.select_related('project').filter(
        id__in=release.resources.all(), project__private=False).exclude(
        id__in=stats.values('resource'))

    empty_private_rlstats = Resource.objects.select_related('project'
        ).for_user(request.user).filter(id__in=release.resources.all(),
        project__private=True).exclude(id__in=private_stats.values('resource'))

    return render_to_response('projects/release_language_detail.html', {
        'project': project,
        'release': release,
        'language': language,
        'stats': stats,
        'empty_rlstats': empty_rlstats,
        'empty_private_rlstats': empty_private_rlstats,
        'private_stats': private_stats,
    }, context_instance=RequestContext(request))


@login_required
@one_perm_required_or_403(pr_release_delete,
    (Project, 'slug__exact', 'project_slug'))
def release_delete(request, project_slug, release_slug):
    release = get_object_or_404(Release, slug=release_slug,
                                project__slug=project_slug)
    if request.method == 'POST':
        import copy
        release_ = copy.copy(release)
        release.delete()
        messages.success(request,
                        _("The release '%s' was deleted.") % release.full_name)

        # ActionLog & Notification
        nt = 'project_release_deleted'
        context = {'release': release_,
                   'sender': request.user}
        action_logging(request.user, [release_.project], nt, context=context)
        if settings.ENABLE_NOTICES:
            txnotification.send_observation_notices_for(release_.project,
                                signal=nt, extra_context=context)

        return HttpResponseRedirect(reverse('project_detail',
                                     args=(project_slug,)))
    else:
        return HttpResponseRedirect(reverse('release_edit',
            args=(project_slug, release_slug)))


# Feeds
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def release_feed(request, project_slug, release_slug, slug=None, param='',
    feed_dict=None,):
    param = '%s/%s' % (project_slug, release_slug)
    if slug:
        url = "%s/%s" % (slug, param)
    else:
        url = param
    return feed(request, url, feed_dict)


@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def release_language_feed(request, project_slug, release_slug, language_code,
    slug=None, param='', feed_dict=None,):
    param = '%s/%s/%s' % (project_slug, release_slug, language_code)
    if slug:
        url = "%s/%s" % (slug, param)
    else:
        url = param
    return feed(request, url, feed_dict)
########NEW FILE########
__FILENAME__ = admin
# -*- coding: utf-8 -*-
from django.contrib import admin
from transifex.resources.models import *

class ResourceAdmin(admin.ModelAdmin):
    search_fields = ['slug', 'name', 'project__name', 'source_language__name', 'i18n_type']
    list_display = ['name', 'project', 'source_language', 'i18n_type']

class SourceEntityAdmin(admin.ModelAdmin):
    search_fields = ['string', 'string_hash', 'context', 'occurrences']
    list_display = ['string', 'context', 'resource', 'last_update']

class TranslationAdmin(admin.ModelAdmin):
    search_fields = ['string', 'string_hash', 'language__name',
        'source_entity__string']
    list_display = ['source_entity', 'string', 'language', 'last_update']
    list_display_links = ['string']

class TemplateAdmin(admin.ModelAdmin):
    search_fields = ['resource__name', 'resource__project__name',
        'resource__source_language__name']
    list_display = ['resource']


admin.site.register(Resource, ResourceAdmin)
admin.site.register(SourceEntity, SourceEntityAdmin)
admin.site.register(Translation, TranslationAdmin)
admin.site.register(Template, TemplateAdmin)

########NEW FILE########
__FILENAME__ = exceptions
# -*- coding: utf-8 -*-

"""
Exceptions related to the API operations.
"""

class BadRequestError(Exception):
    pass


class NoContentError(Exception):
    pass


class NotFoundError(Exception):
    pass

class ForbiddenError(Exception):
    pass

########NEW FILE########
__FILENAME__ = translation_object
# -*- coding: utf-8 -*-

"""
API for Translation objects.
"""

from __future__ import absolute_import
from django.db import transaction
from django.db.models import Q
from django.conf import settings
from django.contrib.auth.models import User
from piston.handler import BaseHandler
from piston.utils import rc, throttle, require_mime
from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.log import logger
from transifex.projects.permissions import *
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.projects.permissions.project import ProjectPermission
from transifex.resources.decorators import method_decorator
from transifex.resources.models import Resource, SourceEntity, Translation
from transifex.resources.formats.utils.hash_tag import hash_tag
from transifex.teams.models import Team
from transifex.resources.handlers import invalidate_stats_cache
from transifex.api.utils import BAD_REQUEST, FORBIDDEN_REQUEST,\
        NOT_FOUND_REQUEST
from .exceptions import BadRequestError, NoContentError, NotFoundError, \
        ForbiddenError


class BaseTranslationHandler(BaseHandler):

    allowed_methods = ('GET', 'PUT',)

    def _generate_dict_for_translation(self, trans_dict, translation,
            field_map, append, pluralized):
        """Generate or update a dictionary for a source_entity along
        with its translation(s).

        Args:
            trans_dict: A dictionary, may be empty or existing
            translation: A translation values dictionary
            field_map: A dictionary mapping the keys of dictionary
                       translation to the keys used in output JSON
            append: A Boolean, False if trans_dict exists already, else
                    False
            pluralized: A Boolean, True if source_entity is pluralized,
                    else False.

        Returns:
            A dictionary representing a source entity and its translations
            along with other aggregated attributes.
        """
        for key in field_map.keys():
            if pluralized and key == 'string':
                if append:
                    trans_dict[field_map[key]] = {translation['rule']:\
                            translation['string']}
                else:
                    trans_dict[field_map[key]][translation['rule']] =\
                            translation['string']
            elif pluralized and key == 'wordcount':
                if append:
                    trans_dict[field_map[key]] = translation['wordcount']
                else:
                    # Aggregated wordcount for pluralized translations
                    trans_dict[field_map[key]] += translation['wordcount']
            else:
                trans_dict[field_map[key]] = translation[key]
        return trans_dict

    def _update_result_if_single_translation(self, single, result):
        """
        Args:
            single: A boolean,
            result: A list of trans_dict(s)
        """
        # Generate translations dict for SingleTranslationHandler,
        # i.e, when single == True
        if single:
            if result:
                result = result[0]
            else:
                result = ""
        return result

    def _append_or_update_trans_dict(self, trans_dict, result, append,
            count, index):
        """
        Append or update trans_dict in *result* list.
        If append is True, append trans_dict to *result* and update count,
        else, update trans_dict already in *result* at position *index*.

        Args:
            trans_dict: A dictionary representing
                translation(s) belonging to a source entity.
            result: A list containing many trans_dict.
            append: A boolean, True if trans_dict is to be appended to
                result, else False
            count: An integer representing length of result
            index: An integer representing the position where a trans_dict
                has to be inserted in *result*
        Returns:
            An integer, representing the length of the length of the list
            *result*
        """
        if append:
            result.append(trans_dict)
            # increment count only if a trans_dict is appended to `result`
            count += 1
        else:
           result[index] = trans_dict
        return count

    def _generate_translations_dict(self, translations, field_map={},
                                    single=False):
        """
        Generate result to returned to the user for the related
        translations

        Args:
            translations: A list of translation values dictionaries
            field_map: A dictionary mapping the keys of dictionary
                       translation to the keys used in output JSON
            single: A boolean, True if it's for SingleTranslationHandler
        Returns:
            A dictionary
        """
        result = []
        # Dictionary `buf` maps `source_entity.id` to its index in array
        # `result`.
        buf = {}
        # count stores the index of a source_entity in the array 'result'
        count = 0
        for translation in translations:
            append = True
            pluralized = False

            # An dictionary representing translation(s) belonging to a source
            # entity along with other aggregated attributes
            trans_dict = dict()
            index = -1
            if translation.get('source_entity__pluralized'):
                if buf.get(translation.get('source_entity__id')) != None:
                    index = buf.get(translation.get('source_entity__id'))
                    trans_dict = result[index]
                    append = False
                else:
                    buf[translation.get('source_entity__id')] = count
                pluralized = True

            # Create/update a dictionary for a source entity
            trans_dict = self._generate_dict_for_translation(trans_dict,
                    translation, field_map, append, pluralized)
            count = self._append_or_update_trans_dict(trans_dict, result,
                    append, count, index)
        return self._update_result_if_single_translation(single, result)

    def _get_fieldmap(self, details=False):
        """
        Get fieldmap for Translation model.

        What is a fieldmap?
        A dictionary that maps django model attributes for Translation
        to humanized *keys* to be used in output JSON.

        Args:
            details: A Boolean, True if request contains `details`
                    as a GET parameter.

        Returns:
            A dictionary
        """
        field_map = {
                'source_entity__string': 'key',
                'source_entity__context': 'context',
                'string': 'translation',
                'reviewed': 'reviewed',
                'source_entity__pluralized': 'pluralized'
        }

        if details:
            field_map.update({
                'wordcount': 'wordcount',
                'last_update': 'last_update',
                'user__username': 'user',
                'source_entity__position': 'position',
                'source_entity__occurrences': 'occurrences',
            })
        return field_map

    def _get_fields_for_translation_value_query_set(self, field_map):
        """
        Get fields  which needs to be included in the ValueQuerySet
        for a Translation QuerySet.

        Args:
            field_map: A dictionary that maps django
            model attributes for Translation to humanized *keys*
            to be used in output JSON.
        Returns:
            A list containing the fields that need to be in a ValueQuerySet
            for Translation.
        """
        fields = ['source_entity__id', 'rule']
        fields.extend(field_map.keys())
        return fields

    def _get_translation_query_filters(self, request, resource,
            language):
        """
        Get filters for querying Translation
        Args:
            request: An HTTP request object
            resource: A Resource object
            language: A language object
        Returns:
            A dictionary
        """

        filters = {
                'resource': resource,
                'language': language,
        }

        if request.GET.get('key'):
            filters.update({'source_entity__string__icontains': \
                    request.GET.get('key')})

        if request.GET.get('context'):
            filters.update({'source_entity__context__icontains':\
                    request.GET.get('context')})

        return filters

    def _requested_objects(self, project_slug,
            resource_slug, language_code):
        """
        Get objects from request parameters if the related objects
        exist. In case an object does not exist, then raise an error.
        If all objects are found, return a tuple of the objects.

        Args:
            project_slug: A project slug
            resource_slug: A resource slug
            language_code: A language code
        Returns:
            If objects for all parameters are found, then return
            a tuple, (project, resource, language)
            else raise an error
        """
        try:
            resource = Resource.objects.get(slug=resource_slug,
                    project__slug=project_slug)
            project = resource.project
            language = Language.objects.by_code_or_alias(language_code)
        except Project.DoesNotExist, e:
            raise NotFoundError("Project with slug '%s' does not exist" % \
                    project_slug)
        except Resource.DoesNotExist, e:
            raise NotFoundError("Resource '%s.%s' does not exist" % \
                    (project_slug, resource_slug))
        except Language.DoesNotExist, e:
            raise NotFoundError("Language with code '%s' does not exist." %\
                    language_code)
        return (project, resource, language)

    def _validate_language_is_not_source_language(self, source_language,
            language):
        """
        Validate if source language is not target language.

        Args:
            source_language: A Language instance for source language
            language: A Language instance for target language
        Returns:
            if language == source language, raise ForbiddenError
            else, return True
        """
        if language == source_language:
            raise ForbiddenError("Forbidden to update translations "\
                    "in source language.")
        return True

    def _validate_translations_json_data(self, translations):
        """
        Validate if translations exist and are inside a list.
        Else, raise an error.
        """
        if not translations:
            raise NoContentError("Translations not found!")
        if not isinstance(translations, list):
            raise BadRequestError("Translations are not in a list!")
        return True

    def _translations_as_dict(self, translations, resource, language):
        """
        Get a dictionary where source_entity id is mapped to
        translations.

        Args:
            translations: A dictionary containing translation data
                          from request.data
            resource: A Resource instance
            language: A Language object

        Returns:
            A dictionary
        """
        query = Q()
        for translation in translations:
            if translation.has_key('source_entity_hash'):
                query |= Q(source_entity__string_hash=translation[
                    'source_entity_hash'])

        query &= Q(resource=resource, language=language)

        trans_obj_dict = {}
        for t in Translation.objects.filter(query).select_related(
                'source_entity', 'user').iterator():
            se = t.source_entity
            if trans_obj_dict.get(se.string_hash):
                trans_obj_dict.get(se.string_hash).append(t)
            else:
                trans_obj_dict[se.string_hash] = [t]

        return trans_obj_dict

    def _user_has_update_perms(self, translation_objs=None,
            translation_reviewed=False,  can_submit_translations=False,
            accept_translations=False, is_maintainer=False, can_review=False,):
        """
        Check if user has necessary permissions.
        Args:
            translation_objs: A dictionary mapping source_entity.string_has
                to translations
            translation_reviewed: A boolean, True if translation is reviewed
                in request JSON
            can_submit_translations: A boolean
            accept_translations: A boolean
            is_maintainer: A boolean
            can_review: A boolean
        Returns:
            A boolean
        """
        if (not can_submit_translations or\
            not accept_translations) and not\
                is_maintainer:
            return False
        if not translation_objs:
            return False
        reviewed = translation_objs[0].reviewed
        if (reviewed or translation_reviewed != reviewed) and\
                not can_review:
            return False
        return True

    def _collect_updated_translations(self, translation, trans_obj_dict,
            checksum, updated_translations, user, pluralized):
        """
        Collect only updated translations
        Args:
            translation: A dictionary representing a translation(s) in
                         request JSON
            trans_obj_dict: A dictionary mapping source_entity id to
                           translations
            checksum: An md5 checksum for a key and context
            updated_translations: A list of updated translations
            user: A User object
            pluaralized: A boolean
        """
        translations = []
        updated = False
        for t in trans_obj_dict.get(checksum):
            if translation.has_key('reviewed'):
                reviewed = translation.get('reviewed')
                if t.reviewed != reviewed:
                    updated = True
                    t.reviewed = reviewed
            if pluralized:
                new_translation = translation['translation'].get(str(t.rule))
            else:
                new_translation = translation['translation']
            if new_translation and t.string != new_translation:
                updated = True
                t.string = new_translation
                # Update author info for a translation only when the
                # translation strings is updated
                t.user = user
            translations.append(t)
            if updated:
                updated_translations.extend(translations)

    def _is_pluralized(self, translation, nplurals):
        """
        Check if a translation is pluralized with correct plural
        forms.

        Args:
            translation: A dictionary representing a translation(s) in
                         request JSON
            nplurals: A list containing plural rule numbers for a language
        Returns:
            A boolean, True if translation(s) are pluralized with correct
            plural forms, else False.
            In case of bad plural forms, it raises an error.
        """
        is_pluralized = False
        error = False
        if isinstance(translation.get('translation'), dict):
            plural_forms = translation.get('translation').keys()
            for rule in plural_forms:
                if not translation.get('translation').get(rule).strip():
                    plural_forms.pop(rule)
            plural_forms = [int(r) for r in plural_forms]
            plural_forms.sort()
            if plural_forms == nplurals:
                is_pluralized = True
            else:
                error = True
        if error:
            raise BadRequestError("Bad plural forms for "
                    "key: '%(se)s' and context: '%(context)s'." % {
                    'se': translation.get('key'),
                    'context': translation.get('context')})
        return is_pluralized

    @transaction.commit_on_success
    def _update_translations(self, updated_translations):
        """Bulk update translations
        Args:
            updated_translations: A list of updated Translation objects
        """
        Translation.objects.bulk_update(updated_translations)

    def _get_update_fieldmap_and_fields(self, keys):
        """Get fieldmap and fields for a PUT request.
        Args:
            keys: A list of dictionary keys for request.data
        Returns:
            A tuple, (dictionary, list)
        """
        field_map = {
                'source_entity__string': 'key',
                'source_entity__context': 'context',
                'string': 'translation',
                'reviewed': 'reviewed',
                'source_entity__pluralized': 'pluralized',
                'wordcount': 'wordcount',
                'last_update': 'last_update',
                'user__username': 'user',
                'source_entity__position': 'position',
                'source_entity__occurrences': 'occurrences',
        }

        fields = []
        field_map_ = {}
        for f in field_map.viewitems():
            if f[1] in keys:
                fields.append(f[0])
                field_map_[f[0]] = f[1]

        if 'source_entity__pluralized' not in fields:
            fields.append('source_entity__pluralized')
        if 'rule' not in fields:
            fields.append('rule')

        return (field_map_, fields)

    def _get_user_to_update_translation(self, project, check,
            request_user, author_name, is_maintainer=False):
        """
        Get user who will update a translation.

        Args:
            project: A Project instance
            check: A ProjectPermission instance for request_user
            request_user: A User instance, request.user
            author_name: A string, username for translation author
            is_maintainer: A boolean, True if user is a maintainer
                of the project

        Returns:
            A User instance
        """
        if is_maintainer or check.maintain(project):
            user = author_name and User.objects.get(username=author_name
                    ) or request_user
        else:
            user = request_user
        return user

    def _get_user_perms(self, user, project, resource, language,
            team, checksum, is_maintainer):
        """
        Get permissions for a user.

        Args:
            user: A User instance
            project: A Project instance
            resource: A Resource instance
            language: A Language instance
            team: A Team instance
            checksum: An md5 checksum representing a source entity
            is_maintiner: A boolean
        Returns:
            A dictionary containing various user permissions
        """
        check = ProjectPermission(user)
        can_review = check.proofread(project, language)
        can_submit_translations = check.submit_translations(
                team or resource.project)
        accept_translations = resource.accept_translations

        return {
            'can_review': can_review,
            'can_submit_translations': can_submit_translations,
            'accept_translations': accept_translations,
            'is_maintainer': check.maintain(project),
        }

    def _process_translation_dict(self, translation, project, resource,
            language, team, check, is_maintainer, request_user, se_ids,
            updated_translations, trans_obj_dict):
        """
        Process a translation dictionary in the JSON request and update
        se_ids and updated_translations lists.

        Args:
            translation: A dictionary representing a translation(group)
                in requested JSON
            project: A Project instance
            resource: A Resource instance
            language: A Language instance
            team: A Team instance
            check: A ProjectPermission instance for user
            request_user: A User instance issuing this request
            se_ids: A list containing all the SourceEntity ids whose
                translations have been updated.
            updated_translations: A list containing updated Translation
                instances.
            trans_obj_dict: A dictionary mapping source_entity.string_hash
                to a list of Translation objects.
        """
        if translation.has_key('source_entity_hash'):
            checksum = translation['source_entity_hash']
        else:
            return
        translation_objs = trans_obj_dict.get(checksum)
        se = translation_objs[0].source_entity
        se_id = se.id
        nplurals = language.get_pluralrules_numbers()
        user = self._get_user_to_update_translation(project,
                check, request_user, translation.get('user'),
                is_maintainer)
        # Get user permissions for the project
        user_perms = self._get_user_perms(user, project, resource,
                language, team, checksum, is_maintainer)
        # Check if user is allowed to updated the translation. This also takes
        # into account if a user is allowed to review a translation or modify
        # a reviewed translation.
        if not self._user_has_update_perms(translation_objs=translation_objs,
                translation_reviewed=translation.get('reviewed'),
                **user_perms):
            raise ForbiddenError("User '%(user)s' is not allowed to "
                    "update translation for '%(se)s' in language "
                    "'%(lang_code)s'." % {'user': user, 'se': se,
                    'lang_code': language.code})
        # Validate if a translation group is properly pluralized or
        # not. In case of improper plural forms, it raises an error.
        # Else, it returns True if translation group is pluralized,
        # otherwise False.
        pluralized = self._is_pluralized(translation, nplurals)
        self._collect_updated_translations(
                translation, trans_obj_dict, checksum,
                updated_translations, user, pluralized)
        se_ids.append(se_id)


class SingleTranslationHandler(BaseTranslationHandler):
    """Read and update a single translation"""

    def _get_fieldmap(self):
        """
        Returns a field_map

        A field_map is used to map the selected field names of Translation
        model with the field names used in the JSON representation of the
        translations.
        """
        field_map = {
                'source_entity__string': 'key',
                'source_entity__context': 'context',
                'string': 'translation',
                'reviewed': 'reviewed',
                'source_entity__pluralized': 'pluralized',
                'wordcount': 'wordcount',
                'last_update': 'last_update',
                'user__username': 'user',
                'source_entity__position': 'position',
                'source_entity__occurrences': 'occurrences',
        }
        return field_map

    @throttle(settings.API_MAX_REQUESTS, settings.API_THROTTLE_INTERVAL)
    @method_decorator(one_perm_required_or_403(
            pr_project_private_perm,
            (Project, 'slug__exact', 'project_slug')
    ))
    def read(self, request, project_slug, resource_slug,
            language_code, source_hash, api_version=2):
        """
        Read translations for a single source entity of a resource
        along with aggregated detailed info about the translations.
        """
        try:
            project, resource, language = self._requested_objects(
                    project_slug, resource_slug, language_code
            )
        except NotFoundError, e:
            return NOT_FOUND_REQUEST(unicode(e))

        translations = Translation.objects.filter(
            resource=resource, source_entity__string_hash=source_hash,
            language=language
        )
        if not translations:
            return rc.NOT_FOUND

        field_map = self._get_fieldmap()
        fields = self._get_fields_for_translation_value_query_set(field_map)
        return self._generate_translations_dict(
            translations.values(*fields), field_map, True
        )

    @require_mime('json')
    @throttle(settings.API_MAX_REQUESTS, settings.API_THROTTLE_INTERVAL)
    @method_decorator(one_perm_required_or_403(
            pr_project_private_perm,
            (Project, 'slug__exact', 'project_slug')
    ))
    def update(self, request, project_slug, resource_slug,
            language_code, source_hash, api_version=2):
        """
        Update existing translations for a source entity of a resource.
        """
        try:
            project, resource, language = \
                    self._requested_objects(project_slug,
                    resource_slug, language_code)
            # A translation in source language cannot be updated
            self._validate_language_is_not_source_language(
                    project.source_language, language)
            try:
                source_entity = SourceEntity.objects.get(
                        string_hash=source_hash, resource=resource)
            except SourceEntity.DoesNotExist, e:
                return rc.NOT_FOUND
            team = Team.objects.get_or_none(project, language.code)
            data = request.data
            # This is a hack to use the methods from TranslationObjectsHandler
            data['source_entity_hash'] = source_hash
            check = ProjectPermission(request.user)
            is_maintainer = check.maintain(project)
            # Allow only project members to issue this update request
            if not is_maintainer and  not (check.submit_translations(
                team or project) or check.proofread(project, language)):
                return FORBIDDEN_REQUEST(
                        "You are not allowed to update translations.")
            trans_obj_dict = self._translations_as_dict(
                    [data], resource, language)
            if not trans_obj_dict:
                return rc.NOT_FOUND
            updated_translations = []
            se_ids = []
            # All permission checks for a user is done here and
            # updated translations are collected in updated_tranlsations
            # and source_entity.id in se_ids
            self._process_translation_dict(data, project, resource,
                    language, team, check, is_maintainer, request.user,
                    se_ids, updated_translations, trans_obj_dict)
            # Updated translations are saved to db
            self._update_translations(updated_translations)

            translations = Translation.objects.filter(
                    source_entity=source_entity, language=language)
            field_map = self._get_fieldmap()
            fields = self._get_fields_for_translation_value_query_set(field_map)
            return self._generate_translations_dict(
                    Translation.objects.filter( source_entity__id__in=se_ids,
                        language=language).values(*fields), field_map, True)
        except NotFoundError, e:
            return NOT_FOUND_REQUEST(unicode(e))
        except NoContentError, e:
            return BAD_REQUEST(unicode(e))
        except ForbiddenError, e:
            return FORBIDDEN_REQUEST(unicode(e))
        except BadRequestError, e:
            return BAD_REQUEST(unicode(e))


class TranslationObjectsHandler(BaseTranslationHandler):
    """
    Read and update a set of translations in a language for a resource.
    """

    @throttle(settings.API_MAX_REQUESTS, settings.API_THROTTLE_INTERVAL)
    @method_decorator(one_perm_required_or_403(
            pr_project_private_perm,
            (Project, 'slug__exact', 'project_slug')
    ))
    def read(self, request, project_slug, resource_slug,
            language_code, api_version=2):
        """
        Read existing translations for multiple source entities
        of a resource. It also allows to filter source entities
        by key and/or context and takes a 'details' GET parameter
        to show detailed info about the translations.
        """
        try:
            project, resource, language = self._requested_objects(
                    project_slug, resource_slug, language_code
            )
        except NotFoundError, e:
            return NOT_FOUND_REQUEST(unicode(e))

        field_map =  self._get_fieldmap(request.GET.has_key('details'))
        fields = self._get_fields_for_translation_value_query_set(field_map)
        filters = self._get_translation_query_filters(
            request, resource, language
        )
        translations = Translation.objects.filter(**filters).values(*fields)
        return self._generate_translations_dict(translations, field_map)

    @require_mime('json')
    @throttle(settings.API_MAX_REQUESTS, settings.API_THROTTLE_INTERVAL)
    @method_decorator(one_perm_required_or_403(
            pr_project_private_perm,
            (Project, 'slug__exact', 'project_slug')
    ))
    def update(self, request, project_slug, resource_slug,
            language_code, api_version=2):
        """
        Update existing translations for multiple source entities
        of a resource at one go by permitted user(s).
        """
        try:
            project, resource, language = \
                    self._requested_objects(
                    project_slug, resource_slug, language_code)
            self._validate_language_is_not_source_language(
                    project.source_language, language)
            translations = request.data
            self._validate_translations_json_data(translations)
            team = Team.objects.get_or_none(project, language.code)

            check = ProjectPermission(request.user)
            # User must be a member of the project
            is_maintainer = check.maintain(project)
            # Allow only project members to issue this update request
            if not is_maintainer and  not (check.submit_translations(
                team or project) or check.proofread(project, language)):
                return FORBIDDEN_REQUEST(
                        "You are not allowed to update translations.")

            trans_obj_dict = self._translations_as_dict(
                    translations, resource, language)

            updated_translations = []
            se_ids = []
            for translation in translations:
                # All permission checks for a user is done here and
                # updated translations are collected in updated_tranlsations
                # and source_entity.id in se_ids
                self._process_translation_dict(translation, project, resource,
                        language, team, check, is_maintainer, request.user,
                        se_ids, updated_translations, trans_obj_dict)

            self._update_translations(updated_translations)

            keys = ['key', 'context', 'translation',
                    'reviewed', 'pluralized', 'wordcount',
                    'last_update', 'user', 'position', 'occurrences',]
            field_map, fields = self._get_update_fieldmap_and_fields(keys)

            return self._generate_translations_dict(
                    Translation.objects.filter( source_entity__id__in=se_ids,
                        language=language).values(*fields), field_map)
        except NotFoundError, e:
            return NOT_FOUND_REQUEST(unicode(e))
        except NoContentError, e:
            return BAD_REQUEST(unicode(e))
        except ForbiddenError, e:
            return FORBIDDEN_REQUEST(unicode(e))
        except BadRequestError, e:
            return BAD_REQUEST(unicode(e))
        except User.DoesNotExist, e:
            return BAD_REQUEST(unicode(e))

########NEW FILE########
__FILENAME__ = backends
# -*- coding: utf-8 -*-

"""
Various backend commands for resource models.

These are used by views and the API.
"""

from itertools import ifilter
from django.utils.translation import ugettext as _
from django.db import IntegrityError, DatabaseError
from transifex.txcommon.log import logger
from transifex.resources.models import Resource
from transifex.resources.formats.exceptions import FormatError
from transifex.resources.formats.registry import registry
from transifex.resources.formats.compilation import Mode
from transifex.resources.formats.utils.decorators import need_language


class BackendError(Exception):
    pass


class ResourceBackendError(BackendError):
    pass


class FormatsBackendError(BackendError):
    pass


class ResourceBackend(object):
    """Backend for resources.

    This class handles creating new resources.
    """

    def create(self, project, slug, name, method, source_language,
               content, user=None, extra_data={}):
        """Create a new resource.

        Any extra arguments will be passed to the Resource initialization
        method as is.

        There is no transaction used. The caller is supposed to handle this.

        Args:
            project: A Project instance which the resource will belong to.
            slug: The slug of the resource.
            name: The name of the resource.
            method: The i18n method of theresource.
            source_language: A Language instance of the source language set.
            content: The content of the resource's source file.
            user: The user that creates the resource.
            extra_data: Any extra info for the Resource constructor.
        Returns:
            A two-elements tuple. The first element is the number of added
            strings and the second the number of updated strings.
        """
        # save resource
        try:
            r = Resource(
                project=project, source_language=source_language,
                slug=slug, name=name
            )
            r.i18n_method = method
            r.full_clean()
            for key in ifilter(lambda k: k != "content", extra_data.iterkeys()):
                setattr(r, key, extra_data[key])
        except Exception, e:
            logger.warning(
                "Error while creating resource %s for project %s: %s" % (
                    slug, project.slug, e
                ), exc_info=True
            )
            raise ResourceBackendError("Invalid arguments given: %s" % e)
        try:
            r.save()
        except IntegrityError, e:
            logger.warning("Error creating resource %s: %s" % (r, e))
            raise ResourceBackendError("Error saving resource: %s" % e)
        except DatabaseError, e:
            msg = _("Error creating resource: %s")
            logger.warning(msg % e)
            raise ResourceBackendError(msg % e)
        # save source entities
        try:
            fb = FormatsBackend(r, source_language, user)
        except AttributeError, e:
            raise ResourceBackendError(_(
                "The content type of the request is not valid."
            ))
        try:
            return fb.import_source(
                content, filename=extra_data.get('filename')
            )
        except FormatsBackendError, e:
            raise ResourceBackendError(unicode(e))
        except Exception, e:
            logger.error(
                "Unexamined exception raised: %s" % e, exc_info=True
            )
            raise ResourceBackendError(unicode(e))


class FormatsBackend(object):
    """Backend for formats operations."""

    def __init__(self, resource, language, user=None):
        """Initializer.

        Args:
            resource: The resource the translations will belong to.
            language: The language of the translation.
        """
        self.resource = resource
        self.language = language
        self.user = user

    def import_source(self, content, filename=None):
        """Parse some content which is of a particular i18n type and save
        it to the database.

        Args:
            content: The content to parse.
            filename: The filename of the uploaded content (if any).
        Returns:
            A two-element tuple (pair). The first element is the number of
            strings added and the second one is the number of those updated.
        """
        if self.language is None:
            msg = _("No language specified, when importing source file.")
            logger.error(msg)
            raise FormatsBackendError(msg)
        handler = self._get_handler(
            self.resource, self.language, filename=filename
        )
        if handler is None:
            msg = "Files of type %s are not supported."
            logger.error(msg % self.resource.i18n_method)
            raise FormatsBackendError(msg % self.resource.i18n_method)
        return self._import_content(handler, content, True)

    @need_language
    def import_translation(self, content):
        """Parse a translation file for a resource.

        Args:
            content: The content to parse.
        Returns:
            A two element tuple(pair). The first element is the number of
            strings added and the second one is the number of those upadted.
        """
        handler = self._get_handler(self.resource, self.language)
        if handler is None:
            msg = "Files of type %s are not supported."
            logger.error(msg % self.resource.i18n_method)
            raise FormatsBackendError(msg % self.resource.i18n_method)
        return self._import_content(handler, content, False)

    def _get_handler(self, resource, language, filename=None):
        """Get the appropriate hanlder for the resource."""
        return registry.appropriate_handler(
            resource, language, filename=filename
        )

    def _import_content(self, handler, content, is_source):
        """Import content to the database.

        Args:
            content: The content to save.
            is_source: A flag to indicate a source or a translation file.
        Returns:
            A two element tuple(pair). The first element is the number of
            strings added and the second one is the number of those upadted.
        """
        try:
            handler.bind_resource(self.resource)
            handler.set_language(self.language)
            handler.bind_content(content)
            handler.parse_file(is_source=is_source)
            return handler.save2db(is_source=is_source, user=self.user)
        except FormatError, e:
            raise FormatsBackendError(unicode(e))

    def compile_translation(self, pseudo_type=None, mode=None):
        """Compile the translation for a resource in a specified language.

        There is some extra care for PO/POT resources. If there is no
        language specified, return a POT file, otherwise a PO.

        The argument ``mode`` allows for different handling of a
        translation, depending on whether it is for *viewing* or *translating
        it. This is necessary for formats that do not fallback to the source
        language in case of empty translations.

        Args:
            pseudo_type: The pseudo_type (if any).
            mode: The mode for compiling this translation.
        Returns:
            The compiled template.
        """
        if mode is None:
            mode = Mode.DEFAULT
        handler = registry.appropriate_handler(
            resource=self.resource, language=self.language
        )
        handler.bind_resource(self.resource)
        handler.set_language(self.language)
        content = handler.compile(pseudo=pseudo_type, mode=mode)
        return content if isinstance(content, basestring) else ''


def content_from_uploaded_file(files, encoding='UTF-8'):
    """Get the content of an uploaded file.

    We only return the content of the first file.

    Args:
        files: A dictionary with file objects. Probably, request.FILES.
        encoding: The encoding of the file.
    Returns:
        The content of the file as a unicode string.
    """
    files = files.values()
    if not files:
        return ''
    return files[0].read()


def filename_of_uploaded_file(files):
    """Get the filename of he uploaded file."""
    files = files.values()
    if not files:
        return None
    return files[0].name

########NEW FILE########
__FILENAME__ = decorators
"""Resources decorators"""
try:
    from functools import wraps, update_wrapper
except ImportError:
    from django.utils.functional import wraps, update_wrapper # for Python 2.4

"""
The following code is included in Django-1.2 (django/utils/decorators.py)

It is used here to allow reusability of permission checking decorators inside
the API.
"""
def method_decorator(decorator):
    """
    Converts a function decorator into a method decorator
    """
    def _dec(func):
        def _wrapper(self, *args, **kwargs):
            def bound_func(*args2, **kwargs2):
                return func(self, *args2, **kwargs2)
            # bound_func has the signature that 'decorator' expects i.e.  no
            # 'self' argument, but it is a closure over self so it can call
            # 'func' correctly.
            return decorator(bound_func)(*args, **kwargs)
        return wraps(func)(_wrapper)
    update_wrapper(_dec, decorator)
    # Change the name to aid debugging.
    _dec.__name__ = 'method_decorator(%s)' % decorator.__name__
    return _dec


########NEW FILE########
__FILENAME__ = builders
# -*- coding: utf-8 -*-

"""
Classes to build the set of translations to use for compilation.

These builders are responsible to fetch all translations to be
used, when compiling a template.
"""

import itertools
import collections
from django.db.models import Count
from transifex.resources.models import SourceEntity, Translation


class TranslationsBuilder(object):
    """Builder to fetch the set of translations to use."""

    single_fields = ['source_entity_id', 'string']
    plural_fields = ['source_entity_id', 'string', 'rule']

    def __init__(self, resource, language):
        """Set the resource and language for the translation."""
        self.resource = resource
        self.language = language
        self.pluralized = False

    def __call__(self):
        """Get the translation strings for the resource.

        The returned translations are for the specified language.

        Returns:
            A dictionary with the translated strings. The keys are the id of
            the source entity this translation corresponds to and values are
            the translated strings.
        """
        # TODO Should return plurals
        raise NotImplementedError

    def _get_source_strings(self, ids):
        """Get a list of the source strings of the resource.

        Args:
            The ids to fetch source strings for.
        """
        return Translation.objects.filter(
            source_entity__in=ids, language=self.resource.source_language
        ).values_list(*self._fields).order_by()

    def _single_output(self, iterable):
        """Output of builder for non-pluralized formats."""
        return dict(iterable)

    def _plurals_output(self, iterable):
        """Output of builder for pluralized formats."""
        res = collections.defaultdict(dict)
        for t in iterable:
            res[t[0]][t[2]] = t[1]
        return res

    def _set_pluralized(self, p):
        """Choose between pluralized and non-pluralized version."""
        if p:
            self._output = self._plurals_output
            self._fields = self.plural_fields
        else:
            self._output = self._single_output
            self._fields = self.single_fields
    pluralized = property(fset=_set_pluralized)


class AllTranslationsBuilder(TranslationsBuilder):
    """Builder to fetch all translations."""

    def __call__(self):
        """Get the translation strings that match the specified
        source_entities.
        """
        translations = Translation.objects.filter(
            resource=self.resource, language=self.language
        ).values_list(*self._fields).order_by().iterator()
        return self._output(translations)


class EmptyTranslationsBuilder(TranslationsBuilder):
    """Builder to fetch no translations."""

    def __init__(self, *args, **kwargs):
        super(EmptyTranslationsBuilder, self).__init__(None, None)

    def __call__(self):
        """Return an empty dictionary."""
        return self._output('')


class ReviewedTranslationsBuilder(TranslationsBuilder):
    """Builder to fetch only reviewed strings."""

    def __call__(self):
        """Get the translation strings that match the specified source_entities
        and have been reviewed.
        """
        translations = Translation.objects.filter(
            reviewed=True, resource=self.resource, language=self.language
        ).values_list(*self._fields).order_by().iterator()
        return self._output(translations)


class SourceTranslationsBuilder(TranslationsBuilder):
    """Builder to use source strings in case of missing strings."""

    def __call__(self):
        """Get the translation strings that match the specified
        source entities. Use the source strings for the missing
        ones.
        """
        translations = Translation.objects.filter(
            resource=self.resource, language=self.language
        ).values_list(*self._fields).order_by()
        source_entities = set(SourceEntity.objects.filter(
                resource=self.resource
        ).values_list('id', flat=True).order_by())
        missing_ids = source_entities - set(map(lambda x: x[0], translations))
        if not missing_ids:
            iterable = translations
        else:
            source_strings = self._get_source_strings(missing_ids)
            iterable = itertools.chain(translations, source_strings)
        return self._output(iterable)


class ReviewedSourceTranslationsBuilder(TranslationsBuilder):
    """Builder to fetch only reviewed translations and fill the others
    with the source strings.
    """

    def __call__(self):
        """Get the translation strings that match the specified
        source entities. Use the source strings for the missing
        ones.
        """
        translations = Translation.objects.filter(
            reviewed=True, resource=self.resource, language=self.language
        ).values_list(*self._fields).order_by()
        source_entities = set(SourceEntity.objects.filter(
                resource=self.resource
        ).values_list('id', flat=True).order_by())
        missing_ids = source_entities - set(map(lambda x: x[0], translations))
        if not missing_ids:
            iterable = translations
        else:
            source_strings = self._get_source_strings(missing_ids)
            iterable = itertools.chain(translations, source_strings)
        return self._output(iterable)


class _MarkSourceMixin(object):
    """Mixin to provide a method to return source strings marked."""

    def _get_source_strings(self, ids):
        """Mark the source strings with a _txss before returning them."""
        strings = super(_MarkSourceMixin, self)._get_source_strings(ids)
        res = []
        for s in strings:
            res.append(list(s))
            res[-1][1] = s[1] + '_txss'
        return res


class MarkedSourceTranslationsBuilder(_MarkSourceMixin,
                                      SourceTranslationsBuilder):
    """Mark the source strings, so that the compiler knows how to
    handle those.
    """


class ReviewedMarkedSourceTranslationsBuilder(
    _MarkSourceMixin, ReviewedSourceTranslationsBuilder
):
    """Mark the source strings, so that the compiler knows how to
    handle those.
    """

########NEW FILE########
__FILENAME__ = compilers
# -*- coding: utf-8 -*-

"""
Compiler classes.

Classes that handle compiling a template.
"""

from __future__ import absolute_import
import re
from transifex.resources.models import SourceEntity
from ..exceptions import UninitializedCompilerError
from ..utils.hash_tag import hash_regex, pluralized_hash_regex


class Compiler(object):
    """Class to compile translation files.

    There is a set of translation strings obtained from
    the database, while the template is given by the caller.

    We use extra builders for the steps of fetching the set of
    translations (``translations``) for the language and for the
    type of translation we want (``tdecorator). This allows for
    full customization of those steps. See
    http://en.wikipedia.org/wiki/Builder_pattern.
    """

    def __init__(self, resource, **kwargs):
        """Set the variables of the object.

        The object is not fully initialized, unless the two
        builders have been set.

        Allows subclasses to add extra keyword arguments.

        Args:
            resource: The resource which the compilation is for.
        """
        self.resource = resource
        for arg, value in kwargs.items():
            setattr(self, arg, value)
        self._initialized = False
        self._translations = None
        self._tdecorator = None

    def _set_tset(self, t):
        self._tset = t
    translation_set = property(fset=_set_tset)

    def _set_tdecorator(self, a):
        self._tdecorator = a
    translation_decorator = property(fset=_set_tdecorator)

    def compile(self, template, language):
        """Compile the template using the database strings.

        The result is the content of the translation file.

        There are three hooks a subclass can call:
          _pre_compile: This is called first, before anything takes place.
          _examine_content: This is called, to have a look at the content/make
              any adjustments before it is used.
          _post_compile: Called at the end of the process.

        Args:
            template: The template to compile. It must be a unicode string.
            language: The language of the translation.
        Returns:
            The compiled template as a unicode string.
        """
        self.language = language
        if self._tset is None or self._tdecorator is None:
            msg = "One of the builders has not been set."
            raise UninitializedCompilerError(msg)
        self._pre_compile(template)
        content = self._examine_content(template)
        self._compile(content)
        self._post_compile()
        del self.language
        return self.compiled_template

    def _apply_translations(self, translations, text):
        """Apply the translations to the text.

        Args:
            translations: A list of translations to use.
            text: The text to apply the translations.
        Returns:
            The text with the translations applied.
        """
        regex = hash_regex()
        return regex.sub(
            lambda m: translations.get(m.group(0), m.group(0)), text
        )

    def _compile(self, content):
        """Internal compile function.

        Subclasses must override this method, if they need to change
        the compile behavior.

        Args:
            content: The content (template) of the resource.
        """
        stringset = self._get_source_strings()
        existing_translations = self._tset()
        replace_translations = {}
        suffix = '_tr'
        for string in stringset:
            trans = self._visit_translation(
                self._tdecorator(existing_translations.get(string[0], u""))
            )
            replace_translations[string[1] + suffix] = trans
        content = self._apply_translations(replace_translations, content)
        self.compiled_template = content

    def _examine_content(self, content):
        """Peek into the template before any string is compiled."""
        return content

    def _get_source_strings(self):
        """Return the source strings of the resource."""
        return SourceEntity.objects.filter(
            resource=self.resource
        ).values_list(
            'id', 'string_hash', 'pluralized'
        ).order_by()

    def _visit_translation(self, s):
        """Have a chance to handle translation strings."""
        return s

    def _post_compile(self, content=None):
        """Do any work after the compilation process."""
        pass

    def _pre_compile(self, content=None):
        """Do any work before compiling the translation."""
        pass


class PluralCompiler(Compiler):
    """Compiler that handles plurals, too."""

    def _apply_translations(self, translations, text):
        """Apply the translations to the text.

        Args:
            translations: A list of translations to use.
            text: The text to apply the translations.
        Returns:
            The text with the translations applied.
        """
        regex = pluralized_hash_regex()
        return regex.sub(
            lambda m: translations.get(m.group(0), m.group(0)), text
        )

    def _compile(self, content):
        """Internal compile function.

        Subclasses must override this method, if they need to change
        the compile behavior.

        Args:
            content: The content (template) of the resource.
        """
        stringset = self._get_source_strings()
        existing_translations = self._tset()
        replace_translations = {}
        suffix = '_tr'
        plural_forms = self.language.get_pluralrules_numbers()
        for string in stringset:
            forms = existing_translations.get(string[0], {})
            if string[2]:       # is plural
                for index, form in enumerate(plural_forms):
                    trans = self._visit_translation(
                        self._tdecorator(forms.get(form, u""))
                    )
                    hash_key = string[1] + '_pl_' + str(index)
                    replace_translations[hash_key] = trans
            else:
                trans = self._visit_translation(
                    self._tdecorator(forms.get(5, u""))
                )
                replace_translations[string[1] + suffix] = trans
        content = self._update_plural_hashes(replace_translations, content)
        content = self._apply_translations(replace_translations, content)
        self.compiled_template = content

    def _pre_compile(self, content=None):
        """Set the translations builder to pluralized mode."""
        self._tset.pluralized = True

    def _update_plural_hashes(self, translations, content):
        """Create the necessary plural hashes to replace them later.

        Args:
            translations: A dictionary with the translations and the rules.
            content: The content to use.
        Returns:
            The content with all necessary plural hashes.
        """
        raise NotImplementedError

########NEW FILE########
__FILENAME__ = decorators
# -*- coding: utf-8 -*-

"""
Functors to decorate translations.

These functors are called whenever a translation is requested, when
compiling a template of a resource. An instance of a decorator is
passed to the compiler instance and the compiler will call it, whenever
it needs to use a translation string.

This allows us to escape the translations or create pseudo-translations.
"""


class DecoratorBuilder(object):
    """Builder for decorating the translation.

    By default, we allow the user to provide a ``escape`` function,
    which will be used to escape the translation string, if needed.
    """

    def __init__(self, *args, **kwargs):
        """Set the escape function to use."""
        self._escape = kwargs.get('escape_func', self._default_escape)

    def __call__(self, translation):
        """Decorate a translation.
        Args:
            translation: The translation string.
        Returns:
            The decorated translation.
        """
        raise NotImplementedError

    def _default_escape(self, s):
        """Default escape function."""
        return s


class NormalDecoratorBuilder(DecoratorBuilder):
    """Just escape the translation."""

    def __call__(self, translation):
        """Escape the string first."""
        if not translation:
            return ''
        return self._escape(translation)


class PseudoDecoratorBuilder(DecoratorBuilder):
    """Pseudo-ize the translation.

    It takes as an argument an extra function, which will produce the
    pseudo-ized translation.
    """

    def __init__(self, pseudo_func, *args, **kwargs):
        """Set the pseudo function to use."""
        self._pseudo_decorate = pseudo_func
        super(PseudoDecoratorBuilder, self).__init__(*args, **kwargs)

    def __call__(self, translation):
        """Use the pseudo function."""
        return self._pseudo_decorate(self._escape(translation))


class EmptyDecoratorBuilder(DecoratorBuilder):
    """Use an empty translation."""

    def __call__(self, translation):
        """Return an empty string."""
        return ""

########NEW FILE########
__FILENAME__ = factories
# -*- coding: utf-8 -*-

"""
Factories for compilers.
"""

from __future__ import absolute_import
from .decorators import NormalDecoratorBuilder, PseudoDecoratorBuilder, \
        EmptyDecoratorBuilder
from .builders import AllTranslationsBuilder, EmptyTranslationsBuilder, \
        ReviewedTranslationsBuilder, SourceTranslationsBuilder, \
        ReviewedSourceTranslationsBuilder, MarkedSourceTranslationsBuilder, \
        ReviewedMarkedSourceTranslationsBuilder
from .mode import Mode


class CompilerFactory(object):
    """Factory to create compilers.

    This should be used as a mixin.
    """

    def construct_compiler(self, language, pseudo_type, mode):
        """Construct a compiler.

        Args:
            language: The language to use.
            pseudo_type: The pseudo_type to use.
            mode: The mode of the compilation.
        Returns:
            A suitable compiler.
        """
        tdec = self._get_translation_decorator(pseudo_type)
        tset = self._get_translation_setter(language, mode)
        compiler = self._get_compiler(mode)
        compiler.translation_decorator = tdec
        compiler.translation_set = tset
        return compiler

    def _get_compiler(self, mode=None):
        """Construct the compiler to use.

        We use by default ``cls.CompilerClass``. If a format does not have
        any special needs, we only need to set the ``CompilerClass``
        variable to the appropriate compiler subclass.

        Otherwise, a subclass should override this, so that it can
        choose the appropriate compiler.
        """
        return self.CompilerClass(resource=self.resource)

    def _get_translation_decorator(self, pseudo_type):
        """Choose the decorator to use.

        Override in subclasses, if you need to use a custom one for a
        specific format.

        Args:
            pseudo_type: The pseudo type chosen.
        Returns:
            An instance of the applier.
        """
        if pseudo_type is None:
            return NormalDecoratorBuilder(escape_func=self._escape)
        else:
            return PseudoDecoratorBuilder(
                escape_func=self._escape,
                pseudo_func=pseudo_type.compile
            )

    def _get_translation_setter(self, language, mode):
        """Get the translations builder.

        This is used to fetch the set of translations to be used in
        the compilation process.

        Subclasses should override this.

        Args:
            language: The language for the translations.
            mode: The mode for the compilation.
        Returns:
            An instance of the apporpriate translations builder.
        """
        raise NotImplementedError


class EmptyCompilerFactory(CompilerFactory):
    """Return an empty translation set."""

    def _get_translation_setter(self, language, mode):
        return EmptyTranslationsBuilder(self.resource, language)


class SimpleCompilerFactory(CompilerFactory):
    """Use translation string set as is.

    The features this compiler offers are the default ones:
    - Uses only the translation strings, whenever a translation is
      asked.
    - Supports fetching only reviewed strings.

    This compiler should be used by formats such as PO.
    """

    def _get_translation_setter(self, language, mode):
        """Get the translations builder.

        We either use all translations or only reviewed ones.
        """
        if Mode.REVIEWED in mode:
            return ReviewedTranslationsBuilder(self.resource, language)
        else:
            return AllTranslationsBuilder(self.resource, language)


class FillEmptyCompilerFactory(CompilerFactory):
    """Fill empty translations with source strings, if asked.

    The features this compiler offers are:
    - If the user does not want to translate the file, he will receive a
      full translation, filled with source strings, where needed.
    - Supports reviewed translations only.
    """

    def _get_translation_setter(self, language, mode):
        """Get the translations builder."""
        if Mode.REVIEWED in mode and Mode.TRANSLATED in mode:
            return ReviewedSourceTranslationsBuilder(self.resource, language)
        elif Mode.REVIEWED in mode:
            return ReviewedTranslationsBuilder(self.resource, language)
        elif Mode.TRANSLATED in mode:
            return AllTranslationsBuilder(self.resource, language)
        else:
            return SourceTranslationsBuilder(self.resource, language)


class AlwaysFillEmptyCompilerFactory(CompilerFactory):
    """Always fill empty translations with source strings.

    The features this compiler offers are:
    - Source strings are always used for empty translations.
    - Supports reviewed translations only.
    """

    def _get_translation_setter(self, language, mode):
        """Get the translations builder."""
        if Mode.REVIEWED in mode:
            return ReviewedSourceTranslationsBuilder(self.resource, language)
        else:
            return SourceTranslationsBuilder(self.resource, language)


class MarkedSourceCompilerFactory(CompilerFactory):
    """Use source strings, but mark them."""

    def _get_translation_setter(self, language, mode):
        if Mode.REVIEWED in mode:
            return ReviewedMarkedSourceTranslationsBuilder(
                self.resource, language
            )
        else:
            return MarkedSourceTranslationsBuilder(self.resource, language)

########NEW FILE########
__FILENAME__ = mode
# -*- coding: utf-8 -*-

"""
Modes for compiling a translation.
"""


class _Mode(object):
    """Class to suggest, what a translation is downloaded for.

    This class **should not** be used directly by the user. He should
    use the *constants* defined afterwards.

    The class has a ``_value`` variable, which is an integer that
    *remembers* which *features* were chosen.

    Each type of *feature* should define a value that is the next
    available power of two.
    """

    # use slots to save memory
    __slots__ = ('_value', 'label')

    def __init__(self, value=0, label=None):
        """Set the initial mode of the object."""
        self._value = value
        self.label = label

    def __or__(self, other):
        """Combine modes."""
        return _Mode(self._value + other._value)

    def __contains__(self, item):
        """Return whether the mode contains the specified state."""
        return (self._value >> (item._value - 1)) % 2

    def __unicode__(self):
        return u'<Mode %s>' % self._value


class Mode(object):
    """Act as a namespace for the pre-defined modes."""

    DEFAULT = _Mode(0, 'for_use')
    TRANSLATED = _Mode(1, 'for_translation')
    REVIEWED = _Mode(2, 'for_use_reviewed')

########NEW FILE########
__FILENAME__ = core
# -*- coding: utf-8 -*-

from __future__ import absolute_import
import codecs, copy, os, re
import gc
from django.utils import simplejson as json
from django.conf import settings
from django.db import transaction
from django.db.models import get_model
from django.utils.datastructures import SortedDict
from django.utils.translation import ugettext as _
from transifex.txcommon.log import logger
from transifex.languages.models import Language
from transifex.projects.permissions.project import ProjectPermission
from suggestions.models import Suggestion
from suggestions.formats import ContentSuggestionFormat
from transifex.actionlog.models import action_logging
from transifex.resources.handlers import invalidate_stats_cache
from transifex.resources.formats.exceptions import FormatError, ParseError, \
        CompileError
from .compilation import Compiler, NormalDecoratorBuilder, \
        PseudoDecoratorBuilder, AllTranslationsBuilder, \
        SourceTranslationsBuilder, ReviewedTranslationsBuilder, Mode
from transifex.resources.formats.pseudo import PseudoTypeMixin
from transifex.resources.formats.utils.decorators import *
from transifex.resources.signals import post_save_translation
from transifex.resources.formats.resource_collections import StringSet, \
        GenericTranslation, SourceEntityCollection, TranslationCollection
from transifex.teams.models import Team
from transifex.resources.tasks import send_notices_for_formats


"""
STRICT flag is used to switch between two parsing modes:
  True - minor bugs in source files are treated fatal
    In case of Qt TS handler this means that buggy location elements will
    raise exceptions.
  False - if we get all necessary information from source files
    we will pass
"""
STRICT=False

Resource = get_model('resources', 'Resource')
Translation = get_model('resources', 'Translation')
SourceEntity = get_model('resources', 'SourceEntity')
Template = get_model('resources', 'Template')


class CustomSerializer(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, GenericTranslation):
            d = {
                'source_entity' : obj.source_entity,
                'translation' : obj.translation,
            }
            if obj.occurrences:
                d['occurrences'] = obj.occurrences
            if obj.comments:
                d['comments'] = obj.comments
            if obj.context:
                d['context'] = obj.context
            if obj.rule:
                d['rule'] = obj.rule
            if obj.pluralized:
                d['pluralized'] = obj.pluralized

            return d

        if isinstance(obj, StringSet):
            return {
                #'filename' : obj.filename,
                'target_language' : obj.target_language,
                'strings' : obj.strings,
            }


class Handler(object):
    """Base class for writing file handlers for all the I18N types."""
    default_encoding = "UTF-8"
    method_name = None
    format_encoding = "UTF-8"

    HandlerParseError = ParseError
    HandlerCompileError = CompileError

    SuggestionFormat = ContentSuggestionFormat
    CompilerClass = Compiler

    linesep = '\n'

    @classmethod
    def accepts(cls, i18n_type):
        """Accept only files that have the correct type specified."""
        return i18n_type == cls.method_name

    def __init__(self, filename=None, resource=None, language=None, content=None):
        """
        Initialize a formats handler.
        """
        # Input filename for associated translation file
        self.filename = filename
        # The content of the translation file
        self.content = self._get_content(filename=filename, content=content)
        self.stringset = None # Stringset to extract entries from files

        self.resource = None # Associated resource
        self.language = None # Resource's source language

        self.template = None # Var to store raw template
        self.compiled_template = None # Var to store output of compile() method

        if resource:
            self.resource = resource
            self.language = resource.source_language
        if language:
            self.language = language

        self.key_dict = {}

        # Hold warning messages from the parser in a sorted dict way to avoid
        # duplicated messages and keep them in the order they were added.
        self.warning_messages = SortedDict()

    def _set_warning_message(self, key, message):
        """Set a warning message to the parser if it doesn't exist already."""
        if key not in self.warning_messages.keys():
            self.warning_messages[key] = message

    def _check_content(self, content):
        """
        Perform the actual check of the content.

        """
        # FIXME Make all code use return values instead of exceptions
        # FIXME Needs to deprecate API v1
        return (True, None)

    def is_content_valid(self, content=None):
        """Check whether the content is valid for the format.

        A subclass needs to override the _check_content method
        to customize the check.

        Args:
            content: The content to check.
        Returns:
            A tuple with two elements. The first is a boolean, a flag whether
            the content is valid. The second is the error message in case of
            errors.
        """
        if content is None:
            content = self.content
        return self._check_content(content)

    ####################
    # Helper functions #
    ####################

    def _get_content(self, filename=None, content=None):
        """Read the content of the specified file.

        Return either the `content` or the content of the file.
        """
        if content is not None:
            if isinstance(content, str):
                try:
                    return content.decode(self.format_encoding)
                except UnicodeDecodeError, e:
                    raise FormatError(unicode(e))
            else:
                return content
        if filename is None:
            return None
        return self._get_content_from_file(filename, self.format_encoding)

    def _get_content_from_file(self, filename, encoding):
        """Return the content of a file encoded with ``encoding``.

        Args:
            filename: The name of the file.
            encoding: THe encoding to use to open the file.
        Returns:
            The content of the file as a unicode string.
        """
        f = codecs.open(filename, 'r', encoding=encoding)
        try:
            return f.read()
        except IOError, e:
            logger.warning(
                "Error opening file %s with encoding %s: %s" %\
                    (filename, self.format_encoding, e),
                exc_info=True
            )
            raise FormatError(unicode(e))
        except Exception, e:
            logger.error("Unhandled exception: %s" % e, exc_info=True)
            raise
        finally:
            f.close()

    def _content_from_template(self, resource):
        """Return the content of the template for the specified resource.

        Args:
            resource: The resource the template of which we want.
        Returns:
            The template as a unicode string.
        """
        return Template.objects.get(
            resource=resource
        ).content.decode(self.default_encoding)

    def set_language(self, language):
        """Set the language for the handler."""
        if isinstance(language, Language):
            self.language = language
        else:
            try:
                self.language = Language.objects.by_code_or_alias(language)
            except Language.DoesNotExist, e:
                logger.warning(
                    "Language.DoesNotExist: %s" % e, exc_info=True
                )
                raise FormatError(unicode(e))
            except Exception, e:
                logger.error(unicode(e), exc_info=True)
                raise FormatError(unicode(e))

    def bind_content(self, content):
        """Bind some content to the handler."""
        self.content = self._get_content(content=content)

    def bind_file(self, filename):
        """Bind a file to an initialized POHandler."""
        if os.path.isfile(filename):
            self.filename = filename
            self.content = self._get_content(filename=filename)
        else:
            msg = _("Specified file %s does not exist." % filename)
            logger.error(msg)
            raise FormatError(msg)

    def bind_resource(self, resource):
        """Bind a resource to an initialized POHandler."""
        if isinstance(resource, Resource):
            self.resource = resource
            try:
                resource_template = self.resource.source_file_template
            except Template.DoesNotExist:
                resource_template = None
            self.compiled_template = self.compiled_template or resource_template
            self.language = self.language or resource.source_language
        else:
            msg = _("The specified object %s is not of type Resource" % resource)
            logger.error(msg)
            raise FormatsError(msg)

    def _find_linesep(self, s):
        """Find the line separator used in the file."""
        if "\r\n" in s:         # windows line ending
            self.linesep = "\r\n"
        else:
            self.linesep = "\n"

    def _prepare_line(self, line):
        """
        Prepare a line for parsing.

        Remove newline and whitespace characters.
        """
        return line.rstrip('\r\n').strip()

    ####################
    #  Core functions  #
    ####################

    def _get_translation(self, string, language, rule):
        try:
            return Translation.objects.get(
                resource=self.resource, source_entity=string,
                language=language, rule=rule
            ).order_by()
        except Translation.DoesNotExist, e:
            return None

    def _escape(self, s):
        """Escape special characters in string."""
        return s

    def _add_translation_string(self, *args, **kwargs):
        """Adds to instance a new translation string."""
        self.stringset.add(GenericTranslation(*args, **kwargs))

    def _add_suggestion_string(self, *args, **kwargs):
        """Adds to instance a new suggestion string."""
        self.suggestions.add(GenericTranslation(*args, **kwargs))

    @need_resource
    def compile(self, language=None, pseudo=None, mode=Mode.DEFAULT):
        """Compile the translation for the specified language.

        The actual output of the compilation depends on the arguments.

        Args:
            language: The language of the translation.
            pseudo: The pseudo type to use (if any).
            mode: The mode of the translation.
        Returns:
            The compiled template in the correct encoding.
        """
        if language is None:
            language = self.language
        content = self._content_from_template(self.resource)
        compiler = self.construct_compiler(language, pseudo, mode)
        try:
            return compiler.compile(
                content, language
            ).encode(self.format_encoding)
        except Exception, e:
            logger.error("Error compiling file: %s" % e, exc_info=True)
            raise self.HandlerCompileError(unicode(e))


    #######################
    #  save methods
    #######################

    def _context_value(self, context):
        """Convert the context for the database.

        Args:
            context: The context value calculated
        Returns:
            The correct value for the context to be used in the database.
        """
        return context or u'None'

    def _handle_update_of_resource(self, user):
        """Do extra stuff after a source language/translation has been updated.

        Args:
            user: The user that caused the update.
        """
        self._update_stats_of_resource(self.resource, self.language, user)

        if self.language == self.resource.source_language:
            nt = 'project_resource_changed'
        else:
            nt = 'project_resource_translated'
        context = {
            'project': self.resource.project,
            'resource': self.resource,
            'language': self.language,
            'sender': user
        }
        object_list = [self.resource.project, self.resource, self.language]
        team = Team.objects.get_or_none(project=self.resource.project,
                                        language_code=self.language.code)
        if team:
            object_list.append(team)

        # if we got no user, skip the log
        if user:
            action_logging(user, object_list, nt, context=context)

        if settings.ENABLE_NOTICES:
            send_notices_for_formats.delay(nt, context)

    def _init_source_entity_collection(self, se_list):
        """Initialize the source entities collection.

        Get a collection of source entity objects for the current resource.

        Args:
            se_list: An iterable of source entity objects.
        Returns:
            A SourceEntityCollection object.
        """
        source_entities = SourceEntityCollection()
        for se in se_list:
            source_entities.add(se)
        return source_entities

    def _init_translation_collection(self, se_ids):
        """Initialize the translations collections.

        Get a collection of translation objects for the current language.

        Args:
            se_ids: An iterable of source entities ids the translation
                objects are for.
        Returns:
            A TranslationCollection object.
        """
        qs = Translation.objects.filter(
            language=self.language, source_entity__in=se_ids).iterator()
        translations = TranslationCollection()
        for t in qs:
            translations.add(t)
        return translations

    def _pre_save2db(self, *args, **kwargs):
        """
        This is called before doing any actual work. Override in inherited
        classes to alter behaviour.
        """
        pass

    def _post_save2db(self, *args, **kwargs):
        """
        This is called in the end of the save2db method. Override if you need
        the behaviour changed.
        """
        kwargs.update({
            'resource': self.resource,
            'language': self.language
        })
        post_save_translation.send(sender=self, **kwargs)

    def _should_skip_translation(self, se, trans):
        """Check if current translation should be skipped, ie not saved to db.

        This should happen for empty translations (ie, untranslated strings)
        and for strings which are not correctly pluralized.

        Args:
            se: The source entity that corresponds to the translation.
            trans: The translation itself.
        Returns:
            True, if the specified translation must be skipped, ie not
            saved to database.
        """
        return not trans.translation or trans.pluralized != se.pluralized

    def _save_source(self, user, overwrite_translations):
        """Save source language translations to the database.

        Subclasses should override this method, if they need to customize
        the behavior of saving translations in the source language.

        Any fatal exception must be reraised.

        Args:
            user: The user that made the commit.
            overwrite_translations: A flag to indicate whether translations
                should be overrided.

        Returns:
            A tuple of number of strings added, updted and deleted.

        Raises:
            Any exception.
        """
        qs = SourceEntity.objects.filter(resource=self.resource).iterator()
        original_sources = list(qs) # TODO Use set() instead? Hash by pk
        updated_entities = set([])
        new_entities = []
        source_entities = self._init_source_entity_collection(original_sources)
        translations = self._init_translation_collection(source_entities.se_ids)

        strings_added = 0
        strings_updated = 0
        strings_deleted = 0
        try:
            for j in self.stringset:
                if j in source_entities:
                    se = source_entities.get(j)
                    if se in new_entities:
                        continue
                    # update source string attributes.
                    se.flags = j.flags or ""
                    se.pluralized = j.pluralized
                    se.developer_comment = j.comment or ""
                    se.occurrences = j.occurrences
                    se.order = j.order
                    # se.save()
                    updated_entities.add(se)
                else:
                    # Create the new SE
                    se = SourceEntity(
                        string = j.source_entity,
                        context = self._context_value(j.context),
                        resource = self.resource, pluralized = j.pluralized,
                        position = 1,
                        # FIXME: this has been tested with pofiles only
                        flags = j.flags or "",
                        developer_comment = j.comment or "",
                        occurrences = j.occurrences,
                        order = j.order
                    )
                    # Add it to list with new entities
                    new_entities.append(se)
                    source_entities.add(se)

            SourceEntity.objects.bulk_insert(new_entities)
            SourceEntity.objects.bulk_update(updated_entities)
            qs = SourceEntity.objects.filter(resource=self.resource).iterator()
            new_sources = list(qs) # TODO Use set() instead? Hash by pk
            source_entities = self._init_source_entity_collection(new_sources)
            new_translations = []
            updated_translations = set([])
            for j in self.stringset:
                se = source_entities.get(j)
                if self._should_skip_translation(se, j):
                    continue
                if (se, j) in translations:
                    tr = translations.get((se, j))
                    if overwrite_translations and tr.string != j.translation:
                        tr.string = j.translation
                        tr.user = user
                        updated_translations.add(tr)
                        strings_updated += 1
                else:
                    tr = Translation(
                        source_entity=se, language=self.language, rule=j.rule,
                        string=j.translation, user=user,
                        resource = self.resource
                    )
                    new_translations.append(tr)
                    # translations.add(tr)
                    if j.rule==5:
                        strings_added += 1
            Translation.objects.bulk_insert(new_translations)
            Translation.objects.bulk_update(updated_translations)
        except Exception, e:
            msg = "Error importing the entries into the database: %s"
            logger.error(msg % e)
            raise

        sg_handler = self.SuggestionFormat(self.resource, self.language, user)
        sg_handler.add_from_strings(self.suggestions)
        new_entities = SourceEntity.objects.exclude(
            pk__in=[s.pk for s in original_sources]
        ).filter(
            resource=self.resource
        ).iterator()
        untouched_ses = set(original_sources) - updated_entities
        sg_handler.create_suggestions(untouched_ses, list(new_entities))
        for se in untouched_ses:
            se.delete()
        self._update_template(self.template)

        strings_deleted = len(untouched_ses)
        del new_entities, original_sources, updated_entities, untouched_ses
        del new_sources
        return strings_added, strings_updated, strings_deleted

    def _save_translation(self, user, overwrite_translations):
        """Save other language translations to the database.

        Subclasses should override this method, if they need to customize
        the behavior of saving translations in other languages than the source
        one.

        Any fatal exception must be reraised.

        Args:
            user: The user that made the commit.
            overwrite_translations: A flag to indicate whether translations
                should be overrided.

        Returns:
            A tuple of number of strings added, updted and deleted.

        Raises:
            Any exception.
        """
        qs = SourceEntity.objects.filter(resource=self.resource).iterator()
        source_entities = self._init_source_entity_collection(qs)
        translations = self._init_translation_collection(source_entities.se_ids)
        new_translations = []
        updated_translations = set([])

        strings_added = 0
        strings_updated = 0
        strings_deleted = 0
        try:
            for j in self.stringset:
                if j not in source_entities:
                    continue
                else:
                    se = source_entities.get(j)

                if self._should_skip_translation(se, j):
                    continue
                if (se, j) in translations:
                    tr = translations.get((se, j))

                    # We also check if the user submitting the translation
                    # has reviewing privileges. Regular users shouldn't be
                    # able to modify a reviewed string.

                    # FIXME: This check shouldn't be needed but save2db is
                    # called with user=None all over the place, so do this
                    # for now to avoid breaking everything.
                    if user:
                        check = ProjectPermission(user)
                        review_perm = check.proofread(self.resource.project,
                            self.language)
                        if overwrite_translations and tr.string != j.translation:
                            if tr.reviewed:
                                if not review_perm:
                                    continue
                            tr.string = j.translation
                            tr.user = user
                            updated_translations.add(tr)
                            strings_updated += 1
                    else:
                        if overwrite_translations and tr.string != j.translation:
                            tr.string = j.translation
                            tr.user = user
                            updated_translations.add(tr)
                            strings_updated += 1
                else:
                    tr = Translation(
                        source_entity=se, language=self.language, rule=j.rule,
                        string=j.translation, user=user, resource=self.resource
                    )
                    new_translations.append(tr)
                    if j.rule==5:
                        strings_added += 1
            Translation.objects.bulk_insert(new_translations)
            Translation.objects.bulk_update(updated_translations)
        except Exception, e:
            logger.error(
                "There was a problem while importing the entries into the "
                "database. Entity: '%s'. Error: '%s'." % (
                    j.source_entity, e
                )
            )
            raise
        sg_handler = self.SuggestionFormat(self.resource, self.language, user)
        sg_handler.add_from_strings(self.suggestions)
        del new_translations, updated_translations, source_entities, translations
        return strings_added, strings_updated, strings_deleted

    def _update_stats_of_resource(self, resource, language, user):
        """Update the statistics for the resource.

        Also, invalidate any caches.
        """
        invalidate_stats_cache(resource, language, user=user)

    def _update_template(self, content):
        """Update the template of the resource.

        Args:
            content: The content of the template.
        """
        t, created = Template.objects.get_or_create(resource=self.resource)
        t.content = content
        t.save()

    @need_resource
    @need_language
    @need_stringset
    @transaction.commit_manually
    def save2db(self, is_source=False, user=None, overwrite_translations=True):
        """
        Saves parsed file contents to the database. duh
        """
        self._pre_save2db(is_source, user, overwrite_translations)
        try:
            if is_source:
                (added, updated, deleted) = self._save_source(
                    user, overwrite_translations
                )
            else:
                (added, updated, deleted) = self._save_translation(
                    user, overwrite_translations
                )
        except Exception, e:
            logger.warning(
                "Failed to save translations for language %s and resource %s."
                "Error was %s." % (self.language, self.resource, e),
                exc_info=True
            )
            transaction.rollback()
            return (0, 0)
        finally:
            gc.collect()
        try:
            self._post_save2db(
                is_source=is_source, user=user,
                overwrite_translations=overwrite_translations
            )
            if added + updated + deleted > 0:
                self._handle_update_of_resource(user)
        except Exception, e:
            logger.error("Unhandled exception: %s" % e, exc_info=True)
            transaction.rollback()
            raise FormatError(unicode(e))
        finally:
            gc.collect()
        transaction.commit()
        return (added, updated)

    ####################
    # parse methods
    ####################

    def _generate_template(self, obj):
        """Generate a template from the specified object.

        By default, we use the obj as a unicode string and encode it to
        str.

        Subclasses could override this.
        """
        return obj.encode(self.default_encoding)

    def _iter_by_line(self, content):
        """Iterate the content by line."""
        for line in content.split(self.linesep):
            yield line

    def _parse(self, is_source, lang_rules):
        """The actual functions that parses the content.

        Formats need to override this to provide the desired behavior.

        Two stringsets are available to subclasses:
        - self.stringset to save the translated strings
        - self.suggestions to save suggested translations

        Args:
            is_source: Flag to determine if this is a source file or not.
            lang_rules: rules for the language

        Returns:
            An object which, when used as an argument in
            `self._create_template()`, the template for the resource
            is generated.

        """
        raise NotImplementedError

    @need_content
    @need_language
    def parse_file(self, is_source=False, lang_rules=None):
        """Parse the content."""
        self.stringset = StringSet()
        self.suggestions = StringSet()
        self.is_content_valid()
        try:
            obj = self._parse(is_source, lang_rules)
        except self.HandlerParseError, e:
            msg = "Error when parsing file for resource %s: %s"
            logger.error(msg % (self.resource, e), exc_info=True)
            raise
        if self.resource and not self.stringset:
            msg = _("We're not able to extract any string from the file "
                    "uploaded for language %(language)s in resource "
                    "%(resource)s." % {'language': self.language,
                    'resource': self.resource})
            logger.error("Error during parsing for resource %s -> %s" % (
                self.resource, msg), exc_info=True)
            raise self.HandlerParseError(msg)
        if is_source:
            self.template = self._generate_template(obj)

########NEW FILE########
__FILENAME__ = desktop
# -*- coding: utf-8 -*-
"""
Handler for .desktop files.
"""

from __future__ import absolute_import
import re
import codecs
from django.utils.translation import ugettext as _
from collections import defaultdict
from transifex.txcommon.log import logger
from transifex.languages.models import Language
from transifex.resources.models import Translation, Template, SourceEntity
from transifex.resources.formats.utils.decorators import *
from transifex.resources.formats.utils.hash_tag import hash_tag
from transifex.resources.formats.core import Handler, ParseError, CompileError
from .compilation import Compiler, SimpleCompilerFactory
from transifex.resources.formats.resource_collections import StringSet, \
        GenericTranslation


class DesktopParseError(ParseError):
    pass


class DesktopCompileError(CompileError):
    pass


class DesktopBaseCompiler(Compiler):
    """Base compiler for .desktop files."""

    def _get_source_strings(self):
        return SourceEntity.objects.filter(resource=self.resource).values_list(
            'id', 'string_hash', 'string'
        )

    def _compile_content(self, content, language):
        stringset = self._get_source_strings()
        self._tset.language = language
        translations = self._tset()
        for string in stringset:
            trans = translations.get(string[0], u"")
            if trans:
                content = self._apply_translation(string[2], trans, content, language)
        return content

    def _apply_translation(self, source, trans, content, language):
        if isinstance(content, str):
            content = content.decode(self.default_encoding)
        if isinstance(source, str):
            source = source.decode(self.default_encoding)
        if isinstance(trans, str):
            trans = trans.decode(self.default_encoding)
        return ''.join([
                content, source, '[', language.code, ']=',
                self._tdecorator(trans), '\n',
        ])


class DesktopSourceCompiler(DesktopBaseCompiler):
    """Compiler for source .desktop files.

    Show all translations.
    """

    def _compile(self, content):
        """Compile all translations."""
        all_languages = set(self.resource.available_languages_without_teams)
        source_language = set([self.resource.source_language, ])
        translated_to = all_languages - source_language
        for language in translated_to:
            content = self._compile_content(content, language)
        self.compiled_template = content


class DesktopTranslationCompiler(DesktopBaseCompiler):
    """Compiler for translation .desktop files.

    Show a single language, the one of the translation.
    """
    def _compile(self, content):
        self.compiled_template = self._compile_content(content, self.language)


class DesktopHandler(SimpleCompilerFactory, Handler):
    """Class for .desktop files.

    See http://standards.freedesktop.org/desktop-entry-spec/latest/.
    """

    name = ".desktop file handler"
    format = ".desktop (*.desktop)"
    method_name = 'DESKTOP'

    HandlerParseError = DesktopParseError
    handlerCompileError = DesktopCompileError

    comment_chars = ('#', )
    delimiter = '='
    # We are only intrested in localestrings, see
    # http://standards.freedesktop.org/desktop-entry-spec/latest/ar01s05.html
    localized_keys = ['Name', 'GenericName', 'Comment', 'Icon', ]

    def _is_comment_line(self, line):
        """Return True, if the line is a comment."""
        return line[0] in self.comment_chars

    def _is_empty_line(self, line):
        """Return True, if the line is empty."""
        return re.match('\s*$', line) is not None

    def _is_group_header_line(self, line):
        """Return True, if this is a group header."""
        return line[0] == '[' and line[-1] == ']'

    def _get_compiler(self, mode=None):
        """Choose between source and single translation compilers."""
        if self.language == self.resource.source_language:
            return DesktopSourceCompiler(self.resource)
        else:
            return DesktopTranslationCompiler(self.resource)

    def _get_elements(self, line):
        """Get the key and the value of a line."""
        return line.split(self.delimiter, 1)

    def _get_lang_code(self, locale):
        """Return the lang_code part from a locale string.

        locale is of the form lang_COUNTRY.ENCODING@MODIFIER
        (in general)
        We care for lang_COUNTRY part.
        """
        modifier = ''
        at_pos = locale.find('@')
        if at_pos != -1:
            modifier = locale[at_pos:]
            locale = locale[:at_pos]
        dot_pos = locale.find('.')
        if dot_pos != -1:
            locale = locale[:dot_pos]
        return ''.join([locale, modifier])

    def _get_locale(self, key):
        """Get the locale part of a key."""
        return key[key.find('[') + 1:-1]

    def _should_skip(self, line):
        """Return True, if we should skip the line.

        This is the case if the line is an empty line, a comment or
        a group header line.

        """
        return self._is_empty_line(line) or\
                self._is_comment_line(line) or\
                self._is_group_header_line(line) or\
                self.delimiter not in line

    def _parse(self, is_source=False, lang_rules=None):
        """
        Parse a .desktop file.

        If it is a source file, the file will have every translation in it.
        Otherwise, it will have just the translation for the specific language.
        """
        # entries is a dictionary with the entry keys in the file
        entries = defaultdict(list)

        template = u''
        for line in self._iter_by_line(self.content):
            if self._should_skip(line) :
                template += line + "\n"
                continue
            key, value = self._get_elements(line)
            if '[' in key:
                # this is a translation
                # find the language of it
                # Skip the template
                actual_key = key[:key.find('[')]
                locale = self._get_locale(key)
                lang_code = self._get_lang_code(locale)
                if lang_code == "x-test":
                    template += line + "\n"
                    continue
                try:
                    lang = Language.objects.by_code_or_alias(lang_code)
                except Language.DoesNotExist, e:
                    msg = _("Unknown language specified: %s" % lang_code)
                    logger.warning(msg)
                    raise DesktopParseError(msg)
            else:
                lang = False    # Use False to mark source string
                actual_key = key
                template += line + "\n"

            if actual_key not in self.localized_keys:
                # Translate only standard localestring keys
                continue
            entries[actual_key].append((value, lang))

        context = ""
        template += '\n# Translations\n'

        for key, value in entries.iteritems():
            for translation, language in value:
                if is_source and language:
                    # Skip other languages when parsing a source file
                    continue
                elif not is_source and language != self.language:
                    # Skip other languages than the one the parsing is for
                    continue
                self._add_translation_string(key, translation, context=context)

        return template

########NEW FILE########
__FILENAME__ = dtd
# -*- coding: utf-8 -*-
""" DTD file handler/compiler """

from __future__ import absolute_import
import os, re
from xml.sax.saxutils import escape as xml_escape, unescape as xml_unescape
from transifex.txcommon.log import logger
from transifex.resources.formats import FormatError
from transifex.resources.formats.utils.decorators import *
from transifex.resources.formats.utils.hash_tag import hash_tag
from transifex.resources.formats.core import Handler, ParseError, CompileError
from transifex.resources.formats.resource_collections import StringSet, \
        GenericTranslation
from .compilation import SimpleCompilerFactory


class DTDParseError(ParseError):
    pass


class DTDCompileError(CompileError):
    pass


class DTDHandler(SimpleCompilerFactory, Handler):
    """ Handler for DTD translation files. """
    default_encoding = 'UTF-8'
    format_encoding = 'UTF-8'
    name = "DTD file handler"
    format = "DTD (*.dtd)"
    method_name = "DTD"

    HandlerParseError = DTDParseError
    HandlerCompileError = DTDCompileError

    def _escape(self, s):
        """Escape format content.

        HTML escape quotes, ampersands and angle brackets
        single quotes are omitted,
        because double quotes around the value are forced in template
        """
        return xml_escape(s, {
            '"': '&quot;',
            '%': '&#37;'
        })

    def _unescape(self, s):
        """ Unescape entities for easy editing """
        return xml_unescape(s, {
            '&quot;': '"',
            '&#39;': "'",
            '&#37;': '%',
            '&#039;': "'",
            '&#037;': '%',
            '&apos;': "'",
        })

    def _get_content_from_file(self, filename, encoding):
        fh = open(filename, "r")
        try:
            text = fh.read().decode(encoding)
            fh.close()
        except UnicodeDecodeError as e:
            logger.warning("Unicode decode error in DTDHandler.parse_file(): %s"
                    % unicode(e), exc_info=True)
            raise self.HandlerParseError(unicode(e))
        except IOError, e:
            logger.warning(
                "Error opening file %s with encoding %s: %s" %\
                    (filename, encoding, e.message),
                exc_info=True
            )
            raise FormatError(e.message)
        except Exception, e:
            logger.error("Unhandled exception in DTDHandler.parse_file(): %s"
                    % unicode(e), exc_info=True)
            raise self.HandlerParseError(unicode(e))
        finally:
            fh.close()
        return text

    def _parse(self, is_source, lang_rules):
        resource = self.resource

        context = ""
        text = self.content

        name_start_char = u':A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF' + \
            u'\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF'+\
            u'\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD'
        name_char = name_start_char + ur'\-\.0-9' + u'\xB7\u0300-\u036F\u203F-\u2040'
        name = u'[' + name_start_char + u'][' + name_char + u']*'

        re_entity = u'<!ENTITY\s+(' + name + u')\s+((?:\"[^\"]*\")|(?:\'[^\']*\'))\s*>'
        re_comment = u'\<!\s*--(.*?)(?:--\s*\>)'
        re_tag = re.compile("(%s|%s)" % (re_entity, re_comment), re.M|re.S|re.U)

        latest_comment = ""
        for (orig, key, value, comment) in re.findall(re_tag, text):
            if key:
                self.stringset.add(GenericTranslation(
                        key, self._unescape(value[1:-1]),
                        rule=5, # no plural forms
                        context=context, comment=latest_comment,
                        pluralized=False, fuzzy=False,
                        obsolete=False
                ))
                if is_source:
                    hashed_entity = orig.replace(value,
                        '"%(hash)s_tr"' % {'hash': hash_tag(key, context)} )
                    text = text.replace(orig, hashed_entity)
                latest_comment = ""

            if comment:
                latest_comment = comment
        return text

########NEW FILE########
__FILENAME__ = exceptions
# -*- coding: utf-8 -*-

"""
Hold all (base) exceptions used in the formats code.
"""

class FormatError(Exception):
    """Base class for all formats related errors."""


class ParseError(FormatError):
    """Base class for parsing errors."""


class CompileError(FormatError):
    """Base class for all compiling errors."""


class UninitializedCompilerError(FormatError):
    """Error raised by the compilers to indicate partial initilazation."""

########NEW FILE########
__FILENAME__ = formats_info
# -*- coding: utf-8 -*-
"""
Various info classes for the suported formats.

"""

from xml.sax.saxutils import escape as xml_escape
from xml.sax.saxutils import unescape as xml_unescape


class FormatInfo(object):
    """Represent individual formats.

    The class keeps extra info for the format and minor operations
    for that.
    """

    def prepare_for_viewing(self, value):
        """Prepare a value for viewing.

        This method prepares translations so that they can be viewed
        by translators.

        Args:
            value: The value to prepare for viewing.
        Returns:
            A ready-for-viewing value.
        """
        return value

    def prepare_for_saving(self, value):
        """Prepare a value for saving to the database.

        This method prepares translations entered by translators so that
        they can be saved to the database.

        Args:
            value: The value to prepare for saving.
        Returns:
            The prepared value.
        """
        return value


class XmlFormatInfo(FormatInfo):
    """Specialization for XML formats.

    XML based formats need to convert certain characters
    to xml entities and vice-versa.
    """

    def prepare_for_viewing(self, value):
        """Prepare a value for viewing.

        Support both basestring objects and iterables of basestring
        objects.
        """
        if isinstance(value, basestring):
            return self._unescape(value)
        else:
            return (self._unescape(v) for v in value)

    def prepare_for_saving(self, value):
        """Prepare a value for saving.

        Support both basestring objects and iterables of basestring
        objects.
        """
        if isinstance(value, basestring):
            return self._escape(value)
        else:
            return (self._escape(v) for v in value)

    def _escape(self, s):
        return xml_escape(s, {"'": "&apos;", '"': '&quot;'})

    def _unescape(self, s):
        return xml_unescape(s, {"&apos;": "'", '&quot;': '"'})

########NEW FILE########
__FILENAME__ = javaproperties
# -*- coding: utf-8 -*-

"""
Java properties file handler/compiler
"""
from __future__ import absolute_import
import os, re
from django.utils.hashcompat import md5_constructor
from transifex.txcommon.log import logger
from transifex.resources.models import SourceEntity
from transifex.resources.formats.utils.decorators import *
from .utils.hash_tag import hash_tag
from .properties import PropertiesCompiler, PropertiesHandler, \
        PropertiesParseError, PropertiesCompileError
from .resource_collections import StringSet, GenericTranslation


class JavaParseError(PropertiesParseError):
    pass


class JavaCompileError(PropertiesCompileError):
    pass


def convert_to_unicode(s):
    """Convert the string s to a proper unicode string.

    Java .properties files go through native2ascii first, which
    converts unicode characters to \uxxxx representations, ie to a series
    of bytes that represent the original unicode codepoint.

    We convert each \uxxxx representation back to the unicode character
    by finding the decimal representation of it and then
    calling ord on the result.

    Args:
        s: A string of the form '\\uxxxx'.
    Returns:
        The unicode character that corresponds to that.
    """
    assert len(s) == 6
    char = 0
    base = 16
    for rank, c in enumerate(reversed(s[2:])):
        char += int(c, base) * base ** rank
    return unichr(char)


def convert_to_ascii(c):
    """Convert the character c to a \uxxxx representation.

    THe method converts a unicode character c to a series of bytes
    that represent its codepoint.

    Args:
        c: The unicode character to convert.
    Returns:
        A string that represents its codepoint.
    """
    assert len(c) == 1
    s = ''
    base = 16
    n = ord(c)
    for i in xrange(4):
        (n, mod) = divmod(n, base)
        s = ''.join([hex(mod)[2], s])
    return ''.join(['\\u', s])


class JavaCompiler(PropertiesCompiler):
    """Compiler for java .properties files.

    We need to convert translations to unicode sequences.
    """

    def _visit_translation(self, translation):
        """Use unicode escape sequences to represent unicode characters."""
        for char in translation:
            if ord(char) in range(127, 160) or ord(char) > 255:
                translation = translation.replace(char, convert_to_ascii(char))
        return translation


class JavaPropertiesHandler(PropertiesHandler):
    """Handler for Java PROPERTIES translation files.

    Java properties files *must* be encoded in cls.default_encoding encoding.

    See
    http://download.oracle.com/javase/1.4.2/docs/api/java/util/PropertyResourceBundle.html,
    http://download.oracle.com/javase/1.4.2/docs/api/java/util/Properties.html#encoding and
    http://download.oracle.com/javase/1.4.2/docs/api/java/util/Properties.html#load(java.io.InputStream)
    """

    name = "Java *.PROPERTIES file handler"
    format = "Java PROPERTIES (*.properties)"
    method_name = 'PROPERTIES'
    format_encoding = 'ISO-8859-1'

    HandlerParseError = JavaParseError
    HandlerCompileError = JavaCompileError
    CompilerClass = JavaCompiler

    def _visit_value(self, value):
        """Convert the value to unicode-escaped string."""
        if value is not None:
            uni_chars = re.findall(r'(\\u[0-9A-Fa-f]{4})', value)
            for uni_char in uni_chars:
                value = value.replace(
                    uni_char, convert_to_unicode(uni_char)
                )
        return value

########NEW FILE########
__FILENAME__ = joomla
# -*- coding: utf-8 -*-

"""
Joomla INI file handler/compiler
"""

from __future__ import absolute_import
import os, re
import codecs
from transifex.txcommon.log import logger
from transifex.resources.models import SourceEntity
from .core import Handler, ParseError, CompileError
from .compilation import Compiler, MarkedSourceCompilerFactory
from .resource_collections import StringSet, GenericTranslation
from .utils.hash_tag import hash_tag
from .utils.decorators import *


class JoomlaParseError(ParseError):
    pass


class JoomlaCompileError(CompileError):
    pass


class JoomlaCompiler(Compiler):
    """Compiler for Joomla .ini files."""

    def _iter_by_line(self, content):
        """Iterate the content by line."""
        for line in content.split(self.linesep):
            yield line

    def _examine_content(self, content):
        """Determine the version of the file."""
        if "\r\n" in content:         # windows line ending
            self.linesep = "\r\n"
        else:
            self.linesep = "\n"
        for line in self._iter_by_line(content):
            if not line or line.startswith(('#', ';',)):
                continue
            try:
                source, trans = line.split('=', 1)
                if trans.strip().startswith('"') and\
                        trans.strip().endswith('"'):
                    self.jformat = JoomlaIniNew()
                else:
                    self.jformat = JoomlaIniOld()
                break
            except ValueError:
                continue
        return content

    def _post_compile(self):
        """Comment out source strings."""
        pattern = r'(?P<actual>.*)_txss'
        suffix = ""
        if isinstance(self.jformat, JoomlaIniNew):
            pattern += r'"'
            suffix = '"'
        regex = re.compile(pattern)
        self.compiled_template = regex.sub(
            lambda m: '%s '% self.jformat.comment_char +\
                    m.group('actual') + suffix, self.compiled_template
        )

    def _visit_translation(self, s):
        """Modify the translation depending on the version of the file."""
        return self.jformat.get_compilation(s)


class JoomlaINIHandler(MarkedSourceCompilerFactory, Handler):
    """
    Handler for Joomla's INI translation files.

    See http://docs.joomla.org/Specification_of_language_files
    and http://docs.joomla.org/Creating_a_language_definition_file.
    """

    name = "Joomla *.INI file handler"
    format = "Joomla INI (*.ini)"
    method_name = 'INI'
    comment_chars = ('#', ';', ) # '#' is for 1.5 and ';' for >1.6

    HandlerParseError = JoomlaParseError
    HandlerCompileError = JoomlaCompileError
    CompilerClass = JoomlaCompiler

    def _escape(self, s):
        return  s.replace('\n', r'\n').replace('\r', r'\r')

    def _unescape(self, s):
        return s.replace('\\n', '\n').replace('\\r', '\r')

    def _parse(self, is_source, lang_rules):
        """
        Parse an INI file and create a stringset with all entries in the file.
        """
        content = self.content
        self._find_linesep(content)
        comment = ""

        buf = ''
        initialized = False
        for line in self._iter_by_line(content):
            # Skip empty lines and comments
            if not line or line.startswith(self.comment_chars):
                if is_source:
                    buf += line + self.linesep
                    if line.startswith(self.comment_chars):
                        comment = line[1:] + self.linesep
                    else:
                        comment = ""
                continue

            try:
                source, trans = line.split('=', 1)
                if not initialized:
                    if trans.strip().startswith('"') and\
                            trans.strip().endswith('"'):
                        self.jformat = JoomlaIniNew()
                    else:
                        self.jformat = JoomlaIniOld()
                    initialized = True
            except ValueError:
                # Maybe abort instead of skipping?
                logger.warning('Could not parse line "%s". Skipping...' % line)
                continue

            escaped_trans = self.jformat.get_translation(trans)
            source = source.strip()
            trans = trans.strip()
            if isinstance(self.jformat, JoomlaIniNew):
                trans = trans[1:-1]
            context = ""        # We use empty context

            if is_source:
                if not trans.strip():
                    buf += line + self.linesep
                    continue
                source_len = len(source)
                new_line = line[:source_len] + re.sub(
                    re.escape(trans),
                    "%(hash)s_tr" % {'hash': hash_tag(source, context)},
                    line[source_len:]
                )
                buf += new_line + self.linesep
            elif not SourceEntity.objects.filter(resource=self.resource, string=source).exists()\
                    or not escaped_trans.strip():
                #ignore keys with no translation
                context=""
                continue
            self.stringset.add(GenericTranslation(
                    source, self._unescape(escaped_trans),
                    context=context, comment=comment
            ))
            comment = ""
        return buf[:buf.rfind(self.linesep)]


class JoomlaIniVersion(object):
    """Base class for the various formats of Joomla ini files."""

    @classmethod
    def create(cls, content):
        """Factory method to return the correct instance for the format.

        In versions >=1.6 translations are surrounded by double quotes.
        """
        if content[0] == ';':
            return JoomlaIniNew()
        else:
            return JoomlaIniOld()

    def get_translation(self, value):
        """
        Return the trasnlation value extracted from the specified string.
        """
        raise NotImplementedError


class JoomlaIniOld(JoomlaIniVersion):
    """Format for Joomla 1.5."""
    comment_char = '#'

    def _escape(self, value):
        return value.replace('"', "&quot;")

    def _unescape(self, value):
        return value.replace("&quot;", '"')

    def get_translation(self, value):
        return self._unescape(value)

    def get_compilation(self, value):
        return self._escape(value)


class JoomlaIniNew(JoomlaIniVersion):
    """Format for Joomla 1.6."""
    comment_char = ';'

    def _escape(self, value):
        return value.replace('"', '"_QQ_"')

    def _unescape(self, value):
        return value.replace("&quot;", '"').replace('"_QQ_"', '"')

    def get_translation(self, value):
        # Get rid of double-quote at the start and end of value
        return self._unescape(value.strip()[1:-1])

    def get_compilation(self, value):
        return self._escape(value)

########NEW FILE########
__FILENAME__ = mozillaproperties
# -*- coding: utf-8 -*-

"""
Mozilla properties file handler/compiler
"""

from __future__ import absolute_import
import os, re
from django.utils.hashcompat import md5_constructor
from transifex.txcommon.log import logger
from transifex.resources.models import SourceEntity
from transifex.resources.formats.utils.decorators import *
from transifex.resources.formats.utils.hash_tag import hash_tag
from transifex.resources.formats.core import Handler, ParseError, CompileError
from transifex.resources.formats.resource_collections import StringSet, \
        GenericTranslation
from transifex.resources.formats.properties import PropertiesHandler, \
        PropertiesParseError, PropertiesCompileError, PropertiesCompiler


class MozillaPropertiesParseError(PropertiesParseError):
    pass


class MozillaPropertiesCompileError(PropertiesCompileError):
    pass


class MozillaPropertiesHandler(PropertiesHandler):
    name = "Mozilla *.PROPERTIES file handler"
    format = "Mozilla PROPERTIES (*.properties)"
    method_name = 'MOZILLAPROPERTIES'
    format_encoding = 'UTF-8'

    HandlerParseError = MozillaPropertiesParseError
    HandlerCompileError = MozillaPropertiesCompileError
    CompilerClass = PropertiesCompiler

    escaped_unicode_pattern = re.compile(
            r'\\[uU]([0-9A-Fa-f]{4})')

    def _escape(self, s):
        return (s.replace('\\', r'\\')
                 .replace('\n', r'\n')
                 .replace('\r', r'\r')
                 .replace('\t', r'\t')
        )

    def _unescape(self, s):
        return (s.replace(r'\n', '\n')
                 .replace(r'\r', '\r')
                 .replace(r'\t', '\t')
                 .replace(r'\\', '\\')
        )

    def _visit_value(self, value):
        if value:
            return self.escaped_unicode_pattern.sub(
                    lambda m: unichr(int(m.group(1), 16)),
                    value
            )

########NEW FILE########
__FILENAME__ = pofile
# -*- coding: utf-8 -*-

"""
GNU Gettext .PO/.POT file handler/compiler
"""

from __future__ import absolute_import
import os, re
import itertools
import polib
from django.conf import settings
from django.db import transaction
from django.db.models import get_model
from django.utils.translation import ugettext, ugettext_lazy as _

from django.contrib.sites.models import Site

from transifex.txcommon.commands import run_command, CommandError
from transifex.txcommon.log import logger
from transifex.teams.models import Team
from transifex.resources.formats.utils.decorators import *
from transifex.resources.formats.utils.hash_tag import hash_tag,\
        escape_context, hash_regex
from transifex.resources.models import RLStats
from transifex.resources.signals import post_save_translation
from transifex.resources.formats.core import Handler
from transifex.resources.formats.exceptions import CompileError, ParseError
from .compilation import SimpleCompilerFactory, PluralCompiler, \
        EmptyDecoratorBuilder, EmptyTranslationsBuilder
from .resource_collections import StringSet, GenericTranslation
from .utils.string_utils import split_by_newline


Resource = get_model('resources', 'Resource')
Translation = get_model('resources', 'Translation')
SourceEntity = get_model('resources', 'SourceEntity')
Template = get_model('resources', 'Template')


class PoParseError(ParseError):
    pass


class PoCompileError(CompileError):
    pass


def msgfmt_check(po_contents, ispot=False, with_exceptions=True):
    """Run a `msgfmt -c` on the file contents.

    Raise a PoParseError in case the stderror has errors/warnings or
    the command execution returns Error.
    """
    try:
        if ispot:
            command = 'msgfmt -o /dev/null --check-format --check-domain -'
        else:
            command = 'msgfmt -o /dev/null -c -'
        status, stdout, stderr = run_command(
            command, _input=po_contents.encode('UTF-8'),
            with_extended_output=True, with_exceptions=with_exceptions
        )
        # Not sure why msgfmt sends its output to stderr instead of stdout
        #if 'warning:' in stderr or 'too many errors, aborting' in stderr:
        if 'too many errors, aborting' in stderr:
            logger.warning('msgfmt %s: %s' % (status, stderr, ))
            raise CommandError(command, status, stderr)
    except CommandError, e:
        logger.warning("pofile: The 'msgfmt -c' check failed.")
        raise PoParseError, ugettext("Your file failed a correctness check "
            "(msgfmt -c). It returned the following error:\n\n%s\n\n"
            "Please run this command on "
            "your system to see the errors for yourself." % e.stderr.lstrip('<stdin>:'))


class GettextHandler(SimpleCompilerFactory, Handler):
    """
    Translate Toolkit is using Gettext C library to parse/create PO files in Python
    TODO: Switch to Gettext C library
    """
    name = "GNU Gettext *.PO/*.POT handler"
    method_name = 'PO'
    format = "GNU Gettext Catalog (*.po, *.pot)"
    copyright_line = re.compile('^# (.*?), ((\d{4}(, ?)?)+)\.?$')

    HandlerParseError = PoParseError
    HandlerCompileError = PoCompileError

    def _check_content(self, content):
        try:
            po = polib.pofile(content)
        except IOError, e:
            logger.warning("Parse error: %s" % e, exc_info=True)
            raise PoParseError(unicode(e))

        # If file is empty, the method hangs so we should bail out.
        if not content:
            logger.warning("Pofile: File '%s' is empty." % self.filename)
            raise PoParseError("Uploaded file is empty.")

        # Msgfmt check
        if settings.FILECHECKS['POFILE_MSGFMT']:
            msgfmt_check(content, self.is_pot)

        # Check required header fields
        required_metadata = ['Content-Type', 'Content-Transfer-Encoding']
        for metadata in required_metadata:
            if not metadata in po.metadata:
                logger.warning(
                    "pofile: Required metadata '%s' not found." % metadata
                )
                raise PoParseError(
                    "Uploaded file header doesn't have '%s' metadata!" % metadata
                )

        # Save to avoid parsing it again
        self._po = po

    def __init__(self, filename=None, resource=None, language=None,
                 content=None):
        super(GettextHandler, self).__init__(
            filename=filename, resource=resource, language=language,
            content=content
        )
        self.copyrights = []

    def get_po_contents(self, pofile):
        """
        This function takes a pofile object and returns its contents
        """

        # FIXME: Temporary check until a version greater than polib-0.5.3 is out.
        # Patch sent to upstream.
        def charset_exists(charset):
            """Check whether or not ``charset`` is valid."""
            import codecs
            try:
                codecs.lookup(charset)
            except LookupError:
                return False
            return True

        if not charset_exists(pofile.encoding):
            pofile.encoding = polib.default_encoding

        content = pofile.__str__()
        stripped_content = ""
        for line in content.split('\n'):
            if not self._is_copyright_line(line):
                stripped_content += line + "\n"
        return stripped_content

    def _get_compiler(self, mode=None):
        """Construct the compiler to use."""
        return self.CompilerClass(
            resource=self.resource, format_encoding=self.format_encoding
        )

    def _escape(self, s):
        """
        Escape special chars and return the given string *st*.

        **Examples**:

        >>> escape('\\t and \\n and \\r and " and \\\\')
        '\\\\t and \\\\n and \\\\r and \\\\" and \\\\\\\\'
        """
        return s.replace('\\', '\\\\')\
                .replace('\n', '\\n')\
                .replace('\t', '\\t')\
                .replace('\r', '\\r')\
                .replace('\"', '\\"')

    def _post_save2db(self, *args, **kwargs):
        """Emit a signal for others to catch."""
        kwargs.update({'copyrights': self.copyrights})
        super(GettextHandler, self)._post_save2db(*args, **kwargs)

    def _parse(self, is_source, lang_rules):
        """
        Parse a PO file and create a stringset with all PO entries in the file.
        """
        if lang_rules:
            nplural = len(lang_rules)
        else:
            nplural = self.language.get_pluralrules_numbers()

        if not hasattr(self, '_po'):
            self.is_content_valid()

        self._parse_copyrights(self.content)
        try:
            self._po = polib.pofile(self.content)
        except IOError, e:
            raise PoParseError(unicode(e))

        for entry in self._po:
            pluralized = False
            same_nplural = True

            # skip obsolete entries
            if entry.obsolete:
                continue

            # treat fuzzy translation as nonexistent
            if "fuzzy" in entry.flags:
                if not is_source:
                    if not entry.msgid_plural:
                        self._add_suggestion_string(
                            entry.msgid, entry.msgstr,
                            context=escape_context(entry.msgctxt) or '',
                            occurrences=self._serialize_occurrences(entry.occurrences)
                        )
                    continue
                else:
                    # Drop fuzzy flag from template
                    entry.flags.remove("fuzzy")

            if entry.msgid_plural:
                pluralized = True
                if is_source:
                    nplural_file = len(entry.msgstr_plural.keys())
                    if nplural_file != 2:
                        raise PoParseError("Your source file is not a POT file and"
                            " the translation file you're using has more"
                            " than two plurals which is not supported."
                        )
                    # English plural rules
                    messages = [(1, entry.msgstr_plural['0'] or entry.msgid),
                                (5, entry.msgstr_plural['1'] or entry.msgid_plural)]
                    plural_keys = [0,1]
                else:
                    message_keys = entry.msgstr_plural.keys()
                    message_keys.sort()
                    nplural_file = len(message_keys)
                    messages = []
                    if nplural:
                        if len(nplural) != nplural_file:
                            logger.warning("Passed plural rules has nplurals=%s"
                                ", but '%s' file has nplurals=%s. String '%s'"
                                "skipped." % (len(nplural), self.filename,
                                nplural_file, entry.msgid))
                            self._set_warning_message('nplural',
                                ugettext("Pluralized entries of the file were "
                                "skipped because the nplural of the upload file "
                                "differs from the nplural (%s) for the given "
                                "language available in the system." %
                                len(nplural)))
                            same_nplural = False
                    else:
                        same_nplural = False

                    if not same_nplural:
                        # Skip half translated plurals
                        continue
                        # plural_keys = message_keys

                    for n, key in enumerate(message_keys):
                        messages.append((nplural[n], entry.msgstr_plural['%s' % n]))
            else:
                # pass empty strings for non source files
                if not is_source and entry.msgstr in ["", None]:
                    continue
                # Not pluralized, so no plural rules. Use 5 as 'other'.
                if is_source:
                    messages = [(5, entry.msgstr or entry.msgid)]
                else:
                    messages = [(5, entry.msgstr)]

            # Add messages with the correct number (plural)
            for number, msgstr in enumerate(messages):
                if entry.comment:
                    comment = entry.comment
                else:
                    comment = None
                if entry.flags:
                    flags = ', '.join( f for f in entry.flags)
                else:
                    flags = None
                context=escape_context(entry.msgctxt) or ''
                self._add_translation_string(
                    entry.msgid, msgstr[1], context=context,
                    occurrences=self._serialize_occurrences(entry.occurrences),
                    rule=msgstr[0], pluralized=pluralized, comment=comment,
                    flags=flags
                )

            if is_source:
                entry.msgstr = "%(hash)s_tr" % {
                    'hash': hash_tag(entry.msgid, context)
                }

                if entry.msgid_plural:
                    for n, rule in enumerate(plural_keys):
                        entry.msgstr_plural['%s' % n] = (
                            "%(hash)s_pl_%(key)s" % {
                                'hash':hash_tag(entry.msgid, context),
                                'key':n
                            }
                        )
        return self._po

    def _generate_template(self, po):
        return self.get_po_contents(po)

    def _parse_copyrights(self, content):
        """Read the copyrights (if any) from a gettext file."""
        pass

    def _get_copyright_from_line(self, line):
        """
        Get the copyright info from the line.

        Returns (owner, year) or None.
        """
        m = self.copyright_line.search(line)
        if m is None:
            return None
        owner = m.group(1)
        years = [y.strip() for y in m.group(2).split(',')]
        return (owner, years)

    def _is_copyright_line(self, line):
        return self.copyright_line.search(line) is not None

    def _get_copyright_lines():
        pass

    def _serialize_occurrences(self, occurrences):
        """Serialize the occurrences list for saving to db."""
        return ', '.join(
            [':'.join([i for i in t ]) for t in occurrences]
        )


class GettextCompiler(PluralCompiler):
    """Base compiler for gettext files."""

    def _pre_compile(self, content):
        super(GettextCompiler, self)._pre_compile(content)
        self.po = polib.pofile(content)
        self._update_headers(po=self.po)

    def _update_headers(self, po):
        """Update the headers of a compiled po file."""
        po.metadata['Project-Id-Version'] = self.resource.project.name
        content_type = u"text/plain; charset=%s" % self.format_encoding
        po.metadata['Content-Type'] = content_type
        # The above doesn't change the charset of the actual object, so we
        # need to do it for the pofile object as well.
        po.encoding = self.format_encoding
        revision_date = self.resource.created.strftime("%Y-%m-%d %H:%M+0000")
        po.metadata['PO-Revision-Date'] = revision_date
        plurals = "nplurals=%s; plural=%s;" % (
            self.language.nplurals, self.language.pluralequation
        )
        po.metadata['Plural-Forms'] = plurals
        # The following is in the specification but isn't being used by po
        # files. What should we do?
        po.metadata['Language'] = self.language.code

        bug_tracker = self.resource.project.bug_tracker
        if bug_tracker:
            po.metadata['Report-Msgid-Bugs-To'] = bug_tracker

        if 'fuzzy' in po.metadata_is_fuzzy:
            po.metadata_is_fuzzy.remove('fuzzy')

        try:
            team = Team.objects.get(
                language=self.language,
                project=self.resource.project.outsource or self.resource.project
            )
        except Team.DoesNotExist:
            pass
        else:
            if team.mainlist:
                team_contact = "<%s>" % team.mainlist
            else:
                team_contact = "(http://%s%s)" % (
                    Site.objects.get_current().domain,
                    team.get_absolute_url()
                )
            po.metadata['Language-Team'] = "%s %s" % (
                self.language.name, team_contact
            )

        stat = RLStats.objects.by_resource(
            self.resource
        ).by_language(self.language)
        if stat and stat[0].last_committer:
            u = stat[0].last_committer
            last_translator = "%s <%s>" % (
                u.get_full_name() or u.username , u.email
            )
            po.metadata['Last-Translator'] = last_translator
            translation_revision_date = stat[0].last_update.strftime(
                "%Y-%m-%d %H:%M+0000"
            )
            po.metadata['PO-Revision-Date'] = translation_revision_date
        return po

    def _update_plural_hashes(self, translations, content):
        """Update plural hashes for the target language."""
        for entry in itertools.ifilter(lambda e: e.msgid_plural, self.po):
            plural_keys = {}
            # last rule excluding other(5)
            lang_rules = self.language.get_pluralrules_numbers()
            # Initialize all plural rules up to the last
            string_hash = hash_tag(
                entry.msgid, escape_context(entry.msgctxt) or ''
            )
            for p in range(len(lang_rules)):
                plural_keys[p] = "%s_pl_%d" %(string_hash, p)
            entry.msgstr_plural = plural_keys
        return unicode(self.po)


class PoCompiler(GettextCompiler):
    """Compiler for PO files."""

    def _post_compile(self):
        """Add copyright headers, if any.

        We first try to find where to insert those. Then, we just concatenate
        them with the rest of the text.
        """
        super(PoCompiler, self)._post_compile()
        from transifex.addons.copyright.models import Copyright
        c = Copyright.objects.filter(
            resource=self.resource, language=self.language
        ).order_by('owner')
        copyrights_inserted = False
        lines = []
        for index, line in split_by_newline(self.compiled_template):
            if line.startswith('#'):
                if not line.startswith('# FIRST AUTHOR'):
                    lines.append(line)
            elif not copyrights_inserted:
                copyrights_inserted = True
                lines.append("# Translators:")
                for entry in c:
                    lines.append(
                        '# ' + entry.owner + ', ' + entry.years_text + "."
                    )
                lines.append(line)
            else:
                lines.append(line)
                break
        lines.append(self.compiled_template[index:])
        self.compiled_template = '\n'.join(lines)


class POHandler(GettextHandler):
    """Actual PO file implementation."""

    CompilerClass = PoCompiler

    @property
    def is_pot(self):
        return False

    def _parse_copyrights(self, content):
        """Read the copyrights (if any) from a po file."""
        # TODO remove FIRST AUTHOR line
        for line in content.split('\n'):
            if not line.startswith('#'):
                break
            c = self._get_copyright_from_line(line)
            if c is not None:
                self.copyrights.append(c)


class PotCompiler(GettextCompiler):
    """Compiler for POT files."""

    def __init__(self, *args, **kwargs):
        """Always use the empty applier for POT files."""
        super(PotCompiler, self).__init__(*args, **kwargs)
        self._tset = EmptyTranslationsBuilder()
        self._tdecorator = EmptyDecoratorBuilder()

    def _set_tdecorator(self, a):
        """Don't allow to change the translations decorator."""
    translation_decorator = property(fset=_set_tdecorator)

    def _set_tset(self, t):
        """Don't allow to change the translations set builder."""
    translation_set = property(fset=_set_tset)

    def _update_headers(self, po):
        project_name = self.resource.project.name.encode(self.format_encoding)
        content_type = "text/plain; charset=%s" % self.format_encoding
        po.metadata['Project-Id-Version'] = project_name
        po.metadata['Content-Type'] = content_type
        # The above doesn't change the charset of the actual object, so we
        # need to do it for the pofile object as well.
        po.encoding = self.format_encoding
        if self.resource.project.bug_tracker:
            bug_tracker = self.resource.project.bug_tracker.encode(self.format_encoding)
            po.metadata['Report-Msgid-Bugs-To'] = bug_tracker
        return po


class POTHandler(GettextHandler):
    """Separate class for POT files, which allows extra overrides."""

    name = "GNU Gettext *.POT handler"
    method_name = 'POT'
    format = "GNU Gettext Catalog (*.po, *.pot)"

    CompilerClass = PotCompiler

    @property
    def is_pot(self):
        return True

    def _get_translation(self, string, language, rule):
        # Override to avoid a db query.
        return ""

    def _update_plural_hashes(self, translations, content):
        """no-op method."""
        return content

    def set_language(self, language):
        """Accept a language set to None.

        This is useful when trying to GET a pot file.
        """
        if language is None:
            return
        super(POTHandler, self).set_language(language)

########NEW FILE########
__FILENAME__ = properties
# -*- coding: utf-8 -*-

"""
Generic properties format super class.
"""
from __future__ import absolute_import
import os, re
from django.utils.hashcompat import md5_constructor

from transifex.txcommon.log import logger
from transifex.resources.models import SourceEntity
from transifex.resources.formats.utils.decorators import *
from transifex.resources.formats.utils.hash_tag import hash_tag
from transifex.resources.formats.core import Handler, ParseError, CompileError
from transifex.resources.formats.resource_collections import StringSet, \
        GenericTranslation
from .compilation import Compiler, MarkedSourceCompilerFactory


class PropertiesParseError(ParseError):
    pass


class PropertiesCompileError(CompileError):
    pass


class PropertiesCompiler(Compiler):
    """Compiler for .properties formats."""

    def _post_compile(self):
        """Comment out source strings."""
        pattern = r'(?P<actual>.*)_txss'
        regex = re.compile(pattern)
        self.compiled_template = regex.sub(
            lambda m: '# '+ m.group('actual'), self.compiled_template
        )


class PropertiesHandler(MarkedSourceCompilerFactory, Handler):
    """
    Handler for PROPERTIES translation files.
    """

    HandlerParseError = PropertiesParseError
    HandlerCompileError = PropertiesCompileError

    SEPARATORS = [' ', '\t', '\f', '=', ':', ]
    comment_chars = ('#', '!', )

    def _escape(self, s):
        """Escape special characters in properties files.

        Java escapes the '=' and ':' in the value
        string with backslashes in the store method.
        So let us do the same.
        """
        s = s.replace(r'\t', '\t')\
            .replace(r'\f', '\f')\
            .replace(r'\n', '\n')\
            .replace(r'\r', '\r')
        s = (
            s.replace('\\', r'\\')
            .replace(':', r'\:')
            .replace('=', r'\=')
            .replace('!', r'\!')
            .replace('#', r'\#')
            .replace('\t', r'\t')
            .replace('\f', r'\f')
            .replace('\n', r'\n')
            .replace('\r', r'\r')
        )

        if s.startswith(' '):
            s = '\\' + s
        return s

    def _is_escaped(self, line, index):
        """Returns True, if the character at index is escaped by backslashes.

        There has to be an even number of backslashes before the character for
        it to be escaped.
        """
        nbackslashes = 0
        for c in reversed(line[:index]):
            if c == '\\':
                nbackslashes += 1
            else:
                break
        return nbackslashes % 2 == 1

    def _split(self, line):
        """
        Split a line in (key, value).

        The separator is the first non-escaped charcter of (\s,=,:).
        If no such character exists, the wholi line is a key with no value.
        """
        for i, c in enumerate(line):
            if c in self.SEPARATORS and not self._is_escaped(line, i):
                # Seperator found
                key = line[:i].lstrip()
                value = self._strip_separators(line[i+1:])
                return (key, value)
        return (line, None)

    def _strip_separators(self, s):
        """Strip separators from the front of the string s."""
        return s.lstrip(''.join(self.SEPARATORS))

    def _unescape(self, value):
        """Reverse the escape of special characters."""
        return (value.replace(r'\:', ':')
                     .replace(r'\#', '#')
                     .replace(r'\!', '!')
                     .replace(r'\=', '=')
                     .replace(r'\t', '\t')
                     .replace(r'\f', '\f')
                     .replace(r'\n', '\n')
                     .replace(r'\r', '\r')
                     .replace(r'\\', '\\')
        )

    def _visit_value(self, value):
        """Give a chance to check the value from the file before using it."""
        return value

    def _check_escaped_ws(self, line):
        if line and line.startswith('\\ '):
            line = line[1:]
        return line

    def _prepare_line(self, line):
        return line.rstrip('\r\n').lstrip()

    def _parse(self, is_source, lang_rules):
        """Parse a .properties content and create a stringset with
        all entries in it.
        """
        resource = self.resource

        context = ""
        self._find_linesep(self.content)
        template = u""
        lines = self._iter_by_line(self.content)
        for line in lines:
            line = self._prepare_line(line)
            # Skip empty lines and comments
            if not line or line.startswith(self.comment_chars):
                if is_source:
                    template += line + self.linesep
                continue
            # If the last character is a backslash
            # it has to be preceded by a space in which
            # case the next line is read as part of the
            # same property
            while line[-1] == '\\' and not self._is_escaped(line, -1):
                # Read next line
                nextline = self._prepare_line(lines.next())
                # This line will become part of the value
                line = line[:-1] + self._check_escaped_ws(nextline)
            key, value, old_value = self._key_value_from_line(line)
            if is_source:
                if not (value and value.strip()):
                    template += line + self.linesep
                    # Keys with no values should not be shown to translator
                    continue
                else:
                    key_len = len(key)
                    template += line[:key_len] + re.sub(
                        re.escape(old_value),
                        "%(hash)s_tr" % {'hash': hash_tag(key, context)},
                        line[key_len:]
                    ) + self.linesep
            elif not SourceEntity.objects.filter(resource=resource, string=key).exists():
                # ignore keys with no translation
                continue
            self.stringset.add(GenericTranslation(
                    key, self._unescape(value), context=context
            ))
        if is_source:
            template = template[:-1*(len(self.linesep))]
        return template

    def _key_value_from_line(self, line):
        """Get the key and the value from a line of the file."""
        key, value = self._split(line)
        value_ = self._check_escaped_ws(value)
        return (key, self._visit_value(value_), value)


########NEW FILE########
__FILENAME__ = splitters
# -*- coding: utf-8 -*-
import re
from transifex.resources.formats.validators import \
    PrintfFormatNumberValidator as PrintfValidator


def next_splitter_or_func(string, splitters, func, pseudo_type):
    """
    Helper for doing the next splitter check.
    
    If the list is not empty, call the next splitter decorator appropriately,
    otherwise call the decorated function.
    """
    if splitters:
        return splitters[0](string, splitters[1:])(func)(pseudo_type, 
            string)
    else:
        return func(pseudo_type, string)  


class SplitterDecorators(object):
    """
    A class decorator that receives a list of splitter decorator classes and
    calls the first splitter from the list passing the decorated function as
    an argument as well as the list of splitters without the called splitter.
    
    In case the list of splitters is empty, it calls the decorated function
    right away. 
    
    This decorator must be only used with method of classes inheriting from
    ``transifex.resources.formats.pseudo.PseudoTypeMixin``.
    """
    def __init__(self, splitters):
        self.splitters = splitters  
    
    def __call__(self, func):  
        def _wrapper(pseudo_type, string):  
            return next_splitter_or_func(string, self.splitters, func, 
                pseudo_type)
        return _wrapper  


class BaseSplitter(object):
    """
    Base class decorator for splitting a given string based on a regex and 
    call the subsequent splitter class available in the ``splitters`` var or 
    the decorated method.
    """
    REGEX = r''

    def __init__(self, string, splitters):
        self.string = string
        self.splitters = splitters  

    def __call__(self, func):
        def _wrapped(pseudo_type, string, **kwargs):
            text=[]
            keys = [l.group() for l in self._regex_matches(string)]
            nkeys = len(keys)
            i=0
            for key in keys:
                t = string.split(key,1)
                string = t[0]
                string = next_splitter_or_func(string, self.splitters, 
                    func, pseudo_type) 
                text.extend([string, key])
                i += 1
                string = t[1]
            string = next_splitter_or_func(string, self.splitters, 
                func, pseudo_type)
            text.append(string)
            return "".join(text)
        return _wrapped

    @classmethod
    def _regex_matches(cls, string):
        return re.finditer(cls.REGEX, string)


class PrintfSplitter(BaseSplitter):
    """
    Split the string on printf placeholders, such as %s, %d, %i, %(foo)s, etc.
    """
    # Lets reuse the printf regex from the validators
    REGEX = PrintfValidator.printf_re


class TagSplitter(BaseSplitter):
    """
    Split the string on XML/HTML tags, such as <b>, </b>, <a href="">, etc.
    """
    REGEX = r'(<|&lt;)(.|\n)*?(>|&gt;)'


class EscapedCharsSplitter(BaseSplitter):
    """
    Split the string on escaped chars, such as \\\\n, \\\\t, etc.
    """
    REGEX = r'(\\\\[\w]{1})'


class HTMLSpecialEntitiesSplitter(BaseSplitter):
    """
    Splits the string on HTML special entities, such as &lt;, &amp;, etc.
    """
    REGEX = r'&[a-zA-Z]+;'
########NEW FILE########
__FILENAME__ = types
# -*- coding: utf-8 -*-
import re, random
from django.conf import settings
from transifex.resources.formats.pseudo import PseudoTypeMixin
from transifex.resources.formats.pseudo.splitters import *


class BracketsPseudoType(PseudoTypeMixin):
    """Pseudo type for adding square brackets around a string."""

    def _po(self, string):
        """
        Custom pseudo method for PO based resources.
        
        Translations must begin and end with \n if the msgid does so.
        """
        return self._skip_char_around(string, char='\\\\n')

    def _properties(self, string):
        """
        Custom pseudo method for PROPERTIES based resources.
        
        Translations with " (quote) around it should be kept like that.
        """
        #FIXME: It might not be really needed for java .properties files.
        # It was possible to find some .properties files that where using
        # KEY="string" structure, but apparently they were PHP based files.
        # In any case, lets keep it here until we be sure of its needed, once
        # it shouldn't affect the real Java .properties files.
        return self._skip_char_around(string, char='"')

    def _base_compile(self, string):
        return u'[' + string + u']'


class UnicodePseudoType(PseudoTypeMixin):
    """
    Pseudo type for converting all chars of a string into unicode chars that 
    look alike.
    """
    
    UNICODE_MAP = u"ȦƁƇḒḖƑƓĦĪĴĶĿḾȠǾƤɊŘŞŦŬṼẆẊẎẐ" + u"[\\]^_`" + \
        u"ȧƀƈḓḗƒɠħīĵķŀḿƞǿƥɋřşŧŭṽẇẋẏẑ"

    @classmethod
    def _transpose(cls, char):
        """Convert unicode char to something similar to it."""
        try:
            loc = ord(char)-65
            if loc < 0 or loc > 56:
                return char
            return cls.UNICODE_MAP[loc]
        except UnicodeDecodeError:
            return char

    @SplitterDecorators([TagSplitter, HTMLSpecialEntitiesSplitter, 
        PrintfSplitter, EscapedCharsSplitter])
    def _base_compile(self, string):
        return "".join(map(self._transpose, string))


class PLanguagePseudoType(PseudoTypeMixin):
    """
    Pseudo type for increasing the length of a string by around 30-50% 
    replacing the vowels with unicode chars that look alike.
    
    This pseudo type is based on a P-language, which is a simple 
    vowel-extending language. Examples:
    - "hello" becomes "héPéllôPô": hé + Pé + llô +Pô
    - "because" becomes "béPécåüPåüséPé": bé + Pé + cåü + Påü + sé + Pé
    
    Reference:
    http://src.chromium.org/viewvc/chrome/trunk/src/tools/grit/grit/pseudo.py
    """

    # Hebrew character Qof. It looks kind of like a 'p'.
    _QOF = u'\u05e7'   

    # How we map each vowel.
    _VOWELS = {
    u'a' : u'\u00e5',  # a with ring
    u'e' : u'\u00e9',  # e acute
    u'i' : u'\u00ef',  # i diaresis
    u'o' : u'\u00f4',  # o circumflex
    u'u' : u'\u00fc',  # u diaresis
    u'y' : u'\u00fd',  # y acute
    u'A' : u'\u00c5',  # A with ring
    u'E' : u'\u00c9',  # E acute
    u'I' : u'\u00cf',  # I diaresis
    u'O' : u'\u00d4',  # O circumflex
    u'U' : u'\u00dc',  # U diaresis
    u'Y' : u'\u00dd',  # Y acute
    }

    # Matches vowels and P
    _PSUB_RE = re.compile("(%s)" % '|'.join(_VOWELS.keys() + ['P']))

    @classmethod
    def Repl(cls, match):
        if match.group() == 'p':
            if also_p:
                return _QOF
            else:
                return 'p'
        else:
            return cls._VOWELS[match.group()]

    @classmethod
    def _MapVowels(cls, string, also_p=False):
        """
        Return a copy of ``string`` where characters that exist as keys in
        cls._VOWELS have been replaced with the corresponding value.  If 
        also_p is True, this function will also change capital P characters 
        into a Hebrew character Qof.
        """
        return cls._PSUB_RE.sub(cls.Repl, string)

    @SplitterDecorators([TagSplitter, HTMLSpecialEntitiesSplitter, 
        PrintfSplitter, EscapedCharsSplitter])
    def _base_compile(self, string):
        outstr = u''
        ix = 0
        while ix < len(string):
            if string[ix] not in self._VOWELS.keys():
                outstr += string[ix]
                ix += 1
            else:
                # We want to treat consecutive vowels as one composite vowel.
                consecutive_vowels = u''
                while ix < len(string) and string[ix] in self._VOWELS.keys():
                    consecutive_vowels += string[ix]
                    ix += 1
                changed_vowels = self._MapVowels(consecutive_vowels)
                outstr += changed_vowels
                outstr += self._QOF
                outstr += changed_vowels
        return outstr


#NOTE: Inherits custom methods from BracketsPseudoType
class ExtendPseudoType(BracketsPseudoType):
    """
    Pseudo type for increasing the length of a string by around 20-700% 
    appending special chars (Greek, Chinese, etc) to the end of the string.
    """

    chars = [
        u'\u0131',
        u'\u017f',
        u'\u01c5',
        u'\u01c8',
        u'\u01cb',
        u'\u01f2',
        u'\u0390',
        u'\u03b0',
        u'\u03c2',
        u'\u03d0',
        u'\u03d1',
        u'\u03d5',
        u'\u03d6',
        u'\u03f0',
        u'\u03f1',
        u'\u03f5',
        u'\u1e9b',
        u'\u9db1',
        u'\u9750',
        u'\u884b'
        ]

    def create_extented_text(self, string):

        size = len(string)
        
        # Strings bigger then 50 chars should be increased by 20%. The others
        # should use an equation, so smaller strings can be increased more.
        if size > 49:
            n = int(size * 0.2)
        else:
            n = int(((size*(6.8/(size/3+1)**1.13+1))-size))
        
        # FIXME: Count [, ] and whitespace ahead of time, because it's gonna 
        # be used in the MixedPseudoTypes class.
        n -= 3
        chars_lenght = len(self.chars) -1        
        # Get list of chars to append from the string itself
        chars_list = list(string[:n].strip())
        
        # If `'I'[:7]` it will return only one char, then we need to append
        # 6 more.
        if len(chars_list) > n:
            n2 = len(chars_list) - n
            chars_list += self.chars[n2:]

        # For each char in chars_list replace the char with a special char 
        # from self.chars, unless the char is a whitespace.
        for k, c in enumerate(chars_list):
            if chars_list[k] == ' ':
                continue          
            chars_list[k] = self.chars[random.randint(0, chars_lenght)]
        
        return u''.join(chars_list)

    def _base_compile(self, string):
        return string + ' ' + self.create_extented_text(string)


class MixedPseudoTypes(ExtendPseudoType, UnicodePseudoType, BracketsPseudoType):
    """
    Pseudo type which combines three other pseudo types.
    
    Types:
        ExtendPseudoType
        UnicodePseudoType
        BracketsPseudoType
        
    Refer to theirs docstrings for more info.
    """

    def _base_compile(self, string):
        # Execute _base_compile from each parent class
        for c in self.__class__.__bases__:
            string = c._base_compile(self, string)
        return string



########NEW FILE########
__FILENAME__ = qt
# -*- coding: utf-8 -*-

"""
Qt4 TS file parser for Python
"""
from __future__ import absolute_import
import re, collections
import time
import xml.dom.minidom
import xml.parsers.expat
from xml.sax.saxutils import escape as xml_escape
from django.db import transaction
from django.db.models import get_model
from django.utils.translation import ugettext, ugettext_lazy as _
from transifex.txcommon.log import logger
from transifex.txcommon.exceptions import FileCheckError
from transifex.resources.formats.core import ParseError, CompileError, \
        Handler, STRICT
from .compilation import PluralCompiler, SimpleCompilerFactory
from transifex.resources.formats.resource_collections import StringSet, \
        GenericTranslation
from suggestions.models import Suggestion
from transifex.resources.formats.utils.decorators import *
from transifex.resources.formats.utils.hash_tag import hash_tag,\
        escape_context, hash_regex


# Resources models
Resource = get_model('resources', 'Resource')
Translation = get_model('resources', 'Translation')
SourceEntity = get_model('resources', 'SourceEntity')


class LinguistParseError(ParseError):
    pass


class LinguistCompileError(CompileError):
    pass


def _context_of_message(message):
    """Get the context value of a message node."""
    context_node = message.parentNode
    context_name_element = _getElementByTagName(context_node, "name")
    if context_name_element.firstChild:
        if context_name_element.firstChild.nodeValue:
            context_name = escape_context(
                [context_name_element.firstChild.nodeValue])
        else:
            context_name = []
    else:
        context_name = []
    try:
        c_node = _getElementByTagName(message, "comment")
        comment_text = _getText(c_node.childNodes)
        if comment_text:
            comment = escape_context([comment_text])
        else:
            comment = []
    except LinguistParseError, e:
        comment = []
    return (context_name + comment) or "None"


def _getElementByTagName(element, tagName, noneAllowed = False):
    elements = element.getElementsByTagName(tagName)
    if not noneAllowed and not elements:
        raise LinguistParseError(_("Element '%s' not found!" % tagName))
    if len(elements) > 1:
        raise LinguistParseError(_("Multiple '%s' elements found!" % tagName))
    return elements[0]


def _get_attribute(element, key, die = False):
    if element.attributes.has_key(key):
        return element.attributes[key].value
    elif die:
        raise LinguistParseError("Could not find attribute '%s' "\
            "for element '%s'" % (key, element.tagName))
    else:
        return None


def _getText(nodelist):
    rc = []
    for node in nodelist:
        if hasattr(node, 'data'):
            rc.append(node.data)
        else:
            rc.append(node.toxml())
    return ''.join(rc)


class QtCompiler(PluralCompiler):
    """Compiler for Qt resources."""

    def _update_plural_hashes(self, translations, content):
        """Add plurals hashes"""
        language = self.language
        doc = xml.dom.minidom.parseString(content.encode('utf-8'))
        root = doc.documentElement
        root.attributes["language"] = language.code

        md5_pattern = r'[0-9a-f]{32}'
        plural_pattern = r'(?P<md5>%s)_pl_\d' % md5_pattern
        plural_regex = re.compile(plural_pattern, re.IGNORECASE)
        for message in doc.getElementsByTagName("message"):
            translation = _getElementByTagName(message, "translation")
            if message.attributes.has_key("numerus") and \
                message.attributes['numerus'].value=='yes':
                source = _getElementByTagName(message, "source")
                numerusforms = message.getElementsByTagName('numerusform')

                # If we have an id for the message use this as the source
                # string, otherwise use the actual source string
                if message.attributes.has_key("id"):
                    sourceString = message.attributes['id'].value
                else:
                    sourceString = _getText(source.childNodes)

                #update plural hashes for target language
                plural_keys = {}
                lang_rules = language.get_pluralrules_numbers()
                m = plural_regex.search(numerusforms[0].firstChild.data)
                if m:
                    translation.childNodes  = []
                    string_hash = m.group('md5')
                    # Initialize all plural rules up to the las
                    for p,n in enumerate(lang_rules):
                        plural_keys[p] = "%s_pl_%d" % (string_hash, p)

                    message.setAttribute('numerus', 'yes')
                    for key in plural_keys.iterkeys():
                        e = doc.createElement("numerusform")
                        e.appendChild(
                            doc.createTextNode(plural_keys[key])
                        )
                        translation.appendChild(e)
                        if not translations[plural_keys[key]]:
                            translation.attributes['type'] = 'unfinished'
            else:
                if not translation.childNodes:
                    # Translation elemnent should have only one tag, the text
                    translation.attributes['type'] = 'unfinished'
                elif not translations.get(translation.childNodes[0].nodeValue, None):
                    translation.attributes['type'] = 'unfinished'
                    translation.childNodes = []

        return doc.toxml()

    def _post_compile(self):
        super(QtCompiler, self)._post_compile(self.compiled_template)
        esc_template_text = re.sub("'(?=(?:(?!>).)*<\/source>)",
            r"&apos;", self.compiled_template)
        esc_template_text = re.sub("'(?=(?:(?!>).)*<\/translation>)",
            r"&apos;", esc_template_text)
        self.compiled_template = esc_template_text


class LinguistHandler(SimpleCompilerFactory, Handler):
    name = "Qt4 TS parser"
    format = "Qt4 Translation XML files (*.ts)"
    method_name = 'QT'

    HandlerParseError = LinguistParseError
    HandlerCompileError = LinguistCompileError
    CompilerClass = QtCompiler

    def _escape(self, s):
        return xml_escape(s, {"'": "&apos;", '"': '&quot;'})

    def _parse(self, is_source, lang_rules):
        """
        Parses Qt file and exports all entries as GenericTranslations.
        """
        def clj(s, w):
            return s[:w].replace("\n", " ").ljust(w)

        if lang_rules:
            nplural = len(lang_rules)
        else:
            nplural = self.language.get_pluralrules_numbers()

        try:
            doc = xml.dom.minidom.parseString(
                self.content.encode(self.format_encoding)
            )
        except Exception, e:
            logger.warning("QT parsing: %s" % e.message, exc_info=True)
            raise LinguistParseError(_(
                "Your file doesn't seem to contain valid xml: %s!" % e.message
            ))
        if hasattr(doc, 'doctype') and hasattr(doc.doctype, 'name'):
            if doc.doctype.name != "TS":
                raise LinguistParseError(_("Incorrect doctype!"))
        else:
            raise LinguistParseError(_("Uploaded file has no Doctype!"))
        root = doc.documentElement
        if root.tagName != "TS":
            raise LinguistParseError(_("Root element is not 'TS'"))

        # This needed to be commented out due the 'is_source' parameter.
        # When is_source=True we return the value of the <source> node as the
        # translation for the given file, instead of the <translation> node(s).
        #stringset.target_language = language
        #language = get_attribute(root, "language", die = STRICT)

        i = 1
        # There can be many <message> elements, they might have
        # 'encoding' or 'numerus' = 'yes' | 'no' attributes
        # if 'numerus' = 'yes' then 'translation' element contains 'numerusform' elements
        for context in root.getElementsByTagName("context"):
            context_name_element = _getElementByTagName(context, "name")
            if context_name_element.firstChild:
                if context_name_element.firstChild.nodeValue:
                    context_name = escape_context(
                        [context_name_element.firstChild.nodeValue])
                else:
                    context_name = []
            else:
                context_name = []

            for message in context.getElementsByTagName("message"):
                occurrences = []

                # NB! There can be zero to many <location> elements, but all
                # of them must have 'filename' and 'line' attributes
                for location in message.getElementsByTagName("location"):
                    if location.attributes.has_key("filename") and \
                        location.attributes.has_key("line"):
                        occurrences.append("%s:%i" % (
                            location.attributes["filename"].value,
                            int(location.attributes["line"].value)))
                    elif STRICT:
                        raise LinguistParseError(_("Malformed 'location' element"))

                pluralized = False
                if message.attributes.has_key("numerus") and \
                    message.attributes['numerus'].value=='yes':
                    pluralized = True

                source = _getElementByTagName(message, "source")
                try:
                    translation = _getElementByTagName(message, "translation")
                except LinguistParseError:
                    translation = None
                try:
                    ec_node = _getElementByTagName(message, "extracomment")
                    extracomment = _getText(ec_node.childNodes)
                except LinguistParseError, e:
                    extracomment = None

                # <commend> in ts files are also used to distinguish entries,
                # so we append it to the context to make the entry unique
                try:
                    c_node = _getElementByTagName(message, "comment")
                    comment_text = _getText(c_node.childNodes)
                    if comment_text:
                        comment = escape_context([comment_text])
                    else:
                        comment = []
                except LinguistParseError, e:
                    comment = []

                status = None
                if source.firstChild:
                    sourceString = _getText(source.childNodes)
                else:
                    sourceString = None # WTF?

                # Check whether the message is using logical id
                if message.attributes.has_key("id"):
                    sourceStringText = sourceString
                    sourceString = message.attributes['id'].value
                else:
                    sourceStringText = None

                same_nplural = True
                obsolete, fuzzy = False, False
                messages = []

                if is_source:
                    if translation and translation.attributes.has_key("variants") and \
                      translation.attributes['variants'].value == 'yes':
                        logger.error("Source file has unsupported"
                            " variants.")
                        raise LinguistParseError(_("Qt Linguist variants are"
                            " not yet supported."))

                    # Skip obsolete strings.
                    if translation and translation.attributes.has_key("type"):
                        status = translation.attributes["type"].value.lower()
                        if status == "obsolete":
                            continue

                    translation_text = None
                    if translation:
                        translation_text = _getText(translation.childNodes)
                    messages = [(5, translation_text or sourceStringText or sourceString)]
                    # remove unfinished/obsolete attrs from template
                    if translation and translation.attributes.has_key("type"):
                        status = translation.attributes["type"].value.lower()
                        if status == "unfinished":
                            del translation.attributes["type"]
                    if pluralized:
                        if translation:
                            try:
                                numerusforms = translation.getElementsByTagName('numerusform')
                                messages = []
                                for n,f in enumerate(numerusforms):
                                    if numerusforms[n].attributes.has_key("variants") and \
                                      numerusforms[n].attributes['variants'].value == 'yes':
                                        logger.error("Source file has unsupported"
                                            " variants.")
                                        raise LinguistParseError(_("Source file"
                                            " could not be imported: Qt Linguist"
                                            " variants are not supported."))
                                for n,f in enumerate(numerusforms):
                                    if numerusforms[n].attributes.has_key("variants") and \
                                      numerusforms[n].attributes['variants'].value == 'yes':
                                        continue
                                for n,f in enumerate(numerusforms):
                                    nf=numerusforms[n]
                                    messages.append((nplural[n], _getText(nf.childNodes)
                                        or sourceStringText or sourceString ))
                            except LinguistParseError, e:
                                pass
                        else:
                            plural_numbers = self.language.get_pluralrules_numbers()
                            for p in plural_numbers:
                                if p != 5:
                                    messages.append((p, sourceStringText or sourceString))

                elif translation and translation.firstChild:
                    # For messages with variants set to 'yes', we skip them
                    # altogether. We can't support variants at the momment...
                    if translation.attributes.has_key("variants") and \
                      translation.attributes['variants'].value == 'yes':
                        continue

                    # Skip obsolete strings.
                    if translation.attributes.has_key("type"):
                        status = translation.attributes["type"].value.lower()
                        if status == "obsolete":
                            continue

                    if translation.attributes.has_key("type"):
                        status = translation.attributes["type"].value.lower()
                        if status == "unfinished" and\
                          not pluralized:
                            suggestion = GenericTranslation(sourceString,
                                _getText(translation.childNodes),
                                context=context_name + comment,
                                occurrences= ";".join(occurrences))
                            self.suggestions.add(suggestion)
                        else:
                            logger.error("Element 'translation' attribute "\
                                "'type' is neither 'unfinished' nor 'obsolete'")

                        continue

                    if not pluralized:
                        messages = [(5, _getText(translation.childNodes))]
                    else:
                        numerusforms = translation.getElementsByTagName('numerusform')
                        try:
                            for n,f  in enumerate(numerusforms):
                                if numerusforms[n].attributes.has_key("variants") and \
                                  numerusforms[n].attributes['variants'].value == 'yes':
                                    raise StopIteration
                        except StopIteration:
                            continue
                        if nplural:
                            nplural_file = len(numerusforms)
                            if len(nplural) != nplural_file:
                                logger.error("Passed plural rules has nplurals=%s"
                                    ", but '%s' file has nplurals=%s. String '%s'"
                                    "skipped." % (nplural, self.filename,
                                     nplural_file, sourceString))
                                same_nplural = False
                        else:
                            same_nplural = False

                        if not same_nplural:
                            # If we're missing plurals, skip them altogether
                            continue

                        for n,f  in enumerate(numerusforms):
                            nf=numerusforms[n]
                            if nf.firstChild:
                                messages.append((nplural[n], _getText(nf.childNodes)))

                    # NB! If <translation> doesn't have type attribute, it means that string is finished

                if sourceString and messages:
                    for msg in messages:
                        self._add_translation_string(
                            sourceString, msg[1],
                            context = context_name + comment, rule=msg[0],
                            occurrences = ";".join(occurrences),
                            pluralized=pluralized, fuzzy=fuzzy,
                            comment=extracomment, obsolete=obsolete)
                i += 1

                if is_source:
                    if sourceString is None:
                        continue
                    if message.attributes.has_key("numerus") and \
                        message.attributes['numerus'].value=='yes' and translation:
                            numerusforms = translation.getElementsByTagName('numerusform')
                            for n,f in enumerate(numerusforms):
                                f.appendChild(doc.createTextNode(
                                        "%(hash)s_pl_%(key)s" %
                                        {
                                            'hash': hash_tag(sourceString,
                                                context_name + comment),
                                            'key': n
                                        }
                                ))
                    else:
                        if not translation:
                            translation = doc.createElement("translation")

                        # Delete all child nodes. This is usefull for xml like
                        # strings (eg html) where the translation text is split
                        # in multiple nodes.
                        translation.childNodes = []

                        translation.appendChild(doc.createTextNode(
                                ("%(hash)s_tr" % {'hash': hash_tag(
                                    sourceString, context_name + comment)})
                        ))
        return doc

    def _generate_template(self, doc):
        # Ugly fix to revert single quotes back to the escaped version
        template_text = doc.toxml().encode('utf-8')
        esc_template_text = re.sub(
            "'(?=(?:(?!>).)*<\/source>)",
            r"&apos;", template_text
        )
        return esc_template_text

########NEW FILE########
__FILENAME__ = registry
# -*- coding: utf-8 -*-
"""
Register the available formats and their capabilities.
"""

from django.conf import settings
from django.utils.safestring import SafeString
from transifex.txcommon import import_to_python
from transifex.txcommon.log import logger


class _FormatsRegistry(object):
    """Registry class for the formats."""

    def __init__(self, methods=None, handlers=None):
        """It initializes the variables of the registry.

        The variables are:
            methods: A dictionary of the available methods.
            handlers: A dictionary of the available handlers.
        """
        self.methods = methods or settings.I18N_METHODS
        self.handlers = {}
        handlers = handlers or settings.I18N_HANDLER_CLASS_NAMES
        for method, klass in handlers.iteritems():
            self.handlers[method] = import_to_python(klass)

    def _string_to_list(self, string):
        """
        Convert a string of multiple items separated by commas and spaces
        to a list.
        """
        return string.split(', ')

    def add_handler(self, m, klass, priority=False):
        """Register a new handler for the type m.

        Args:
            m: A i18n_method.
            klass: A handler class for the specified method.
            priority: if this is a priority request, then register the
                 handler for the method anyway. Else, ignore the request.
        Returns:
            True, if the handler was added successfully, False otherwise.
        """
        if m in self.handlers and not priority:
            return False
        self.handlers[m] = klass
        return True

    @property
    def available_methods(self):
        """Get the available methods."""
        methods = self.methods.copy()
        del methods['POT']
        return methods

    def descriptions(self):
        """Get the available descriptions along with the
        method they correspond to.
        """
        return [
            (m, SafeString('%s (%s)' % (v['description'], v['file-extensions'])))
            for m, v in self.methods.items()
            if m != 'POT' and m != 'HTML_LEGACY' and m != 'XHTML_LEGACY'
        ]

    def extensions_for(self, m):
        """Get the extensions for the specified method.

        Returns:
            A list of file extensions or an empty list,
            in case no such method exists.
        """
        if m not in self.methods:
            return []
        return self._string_to_list(self.methods[m]['file-extensions'])

    def guess_method(self, filename=None, mimetype=None):
        """
        Return an appropriate Handler class for given file.

        The handler is selected based on the file extension
        or the mime type.

        Args:
            filename: The path to the file.
            mimetype: The mime type of the file.

        Returns:
            An appropriate handler class for the file.
        """
        i18n_type = None
        if filename is not None:
            for method, info in self.methods.items():
                if filter(filename.endswith, info['file-extensions'].split(', ')):
                    i18n_type = method
                    break
        elif mimetype is not None:
            for method in self.handlers:
                if mimetype in self.mimetypes_for(method):
                    i18n_type = method
                    break

        return i18n_type

    def is_supported(self, m):
        """Check whether the method is supported.

        Args:
            m: The method to check.
        Returns:
            True, if it is supported. Else, False.
        """
        return m in self.methods

    def mimetypes_for(self, m):
        """Get the mimetypes for the specified method.

        Args:
            m: The method which we want the mimetypes for.

        Returns:
            The mimetypes for the method or an empty list.
        """
        if m not in self.methods:
            return []
        return self._string_to_list(self.methods[m]['mimetype'])

    def handler_for(self, m):
        """Return a handler for the i18n type specified.

        Args:
            m: A i18n_method.
            filename: The filename (if available).

        Returns:
            A particular handler for the method or None, in case the method
            has not been registered.
        """
        if m not in self.handlers:
            return None
        return self.handlers[m]()

    def appropriate_handler(self, resource, language, **kwargs):
        """Return the appropriate handler based on the arguments.

        The arguments may be the filename of the resource or whether
        a pot file has been requested.

        Args:
            resource: The resource the handler is for.
            language: The language the handler is asked for.
        Returns:
            A subclass of formats.core.Handler or None.
        """
        method = resource.i18n_type
        handler = registry.handler_for

        # Only PO/POT files need special treatment
        if method != 'PO':
            return handler(method)

        # Override the behavior manually
        wants_pot = kwargs.get('wants_pot')
        if wants_pot:
            return handler('POT')

        # Check file extension
        filename = kwargs.get('filename')
        if filename is not None:
            if filename.endswith('po'):
                return handler('PO')
            else:
                return handler('POT')

        # Return POT, when no language has been asked
        if language is None:
            return handler('POT')
        return handler('PO')

        # # Always return PO for non-source language files
        # slang = resource.source_language
        # if language != slang:
        #     return handler('PO')

        # Should never be here
        return None

    def file_extension_for(self, resource, language):
        """Return the filename extension that should be used
        for the specific resource-language pair.
        """
        resource_method = resource.i18n_method
        try:
            if resource_method != 'PO':
                return self.extensions_for(resource_method)[0]
            if language is None:
                return self.extensions_for('POT')[0]
            return self.extensions_for(resource_method)[0]
        except IndexError, e:
            msg = "No extensions for resource %s: %s"
            logger.error(msg % (resource, e), exc_info=True)
            raise

registry = _FormatsRegistry()

########NEW FILE########
__FILENAME__ = resource_collections
# -*- coding: utf-8 -*-
"""A series of classes that hold collections of the resources' app objects."""

from django.utils import simplejson as json
from transifex.resources.models import SourceEntity, Translation
from transifex.resources.formats.utils.hash_tag import hash_tag
from transifex.txcommon.log import logger


class StringSet(object):
    """Store a list of Translation objects for a given language."""

    def __init__(self):
        # We use a list to sort strings in order and a
        # set to store already seen entries.
        self._strings = []
        self._seen = set()
        self.target_language = None
        self._order = 0

    def add(self, translation):
        """Add a new translation.

        Duplicates are ignored.
        """
        if translation not in self._seen:
            translation.order = self._order
            self._order += 1
            self._strings.append(translation)
            self._seen.add(translation)

    def __in__(self, elem):
        return elem in self._strings

    def __iter__(self):
        return iter(self._strings)

    def __len__(self):
        return len(self._strings)

    def to_json(self):
        return json.dumps(self, cls=CustomSerializer)


class GenericTranslation(object):
    """Store translations of any kind of I18N type (POT, Qt, etc...).

    Parameters:
        source_entity - The original entity found in the source code.
        translation - The related source_entity written in another language.
        context - The related context for the source_entity.
        occurrences - Occurrences of the source_entity from the source code.
        comments - Comments for the given source_entity from the source code.
        rule - Plural rule 0=zero, 1=one, 2=two, 3=few, 4=many or 5=other.
        pluralized - True if the source_entity is a plural entry.
        fuzzy - True if the translation is fuzzy/unfinished
        obsolete - True if the entity is obsolete
    """
    def __init__(self, source_entity, translation, occurrences=None,
            comment=None, flags=None, context=None, rule=5, pluralized=False,
            fuzzy=False, obsolete=False, order=None):
        self.source_entity = source_entity
        self.translation = translation
        self.context = context
        self.occurrences = occurrences
        self.comment = comment
        self.flags = flags
        self.rule = int(rule)
        self.pluralized = pluralized
        self.fuzzy = fuzzy
        self.obsolete = obsolete
        self.order = order

    def __hash__(self):
        return hash((self.source_entity, tuple(self.context), self.rule))

    def __eq__(self, other):
        correct_class = isinstance(other, self.__class__)
        same_se = self.source_entity == other.source_entity
        same_ctxt = self.context == other.context
        same_rule = self.rule == other.rule
        if all([correct_class, same_se, same_ctxt, same_rule]):
            return True
        return False

    def __unicode__(self):
        msg = u'(%s, %s): %s'
        return msg % (self.source_entity, self.context, self.translation)


class ResourceItems(object):
    """base class for collections for resource items (source entities,
    translations, etc).
    """

    def __init__(self):
        self._items = {}

    def get(self, item):
        """Get a source entity in the collection or None."""
        key = self._generate_key(item)
        return self._items.get(key, None)

    def add(self, item):
        """Add a source entity to the collection."""
        key = self._generate_key(item)
        self._items[key] = item

    def __contains__(self, item):
        key = self._generate_key(item)
        return key in self._items

    def __iter__(self):
        return iter(self._items)


class SourceEntityCollection(ResourceItems):
    """A collection of source entities."""

    def _generate_key(self, se):
        """Generate a key for this se, which is guaranteed to
        be unique within a resource.
        """
        if isinstance(se, GenericTranslation):
            return self._create_unique_key(se.source_entity, se.context)
        elif isinstance(se, SourceEntity):
            return self._create_unique_key(se.string, se.context)

    def _create_unique_key(self, source_string, context):
        """Create a unique key based on the source_string and the context.

        Args:
            source_string: The source string.
            context: The context.
        Returns:
            A tuple to be used as key.
        """
        if not context:
            return (source_string, u'None')
        elif isinstance(context, list):
            return (source_string, u':'.join(x for x in context))
        else:
            return (source_string, context)

    def se_ids(self):
        """Return the ids of the sourc entities."""
        return set(map(lambda se: se.id, self._items.itervalues()))


class TranslationCollection(ResourceItems):
    """A collection of translations."""

    def _generate_key(self, t):
        """Generate a key for this se, which is guaranteed to
        be unique within a resource.

        Args:
            t: a translation (sort of) object.
            se_id: The id of the source entity of this translation.
        """
        if isinstance(t, Translation):
            return self._create_unique_key(t.source_entity_id, t.rule)
        elif isinstance(t, tuple):
            return self._create_unique_key(t[0].id, t[1].rule)
        else:
            return None

    def _create_unique_key(self, se_id, rule):
        """Create a unique key based on the source_string and the context.

        Args:
            se_id: The id of the source string this translation corresponds to.
            rule: The rule of the language this translation is for.
        Returns:
            A tuple to be used as key.
        """
        assert se_id is not None
        return (se_id, rule)

    def se_ids(self):
        """Get the ids of the source entities in the collection."""
        return set(map(lambda t: t[0], self._items.iterkeys()))

########NEW FILE########
__FILENAME__ = strings
# -*- coding: utf-8 -*-

"""
Apple strings file handler/compiler
"""

from __future__ import absolute_import
import codecs, os, re, chardet
from transifex.txcommon.log import logger
from transifex.resources.models import SourceEntity, Template
from transifex.resources.formats.utils.decorators import *
from transifex.resources.formats.utils.hash_tag import hash_tag
from transifex.resources.formats.core import Handler, ParseError, CompileError
from transifex.resources.formats.resource_collections import StringSet, \
        GenericTranslation
from .compilation.compilers import Compiler
from .compilation.factories import CompilerFactory
from .compilation.mode import Mode
from .compilation.builders import MarkedSourceTranslationsBuilder,\
        AllTranslationsBuilder, ReviewedTranslationsBuilder


class StringsParseError(ParseError):
    pass


class StringsCompileError(ParseError):
    pass


class AppleMarkedSourceCompilerFactory(CompilerFactory):
    """Use source strings, but mark them."""

    def _get_translation_setter(self, language, mode):
        if Mode.TRANSLATED in mode:
            return MarkedSourceTranslationsBuilder(self.resource, language)
        elif Mode.REVIEWED in mode:
            return ReviewedTranslationsBuilder(self.resource, language)
        else:
            return AllTranslationsBuilder(self.resource, language)


class AppleStringsCompiler(Compiler):
    def _post_compile(self):
        line = r'(?P<prefix>(("(?P<key>[^"\\]*(?:\\.[^"\\]*)*)")|'\
               r'(?P<property>\w+))\s*=\s*"(?P<value>[^"\\]*(?:\\.'\
               r'[^"\\]*)*))_txss(?P<suffix>"\s*;)'
        regex = re.compile(line, re.U|re.DOTALL)
        self.compiled_template = regex.sub(
            lambda m: '/* ' + m.group('prefix') + m.group('suffix') + ' */',
            self.compiled_template
        )

class AppleStringsHandler(AppleMarkedSourceCompilerFactory, Handler):
    """
    Handler for Apple STRINGS translation files.

    Apple strings files *must* be encoded in cls.ENCODING encoding.
    """

    name = "Apple *.STRINGS file handler"
    format = "Apple STRINGS (*.strings)"
    method_name = 'STRINGS'
    format_encoding = 'UTF-16'

    HandlerParseError = StringsParseError
    HandlerCompileError = StringsCompileError

    CompilerClass = AppleStringsCompiler

    def _escape(self, s):
        return s.replace('"', '\\"').replace('\n', r'\n').replace('\r', r'\r')

    def _unescape_key(self, s):
        return s.replace('\\\n', '')

    def _unescape(self, s):
        s = s.replace('\\\n', '')
        return s.replace('\\"', '"').replace(r'\n', '\n').replace(r'\r', '\r')

    def _get_content(self, filename=None, content=None):
        if content is not None:
            if chardet.detect(content)['encoding'].startswith(self.format_encoding):
                encoding = self.format_encoding
            else:
                encoding = 'UTF-8'
            if isinstance(content, str):
                try:
                    return content.decode(encoding)
                except UnicodeDecodeError, e:
                    raise FormatError(unicode(e))
            else:
                return content
        if filename is None:
            return None
        return self._get_content_from_file(filename, self.format_encoding)

    def _get_content_from_file(self, filename, encoding):
        f = open(filename, 'r')
        try:
            content = f.read()
            if chardet.detect(content)['encoding'].startswith(self.format_encoding):
                #f = f.decode(self.format_encoding)
                encoding = self.format_encoding
            else:
                #f = f.decode(self.default_encoding)
                encoding = 'utf-8'
            f.close()
            f = codecs.open(filename, 'r', encoding=encoding)
            return f.read()
        except IOError, e:
            logger.warning(
                "Error opening file %s with encoding %s: %s" %\
                    (filename, self.format_encoding, e.message),
                exc_info=True
            )
            raise FormatError(e.message)
        except Exception, e:
            logger.error("Unhandled exception: %s" % e.message, exc_info=True)
            raise
        finally:
            f.close()

    def _parse(self, is_source, lang_rules):
        """Parse an apple .strings file and create a stringset with
        all entries in the file.

        See
        http://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/BPInternational/Articles/StringsFiles.html
        for details.
        """
        resource = self.resource
        context = ""
        f = self.content
        prefix = ""
        if f.startswith(u'\ufeff'):
            prefix = u'\ufeff'
            f = f.lstrip(u'\ufeff')
        #regex for finding all comments in a file
        cp = r'(?:/\*(?P<comment>(?:[^*]|(?:\*+[^*/]))*\**)\*/)'
        p = re.compile(r'(?:%s[ \t]*[\n]|[\r\n]|[\r]){0,1}(?P<line>(("(?P<key>[^"\\]*(?:\\.[^"\\]*)*)")|(?P<property>\w+))\s*=\s*"(?P<value>[^"\\]*(?:\\.[^"\\]*)*)"\s*;)'%cp, re.DOTALL|re.U)
        #c = re.compile(r'\s*/\*(.|\s)*?\*/\s*', re.U)
        c = re.compile(r'//[^\n]*\n|/\*(?:.|[\r\n])*?\*/', re.U)
        ws = re.compile(r'\s+', re.U)
        buf = u""
        end=0
        start = 0
        for i in p.finditer(f):
            start = i.start('line')
            end_ = i.end()
            line = i.group('line')
            key = i.group('key')
            comment = i.group('comment') or ''
            if not key:
                key = i.group('property')
            value = i.group('value')
            while end < start:
                m = c.match(f, end, start) or ws.match(f, end, start)
                if not m or m.start() != end:
                    raise StringsParseError("Invalid syntax: %s" %\
                            f[end:start])
                if is_source:
                    buf += f[end:m.end()]
                end = m.end()
            end = end_
            key = self._unescape_key(key)
            if is_source:
                if not value.strip():
                    buf += line
                    continue
                else:
                    line = f[start:end]
                    buf += line[0:i.start('value')-start]
                    buf += re.sub(
                        re.escape(value),
                        "%(hash)s_tr" % {'hash': hash_tag(key, context)},
                        line[i.start('value')-start:i.end('value')-start]
                    )
                    buf += line[i.end('value')-start:]
            elif not SourceEntity.objects.filter(resource=resource, string=key).exists() or not value.strip():
                # ignore keys with no translation
                continue
            self.stringset.add(GenericTranslation(
                    key, self._unescape(value), rule=5, context=context,
                    pluralized=False, fuzzy=False, comment=comment,
                    obsolete=False
            ))
        while len(f[end:]):
            m = c.match(f, end) or ws.match(f, end)
            if not m or m.start() != end:
                raise StringsParseError("Invalid syntax: %s" %  f[end:])
            if is_source:
                buf += f[end:m.end()]
            end = m.end()
            if end == 0:
                break
        if is_source:
            buf = prefix + buf
        return buf

########NEW FILE########
__FILENAME__ = unicodeproperties
# -*- coding: utf-8 -*-

"""
Java properties file handler/compiler
"""
from __future__ import absolute_import
import os, re
from django.utils.hashcompat import md5_constructor
from transifex.txcommon.log import logger
from transifex.resources.models import SourceEntity
from transifex.resources.formats.utils.decorators import *
from transifex.resources.formats.utils.hash_tag import hash_tag
from transifex.resources.formats.properties import PropertiesHandler, \
        PropertiesParseError, PropertiesCompileError
from transifex.resources.formats.resource_collections import StringSet, \
        GenericTranslation


class UnicodeParseError(PropertiesParseError):
    pass


class UnicodeCompileError(PropertiesCompileError):
    pass


class UnicodePropertiesHandler(PropertiesHandler):
    """Handler for Unicode PROPERTIES translation files."""

    name = "Unicode *.PROPERTIES file handler"
    format = "Unicode PROPERTIES (*.properties)"
    method_name = 'UNICODEPROPERTIES'

    HandlerParseError = UnicodeParseError
    HandlerCompileError = UnicodeCompileError

########NEW FILE########
__FILENAME__ = decorators
from transifex.resources.formats import FormatError

def need_resource(fn):
    def resource_fn(self, *args, **kw):
        if not self.resource:
            raise FormatError("Resource not specified.")
        return fn(self, *args, **kw)
    return resource_fn

def need_content(fn):
    def content_fn(self, *args, **kw):
        if self.content is None:
            raise FormatError("No content given.")
        return fn(self, *args, **kw)
    return content_fn

def need_file(fn):
    def file_fn(self, *args, **kw):
        if not self.filename:
            raise FormatError("File not specified.")
        return fn(self, *args, **kw)
    return file_fn

def need_language(fn):
    def language_fn(self, *args, **kw):
        if not self.language:
            raise FormatError("Language not specified")
        return fn(self, *args, **kw)
    return language_fn

def need_stringset(fn):
    def stringset_fn(self, *args, **kw):
        if not self.stringset:
            raise FormatError("No strings found. Either bind a resource or a file"
                " to load strings into the handler.")
        return fn(self, *args, **kw)
    return stringset_fn

def need_compiled(fn):
    def compiled_fn(self, *args, **kw):
        if not self.compiled_template:
            raise FormatError("No template found. Use compile to generate the"
                 " template first")
        return fn(self, *args, **kw)
    return compiled_fn

########NEW FILE########
__FILENAME__ = hash_tag
# -*- coding: utf-8 -*-
import re
from django.utils.hashcompat import md5_constructor


def hash_tag(source_entity, context):
    """Calculate the md5 hash of the (source_entity, context)."""
    if type(context) == list:
        if context:
            keys = [source_entity] + context
        else:
            keys = [source_entity, '']
    else:
        if context == 'None':
            keys = [source_entity, '']
        else:
            keys = [source_entity, context]
    return md5_constructor(':'.join(keys).encode('utf-8')).hexdigest()


def escape_context(value):
    """
    Escape context to be able to calculate hash of a (source_entity, context).
    """
    if type(value) == list:
        return [_escape_colon(v) for v in value]
    else:
        return _escape_colon(value)


def _escape_colon(value):
    """Escape colon in the string."""
    return re.sub(r'(?<!\\)\:', '\:', unicode(value))


class _HashRegex(object):
    """Functor to get a regular expression for a hash.

    We use MD5 to hash strings and store the hexdigest of it. So, the hash
    consists of 32 hexadecimal digits plus the (default) '_tr' suffix.

    We use a functor, so that the default regular expression will
    always be compiled and ready to be used.
    """

    md5_pattern = r'[0-9a-f]{32}'
    default_pattern = md5_pattern + '_tr'
    plural_pattern = md5_pattern + '_(tr|pl_\d)'
    default_regex = re.compile(default_pattern, re.IGNORECASE)
    plural_regex = re.compile(plural_pattern, re.IGNORECASE)

    def __init__(self, plurals=False):
        """Choose the default behavior: support plurals or not."""
        self.regex = self.plural_regex if plurals else self.default_regex

    def __call__(self, suffix=None):
        """Allow to use object as function.

        Users can sutomize just the suffix of the hash. In such case, the
        regular expression is compiled on demand.

        Args:
            suffix: The suffix to use.
        Returns:
            A compiled regular expression.
        """
        if suffix is None:
            return self.regex
        return re.compile(self.md5_pattern + suffix, re.IGNORECASE)

hash_regex = _HashRegex()
pluralized_hash_regex = _HashRegex(plurals=True)

########NEW FILE########
__FILENAME__ = string_utils
# -*- coding: utf-8 -*-

from Levenshtein import distance

def percent_diff(a, b):
    try:
        return 100 * distance(a, b) / float(max(len(a), len(b)))
    except ZeroDivisionError:
        if len(a)==len(b): return 0
        else: return 100


def split_by_newline(text, start=0):
    """Generator to split the text in newlines.

    Args:
        text: The text to split.
        start: Where to start the split from.
    Returns:
        A line at a time.
    """
    index = start
    while 1:
        new_index = text.find('\n', index)
        if new_index == -1:
            yield (-1, text[index:])
            break
        yield (new_index + 1, text[index:new_index])
        index = new_index + 1

########NEW FILE########
__FILENAME__ = validators
# -*- coding: utf-8 -*-
"""
Validator classes for individual strings.
"""

import re
from polib import escape, unescape        # TODO: Fix the regex
from django.conf import settings
from django.utils.translation import ugettext as _
from transifex.txcommon import import_to_python


class ValidationError(Exception):
    pass


class BaseValidator(object):
    """Base class for validators.

    Implements the decorator pattern.
    """

    def __init__(self, source_language=None, target_language=None, rule=None):
        self.slang = source_language
        self.tlang = target_language
        self.rule = rule

    def __call__(self, old, new):
        """Validate the `new` translation against the `old` one.

        No checks are needed for deleted translations

        Args:
            old: The old translation.
            new: The new translation.
        Raises:
            A ValidationError with an appropriate message.
        """
        if not new or not self.precondition():
            return
        self.validate(old, new)

    def precondition(self):
        """Check whether this validator is applicable to the situation."""
        return True

    def validate(self, old, new):
        """Actual validation method.

        Subclasses must override this method.

        Args:
            old: The old translation.
            new: The new translation.
        Raises:
            A ValidationError with an appropriate message.
        """
        pass


class PluralOnlyValidator(BaseValidator):
    """Validator to specialize handling of pluralized strings.

    Ignore check for singular.
    """

    def precondition(self):
        return self.rule != 1 and\
                super(PluralOnlyValidator, self).precondition()


class SpaceValidator(BaseValidator):
    """Validator that checks if the translation is just spaces."""

    def validate(self, old, new):
        new = unescape(new)
        if len(new.strip()) == 0:
            raise ValidationError(
                _("Translation string only contains whitespaces.")
            )


class MatchingBracketsValidator(BaseValidator):
    """Validator that checks if the number of brackets match between
    the two translations.
    """
    bracket_chars = '[{()}]'

    def validate(self, old, new):
        old = unescape(old)
        new = unescape(new)
        for c in self.bracket_chars:
            if new.count(c) != old.count(c):
                raise ValidationError(
                    _("Translation string doesn't contain the same "
                      "number of '%s' as the source string." % c)
                )


class UrlsValidator(BaseValidator):
    """Validator that checks if urls have been preserved in the
    translation.
    """

    urls = re.compile('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|'
                      '(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    )

    def validate(self, old, new):
        old = unescape(old)
        new = unescape(new)
        for url in self.urls.findall(old):
            if url not in new:
                raise ValidationError(
                    _("The following url is either missing from the"
                      " translation or has been translated: '%s'." % url)
                )


class EmailAddressesValidator(BaseValidator):
    """Validator that checks if the email addresses have been preserved in
    the translation.
    """

    emails = re.compile("([\w\-\.+]+@[\w\w\-]+\.+[\w\-]+)")

    def validate(self, old, new):
        old = unescape(old)
        new = unescape(new)
        for email in self.emails.findall(old):
            if email not in new:
                raise ValidationError(
                    _("The following email is either missing from the"
                      " translation or has been translated: '%s'." % email)
                )


class NewLineAtBeginningValidator(BaseValidator):
    """Validator that checks if a new line at the beginning
    has been preserved.
    """

    def validate(self, old, new):
        old = unescape(old)
        old_has_newline = old[0] == '\n'
        new_has_newline = new[0] == '\n'
        if old_has_newline != new_has_newline:
            if old_has_newline:
                msg = _("Translation must start with a newline (\\n)")
            else:
                msg = _("Translation should not start with a newline (\\n)")
            raise ValidationError(msg)


class NewLineAtEndValidator(BaseValidator):
    """Validator that checks if a new line at the end has been
    preserved.
    """

    def validate(self, old, new):
        old = unescape(old)
        new = unescape(new)
        old_has_newline = old[-1] == '\n'
        new_has_newline = new[-1] == '\n'
        if old_has_newline != new_has_newline:
            if old_has_newline:
                msg = _("Translation must end with a newline (\\n)")
            else:
                msg = _("Translation should not end with a newline (\\n)")
            raise ValidationError(msg)


class NumbersValidator(BaseValidator):
    """Validator that checks that numbers have been preserved in the
    translation.
    """

    numbers = re.compile("[-+]?[0-9]*\.?[0-9]+")

    def validate(self, old, new):
        old = unescape(old)
        new = unescape(new)
        for num in self.numbers.findall(old):
            if num not in new:
                num = num.replace('.', ',', 1)
                if num not in new:
                    raise ValidationError(
                        _("Number %s is in the source string but not "
                          "in the translation." % num)
                    )


class PrintfFormatNumberValidator(BaseValidator):
    """Validator that checks that the number of printf formats specifiers
    is the same in the translation.

    This is valid only if the plurals in the two languages are the same.
    """

    printf_re = re.compile(
        '%((?:(?P<ord>\d+)\$|\((?P<key>\w+)\))?(?P<fullvar>[+#-]*(?:\d+)?'\
            '(?:\.\d+)?(hh\|h\|l\|ll)?(?P<type>[\w%])))'
    )

    def precondition(self):
        """Check if the number of plurals in the two languages is the same."""
        return self.tlang.nplurals == self.slang.nplurals and \
                super(PrintfFormatNumberValidator, self).precondition()

    def validate(self, old, new):
        old = unescape(old)
        new = unescape(new)
        old_matches = list(self.printf_re.finditer(old))
        new_matches = list(self.printf_re.finditer(new))
        if len(old_matches) != len(new_matches):
            raise ValidationError(
                _('The number of arguments seems to differ '
                  'between the source string and the translation.')
            )


class PrintfFormatPluralizedNumberValidator(PluralOnlyValidator, \
                                                PrintfFormatNumberValidator):
    """Validator that checks that the number of arguments are equal
    in case of plurals.

    Ignores the check in case of the singular grammatical number.
    """
    pass


class PrintfFormatSourceValidator(BaseValidator):
    """Validator that checks printf-format specifiers in the source string
    are preserved in the translation.
    """

    printf_re = re.compile(
        '%((?:(?P<ord>\d+)\$|\((?P<key>\w+)\))?(?P<fullvar>[+#-]*(?:\d+)?'\
            '(?:\.\d+)?(hh\|h\|l\|ll)?(?P<type>[\w%])))'
    )

    def validate(self, source_trans, target_trans):
        """Check, if all printf-format expressions in the source translation
        are in the target translation, too.

        We are interested in the conversion specifier and the positional
        key (if any). See ``printf(3)`` for details.

        So, we check, whether *every* conversion specifier found in
        the source translation exists in the target translation, too.
        Additionally, if there are positional keys, whether those
        found in the source translation exist in the target translation,
        as well.

        We raise a ``ValidationError``, whenever one of the
        conditions is not met.

        Args:
            source_trans: The source translation.
            target_trans: The target translation.
        Raises:
            ValidationError, in case the translation is not valid.
        """
        source_trans = unescape(source_trans)
        target_trans = unescape(target_trans)
        source_matches = list(self.printf_re.finditer(source_trans))
        target_matches = list(self.printf_re.finditer(target_trans))

        # We could use just one list comprehension:
        #
        # target_data = [
        #     (pattern.group('type'), pattern.group('key'))
        #     for pattern in target_matches
        # ]
        # target_specifiers, target_keys = map(
        #     list, zip(*target_data)
        # ) or [[], []]
        #
        # but that would probably be less efficient, since target_matches
        # should ususally have 0 - 5 elements, and much less readable.
        # So, we do it in two steps.
        target_specifiers = [pat.group('type') for pat in target_matches]
        target_keys = [pattern.group('key') for pattern in target_matches]

        for pattern in source_matches:
            key = pattern.group('key')
            if key not in target_keys:
                msg = "The expression '%s' is not present in the translation."
                raise ValidationError( _(msg  % pattern.group(0)))

            conversion_specifier = pattern.group('type')
            try:
                target_specifiers.remove(conversion_specifier)
            except ValueError:
                msg = "The expression '%s' is not present in the translation."
                raise ValidationError( _(msg  % pattern.group(0)))


class PrintfFormatPluralizedSourceValidator(PluralOnlyValidator, \
                                                PrintfFormatSourceValidator):
    """Validator that checks printf-format specifiers in the source string
    are preserved in the translation.

    Ignores the check in case of the singular grammatical number.
    """
    pass


class PrintfFormatTranslationValidator(BaseValidator):
    """Validator that checks printf-format specifiers in the translation
    string show up in the source string.
    """

    printf_re = re.compile(
        '%((?:(?P<ord>\d+)\$|\((?P<key>\w+)\))?(?P<fullvar>[+#-]*(?:\d+)?'\
            '(?:\.\d+)?(hh\|h\|l\|ll)?(?P<type>[\w%])))'
    )

    def validate(self, source_trans, target_trans):
        """Check, if all printf-format expressions in the target translation
        are in the source translation, too.

        We are interested in the conversion specifier and the positional
        key (if any). See ``printf(3)`` for details.

        So, we check, whether *every* conversion specifier found in
        the target translation exists in the source translation, too.
        Additionally, if there are positional keys, whether those
        found in the target translation exist in the source translation,
        as well.

        We raise a ``ValidationError``, whenever one of the
        conditions is not met.

        Args:
            source_trans: The source translation.
            target_trans: The target translation.
        Raises:
            ValidationError, in case the translation is not valid.
        """
        source_matches = list(self.printf_re.finditer(source_trans))
        target_trans_matches = list(self.printf_re.finditer(target_trans))


        # Look at PrintfFormatSourceValidator for a comment on optimizing this
        source_conv_specifiers = [pat.group('type') for pat in source_matches]
        source_keys = [pattern.group('key') for pattern in source_matches]

        for pattern in target_trans_matches:
            key = pattern.group('key')
            if key not in source_keys:
                msg = "The expression '%s' is not present in the source_string."
                raise ValidationError( _(msg  % pattern.group(0)))

            conversion_specifier = pattern.group('type')
            try:
                source_conv_specifiers.remove(conversion_specifier)
            except ValueError:
                msg = "The expression '%s' is not present in the source string."
                raise ValidationError( _(msg  % pattern.group(0)))


def create_error_validators(i18n_type):
    """Create a suitable errors validator for the specific i18n type."""
    return _create_validators(i18n_type, 'I18N_ERROR_VALIDATORS')


def create_warning_validators(i18n_type):
    """Create a suitable warnings validator for the specific i18n type."""
    return _create_validators(i18n_type, 'I18N_WARNING_VALIDATORS')


def _create_validators(i18n_type, type_):
    """Create a generator of validators for the specific i18n_type and
    errors/warning check we need.

    Args:
        i18n_type: The i18n type forthe validators.
        type_: A string with the name of the type of the validators we need.
            Currently, either I18N_ERROR_VALIDATORS or I18N_WARNING_VALIDATOR.
    Returns:
        A generator with validator objects.
    """
    type_validators = getattr(settings, type_)
    if i18n_type in type_validators:
        key = i18n_type
    else:
        key = 'DEFAULT'
    return (import_to_python(klass) for klass in type_validators[key])

########NEW FILE########
__FILENAME__ = wiki
# -*- coding: utf-8 -*-

"""
Wikitext format handler.
"""

from __future__ import absolute_import
import os, re
from itertools import groupby
from transifex.txcommon.log import logger
from transifex.resources.formats.utils.decorators import *
from transifex.resources.formats.utils.hash_tag import hash_tag
from transifex.resources.formats.core import Handler, ParseError, CompileError
from transifex.resources.formats.resource_collections import StringSet, \
        GenericTranslation
from .compilation import FillEmptyCompilerFactory


class WikiParseError(ParseError):
    pass


class WikiCompileError(CompileError):
    pass


class WikiHandler(FillEmptyCompilerFactory, Handler):
    """Class for mediawiki markup."""

    name = "Wiki handler"
    format = "Files extracted from Wikipedia (.wiki)"
    method_name = 'WIKI'

    HandlerParseError = WikiParseError
    HandlerCompileError = WikiCompileError

    def _parse(self, is_source, lang_rules):
        self._find_linesep(self.content)
        par_splitter = self.linesep + self.linesep
        template_open = "{{"
        template_ends = "}}"

        template = self.content
        context = ''

        prev_split_pos = 0
        prev_text_pos = 0
        while 1:
            par_pos = self.content.find(par_splitter, prev_split_pos)
            t_open_pos = self.content.find(template_open, prev_split_pos)
            if prev_text_pos == -1:
                break
            elif par_pos == -1 and t_open_pos == -1:
                # end of document
                source = trans = self.content[prev_text_pos:].strip()
                prev_text_pos = -1
            elif par_pos < t_open_pos or t_open_pos == -1:
                source = trans = self.content[prev_text_pos:par_pos].strip()
                if par_pos == -1:
                    prev_split_pos = prev_text_pos = -1
                else:
                    prev_split_pos = prev_text_pos = par_pos + 2
            else:
                t_end_pos = self.content.find(template_ends, prev_split_pos + 1)
                prev_split_pos = t_end_pos
                continue

            if not source.strip('\n'):
                continue
            source_len = len(source)
            template = re.sub(
                re.escape(trans),
                "%(hash)s_tr" % {'hash': hash_tag(source, context)},
                template
            )
            self.stringset.add(GenericTranslation(
                    source, trans, context=context
            ))
        return template

########NEW FILE########
__FILENAME__ = xliff
# -*- coding: utf-8 -*-

"""
XLIFF file parser for Python

see http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.htm for documentation
of XLIFF format
"""

from __future__ import absolute_import
import re, collections
import xml.dom.minidom
import xml.parsers.expat
from copy import copy
from xml.sax.saxutils import escape as xml_escape
from django.utils.translation import ugettext, ugettext_lazy as _
from django.db.models import get_model
from transifex.txcommon.log import logger
from transifex.txcommon.exceptions import FileCheckError
from transifex.languages.models import Language
from .core import Handler, ParseError, CompileError
from .compilation import PluralCompiler, SimpleCompilerFactory
from .resource_collections import StringSet, GenericTranslation
from .utils.decorators import *
from .utils.hash_tag import hash_tag, escape_context, hash_regex,\
        pluralized_hash_regex, _HashRegex

# Resources models
Resource = get_model('resources', 'Resource')
Translation = get_model('resources', 'Translation')
SourceEntity = get_model('resources', 'SourceEntity')
Template = get_model('resources', 'Template')

plural_regex = _HashRegex(plurals=True).plural_regex

class XliffParseError(ParseError):
    pass


class XliffCompileError(CompileError):
    pass


plural_id_regex = re.compile(r'.+\[\d\]')

class XliffCompiler(PluralCompiler):
    """Compiler for xliff files."""

    def getElementByTagName(self, element, tagName, noneAllowed = False):
        elements = element.getElementsByTagName(tagName)
        if not noneAllowed and not elements:
            raise XliffCompileError(_("Element '%s' not found!" % tagName))
        if len(elements) > 1:
            raise XliffCompileError(_("Multiple '%s' elements found!" % tagName))
        return elements[0]

    def get_plural_index(self, count, rule):
        return count

    def _apply_translations(self, translations, text):
        if isinstance(text, str):
            text = text.decode('UTF-8')
        regex = pluralized_hash_regex()
        return regex.sub(
            lambda m: translations.get(m.group(0), m.group(0)), text
        )

    def _update_plural_hashes(self, translations, content):
        """Modify template content to handle plural data in target language"""
        i18n_type = self.resource.i18n_type
        if isinstance(content, unicode):
            content = content.encode('utf-8')
        doc = xml.dom.minidom.parseString(content)
        root = doc.documentElement
        source_language = self.resource.source_language
        rules = self.language.get_pluralrules_numbers()
        source_rules = source_language.get_pluralrules_numbers()
        if self.language == self.resource.source_language:
            return content
        for group_node in root.getElementsByTagName("group"):
            if group_node.attributes.has_key('restype') and \
                    group_node.attributes['restype'].value == "x-gettext-plurals":
                trans_unit_nodes = group_node.getElementsByTagName("trans-unit")
            else:
                continue
            cont = False
            for n, node in enumerate(trans_unit_nodes):
                node_id = node.attributes.get('id') and\
                        node.attributes.get('id').value
                try:
                    target = self.getElementByTagName(node, 'target')
                except XliffCompileError, e:
                    cont = True
                    break
                if target:
                    target_text = target.firstChild.data or ''
                    if not plural_regex.match(target_text):
                        cont = True
                        break
                if n == 0:
                    id_text = node_id[:-3]
                else:
                    if id_text != node_id[:-3]:
                        cont = True
                        break
            if n != len(source_rules) - 1:
                continue
            if cont:
                continue
            for count,rule in enumerate(rules):
                index = self.get_plural_index(count, rule)
                if rule in source_rules:
                    clone = trans_unit_nodes[source_rules.index(rule)
                            ]
                else:
                    clone = trans_unit_nodes[source_rules.index(5)
                            ].cloneNode(deep=True)
                target = self.getElementByTagName(clone, "target")
                clone.setAttribute("id", id_text + '[%d]'%count)
                target.firstChild.data = target.firstChild.data[:-1] +\
                        '%d' % index
                if rule not in source_rules:
                    for n, r in enumerate(source_rules):
                        if rule < r:
                            break
                    indent_node = trans_unit_nodes[
                            n].previousSibling.cloneNode(deep=True)
                    group_node.insertBefore(
                        indent_node, trans_unit_nodes[n].previousSibling)
                    group_node.insertBefore(
                            clone, trans_unit_nodes[n].previousSibling)
        content = doc.toxml()
        return content

    def _post_compile(self):
        super(XliffCompiler, self)._post_compile()
        doc = xml.dom.minidom.parseString(
            self.compiled_template.encode('UTF-8')
        )
        root = doc.documentElement
        for node in root.getElementsByTagName("target"):
            value = ""
            for child in node.childNodes:
                value += child.toxml()
            if not value.strip() or self.language == self.resource.source_language:
                parent = node.parentNode
                parent.removeChild(node.previousSibling)
                parent.removeChild(node)
        self.compiled_template = doc.toxml()


class XliffHandler(SimpleCompilerFactory, Handler):
    name = "XLIFF *.XLF file handler"
    format = "XLIFF files (*.xlf)"
    method_name = 'XLIFF'
    format_encoding = 'UTF-8'

    HandlerParseError = XliffParseError
    HandlerCompileError = XliffCompileError

    CompilerClass = XliffCompiler

    def _get_context(self, trans_unit_node, context):
        return context

    def _getText(self, nodelist):
        rc = []
        for node in nodelist:
            if hasattr(node, 'data'):
                rc.append(node.data)
            else:
                rc.append(node.toxml())
        return ''.join(rc)

    def _serialize_occurrences(self, occurrences):
        """Serialize the occurrences list for saving to db."""
        return ', '.join(
            [':'.join([i for i in t ]) for t in occurrences]
        )

    def _parse(self, is_source, lang_rules):
        """
        Parses XLIFF file and exports all entries as GenericTranslations.
        """
        resource = self.resource

        context = []
        content = self.content.encode('utf-8')
        try:
            self.doc = xml.dom.minidom.parseString(content)
            root = self.doc.documentElement

            if root.tagName != "xliff":
                raise XliffParseError(_("Root element is not 'xliff'"))
            if not root.attributes.get('version', None):
                raise self.HandlerParseError(_("Root element 'xliff' "\
                        "does not have a 'version' attribute"))
            for node in root.childNodes:
                if node.nodeType == node.ELEMENT_NODE and \
                        node.localName == "file":
                    self.parse_tag_file(node, is_source)
        except Exception, e:
            raise self.HandlerParseError(e.message)

        return self.doc.toxml()

    def parse_tag_file(self, file_node, is_source=False):
        self.trans_unit_id_list = []
        xliff_source_language_code = file_node.attributes.get(
                'source-language').value
        source_language = Language.objects.by_code_or_alias_or_none(
                xliff_source_language_code)
        original = file_node.attributes.get('original').value
        datatype = file_node.attributes.get('datatype').value
        target_language_node = file_node.attributes.get('target-language')
        xliff_target_language_code = target_language_node and\
                target_language_node.value or ''
        target_language = Language.objects.by_code_or_alias_or_none(
                xliff_target_language_code)
        if self.resource and source_language != self.resource.source_language:
            raise self.HandlerParseError(_("Source language code "\
                "'%(source_lang_code)s' in XLIFF file does not map to "\
                "source language for the resource: "\
                "'%(resource_source_language)s'.") % {
                    'source_lang_code': xliff_source_language_code,
                    'resource_source_language': self.resource.source_language
                })
        if target_language and target_language != self.language:
            raise self.HandlerParseError(_("Target language code "\
                "'%(target_lang_code)s' in XLIFF file does not map "\
                "to the translation language: '%(translation_language)s'"\
                " for which it was uploaded.") % {
                    'target_lang_code': xliff_target_language_code,
                    'translation_language': self.language
                })
        context = [original, source_language, datatype]
        for node in file_node.childNodes:
            if node.nodeType == node.ELEMENT_NODE and node.localName == "body":
                self.parse_tag_body(node, is_source, context=copy(context))

    def parse_tag_body(self, body_node, is_source=False, context=[]):
        for node in body_node.childNodes:
            if node.nodeType == node.ELEMENT_NODE and node.localName == "group":
                self.parse_tag_group(node, is_source, context=copy(context),
                        occurrence=[])
            if node.nodeType == node.ELEMENT_NODE and node.localName == "trans-unit":
                self.parse_tag_trans_unit(node, is_source, context=copy(context),
                        occurrence=[])
            # there is no way to handle bin-unit in transifex

    def parse_tag_group(self, group_node, is_source=False, context=[],
            comment=[], occurrence=[]):
        if is_source:
            for node in group_node.childNodes:
                if node.nodeType == node.ELEMENT_NODE and node.localName == "context-group":
                    # context-group has to be in XML before occurence of trans-unit, so it
                    # is ok to populate context this way
                    occurrence.extend(self.parse_tag_context_group(node))
                if node.nodeType == node.ELEMENT_NODE and node.localName == "note":
                    comment.extend(self.parse_tag_note(node))
        if group_node.attributes.get('restype', None) and\
                group_node.attributes['restype'].value == "x-gettext-plurals":
            pluralized = True
            nplural_file = 0
            nplural = self.language.get_pluralrules_numbers()
            nplural_names = self.language.get_pluralrules()
            plural_forms = len(nplural)
            trans_unit_nodes = []
            common_id = ''
            for node in group_node.childNodes:
                if node.nodeType == node.ELEMENT_NODE and node.localName == "trans-unit":
                    node_id = node.attributes.get('id', '').value
                    if not plural_id_regex.match(node_id):
                        return
                    if nplural_file == 0:
                        common_id = node_id[:-3]
                    else:
                        if node_id[:-3] != common_id:
                            return
                    if int(node_id[-2:-1]) != nplural_file:
                        return
                    nplural_file += 1
                    trans_unit_nodes.append(node)
            if len(trans_unit_nodes) != plural_forms:
                return
            source = ""
            target = ""
            source_node = trans_unit_nodes[nplural.index(1)
                    ].getElementsByTagName("source")[0]
            if len(source_node.childNodes)>1:
                source = self._getText(source_node.childNodes)
            else:
                source = source_node.firstChild.data
            context.extend([common_id])
            for n, node in enumerate(trans_unit_nodes):
                rule = nplural[n]
                self.parse_tag_trans_unit(node, is_source,
                        context=copy(context), occurrence=copy(occurrence),
                        source_string = source, rule=rule)
        else:
            for node in group_node.childNodes:
                if node.nodeType == node.ELEMENT_NODE and\
                        node.localName == "group":
                    self.parse_tag_group(node, is_source, context=copy(context),
                            comment=copy(comment), occurrence=copy(occurrence))
                if node.nodeType == node.ELEMENT_NODE and\
                        node.localName == "trans-unit":
                    self.parse_tag_trans_unit(node, is_source, context=copy(context),
                            comment=copy(comment), occurrence=copy(occurrence))
            # TODO prop-group, note, count-group
            # there is no way to handle bin-unit in transifex

    def parse_tag_trans_unit(self, trans_unit_node, is_source=False,
            context=[], source_string=None, rule=None,
            comment=[], occurrence=[]):
        source = ""
        trans_unit_id = trans_unit_node.attributes.get('id', None) and\
                trans_unit_node.attributes.get('id', None).value or ''
        if not rule and not trans_unit_id:
            return
        if trans_unit_id in self.trans_unit_id_list:
            return
        else:
            self.trans_unit_id_list.append(trans_unit_id)
        source_node = trans_unit_node.getElementsByTagName("source")[0]
        if len(source_node.childNodes)>1:
            for i in source_node.childNodes:
                source += i.toxml()
        else:
            source = source_node.firstChild.data
        if source_string:
            pluralized = True
        else:
            pluralized = False
            context.extend([trans_unit_id])
        for node in trans_unit_node.childNodes:
            if node.nodeType == node.ELEMENT_NODE and\
                    node.localName == "context-group" and\
                    not source_string and not rule:
                occurrence.extend(self.parse_tag_context_group(
                    node, is_source))
            elif node.nodeType == node.ELEMENT_NODE and\
                    node.localName == 'note' and not pluralized:
                comment.extend(self.parse_tag_note(node))
            # TODO prop-group, note, count-group, alt-trans
        # TODO seq-source
        context = escape_context(context)
        context = self._get_context(trans_unit_node, context)
        translation = ""
        target = None
        if trans_unit_node.getElementsByTagName("target"):
            target = trans_unit_node.getElementsByTagName('target')[0]
            if len(target.childNodes)>1:
                translation = self._getText(target.childNodes)
            else:
                if target.firstChild:
                    translation = target.firstChild.data
                else:
                    translation = u""
        else:
            translation = u""
        if is_source:
            translation = translation or source
            if pluralized:
                source = source_string
            if not target:
                target = self.doc.createElement("target")
            target.childNodes = []
            if source_string and rule:
                target.appendChild(self.doc.createTextNode(
                    ("%(hash)s_pl_%(rule)s" % {'hash': hash_tag(
                        source_string, context),
                        'rule':self.language.get_pluralrules_numbers().index(
                            rule)})
                ))
            else:
                target.appendChild(self.doc.createTextNode(
                        ("%(hash)s_tr" % {'hash': hash_tag(
                            source, context)})
                ))
            if translation and not translation.strip():
                return
            indent_node = source_node.previousSibling.cloneNode(True)
            if source_node.nextSibling:
                trans_unit_node.insertBefore(target, source_node.nextSibling)
                trans_unit_node.insertBefore(indent_node, source_node.nextSibling)
            else:
                trans_unit_node.appendChild(indent_node)
                trans_unit_node.appendChild(target)
        else:
            if pluralized:
                source = source_string
            if not translation:
                return
            # TODO - do something with inline elements

        occurrence = list(set(occurrence))
        if not is_source and not pluralized:
            if trans_unit_node.attributes.get('approved', None) and\
                    trans_unit_node.attributes.get(
                            'approved').value == 'no':
               self._add_suggestion_string(
                    source, translation, context=context,
                    occurrences=self._serialize_occurrences(occurrence)
               )
               return
        if pluralized:
            self.stringset.add(GenericTranslation(
                    source, translation, context=context,
                    rule=rule, pluralized=True,
                    occurrences=self._serialize_occurrences(occurrence),
                    comment='\n'.join(comment)
             ))
        else:
            self.stringset.add(GenericTranslation(
                    source, translation, context=context,
                    occurrences=self._serialize_occurrences(occurrence),
                    comment='\n'.join(comment)
             ))

    def parse_tag_context_group(self, context_group_node, is_source=False):
        result = []
        if context_group_node.attributes.get('purpose', '') and \
                context_group_node.attributes.get(
                        'purpose', '').value == 'location':
            sourcefile = ''
            linenumber = ''
            for node in context_group_node.childNodes:
                if node.nodeType == node.ELEMENT_NODE and\
                        node.localName == "context":
                    if node.attributes.get('context-type', '') and \
                            node.attributes.get('context-type', '').value ==\
                            'sourcefile':
                        sourcefile = self.parse_tag_context(node)
                    elif node.attributes.get('context-type', '') and \
                            node.attributes.get('context-type', '').value ==\
                            'linenumber':
                        linenumber = self.parse_tag_context(node)
                if sourcefile and linenumber:
                    result.append((sourcefile, linenumber))
        return result

    def parse_tag_context(self, context_node):
        content =  self._getText(context_node.childNodes)
        context_type = context_node.attributes.get('context-type','') and\
                context_node.attributes.get('context-type','').value or ''
        return content

    def parse_tag_note(self, note_node):
        if note_node.attributes.get('from', '') and \
                note_node.attributes.get('from', '').value == 'developer':
            note =  self._getText(note_node.childNodes)
            if note:
                return [note]
        return []

    def _escape(self, s):
        return xml_escape(s, {"'": "&apos;", '"': '&quot;'})



########NEW FILE########
__FILENAME__ = forms
from uuid import uuid4
from django import forms
from django.conf import settings
from django.utils.translation import ugettext_lazy as _
from transifex.txcommon.exceptions import FileCheckError
from transifex.languages.models import Language
from transifex.resources.formats.registry import registry
from transifex.languages.models import Language, language_choice_list
from transifex.resources.models import Resource
from transifex.resources.formats.core import ParseError
from transifex.resources.backends import ResourceBackend, \
        ResourceBackendError, content_from_uploaded_file


class ResourceForm(forms.ModelForm):

    sourcefile = forms.FileField(label=_("Source File"), required=False)

    class Meta:
        model = Resource
        exclude = ('project', 'resource_group', 'i18n_type', 'source_language')


class CreateResourceForm(forms.ModelForm):
    """Form to create a new resource."""

    i18n_choices = sorted(registry.descriptions(), key=lambda m: m[1])
    i18n_choices.insert(0, ('', '-' * 10))

    source_file = forms.FileField(label=_("Resource File"))
    i18n_method = forms.ChoiceField(
        label=_("I18N Type"), choices=i18n_choices,
        help_text=_(
            "The type of i18n method used in this resource (%s)" % \
                ', '.join(sorted(m[1] for m in registry.descriptions()))
        )
    )

    class Meta:
        model = Resource
        fields = ('source_file', 'name', 'i18n_method', )


class ResourceTranslationForm(forms.Form):
    """
    Form to to be used for creating new translations.
    """

    language_choices = language_choice_list()
    language_choices.insert(0, ('', '-' * 10))

    translation_file = forms.FileField(label=_("Translation File"))
    target_language = forms.ChoiceField(
        label=_('Language'), choices=language_choices,
        help_text=_("The language of the translation.")
    )


class UpdateTranslationForm(forms.Form):
    """Form used when uploading a new translation file."""

    translation_file = forms.FileField(label=_("Translation File"))
    target_language = forms.ChoiceField(
        label=_('Language'), widget=forms.HiddenInput,
        choices=language_choice_list(),
        help_text=_("The language of the translation.")
    )



class ResourcePseudoTranslationForm(forms.Form):
    """Form to be used for getting pseudo translation files"""

    pseudo_type = forms.ChoiceField(label=_("Pseudo type"), required=True,
        choices=[(k, v) for k, v in settings.PSEUDO_TYPES.items()],
        widget=forms.widgets.RadioSelect, initial='MIXED',
        help_text=_("For more info about each pseudo translation type, please "
            "refer to the docs."))

########NEW FILE########
__FILENAME__ = handlers
# -*- coding: utf-8 -*-
from django.conf import settings
from django.db.models import get_model
from django.db.models.signals import pre_save
from transifex.actionlog.models import action_logging
from transifex.projects.signals import post_resource_save, post_resource_delete
from transifex.txcommon import notifications as txnotification
from transifex.resources.utils import invalidate_template_cache
from transifex.teams.models import Team

RLStats = get_model('resources', 'RLStats')
Translation = get_model('resources', 'Translation')

def get_project_teams(project):
    if project.outsource:
        return project.outsource.team_set.all()
    else:
        return project.team_set.all()

def invalidate_stats_cache(resource, language, **kwargs):
    """
    Invalidate template caches and handle the updating of the persistent
    stats.
    """

    is_source = False
    if not language or language == resource.source_language:
        is_source = True
        language = resource.source_language

    team_languages = get_project_teams(resource.project).values_list(
            'language', flat=True)

    if not is_source:
        # Get or create new RLStat object
        rl, created = RLStats.objects.get_or_create(resource=resource,
            language=language)
        rl.update( kwargs['user'] if kwargs.has_key('user') else None)
        # Check to see if the lang has zero translations and is not a team
        # lang. If yes, delete RLStats object
        if rl.translated == 0 and rl.language.id not in\
          team_languages:
            rl.delete()
    else:
        rl, created = RLStats.objects.get_or_create(resource=resource,
            language=language)
        # Source file was updated. Update all language statistics
        stats = RLStats.objects.filter(resource=resource)
        for s in stats:
            s.update(kwargs['user'] if kwargs.has_key('user') else None)
            if s.translated == 0 and s.language.id not in\
              team_languages:
                s.delete()

        # Update resource wordcount and total entities
        resource.update_total_entities(save=False)
        resource.update_wordcount(save=True)

    invalidate_object_templates(resource, language, **kwargs)

def invalidate_object_templates(resource, language, **kwargs):
    """
    Invalidate all template level caches related to a specific object
    """

    if language == resource.source_language:
        langs = resource.available_languages
    else:
        langs = [language]

    # Template lvl cache for resource details
    invalidate_template_cache("resource_details",
        resource.project.slug, resource.slug)

    invalidate_template_cache("project_resource_details",
        resource.project.slug, resource.slug)

    # Number of source strings in resource
    for lang in langs:
        invalidate_template_cache("team_details",
            resource.project.slug, lang.code, resource.id)

        for rel in resource.project.releases.all():
            # Template lvl cache for release details
            invalidate_template_cache("release_details",
                rel.id, lang.id)

        # Template lvl cache for resource details
        invalidate_template_cache("resource_details_lang",
            resource.project.slug, resource.slug,
             lang.code)

def on_resource_save(sender, instance, created, user, **kwargs):
    """
    Called on resource post save and passes a user object in addition to the
    saved instance. Used for logging the create/update of a resource.
    """
    # ActionLog
    context = {'resource': instance,
               'sender': user}
    object_list = [instance.project, instance]
    if created:
        nt = 'project_resource_added'
        action_logging(user, object_list, nt, context=context)
    else:
        nt = 'project_resource_changed'
        action_logging(user, object_list, nt, context=context)

def on_resource_delete(sender, instance, user, **kwargs):
    """
    Called on resource post delete to file an action log for this action.
    Passes a user object along with the deleted instance for use in the logging
    mechanism.
    """
    # ActionLog
    context = {'resource': instance,
               'sender': user}
    object_list = [instance.project, instance]
    nt = 'project_resource_deleted'
    action_logging(user, object_list, nt, context=context)
    if settings.ENABLE_NOTICES:
        txnotification.send_observation_notices_for(instance.project,
                signal=nt, extra_context=context)

# Resource signal handlers for logging
post_resource_save.connect(on_resource_save)
post_resource_delete.connect(on_resource_delete)

########NEW FILE########
__FILENAME__ = lookups
from django.db.models import Q
from transifex.resources.models import Resource

class ResourcesLookup(object):
    """
    A lookup class, used by django-ajax-select app to search Project
    Resource objects.
    """
    def get_query(self, q, request):
        """
        Return a query set.

        You also have access to request.user if needed.
        """
        return Resource.objects.for_user(request.user).filter(
                                        Q(slug__istartswith=q) |
                                        Q(name__istartswith=q) |
                                        Q(project__slug__istartswith=q) |
                                        Q(project__name__istartswith=q))

    def format_item(self, resource):
        """Simple display of an resource object when displayed in the list."""
        return unicode(resource)

    def format_result(self, resource):
        """
        A more verbose display, used in the search results display.

        It may contain html and multi-lines.
        """
        return u"%s" % (resource)

    def get_objects(self, ids):
        """Given a list of ids, return the resource objects ordered."""
        return Resource.objects.filter(pk__in=ids).order_by('name')

########NEW FILE########
__FILENAME__ = txstatsupdate
# -*- coding: utf-8 -*-
from optparse import make_option, OptionParser
import os.path
import sys
from django.core.management.base import (BaseCommand, LabelCommand, CommandError)
from django.db.models import get_model
from django.conf import settings

class Command(LabelCommand):
    """
    Management Command Class about resource source file updating
    """
    help = "This command creates the necessary objects for every resource"\
           " and forces statistics to be recalculated."
    args = "<project_slug1.resource_slug1 project_slug1.resource_slug2>"

    can_import_settings = True

    def handle(self, *args, **options):

        Resource = get_model('resources', 'Resource')
        Translation = get_model('resources', 'Translation')
        Language = get_model('languages', 'Language')
        RLStats = get_model('resources', 'RLStats')
        Team = get_model('teams', 'Team')

        verbosity = int(options.get('verbosity',1))

        if not args:
            resources = Resource.objects.all()
        else:
            resources = []
            for arg in args:
                try:
                    prj, res = arg.split('.')
                    resources.extend(Resource.objects.filter(project__slug=prj,
                        slug=res) or None)
                except TypeError, e:
                    raise Exception("Unknown resource %s.%s" % (prj, res))
                except ValueError, e:
                    raise Exception("Argument %s is not in the correct format"
                        % arg)

        num = len(resources)

        if num == 0:
            sys.stderr.write("No resources suitable for updating found. Exiting...\n")
            sys.exit()


        if verbosity:
            sys.stdout.write("A total of %s resources are listed for updating.\n" % num)

        for seq, r in enumerate(resources):
            if verbosity:
                sys.stdout.write((u"Updating resource %s.%s (%s of %s)\n" %
                    ( r.project.slug, r.slug, seq+1, num)).encode('UTF-8'))

            # Update resource fields
            r.update_total_entities()
            r.update_wordcount()

            # Get a list of the available languages
            langs = list(Translation.objects.filter(
                resource=r).order_by('language').values_list(
                'language',flat=True).distinct())

            # Update stats
            for lang in langs:
                lang = Language.objects.get(id=lang)
                if verbosity:
                    sys.stdout.write("Calculating statistics for language %s.\n" % lang)
                rl, created = RLStats.objects.get_or_create(resource=r, language=lang)
                rl.update()

            if r.project.outsource:
                teams = Team.objects.filter(project=r.project.outsource)
            else:
                teams = Team.objects.filter(project=r.project)

            # Exclude all rlstats that were already created
            teams = teams.exclude(language__id__in=langs)

            for team in teams:
                lang = team.language
                # Add team languages to the existing languages
                langs.append(lang.id)
                if verbosity:
                    sys.stdout.write("Calculating statistics for team language %s.\n" % lang)
                rl,created = RLStats.objects.get_or_create(resource=r, language=lang)
                rl.update()

            # Add source language to the existing languages
            langs.append(r.source_language.id)

            # For all existing languages that don't have a translation or
            # don't have a corresponding team, delete RLStat object
            rlstats = RLStats.objects.filter(resource=r)
            for stat in rlstats:
                if not stat.language.id in langs:
                    stat.delete()

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    depends_on = (
        ("projects", "0001_initial"),
        # ("storage", "0001_initial"),
        ("languages", "0001_initial"),
    )

    def forwards(self, orm):

        # Adding model 'Resource'
        db.create_table('resources_resource', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(max_length=50, db_index=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('source_file', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['storage.StorageFile'], null=True, blank=True)),
            ('i18n_type', self.gf('django.db.models.fields.CharField')(max_length=20)),
            ('accept_translations', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_update', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('source_language', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['languages.Language'])),
            ('project', self.gf('django.db.models.fields.related.ForeignKey')(related_name='resources', null=True, to=orm['projects.Project'])),
            ('_order', self.gf('django.db.models.fields.IntegerField')(default=0)),
        ))
        db.send_create_signal('resources', ['Resource'])

        # Adding unique constraint on 'Resource', fields ['slug', 'project']
        db.create_unique('resources_resource', ['slug', 'project_id'])

        # Adding model 'SourceEntity'
        db.create_table('resources_sourceentity', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('string', self.gf('django.db.models.fields.TextField')()),
            ('string_hash', self.gf('django.db.models.fields.CharField')(max_length=32)),
            ('context', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('position', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('occurrences', self.gf('django.db.models.fields.TextField')(max_length=1000, null=True, blank=True)),
            ('flags', self.gf('django.db.models.fields.TextField')(max_length=100, blank=True)),
            ('developer_comment', self.gf('django.db.models.fields.TextField')(max_length=1000, blank=True)),
            ('pluralized', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_update', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('resource', self.gf('django.db.models.fields.related.ForeignKey')(related_name='source_entities', to=orm['resources.Resource'])),
            ('_order', self.gf('django.db.models.fields.IntegerField')(default=0)),
        ))
        db.send_create_signal('resources', ['SourceEntity'])

        # Adding unique constraint on 'SourceEntity', fields ['string_hash', 'context', 'resource']
        db.create_unique('resources_sourceentity', ['string_hash', 'context', 'resource_id'])

        # Adding model 'Translation'
        db.create_table('resources_translation', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('string', self.gf('django.db.models.fields.TextField')()),
            ('string_hash', self.gf('django.db.models.fields.CharField')(max_length=32)),
            ('rule', self.gf('django.db.models.fields.IntegerField')(default=5)),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('last_update', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('source_entity', self.gf('django.db.models.fields.related.ForeignKey')(related_name='translations', to=orm['resources.SourceEntity'])),
            ('language', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['languages.Language'], null=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], null=True)),
            ('_order', self.gf('django.db.models.fields.IntegerField')(default=0)),
        ))
        db.send_create_signal('resources', ['Translation'])

        # Adding unique constraint on 'Translation', fields ['source_entity', 'language', 'rule']
        db.create_unique('resources_translation', ['source_entity_id', 'language_id', 'rule'])

        # Adding model 'Template'
        db.create_table('resources_template', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('content', self.gf('txcommon.db.models.CompressedTextField')(null=False, blank=False)),
            ('resource', self.gf('django.db.models.fields.related.ForeignKey')(related_name='source_file_template', unique=True, to=orm['resources.Resource'])),
        ))
        db.send_create_signal('resources', ['Template'])


    def backwards(self, orm):

        # Removing unique constraint on 'Translation', fields ['source_entity', 'language', 'rule']
        db.delete_unique('resources_translation', ['source_entity_id', 'language_id', 'rule'])

        # Removing unique constraint on 'SourceEntity', fields ['string_hash', 'context', 'resource']
        db.delete_unique('resources_sourceentity', ['string_hash', 'context', 'resource_id'])

        # Removing unique constraint on 'Resource', fields ['slug', 'project']
        db.delete_unique('resources_resource', ['slug', 'project_id'])

        # Deleting model 'Resource'
        db.delete_table('resources_resource')

        # Deleting model 'SourceEntity'
        db.delete_table('resources_sourceentity')

        # Deleting model 'Translation'
        db.delete_table('resources_translation')

        # Deleting model 'Template'
        db.delete_table('resources_template')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0002_new_hash_format
# encoding: utf-8
import datetime
import re
from south.db import db
from south.v2 import DataMigration
from django.db import models, utils
from transifex.resources.models import SourceEntity, Template
from transifex.txcommon.log import logger

class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        for se in orm.SourceEntity.objects.all():
            old_hash = se.string_hash
            try:
                if se.context == 'None' or not se.context:
                    se.context = ""
                se.save()
            except utils.IntegrityError:
                logger.error("Failed to update one of the source entities"
                " for resource %s. Please re-upload the source file for that"
                " resource." % '.'.join([se.resource.project.slug,
                se.resource.slug]))

                continue

            new_hash = se.string_hash

            template = orm.Template.objects.get(resource=se.resource)
            template.content = re.sub(str(old_hash), str(new_hash), template.content)
            template.save()

    def backwards(self, orm):
        "Write your backwards methods here."
        for se in orm.SourceEntity.objects.all():
            old_hash = se.string_hash
            se.save()
            new_hash = se.string_hash
            template = orm.Template.objects.get(resource=se.resource)
            template.content = re.sub(old_hash, new_hash, template.content)
            template.save()

    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_resource_total_entities__add_field_resource_wordcount
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'Resource.total_entities'
        db.add_column('resources_resource', 'total_entities', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Adding field 'Resource.wordcount'
        db.add_column('resources_resource', 'wordcount', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)


    def backwards(self, orm):

        # Deleting field 'Resource.total_entities'
        db.delete_column('resources_resource', 'total_entities')

        # Deleting field 'Resource.wordcount'
        db.delete_column('resources_resource', 'wordcount')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0004_calculate_entities
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

from transifex.resources.models import Resource

class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        for r in orm.Resource.objects.all():
            total_entities_ids = orm.SourceEntity.objects.filter(
                resource=r).values('id')
            r.total_entities = total_entities_ids.count()
            wc = 0
            for t in orm.Translation.objects.filter(source_entity__id__in=
              total_entities_ids, language=r.source_language):
                wc += len(t.string.split(None))
            r.wordcount = wc
            r.save()

    def backwards(self, orm):
        "Write your backwards methods here."
        pass


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0005_added_rlstats_model
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'RLStats'
        db.create_table('resources_rlstats', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('translated', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
            ('untranslated', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
            ('last_update', self.gf('django.db.models.fields.DateTimeField')(default=None, auto_now=True, blank=True)),
            ('last_committer', self.gf('django.db.models.fields.related.ForeignKey')(default=None, to=orm['auth.User'], null=True)),
            ('resource', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['resources.Resource'])),
            ('language', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['languages.Language'])),
            ('translated_perc', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
            ('untranslated_perc', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
            ('_order', self.gf('django.db.models.fields.IntegerField')(default=0)),
        ))
        db.send_create_signal('resources', ['RLStats'])

        # Adding unique constraint on 'RLStats', fields ['resource', 'language']
        db.create_unique('resources_rlstats', ['resource_id', 'language_id'])


    def backwards(self, orm):

        # Removing unique constraint on 'RLStats', fields ['resource', 'language']
        db.delete_unique('resources_rlstats', ['resource_id', 'language_id'])

        # Deleting model 'RLStats'
        db.delete_table('resources_rlstats')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0006_convert_fk_to_1on1
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'Template.resource'
        db.alter_column('resources_template', 'resource_id', self.gf('django.db.models.fields.related.OneToOneField')(unique=True, to=orm['resources.Resource']))


    def backwards(self, orm):

        # Changing field 'Template.resource'
        db.alter_column('resources_template', 'resource_id', self.gf('django.db.models.fields.related.ForeignKey')(unique=True, to=orm['resources.Resource']))


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0007_added_translated_wordcount
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'RLStats.translated_wordcount'
        db.add_column('resources_rlstats', 'translated_wordcount', self.gf('django.db.models.fields.PositiveIntegerField')(default=0), keep_default=False)

        # Changing field 'Template.resource'
        db.alter_column('resources_template', 'resource_id', self.gf('django.db.models.fields.related.ForeignKey')(unique=True, to=orm['resources.Resource']))


    def backwards(self, orm):

        # Deleting field 'RLStats.translated_wordcount'
        db.delete_column('resources_rlstats', 'translated_wordcount')

        # Changing field 'Template.resource'
        db.alter_column('resources_template', 'resource_id', self.gf('django.db.models.fields.related.OneToOneField')(unique=True, to=orm['resources.Resource']))


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0008_escape_ts_special_chars
# encoding: utf-8
import re
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models
from transifex.resources.models import (Resource, SourceEntity, Translation,
    Template)
from xml.sax.saxutils import escape, unescape

class Migration(DataMigration):

    def forwards(self, orm):
        "Unescape all strings that are from Qt files"
        for r in orm['resources.Resource'].objects.filter(i18n_type=u'Qt'):
            template = orm['resources.Template'].objects.get(resource=r)
            for s in orm['resources.SourceEntity'].objects.filter(resource=r):
                old_hash = s.string_hash
                s.string = unescape(s.string, {"&apos;": "'", "&quot;": '"'})
                s.save()
                for t in orm['resources.Translation'].objects.filter(source_entity=s):
                    t.string = unescape(t.string,
                        {"&apos;": "'", "&quot;":'"'})
                    t.save()

                new_hash = s.string_hash
                template.content = re.sub(str(old_hash), str(new_hash),
                    template.content)
            template.save()

    def backwards(self, orm):
        "Escape all strings that belong to Qt files."
        for r in orm['resources.Resource'].objects.filter(i18n_type=u'Qt'):
            template = orm['resources.Template'].objects.get(resource=r)
            for s in orm['resources.SourceEntity'].objects.filter(resource=r):
                old_hash = s.string_hash
                s.string = escape(s.string,  {"'": "&apos;", '"': '&quot;'})
                s.save()
                for t in orm['resources.Translation'].objects.filter(source_entity=s):
                    t.string = escape(t.string,  {"'": "&apos;", '"': '&quot;'})
                    t.save()

                new_hash = s.string_hash
                if type(template.content) == str:
                    content = unicode(template.content.decode('utf-8'))
                else:
                    content = template.content
                template.content = re.sub(old_hash, new_hash, content)
            template.save()



    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0009_added_translation_wordcount
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'Translation.wordcount'
        db.add_column('resources_translation', 'wordcount', self.gf('django.db.models.fields.PositiveIntegerField')(default=0), keep_default=False)


    def backwards(self, orm):

        # Deleting field 'Translation.wordcount'
        db.delete_column('resources_translation', 'wordcount')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0010_calculate_translation_wordcount
# encoding: utf-8
import gc
import sys
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models
from django.db.transaction import commit_on_success
from transifex.resources.models import Translation

def queryset_iterator(queryset, chunksize=5000):
    '''
    Iterate over a Django Queryset ordered by the primary key

    This method loads a maximum of chunksize (default: 5000) rows in it's
    memory at the same time while django normally would load all rows in it's
    memory. Using the iterator() method only causes it to not preload all the
    classes.

    Note that the implementation of the iterator does not support ordered query
    sets.
    '''
    pk = 0
    if not queryset.count():
        return
    last_pk = queryset.order_by('-pk')[0].pk
    queryset = queryset.order_by('pk')
    while pk < last_pk:
        for row in queryset.filter(pk__gt=pk)[:chunksize]:
            pk = row.pk
            yield row
        gc.collect()

class Migration(DataMigration):

    @commit_on_success
    def forwards(self, orm):
        "Write your forwards methods here."
        count = 0
        total = orm.Translation.objects.all().count()
        for t in queryset_iterator(orm.Translation.objects.all()):
            sys.stderr.write('\r %d / %d' % (count, total))
            t.save()
            count += 1


    def backwards(self, orm):
        "Write your backwards methods here."
        pass


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0011_remove_deprecated_tables
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

from django.db.transaction import commit_on_success

DEPRECATED_TABLES = [
    "addons_locks_pofile_lock",
    "codebases_unit",
    "django_authopenid_association",
    "django_authopenid_nonce",
    "django_authopenid_userassociation",
    "django_authopenid_userpasswordqueue",
    "django_evolution",
    "monitoring_componentmonitorvars",
    "projects_component",
    "projects_release",
    "projects_release_components",
    "repowatch_watch",
    "repowatch_watch_user",
    "reviews_poreviewrequest",
    "reviews_reviewlike",
    "tarball_tarball",
    "translations_pofile",
    "vcs_vcsunit",
]

class Migration(DataMigration):
    def forwards(self, orm):
        "Write your forwards methods here."
        for table in DEPRECATED_TABLES:
            try:
                db.delete_table(table, cascade=True)
            except Exception,e:
                # don't really need notifications abou this.
                pass

    def backwards(self, orm):
        "Write your backwards methods here."
        raise Exception("Cannot reverse this migration.")

    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'context': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0012_auto__del_field_sourceentity__order__chg_field_sourceentity_context__d
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'SourceEntity._order'
        db.delete_column('resources_sourceentity', '_order')

        # Changing field 'SourceEntity.context'
        db.alter_column('resources_sourceentity', 'context', self.gf('transifex.txcommon.db.models.ListCharField')(max_length=255, null=False))

        # Deleting field 'Translation._order'
        db.delete_column('resources_translation', '_order')

        # Changing field 'Template.resource'
        db.alter_column('resources_template', 'resource_id', self.gf('django.db.models.fields.related.OneToOneField')(unique=True, to=orm['resources.Resource']))


    def backwards(self, orm):
        
        # Adding field 'SourceEntity._order'
        db.add_column('resources_sourceentity', '_order', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Changing field 'SourceEntity.context'
        db.alter_column('resources_sourceentity', 'context', self.gf('django.db.models.fields.CharField')(max_length=255))

        # Adding field 'Translation._order'
        db.add_column('resources_translation', '_order', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)

        # Changing field 'Template.resource'
        db.alter_column('resources_template', 'resource_id', self.gf('django.db.models.fields.related.ForeignKey')(unique=True, to=orm['resources.Resource']))


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0013_new_hash_due_context_filed_changes
# encoding: utf-8
import datetime, re
from south.db import db
from south.v2 import DataMigration
from django.db import models, utils

class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        for se in orm.SourceEntity.objects.filter(context__contains=":"):
            old_hash = se.string_hash
            try:
                se.context = u'\:'.join(se.context)
                se.save()
            except utils.IntegrityError:
                logger.error("Failed to update one of the source entities"
                " for resource %s. Please re-upload the source file for that"
                " resource." % '.'.join([se.resource.project.slug,
                se.resource.slug]))
                continue

            new_hash = se.string_hash

            template = orm.Template.objects.get(resource=se.resource)
            template.content = re.sub(str(old_hash), str(new_hash), template.content)
            template.save()

    def backwards(self, orm):
        "Write your backwards methods here."
        raise Exception("Cannot reverse this migration.")

    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0014_enforce_newlines
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models, transaction

class Migration(DataMigration):

    def forwards(self, orm):
        po_resources = orm['resources.Resource'].objects.filter(i18n_type='PO')
        po_source_entities = orm['resources.SourceEntity'].objects.filter(
            resource__in=po_resources
        )
        po_source_translations = orm['resources.Translation'].objects.filter(
            source_entity__in=po_source_entities
        )
        translations_end_newline = po_source_translations.filter(
            string__endswith='\n'
        ).values_list('source_entity_id', flat=True)
        translations_start_newline = po_source_translations.filter(
            string__startswith='\n'
        ).values_list('source_entity_id', flat=True)
        se_end_newline = orm['resources.SourceEntity'].objects.filter(
            id__in=translations_end_newline
        )
        se_start_newline = orm['resources.SourceEntity'].objects.filter(
            id__in=translations_start_newline
        )
        self.add_end_newline(orm['resources.Translation'].objects.filter(
                source_entity__in=se_end_newline
        ))
        self.add_start_newline(orm['resources.Translation'].objects.filter(
                source_entity__in=se_start_newline
        ))


    def backwards(self, orm):
        # No need to revert newlines
        pass

    @transaction.commit_manually
    def add_end_newline(self, t_qs):
        """Ensure all translations end with newlines."""
        for t in t_qs:
            if t.string[-1] != '\n':
                t.string += '\n'
                t.save()
        transaction.commit()

    @transaction.commit_manually
    def add_start_newline(self, t_qs):
        """Ensure all translations start with newlines."""
        for t in t_qs:
            if t.string[0] != '\n':
                t.string = '\n' + t.string
                t.save()
        transaction.commit()


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources', 'resources']

########NEW FILE########
__FILENAME__ = 0015_added_sourceentity_developer_comment_extra_field
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'SourceEntity.developer_comment_extra'
        db.add_column('resources_sourceentity', 'developer_comment_extra', self.gf('django.db.models.fields.TextField')(default='', max_length=1000, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'SourceEntity.developer_comment_extra'
        db.delete_column('resources_sourceentity', 'developer_comment_extra')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0016_add_resource_key_to_translations
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Translation.resource'
        db.add_column('resources_translation', 'resource', self.gf('django.db.models.fields.related.ForeignKey')(related_name='+', null=True, to=orm['resources.Resource']), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Translation.resource'
        db.delete_column('resources_translation', 'resource_id')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'null': 'True', 'to': "orm['resources.Resource']"}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0017_update_resource_in_translations
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        for resource in orm['resources.Resource'].objects.all():
            orm['resources.Translation'].objects.filter(source_entity__resource=resource).update(resource=resource)


    def backwards(self, orm):
        "Write your backwards methods here."


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'null': 'True', 'to': "orm['resources.Resource']"}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources', 'resources']

########NEW FILE########
__FILENAME__ = 0018_make_resource_in_translations_not_null
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'Translation.resource'
        db.alter_column('resources_translation', 'resource_id', self.gf('django.db.models.fields.related.ForeignKey')(null=False, to=orm['resources.Resource']))


    def backwards(self, orm):

        # Changing field 'Translation.resource'
        db.alter_column('resources_translation', 'resource_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['resources.Resource']))


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'to': "orm['resources.Resource']"}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0019_auto__add_field_translation_origin
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Translation.origin'
        db.add_column('resources_translation', 'origin', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Translation.origin'
        db.delete_column('resources_translation', 'origin')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'origin': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'to': "orm['resources.Resource']"}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0020_auto__add_field_resource_category
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Resource.category'
        db.add_column('resources_resource', 'category', self.gf('django.db.models.fields.CharField')(max_length=64, null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Resource.category'
        db.delete_column('resources_resource', 'category')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'category': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0021_auto__add_field_translation_reviewed
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Translation.reviewed'
        db.add_column('resources_translation', 'reviewed', self.gf('django.db.models.fields.NullBooleanField')(default=False, null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        pass


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True', 'db_index': 'False'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'db_index': 'True', 'blank': 'True'}),
            'origin': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'db_index': 'False', 'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'db_index': 'False', 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0022_auto__add_field_rlstats_reviewed
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'RLStats.reviewed'
        db.add_column('resources_rlstats', 'reviewed', self.gf('django.db.models.fields.PositiveIntegerField')(default=0), keep_default=False)

        # Adding field 'RLStats.reviewed_perc'
        db.add_column('resources_rlstats', 'reviewed_perc', self.gf('django.db.models.fields.PositiveIntegerField')(default=0), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'RLStats.reviewed'
        db.delete_column('resources_rlstats', 'reviewed')

        # Deleting field 'RLStats.reviewed_perc'
        db.delete_column('resources_rlstats', 'reviewed_perc')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'category': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'source_file': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['storage.StorageFile']", 'null': 'True', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'reviewed_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'origin': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'storage.storagefile': {
            'Meta': {'object_name': 'StorageFile'},
            'bound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '1024'}),
            'size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'total_strings': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '1024'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0023_auto__del_field_resource_source_file
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    depends_on = (
        ("copyright", "0002_populate_with_existing_data"),
    )

    def forwards(self, orm):

        # Deleting field 'Resource.source_file'
        db.delete_column('resources_resource', 'source_file_id')


    def backwards(self, orm):

        # Adding field 'Resource.source_file'
        db.add_column('resources_resource', 'source_file', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['storage.StorageFile'], null=True, blank=True), keep_default=False)


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0024_revert_type_to_po
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        for r in orm['resources.Resource'].objects.filter(i18n_type='POT'):
            r.i18n_type = 'PO'
            r.save()


    def backwards(self, orm):
        pass


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_hub': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outsourcing'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'db_index': 'False'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'category': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'reviewed_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'origin': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0025_auto__chg_field_resource_slug
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'Resource.slug'
        db.alter_column('resources_resource', 'slug', self.gf('django.db.models.fields.SlugField')(max_length=200))


    def backwards(self, orm):
        
        # Changing field 'Resource.slug'
        db.alter_column('resources_resource', 'slug', self.gf('django.db.models.fields.SlugField')(max_length=50))


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_hub': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'logo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outsourcing'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'db_index': 'False'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'default': "''", 'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'category': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '200'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'reviewed_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'origin': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0026_auto__add_field_sourceentity_order
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'SourceEntity.order'
        db.add_column('resources_sourceentity', 'order', self.gf('django.db.models.fields.PositiveIntegerField')(null=True, blank=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'SourceEntity.order'
        db.delete_column('resources_sourceentity', 'order')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_hub': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'logo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outsourcing'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'db_index': 'False'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'default': "''", 'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'category': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '200'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'reviewed_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'origin': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0027_auto__chg_field_sourceentity_order
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Renaming column for 'SourceEntity.order' to match new field type.
        db.rename_column('resources_sourceentity', 'order', 'appearance_order')
        # Changing field 'SourceEntity.order'
        db.alter_column('resources_sourceentity', 'appearance_order', self.gf('django.db.models.fields.PositiveIntegerField')(null=True, db_column='appearance_order'))


    def backwards(self, orm):
        
        # Renaming column for 'SourceEntity.order' to match new field type.
        db.rename_column('resources_sourceentity', 'appearance_order', 'order')
        # Changing field 'SourceEntity.order'
        db.alter_column('resources_sourceentity', 'order', self.gf('django.db.models.fields.PositiveIntegerField')(null=True))


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_hub': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'logo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outsourcing'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'db_index': 'False'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'default': "''", 'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'category': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '200'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'reviewed_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'db_column': "'appearance_order'", 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'origin': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = 0028_auto__add_reviewhistory__add_unique_reviewhistory_translation_id_usern
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'ReviewHistory'
        db.create_table('resources_reviewhistory', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('translation_id', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('project_id', self.gf('django.db.models.fields.IntegerField')(db_index=True)),
            ('string', self.gf('django.db.models.fields.TextField')()),
            ('username', self.gf('django.db.models.fields.CharField')(db_index=True, max_length=50, null=True, blank=True)),
            ('created', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, db_index=True, blank=True)),
            ('action', self.gf('django.db.models.fields.CharField')(max_length=1)),
        ))
        db.send_create_signal('resources', ['ReviewHistory'])

        # Adding unique constraint on 'ReviewHistory', fields ['translation_id', 'username', 'created', 'action']
        db.create_unique('resources_reviewhistory', ['translation_id', 'username', 'created', 'action'])


    def backwards(self, orm):

        # Removing unique constraint on 'ReviewHistory', fields ['translation_id', 'username', 'created', 'action']
        db.delete_unique('resources_reviewhistory', ['translation_id', 'username', 'created', 'action'])

        # Deleting model 'ReviewHistory'
        db.delete_table('resources_reviewhistory')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_hub': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'logo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outsourcing'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'db_index': 'False'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'default': "''", 'null': 'True'}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'resources.resource': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('slug', 'project'),)", 'object_name': 'Resource'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'accept_translations': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'category': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'i18n_type': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'resources'", 'null': 'True', 'to': "orm['projects.Project']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '200'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'total_entities': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'wordcount': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'resources.reviewhistory': {
            'Meta': {'unique_together': "(('translation_id', 'username', 'created', 'action'),)", 'object_name': 'ReviewHistory'},
            'action': ('django.db.models.fields.CharField', [], {'max_length': '1'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'translation_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'resources.rlstats': {
            'Meta': {'ordering': "('_order',)", 'unique_together': "(('resource', 'language'),)", 'object_name': 'RLStats'},
            '_order': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'last_committer': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'to': "orm['auth.User']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'auto_now': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'reviewed_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'untranslated_perc': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'resources.sourceentity': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('string_hash', 'context', 'resource'),)", 'object_name': 'SourceEntity'},
            'context': ('transifex.txcommon.db.models.ListCharField', [], {'default': "''", 'max_length': '255', 'null': 'False', 'blank': 'False'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'developer_comment_extra': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'flags': ('django.db.models.fields.TextField', [], {'max_length': '100', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'occurrences': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'db_column': "'appearance_order'", 'blank': 'True'}),
            'pluralized': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'position': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'source_entities'", 'to': "orm['resources.Resource']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        },
        'resources.template': {
            'Meta': {'ordering': "['resource']", 'object_name': 'Template'},
            'content': ('transifex.txcommon.db.models.CompressedTextField', [], {'null': 'False', 'blank': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'resource': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'source_file_template'", 'unique': 'True', 'to': "orm['resources.Resource']"})
        },
        'resources.translation': {
            'Meta': {'ordering': "['last_update']", 'unique_together': "(('source_entity', 'language', 'rule'),)", 'object_name': 'Translation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True'}),
            'last_update': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'origin': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'resource': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'+'", 'to': "orm['resources.Resource']"}),
            'reviewed': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
            'rule': ('django.db.models.fields.IntegerField', [], {'default': '5'}),
            'source_entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'to': "orm['resources.SourceEntity']"}),
            'string': ('django.db.models.fields.TextField', [], {}),
            'string_hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['resources']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-
"""
String Level models.
"""

import datetime, sys, re, operator
from itertools import groupby

from hashlib import md5
from django.conf import settings
from django.core.cache import cache
from django.core.validators import validate_slug
from django.db import models, connection
from django.db.models import Q, Sum, Max
from django.utils.translation import ugettext_lazy as _
from django.utils.hashcompat import md5_constructor
from django.utils import simplejson as json
from django.contrib.auth.models import User, AnonymousUser
from django.forms import ValidationError
from djangobulk.bulk import insert_many, update_many
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.txcommon.db.models import CompressedTextField, \
    ChainerManager, ListCharField
from transifex.txcommon.log import logger
from transifex.resources.utils import invalidate_template_cache
from transifex.resources.signals import post_update_rlstats
from transifex.resources.tasks import check_and_notify_resource_full_reviewed
from transifex.txcommon.utils import immutable_property

class AggregatedRLStats(object):
    def __init__(self, **kwargs):
        # For all kwargs entries passed, create an related attr in the instance
        for k, v in kwargs.items():
            setattr(self, k, v)

def _aggregate_rlstats(rlstats_query, grouping_key, total=None):
    """
    Yield AggregatedRLStats objects resulting from grouped and summed RLStats
    objects given in the ``rlstats_query``. The grouping happens per language.

    Parameters:
    rlstats_query: This is the queryset of RLStats to be aggregated
    """

    # Here grouping happens by the grouping_key. If it's a foreign key
    # (resource, language) you have to make sure that __unicode__() method
    # returns something unique per key.
    grouped_rlstats = groupby(rlstats_query, key=operator.attrgetter(grouping_key))

    for key, rlstats in grouped_rlstats:
        stats = AggregatedRLStats()
        # Init attrs
        stats.translated = 0
        stats.untranslated = 0
        stats.translated_perc = 0
        stats.untranslated_perc = 0
        stats.last_update = None
        stats.last_committer = None
        stats.wordcount = 0
        stats.total = 0
        stats.object = key
        count = 0

        for rl in rlstats:
            stats.translated += rl.translated
            stats.untranslated += rl.untranslated
            stats.translated_perc += rl.translated_perc
            stats.untranslated_perc += rl.untranslated_perc
            stats.total += rl.total
            #FIXME: Add wordcount to RLStats and Translation
            #stats.wordcount += rl.wordcount
            count += 1

            if not stats.last_update or rl.last_update > stats.last_update:
                stats.last_update = rl.last_update
                stats.last_committer = rl.last_committer if rl.last_committer_id else None

        # Recalculate percentage completion
        stats.translated_perc = stats.translated_perc / count
        stats.untranslated_perc = 100 - stats.translated_perc

        if total:
            stats.total=total

        stats.number_resources = count
        yield stats


def get_source_language(resources):
    """Return the source language of a list of resources."""
    return resources[0].source_language


class ResourceQuerySet(models.query.QuerySet):

    def for_user(self, user):
        """
        Filter available resources based on the user doing the query. This
        checks permissions and filters out private resources that the user
        doesn't have access to.
        """
        return Resource.objects.filter(
            #FIXME: Adding "Project.objects.for_user(user).values('pk').query"
            # breaks some queries like
            # RLStats.objects.private(User.objects.get(username="margie")).count()
            project__in=Project.objects.for_user(user))


    def by_project(self, project, include_outsourcing=True):
        """
        Filter resources by a project and by default also include resources
        of outsourced projects.
        """
        query = Q(project=project)
        if include_outsourcing and project.is_hub:
            query |= Q(project__outsource=project)
        return self.filter(query)
        

category_pat = re.compile(r'^[\w\d_-]+$')
def validate_category(value):
    if not category_pat.search(value):
        raise ValidationError("Not a valid category name")

class Resource(models.Model):
    """
    A translatable resource, such as a document, a set of strings, etc.

    This is roughly equivalent to a POT file, string stream, or some other
    strings grouped together as a single translatable element.

    The resource is the rough equivalent to the deprecated 'Component' object,
    but with an important difference: a resource can only have one "source file"
    whereas the Component was able to encapsulate multiple ones.

    A resource is always related to a project.
    """

    # Short identifier to be used in the API URLs
    slug = models.SlugField(_('Slug'), max_length=200, db_index=False,
        validators=[validate_slug,],
        help_text=_("A short label to be used in the URL, containing only "
                    "letters, numbers, underscores and hyphens."))
    name = models.CharField(_('Name'), max_length=255, null=False, blank=False,
        help_text=_("A descriptive name unique inside the project."))

    # i18n related fields
    i18n_type = models.CharField(_('I18n type'), max_length=20, editable=False,
        choices=((k,settings.I18N_METHODS[k]['description']) for k,v in settings.I18N_METHODS.items()),
        help_text=_("The type of i18n method used in this resource (%s)") %
                    ', '.join(settings.TRANS_CHOICES.keys()))
    accept_translations = models.BooleanField(_('Accepting translations?'),
        blank=False, null=False, default=True,
        help_text=_('Is this resource accepting translations?'))
    total_entities = models.IntegerField(_('Total source entities'),
        blank=False, null=False, editable=False, default=0,
        help_text=_('The number of source strings in this translation'
            ' resource.'))
    wordcount = models.IntegerField(_('Number of words in source entities.'),
        blank=False, null=False, editable=False, default=0,
        help_text=_('The number of words contained in the source entities in'
            ' this translation resource.'))

    #categories
    category = models.CharField(
        _('Category'), max_length=64, blank=True, null=True,
        validators=[validate_category],
        help_text=_("A text field used to help organize a release's resources "\
                    "into categories.")
    )

    # Timestamps
    created = models.DateTimeField(auto_now_add=True, editable=False)
    last_update = models.DateTimeField(auto_now=True, editable=False)

    # Foreign Keys
    source_language = models.ForeignKey(Language,
        verbose_name=_('Source Language'), blank=False, null=False,
        help_text=_("The source language of this Resource."))
    project = models.ForeignKey(Project, verbose_name=_('Project'),
        blank=False, null=True, related_name='resources',
        help_text=_("The project containing the translation resource."))

    # Managers
    objects = ChainerManager(ResourceQuerySet)

    def __unicode__(self):
        return u'%s: %s' % (self.project.name, self.name)

    def __repr__(self):
        return repr(u"<Resource: %s>" % self.slug)

    class Meta:
        unique_together = ('slug', 'project',)
        verbose_name = _('resource')
        verbose_name_plural = _('resources')
        ordering  = ['name',]
        order_with_respect_to = 'project'
        models.get_latest_by = 'created'

    # Add method property.
    # Used to set the i18n_type of the resource so that
    # POT files are always mapped tp PO i18n_type
    def _get_method(self):
        return self.i18n_type

    def _set_method(self, m):
        self.i18n_type = m
        if m == 'POT':
            self.i18n_type = 'PO'
        else:
            self.i18n_type = m

    i18n_method = property(_get_method, _set_method)

    def save(self, *args, **kwargs):
        """
        Do some etxra processing along with the actual save to db.
        """
        # If object is new (aka created=True)
        created=False
        if not self.pk:
            created=True
        self.source_language = self.project.source_language
        # Update total_entries
        self.update_total_entities(save=False)

        # Save the object
        super(Resource, self).save(*args, **kwargs)

        # Create the team language stat objects
        if created:
            Team = models.get_model('teams', 'Team')
            for team in Team.objects.select_related('language'
                ).filter(project=self.project):
                RLStats.objects.get_or_create(resource=self,
                    language=team.language)

        invalidate_template_cache("project_resource_details",
            self.project.slug, self.slug)
        invalidate_template_cache("resource_details",
            self.project.slug, self.slug)

    def delete(self, *args, **kwargs):
        """
        Do some extra processing along with the actual delete to db.
        """
        # Import is here to avoid circular imports
        from transifex.resources.handlers import invalidate_stats_cache

        invalidate_stats_cache(self, self.source_language)
        RLStats.objects.filter(resource=self).delete()
        super(Resource, self).delete(*args, **kwargs)

    def update_total_entities(self, total_entities=None, save=True):
        """
        Return the total number of SourceEntity objects to be translated.
        """
        if total_entities:
            self.total_entities = total_entities
        else:
            self.total_entities = SourceEntity.objects.filter(
                resource=self).values('id').count()
        if save:
            self.save()

    def update_wordcount(self, save=True):
        """
        Return the number of words in the source language in this resource.
        """
        wc = Translation.objects.filter(
            resource=self, language=self.source_language
        ).aggregate(Sum('wordcount'))['wordcount__sum'] or 0
        self.wordcount = wc
        if save:
            self.save()

    @models.permalink
    def get_absolute_url(self):
        return ('resource_detail', None,
            { 'project_slug': self.project.slug, 'resource_slug' : self.slug })

    @property
    def full_name(self):
        """
        Return a simple string without spaces identifying the resource.

        Can be used instead of __unicode__ to create files on disk, URLs, etc.
        """
        return "%s.%s" % (self.project.slug, self.slug)

    @property
    def entities(self):
        """Return the resource's translation entities."""
        return SourceEntity.objects.filter(resource=self)

    @property
    def available_languages(self):
        """
        All available languages for the resource. This list includes team
        languages that may have 0 translated entries.
        """
        return Language.objects.filter(
            id__in=RLStats.objects.by_resource(
                self
            ).order_by().values('language').query
        )

    @property
    def available_languages_without_teams(self):
        """
        All languages for the resource that have at least one translation.
        """
        return Language.objects.filter(
            id__in=RLStats.objects.by_resource(
                self
            ).filter(translated__gt=0).order_by().values('language').query)


class SourceEntityManager(models.Manager):

    def for_user(self, user):
        """
        Filter available source entities based on the user doing the query. This
        checks permissions and filters out private source entites that the user
        doesn't have access to.
        """
        return SourceEntity.objects.filter(
            resource__in=Resource.objects.for_user(user))

    def bulk_insert(self, records):
        """Bulk insert records to the database."""
        # TODO Maybe use COPY instead?
        insert_many(SourceEntity, records)

    def bulk_update(self, records):
        """Bulk update records to the database."""
        update_many(SourceEntity, records)


class SourceEntity(models.Model):
    """
    A representation of a source string which is translated in many languages.

    The SourceEntity is pointing to a specific Resource and it is uniquely
    defined by the string, context and resource fields (so they are unique
    together).
    """
    string = models.TextField(_('String'), blank=False, null=False,
        help_text=_("The actual string content of source string."))
    string_hash = models.CharField(_('String Hash'), blank=False, null=False,
        max_length=32, editable=False,
        help_text=_("The hash of the translation string used for indexing"))
    context = ListCharField(_('Context'), max_length=255,
        null=False, default="",
        help_text=_("A list of description of the source string. This field "
                    "specifies the context of the source string inside the "
                    "resource."))
    position = models.IntegerField(_('Position'), blank=True, null=True,
        help_text=_("The position of the source string in the Resource. "
                    "For example, the specific position of a msgid field in a "
                    "po template (.pot) file in gettext."))
    #TODO: Decision for the following
    occurrences = models.TextField(_('Occurrences'), max_length=1000,
        blank=True, editable=False, null=True,
        help_text=_("The occurrences of the source string in the project code."))
    flags = models.TextField(_('Flags'), max_length=100,
        blank=True, editable=False,
        help_text=_("The flags which mark the source string. For example, if "
                    "there is a python formatted string this is marked as "
                    "\"#, python-format\" in gettext."))
    developer_comment = models.TextField(_('Comments'), max_length=1000,
        blank=True, editable=False,
        help_text=_("The comment of the developer."))

    # Used for comments added from Lotte
    developer_comment_extra = models.TextField(_('Extra comments'),
        max_length=1000, blank=True, editable=False,
        help_text=_("Another comment of the developer"))

    pluralized = models.BooleanField(_('Pluralized'), blank=False,
        null=False, default=False,
        help_text=_("Whether the entity is pluralized."))

    # The order of the entity in the source file. Used by some formats
    # when importing files not generated from Transifex.
    order = models.PositiveIntegerField('Order', db_column='appearance_order',
        blank=True, null=True)

    # Timestamps
    created = models.DateTimeField(auto_now_add=True, editable=False)
    last_update = models.DateTimeField(auto_now=True, editable=False)

    # Foreign Keys
    # A source string must always belong to a resource
    resource = models.ForeignKey(Resource, verbose_name=_('Resource'),
        blank=False, null=False, related_name='source_entities',
        help_text=_("The translation resource which owns the source string."))

    objects = SourceEntityManager()

    def __unicode__(self):
        return self.string

    class Meta:
        unique_together = (('string_hash', 'context', 'resource'),)
        verbose_name = _('source string')
        verbose_name_plural = _('source strings')
        ordering = ['last_update',]
        get_latest_by = 'created'

    def presave(self):
        """Perform any necessary actions before saving the object."""
        context = self.context_string
        # This is for sqlite support since None objects are treated as strings
        # containing 'None'
        if not context or context == 'None':
            context = ""
        # Calculate new hash
        self.string_hash = md5_constructor(':'.join([self.string,
            context]).encode('utf-8')).hexdigest()

    def save(self, *args, **kwargs):
        """
        Do some exra processing before the actual save to db.
        """
        self.presave()
        super(SourceEntity, self).save(*args, **kwargs)

    @property
    def context_string(self):
        """Return context field as a colon concatenated string"""
        if self.context:
            return u':'.join(self.context)
        return u''

    def get_translation(self, lang_code, rule=5):
        """Return the current active translation for this entity."""
        try:
            return self.translations.get(language__code=lang_code, rule=rule)
        except Translation.DoesNotExist:
            return None


class TranslationManager(models.Manager):

    def by_source_entity_and_language(self, string,
            source_code='en', target_code=None):
        """
        Return the results of searching, based on a specific source string and
        maybe on specific source and/or target language.
        """
        source_entities = []

        source_entities = SourceEntity.objects.filter(string=string,)

        # If no target language given search on any target language.
        if target_code:
            language = Language.objects.by_code_or_alias(target_code)
            results = self.filter(
                        source_entity__in=source_entities, language=language)
        else:
            results = self.filter(source_entity__in=source_entities)
        return results

    def by_string_and_language(self, string, user, source_code='en', target_code=None):
        """
        Search translation for source strings queries and only in Public projects!
        """
        query = models.Q()
        for term in string.split(' '):
            query &= models.Q(string__icontains=term)

        source_language = Language.objects.by_code_or_alias(source_code)

        # If no target language given search on any target language.
        if target_code:
            language = Language.objects.by_code_or_alias(target_code)
            results =  self.filter(language=language,
                resource__project__in=Project.objects.for_user(user),
                source_entity__id__in=self.filter(query, language=source_language).values_list(
                    'source_entity', flat=True))
        else:
            results =  self.filter(
                resource__project__in=Project.objects.for_user(user),
                source_entity__id__in=self.filter(query, language=source_language).values_list(
                    'source_entity', flat=True))
        return results

    def source_strings(self, resources):
        """Return all source strings that correspond to the specified resources.

        Args:
            resources: An iterable of Resource objects.

        Returns:
            A queryset that returns all source strings (ie strings in the source
            language) for the resources.
        """
        source_language = get_source_language(resources)
        return self.filter(
            resource__in=resources, language=source_language, rule=5
        )

    def untranslated_source_strings(self, resources, language):
        """Return the source strings which have not been translated in the specified
        language.

        Args:
            resources: An iterable of Resource objects.
            language: The language to search for untranslated strings.

        Returns:
            A queryset which returns all untranslated source strings in the specified
            language.
        """
        source_language = get_source_language(resources)
        all_se_ids = frozenset(SourceEntity.objects.filter(
            resource__in=resources
        ).values_list('id', flat=True))
        translated_se_ids = frozenset(self.filter(
            resource__in=resources, language=language, rule=5
        ).values_list('source_entity_id', flat=True))
        untranslated_se_ids = all_se_ids - translated_se_ids
        # Add resource_id as well to reduce the search space
        # by taking advantage of the indexes in resource and language
        return self.filter(
            resource__in=resources,
            source_entity__id__in=untranslated_se_ids,
            language=source_language, rule=5
        )

    def translated_source_strings(self, resources, language):
        """Return the source strings which have been translated in the specified
        language.

        Args:
            resources: An iterable of Resource objects.
            language: The language to search for translated strings.

        Returns:
            A queryset which returns all translated source strings in the specified
            language.
        """
        source_language = get_source_language(resources)
        translated_se_ids = frozenset(self.filter(
            resource__in=resources, language=language, rule=5
        ).values_list('source_entity_id', flat=True))
        # Add resource_id as well to reduce the search space
        # by taking advantage of the indexes in resource and language
        return self.filter(
            resource__in=resources,
            source_entity__id__in=translated_se_ids,
            language=source_language, rule=5
        )

    def reviewed_source_strings(self, resources, language):
        """Return the source strings which have been translated and reviewed
        in the specified language.

        Args:
            resources: An iterable of Resource objects.
            language: The language to search for translated strings.

        Returns:
            A queryset which returns all reviewed source strings in the
            specified language.
        """
        source_language = get_source_language(resources)
        reviewed_se_ids = frozenset(self.filter(resource__in=resources,
            language=language, rule=5, reviewed=True,
        ).values_list('source_entity_id', flat=True))

        return self.filter(
            resource__in=resources,
            source_entity__id__in=reviewed_se_ids,
            language=source_language, rule=5
        )

    def unreviewed_source_strings(self, resources, language):
        """Return the source strings which have been translated but are not
        reviewed in the specified language yet.

        Args:
            resources: An iterable of Resource objects.
            language: The language to search for translated strings.

        Returns:
            A queryset which returns all reviewed source strings in the
            specified language.
        """
        source_language = get_source_language(resources)
        reviewed_se_ids = frozenset(self.filter(resource__in=resources,
            language=language, rule=5, reviewed=False,
        ).values_list('source_entity_id', flat=True))

        return self.filter(
            resource__in=resources,
            source_entity__id__in=reviewed_se_ids,
            language=source_language, rule=5
        )

    def user_translated_strings(self, resources, language, users):
        """Return the source strings which have been transalted in the specified language
        by the specified users.

        Args:
            resources: An iterable of Resource objects.
            language: The language to look for translations in.
            users: An iterable of user ids.

        Returns:
            A queryset that returns all source strigns which have been translated in
            `language` by `users`.
        """
        source_language = get_source_language(resources)
        user_translated_se_ids = frozenset(self.filter(
            language=language, rule=5,
            user__id__in=users,
            resource__in=resources
        ).values_list('source_entity_id', flat=True))
        # Add resource_id as well to reduce the search space
        # by taking advantage of the indexes in resource and language
        return self.filter(
            resource__in=resources,
            source_entity__id__in=user_translated_se_ids,
            language=source_language, rule=5,
        )

    def bulk_insert(self, records):
        """Bulk insert translations."""
        # TODO Maybe use COPY instead?
        insert_many(Translation, records)

    def bulk_update(self, records):
        """Bulk update records to the database."""
        update_many(Translation, records)


class Translation(models.Model):
    """
    The representation of a live translation for a given source string.

    This model encapsulates all the necessary fields for the translation of a
    source string in a specific target language. It also contains a set of meta
    fields for the context of this translation.
    """

    string = models.TextField(_('String'), blank=False, null=False,
        help_text=_("The actual string content for translation."))
    string_hash = models.CharField(_('String Hash'), blank=False, null=False,
        max_length=32, editable=False,
        help_text=_("The hash of the translation string used for indexing"))
    rule = models.IntegerField(_('Plural rule'), blank=False,
        null=False, default=5,
        help_text=_("Number related to the plural rule of the translation. "
                    "It's 0=zero, 1=one, 2=two, 3=few, 4=many and 5=other. "
                    "For translations that have no plural forms, "
                    "the rule must be 5 (other)."))
    wordcount = models.PositiveIntegerField(_("Wordcount for this string."),
        blank=False, null=False, default=0, help_text="The number of words "
        "contained in this translation string.")

    origin = models.CharField(_('Origin'), max_length=20, editable=False,
        null=True, choices=((k,v) for k,v in settings.TRANS_ORIGIN.items()),
        help_text=_("The origin of the translation."))

    reviewed = models.NullBooleanField(_('Reviewed'), null=False, default=False,
        help_text=_("Marks if the translation has been reviewed or not."))

    # Timestamps
    created = models.DateTimeField(auto_now_add=True, editable=False)
    last_update = models.DateTimeField(
        auto_now=True, editable=False
    )

    # Foreign Keys
    # A source string must always belong to a resource
    source_entity = models.ForeignKey(SourceEntity,
        verbose_name=_('Source String'),
        related_name='translations',
        blank=False, null=False,
        help_text=_("The source string this translation string translates."))

    resource = models.ForeignKey(Resource, verbose_name=_('Resource'),
        blank=False, null=False, related_name='+',
        help_text=_("The translation resource which owns the translation."))

    language = models.ForeignKey(Language,
        verbose_name=_('Target Language'),blank=False, null=True,
        help_text=_("The language in which this translation string is written."))

    user = models.ForeignKey(User,
        verbose_name=_('Committer'), blank=False, null=True,
        help_text=_("The user who committed the specific translation."))

    #TODO: Managers
    objects = TranslationManager()

    def __unicode__(self):
        return self.string

    class Meta:
        unique_together = (('source_entity', 'language', 'rule'),)
        verbose_name = _('translation string')
        verbose_name_plural = _('translation strings')
        ordering  = ['last_update',]
        get_latest_by = 'last_update'

    def presave(self):
        """Do any necessay work before saving the object."""
        # encoding happens to support unicode characters
        # self.resource = self.source_entity.resource
        self.string_hash = md5(self.string.encode('utf-8')).hexdigest()
        self._update_wordcount()

    def save(self, *args, **kwargs):
        """Do some exra processing before the actual save to db."""
        self.presave()
        super(Translation, self).save(*args, **kwargs)

    def _update_wordcount(self):
        """
        Return the number of words for this translation string.
        """
        # use None to split at any whitespace regardless of length
        # so for instance double space counts as one space
        self.wordcount = len(self.string.split(None))

    @property
    def source_translation(self):
        """
        Return the Translation object related to the source language of the
        self.source_entity.resource. The returned object of this method contains
        the original content used to translated the current 'self' object.
        If the 'self' object is the actual source language translation, None
        is returned instead.
        """
        # Tweaking the translation rule, because the source translation might
        # not have the same number of plural rules.
        source_language = self.resource.source_language
        if not self.source_entity.pluralized or \
            (self.source_entity.pluralized and
            self.rule in source_language.get_pluralrules_numbers()):
            rule = self.rule
        else:
            rule = 5

        try:
            if source_language != self.language:
                return Translation.objects.get(language=source_language,
                    rule=rule, source_entity=self.source_entity)
        except Translation.DoesNotExist:
            pass


class RLStatsQuerySet(models.query.QuerySet):

    def for_user(self, user):
        """
        Return a queryset matching projects plus private projects that the
        given user has access to.
        """
        return self.filter(
            resource__in=Resource.objects.for_user(user).values('pk').query).distinct()

    def private(self):
        """
        Return a queryset matching only RLStats associated with private
        projects.
        """
        resources = Resource.objects.filter(project__private=True)
        return self.filter(resource__in=resources.values('pk').query).distinct()

    def public(self):
        """
        Return a queryset matching only RLStats associated with non-private
        projects.
        """
        resources = Resource.objects.filter(project__private=False)
        return self.filter(resource__in=resources.values('pk').query).distinct()


    def by_project(self, project):
        """
        Return a queryset matching all RLStats associated with a given
        ``project``.
        """
        query = Q(resource__project=project)
        if project.is_hub:
            query |= Q(resource__project__outsource=project)
        return self.filter(query).distinct()

    def by_resource(self, resource):
        """
        Return a queryset matching all RLStats associated with a given
        ``resource``.
        """
        return self.filter(resource=resource).order_by('-translated_perc')

    def by_resources(self, resources):
        """
        Return a queryset matching all RLStats associated with the given
        ``resources``.
        """
        return self.filter(resource__in=resources).distinct()

    def by_language(self, language):
        """
        Return a queryset matching RLStats associated with a given ``language``.
        """
        return self.filter(language=language).distinct()

    def by_release(self, release):
        """
        Return a queryset matching RLStats associated with a given ``release``.
        """
        return self.filter(resource__in=release.resources.values('pk').query).distinct()

    def by_release_and_language(self, release, language):
        """
        Return a queryset matching RLStats associated with the given
        ``release`` and ``language``.

        """
        return self.by_language(language).by_resources(
            release.resources.values('pk').query)

    def by_project_and_language(self, project, language):
        """
        Return a queryset matching RLStats associated with the given
        ``project`` and ``language``.
        """
        resources = Resource.objects.by_project(project)
        return self.by_language(language).by_resources(resources)

    def by_release_aggregated(self, release):
        """
        Aggregate stats for a ``release``.

        RLStats from several resources are grouped by language.
        """
        total = Resource.objects.filter(releases=release).aggregate(
            total=Sum('total_entities'))['total']

        # In order to do grouping by language, we first need to order by
        # language. We use language__code just to be safe and not depend on the
        # __unicode__ method of the language object
        return _aggregate_rlstats(self.by_release(release).order_by('language__code'),
            'language', total)

    def by_project_language_aggregated(self, project):
        """Aggregate stats for a ``project`` and group them by language."""

        def as_aggregated_rlstats(cursor):
            """
            Yield each row from a cursor as a AggregatedRLStats object.
            """
            total = Resource.objects.by_project(project).aggregate(
                total=Sum('total_entities'))['total']
                
            # Create a kwargs var to be passed to AggregatedRLStats init method
            kwargs = {'total': total}
            
            for row in queryset:
                # Create a fake language object and associate it to the object key
                kwargs.update({
                    'object': Language(code=row['language__code'], 
                        name=row['language__name']),
                    'last_update': row['last_update'], 
                    'translated': row['translated']
                    })

                yield AggregatedRLStats(**kwargs)

        queryset = self.by_project(project).order_by('language__code'
            ).values('language__code', 'language__name').annotate(
            translated=Sum('translated')).annotate(
            last_update=Max('last_update'))

        return as_aggregated_rlstats(queryset)

    def by_project_aggregated(self, project, group_by=None):
        """
        Aggregate stats for a ``project``.

        RLStats from a project are grouped by resources.
        """
        total = Resource.objects.by_project(project).aggregate(
            total=Sum('total_entities'))['total']

        # In order to do grouping by resource we first need to order by
        # resource. We use resource__slug just to be safe and not depend on the
        # __unicode__ method of the resource object. Maybe this should be
        # changed to use resource.id or something that is truly unique instead
        # of the slug?
        return _aggregate_rlstats(self.by_project(project).order_by('resource__slug'),
            'resource', total)

class RLStats(models.Model):
    """
    Resource-Language statistics object.
    """

    # Fields
    translated = models.PositiveIntegerField(_("Translated Entities"),
        blank=False, null=False, default=0, help_text=_("The number of "
        "translated entities in a language for a specific resource."))
    translated_wordcount = models.PositiveIntegerField(_("Wordcount for Translated Entities"),
        blank=False, null=False, default=0, help_text=_("The number of words "
        "containing translated entities in a language for a specific resource."))
    untranslated = models.PositiveIntegerField(_("Untranslated Entities"),
        blank=False, null=False, default=0, help_text=_("The number of "
        "untranslated entities in a language for a specific resource."))
    reviewed = models.PositiveIntegerField(_("Reviewed Entities"),
        blank=False, null=False, default=0, help_text=_("The number of "
        "reviewed entities in a language for a specific resource."))
    last_update = models.DateTimeField(_("Last Update"), auto_now=True,
        default=None, help_text=_("The datetime that this language was last "
        "updated."))
    last_committer = models.ForeignKey(User, blank=False, null=True,
        default=None, verbose_name=_('Last Committer'), help_text=_("The user "
        "associated with the last change for this language."))

    # Foreign Keys
    resource = models.ForeignKey(Resource, blank=False, null=False,
        verbose_name=_("Resource"), help_text=_("The resource to which the "
        "statistics are associated."))
    language = models.ForeignKey(Language, blank=False, null=False,
        verbose_name=_("Language"), help_text=_("The language to which these "
        "statistics refer."))

    # Normalized fields
    translated_perc = models.PositiveIntegerField(default=0, editable=False)
    untranslated_perc = models.PositiveIntegerField(default=0, editable=False)
    reviewed_perc = models.PositiveIntegerField(default=0, editable=False)

    #objects = generate_chainer_manager(RLStatsManager)
    objects = ChainerManager(RLStatsQuerySet)

    def __unicode__(self):
        return "%s stats for %s" % ( self.resource.slug, self.language.code)

    class Meta:
        unique_together = ('resource', 'language',)
        ordering  = ['translation_perc',]
        order_with_respect_to = 'resource'

    @property
    def total(self):
        return self.translated + self.untranslated

    @property
    def untranslated_wordcount(self):
        return self.resource.wordcount - self.translated_wordcount

    def save(self, update=True, *args, **kwargs):
        if update:
            self.update(user=None, save=False)
        super(RLStats, self).save(*args, **kwargs)

    def _calculate_perc(self):
        """Update normalized percentage statistics fields."""
        try:
            total = self.total
            self.translated_perc = self.translated * 100 / total
            self.reviewed_perc = self.reviewed * 100 / total
            self.untranslated_perc = 100 - self.translated_perc
        except ZeroDivisionError:
            self.translated_perc = 0
            self.reviewed_perc = 0
            self.untranslated_perc = 0

    def _calculate_translated_wordcount(self):
        """Calculate wordcount of translated/untranslated entries"""
        wc = 0
        translated = SourceEntity.objects.filter(
            id__in=Translation.objects.filter(language=self.language,
            resource=self.resource, rule=5).values_list(
            'source_entity_id', flat=True))
        wordcount = Translation.objects.filter(source_entity__in=translated,
            language=self.resource.source_language).aggregate(Sum('wordcount'))['wordcount__sum']
        self.translated_wordcount = wordcount or 0

    def _calculate_translated(self):
        """
        Calculate translated/untranslated entities.
        """
        total = SourceEntity.objects.values('id').filter(
            resource=self.resource).count()
        translated = Translation.objects.values('id').filter(rule=5,
            language=self.language, resource=self.resource
            ).distinct().count()
        untranslated = total - translated
        self.translated = translated
        self.untranslated = untranslated

    def _calculate_reviewed(self):
        """Calculate number of reviewed translations."""
        reviewed = Translation.objects.values('id').filter(rule=5,
            language=self.language, resource=self.resource, reviewed=True
        ).count()
        self.reviewed = reviewed

    def update(self, user=None, save=True):
        """
        Update the RLStat object
        """
        self._calculate_translated()
        self._calculate_reviewed()
        self._calculate_translated_wordcount()
        self._calculate_perc()
        if user:
            self._update_now(user)
        if save:
            self.save(update=False)
        post_update_rlstats.send_robust(sender=self)

    def _update_now(self, user=None):
        """
        Update the last update and last committer.
        """
        self.last_update = datetime.datetime.now()
        if user:
            self.last_committer = user

class Template(models.Model):
    """
    Source file template for a specific resource.

    This model holds the source file template in a compressed textfield to save
    space in the database. All translation strings are changed with the md5
    hashes of the SourceEntity string which enables us to do a quick search and
    replace each time we want to recreate the file.
    """

    content = CompressedTextField(null=False, blank=False,
        help_text=_("This is the actual content of the template"))
    resource = models.OneToOneField(Resource,
        verbose_name=_("Resource"),unique=True,
        blank=False, null=False,related_name="source_file_template",
        help_text=_("This is the template of the imported source file which is"
            " used to export translation files from the db to the user."))

    class Meta:
        verbose_name = _('Template')
        verbose_name_plural = _('Templates')
        ordering = ['resource']

post_update_rlstats.connect(check_and_notify_resource_full_reviewed)


class ReviewHistory(models.Model):
    """Keep a log of who reviewed what and when."""

    REVIEW_ACTIONS = (
        ('R', 'Reviewed'),
        ('U', 'Unreviewed'),
    )

    translation_id = models.IntegerField('Translation', blank=True,
        null=True, help_text='The ID of the translation under review.')

    project_id = models.IntegerField('Project ID', blank=False, null=False,
        db_index=True, help_text='The project that this translation belongs to.')

    string = models.TextField(blank=False, null=False,
        help_text='The actual string content of translation.')

    username = models.CharField('Reviewer', max_length=50, blank=True,
        null=True, db_index=True,
        help_text='The user who performed the review action.')

    created = models.DateTimeField(auto_now_add=True, editable=False,
        db_index=True)

    # made review or unreviewed
    action = models.CharField('Action', max_length=1, choices=REVIEW_ACTIONS)

    class Meta:
        unique_together = ('translation_id', 'username', 'created', 'action')

    @immutable_property
    def translation(self):
        """Property to return the related Translation object."""
        return Translation.objects.get(id=self.translation_id)

    @immutable_property
    def user(self):
        """
        Property to return the related User object based on username field.

        It may return None if user is not found.
        """
        try:
            return User.objects.get(username=self.username)
        except User.DoesNotExist:
            return None

    @classmethod
    def add_one(cls, translation, user, project_id, reviewed):
        """Create a single history entry for a translation."""
        action = 'R' if reviewed else 'U'
        cls.objects.create(
            translation_id=translation.id,
            project_id=project_id,
            string=translation.string,
            username=user.username,
            action=action,
        )

    @classmethod
    def add_many(cls, t, user, project_id, reviewed):
        """Create multiple (or just one) entries."""
        if isinstance(t, Translation):
            cls.add_one(t, user, project_id, reviewed)
        elif isinstance(t, models.query.QuerySet):
            for translation in t:
                cls.add_one(translation, user, project_id, reviewed)

########NEW FILE########
__FILENAME__ = signals
# -*- coding: utf-8 -*-

from django.dispatch import Signal

post_save_translation = Signal()
post_update_rlstats = Signal()

########NEW FILE########
__FILENAME__ = tasks
from celery.decorators import task
from notification import models as notification

from django.conf import settings
from django.db.models import get_model
from transifex.txcommon.log import logger
from transifex.txcommon import notifications as txnotification
from transifex.projects.signals import post_resource_save


#@task(name='tx_project_resource_full_reviewed', ignore_result=True, max_retries=3)
def check_and_notify_resource_full_reviewed(**kwargs):
    """
    Handler to notify maintainers about 100% reviewed translations.
    """
    rlstats = kwargs.pop('sender')
    if (settings.ENABLE_NOTICES and
        rlstats.resource.source_language != rlstats.language):

        logger.debug("resource: Checking if resource translation is fully "
            "reviewed: %s (%s)" % (rlstats.resource, rlstats.language.code))

        if rlstats.reviewed_perc == 100:
            logger.debug("resource: Resource translation is fully reviewed.")

            # Notification
            context = {
                'project': rlstats.resource.project,
                'resource': rlstats.resource,
                'language': rlstats.language,}
            nt = "project_resource_full_reviewed"

            notification.send(rlstats.resource.project.maintainers.all(),
                nt, context)


def _notify_all_on_source_change(resource, context):
    """
    Send notifications to everyone involved with a resource.

    Args:
        resource: The updated resource.
    """
    signal_name = 'project_resource_translation_changed'
    msg = "addon-watches: Sending notification for '%s'"
    TWatch = get_model('watches', 'TranslationWatch')

    for l in resource.available_languages:
        twatch = TWatch.objects.get_or_create(resource=resource, language=l)[0]
        logger.debug(msg % twatch)
        txnotification.send_observation_notices_for(
            twatch, signal=signal_name, extra_context=context
        )


@task(name='send_notices_on_importing_files', max_retries=3)
def send_notices_for_formats(signal, context):
    """
    Send notifications to watching users that a resource has been changed.

    Args:
        signal: The signal to send.
        context: The context of the signal.
    """
    resource = context['resource']
    project = context['project']
    language = context['language']

    txnotification.send_observation_notices_for(project, signal, context)
    if language == resource.source_language:
        _notify_all_on_source_change(resource, context)


@task(name='send_notices_on_resource_changed', max_retries=2)
def send_notices_for_resource_edited(resource, user):
    """
    Send notifications, when a resource has been edited.

    Args:
        resource: The resource that has been edited.
        user: The user that did the update.
    """
    post_resource_save.send(
        sender=None, instance=resource, created=False, user=user
    )

########NEW FILE########
__FILENAME__ = resources_common_tags
from django import template

register = template.Library()

@register.filter(name='entity_translation')
def entity_translation(source_entity, language):
    return source_entity.get_translation(language.code)


@register.filter
def sort_source_langs_first(rlstats, source_language_codes):
    """
    Take a RLStats aggregated queryset and move the entries related to the
    source_languages to the top of the list.
    """
    rlstats_source_list, rlstats_list = [], []
    for r in rlstats:
        if r.object.code in source_language_codes:
            rlstats_source_list.append(r)
        else:
            rlstats_list.append(r)
    # 'tag' first translation entry in the list
    if rlstats_list:
        stat = rlstats_list[0]
        stat.first_translation = True
        rlstats_list = [stat] + rlstats_list[1:]

    return rlstats_source_list + rlstats_list


@register.filter
def language_codes_list(languages):
    """Get a Language queryset and return a list of language codes."""
    return set(languages.values_list('code', flat=True))

########NEW FILE########
__FILENAME__ = statistics_resources
from django import template
from django.utils.timesince import timesince
from transifex.languages.models import Language
from transifex.resources.models import RLStats
from transifex.txcommon.utils import StatBarsPositions

register = template.Library()

def calculate_stats(stat, width=100):
    """
    Create a HTML bar to present the statistics of an object.

    The object should have attributes trans_percent/untrans_percent.
    Accepts an optional parameter to specify the width of the total bar.

    We do a bit of calculations ourselfs here to reduce the pressure on
    the database.
    """
    total = stat.total
    trans = stat.translated
    reviewed = 0
    show_reviewed_stats = False
    if isinstance(stat, RLStats):
        reviewed = stat.reviewed
        resource = stat.resource
        if resource.source_language != stat.language:
            show_reviewed_stats = True

    # Fail-safe check
    # TODO add to the setting part, not getting.
    if trans > total:
        trans = 0

    try:
        trans_percent = (trans * 100 / total)
    except ZeroDivisionError:
        trans_percent = 100

    untrans_percent = 100 - trans_percent
    untrans = total - trans

    return {'untrans_percent': untrans_percent,
            'trans_percent': trans_percent,
            'untrans': untrans,
            'trans': trans,
            'pos': StatBarsPositions([('trans', trans_percent),
                                      ('untrans', untrans_percent)], width),
            'width':width,
            'reviewed': reviewed,
            'show_reviewed_stats': show_reviewed_stats}


@register.inclusion_tag("resources/stats_bar_simple.html")
def stats_bar_simple(stat, width=100):

    return calculate_stats(stat, width)

@register.inclusion_tag("resources/stats_bar_simple.html")
def stats_bar_simple_args(translated, total, width=100):

    class Stats(object):
        def __init__(self, translated, total):
            self.translated = translated
            self.total = total

    return calculate_stats(Stats(translated, total), width)


@register.inclusion_tag("resources/stats_bar_actions.html")
def stats_bar_actions(stat, width=100):
    """
    Create a HTML bar to present the statistics of an object.

    The object should have attributes trans_percent/untrans_percent.
    Accepts an optional parameter to specify the width of the total bar.
    """
    try:
        trans_percent = (stat.translated * 100 / stat.total)
    except ZeroDivisionError:
        trans_percent = 100
    untrans_percent = 100 - trans_percent
    return {'untrans_percent': untrans_percent,
            'trans_percent': trans_percent,
            'pos': StatBarsPositions([('trans', trans_percent),
                                      ('untrans', untrans_percent)], width),
            'width':width}

@register.filter(name='percentage')
def percentage(fraction, population):
    try:
        return "%s%%" % int(((fraction)*100 / (population)) )
    except ZeroDivisionError:
        if population == fraction:
            return "100%%"
        else:
            return ''
    except ValueError:
        return ''


########NEW FILE########
__FILENAME__ = upload_manager_tags
# -*- coding: utf-8 -*-
from __future__ import with_statement
from django import template
from django.db import transaction
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect
from django.template.defaultfilters import slugify
from django.forms.util import ErrorList
from transifex.txcommon.utils import get_url_pattern
from transifex.languages.models import Language
from transifex.resources.forms import CreateResourceForm, \
        ResourceTranslationForm, UpdateTranslationForm
from transifex.resources.models import Resource
from transifex.resources.backends import ResourceBackend, FormatsBackend, \
        ResourceBackendError, FormatsBackendError, content_from_uploaded_file, \
        filename_of_uploaded_file

register = template.Library()


@register.inclusion_tag("resources/upload_create_resource_form.html")
def upload_create_resource_form(request, project, prefix='create_form'):
    """Form for creating a new resource."""
    resource = None
    display_form = False
    if request.method == 'POST' and request.POST.get('create_resource', None):
        cr_form = CreateResourceForm(
            request.POST, request.FILES, prefix=prefix
        )
        if cr_form.is_valid():
            name = cr_form.cleaned_data['name']
            slug = slugify(name)

            # Check if we already have a resource with this slug in the db.
            try:
                Resource.objects.get(slug=slug, project=project)
            except Resource.DoesNotExist:
                pass
            else:
                # if the resource exists, modify slug in order to force the
                # creation of a new resource.
                slug = slugify(name)
                identifier = Resource.objects.filter(
                    project=project, slug__icontains="%s_" % slug
                ).count() + 1
                slug = "%s_%s" % (slug, identifier)
            method = cr_form.cleaned_data['i18n_method']
            content = content_from_uploaded_file(request.FILES)
            filename = filename_of_uploaded_file(request.FILES)
            rb = ResourceBackend()
            try:
                with transaction.commit_on_success():
                    rb.create(
                        project, slug, name, method, project.source_language,
                        content, user=request.user,
                        extra_data={'filename': filename}
                    )
            except ResourceBackendError, e:
                cr_form._errors['source_file'] = ErrorList([e.message, ])
                display_form=True
            else:
                display_form = False
                resource = Resource.objects.get(slug=slug, project=project)
        else:
            display_form=True
    else:
        cr_form = CreateResourceForm(prefix=prefix)
        display_form = False

    return {
          'project' : project,
          'resource': resource,
          'create_resource_form': cr_form,
          'display_form': display_form,
    }


@register.inclusion_tag("resources/upload_resource_translation_button.html", takes_context=True)
def upload_resource_translation_button(context, request, resource, language=None,
     prefix='button', translate_online=False):
    """Form to add a translation.

    If the parameter translate online is given, a new button will appear next
    to the upload button which onclick will redirect the user to lotte.
    """
    if language or (request.POST and
                    request.POST.get('target_language', None)):
        return update_translation_form(context, request, resource, language)
    else:
        return create_translation_form(context, request, resource, language)


def create_translation_form(context, request, resource, language=None,
                            prefix='button', translate_online=True):
    form = ResourceTranslationForm(prefix=prefix)

    return {
        'project': resource.project,
        'resource': resource,
        'language' : language,
        'resource_translation_form': form,
        'translate_online': translate_online,
        'create': True,
    }


def update_translation_form(context, request, resource, language=None,
                            prefix='update_trans', translate_online=False):
    """Form to add a translation.

    If the parameter translate online is given, a new button will appear next
    to the upload button which onclick will redirect the user to lotte.
    """
    if language:
        initial = {"target_language": language.code, }
    else:
        initial = {}
    form = UpdateTranslationForm(prefix=prefix, initial=initial)

    return {
        'project': resource.project,
        'resource': resource,
        'language' : language,
        'update_translation_form': form,
        'translate_online': False,
        'create': False,
    }

########NEW FILE########
__FILENAME__ = base
# -*- coding: utf-8 -*-
import os
from django.conf import settings
from transifex.languages.models import Language
from transifex.txcommon.tests.base import BaseTestCase
from transifex.resources.formats.pofile import POHandler
from transifex.resources.models import Resource
from transifex.resources.tests.api.utils import ORIGINAL, TRANSLATION




class APIBaseTests(BaseTestCase):
    """Tests for the ResourceHandler API."""
    def setUp(self):
        self.current_path = os.path.split(__file__)[0]
        super(APIBaseTests, self).setUp()

        # Opening JSON data for pushing through the API
        self.data = ORIGINAL
        self.trans = TRANSLATION
        self.pofile_path = os.path.join(
            settings.TX_ROOT, 'resources/tests/lib/pofile'
        )

        # Loading POT (en_US) into the resource
        handler = POHandler('%s/tests.pot' % self.pofile_path)
        handler.set_language(self.language_en)
        handler.parse_file(is_source=True)
        handler.bind_resource(self.resource)
        handler.save2db(is_source=True)

        # Loading PO (pt_BR) into the resource
        handler.bind_file('%s/pt_BR.po' % self.pofile_path)
        handler.set_language(self.language)
        handler.parse_file()
        handler.save2db()

########NEW FILE########
__FILENAME__ = utils
# -*- coding: utf-8 -*-
import base64

def create_auth_string(username, password):
    """
    Initialization for client login since piston doesn't support a
    single signon and we need an explicit auth request.
    """
    credentials = base64.encodestring("%s:%s" % (username, password)).rstrip()
    auth_string = 'Basic %s' % credentials

    return auth_string

# Original stringset for POST test
ORIGINAL = {
    "strings": [
        {
            "string": "Cancel",
            "context": "lib/testpack.js:9",
            "occurrences": "lib/testpack.js:9"
        },
        {
            "string": "Next",
            "context": "lib/testpack.js:18",
            "occurrences": "lib/testpack.js:18"
        },
        {
            "string": "Cancel",
            "context": "lib/testpack.js:19",
            "occurrences": "lib/testpack.js:19"
        }
    ]
}

# Translation for PUT test
TRANSLATION = {
    "strings": [
        {
            "string": "Cancel",
            "value": "Άκυρο",
            "context": "lib/testpack.js:9",
            "occurrences": "lib/testpack.js:9"
        },
        {
            "string": "Next",
            "value": "Επόμενο",
            "context": "lib/testpack.js:18",
            "occurrences": "lib/testpack.js:18"
        },
        {
            "string": "Cancel",
            "value": "Άκυρο",
            "context": "lib/testpack.js:19",
            "occurrences": "lib/testpack.js:19"
        }
]}



########NEW FILE########
__FILENAME__ = backends
# -*- coding: utf-8 -*-

from __future__ import with_statement
import os
from mock import patch, Mock
from django.conf import settings
from django.test import TransactionTestCase
from transifex.projects.models import Project
from transifex.txcommon.tests.base import TransactionLanguages, \
        TransactionUsers, TransactionNoticeTypes
from transifex.languages.models import Language
from transifex.resources.models import Resource, SourceEntity, Translation
from transifex.resources.backends import *


class TestBackend(TransactionUsers, TransactionLanguages,
        TransactionNoticeTypes, TransactionTestCase):

    def setUp(self):
        super(TestBackend, self).setUp()
        file_ = os.path.join(
            settings.TX_ROOT, "resources/tests/lib/pofile/pt_BR.po"
        )
        f = open(file_, 'r')
        try:
            self.content = f.read()
        finally:
            f.close()
        self.source_lang = self.language_en
        self.target_lang = self.language
        self.maintainer = self.user['maintainer']
        self.project = Project.objects.create(slug='testp', name='Test Project',
                source_language=self.source_lang)
        self.resource = Resource.objects.create(
            slug='test', name='Test', source_language=self.source_lang,
            project=self.project, i18n_type='PO'
        )
        self.method = 'PO'


class TestResourceBackend(TestBackend):

    def test_create(self):
        rb = ResourceBackend()
        res = rb.create(
            self.project, slug='test1', name='Test', method=self.method,
            source_language=self.source_lang, content=self.content,
            user=self.maintainer, extra_data={'accept_translations': True}
        )
        self.assertEquals(res[0], 6)
        self.assertEquals(res[1], 0)


class TestFormatsBackend(TestBackend):

    def test_import(self):
        fb = FormatsBackend(self.resource, self.source_lang, self.maintainer)
        res = fb.import_source(self.content, self.method)
        ses = SourceEntity.objects.filter(resource=self.resource)
        trs = Translation.objects.filter(source_entity__in=ses)
        self.assertEquals(res[0], 6)
        self.assertEquals(res[1], 0)
        self.assertEquals(len(ses), 6)
        self.assertEquals(len(trs), 7)

    def test_handlers_used_for_source_import(self):
        """Test the handlers used for various combinations of resources and
        languages, when pushing the source file.
        """
        resource = Mock()
        resource.source_language = 'en'

        with patch.object(FormatsBackend, '_import_content') as mock:
            ## No filenames
            for method in registry.available_methods:
                if method == 'PO':
                    continue
                resource.i18n_type = method
                lang = 'en'
                fb = FormatsBackend(resource, lang, None)
                fb.import_source('')
                used_handler = mock.call_args[0][0]
                self.assertIsInstance(
                    used_handler, type(registry.handler_for(method))
                )

                lang = None
                fb = FormatsBackend(resource, lang, None)
                self.assertRaises(FormatsBackendError, fb.import_source, '')

            method = 'PO'
            resource.i18n_type = method
            lang = 'en'         # source language
            fb = FormatsBackend(resource, lang, None)
            fb.import_source('')
            used_handler = mock.call_args[0][0]
            self.assertIsInstance(
                used_handler, type(registry.handler_for(method))
            )
            lang = None         # lang is None
            fb = FormatsBackend(resource, lang, None)
            self.assertRaises(FormatsBackendError, fb.import_source, '')

            ## With filenames
            filename = 'does-not-matter'
            for method in registry.available_methods:
                if method == 'PO':
                    continue
                resource.i18n_type = method
                lang = 'en'
                fb = FormatsBackend(resource, lang, None)
                fb.import_source('', filename=filename)
                used_handler = mock.call_args[0][0]
                self.assertIsInstance(
                    used_handler, type(registry.handler_for(method))
                )

                lang = None
                fb = FormatsBackend(resource, lang, None)
                self.assertRaises(FormatsBackendError, fb.import_source, '')

            # .po filename
            filename = 'file.po'
            method = 'PO'
            resource.i18n_type = method
            lang = 'en'         # source language
            fb = FormatsBackend(resource, lang, None)
            fb.import_source('', filename=filename)
            used_handler = mock.call_args[0][0]
            self.assertIsInstance(
                used_handler, type(registry.handler_for(method))
            )
            lang = None         # lang is None
            fb = FormatsBackend(resource, lang, None)
            self.assertRaises(FormatsBackendError, fb.import_source, '')

            # .pot filename
            filename = 'file.pot'
            method = 'PO'
            resource.i18n_type = method
            lang = 'en'         # source language
            fb = FormatsBackend(resource, lang, None)
            fb.import_source('', filename=filename)
            used_handler = mock.call_args[0][0]
            self.assertIsInstance(
                used_handler, type(registry.handler_for('POT'))
            )
            lang = None         # lang is None
            fb = FormatsBackend(resource, lang, None)
            self.assertRaises(FormatsBackendError, fb.import_source, '')

    def test_handlers_used_for_translations(self):
        """Test the handlers used for various combinations of resources and
        languages, when pushing a translation.
        """
        resource = Mock()
        resource.source_language = 'en'

        with patch.object(FormatsBackend, '_import_content') as mock:
            ## No filenames
            for method in registry.available_methods:
                resource.i18n_type = method
                lang = 'en'
                fb = FormatsBackend(resource, lang, None)
                fb.import_translation('')
                used_handler = mock.call_args[0][0]
                self.assertIsInstance(
                    used_handler, type(registry.handler_for(method))
                )

                lang = None
                fb = FormatsBackend(resource, lang, None)
                self.assertRaises(FormatsBackendError, fb.import_source, '')


########NEW FILE########
__FILENAME__ = base
# -*- coding: utf-8 -*-
from __future__ import with_statement
from mock import patch
import os
import logging
from django.conf import settings
from django.utils.hashcompat import md5_constructor
from transifex.txcommon.tests import base
from transifex.resources.formats.compilation import \
        NormalDecoratorBuilder as Decorator
from transifex.resources.formats.utils.hash_tag import hash_tag
from transifex.resources.models import SourceEntity, Translation
from transifex.resources.formats.compilation import Mode


class FormatsBaseTestCase(base.BaseTestCase):
    """Base class for tests on supported formats."""

    def setUp(self):
        super(FormatsBaseTestCase, self).setUp()

    def compare_to_actual_file(self, handler, actual_file):
        template = handler.template
        compiler = handler.CompilerClass(handler.resource)
        compiler._tdecorator = Decorator(escape_func=handler._escape)
        compiler._examine_content(handler.template)
        compiler.language = handler.language
        sources = [
            (idx, "%s" % hash_tag(s.source_entity, ""))
            for idx, s in enumerate(handler.stringset)
        ]
        translations = dict([
            (idx, s.translation)
            for idx, s in enumerate(handler.stringset)
        ])
        with patch.object(compiler, '_get_source_strings') as smock:
            with patch.object(compiler, '_tset', create=True) as tmock:
                smock.return_value = sources
                tmock.return_value = translations
                compiler._compile(handler.template)
                template = compiler.compiled_template
        with open(actual_file, 'r') as f:
            actual_content = f.read()
        self.assertEquals(template, actual_content)

    def get_translation(self, t, compiler):
        if not t:
            return ""
        return t

    def get_content_from_file(self, filename, encoding=False):
        """Get content from a file as required by handler's
        bind_content() method"""
        f = open(filename, 'r')
        content = f.read()
        f.close()
        if encoding:
            content = content.decode(encoding)
        return content

    def _save_source(self, handler, resource, source_file,
            source_entity_count, source_translation_count):
        """Save source translations
            handler: Handler instance for i18n_type
            resource: a Resource instance
            source_file: path to source file
            source_entity_count: expected count for source entities saved
            source_translation_count: expected count for translations in
                    resource.source_language
            Returns a handler
        """
        l = resource.source_language
        handler.set_language(l)
        handler.bind_resource(resource)
        handler.bind_content(self.get_content_from_file(source_file))
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)

        self.assertEqual(SourceEntity.objects.filter(resource=resource
            ).count(), source_entity_count)
        self.assertEqual(len(Translation.objects.filter(
            source_entity__resource=resource, language=l)),
            source_translation_count)
        return handler

    def _save_translation(self, handler, resource, target_lang,
            translation_file, translation_count):
        """
        Save translations from a translation file for a resource
        handler: Handler instance for i18n_type
        resource: a Resource instance
        target_lang: target language instance
        translation_file: path to translation file
        translation_count: expected count for translations saved in
            target_lang for resource

        Returns a handler
        """
        handler.bind_resource(resource)
        handler.bind_content(self.get_content_from_file(translation_file))
        handler.set_language(target_lang)
        handler.parse_file()
        handler.save2db()
        self.assertEqual(len(Translation.objects.filter(
            source_entity__resource=resource,
            language=target_lang)), translation_count)
        return handler

    def _mark_translation_as_reviewed(self, resource, source_strings, language,
            expected_reviewed_count):
        """
        Mark translation strings as reviewed
        resource: A Resource instance
        source_strings: A list containing source strings
        language: Language for translations to be reveiewed
        expected_reviewed_count: Expected number of translations marked as
            reviewed
        """
        Translation.objects.filter(source_entity__in=resource.source_entities.filter(
            string__in=source_strings), language=language).update(reviewed=True)
        self.assertEqual(Translation.objects.filter(
            source_entity__resource=resource, reviewed=True
            ).count(), expected_reviewed_count)

    def _check_compilation(self, handler, resource, language, compiled_file,
            mode=Mode.DEFAULT):
        """
        Verify compilation with a compiled_file's content
        handler: A Handler instance
        resource: A Resource instance
        language: Language in which the resource will be compiled
        compiled_file: path to a compiled file
        mode: Compilation Mode instance
        """
        if isinstance(mode, str):
            if mode == 'REVIEWED':
                mode = Mode.REVIEWED
            elif mode == 'TRANSLATED':
                mode = Mode.TRANSLATED
            else:
                mode = Mode.DEFAULT

        handler.bind_resource(resource)
        handler.set_language(language)
        compiled_template = handler.compile(mode=mode)
        f = open(compiled_file, 'r')
        expected_compiled_template = f.read()
        f.close()
        self.assertEqual(compiled_template, expected_compiled_template)


########NEW FILE########
__FILENAME__ = builders
# -*- coding: utf-8 -*-

"""
Tests for the builders module.
"""

from __future__ import absolute_import
from transifex.txcommon.tests.base import BaseTestCase
from transifex.resources.models import Resource, Translation, SourceEntity
from transifex.resources.formats.compilation import *


class TestTranslationsBuilders(BaseTestCase):
    """Test the various translation builders."""

    def test_all_builder(self):
        """Test that the AllTransaltionsBuilder correctly returns
        all translations.
        """
        builder = AllTranslationsBuilder(self.resource, self.language_en)
        translations = builder()
        self.assertEquals(len(translations), 1)
        self.translation_en.delete()
        translations = builder()
        self.assertEquals(translations, {})
        self._has_correct_normal_format(translations)

    def test_all_builder_pluralized(self):
        """Test the AllTranslationsBiuilder in the pluralized case."""
        builder = AllTranslationsBuilder(self.resource, self.language_en)
        builder.pluralized = True
        translations = builder()
        self.assertEquals(len(translations), 1)
        self._has_correct_plural_format(translations)
        self.translation_en.delete()
        translations = builder()
        self.assertEquals(translations, {})

    def test_empty_builder(self):
        """Test that the EmptyTranslationsBuilder always returns an empty
        dictionary.
        """
        builder = EmptyTranslationsBuilder(self.resource, self.language_en)
        translations = builder()
        self.assertEquals(translations, {})
        self.translation_en.delete()
        translations = builder()
        self.assertEquals(translations, {})
        self._has_correct_normal_format(translations)

    def test_empty_builder_pluralized(self):
        """Test the EmptyTranslationsBuilder in the pluralized case."""
        builder = EmptyTranslationsBuilder(self.resource, self.language_en)
        translations = builder()
        self.assertEquals(translations, {})
        self._has_correct_plural_format(translations)
        self.translation_en.delete()
        translations = builder()
        self.assertEquals(translations, {})

    def test_source_builder(self):
        """Test that the SourceTranslationsBuilder uses source strings
        instead of empty translations.
        """
        builder = SourceTranslationsBuilder(self.resource, self.language_ar)
        translations = builder()
        self.assertEquals(len(translations), 1)
        self.translation_ar.delete()
        translations = builder()
        self.assertEquals(len(translations), 1)
        self._has_correct_normal_format(translations)

    def test_source_builder_pluralized(self):
        """Test that the SourceTranslationsBuilder uses source strings
        instead of empty translations in the pluralized case.
        """
        builder = SourceTranslationsBuilder(self.resource, self.language_ar)
        builder.pluralized = True
        translations = builder()
        self.assertEquals(len(translations), 1)
        self.translation_ar.delete()
        translations = builder()
        self.assertEquals(len(translations), 1)
        self._has_correct_plural_format(translations)

    def test_reviewed_builder(self):
        """Test the ReviewedTranslationsBuilder builder returns only
        reviewed strings.
        """
        builder = ReviewedTranslationsBuilder(self.resource, self.language_ar)
        translations = builder()
        self.assertEquals(len(translations), 0)
        self.translation_ar.reviewed = True
        self.translation_ar.save()
        translations = builder()
        self._has_correct_normal_format(translations)
        self.assertEquals(len(translations), 1)
        self.assertEquals(
            translations.keys()[0], self.translation_ar.source_entity_id
        )

    def test_reviewed_builder_pluralized(self):
        """Test the ReviewedTranslationsBuilder builder, when pluralized."""
        builder = ReviewedTranslationsBuilder(self.resource, self.language_ar)
        builder.pluralized = True
        translations = builder()
        self.assertEquals(len(translations), 0)
        self.translation_ar.reviewed = True
        self.translation_ar.save()
        translations = builder()
        self.assertEquals(len(translations), 1)
        self.assertEquals(
            translations.keys()[0], self.translation_ar.source_entity_id
        )
        self.assertEquals(len(translations.values()), 1)
        self._has_correct_plural_format(translations)
        t = translations.values()[0]
        self.assertIsInstance(t, dict)
        self.assertEquals(len(t), 1)
        self.assertIn(5, t)

    def test_marked_source_strings_builder(self):
        """Test that source strings are marked by the
        MarkedSourceTranslationsBuilder.
        """
        builder = MarkedSourceTranslationsBuilder(
            self.resource, self.language_ar
        )
        translations = builder()
        self.assertEquals(len(translations), 1)
        self.translation_ar.delete()
        translations = builder()
        self.assertEquals(len(translations), 1)
        self._has_correct_normal_format(translations)
        t_string = translations.values()[0]
        self.assertTrue(t_string.endswith('txss'))

    def test_marked_source_builder_pluralized(self):
        """Test that the SourceTranslationsBuilder uses source strings
        instead of empty translations in the pluralized case.
        """
        builder = MarkedSourceTranslationsBuilder(
            self.resource, self.language_ar
        )
        builder.pluralized = True
        translations = builder()
        self.assertEquals(len(translations), 1)
        self.translation_ar.delete()
        translations = builder()
        self.assertEquals(len(translations), 1)
        self._has_correct_plural_format(translations)
        t_string = translations.values()[0][5]
        self.assertTrue(t_string.endswith('txss'))

    def test_reviewed_marked_builder(self):
        """Test the ReviewedMarkedTranslationsBuilder builder returns only
        reviewed strings.
        """
        builder = ReviewedMarkedSourceTranslationsBuilder(
            self.resource, self.language_ar
        )
        translations = builder()
        self.assertEquals(len(translations), 1)
        t_string = translations.values()[0]
        self.assertTrue(t_string.endswith('txss'))
        self.translation_ar.reviewed = True
        self.translation_ar.save()
        translations = builder()
        self._has_correct_normal_format(translations)
        self.assertEquals(len(translations), 1)
        self.assertEquals(
            translations.keys()[0], self.translation_ar.source_entity_id
        )
        t_string = translations.values()[0]
        self.assertFalse(t_string.endswith('txss'))

    def test_reviewed_marked_builder_pluralized(self):
        """Test the ReviewedTranslationsBuilder builder, when pluralized."""
        builder = ReviewedMarkedSourceTranslationsBuilder(
            self.resource, self.language_ar
        )
        builder.pluralized = True
        translations = builder()
        self.assertEquals(len(translations), 1)
        t_string = translations.values()[0][5]
        self.assertTrue(t_string.endswith('txss'))
        self.translation_ar.reviewed = True
        self.translation_ar.save()
        translations = builder()
        self.assertEquals(len(translations), 1)
        self.assertEquals(
            translations.keys()[0], self.translation_ar.source_entity_id
        )
        self.assertEquals(len(translations.values()), 1)
        self._has_correct_plural_format(translations)
        t = translations.values()[0]
        self.assertIsInstance(t, dict)
        self.assertEquals(len(t), 1)
        self.assertIn(5, t)
        t_string = translations.values()[0][5]
        self.assertFalse(t_string.endswith('txss'))

    def _has_correct_normal_format(self, t):
        """Test t has the correct normal format."""
        self.assertIsInstance(t, dict)
        for rule in t.keys():
            self.assertIsInstance(rule, int)

    def _has_correct_plural_format(self, t):
        """Test t has the correct plural format."""
        self.assertIsInstance(t, dict)
        for rule in t.values():
            self.assertIsInstance(rule, dict)
            self.assertIsInstance(rule.keys()[0], int)

########NEW FILE########
__FILENAME__ = compilers
# -*- coding: utf-8 -*-

from django.utils import unittest
from transifex.resources.formats.compilation.compilers import Compiler, \
        PluralCompiler


class TestCompiler(unittest.TestCase):
    """Test the compiler class."""

    def test_apply_translations(self):
        """Test translations are substituted correctly."""
        string_hash = '1' * 32 + '_tr'
        text = string_hash + ' '
        translations = {string_hash: 'yes'}
        compiler = Compiler(resource=None)
        res = compiler._apply_translations(translations, text)
        self.assertEquals(res, 'yes ')


class TestPluralCompiler(unittest.TestCase):
    """Test the compiler class for pluralized formats."""

    def test_apply_translations(self):
        """Test that both plurals and normal translations are
        substituted correctly.
        """
        hash_normal = '1' * 32 + '_tr'
        hash_plural = '2' * 32 + '_pl_0'
        text = '%s %s' % (hash_normal, hash_plural)
        translations = {
            hash_normal: 'normal',
            hash_plural: 'plural',
        }
        compiler = PluralCompiler(resource=None)
        res = compiler._apply_translations(translations, text)
        self.assertEquals(res, 'normal plural')


########NEW FILE########
__FILENAME__ = decorators
# -*- coding: utf-8 -*-

"""
Test translation decorators.
"""

from __future__ import absolute_import
from django.utils import unittest
from transifex.resources.formats.compilation import *


class TestDecoratorBuilders(unittest.TestCase):
    """Test the decorator builders."""

    @staticmethod
    def no_escape(s):
        """Don't escape anything."""
        return s

    @staticmethod
    def a_escape(s):
        """Replace 'a's with 'b's."""
        return s.replace('a', 'b')

    @staticmethod
    def b_escape(s):
        """Inverse of ``a_escape``."""
        return s.replace('b', 'a')

    @classmethod
    def setUpClass(cls):
        super(TestDecoratorBuilders, cls).setUpClass()
        cls.escape_functions = [cls.no_escape, cls.a_escape, cls.b_escape, ]

    def test_normal_builder(self):
        """Test that the normal builder only escapes the string."""
        translation = 'cdefg'
        for func in self.escape_functions:
            builder = NormalDecoratorBuilder(escape_func=func)
            self.assertEquals(translation, builder(translation))
        translation = 'abcdef'
        targets = ['abcdef', 'bbcdef', 'aacdef', ]
        for func, target in zip(self.escape_functions, targets):
            builder = NormalDecoratorBuilder(escape_func=func)
            self.assertEquals(target, builder(translation))

    def test_pseudo_builder(self):
        """Test that the pseudo builder is applied after the
        escape function.
        """
        translation = 'cdefg'
        for func in self.escape_functions:
            builder = PseudoDecoratorBuilder(
                escape_func=self.no_escape,
                pseudo_func=func
            )
            self.assertEquals(translation, builder(translation))
        translation = 'abcdef'
        target = 'aacdef'
        builder = PseudoDecoratorBuilder(
            escape_func=self.a_escape,
            pseudo_func=self.b_escape
        )
        self.assertEquals(target, builder(translation))
        target = 'bbcdef'
        builder = PseudoDecoratorBuilder(
            escape_func=self.b_escape,
            pseudo_func=self.a_escape
        )
        self.assertEquals(target, builder(translation))

    def test_empty_builder(self):
        """Test that the empty builder always returns an empty string."""
        translation = 'abcdef'
        for func in self.escape_functions:
            builder = EmptyDecoratorBuilder(escape_func=func)
            self.assertEquals('', builder(translation))

########NEW FILE########
__FILENAME__ = factories
# -*- coding: utf-8 -*-

from django.utils import unittest
from transifex.resources.formats.compilation import *


class TestFactories(unittest.TestCase):
    """Test the compiler factories."""

    def test_review_mode(self):
        """Test that if the REVIEWED mode has been enabled, the factories
        always return a reviewed-related factory.
        """
        Factories = [
            SimpleCompilerFactory, FillEmptyCompilerFactory,
            AlwaysFillEmptyCompilerFactory
        ]
        for Factory in Factories:
            factory = Factory()
            factory.resource = None
            tsetter = factory._get_translation_setter(None, Mode.REVIEWED)
            name = tsetter.__class__.__name__
            self.assertIn('Reviewed', name)

########NEW FILE########
__FILENAME__ = mode
# -*- coding: utf-8 -*-

from django.utils import unittest
from transifex.resources.formats.compilation.mode import Mode


class TestCompilationModes(unittest.TestCase):
    """Test the modes of compilation."""

    def test_combine(self):
        """Test that modes can be combined."""
        m1 = Mode.REVIEWED
        m2 = Mode.TRANSLATED
        m = m1 | m2
        self.assertEquals(m._value, m1._value | m2._value)

    def test_containment(self):
        """Test that the ``in`` operator works for modes."""
        m1 = Mode.REVIEWED
        m2 = Mode.TRANSLATED
        m = m1 | m2
        self.assertIn(Mode.TRANSLATED, m)
        self.assertIn(Mode.REVIEWED, m)

        m1 = Mode.DEFAULT
        m2 = Mode.REVIEWED
        m = m1 | m2
        self.assertIn(Mode.REVIEWED, m)
        self.assertNotIn(Mode.TRANSLATED, m)

        m = Mode.DEFAULT
        self.assertNotIn(Mode.TRANSLATED, m)
        self.assertNotIn(Mode.REVIEWED, m)

########NEW FILE########
__FILENAME__ = core
# -*- coding: utf-8 -*-

from mock import patch, Mock
from django.test import TestCase, TransactionTestCase
from django.utils import unittest
from django.conf import settings
from transifex.txcommon.tests.base import TransactionUsers,\
        TransactionLanguages
from transifex.projects.models import Project
from transifex.resources.models import Resource, SourceEntity
from transifex.languages.models import Language
from transifex.resources.formats.joomla import JoomlaINIHandler
from transifex.resources.formats.core import Handler
from transifex.resources.formats.compilation import mode


class TestCoreFunctions(TransactionUsers, TransactionLanguages,
        TransactionTestCase):

    def test_delete_old(self):
        """Test that old source entities get deleted, even when the iterations
        block doesn't get executed.
        """
        old_max_iters = settings.MAX_STRING_ITERATIONS
        settings.MAX_STRING_ITERATIONS = 1
        content = ';1.6\nKEY1="value1"\nKEY2="value2"\nKEY3="value3"\n'
        parser = JoomlaINIHandler()
        parser.bind_content(content)
        # FIXME get project/resource from parents
        p = Project.objects.create(slug="pr", name="Pr", source_language=self.language_en)
        l = self.language_en
        r = Resource.objects.create(
            slug="core", name="Core", project=p, source_language=l
        )
        parser.bind_resource(r)
        parser.set_language(l)
        parser.parse_file(is_source=True)
        parser.save2db(is_source=True)
        self.assertEquals(SourceEntity.objects.filter(resource=r).count(), 3)
        content = ';1.6\nKEY1="value1"\nKEY4="value4"\n'
        parser.bind_content(content)
        parser.parse_file(is_source=True)
        parser.save2db(is_source=True)
        self.assertEquals(SourceEntity.objects.filter(resource=r).count(), 2)
        settings.MAX_STRING_ITERATIONS = old_max_iters


class TestMode(TestCase):
    """Test the mode variable used in compilation."""

    @unittest.skip('Do it later')
    @patch.object(Handler, '_compile_viewing')
    @patch.object(Handler, '_compile_translating')
    @patch.object(Handler, '_content_from_template')
    def test_mode(self, tempalte_mock, tmock, vmock):
        """Test that the correct function is called for compilation."""
        h = Handler()
        h.resource = Mock()
        h.compile(mode=mode.DEFAULT)
        self.assertTrue(vmock.called)
        self.assertFalse(tmock.called)
        vmock.reset_mock()
        h.compile(mode=mode.TRANSLATE)
        self.assertFalse(vmock.called)
        self.assertTrue(tmock.called)
        vmock.reset_mock()
        h.compile(mode=mode.REVIEWED)
        self.assertFalse(vmock.called)
        self.assertTrue(tmock.called)

########NEW FILE########
__FILENAME__ = info
# -*- coding: utf-8 -*-

import unittest
from transifex.resources.formats.formats_info import XmlFormatInfo


class TestXmlFormatInfo(unittest.TestCase):

    def setUp(self):
        self.format = XmlFormatInfo()

    def test_escape(self):
        for c in "<", ">", "'", '&', '"':
            s = c.join(['blah', 'blah', 'and blah'])
            s = self.format._escape(s)
            if c != '&':
                self.assertFalse(c in s)
            self.assertTrue(s.count('&'), 2)
            self.assertTrue(s.count(';'), 2)

    def test_unescape(self):
        for c in "&lt;", "&gt;", "&apos;", "&amp;", "&quot;":
            s = c.join(['blah', 'blah', 'and blah'])
            s = self.format._unescape(s)
            self.assertFalse(c in s)

########NEW FILE########
__FILENAME__ = main
import os
import polib
from django.utils import unittest
from django.conf import settings
from django.core.urlresolvers import reverse
from django.test.client import Client
from transifex.txcommon.tests import utils
from transifex.languages.models import Language
from transifex.resources.models import *
from transifex.resources.backends import ResourceBackend, FormatsBackend
from transifex.resources.formats.pofile import POHandler, POTHandler, \
        PoParseError
from transifex.resources.formats.compilation import Mode
from transifex.resources.tests.lib.base import FormatsBaseTestCase
from transifex.addons.copyright.models import Copyright

from transifex.addons.suggestions.models import Suggestion


TEST_FILES_PATH = os.path.join(
    settings.TX_ROOT, 'resources/tests/lib/pofile/general'
)

class TestPoFile(FormatsBaseTestCase):
    """Suite of tests for the pofile lib."""

    def test_pot_parser(self):
        """POT file tests."""
        # Parsing POT file
        handler = POHandler('%s/tests.pot' %
            os.path.split(__file__)[0])

        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        self.stringset = handler.stringset
        entities = 0

        # POT has no associated language
        self.assertEqual(self.stringset.target_language, None)

        for s in self.stringset:
            # Testing if source entity and translation are the same
            if not s.pluralized:
                self.assertEqual(s.source_entity, s.translation)

            # Testing plural number
            if s.source_entity == '{0} results':
                self.assertEqual(s.rule, 5)

            # Counting number of entities
            if s.rule == 5:
                entities += 1

        # Asserting number of entities - POT file has 3 entries.
        self.assertEqual(entities, 6)

    def test_po_parser_pt_BR(self):
        """Tests for pt_BR PO file."""
        handler = POHandler('%s/pt_BR.po' %
            os.path.split(__file__)[0])


        handler.set_language(self.language)
        handler.parse_file()
        self.stringset = handler.stringset

        nplurals = 0

        for s in self.stringset:

            # Testing plural number
            if s.source_entity == '{0} results':
                self.assertEqual(s.rule, 5)

            if s.source_entity == '{0} result' and s.pluralized:
                nplurals += 1

        # Asserting nplurals based on the number of plurals of the
        # '{0 results}' entity - pt_BR has nplurals=2
        self.assertEqual(nplurals, 2)

    def test_po_parser_pt_BR_with_warning_messages(self):
        """
        Tests if nplural warning is raised for 'pt_BR' PO file loaded as an
        'ar' language.
        """
        handler = POHandler('%s/pt_BR.po' % os.path.split(__file__)[0])
        handler.set_language(self.language_ar)
        handler.parse_file()
        self.assertTrue('nplural' in handler.warning_messages.keys())

    def test_po_parser_ar(self):
        """Tests for ar PO file."""
        handler = POHandler('%s/ar.po' %
            os.path.split(__file__)[0])

        handler.set_language(self.language_ar)
        handler.parse_file()
        self.stringset = handler.stringset
        nplurals = 0

        for s in self.stringset:

            # Testing if source entity and translation are NOT the same
            self.assertNotEqual(s.source_entity, s.translation)

            # Testing plural number
            if s.source_entity == '{0} results':
                self.assertEqual(s.rule, 5)

            if s.source_entity == '{0} result' and s.pluralized:
                nplurals += 1

        # Asserting nplurals based on the number of plurals of the
        # '{0 results}' entity - ar has nplurals=6.
        self.assertEqual(nplurals, 6)

    def _test_po_save2db(self):
        """Test creating source strings from a PO/POT file works"""
        handler = POHandler('%s/tests.pot' %
            os.path.split(__file__)[0])

        l = Language.objects.get(code='en_US')

        handler.set_language(l)
        handler.parse_file(is_source=True)

        r = self.resource

        handler.bind_resource(r)

        handler.save2db(is_source=True)

        self.assertEqual( SourceEntity.objects.filter(resource=r).count(), 6)

        self.assertEqual( len(Translation.objects.filter(source_entity__resource=r,
            language=l)), 7)

        handler.bind_file('%s/ar.po' % os.path.split(__file__)[0])
        l = Language.objects.by_code_or_alias('ar')
        handler.set_language(l)
        handler.parse_file()

        handler.save2db()

        self.assertEqual( SourceEntity.objects.filter(resource=r).count(), 6)

        self.assertEqual( len(Translation.objects.filter(source_entity__resource=r,
            language=l)), 11)

        self._mark_translation_as_reviewed(self.resource,
                [
                    '{0} result',
                    'Location',
                ],
                self.language_ar, 7
        )

        #update resource with the same source file and
        #check that the resource.last_update does not
        #change from its previous value
        last_update = self.resource.last_update
        handler.bind_file('%s/tests.pot' %
            os.path.split(__file__)[0])
        l = Language.objects.get(code='en_US')
        handler.set_language(l)
        handler.parse_file(True)
        handler.save2db(is_source=True)
        self.assertEqual(self.resource.last_update, last_update)

        self.assertEqual( SourceEntity.objects.filter(resource=r).count(), 6)

        self.assertEqual( len(Translation.objects.filter(source_entity__resource=r,
            language=l)), 7)

        return handler

    def _test_po_compile(self, handler):
        """Test compiling po translations"""
        source_compiled_file = os.path.join(os.path.dirname(__file__),
                'en_compiled.po')
        trans_compiled_file = os.path.join(os.path.dirname(__file__),
                'ar_compiled.po')
        trans_compiled_file_reviewed = os.path.join(os.path.dirname(__file__),
                'ar_compiled_for_review.po')
        handler.bind_resource(self.resource)
        handler.set_language(Language.objects.get(code='en_US'))
        compiled_template = handler.compile()
        f = open(source_compiled_file, 'r')
        expected_compiled_template = f.read()
        f.close()
        po = polib.pofile(compiled_template)
        epo = polib.pofile(expected_compiled_template)
        po.metadata['PO-Revision-Date'] = epo.metadata['PO-Revision-Date']
        po.metadata['Last-Translator'] = epo.metadata['Last-Translator']
        compiled_template = str(po)
        self.assertEqual(compiled_template,
                expected_compiled_template)

        handler.set_language(self.language_ar)
        compiled_template = handler.compile()
        f = open(trans_compiled_file, 'r')
        expected_compiled_template = f.read()
        f.close()
        po = polib.pofile(compiled_template)
        epo = polib.pofile(expected_compiled_template)
        po.metadata['PO-Revision-Date'] = epo.metadata['PO-Revision-Date']
        po.metadata['Last-Translator'] = epo.metadata['Last-Translator']
        compiled_template = str(po)
        self.assertEqual(compiled_template,
                expected_compiled_template)

        handler.set_language(self.language_ar)
        compiled_template = handler.compile(mode=Mode.REVIEWED)
        f = open(trans_compiled_file_reviewed, 'r')
        expected_compiled_template = f.read()
        f.close()
        po = polib.pofile(compiled_template)
        epo = polib.pofile(expected_compiled_template)
        po.metadata['PO-Revision-Date'] = epo.metadata['PO-Revision-Date']
        po.metadata['Last-Translator'] = epo.metadata['Last-Translator']
        compiled_template = str(po)
        self.assertEqual(compiled_template,
                expected_compiled_template)

    def test_po_save_and_compile(self):
        handler = self._test_po_save2db()
        self._test_po_compile(handler)

    def test_logical_ids(self):
        """Test po files with logical ids instead of normal strings"""


        # Empty our resource
        SourceEntity.objects.filter(resource=self.resource).delete()

        # Make sure that we have no suggestions to begin with
        self.assertEqual(Suggestion.objects.filter(source_entity__in=
            SourceEntity.objects.filter(resource=self.resource).values('id')).count(), 0)

        # Import file with two senteces
        handler = POHandler('%s/logical_ids/tests.pot' %
            os.path.split(__file__)[0])
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)

        # import pt_BR translation
        handler = POHandler('%s/logical_ids/pt_BR.po' %
            os.path.split(__file__)[0])
        handler.bind_resource(self.resource)
        handler.set_language(self.language)
        handler.parse_file()
        handler.save2db()

        # Make sure that we have all translations in the db
        self.assertEqual(Translation.objects.filter(source_entity__in=
            SourceEntity.objects.filter(resource=self.resource).values('id')).count(), 2)

        source = SourceEntity.objects.get(resource=self.resource)
        en_trans = Translation.objects.get(source_entity__resource=self.resource,
            language = self.resource.source_language)
        pt_trans = Translation.objects.get(source_entity__resource=self.resource,
            language = self.language)

        # Check to see that the correct strings appear as the translations and
        # not the logical id
        self.assertEqual(en_trans.string, "Hello, World!")
        self.assertEqual(pt_trans.string, "Holas, Amigos!")
        self.assertEqual(source.string, "source_1")

    @unittest.skipIf(settings.MAX_STRING_ITERATIONS == 0,
            "Skipping because MAX_STRING_ITERATIONS = 0")
    def test_convert_to_suggestions(self):
        """Test convert to suggestions when importing new source files"""

        # Empty our resource
        SourceEntity.objects.filter(resource=self.resource).delete()

        # Make sure that we have no suggestions to begin with
        self.assertEqual(Suggestion.objects.filter(source_entity__in=
            SourceEntity.objects.filter(resource=self.resource).values('id')).count(), 0)

        # Import file with two senteces
        handler = POHandler('%s/suggestions/tests.pot' %
            os.path.split(__file__)[0])
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)

        # import pt_BR translation
        handler = POHandler('%s/suggestions/pt_BR.po' %
            os.path.split(__file__)[0])
        handler.bind_resource(self.resource)
        handler.set_language(self.language)
        handler.parse_file()
        handler.save2db()

        # Make sure that we have all translations in the db
        self.assertEqual(Translation.objects.filter(source_entity__in=
            SourceEntity.objects.filter(resource=self.resource).values('id')).count(), 5)

        # import source with small modifications
        handler = POHandler('%s/suggestions/tests-diff.pot' %
            os.path.split(__file__)[0])
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)

        # Make sure that all suggestions were added
        self.assertEqual(Suggestion.objects.filter(source_entity__in=
            SourceEntity.objects.filter(resource=self.resource).values('id')).count(), 2)

        # Make both strings are now untranslated
        self.assertEqual(Translation.objects.filter(source_entity__in=
            SourceEntity.objects.filter(resource=self.resource).values('id')).count(), 3)

        # import pt_BR translation again
        handler = POHandler('%s/suggestions/pt_BR.po' %
            os.path.split(__file__)[0])
        handler.bind_resource(self.resource)
        handler.set_language(self.language)
        handler.parse_file()
        handler.save2db()

        # Make sure that we have all translations in the db
        self.assertEqual(Translation.objects.filter(source_entity__in=
            SourceEntity.objects.filter(resource=self.resource).values('id')).count(), 3)

    def test_general_po(self):
        """
        Test with a PO file containing multiple different 'breakable'
        cases.
        """

        # Empty our resource
        SourceEntity.objects.filter(resource=self.resource).delete()

        # Import file with two senteces
        handler = POHandler('%s/general/test.pot' %
            os.path.split(__file__)[0])
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)
        exported_file = polib.pofile(handler.compile())
        for entry in exported_file:
            se = SourceEntity.objects.get(
               string = entry.msgid,
               context = entry.msgctxt or 'None',
               resource = self.resource
            )

            if se.pluralized:
                plurals = Translation.objects.filter(
                    source_entity__resource = self.resource,
                    language = self.resource.source_language,
                    source_entity__string = entry.msgid
                ).order_by('rule')

                plural_keys = {}
                # last rule excluding other(5)
                lang_rules = self.resource.source_language.get_pluralrules_numbers()
                # Initialize all plural rules up to the last
                for p,n in enumerate(lang_rules):
                    plural_keys[str(p)] = ""
                for n,p in enumerate(plurals):
                    plural_keys[str(n)] = p.string

                self.assertEqual(entry.msgstr_plural, plural_keys)

            else:
                trans = se.get_translation(
                    self.resource.source_language.code, rule=5
                )

                self.assertEqual(entry.msgstr, trans.string.encode('utf-8'), "Source '%s'"\
                    " differs from translation %s" % (entry.msgstr,
                    trans.string.encode('utf-8')))

    def test_wrong_po(self):
        handler = POHandler(os.path.join(
                os.path.dirname(__file__), 'wrong.pot')
        )
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        self.assertRaises(PoParseError, handler.parse_file, is_source=True)


class TestPoFileHeaders(FormatsBaseTestCase):
    """Test PO File library support for PO file headers."""

    def _load_pot(self):
        test_file = os.path.join(TEST_FILES_PATH, 'test.pot')
        # First empty our resource
        self.resource.entities.all().delete()
        # Load file
        handler = POHandler(test_file)
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)
        return handler

    def test_poheader_team_url(self):
        """Test team header when no main list is defined (URL)."""
        self.assertFalse(self.team.mainlist)
        handler = self._load_pot()
        handler.set_language(self.language)
        pofile = handler.compile()
        self.assertTrue("Portuguese (Brazil)" in pofile)
        self.assertTrue(self.urls['team'] in pofile)

    def test_poheader_team_email(self):
        """Test team header when main list is defined."""
        self.team.mainlist = "test@test.com"
        self.team.save()
        handler = self._load_pot()
        handler.set_language(self.language)
        pofile = handler.compile()
        self.assertTrue("Portuguese (Brazil)" in pofile)
        self.assertFalse(self.urls['team'] in pofile)
        self.assertTrue(self.team.mainlist in pofile)


class TestPoFileCopyright(FormatsBaseTestCase):
    """Test copyright lines for translators in po files."""

    def setUp(self):
        self.handler = POHandler()
        self.matched_lines = [
            '# John Doe, 2011.',
            '# John Doe <john@doe>, 2011.',
            '# John Doe <john@doe>, 2011, 2012.',
            '# Jogn Doe, 2011',
        ]
        self.unmatched_lines = [
            '#John Doe, 2011',
            '# John <john>, 20123',
            '# Copyright, 2011, John Doe.',
            'asdas, 2011',
        ]
        super(TestPoFileCopyright, self).setUp()

    def test_match_lines(self):
        for line in self.matched_lines:
            m = self.handler._get_copyright_from_line(line)
            self.assertTrue(m is not None)
        for line in self.unmatched_lines:
            m = self.handler._get_copyright_from_line(line)
            self.assertTrue(m is None)

    def test_copyright_on_save(self):
        handler = POHandler(os.path.join(
                os.path.dirname(__file__), 'copyright.po')
        )
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)
        self.assertIn("AB", handler.compile())

    def test_headers_on_pot(self):
        handler = POHandler(os.path.join(
                os.path.dirname(__file__), 'tests.pot')
        )
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)
        self.assertNotIn("FIRST AUTHOR", handler.compile())
        handler = POTHandler(os.path.join(
                os.path.dirname(__file__), 'tests.pot')
        )
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)
        self.assertIn("FIRST AUTHOR", handler.compile())

    def test_order(self):
        handler = POHandler(os.path.join(
                os.path.dirname(__file__), 'copyright.po')
        )
        handler.bind_resource(self.resource)
        handler.set_language(self.resource.source_language)
        handler.parse_file(is_source=True)
        handler.save2db(is_source=True)
        cr = Copyright.objects.assign(
            language=self.language_en, resource=self.resource,
            owner='CC', year='2014')
        cr = Copyright.objects.assign(
            language=self.language_en, resource=self.resource,
            owner='ZZ', year='2014')
        cr = Copyright.objects.assign(
            language=self.language_en, resource=self.resource,
            owner='BA', year='2015')
        compiled_template = handler.compile()
        lines_iterator = compiled_template.split("\n")
        for n, line in enumerate(lines_iterator):
            if line == "# Translators:":
                break
        line = lines_iterator[n + 1]
        self.assertTrue('AB' in line)
        line = lines_iterator[n + 3]
        self.assertTrue('BA' in line)
        line = lines_iterator[n + 4]
        self.assertTrue('CC' in line)
        line = lines_iterator[n + 6]
        self.assertTrue('ZZ' in line)


class TestPolibEmptyComments(unittest.TestCase):
    """Check that no error is raised for empty comment lines from polib.

    Polib v0.7 raised IOError for po files that had empty comments.
    """

    def test_empty_comment_file(self):
        filename = os.path.join(
            settings.TX_ROOT, 'resources/tests/lib/pofile/empty_comment.po'
        )
        polib.pofile(filename)

########NEW FILE########
__FILENAME__ = po_pot
# -*- coding: utf-8 -*-

"""
Test PO/POT Handler invocations.

There are two kinds:

  - get/read
  - put/create
"""

from __future__ import with_statement
import os
from mock import patch
from django.core.urlresolvers import reverse
from django.conf import settings
from django.utils import simplejson
from django.test import TestCase
from django.test.client import Client, RequestFactory
from transifex.txcommon.tests.base import BaseTestCase
from transifex.languages.models import Language
from transifex.resources.formats.registry import registry
from transifex.resources.views import update_translation
from transifex.resources.templatetags.upload_manager_tags import \
        upload_create_resource_form
from transifex.resources.backends import FormatsBackend
from transifex.resources.api import Translation
from transifex.resources.formats.pofile import POHandler, POTHandler


class TestApiInvocations(BaseTestCase):
    """Test PO/POT Handler invokations in the API.

    We need to test POST for resources and GET and PUT for translations and
    source content.
    """

    def setUp(self):
        super(TestApiInvocations, self).setUp()
        self.resource.i18n_type = 'PO'
        self.resource.save()
        self.source_url = reverse(
            'apiv2_source_content', kwargs={
                'project_slug': self.resource.project.slug,
                'resource_slug': self.resource.slug,
            }
        )
        self.translation_url = reverse(
            'apiv2_translation', kwargs={
                'project_slug': self.resource.project.slug,
                'resource_slug': self.resource.slug,
                'lang_code': 'el'
            }
        )

    @patch.object(POHandler, 'compile')
    def test_get(self, mock_po):
        """Test GET method for API.

        Test for both source content and translations, json and file
        responses.
        """
        for url in (self.source_url, self.translation_url):
            self.client['maintainer'].get(url)
            self.assertTrue(mock_po.called)
            res = self.client['maintainer'].get(url, data={'file' : ''})
            self.assertTrue(mock_po.called)
            attachment = res.items()[1][1]
            filename = attachment[30:-1]
            self.assertTrue(filename.endswith('po'))

    @patch.object(Translation, '_parse_translation')
    @patch.object(POHandler, 'is_content_valid')
    def test_put(self, _mock, mock):
        """Test PUT method for the API.

        Test filenames used.
        """
        # JSON APi
        mock.return_value = {
            'strings_added': 0,
            'strings_updated': 0,
            'redirect': reverse(
                'resource_detail',
                args=[self.resource.project.slug, self.resource.slug]
            )
        }
        self.client['maintainer'].put(
            self.translation_url,
            data=simplejson.dumps({'content': '', }),
            content_type='application/json'
        )
        self.assertTrue(mock.called)
        used_handler = mock.call_args[0][0]
        self.assertIsInstance(used_handler, type(registry.handler_for('PO')))

        res = self.client['maintainer'].put(
            self.source_url,
            data=simplejson.dumps({'content': '', }),
            content_type='application/json'
        )
        self.assertTrue(mock.called)
        self.assertIsInstance(used_handler, type(registry.handler_for('PO')))

        # filename API
        pofile_path = os.path.join(
            settings.TX_ROOT, 'resources/tests/lib/pofile'
        )
        po_filename = os.path.join(pofile_path, "pt_BR.po")
        pot_filename = os.path.join(pofile_path, "general/test.pot")
        po_class = type(registry.handler_for('PO'))
        pot_class = type(registry.handler_for('POT'))

        for url in (self.source_url, self.translation_url):
            with open(po_filename) as f:
                self.client['maintainer'].put(
                    url, data={
                        'name': 'name.po',
                        'attachment': f
                    },
                )
                self.assertTrue(mock.called)
                used_handler = mock.call_args[0][0]
                self.assertIsInstance(used_handler, po_class)
            with open(pot_filename) as f:
                self.client['maintainer'].put(
                    url, data={
                        'name': 'name.po',
                        'attachment': f
                    },
                )
                self.assertTrue(mock.called)
                used_handler = mock.call_args[0][0]
                self.assertIsInstance(used_handler, pot_class)


class TestViewsInvocations(BaseTestCase):
    """Test PO/POT Handler invokations in the views.

    Test for both source content and translations, json and file
    responses. Test for specific download of POT file, too.
    """

    def setUp(self):
        super(TestViewsInvocations, self).setUp()
        self.resource.i18n_type = 'PO'
        self.resource.save()
        self.pslug = self.resource.project.slug
        self.rslug = self.resource.slug
        self.rname = self.resource.name
        self.mclient = self.client['maintainer']

    @patch.object(POHandler, 'compile')
    @patch.object(POTHandler, 'compile')
    def test_get(self, mock_pot, mock_po):
        po_source_url = reverse(
            'download_for_translation', kwargs={
                'project_slug': self.pslug,
                'resource_slug': self.rslug,
                'lang_code': 'en'
            }
        )
        po_translation_url = reverse(
            'download_for_translation', kwargs={
                'project_slug': self.pslug,
                'resource_slug': self.rslug,
                'lang_code': 'el'
            }
        )
        pot_url = reverse(
            'download_pot', kwargs={
                'project_slug': self.pslug,
                'resource_slug': self.rslug,
            }
        )
        for url in (po_source_url, po_translation_url):
            res = self.mclient.get(url)
            self.assertTrue(mock_po.called)
            attachment = res.items()[3][1]
            filename = attachment[22:]
            self.assertTrue(filename.endswith('po'))

        res = self.mclient.get(pot_url)
        self.assertTrue(mock_pot.called)
        attachment = res.items()[3][1]
        filename = attachment[22:]
        self.assertTrue(filename.endswith('pot'))

    @patch.object(FormatsBackend, '_import_content')
    def test_put(self, import_mock):
        """Check file upload through views.

        Specifically,
        - resource_edit view
        - upload_create_resource_form
        - create_translation_form
        - update_translation_form
        """
        pofile_path = os.path.join(
            settings.TX_ROOT, 'resources/tests/lib/pofile'
        )
        po_filename = os.path.join(pofile_path, "pt_BR.po")
        pot_filename = os.path.join(pofile_path, "general/test.pot")
        po_class = type(registry.handler_for('PO'))
        pot_class = type(registry.handler_for('POT'))

        resource_edit_url = reverse(
            'resource_edit', kwargs={
                'project_slug': self.pslug,
                'resource_slug': self.rslug,
            }
        )
        filenames, klasses = [po_filename, pot_filename], [po_class, pot_class]
        for (filename, klass) in zip(filenames, klasses):
            with open(filename) as f:
                self.mclient.post(
                    resource_edit_url, data={
                        'sourcefile': f,
                        'slug': self.resource.slug,
                        'name': self.resource.name,
                    }
                )
                self.assertTrue(import_mock.called)
                used_handler = import_mock.call_args[0][0]
                self.assertIsInstance(used_handler, klass)

        # Test template tags
        factory = RequestFactory()

        # Create request for template tags
        url = reverse('project_detail', kwargs={'project_slug': self.pslug})
        for (filename, klass) in zip(filenames, klasses):
            with open(filename) as f:
                request = factory.post(
                    url, data={
                        'create_resource': True,
                        'create_form-name': 'Name',
                        'create_form-i18n_method': 'PO',
                        'create_form-source_file': f
                    }
                )
                # we need to patch the request.user object
                with patch.object(request, 'user', create=True) as mock:
                    mock.return_value = self.user['maintainer']
                    upload_create_resource_form(request, self.project)
                    self.assertTrue(import_mock.called)
                    used_handler = import_mock.call_args[0][0]
                    self.assertIsInstance(used_handler, klass)

        with open(po_filename) as f:
            lang_code = 'en_US'
            url = reverse(
                'update_translation',
                kwargs={
                    'project_slug': self.pslug,
                    'resource_slug': self.rslug,
                    'lang_code': lang_code,
                }
            )
            request = factory.post(
                url, data={
                    'name': po_filename,
                    'attachment': f
                }
            )
            # we need to patch the request.user object for the request
            with patch.object(request, 'user', create=True) as mock:
                mock.return_value = self.user['maintainer']
                update_translation(
                    request, project_slug=self.pslug,
                    resource_slug=self.rslug, lang_code=lang_code
                )
                self.assertTrue(import_mock.called)
                used_handler = import_mock.call_args[0][0]
                self.assertIsInstance(used_handler, po_class)

            request = factory.post(
                url, data={
                    'name': po_filename,
                    'attachment': f,
                    'language_code': 'en_US'
                }
            )
            # we need to patch the request.user object for the request
            with patch.object(request, 'user', create=True) as mock:
                mock.return_value = self.user['maintainer']
                update_translation(
                    request, project_slug=self.pslug, resource_slug=self.rslug
                )
                self.assertTrue(import_mock.called)
                used_handler = import_mock.call_args[0][0]
                self.assertIsInstance(used_handler, po_class)

########NEW FILE########
__FILENAME__ = pseudo
# -*- coding: utf-8 -*-
import os
from django.conf import settings
from django.core.urlresolvers import reverse
from transifex.resources.models import Resource
from transifex.languages.models import Language
from transifex.txcommon import import_to_python
from transifex.resources.formats.registry import registry
from transifex.txcommon.tests import base
from transifex.txcommon.log import logger


FORMATS = {
    'PO':{
        'file': os.path.join(settings.TX_ROOT,
            'resources/tests/lib/pofile/pseudo.pot'),
        'pseudo_messages':{
            'BRACKETS': [u'msgstr "[Locations]"'],
            'UNICODE': [u'"Ŭşḗř %(name)s <b>ḓǿḗş ƞǿŧ</b> ħȧṽḗ ȧ',
                u'%i ḿǿŧǿřƈẏƈŀḗş ȧŧ:\\n'],
            'PLANGUAGE': [u'"ÜקÜséקér %(name)s <b>dôéקôés nôקôt</b>',
                u'%i môקôtôקôrcýקýcléקés åקåt:\\n'],
            'MIXED': [u'"[Ŀǿƈȧŧīǿƞş ',],
            'EXTEND': [u'"Ŀǿƈȧŧīǿƞş ',]
            }
        },
    'QT':{
        'file': os.path.join(settings.TX_ROOT,
            'resources/tests/lib/qt/pseudo.ts'),
        'pseudo_messages':{
            'BRACKETS': [u'<translation>[START]</translation>'],
            'UNICODE': [u'<numerusform>&lt;b&gt;%n ƒīŀḗ.&lt;/b&gt;</numerusform>'],
            'PLANGUAGE': [u'<numerusform>&lt;b&gt;%n fïקïléקé'],
            'MIXED': [u'<translation>[ŞŦȦŘŦ ',
                u'<numerusform>[&lt;b&gt;%n ƒīŀḗ.&lt;/b&gt; '],
            'EXTEND': [u'<translation>ŞŦȦŘŦ ',
                u'<numerusform>&lt;b&gt;%n ƒīŀḗ.&lt;/b&gt; ']
            }
        },
    'PROPERTIES':{
        'file': os.path.join(settings.TX_ROOT,
            'resources/tests/lib/javaproperties/pseudo.properties'),
        'pseudo_messages':{
            'BRACKETS': [u'Key00=[Value00]'],
            'UNICODE': [u'Key01=<b>Ƥȧɠḗ</b> %s ǿƒ %s'],
            'PLANGUAGE': [u'Key01=<b>Påקågéקé</b> %s ôקôf %s'],
            'MIXED': [u'Key01=[<b>\\u01a4\\u0227\\u0260\\u1e17</b> %s \\u01ff\\u0192 %s '],
            'EXTEND': [u'Key01=<b>\\u01a4\\u0227\\u0260\\u1e17</b> %s \\u01ff\\u0192 %s ']
            }
        },
    'INI':{
        'file': os.path.join(settings.TX_ROOT,
            'resources/tests/lib/joomla_ini/pseudo.ini'),
        'pseudo_messages':{
            'BRACKETS': [u'KEY1="[Translation]"'],
            'UNICODE': [u'KEY2="<b>Ƥȧɠḗ</b> %s ǿƒ %s"'],
            'PLANGUAGE': [u'KEY2="<b>Påקågéקé</b> %s ôקôf %s"'],
            'MIXED': [u'KEY2="[<b>Ƥȧɠḗ</b> %s ǿƒ %s '],
            'EXTEND': [u'KEY2="<b>Ƥȧɠḗ</b> %s ǿƒ %s ']
            }
        },

    # FIXME: Waiting for fixes in the format.
    #'DESKTOP':{
        #'file': os.path.join(settings.TX_ROOT,
            #'resources/tests/lib/desktop/data/okular.desktop'),
        #'pseudo_messages':{
            #'BRACKETS': [u''],
            #'UNICODE': [u''],
            #'PLANGUAGE': [u'']
            #}
        #}
    }


class PseudoTestCase(base.BaseTestCase):
    """
    Test the generation of several Pseudo translation file types for different
    i18n formats.
    """

    def test_pseudo_file(self):
        """Test Pseudo translation generation based on FORMATS var dict."""
        for i18n_type, v in FORMATS.items():

            #if i18n_type != "INI": continue

            # Set i18n_type for resource
            self.resource.i18n_type = i18n_type
            self.resource.save()

            # Set a file, resource and language for the resource
            handler = registry.handler_for(i18n_type)
            handler.bind_file(v['file'])
            handler.bind_resource(self.resource)
            handler.set_language(self.language)
            handler.parse_file(is_source=True)
            handler.save2db(is_source=True)

            # For each pseudo type that exists, try to generate files in the
            # supported i18n formats supported.
            for pseudo_type in settings.PSEUDO_TYPES.keys():

                #if pseudo_type != "MIXED": continue

                # Get Pseudo type class
                pseudo_class = import_to_python(
                    settings.PSEUDO_TYPE_CLASSES[pseudo_type])

                # Compile file and check encoding
                file_content = handler.compile(
                    pseudo=pseudo_class(self.resource.i18n_type)
                )
                if not isinstance(file_content, unicode):
                    try:
                        file_content = file_content.decode('utf-8')
                    except UnicodeDecodeError:
                        file_content = file_content.decode('iso-8859-1')


                #FIXME: We have a bug related to spaces being escaped in
                # .properties files. This can be dropped after fixing it.
                if i18n_type == 'PROPERTIES' and \
                    pseudo_type in ['PLANGUAGE', 'UNICODE']:
                    file_content = file_content.replace('\\ ', ' ')

                # Assert expected value in the generated file
                for message in v['pseudo_messages'][pseudo_type]:
                    logger.debug(file_content)
                    logger.debug("-----------------")
                    logger.debug(message)
                    logger.debug(i18n_type)
                    logger.debug(pseudo_type)
                    logger.debug("-----------------")
                    self.assertIn(message, file_content)


    def test_pseudo_file_api_calls(self):
        """Test Pseudo translation requests through the API."""
        source_language = self.project.resources.all()[0].source_language
        for i18n_type, v in FORMATS.items():
            resource_slug = 'resource_%s' % i18n_type.lower()
            resource_url = reverse('apiv2_resources', kwargs={
                    'project_slug': self.project.slug})

            # Creating resource using the API
            f = open(v['file'])
            res = self.client['maintainer'].post(
                resource_url,
                data={
                    'slug': resource_slug,
                    'name': resource_slug,
                    'i18n_type': i18n_type,
                    'attachment': f},
                )
            f.close()

            logger.debug('-----------------------')
            logger.debug(i18n_type)
            logger.debug(settings.I18N_METHODS[i18n_type]['mimetype'])
            logger.debug(res.content)
            logger.debug('-----------------------')

            # Pseudo file API URL
            url = reverse('apiv2_pseudo_content', args=[self.project.slug,
                resource_slug])

            for pseudo_type in settings.PSEUDO_TYPES:
                # Get resource file using a specific pseudo type
                resp = self.client['registered'].get(url, data={'pseudo_type':pseudo_type})

                # Get response and check encoding
                resp_content = eval(resp.content)['content']
                if type(resp_content) != unicode:
                    try:
                        resp_content = resp_content.decode('utf-8')
                    except UnicodeDecodeError:
                        resp_content = resp_content.decode('iso-8859-1')

                #FIXME: We have a bug related to spaces being escaped in
                # .properties files. This can be dropped after fixing it.
                if i18n_type == 'PROPERTIES' and \
                    pseudo_type in ['PLANGUAGE', 'UNICODE']:
                    resp_content = resp_content.replace('\\ ', ' ')

                # Assert expected value in the generated file
                for message in v['pseudo_messages'][pseudo_type]:
                    self.assertTrue(message in resp_content)

########NEW FILE########
__FILENAME__ = registry
# -*- coding: utf-8 -*-

from mock import Mock
from django.utils import unittest
from django.conf import settings
from transifex.resources.formats.registry import registry, _FormatsRegistry
from transifex.resources.formats.pofile import POHandler, POTHandler
from transifex.txcommon.tests.base import BaseTestCase


class TestRegistry(BaseTestCase):

    def setUp(self):
        super(TestRegistry, self).setUp()
        methods = {
            'PO': {
                'description': 'PO file handler',
                'file-extensions': '.po, .pot',
                'mimetype': 'text/x-po, application/x-gettext, application/x-po',
            }, 'QT': {
                    'description': 'Qt Files',
                    'mimetype': 'application/xml',
                    'file-extensions': '.ts'
            },
        }
        handlers = {
            'PO': 'resources.formats.pofile.POHandler',
            'QT': 'resources.formats.qt.LinguistHandler',
        }
        self.registry = _FormatsRegistry(methods=methods, handlers=handlers)

    def test_register(self):
        from transifex.resources.formats.joomla import JoomlaINIHandler
        self.registry.add_handler('INI', JoomlaINIHandler)
        self.assertEquals(len(self.registry.handlers.keys()), 3)
        self.assertIn('INI', self.registry.handlers.keys())
        j = self.registry.handler_for('INI')
        self.assertIsInstance(j, JoomlaINIHandler)

    def test_extensions(self):
        extensions = self.registry.extensions_for('PO')
        self.assertEquals(len(extensions), 2)
        self.assertEquals(extensions[0], '.po')
        self.assertEquals(extensions[1], '.pot')

    def test_mimetypes(self):
        mimetypes = self.registry.mimetypes_for('PO')
        self.assertEquals(len(mimetypes), 3)
        self.assertEquals(mimetypes[0], 'text/x-po')
        self.assertEquals(mimetypes[1], 'application/x-gettext')
        self.assertEquals(mimetypes[2], 'application/x-po')


class TestAppropriateHandler(unittest.TestCase):
    """Test the process of finding the appropriate handler in
    various situations.
    """

    @classmethod
    def setUpClass(cls):
        cls.appropriate_handler = registry.appropriate_handler

    def test_normal_types(self):
        for method in settings.I18N_METHODS:
            if method not in ('PO', 'POT', ):
                resource = Mock()
                resource.__dict__['i18n_type'] = method
                handler = self.appropriate_handler(resource, None)
                self.assertIsInstance(
                    handler, type(registry.handler_for(method))
                )

    def test_get(self):
        resource = Mock()
        resource.__dict__['i18n_type'] = 'PO'
        resource.source_language = 'en'

        handler = self.appropriate_handler(resource, None)
        self.assertIsInstance(handler, POTHandler)
        handler = self.appropriate_handler(resource, 'en')
        self.assertIsInstance(handler, POHandler)
        handler = self.appropriate_handler(resource, 'el')
        self.assertIsInstance(handler, POHandler)

    def test_save(self):
        resource = Mock()
        resource.__dict__['i18n_type'] = 'PO'
        resource.source_language = 'en'

        filename = 'f.po'
        handler = self.appropriate_handler(resource, None, filename=filename)
        self.assertIsInstance(handler, POHandler)
        handler = self.appropriate_handler(resource, 'en', filename=filename)
        self.assertIsInstance(handler, POHandler)
        handler = self.appropriate_handler(resource, 'el', filename=filename)
        self.assertIsInstance(handler, POHandler)
        filename = 'f.pot'
        handler = self.appropriate_handler(resource, None, filename=filename)
        self.assertIsInstance(handler, POTHandler)
        handler = self.appropriate_handler(resource, 'en', filename=filename)
        self.assertIsInstance(handler, POTHandler)
        handler = self.appropriate_handler(resource, 'el', filename=filename)
        self.assertIsInstance(handler, POTHandler)


class TestFileExtensions(unittest.TestCase):
    """Test the file extensions used."""

    def setUp(self):
        self.resource = Mock()
        self.resource.source_language = 'en'

    def test_extensions(self):
        for method in registry.available_methods:
            if method == 'POT':
                continue
            self.resource.i18n_method = method
            correct_extensions = registry.extensions_for(method)
            for lang in ('en', 'el'):
                extension_returned = registry.file_extension_for(
                    self.resource, lang
                )
                self.assertIn(extension_returned, correct_extensions)

    def test_po_extensions(self):
        """Test PO/POT extensions.

        If language is None: extension == 'pot'.
        """
        self.resource.i18n_method = 'PO'
        for lang in ('en', 'el', None):
            extension = registry.file_extension_for(self.resource, lang)
            if lang is None:
                self.assertEqual(extension, registry.extensions_for('POT')[0])
            else:
                self.assertEqual(extension, registry.extensions_for('PO')[0])


########NEW FILE########
__FILENAME__ = utils
# -*- coding: utf-8 -*-

"""
Tests for the utils module.
"""

from django.utils import unittest
from transifex.resources.formats.utils.string_utils import split_by_newline


class TestSplitNewlines(unittest.TestCase):
    """Test the split_by_newlines function."""

    def test_empty_text(self):
        """Test with empty text."""
        it = split_by_newline('')
        _, s = it.next()
        self.assertEqual(s, '')
        self.assertRaises(StopIteration, it.next)

    def test_ends_newline(self):
        """Test the behavior in case the text ends with a new line character."""
        text = 'A line\nAnother line\nAnd a final one.\n'
        expected_res = text.split('\n')
        for res, expected in zip(split_by_newline(text), expected_res):
            self.assertEqual(res[1], expected)

    def test_ends_character(self):
        """Test the behavior in case the text does not end
        with a new line character.
        """
        text = 'A line\nAnother line\nAnd a final one.'
        expected_res = text.split('\n')
        for res, expected in zip(split_by_newline(text), expected_res):
            self.assertEqual(res[1], expected)

    def test_index(self):
        """Test the index part of the function."""
        text = 'a\nb\nc'
        expected_pos = [2, 4, -1]
        for res, expected in zip(split_by_newline(text), expected_pos):
            self.assertEqual(res[0], expected)

        text = 'a\nb\nc\n'
        expected_pos = [2, 4, 6, -1]
        for res, expected in zip(split_by_newline(text), expected_pos):
            self.assertEqual(res[0], expected)

########NEW FILE########
__FILENAME__ = wiki
# -*- coding: utf-8 -*-

from django.test import TestCase
from transifex.resources.formats.resource_collections import StringSet
from transifex.resources.formats.wiki import WikiHandler


class TestWikiHandler(TestCase):

    def test_parse_wiki_text(self):
        handler = WikiHandler()
        handler.stringset = StringSet()
        # Test content with '\n' as line separator
        content = "Text {{italics|is}}\n\nnew {{italics|par\n\npar}}.\n\nTers"
        handler.content = content
        handler._parse(None, None)
        self.assertEquals(len(handler.stringset), 3)
        # Test content with '\r\n' as line separator
        handler.stringset = StringSet()
        content = "Text {{italics|is}}\r\n\r\nnew "\
                "{{italics|par\r\n\r\npar}}.\r\n\r\nTers"
        handler.content = content
        handler._parse(None, None)
        self.assertEquals(len(handler.stringset), 3)

        # Test content with '\n' as line separator
        handler.stringset = StringSet()
        content = "Text {{italics|is}}\n\n\n\nnew {{italics|par\n\npar}}.\n\nTers"
        handler.content = content
        handler._parse(None, None)
        self.assertEquals(len(handler.stringset), 3)
        # Test content with '\r\n' as line separator
        handler.stringset = StringSet()
        content = "Text {{italics|is}}\r\n\r\n\r\n\r\nnew "\
                "{{italics|par\r\n\r\npar}}.\r\n\r\nTers"
        handler.content = content
        handler._parse(None, None)
        self.assertEquals(len(handler.stringset), 3)

        # Test content with '\n' as line separator
        handler.stringset = StringSet()
        content = ("text {{italics|is}} {{bold|bold}}\n\n\n\nnew "
                   "{{italics|par\n\npar}}.\n\nters")
        handler.content = content
        handler._parse(None, None)
        self.assertEquals(len(handler.stringset), 3)
        # Test content with '\r\n' as line separator
        handler.stringset = StringSet()
        content = ("text {{italics|is}} {{bold|bold}}\r\n\r\n\r\n\r\nnew "
                   "{{italics|par\r\n\r\npar}}.\r\n\r\nters")
        handler.content = content
        handler._parse(None, None)
        self.assertEquals(len(handler.stringset), 3)

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-
from django.db import IntegrityError
from django.core.exceptions import ValidationError
from django.conf import settings
from django.test import TestCase
from django.utils.hashcompat import md5_constructor
from hashlib import md5
from transifex.resources.models import *
from transifex.txcommon.tests.base import BaseTestCase


SAMPLE_STRING = 'Hello'
SAMPLE_STRINGS = ['%s_%s' % (SAMPLE_STRING, i) for i in range(1, 11)]
# TEXT SIZE: 9 paragraphs, 1000 words, 6701 bytes
SAMPLE_BIG_TEXT = ('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean auctor mattis justo, in feugiat justo ullamcorper a. Etiam dapibus, dolor sagittis varius posuere, metus risus vehicula sem, eget tincidunt neque quam a augue. Lorem ipsum dolor sit amet, consectetur adipiscing elit. In scelerisque dignissim tempus. Pellentesque in orci mi. In quis enim pharetra ipsum euismod aliquam. Donec felis ipsum, sollicitudin id suscipit ut, sagittis quis libero. Cras vitae elit et metus adipiscing aliquet quis sed dui. Morbi in fringilla diam. Sed cursus fermentum posuere. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam metus dui, facilisis eu adipiscing vehicula, hendrerit a mauris. Quisque interdum diam eros. In et urna purus, vel vestibulum eros. Mauris euismod iaculis tincidunt.'

'Mauris quis arcu nibh, eget hendrerit erat. Fusce velit erat, consequat in tempor et, suscipit quis quam. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin justo sapien, semper a auctor eu, vestibulum sit amet felis. Vestibulum consectetur ultricies vestibulum. Suspendisse vestibulum eleifend convallis. Sed ultricies, est a cursus vulputate, sapien odio auctor massa, eget dapibus eros est sed diam. Sed enim odio, viverra ultricies vulputate id, consequat ac felis. Nam malesuada leo nec nisi tristique volutpat.'

'Mauris mollis leo eu mauris sodales a dignissim orci suscipit. Proin laoreet, dolor non fringilla rhoncus, risus nulla hendrerit orci, eu porttitor est nisi et risus. Nulla porta augue nec sem porttitor rutrum imperdiet massa elementum. Donec gravida lobortis ornare. Sed vulputate, elit non condimentum tincidunt, urna eros congue ligula, id iaculis sapien dui sit amet odio. Mauris eget gravida risus. Duis libero libero, tristique vel facilisis sed, dapibus in est. Nulla sit amet tristique eros. Mauris semper suscipit massa mattis dignissim. Curabitur nulla eros, rutrum sed semper a, feugiat condimentum lacus. Aenean aliquam tincidunt tellus sed semper. Phasellus scelerisque risus sit amet sem molestie sit amet adipiscing urna accumsan. Etiam ultricies ligula id ipsum interdum id tempor libero scelerisque. Aenean in elit eget purus malesuada fermentum. Phasellus sollicitudin interdum cursus. Phasellus faucibus consectetur quam, sit amet convallis libero ornare et.'

'Pellentesque quam tellus, malesuada ac posuere vel, bibendum in augue. Vivamus viverra ultricies quam, et tristique nulla gravida eu. Duis at nisi vel mauris posuere scelerisque sed non nunc. Integer sit amet nisi vitae nisi rhoncus ornare. Donec quis felis nisi, ut pulvinar neque. Integer gravida luctus lorem at ultrices. Ut consectetur dui et ante accumsan quis iaculis libero mollis. Aenean nisi diam, mollis ut ullamcorper quis, lobortis eu risus. Proin ultricies pharetra ultrices. Etiam sollicitudin nisl scelerisque justo molestie aliquet non a enim.'

'Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Integer mollis semper nibh, a sodales dui dictum ut. Nunc eu ipsum enim. Morbi varius rutrum consectetur. Aliquam lacus ligula, ornare et faucibus vitae, eleifend a ante. Duis lectus arcu, suscipit in lobortis eu, bibendum quis lacus. Ut sem leo, sollicitudin nec hendrerit accumsan, condimentum ac lorem. Donec facilisis, massa eget facilisis faucibus, lorem nisl pulvinar ligula, ut pretium dolor est id elit. Aenean suscipit fermentum facilisis. Cras eu urna odio, vel blandit est. Integer at leo arcu, sed varius leo. Vestibulum eu sapien libero. Quisque sed nulla sit amet nulla gravida tincidunt. Aliquam erat volutpat. Phasellus non lorem et diam accumsan faucibus vel ac est. Sed eu arcu leo. Etiam ultrices tempor dignissim.'

'Donec tempor lorem eu lectus congue pharetra. Nunc commodo nunc varius quam feugiat tristique. Curabitur a arcu lacus, nec interdum neque. Suspendisse facilisis auctor risus, id consectetur velit porta sed. Ut malesuada, elit non vestibulum imperdiet, ipsum sem facilisis massa, vel molestie odio justo ultrices felis. Sed sed lorem neque. Aenean nec quam quis massa congue feugiat quis in mi. Integer et arcu ipsum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Suspendisse facilisis venenatis ipsum, lacinia porta orci imperdiet at. Suspendisse dictum lacus id est bibendum pretium. Aenean in eros vel sem vulputate vehicula. Morbi est nisi, ultricies quis porttitor a, luctus venenatis libero. Donec ac nibh eu elit lacinia auctor. Nullam commodo porta eros, dapibus sodales urna tincidunt vitae. Ut luctus mi eget urna imperdiet sed scelerisque odio volutpat.'

'In euismod faucibus elit, non rutrum velit fermentum vel. Cras sit amet volutpat sem. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam at magna lacus. Phasellus hendrerit accumsan metus, quis ultrices erat placerat sed. Nullam pretium, tellus vel tristique gravida, metus nibh scelerisque arcu, vel vehicula risus tellus non dolor. Cras at diam vitae leo pulvinar rhoncus. Duis consectetur rhoncus nulla, varius commodo metus vehicula sed. Ut suscipit velit eros. Praesent massa nunc, vestibulum ut porttitor sed, fermentum nec sem. Nunc id libero tellus, sed mattis risus. Proin tristique blandit est, interdum rhoncus diam sollicitudin ac. Vivamus interdum dignissim luctus. Nunc vel aliquam enim.'

'Donec non porttitor mi. Praesent in vestibulum turpis. Fusce elit odio, elementum vel tempus at, dictum eleifend nisi. Morbi ac risus diam. Donec a orci est, vel volutpat nunc. Suspendisse accumsan est ut ipsum vehicula id rutrum metus blandit. In vehicula lacinia ante at gravida. Aenean eu dui sapien, vel feugiat tortor. Sed urna arcu, consectetur ut mollis in, ultricies quis lectus. Etiam quis orci ipsum. Vivamus vitae enim vel augue euismod tincidunt nec sed nunc. Morbi condimentum sapien vitae mauris feugiat eu interdum ligula pretium. Curabitur non dolor diam. Maecenas adipiscing aliquam justo, id condimentum dui accumsan vitae. Mauris elementum pharetra erat nec mollis. Duis consectetur, nisi eu ornare pretium, diam risus rhoncus metus, non volutpat velit purus at dolor. Sed nec mi nulla. Curabitur vel dui vel velit cursus pharetra vel vitae eros. Vivamus odio odio, auctor a fermentum eu, tempor vitae massa.'

'Morbi ultricies euismod tellus, a tincidunt lacus luctus vel. Etiam commodo volutpat metus ac consequat. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Suspendisse ac cursus dui. Class aptent taciti sociosqu ad litora. ')

class ResourcesModelTests(BaseTestCase):
    """Test the resources models."""

    def setUp(self):
        super(ResourcesModelTests, self).setUp()

    def tearDown(self):
        super(ResourcesModelTests, self).tearDown()

    def test_create_resource(self):
        """Test Resource model creation."""
        r = Resource.objects.create(
            name='Resource Model Test', slug='resource_model_test',
            i18n_type='PO', source_language=self.language_en,
            project=self.project
        )
        self.assertTrue(r)

    def test_rlstats_creation(self):
        """Test the creation of a RLStats for a project team on resource saving."""
        rls = RLStats.objects.get(resource=self.resource,
            language=self.team.language)

        self.assertTrue(rls)

    def test_resource_available_languages(self):
        """Test available languages for a resource with and without teams."""
        self.assertEqual(len(self.resource.available_languages), 3)
        self.assertEqual(len(self.resource.available_languages_without_teams), 2)

    def test_create_source_entity(self):
        """Test SourceEntity model creation."""
        s = SourceEntity.objects.create(string='Source Identifier 1',
                                        context='title',
                                        position=8,
                                        occurrences='/home/user1/test.py:18',
                                        flags='python-format',
                                        developer_comment='This is the title.',
                                        pluralized=False,
                                        resource=self.resource)
        self.assertTrue(s)
        self.assertEqual(s.string_hash, md5_constructor(':'.join([s.string,
            s.context_string]).encode('utf-8')).hexdigest())

    def test_create_translation_string(self):
        """Test TranslationString model creation."""
        t = Translation.objects.create(
            string='Buy me some BEER :)',
            rule=5,
            source_entity=self.source_entity,
            resource=self.resource,
            language=self.language,
            user=self.user['registered']
        )
        self.assertTrue(t)
        self.assertEqual(t.string_hash, md5(t.string.encode('utf-8')).hexdigest())

    def test_utf8_translation_string(self):
        """Test that utf-8 strings are saved correctly.

        WARNING! The 'u' character is important to be identified as unicode!
        """
        t = Translation.objects.create(
            string=u'Αγόρασε μου μια μπύρα :)',
            rule=5,
            source_entity=self.source_entity,
            resource=self.resource,
            language=self.language,
            user=self.user['registered']
        )
        self.assertTrue(t)
        self.assertEqual(t.string_hash, md5(t.string.encode('utf-8')).hexdigest())

    def test_plural_translations(self):
        """Test that plural forms for translations are created correctly."""
        self.source_entity.pluralized = True
        self.source_entity.save()
        t_one = Translation.objects.create(
            string=u'I want one beer :)', rule=1,
            source_entity=self.source_entity, resource=self.resource,
            language=self.language, user=self.user['registered']
        )
        t_other = Translation.objects.create(
            string=u'I want ten beers :)', rule=5,
            source_entity=self.source_entity, resource=self.resource,
            language=self.language, user=self.user['registered']
        )
        self.assertEqual(Translation.objects.filter(
            source_entity=self.source_entity, language=self.language).count(),
            len(self.language.get_pluralrules()))

    def test_translation_size(self):
        """Test that a big translation text is stored in the DB correctly.

        This depends to the corresponding DB engine.
        """
        t = Translation.objects.create(
            string=SAMPLE_BIG_TEXT, rule=5,
            source_entity=self.source_entity, resource=self.resource,
            language=self.language, user=self.user['registered']
        )
        self.assertTrue(t)
        self.assertEqual(t.string_hash,
                         md5(SAMPLE_BIG_TEXT.encode('utf-8')).hexdigest())

    def test_translation_integrity(self):
        """Test translation integrity.

        Translation uniqueness is based on the combination of 'source_entity',
        'language' and 'rule' fields.
        """
        t = Translation.objects.create(
            string="Hello", rule=5,
            source_entity=self.source_entity, resource=self.resource,
            language=self.language, user=self.user['registered']
        )
        t_error = Translation(
            string="Hello2", rule=5,
            source_entity=self.source_entity, resource=self.resource,
            language=self.language, user=self.user['maintainer']
        )
        self.assertRaises(IntegrityError, t_error.save)

    def test_source_entity_integrity(self):
        """Test source_entity integrity.

        SourceEntity uniqueness is based on the combination of 'string_hash',
         'context' and 'resource' fields.
        """
        s = SourceEntity.objects.create(
            string=SAMPLE_STRING, context="menu title", resource=self.resource
        )
        s_error = SourceEntity(
            string=SAMPLE_STRING, context="menu title", resource=self.resource
        )
        self.assertRaises(IntegrityError, s_error.save)


    def test_wordcounts(self):
        """Test word counts in the model."""
        # Manually get the number of words in the English string, just in case
        words_en = len(self.translation_en.string.split(None))

        # Test whether the Translation objects have the same words
        self.assertEquals(self.translation_en.wordcount, words_en)

        # Since this resource only has one translatable string, its wordcount
        # should match its wordcount.
        self.resource.update_wordcount()
        self.assertEquals(self.resource.wordcount,
                          self.translation_en.wordcount)

    def test_slug_validation(self):
        """Test that validation for slug works"""
        slug = "foo"
        r = Resource(slug=slug, name='r', project=self.project,
                source_language=self.language_en, i18n_type='PHP_DEFINE',)
        r.clean_fields()
        r.slug = "a.b.c+"
        self.assertRaises(ValidationError, r.clean_fields)



class RLStatsModelTests(BaseTestCase):
    """Test the resources models."""

    def test_rlstats_queries(self):
        q = RLStats.objects

        self.assertEqual(q.by_project(self.project).count(), 3)
        self.assertEqual(q.public().by_project(self.project).count(), 3)
        self.assertEqual(q.private().by_project(self.project).count(), 0)

        self.assertEqual(q.public().by_project(self.project_private).count(), 0)
        self.assertEqual(q.private().by_project(self.project_private).count(), 1)

        self.assertEqual(q.by_resource(self.resource).count(), 3)

        self.assertEqual(q.for_user(self.user['maintainer']).by_project(self.project).count(), 3)
        self.assertEqual(q.for_user(self.user['maintainer']).count(), 4)
        self.assertEqual(q.for_user(self.user['registered']).count(), 3)
        self.assertEqual(q.for_user(self.user['team_member']).count(), 4)

        self.assertEqual(q.for_user(self.user['registered']).by_project(self.project_private).count(), 0)
        self.assertEqual(q.for_user(self.user['team_member']).by_project(self.project_private).count(), 1)

        self.assertEqual(q.for_user(self.user['maintainer']).by_release(self.release).count(), 3)

        self.assertEqual(len([f for f in q.for_user(self.user['maintainer']).by_project_aggregated(self.project)]), 1)
        self.assertEqual(len([f for f in q.for_user(self.user['registered']).by_project_aggregated(self.project_private)]), 0)


class RLStatsModelWordsTests(BaseTestCase):
    """Test the word support of the RLStats model."""

    def test_source_lang(self):
        rls_en = self.resource.rlstats_set.get(language=self.language_en)
        words_en = len(self.translation_en.string.split(None))
        self.assertEqual(rls_en.translated_wordcount, words_en)

    def test_fully_translated_lang(self):
        # With 1 string translated, Arabic should be 50% translated
        # since we have two source entities
        words_ar = len(self.translation_ar.string.split(None))
        rls_ar = self.resource.rlstats_set.get(language=self.language_ar)
        self.assertEqual(rls_ar.translated_perc, 50)
        # FIXME: This is not implemented yet. All wordcounts are based on
        # source
        #self.assertEqual(rls_ar.untranslated_wordcount, 5)

    def test_partially_translated_lang(self):
        words_ar = len(self.translation_ar.string.split(None))
        # First, create more entities to have a <100% translation effort.
        self.create_more_entities()
        # Translated words should be the same as target language
        # FIXME: This is not implemented yet. All wordcounts are based on
        # source
        rls_ar = self.resource.rlstats_set.get(language=self.language_ar)
        rls_ar.update()
        #self.assertEqual(rls_ar.translated_wordcount, words_ar)

        # The remaining words should be equal to the words of the remaining
        # untranslated English string; in this case it's just the new string
        self.assertEqual(rls_ar.untranslated_wordcount, self.translation_en2.wordcount)


########NEW FILE########
__FILENAME__ = templates
# -*- coding: utf-8 -*-
from django.conf import settings
from django.core.urlresolvers import reverse
from transifex.languages.models import Language
from transifex.resources.models import SourceEntity
from transifex.teams.models import Team
from transifex.txcommon.tests.base import BaseTestCase

class ResourcesTemplateTests(BaseTestCase):


    def test_create_resource_template_tag(self):
        """Ensure that button and the form is appeared correctly."""
        resp = self.client['maintainer'].get(self.urls['project_resources'])
        self.assertTemplateUsed(resp, 'projects/project_resources.html')
        self.assertContains(resp, "Create Resource")
        for user in ['anonymous', 'registered','team_member']:
            resp = self.client[user].get(self.urls['project'])
            self.assertNotContains(resp, "Create Resource")

    def test_priority_table_snippet(self):
        """ Check that priority td is presented correctly."""
        priority_dict = {
                'Normal': 0,
                'High': 1,
                'Urgent': 2
        }
        resp = self.client['maintainer'].get(self.urls['project_resources'])
        self.assertTemplateUsed(resp, 'projects/project_resources.html')
        self.assertContains(resp,
                            'id="priority_%s"' %
                            (self.resource.slug ,),
                            status_code=200)
        self.assertContains(resp,
                            '<img class="res_tipsy_enable" src="%spriorities/images/%s.png"' %
                            (settings.STATIC_URL,
                             priority_dict.get(self.resource.priority.display_level) ))
        for user in ['anonymous', 'registered','team_member']:
            resp = self.client[user].get(self.urls['project'])
            self.assertNotContains(resp,
                                   'id="priority_%s"' %
                                   (self.resource.slug ,),
                                   status_code=200)

    def test_available_langs_per_resource(self):
        """ Test that the correct number of resource languages appear in template."""
        self.assertEqual(type(self.resource.available_languages.count()), int)
        for user in ['anonymous', 'registered','team_member', 'maintainer']:
            resp = self.client[user].get(self.urls['resource'])
            self.assertContains(
                resp, "Available languages (%s)" % (
                    self.resource.available_languages.count()
                ))

    def test_total_strings_per_resource(self):
        """Test that resource.total_entities return the correct amount of
        strings in the resource_list page."""
        self.resource.update_total_entities()
        self.assertEqual(self.resource.total_entities,
                         SourceEntity.objects.filter(
                             resource=self.resource).count())

    def test_javascript_snippet_cycle_priority(self):
        """Test if we include the ajax triggering js for priority changes."""
        resp = self.client['maintainer'].get(self.urls['project_resources'])
        self.assertTemplateUsed(resp, 'projects/project_resources.html')
        self.assertContains(resp,
                            'var resource_priority_cycle_url = \'%s\';'%
                            (reverse('cycle_resource_priority',
                                     args=[self.project.slug, "1111111111"]),),
                            status_code=200)
        # self.assertContains(resp,
        #                     'title="Click the flags to modify the importance of a resource."')
        # All the other user classes should not see these snippets
        for user in ['anonymous', 'registered','team_member']:
            resp = self.client[user].get(self.urls['project_resources'])
            self.assertNotContains(resp,
                                'var resource_priority_cycle_url = \'%s\';'%
                                (reverse('cycle_resource_priority',
                                         args=[self.project.slug, "1111111111"]),),
                                status_code=200)
            self.assertNotContains(resp,
                                'title="Click the flags to modify the importance of a resource."')

    def test_translate_resource_button(self):
        """Test that translate resource button appears in resource details."""
        # Test the response contents
        for user in ['team_member', 'maintainer']:
            resp = self.client[user].get(self.urls['resource'])
            self.assertTemplateUsed(resp, 'resources/resource_detail.html')
            msg = 'id="start_new_translation" class="i16 buttonized action"'
            self.assertContains(resp, msg, status_code=200)
        # The anonymous users and the non-team members must not see the button
        for user in ['anonymous', 'registered']:
            resp = self.client[user].get(self.urls['resource'])
            self.assertNotContains(resp, msg, status_code=200)

    def test_resource_edit_button(self):
        """Test that resource edit button is rendered correctly in details."""
        # Test the response contents
        resp = self.client['maintainer'].get(self.urls['resource'])
        self.assertTemplateUsed(resp, 'resources/resource_detail.html')
        self.assertContains(resp, 'Edit resource', status_code=200)
        # In any other case of user this should not be rendered
        for user in ['anonymous', 'registered', 'team_member']:
            resp = self.client[user].get(self.urls['resource'])
            self.assertNotContains(resp, 'Edit resource', status_code=200)

    def test_delete_translation_resource_button(self):
        """Test that delete translation resource button is rendered correctly."""
        resp = self.client['maintainer'].get(self.urls['resource_edit'])
        self.assertTemplateUsed(resp, 'resources/resource_form.html')
        self.assertContains(resp, 'Delete resource', status_code=200)
        # In any other case of user this should not be rendered
        for user in ['anonymous', 'registered', 'team_member']:
            resp = self.client[user].get(self.urls['resource_edit'])
            self.assertNotContains(resp, 'Forbidden_access', status_code=403)

    def test_disabled_visit_team_resource_actions(self):
        """Test that resource actions page will work even when there is no
        RLStat object, allowing to start translations for new languages."""
        # We chose Finnish language which has no corresponding project team.
        lang = Language.objects.by_code_or_alias('fi')
        resp = self.client['maintainer'].get(
            reverse('resource_actions', args=[self.resource.project.slug,
                self.resource.slug, lang.code]),
        )
        self.assertTemplateUsed(resp, 'resources/resource_actions.html')
        self.assertEqual(resp.status_code, 200)

    def test_resource_details_team_and_zero_percent(self):
        """Test that languages with teams and 0% are presented."""
        self.project.team_set.filter(language=self.language).delete()
        resp = self.client['anonymous'].get(self.urls['resource'])
        self.assertContains(resp, self.language_ar.name, status_code=200,
            msg_prefix="Do not show 0% languages if there is no respective team.")
        self.assertNotContains(resp, '<div class="stats_string_resource"> 0% </div>')

        # Test with a new team.
        t = Team.objects.create(language=self.language_ar, project=self.project,
                                creator=self.user['maintainer'])
        resp = self.client['anonymous'].get(self.urls['resource'])
        self.assertContains(resp, self.language_ar.name, status_code=200,
            msg_prefix="Show a 0% language if there is a respective team.")
        self.assertContains(resp, '<div class="stats_string_resource">\n'
            '    0%\n  </div>')

########NEW FILE########
__FILENAME__ = permissions
# -*- coding: utf-8 -*-
from django.core.urlresolvers import reverse
from django.core import serializers
from django.test.client import Client
from transifex.languages.models import Language
from transifex.resources.models import Resource, Translation
from transifex.txcommon.tests.base import BaseTestCase

from django.utils import simplejson as json


class PermissionsTest(BaseTestCase):
    """Test view permissions"""

    def seUp(self):
        super(PermissionsTest, self).setUp()

    def test_anon(self):
        """
        Test anonymous user
        """
        # Delete Translations
        page_url = reverse('resource_translations_delete',
            args=[self.project.slug, self.resource.slug,self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if resource gets deleted successfully
        page_url = reverse('resource_delete',
            args=[self.project.slug, self.resource.slug])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if user is able to access resource details
        resp = self.client['anonymous'].get(reverse('resource_detail',
            args=[self.project.slug, self.resource.slug]))
        self.assertEqual(resp.status_code, 200)

        # Check if user is able to access resource edit
        page_url = reverse('resource_edit',
            args=[self.project.slug, self.resource.slug])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check the popup
        page_url = reverse('resource_actions',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check the ajax view which returns more resources in project detail page.
        resp = self.client['anonymous'].post(reverse('project_resources',
            args=[self.project.slug, 5]))
        self.assertEqual(resp.status_code, 200)
        resp = self.client['anonymous'].post(reverse('project_resources_more',
            args=[self.project.slug, 5]))
        self.assertEqual(resp.status_code, 200)

        # Check that anonymous user is redirected to signin page
        page_url = reverse('clone_translate',
            args=[self.project.slug, self.resource.slug, self.language_en.code,
                  self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)

        # Check lock and get translation file perms
        page_url = reverse('lock_and_download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)

        # Check download file perms
        page_url = reverse('download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)

        #PRIVATE PROJECT CHECKS
        # Delete Translations
        page_url = reverse('resource_translations_delete',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if resource gets deleted successfully
        page_url = reverse('resource_delete',
            args=[self.project_private.slug, self.resource_private.slug])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if user is able to access resource details
        resp = self.client['anonymous'].get(reverse('resource_detail',
            args=[self.project_private.slug, self.resource_private.slug]))
        self.assertEqual(resp.status_code, 403)

        # Check if user is able to access resource edit
        page_url = reverse('resource_edit',
            args=[self.project_private.slug, self.resource_private.slug])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check the popup
        page_url = reverse('resource_actions',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language_ar.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check the ajax view which returns more resources in project detail page.
        resp = self.client['anonymous'].post(reverse('project_resources',
            args=[self.project_private.slug, 5]))
        self.assertEqual(resp.status_code, 403)
        resp = self.client['anonymous'].post(reverse('project_resources_more',
            args=[self.project_private.slug, 5]))
        self.assertEqual(resp.status_code, 403)

        # Check that anonymous user is redirected to signin page
        page_url = reverse('clone_translate',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language_en.code,
                  self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)

        # Check lock and get translation file perms
        page_url = reverse('lock_and_download_for_translation',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)

        # Check download file perms
        page_url = reverse('download_for_translation',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['anonymous'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)
        resp = self.client['anonymous'].post(page_url)
        self.assertEqual(resp.status_code, 302)
        self.assertRedirects(resp, '/accounts/signin/?next=%s' % page_url)


    def test_registered(self):
        """
        Test random registered user
        """
        # Delete Translations
        page_url = reverse('resource_translations_delete',
            args=[self.project.slug, self.resource.slug,self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if resource gets deleted successfully
        page_url = reverse('resource_delete',
            args=[self.project.slug, self.resource.slug])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if user is able to access resource details
        page_url = reverse('resource_detail',
            args=[self.project.slug, self.resource.slug])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check if user is able to access resource edit
        page_url = reverse('resource_edit',
            args=[self.project.slug, self.resource.slug])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check the popup
        page_url = reverse('resource_actions',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check the ajax view which returns more resources in project detail page.
        resp = self.client['registered'].post(reverse('project_resources',
            args=[self.project.slug, 5]))
        self.assertEqual(resp.status_code, 200)
        resp = self.client['registered'].post(reverse('project_resources_more',
            args=[self.project.slug, 5]))
        self.assertEqual(resp.status_code, 200)

        # Check clone language perms
        page_url = reverse('clone_translate',
            args=[self.project.slug, self.resource.slug, self.language_en.code,
                  self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check 'lock and get translation file' perms
        page_url = reverse('lock_and_download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check download file perms
        page_url = reverse('download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 302)

        # PRIVATE PROJECT CHECKS
        # Delete Translations
        page_url = reverse('resource_translations_delete',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if resource gets deleted successfully
        page_url = reverse('resource_delete',
            args=[self.project_private.slug, self.resource_private.slug])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if user is able to access resource details
        page_url = reverse('resource_detail',
            args=[self.project_private.slug, self.resource_private.slug])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if user is able to access resource edit
        page_url = reverse('resource_edit',
            args=[self.project_private.slug, self.resource_private.slug])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check the popup
        page_url = reverse('resource_actions',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language_ar.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check the ajax view which returns more resources in project detail page.
        resp = self.client['registered'].post(reverse('project_resources',
            args=[self.project_private.slug, 5]))
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(reverse('project_resources_more',
            args=[self.project_private.slug, 5]))
        self.assertEqual(resp.status_code, 403)

        # Check clone language perms
        page_url = reverse('clone_translate',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language_en.code,
                  self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check 'lock and get translation file' perms
        page_url = reverse('lock_and_download_for_translation',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check download file perms
        page_url = reverse('download_for_translation',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['registered'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['registered'].post(page_url)
        self.assertEqual(resp.status_code, 403)


    def test_team_member(self):
        """
        Test team_member permissions
        """
        # Delete Translations
        page_url = reverse('resource_translations_delete',
            args=[self.project.slug, self.resource.slug,self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if resource gets deleted
        page_url = reverse('resource_delete',
            args=[self.project.slug, self.resource.slug])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if user is able to access resource details
        page_url = reverse('resource_detail',
                           args=[self.project.slug, self.resource.slug])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check if user is able to access resource edit
        page_url = reverse('resource_edit',
                           args=[self.project.slug, self.resource.slug])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check the popup
        page_url = reverse('resource_actions',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check the ajax view which returns more resources in project detail page.
        resp = self.client['team_member'].post(reverse('project_resources',
            args=[self.project.slug, 5]))
        self.assertEqual(resp.status_code, 200)
        resp = self.client['team_member'].post(reverse('project_resources_more',
            args=[self.project.slug, 5]))
        self.assertEqual(resp.status_code, 200)

        # Check clone language perms
        page_url = reverse('clone_translate',
            args=[self.project.slug, self.resource.slug, self.language_en.code,
                  self.language.code])
        resp = self.client['team_member'].get(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['team_member'].post(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)
        # Check cloning to a non team-member language
        page_url = reverse('clone_translate',
            args=[self.project.slug, self.resource.slug, self.language_en.code,
                  self.language_ar.code])
        resp = self.client['team_member'].get(page_url ,follow=True)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['team_member'].post(page_url ,follow=True)
        self.assertEqual(resp.status_code, 403)

        # Check lock and get translation file perms for resource not accepting
        # translations.
        self.resource.accept_translations = False
        self.resource.save()
        page_url = reverse('lock_and_download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 403)
        self.resource.accept_translations = True
        self.resource.save()

        # Check lock and get translation file perms
        page_url = reverse('lock_and_download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check download file perms
        page_url = reverse('download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 302)

        # PRIVATE PROJECT CHECKS
        # Delete Translations
        page_url = reverse('resource_translations_delete',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if resource gets deleted
        page_url = reverse('resource_delete',
            args=[self.project_private.slug, self.resource_private.slug])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check if user is able to access resource details
        page_url = reverse('resource_detail',
                           args=[self.project_private.slug,
                                 self.resource_private.slug])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check if user is able to access resource edit
        page_url = reverse('resource_edit',
                           args=[self.project_private.slug,
                                 self.resource_private.slug])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 403)

        # Check the popup
        page_url = reverse('resource_actions',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check the ajax view which returns more resources in project detail page.
        resp = self.client['team_member'].post(reverse('project_resources',
            args=[self.project_private.slug, 5]))
        self.assertEqual(resp.status_code, 200)
        resp = self.client['team_member'].post(reverse('project_resources_more',
            args=[self.project_private.slug, 5]))
        self.assertEqual(resp.status_code, 200)

        # Check clone language perms
        page_url = reverse('clone_translate',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language_en.code, self.language.code])
        resp = self.client['team_member'].get(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['team_member'].post(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)
        # Check cloning to a non team-member language
        page_url = reverse('clone_translate',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language_en.code, self.language_ar.code])
        resp = self.client['team_member'].get(page_url ,follow=True)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['team_member'].post(page_url ,follow=True)
        self.assertEqual(resp.status_code, 403)

        # Check lock and get translation file perms
        page_url = reverse('lock_and_download_for_translation',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check download file perms
        page_url = reverse('download_for_translation',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['team_member'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        resp = self.client['team_member'].post(page_url)
        self.assertEqual(resp.status_code, 302)


    def test_maintainer(self):
        """
        Test maintainer permissions
        """
        # Check if user is able to access resource details
        page_url = reverse('resource_detail',
                           args=[self.project.slug, self.resource.slug])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check if user is able to access resource edit
        page_url = reverse('resource_edit',
                           args=[self.project.slug, self.resource.slug])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url, follow=True)
        self.assertEqual(resp.status_code, 200)

        # Check the popup
        page_url = reverse('resource_actions',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check the ajax view which returns more resources in project detail page.
        resp = self.client['maintainer'].post(reverse('project_resources',
            args=[self.project.slug, 5]))
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(reverse('project_resources_more',
            args=[self.project.slug, 5]))
        self.assertEqual(resp.status_code, 200)

        # Check clone language perms
        page_url = reverse('clone_translate',
            args=[self.project.slug, self.resource.slug, self.language_en.code,
                  self.language.code])
        resp = self.client['maintainer'].get(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)

        # Check lock and get translation file perms for resource not accepting
        # translations.
        self.resource.accept_translations = False
        self.resource.save()
        page_url = reverse('lock_and_download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 403)
        resp = self.client['maintainer'].post(page_url)
        self.assertEqual(resp.status_code, 403)
        self.resource.accept_translations = True
        self.resource.save()

        # Check lock and get translation file perms
        page_url = reverse('lock_and_download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check download file perms
        page_url = reverse('download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        resp = self.client['maintainer'].post(page_url)
        self.assertEqual(resp.status_code, 302)

        # Delete Translations
        page_url = reverse('resource_translations_delete',
                           args=[self.project.slug,
                                 self.resource.slug,self.language.code])
        resp = self.client['maintainer'].get(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)

        # Check if resource gets deleted successfully
        page_url = reverse('resource_delete',
                           args=[self.project.slug, self.resource.slug])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        resp = self.client['maintainer'].post(page_url,follow=True)
        self.assertEqual(resp.status_code, 200)

        # PRIVATE PROJECT CHECKS
        # Check if user is able to access resource details
        page_url = reverse('resource_detail',
                           args=[self.project_private.slug,
                                 self.resource_private.slug])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check if user is able to access resource edit
        page_url = reverse('resource_edit',
                           args=[self.project_private.slug,
                                 self.resource_private.slug])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url, follow=True)
        self.assertEqual(resp.status_code, 200)

        # Check the popup
        page_url = reverse('resource_actions',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check the ajax view which returns more resources in project detail page.
        resp = self.client['maintainer'].post(reverse('project_resources',
            args=[self.project_private.slug, 5]))
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(reverse('project_resources_more',
            args=[self.project_private.slug, 5]))
        self.assertEqual(resp.status_code, 200)

        # Check clone language perms
        page_url = reverse('clone_translate',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language_en.code, self.language.code])
        resp = self.client['maintainer'].get(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)

        # Check lock and get translation file perms
        page_url = reverse('lock_and_download_for_translation',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url)
        self.assertEqual(resp.status_code, 200)

        # Check download file perms
        page_url = reverse('download_for_translation',
            args=[self.project_private.slug, self.resource_private.slug,
                  self.language.code])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        resp = self.client['maintainer'].post(page_url)
        self.assertEqual(resp.status_code, 302)

        # Delete Translations
        page_url = reverse('resource_translations_delete',
                           args=[self.project_private.slug,
                                 self.resource_private.slug, self.language.code])
        resp = self.client['maintainer'].get(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)
        resp = self.client['maintainer'].post(page_url ,follow=True)
        self.assertEqual(resp.status_code, 200)

        # Check if resource gets deleted successfully
        page_url = reverse('resource_delete',
                           args=[self.project_private.slug,
                                 self.resource_private.slug])
        resp = self.client['maintainer'].get(page_url)
        self.assertEqual(resp.status_code, 302)
        resp = self.client['maintainer'].post(page_url,follow=True)
        self.assertEqual(resp.status_code, 200)

########NEW FILE########
__FILENAME__ = status
# -*- coding: utf-8 -*-
from django.test.client import Client
from transifex.languages.models import Language
from transifex.resources.models import Resource
from transifex.txcommon.tests.base import BaseTestCase


class StatusCodesTest(BaseTestCase):
    """Test that all app URLs return correct status code.

    Moreover, this kind of tests are useful to list down the urls that are
    mounted to the resources app views.
    TODO: Maybe in the future, we need to refactor the tests according to
    request type, e.g. split them to GET and POST sets of URLs.
    """
    # TODO: Fill in the urls

    def setUp(self):
        super(StatusCodesTest, self).setUp()
        self.pages = {
            200: [
                ('/projects/p/%s/resource/%s/' %
                    (self.project.slug, self.resource.slug)),
                ('/projects/p/%s/resource/%s/l/pt_BR/view/' %
                    (self.project.slug, self.resource.slug)),
                ('/projects/p/%s/resources/1' %
                    (self.project.slug,)),
                ('/projects/p/%s/resources/1/more/' %
                    (self.project.slug,)),
                ('/ajax/p/%s/resource/%s/l/pt_BR/actions/' %
                    (self.project.slug, self.resource.slug)),
                ],
            302: [
                ('/projects/p/%s/resource/%s/edit/$' %
                    (self.project.slug, self.resource.slug)),
                ('/projects/p/%s/resource/%s/delete/$' %
                    (self.project.slug, self.resource.slug)),
                ('/projects/p/%s/resource/%s/l/pt_BR/download/for_use/' %
                    (self.project.slug, self.resource.slug)),
                ('/ajax/p/%s/resource/%s/l/pt_BR/download/lock/' %
                    (self.project.slug, self.resource.slug)),
                ],
            403: [
                ('/projects/p/%s/resource/%s/l/pt_BR/delete_all/' %
                    (self.project.slug, self.resource.slug)),
                ],
            404: [
                'projects/p/f00/resource/b4r/',
                ]}

    def testStatusCode(self):
        """Test that the response status code is correct"""

        client = Client()
        for expected_code, pages in self.pages.items():
            for page_url in pages:
                page = client.get(page_url)
                self.assertEquals(page.status_code, expected_code,
                    "Status code for page '%s' was %s instead of %s" %
                    (page_url, page.status_code, expected_code))

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
import os
from django.utils import simplejson
from django.core.urlresolvers import reverse
from django.core import serializers
from django.test.client import Client
from django.utils import simplejson as json
from transifex.languages.models import Language
from transifex.resources.models import Resource, Translation, Template, \
        SourceEntity
from transifex.txcommon.tests import base, utils

class CoreViewsTest(base.BaseTestCase):
    """Test basic view function"""

    def test_resource_details(self):
        """
        Test resource details of a resource.
        """

        # Check details page
        resp = self.client['maintainer'].get(self.urls['resource'])
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'resources/resource_detail.html')
        # Test if RLStats was created automatically
        self.assertTrue(self.team.language.name.encode('utf-8') in resp.content)

        # response.context[-1] holds our extra_context. maybe we should check
        # some of these to make sure they're there?

    def test_resource_delete(self):
        """
        Test resource delete view.
        """

        slug=self.resource.slug
        # Check if resource gets deleted successfully
        resp = self.client['maintainer'].post(reverse('resource_delete',
            args=[self.project.slug, self.resource.slug]))
        self.assertEqual(resp.status_code, 302)
        self.assertEqual(Resource.objects.filter(slug=slug,
            project__slug=self.project.slug).count(), 0)

    def test_resource_actions(self):
        """
        Test AJAX resource actions.
        """
        url = self.urls['resource_actions']

        # Test response for maintainer
        resp = self.client['maintainer'].get(url)
        self.assertEqual(resp.status_code, 200)
        self.assertContains(resp, "Translate now")
        self.assertTemplateUsed(resp, 'resources/resource_actions.html')

        url_lock = reverse('resource_language_lock', args=[self.project.slug, self.resource.slug, self.language.code])

        # Test response for registered user WITHOUT lock
        resp = self.client['registered'].get(url)
        self.assertContains(resp, "This translation isn't locked")
        self.assertContains(resp, "Translate now")

        # Test response for team_member WITHOUT lock
        resp = self.client['team_member'].get(url)
        self.assertContains(resp, "Lock this translation to notify others")
        self.assertContains(resp, "Translate now")

        # Test response for team_member WITH lock
        resp = self.client['team_member'].post(url_lock)
        resp = self.client['team_member'].get(url)
        self.assertContains(resp, "Translate now")

        # Test response for team_coordinator WITH resource locked by someone else
        resp = self.client['team_coordinator'].get(url)
        self.assertContains(resp, "This resource is currently locked by")

        # Test response for registered user  WITH resource locked by someone else
        resp = self.client['registered'].get(url)
        self.assertContains(resp, "you need to be logged in and a member")

    #def test_resource_file_upload(self):
    #    raise NotImplementedError

    #def test_resource_file_download(self):
    #    """Test that downloading a reosurce with a template file works."""
    #    # We first need a test that creates a resource with a template.
    #    raise NotImplementedError
    #    resp = self.client['registered'].get(
    #        reverse('download_for_translation',
    #        args=[self.project.slug, self.resource.slug, self.language.code]), follow=True)
    #    self.assertEqual(resp.status_code, 200)
    #    self.assertTrue('project1_resource1.po' in resp['Content-Disposition'])


    def test_project_resources(self):
        """
        Test view that fetches project resources
        """

        resp = self.client['maintainer'].get(reverse('project_resources',
            args=[self.project.slug, 0]))
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'resources/resource_list_more.html')
        for r in Resource.objects.filter(project=self.project)[0:4]:
            self.assertTrue(r.name in resp.content)

    def test_clone_language(self):
        url = reverse(
            'clone_translate', args=[
                self.project.slug, self.resource.slug, self.language_ar.code,
                self.language.code
            ])
        resp = self.client['maintainer'].post(url, follow=True)
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(
            [i.string for i in Translation.objects.filter(
                    source_entity__resource=self.resource, language=self.language_ar
            )],
            [i.string for i in Translation.objects.filter(
                    source_entity__resource=self.resource, language=self.language
            )]
        )

    def test_push_translation(self):
        """
        Test translation push view.
        """
        # Create primary language translation. This is needed to push
        # additional translations
        source_trans = Translation(
            source_entity=self.source_entity,
            language = self.language,
            string="foobar",
            resource=self.resource
        )
        source_trans.save()

        trans_lang = 'el'
        trans = "foo"
        new_trans = "foo2"
        # Create new translation
        # FIXME: Test plurals
        resp = self.client['maintainer'].post(reverse('push_translation',
            args=[self.project.slug, trans_lang]),
            json.dumps({'strings':[{'id':source_trans.id,'translations':{'other':trans}}]}),
            content_type='application/json' )
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(Translation.objects.filter(source_entity__resource=self.resource,
            language__code = trans_lang, string=trans).count(), 1)

        # Update existing translation
        resp = self.client['maintainer'].post(reverse('push_translation',
            args=[self.project.slug, trans_lang]),
            json.dumps({'strings':[{'id': source_trans.id,
                'translations':{'other':new_trans}}]}),
            content_type='application/json')
        self.assertEqual(resp.status_code, 200)
        translations = Translation.objects.filter(source_entity__resource=self.resource,
            language__code = trans_lang, string=new_trans)
        self.assertEqual(translations.count(), 1)

        source_trans.delete()
        translations.delete()


    def test_delete_resource_translations(self):
        """
        Test resource translation deletion
        """
        # Create primary language translation. This is needed to push
        # additional translations
        source_trans = Translation(
            source_entity=self.source_entity, language=self.language,
            string="foobar", resource=self.resource
        )
        source_trans.save()

        trans_lang = 'el'
        trans = "foo"
        # Create new translation
        resp = self.client['maintainer'].post(reverse('push_translation',
            args=[self.project.slug, trans_lang]),
            json.dumps({'strings':[{'id':source_trans.id,
                'translations': { 'other': trans}}]}),
            content_type='application/json')
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(Translation.objects.filter(source_entity__resource=self.resource,
            language__code = trans_lang, string =trans).count(), 1)

        # Delete Translations
        # Delete source language translations
        delete_url = reverse('resource_translations_delete',
            args=[self.project.slug, self.resource.slug,self.language.code])
        resp = self.client['maintainer'].get(delete_url)
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'resources/resource_translations_confirm_delete.html')

        resp = self.client['maintainer'].post(delete_url, follow=True)
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'resources/resource_detail.html')
        self.assertEqual(Translation.objects.filter(source_entity__resource=self.resource,
            language = self.language).count(), 0)

        # Delete target language translations
        delete_url_el = reverse('resource_translations_delete',
            args=[self.project.slug, self.resource.slug, trans_lang])
        resp = self.client['maintainer'].get(delete_url_el)
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'resources/resource_translations_confirm_delete.html')

        resp = self.client['maintainer'].post(delete_url_el, follow=True)
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'resources/resource_detail.html')
        self.assertEqual(Translation.objects.filter(source_entity__resource=self.resource,
            language__code = trans_lang).count(), 0)

    def test_resource_edit(self, file_handler=None, bad=False):
        """Test editing a resource"""
        if file_handler:
            fh = file_handler
        else:
            fh = open('%s/../lib/pofile/tests.pot'% os.path.split(__file__)[0],)
        url = reverse('resource_edit', args=[self.project.slug, self.resource.slug])
        DATA = {'slug':'resource1', 'name':'Resource1', 'accept_translations':'on', 'sourcefile':fh, 'source_file_url':'',}
        resp = self.client['maintainer'].post(url, DATA, follow=True)
        if file_handler:
            return resp
        else:
            self.assertEqual(resp.status_code, 200)

    def test_get_pot_file(self):
        """Test retrieval of pot files"""
        self.test_resource_edit()
        url = reverse('download_pot', args=[self.project.slug, self.resource.slug])
        resp = self.client['registered'].get(url, follow=True)
        self.assertContains(resp, 'msgid', status_code=200)

    def test_get_translation_file(self):
        """Test download of a translation file"""
        self.test_resource_edit()
        url = reverse('download_for_translation', args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['maintainer'].post(url)
        self.assertEqual(resp.status_code, 200)
        self.assertTrue('project1_resource1_pt_BR.po' in resp['Content-Disposition'])

    def test_lock_and_get_translation_file(self):
        """Test lock and get translation file"""
        self.test_resource_edit()
        url = reverse('lock_and_download_for_translation',
            args=[self.project.slug, self.resource.slug, self.language.code])
        resp = self.client['maintainer'].post(url)
        self.assertEqual(resp.status_code, 200)
        json = simplejson.loads(resp.content)
        self.assertEqual(json['status'], 'OK')
        self.assertEqual(
            json['redirect'],
            '/projects/p/%s/resource/%s/l/%s/download/for_translation/'
            %(self.project.slug, self.resource.slug, self.language.code)
        )

    def test_different_resource_formats(self):
        """Test creation of resource with different source file formats"""
        #javaproperties
        fh = open('%s/../lib/javaproperties/complex.properties'%os.path.split(__file__)[0],)
        self.resource.i18n_method = 'PROPERTIES'
        self.resource.save()
        resp = self.test_resource_edit(fh)
        self.assertTemplateUsed(resp, 'resources/resource_detail.html')
        self.assertEqual(SourceEntity.objects.filter(resource=self.resource).count(), 25)

        #Qt
        fh = open('%s/../lib/qt/en.ts'%os.path.split(__file__)[0],)
        self.resource.i18n_method = 'QT'
        self.resource.save()
        resp = self.test_resource_edit(fh)
        self.assertTemplateUsed(resp, 'resources/resource_detail.html')
        self.assertEqual(SourceEntity.objects.filter(resource=self.resource).count(), 43)

        #Joomla
        fh = open('%s/../lib/joomla_ini/example1.5.ini'%os.path.split(__file__)[0],)
        self.resource.i18n_method = 'INI'
        self.resource.save()
        resp = self.test_resource_edit(fh)
        self.assertTemplateUsed(resp, 'resources/resource_detail.html')
        self.assertEqual(SourceEntity.objects.filter(resource=self.resource).count(), 1)

        #Desktop
        fh = open('%s/../lib/desktop/data/okular.desktop'%os.path.split(__file__)[0],)
        self.resource.i18n_method = 'DESKTOP'
        self.resource.save()
        resp = self.test_resource_edit(fh)
        self.assertTemplateUsed(resp, 'resources/resource_detail.html')
        self.assertEqual(SourceEntity.objects.filter(resource=self.resource).count(), 2)


        #bad file
        fh = open('%s/../lib/pofile/wrong.pot'%os.path.split(__file__)[0],)
        self.resource.i18n_method = 'POT'
        self.resource.save()
        resp = self.test_resource_edit(fh)
        self.assertContains(resp, 'Syntax error in po file', status_code=200)
        #Since source entities will not be updated
        self.assertEqual(SourceEntity.objects.filter(resource=self.resource).count(), 2)
        self.resource.i18n_method = 'PO'
        self.resource.save()


class ResourceAutofetchTests(base.BaseTestCase):

    def setUp(self, *args, **kwargs):
        super(ResourceAutofetchTests, self).setUp(*args, **kwargs)
        self.SFILE = "https://raw.github.com/transifex/transifex/devel/transifex/locale/en/LC_MESSAGES/djangojs.po"
        self.url_edit =  reverse('resource_edit', args=[self.project.slug, self.resource.slug])


    def test_save_form_url(self):
        """Test that saving the form creates the source URL."""
        resp = self.client['maintainer'].post(self.url_edit, {
            'source_file_url': self.SFILE, 'auto_update': 'on',
            'sourcefile': '', 'accept_translations': 'on',
            'slug': self.resource.slug, 'name': self.resource.name, })
        self.assertEquals(self.resource.url_info.source_file_url, self.SFILE)
        resp = self.client['maintainer'].get(self.url_edit)
        self.assertContains(resp, self.SFILE)

    def test_save_form_remove_url(self):
        """Test that saving the form without a source file URL removes it."""

        # First create the source file...
        self.test_save_form_url()

        # Then try to remove it.
        resp = self.client['maintainer'].post(self.url_edit,
            {'source_file_url': '', 'sourcefile': '',
             'accept_translations': 'on', 'slug': self.resource.slug,
             'name': self.resource.name, })
        resp = self.client['maintainer'].get(self.url_edit)
        self.assertNotContains(resp, self.SFILE)
        resp = self.client['anonymous'].get(self.urls['resource'])
        self.assertNotContains(resp, self.SFILE)


    def test_save_form_url_nourl(self):
        """Test that autofetch without url does not work."""
        resp = self.client['maintainer'].post(self.url_edit,
            {'source_file_url': '', 'auto_update': 'on', 'sourcefile': '',
             'accept_translations': 'on', 'slug': self.resource.slug,
             'name': self.resource.name, })
        self.assertContains(resp, "You have checked the auto update checkbox")



class ReleasesViewsTest(base.BaseTestCase):

    def setUp(self, *args, **kwargs):
        super(ReleasesViewsTest, self).setUp(*args, **kwargs)
        self.release = self.project.releases.create(slug='release1', name='Release1')
        self.release.resources.add(self.resource)

    def test_release_detail_page(self):
        resp = self.client['registered'].get(self.urls['release'])
        self.assertContains(resp, "This release has 1 resource", status_code=200)

        # FIXME: Check if the correct language appears in the table.
        self.assertContains(resp, "Portuguese", status_code=200)
        #raise NotImplementedError('Test if the table has the correct languages.')


class ResourcesLookupsTests(base.BaseTestCase):

    def test_private_resources_ajax_lookup(self):
        """Test that a private resource isn't present in lookup.

        This AJAX lookup/dropdown is present in the Release Add/Edit form.
        """

        public_project = "Test Project: Resource1"
        private_project = "Test Private Project: Resource1"

        # Test that a private project is not visible to a random user
        self.assertTrue(self.user['registered'] not in self.project_private.maintainers.all())
        resp = self.client['registered'].get('/ajax/ajax_lookup/resources', {'q': 'r', 'limit': '150', })
        self.assertContains(resp, public_project, status_code=200)
        self.assertNotContains(resp, private_project, status_code=200)

        # Test that a private project is visible to its maintainer
        self.assertTrue(self.user['maintainer'] in self.project_private.maintainers.all())
        resp = self.client['maintainer'].get('/ajax/ajax_lookup/resources', {'q': 'r', 'limit': '150', })
        self.assertContains(resp, public_project, status_code=200)
        self.assertContains(resp, private_project, status_code=200)

        # Test that a private project is visible to a member of its teams
        self.assertTrue(self.user['team_member'] in self.team_private.members.all())
        self.assertFalse(self.user['team_member'] in self.project_private.maintainers.all())
        resp = self.client['team_member'].get('/ajax/ajax_lookup/resources', {'q': 'r', 'limit': '150', })
        self.assertContains(resp, public_project, status_code=200)
        self.assertContains(resp, private_project, status_code=200)


########NEW FILE########
__FILENAME__ = ajax
# -*- coding: utf-8 -*-
from django.conf.urls.defaults import *
from transifex.resources.urls import RESOURCE_URL_PARTIAL, RESOURCE_LANG_URL_PARTIAL
from transifex.resources.views import resource_actions, update_translation, \
    lock_and_get_translation_file, resource_pseudo_translation_actions

urlpatterns = patterns('',
    url(RESOURCE_URL_PARTIAL + r'l/(?P<target_lang_code>[\-_@\w\.]+)/actions/$',
        resource_actions, name='resource_actions'),
    url(RESOURCE_LANG_URL_PARTIAL + r'update/$',
        update_translation, name='update_translation'),
    url(RESOURCE_URL_PARTIAL + r'add_translation/$',
        update_translation, name='add_translation'),
    url(RESOURCE_LANG_URL_PARTIAL+'download/lock/$',
        lock_and_get_translation_file, name='lock_and_download_for_translation'),
    url(RESOURCE_URL_PARTIAL + r'pseudo_translation_actions/$',
        resource_pseudo_translation_actions, name='pseudo_translation_actions'),
)

########NEW FILE########
__FILENAME__ = utils
# -*- coding: utf-8 -*-
from django.conf import settings
from django.core.cache import cache
from django.utils.hashcompat import md5_constructor
from django.utils.http import urlquote


def invalidate_template_cache(fragment_name, *variables):
    """
    This function invalidates a template cache named `fragment_name` and with
    variables which are included in *variables. For example:

    {% cache 500 project_details project.slug %}
        ...
    {% endcache %}

    We invalidate this by calling:
     -  invalidate_template_cache("project_details", project.slug)
    """
    for lang,code in settings.LANGUAGES:
        cur_vars = list(variables)
        cur_vars.append(unicode(lang))
        args = md5_constructor(u':'.join([urlquote(var) for var in cur_vars]))
        cache_key = 'template.cache.%s.%s' % (fragment_name, args.hexdigest())
        cache.delete(cache_key)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from __future__ import absolute_import
from django.conf import settings
from django.core.urlresolvers import reverse
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.dispatch import Signal
from django.core.exceptions import ObjectDoesNotExist
from django.db import transaction
from django.db.models import Count, Q, get_model, F
from django.http import (HttpResponseRedirect, HttpResponse, Http404,
                         HttpResponseForbidden, HttpResponseBadRequest)
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils import simplejson
from django.utils.encoding import smart_unicode
from django.utils.translation import ugettext as _
from django.forms.util import ErrorList

from authority.views import permission_denied

from actionlog.models import action_logging
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.projects.permissions import *
from transifex.projects.permissions.project import ProjectPermission
from transifex.projects.signals import post_resource_delete
from transifex.teams.models import Team
from transifex.txcommon.decorators import one_perm_required_or_403
from transifex.txcommon.log import logger

from transifex.resources.forms import ResourceForm, ResourcePseudoTranslationForm
from transifex.resources.models import Translation, Resource, RLStats
from transifex.resources.handlers import (invalidate_object_templates,
    invalidate_stats_cache)
from transifex.resources.formats.registry import registry
from transifex.resources.backends import FormatsBackend, FormatsBackendError, \
        content_from_uploaded_file
from autofetch.forms import URLInfoForm
from autofetch.models import URLInfo
from .tasks import send_notices_for_resource_edited

Lock = get_model('locks', 'Lock')

# Restrict access only for private projects
# Allow even anonymous access on public projects
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def resource_detail(request, project_slug, resource_slug):
    """
    Return the details overview of a project resource.
    """
    resource = get_object_or_404(Resource.objects.select_related(),
        project__slug=project_slug, slug=resource_slug)

    try:
        autofetch_url = resource.url_info
    except ObjectDoesNotExist:
        autofetch_url = None

    statslist_src = RLStats.objects.select_related('language', 'last_committer',
        'lock','resource').by_resource(resource).filter(
            language = F('resource__source_language'))
    statslist = RLStats.objects.select_related('language', 'last_committer',
        'lock','resource').by_resource(resource).exclude(
            language = F('resource__source_language'))

    tmp = []
    for i in statslist_src:
        tmp.append(i)
    for i in statslist:
        tmp.append(i)
    statslist = tmp

    return render_to_response("resources/resource_detail.html", {
        'project': resource.project,
        'resource': resource,
        'autofetch_url': autofetch_url,
        'languages': Language.objects.order_by('name'),
        'statslist': statslist
    }, context_instance = RequestContext(request))


@one_perm_required_or_403(pr_resource_delete,
                          (Project, "slug__exact", "project_slug"))
def resource_delete(request, project_slug, resource_slug):
    """
    Delete a Translation Resource in a specific project.
    """
    resource = get_object_or_404(Resource, project__slug=project_slug,
        slug=resource_slug)

    if request.method == 'POST':
        import copy
        resource_ = copy.copy(resource)
        resource.delete()

        # Signal for logging
        post_resource_delete.send(sender=None, instance=resource_,
            user=request.user)

        messages.success(request,
            _("The translation resource '%s' was deleted.") % resource_.name)

        return HttpResponseRedirect(reverse('project_detail',
                                    args=[resource.project.slug]),)
    else:
        return HttpResponseRedirect(reverse('resource_edit',
            args=[resource.project.slug, resource.slug]))


@one_perm_required_or_403(pr_resource_add_change,
                          (Project, "slug__exact", "project_slug"))
def resource_edit(request, project_slug, resource_slug):
    """
    Edit the metadata of  a Translation Resource in a specific project.
    """
    resource = get_object_or_404(Resource, project__slug = project_slug,
                                  slug = resource_slug)
    try:
        urlinfo = URLInfo.objects.get(resource = resource)
    except URLInfo.DoesNotExist:
        urlinfo = None

    if request.method == 'POST':
        resource_form = ResourceForm(request.POST, request.FILES, instance=resource)
        if urlinfo:
            url_form = URLInfoForm(request.POST, instance=urlinfo,)
        else:
            url_form = URLInfoForm(request.POST,)
        if resource_form.is_valid() and url_form.is_valid():
            try:
                resource = resource_form.save(commit=False)
                if resource_form.cleaned_data['sourcefile'] is not None:
                    method = resource.i18n_method
                    content = content_from_uploaded_file(
                        {0: resource_form.cleaned_data['sourcefile'], }
                    )
                    filename = resource_form.cleaned_data['sourcefile'].name
                    save_source_file(
                        resource, request.user, content, method, filename
                    )

                urlinfo = url_form.save(commit=False)
                resource_new = resource_form.save()
                resource_new.save()
                urlinfo.resource = resource_new
                invalidate_object_templates(resource_new,
                    resource_new.source_language)
                if urlinfo.source_file_url:
                    try:
                        urlinfo.update_source_file(fake=True)
                    except Exception, e:
                        url_form._errors['source_file_url'] = _("The URL you provided"
                            " doesn't link to a valid file.")
                        return render_to_response('resources/resource_form.html', {
                            'resource_form': resource_form,
                            'url_form': url_form,
                            'resource': resource,
                        }, context_instance=RequestContext(request))
                    # If we got a URL, save the model instance
                    urlinfo.save()
                else:
                    if urlinfo.auto_update:
                        url_form._errors['source_file_url'] = _("You have checked"
                            " the auto update checkbox but you haven't provided a"
                            " valid url.")
                        return render_to_response('resources/resource_form.html', {
                            'resource_form': resource_form,
                            'url_form': url_form,
                            'resource': resource,
                        }, context_instance=RequestContext(request))
                    else:
                        if urlinfo.id:
                            urlinfo.delete()

                send_notices_for_resource_edited.delay(
                    resource_new, request.user
                )

                return HttpResponseRedirect(reverse('resource_detail',
                    args=[resource.project.slug, resource.slug]))
            except FormatsBackendError, e:
                resource_form._errors['sourcefile'] = ErrorList([unicode(e), ])
    else:
        if resource:
            initial_data = {}

        if urlinfo:
            url_form = URLInfoForm(instance=urlinfo,)
        else:
            url_form = URLInfoForm()
        resource_form = ResourceForm(instance=resource)

    return render_to_response('resources/resource_form.html', {
        'resource_form': resource_form,
        'url_form': url_form,
        'resource': resource,
    }, context_instance=RequestContext(request))


@transaction.commit_on_success
def save_source_file(resource, user, content, method, filename=None):
    """Save new source file.

    Called by the "edit resource" action.
    """
    fb = FormatsBackend(resource, resource.source_language, user)
    return fb.import_source(content, filename)


@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def resource_actions(request, project_slug=None, resource_slug=None,
                     target_lang_code=None):
    """
    AJAX view for the resource-language popup on the resource details page.
    """
    resource = get_object_or_404(
        Resource.objects.select_related('project'),
        project__slug=project_slug,
        slug=resource_slug
    )
    target_language = get_object_or_404(Language, code=target_lang_code)
    project = resource.project
    # Get the team if exists to use it for permissions and links
    team = Team.objects.get_or_none(project, target_lang_code)

    disabled_languages_ids = RLStats.objects.filter(resource=resource
        ).values_list('language', flat=True).distinct()

    languages = Language.objects.filter()

    lock = Lock.objects.get_valid(resource, target_language)

    # We want the teams to check in which languages user is permitted to translate.
    user_teams = []
    if getattr(request, 'user') and request.user.is_authenticated():
        user_teams = Team.objects.filter(project=resource.project).filter(
            Q(coordinators=request.user)|
            Q(members=request.user)).distinct()

    try:
        stats = RLStats.objects.select_related('lock').get(
            resource=resource, language=target_language)
    except RLStats.DoesNotExist:
        stats = RLStats(
            untranslated=resource.total_entities,
            resource=resource,
            language=target_language
        )

    wordcount = resource.wordcount
    show_reviewed_stats = resource.source_language != target_language

    return render_to_response("resources/resource_actions.html", {
        'project': project,
        'resource': resource,
        'target_language': target_language,
        'team': team,
        'languages': languages,
        'disabled_languages_ids': disabled_languages_ids,
        'lock': lock,
        'user_teams': user_teams,
        'stats': stats,
        'wordcount': wordcount,
        'show_reviewed_stats': show_reviewed_stats,
    }, context_instance = RequestContext(request))


# Restrict access only for private projects
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=False)
def resource_pseudo_translation_actions(request, project_slug=None,
    resource_slug=None):
    """
    Ajax view that returns an fancybox template snippet for resource specific
    pseudo translation file actions.
    """
    resource = get_object_or_404(Resource.objects.select_related('project'),
        project__slug = project_slug, slug = resource_slug)
    project = resource.project

    form = ResourcePseudoTranslationForm()

    return render_to_response("resources/resource_pseudo_translation_actions.html",
        { 'project' : project,
          'resource' : resource,
          'form': form,
        },
        context_instance = RequestContext(request))


# Restrict access only for private projects
# Allow even anonymous access on public projects
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def project_resources(request, project_slug=None, offset=None, **kwargs):
    """
    Ajax view that returns a table snippet for all the resources in a project.

    If offset is provided, then the returned table snippet includes only the
    rows beginning from the offset and on.
    """
    more = kwargs.get('more', False)
    MORE_ENTRIES = 5
    project = get_object_or_404(Project, slug=project_slug)
    total = Resource.objects.filter(project=project).count()
    begin = int(offset)
    end_index = (begin + MORE_ENTRIES)
    resources = Resource.objects.filter(project=project)[begin:]
    # Get the slice :)
    if more and (not end_index >= total):
        resources = resources[begin:end_index]

    statslist = RLStats.objects.by_resources(resources)

    return render_to_response("resources/resource_list_more.html", {
        'project': project,
        'statslist': statslist},
        context_instance = RequestContext(request))


# Restrict access only to : (The checks are done in the view's body)
# 1)those belonging to the specific language team (coordinators or members)
# 2)project maintainers
# 3)global submitters (perms given through access control tab)
# 4)superusers
@login_required
def clone_language(request, project_slug=None, resource_slug=None,
            source_lang_code=None, target_lang_code=None):
    '''
    Get a resource, a src lang and a target lang and clone all translation
    strings for the src to the target.

    The user is redirected to the online editor for the target language.
    '''

    resource = get_object_or_404(Resource, slug=resource_slug,
                                 project__slug=project_slug)

    # Permissions handling
    # Project should always be available
    project = get_object_or_404(Project, slug=project_slug)
    team = Team.objects.get_or_none(project, target_lang_code)
    check = ProjectPermission(request.user)
    if not check.submit_translations(team or project) or not \
        resource.accept_translations:
        return permission_denied(request)

    source_lang = get_object_or_404(Language, code=source_lang_code)
    target_lang = get_object_or_404(Language, code=target_lang_code)

    # get the strings which will be cloned
    strings = Translation.objects.filter(
                resource = resource,
                language = source_lang)

    # If the language we want to create, has the same plural rules with the
    # source, we also copy the pluralized translations!
    if not source_lang.get_pluralrules() == target_lang.get_pluralrules():
        strings = strings.exclude(source_entity__pluralized = True)

    # clone them in new translation
    for s in strings:
        Translation.objects.get_or_create(
            language=target_lang, string=s.string,
            source_entity=s.source_entity, rule=s.rule,
            resource=s.resource
        )

    invalidate_stats_cache(resource, target_lang, user=request.user)
    return HttpResponseRedirect(reverse('translate_resource', args=[project_slug,
                                resource_slug, target_lang_code]),)


# Restrict access only to maintainers of the projects.
@one_perm_required_or_403(pr_resource_translations_delete,
                          (Project, "slug__exact", "project_slug"))
def resource_translations_delete(request, project_slug, resource_slug, lang_code):
    """
    Delete the set of Translation objects for a specific Language in a Resource.
    """
    resource = get_object_or_404(Resource, project__slug = project_slug,
                                 slug = resource_slug)

    language = get_object_or_404(Language, code=lang_code)

    # Use a flag to denote if there is an attempt to delete the source language.
    is_source_language = False
    if resource.source_language == language:
        is_source_language = True

    if request.method == 'POST':
        Translation.objects.filter(resource=resource,
            language=language).delete()

        messages.success(request,
                        _("Deleted %(lang)s translation for resource "
                        "%(resource)s.") % {
                          'lang': language.name,
                          'resource': resource.name})
        invalidate_stats_cache(resource, language, user=request.user)
        return HttpResponseRedirect(reverse('resource_detail',
                                    args=[resource.project.slug, resource.slug]),)
    else:
        return render_to_response(
            'resources/resource_translations_confirm_delete.html',
            {'resource': resource,
             'language': language,
             'is_source_language': is_source_language},
            context_instance=RequestContext(request))


# Restrict access only for private projects
# DONT allow anonymous access
@login_required
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'))
def get_translation_file(request, project_slug, resource_slug, lang_code,
    **kwargs):
    """
    View to export all translations of a resource for the requested language
    and give the translation file back to the user.
    """
    resource = get_object_or_404(Resource, project__slug = project_slug,
        slug = resource_slug)

    language = get_object_or_404(Language, code=lang_code)

    try:
        fb = FormatsBackend(resource, language)
        template = fb.compile_translation(**kwargs)
    except Exception, e:
        messages.error(request, "Error compiling translation file.")
        logger.error("Error compiling '%s' file for '%s': %s" % (language,
            resource, str(e)))
        return HttpResponseRedirect(reverse('resource_detail',
            args=[resource.project.slug, resource.slug]),)

    response = HttpResponse(
        template, mimetype=registry.mimetypes_for(resource.i18n_method)[0]
    )
    _filename = "%(proj)s_%(res)s_%(lang)s%(type)s" % {
        'proj': smart_unicode(resource.project.slug),
        'res': smart_unicode(resource.slug),
        'lang': language.code,
        'type': registry.file_extension_for(resource, language)
    }

    # Prefix filename with mode, case it exists
    if kwargs.has_key('mode'):
        _filename = "%s_" % kwargs.get('mode').label + _filename

    response['Content-Disposition'] = ('attachment; filename=%s' % _filename)
    return response


# Restrict access only for private projects
# DONT allow anonymous access
@login_required
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'))
def get_pot_file(request, project_slug, resource_slug):
    """
    View to download the pot file of the resource.
    """
    resource = get_object_or_404(
        Resource, project__slug=project_slug, slug=resource_slug
    )
    try:
        fb = FormatsBackend(resource, None)
        template = fb.compile_translation()
    except Exception, e:
        messages.error(request, _("Error compiling the pot file."))
        logger.error(
            "Error compiling the pot file for %s: %s" % (resource, e)
        )
        return HttpResponseRedirect(reverse(
                'resource_detail', args=[resource.project.slug, resource.slug]
        ))
    response = HttpResponse(
        template, mimetype=registry.mimetypes_for(resource.i18n_method)[0]
    )
    _filename = "%(proj)s_%(res)s.pot" % {
        'proj': smart_unicode(resource.project.slug),
        'res': smart_unicode(resource.slug),
    }
    response['Content-Disposition'] = ('attachment; filename=%s' % _filename)
    return response


# Restrict access only to : (The checks are done in the view's body)
# 1)those belonging to the specific language team (coordinators or members)
# 2)project maintainers
# 3)global submitters (perms given through access control tab)
# 4)superusers
@login_required
def lock_and_get_translation_file(request, project_slug, resource_slug, lang_code):
    """
    Lock and download the translations file.

    View to lock a resource for the requested language and as a second step to
    download (export+download) the translations in a formatted file.
    """

    resource = get_object_or_404(Resource, project__slug = project_slug,
        slug = resource_slug)

    # Permissions handling
    # Project should always be available
    project = get_object_or_404(Project, slug=project_slug)
    team = Team.objects.get_or_none(project, lang_code)
    check = ProjectPermission(request.user)
    if not check.submit_translations(team or project) or not \
        resource.accept_translations:
        return permission_denied(request)

    language = get_object_or_404(Language, code=lang_code)
    lock = Lock.objects.get_valid(resource, language)
    can_lock = Lock.can_lock(resource, language, request.user)
    response = {}

    if not can_lock:
        #print_gray_text(You cannot assign this file to you)
        response['status'] = "FAILED"
        response['message'] = _("Sorry, you cannot lock this file!")
    else:
        # User can lock
        if not lock:
            try:
                # Lock the resource now
                Lock.objects.create_update(resource, language, request.user)
                response['status'] = 'OK'
                response['redirect'] = reverse('download_for_translation',
                    args=[resource.project.slug, resource.slug, lang_code])
            except:
                response['status'] = "FAILED"
                response['message'] = _("Failed to lock the resource!")
        else:
            if lock.owner == request.user:
                try:
                    # File already locked by me, so extend the lock period.
                    Lock.objects.create_update(resource, language, request.user)
                    response['status'] = 'OK'
                    response['redirect'] = reverse('download_for_translation',
                        args=[resource.project.slug, resource.slug, lang_code])
                except:
                    response['status'] = "FAILED"
                    response['message'] = _("Failed to extend lock period on "
                                            "the resource!")
            else:
                # File locked by someone else:
                response['status'] = "FAILED"
                response['message'] = _("You cannot lock it right now! (Locked "
                                        "by %s )" % (lock.owner,))

    return HttpResponse(simplejson.dumps(response), mimetype='application/json')


@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=False)
def update_translation(request, project_slug, resource_slug, lang_code=None):
    """Ajax view that gets an uploaded translation as a file and saves it.

    If the language is not specified, the translation does not exist yet.
    Othewise, this is an update.

    Returns:
        Either an error message, or nothing for success.
    """
    resource = get_object_or_404(
        Resource.objects.select_related('project'),
        project__slug=project_slug, slug=resource_slug
    )
    if lang_code is None:
        lang_code = request.POST.get('language_code', None)
    target_language = get_object_or_404(Language, code=lang_code)
    project = resource.project
    # Get the team if exists to use it for permissions and links
    team = Team.objects.get_or_none(project, lang_code)

    check = ProjectPermission(request.user)
    if (not check.submit_translations(team or resource.project) or\
            not resource.accept_translations) and not\
            check.maintain(resource.project):
        return HttpResponse(
            simplejson.dumps({
                    'msg': _("You are not allowed to upload a translation."),
                    'status': 403,
            }),
            status=403, content_type='text/plain'
        )

    content = content_from_uploaded_file(request.FILES)
    try:
        _save_translation(resource, target_language, request.user, content)
    except FormatsBackendError, e:
        return HttpResponse(
            simplejson.dumps({
                    'msg': unicode(e),
                    'status': 400,
            }),
            status=400, content_type='text/plain'
        )
    return HttpResponse(
        simplejson.dumps({
                'msg': "",
                'status': 200,
        }),
        status=200, content_type='text/plain'
    )


@transaction.commit_on_success
def _save_translation(resource, target_language, user, content):
    """Save a new translation file for the resource."""
    fb = FormatsBackend(resource, target_language, user)
    return fb.import_translation(content)

########NEW FILE########
__FILENAME__ = settings
import os.path
import glob


try:
    TX_ROOT
except NameError:
    TX_ROOT = os.path.dirname(__file__)

conf_files_path = os.path.join(TX_ROOT, 'settings', '*.conf')
conffiles = glob.glob(conf_files_path)
conffiles.sort()

for f in conffiles:
    execfile(os.path.abspath(f))

########NEW FILE########
__FILENAME__ = forms
from django import forms
from django.contrib.auth.forms import AuthenticationForm
from django.utils.translation import ugettext as _

class RememberMeAuthForm(AuthenticationForm):
    """Form for adding an extra 'remember me' field."""
    remember_me = forms.BooleanField(label=_("Remember me"),
    widget=forms.CheckboxInput, required=False)


########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-

########NEW FILE########
__FILENAME__ = urls
"""
Simple URLConf for Django user authentication (no registration).
"""

from django.conf.urls.defaults import *
from django.views.generic.simple import direct_to_template
from django.contrib.auth import views as auth_views
from django.utils.translation import ugettext as _
from transifex.simpleauth.views import login, logout, account_settings, profile_public

urlpatterns = patterns('',
    url(r'^login/$', login, name='login'),
    url(r'^logout/$', logout, name='logout'),
    url(r'^$', account_settings, name='profile_overview'),
    url(r'^profile/(?P<username>.+)/$', profile_public, name='profile_public'),
)

########NEW FILE########
__FILENAME__ = util
from urllib import unquote
from django.conf import settings
from django.http import HttpResponseRedirect, str_to_unicode

DEFAULT_NEXT = getattr(settings, 'DEFAULT_REDIRECT_NEXT', '/')
def clean_next(next):
    """
    Do necessary init and clean to the 'next' variable.

    (Credits to django_authopenid.util)
    """
    if next is None:
        return DEFAULT_NEXT
    next = str_to_unicode(unquote(next), 'utf-8')
    next = next.strip()
    if next.startswith('/'):
        return next
    return DEFAULT_NEXT

########NEW FILE########
__FILENAME__ = views
from django.conf import settings
from django.contrib.auth.models import User
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.decorators import login_required
from django.contrib.auth.views import (logout as auth_logout,
                                       login as auth_login)

from transifex.simpleauth.forms import RememberMeAuthForm
from transifex.simpleauth.util import clean_next


@login_required
def logout(request, template_name='simpleauth/logged_out.html'):
    """Logout the user from the website and redirect back."""
    next = clean_next(request.GET.get('next'))
    auth_logout(request, next_page=next, template_name=template_name)
    return HttpResponseRedirect(next)


def login(request, template_name='simpleauth/signin.html'):
    """Login the user to the website and redirect back."""
    next = clean_next(request.GET.get('next'))
    
    if request.user.is_authenticated():
        return HttpResponseRedirect(next)
    
    try:
        if request.POST['remember_me'] == 'on':
            # By default keep the user logged in for 3 weeks
            login_duration = getattr(settings, 'LOGIN_DAYS', 21) * 60 * 60 * 24
    except:
        login_duration = 0
    request.session.set_expiry(login_duration)
    return auth_login(request, template_name=template_name,
                      redirect_field_name='next',
                      authentication_form=RememberMeAuthForm)


@login_required
def account_settings(request, template_name='simpleauth/settings.html'):
    """Account settings page."""
    msg = request.GET.get('msg', '')
    return render_to_response(template_name,
                  {'msg': msg,},
                  context_instance=RequestContext(request))

def profile_public(request, username, template_name='simpleauth/profile_public.html'):
    """Public profile page."""
    user = get_object_or_404(User, username=username)
    return render_to_response(template_name,
                  {'user': user,},
                  context_instance=RequestContext(request))


########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from transifex.teams.models import Team

class TeamAdmin(admin.ModelAdmin):
    search_fields = ['project__name', 'language__name',
        'coordinators__username', 'members__username', 'reviewers__username']
    list_display = ['project', 'language']

admin.site.register(Team, TeamAdmin)

########NEW FILE########
__FILENAME__ = forms
from django import forms
from django.db.models import Q
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _

from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.teams.models import Team, TeamRequest
from transifex.txcommon.widgets import SelectWithDisabledOptions

from ajax_select.fields import AutoCompleteField, AutoCompleteSelectMultipleField


class TeamSimpleForm(forms.ModelForm):
    coordinators = AutoCompleteSelectMultipleField(
        'users', label=_("Coordinators"), required=True,
        help_text=_("Coordinators are people that can manage the members of "\
                    "the team, for example. Search for usernames.")
                )

    members = AutoCompleteSelectMultipleField(
        'users', label=_("Members"), required=False,
        help_text=_("Members are actually people that can submit "\
                    "translations. Search for usernames.")
    )

    reviewers = AutoCompleteSelectMultipleField(
        'users', label=_("Reviewers"), required=False,
        help_text=_("Reviewers are team members that can proofread "\
                    "translations and mark them as reviewed. Search for "\
                    "usernames.")
    )

    class Meta:
        model = Team
        fields = ('language', 'coordinators', 'members', 'reviewers', 'mainlist',
            'project', 'creator')

    def __init__(self, project, language=None, *args, **kwargs):
        super(TeamSimpleForm, self).__init__(*args, **kwargs)
        self.fields['project'].widget = forms.HiddenInput()
        self.fields['project'].initial = project.pk
        self.fields['creator'].widget = forms.HiddenInput()

        if language:
            self.fields['language'].initial = language.pk

        # Lets filter the language field based on the teams already created.
        # We don't need to enable a language if there is a team for it already.
        # Also, when editing the team details the language must not be changeable
        # to other complete different languages. It only accepts changing
        # language among languages with the same general code, such as pt,
        # pt_BR, pt_PT.
        instance = kwargs.get('instance', None)
        if instance:
            # Getting general language code. 'pt_BR' turns into 'pt'
            general_code = instance.language.code.split('_')[0]

            # Create list of languages to be disabled excluding the current
            # language and also languages for the same general code that do not
            # have a team already created for the related project.
            self.disabled_langs = Language.objects.exclude(
                Q(code=instance.language.code) |
                ~Q(teams__project=project), Q(code__startswith=general_code)
                ).values_list('pk', flat=True)

            # We don't need an empty label
            self.fields["language"].empty_label = None
        
        # For languages with no teams
        elif language:
            # Allow only the selected language to be in the list
            self.disabled_langs = Language.objects.exclude(
                code=language.code).values_list('pk', flat=True)

            # We don't need an empty label
            self.fields["language"].empty_label = None
        else:
            # Create list of languages to be disabled excluding the current
            # language and also the language of teams already created.
            self.disabled_langs = Team.objects.filter(project=project).exclude(
                language=language).values_list('language__pk', flat=True)

        # Setting custom widget with list of ids that should be disabled
        self.fields["language"].widget = SelectWithDisabledOptions(
            choices=[(l.pk, l) for l in Language.objects.all()],
            disabled_choices=self.disabled_langs)

    def clean_language(self):
        """Make sure language doesn't get a invalid value."""
        data = self.cleaned_data['language']
        if isinstance(data, Language):
            pk = data.pk
        else:
            pk = int(data)
        if pk in self.disabled_langs:
            raise forms.ValidationError(_(u'Enter a valid value.'))
        return data

    def clean(self):
        cleaned_data = self.cleaned_data
        coordinators = cleaned_data.get("coordinators")
        members = cleaned_data.get("members")
        reviewers = cleaned_data.get("reviewers")

        if coordinators and members:
            intersection = set(coordinators).intersection(members)
            if intersection:
                users = [User.objects.get(pk=c).username for c in intersection]
                raise forms.ValidationError(_("User(s) %s cannot be in "
                    "both Coordinators and Members lists. Please make "
                    "sure that the lists are unique.") % ', '.join(users))

        if coordinators and reviewers:
            intersection = set(coordinators).intersection(reviewers)
            if intersection:
                users = [User.objects.get(pk=c).username for c in intersection]
                raise forms.ValidationError(_("User(s) %s cannot be in "
                    "both Coordinators and Reviewers lists. Please make "
                    "sure that the lists are unique.") % ', '.join(users))

        if members and reviewers:
            intersection = set(members).intersection(reviewers)
            if intersection:
                users = [User.objects.get(pk=c).username for c in intersection]
                raise forms.ValidationError(_("User(s) %s cannot be in "
                    "both Members and Reviewers lists. Please make "
                    "sure that the lists are unique.") % ', '.join(users))

        return cleaned_data


class TeamRequestSimpleForm(forms.ModelForm):
    class Meta:
        model = TeamRequest
        fields = ('language', 'project', 'user')

    def __init__(self, project, language_code=None, *args, **kwargs):
        super(TeamRequestSimpleForm, self).__init__(*args, **kwargs)
        self.fields['project'].widget = forms.HiddenInput()
        self.fields['project'].initial = project.pk
        self.fields['user'].widget = forms.HiddenInput()

        # Create list of languages to be disabled excluding the current
        # language_code and also the language of teams already created.
        self.disabled_langs = Team.objects.filter(project=project).exclude(
            language__code=language_code).values_list('language__pk', flat=True)

        # Setting custom widget with list of ids that should be disabled
        self.fields["language"].widget = SelectWithDisabledOptions(
            choices=[(l.pk, l) for l in Language.objects.all()],
            disabled_choices=self.disabled_langs)

    def clean_language(self):
        """Make sure language doesn't get a invalid value."""
        data = self.cleaned_data['language']
        if isinstance(data, Language):
            pk = data.pk
        else:
            pk = int(data)
        if pk in self.disabled_langs:
            raise forms.ValidationError(_(u'Enter a valid value.'))
        return data


class ProjectsFilterForm(forms.Form):

    project = forms.ModelChoiceField(queryset=Project.objects.all(),
        empty_label=_('All child projects'), required=False,)

    def __init__(self, project, *args, **kwargs):
        super(ProjectsFilterForm, self).__init__(*args, **kwargs)

        project = self.fields["project"].queryset.filter(
            Q(id=project.id) | Q(outsource=project))
        self.fields["project"].queryset = project

########NEW FILE########
__FILENAME__ = 0001_initial

from south.db import db
from django.db import models
from transifex.teams.models import *

class Migration:

    def forwards(self, orm):

        # Adding model 'Team'
        db.create_table('teams_team', (
            ('id', orm['teams.Team:id']),
            ('project', orm['teams.Team:project']),
            ('language', orm['teams.Team:language']),
            ('mainlist', orm['teams.Team:mainlist']),
            ('creator', orm['teams.Team:creator']),
            ('created', orm['teams.Team:created']),
            ('modified', orm['teams.Team:modified']),
        ))
        db.send_create_signal('teams', ['Team'])

        # Adding model 'TeamRequest'
        db.create_table('teams_teamrequest', (
            ('id', orm['teams.TeamRequest:id']),
            ('project', orm['teams.TeamRequest:project']),
            ('language', orm['teams.TeamRequest:language']),
            ('user', orm['teams.TeamRequest:user']),
            ('created', orm['teams.TeamRequest:created']),
        ))
        db.send_create_signal('teams', ['TeamRequest'])

        # Adding model 'TeamAccessRequest'
        db.create_table('teams_teamaccessrequest', (
            ('id', orm['teams.TeamAccessRequest:id']),
            ('team', orm['teams.TeamAccessRequest:team']),
            ('user', orm['teams.TeamAccessRequest:user']),
            ('created', orm['teams.TeamAccessRequest:created']),
        ))
        db.send_create_signal('teams', ['TeamAccessRequest'])

        # Adding ManyToManyField 'Team.members'
        db.create_table('teams_team_members', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('team', models.ForeignKey(orm.Team, null=False)),
            ('user', models.ForeignKey(orm['auth.User'], null=False))
        ))

        # Adding ManyToManyField 'Team.coordinators'
        db.create_table('teams_team_coordinators', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('team', models.ForeignKey(orm.Team, null=False)),
            ('user', models.ForeignKey(orm['auth.User'], null=False))
        ))

        # Creating unique_together for [team, user] on TeamAccessRequest.
        db.create_unique('teams_teamaccessrequest', ['team_id', 'user_id'])

        # Creating unique_together for [project, language] on TeamRequest.
        db.create_unique('teams_teamrequest', ['project_id', 'language_id'])

        # Creating unique_together for [project, language] on Team.
        db.create_unique('teams_team', ['project_id', 'language_id'])



    def backwards(self, orm):

        # Deleting unique_together for [project, language] on Team.
        db.delete_unique('teams_team', ['project_id', 'language_id'])

        # Deleting unique_together for [project, language] on TeamRequest.
        db.delete_unique('teams_teamrequest', ['project_id', 'language_id'])

        # Deleting unique_together for [team, user] on TeamAccessRequest.
        db.delete_unique('teams_teamaccessrequest', ['team_id', 'user_id'])

        # Deleting model 'Team'
        db.delete_table('teams_team')

        # Deleting model 'TeamRequest'
        db.delete_table('teams_teamrequest')

        # Deleting model 'TeamAccessRequest'
        db.delete_table('teams_teamaccessrequest')

        # Dropping ManyToManyField 'Team.members'
        db.delete_table('teams_team_members')

        # Dropping ManyToManyField 'Team.coordinators'
        db.delete_table('teams_team_coordinators')



    models = {
        'auth.group': {
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)"},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'projects.project': {
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'null': 'True'}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {})
        },
        'teams.team': {
            'Meta': {'unique_together': "(('project', 'language'),)"},
            'coordinators': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']"}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'mainlist': ('django.db.models.fields.EmailField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"})
        },
        'teams.teamaccessrequest': {
            'Meta': {'unique_together': "(('team', 'user'),)"},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['teams.Team']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'teams.teamrequest': {
            'Meta': {'unique_together': "(('project', 'language'),)"},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['teams']

########NEW FILE########
__FILENAME__ = 0002_add_reviewers_m2m_field
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding M2M table for field reviewers on 'Team'
        db.create_table('teams_team_reviewers', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('team', models.ForeignKey(orm['teams.team'], null=False)),
            ('user', models.ForeignKey(orm['auth.user'], null=False))
        ))
        db.create_unique('teams_team_reviewers', ['team_id', 'user_id'])


    def backwards(self, orm):
        
        # Removing M2M table for field reviewers on 'Team'
        db.delete_table('teams_team_reviewers')


    models = {
        'actionlog.logentry': {
            'Meta': {'ordering': "('-action_time',)", 'object_name': 'LogEntry'},
            'action_time': ('django.db.models.fields.DateTimeField', [], {}),
            'action_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['notification.NoticeType']"}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'actionlogs'", 'null': 'True', 'to': "orm['auth.User']"})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'notification.noticetype': {
            'Meta': {'object_name': 'NoticeType'},
            'default': ('django.db.models.fields.IntegerField', [], {}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'display': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'projects.project': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Project'},
            'anyone_submit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'bug_tracker': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'feed': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'homepage': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'long_description': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'long_description_html': ('django.db.models.fields.TextField', [], {'max_length': '1000', 'blank': 'True'}),
            'maintainers': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'projects_maintaining'", 'null': 'True', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'outsource': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']", 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'projects_owning'", 'null': 'True', 'to': "orm['auth.User']"}),
            'private': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '30', 'db_index': 'True'}),
            'tags': ('tagging.fields.TagField', [], {}),
            'trans_instructions': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        },
        'teams.team': {
            'Meta': {'unique_together': "(('project', 'language'),)", 'object_name': 'Team'},
            'coordinators': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'team_coordinators'", 'symmetrical': 'False', 'to': "orm['auth.User']"}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'teams'", 'to': "orm['languages.Language']"}),
            'mainlist': ('django.db.models.fields.EmailField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'team_members'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['auth.User']"}),
            'modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'reviewers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'team_reviewers'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['auth.User']"})
        },
        'teams.teamaccessrequest': {
            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamAccessRequest'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['teams.Team']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'teams.teamrequest': {
            'Meta': {'unique_together': "(('project', 'language'),)", 'object_name': 'TeamRequest'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']"}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['teams']

########NEW FILE########
__FILENAME__ = models
from django.contrib.auth.models import User
from django.db import models
from django.db.models import Q, get_model, permalink
from django.utils.translation import ugettext_lazy as _
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.txcommon.log import log_model
from transifex.resources.utils import invalidate_template_cache

class TeamManager(models.Manager):

    def get_or_none(self, project, language_code):
        """
        Return a Team object or None if it doesn't exist.
        """
        if project.outsource:
            project=project.outsource
        try:
            return self.get(project__pk=project.pk,
                language__code__exact=language_code)
        except Team.DoesNotExist:
            return None

    def public(self):
        return self.filter(project__private=False)

    def private(self):
        return self.filter(project__private=True)

    def for_user(self, user):
        return self.filter(
            Q(coordinators__in=[user]) |
            Q(members__in=[user]) |
            Q(reviewers__in=[user])
        ).distinct()

class Team(models.Model):
    """
    A team is a set of people that work together in pro of a project in a
    specific language.
    """
    project = models.ForeignKey(Project, verbose_name=_('Project'),
        blank=False, null=False,
        help_text=_("The project this team works on."))
    language = models.ForeignKey(Language, verbose_name=_('Language'),
        blank=False, null=False, related_name='teams',
        help_text=_("People in this team will only be able to submit "
                    "translations files related to the specific language."))
    coordinators = models.ManyToManyField(User, verbose_name=_('Coordinators'),
        related_name='team_coordinators', blank=False, null=False)
    members = models.ManyToManyField(User, verbose_name=_('Members'),
        related_name='team_members', blank=True, null=True)
    reviewers = models.ManyToManyField(User, verbose_name=_('Reviewers'),
        related_name='team_reviewers', blank=True, null=True)

    mainlist = models.EmailField(_('Mainlist'), max_length=50, blank=True,
        null=True, help_text=_("The main mailing list of the team."))

    creator = models.ForeignKey(User, verbose_name=_('creator'), blank=False,
        null=False)
    created = models.DateTimeField(auto_now_add=True, editable=False)
    modified = models.DateTimeField(auto_now=True, editable=False)

    # Managers
    objects = TeamManager()

    def __unicode__(self):
        return u'%s.%s' % (self.project.slug, self.language.code)

    def __repr__(self):
        return '<Team: %s.%s>' % (self.project.slug, self.language.code)

    @permalink
    def get_absolute_url(self):
        return ('team_detail', [self.project.slug, self.language.code])

    class Meta:
        unique_together = ("project", "language")
        verbose_name = _('team')
        verbose_name_plural = _('teams')

    @property
    def full_name(self):
        return "team.%s.%s" % (self.project.slug, self.language.code)

    def save(self, *args, **kwargs):
        """
        Do some extra processing along with the actual save to db.
        """
        super(Team, self).save(*args, **kwargs)
        Resource = get_model('resources', 'Resource')
        RLStats = get_model('resources', 'RLStats')
        res = Resource.objects.filter(Q(project=self.project) | 
            Q(project__outsource=self.project))
        for r in res:
            RLStats.objects.get_or_create(resource=r, language=self.language)
            invalidate_template_cache("project_resource_details",
                self.project.slug, r.slug)
            invalidate_template_cache("resource_details",
                self.project.slug, r.slug)

    def delete(self, *args, **kwargs):
        """
        Do some extra processing along with the actual delete to db.
        """
        Resource = get_model('resources', 'Resource')
        RLStats = get_model('resources', 'RLStats')
        res = Resource.objects.filter(project=self.project)
        for r in res:
            # FIXME: Maybe we should delete translations either way?
            rl, created = RLStats.objects.get_or_create(resource=r, language=self.language)
            if rl.translated == 0:
                rl.delete()
            invalidate_template_cache("project_resource_details",
                self.project.slug, r.slug)
            invalidate_template_cache("resource_details",
                self.project.slug, r.slug)
        super(Team, self).delete(*args, **kwargs)


log_model(Team)


class TeamRequest(models.Model):
    project = models.ForeignKey(Project, verbose_name=_('Project'),
        blank=False, null=False,
        help_text=_("The project this team works on."))
    language = models.ForeignKey(Language, verbose_name=_('Language'),
        blank=False, null=False,
        help_text=_("People in this team will only be able to submit "
                    "translations files related to the specific language."))
    user = models.ForeignKey(User, verbose_name=_('User'),
        blank=False, null=False)

    created = models.DateTimeField(auto_now_add=True, editable=False)

    def __unicode__(self):
        return u'%s.%s' % (self.project.slug,
            self.language.code)

    def __repr__(self):
        return '<TeamRequest: %s.%s>' % (self.project.slug,
            self.language.code)

    class Meta:
        unique_together = ("project", "language")
        verbose_name = _('team creation request')
        verbose_name_plural = _('team creation requests')

log_model(TeamRequest)


class TeamAccessRequestManager(models.Manager):

    def get_or_none(self, team, user):
        """
        Return a TeamAccessRequest object or None if it doesn't exist.
        """
        try:
            return self.get(team__pk=team.pk,
                user__pk__exact=user.pk)
        except TeamAccessRequest.DoesNotExist:
            return None

class TeamAccessRequest(models.Model):
    team = models.ForeignKey(Team, verbose_name=_('Team'),
        blank=False, null=False, related_name='join_requests')
    user = models.ForeignKey(User, verbose_name=_('User'),
        blank=False, null=False)

    created = models.DateTimeField(auto_now_add=True, editable=False)

    objects = TeamAccessRequestManager()

    def __unicode__(self):
        return u'%s.%s' % (self.team, self.user)

    def __repr__(self):
        return '<TeamAccessRequest: %s.%s>' % (self.team, self.user)

    class Meta:
        unique_together = ("team", "user")
        verbose_name = _('team access request')
        verbose_name_plural = _('team access requests')

log_model(TeamAccessRequest)


# FIXME: We could avoid monkey-patches once custom managers on reverse 
# relations are supported in Django. https://code.djangoproject.com/ticket/3871
# Monkey-patching Project class from here to avoid circular dependency problems
def available_teams(self):
    """
    Return all available teams for the project. If the project outsources its
    access, then the teams of the 'parent' project will be returned. The 
    parameter `self` must be a Project instance.
    """
    return Team.objects.filter(project=self.outsource or self)

Project.available_teams = property(available_teams)

########NEW FILE########
__FILENAME__ = team_tags
# -*- coding: utf-8 -*-
from django import template
from transifex.resources.models import RLStats
from transifex.teams.models import Team
from transifex.txcommon.utils import StatBarsPositions

register = template.Library()

@register.filter
def language_has_team(lang_code, project):
    """
    Return if the specific language has a corresponding team for the project.

    Example: {% if language_obj.code|language_has_team:stat.object.project %}
    """

    return Team.objects.get_or_none(project, lang_code)

########NEW FILE########
__FILENAME__ = models
from transifex.projects.models import Project
from transifex.teams.models import Team
from transifex.txcommon.tests import base

class TestTeamModels(base.BaseTestCase):

    def test_available_teams(self):
        """
        Test whether monkey-patch of Project class with a 'available_teams'
        instance method returns the desired result.
        """
        # There must be only 1 'pt_BR' team
        self.assertEquals(self.project.available_teams.count(), 1)

        # Create a new 'ar' team for self.project
        team = Team.objects.get_or_create(language=self.language_ar,
            project=self.project, creator=self.user['maintainer'])[0]

        # Create a secondary project and set it to outsource access to self.project
        project = Project.objects.get_or_create(slug="foo",
            defaults={'name':"Foo Project"},
            source_language=self.language_en)[0]
        project.outsource = self.project

        # There must be 2 teams. One 'pt_BR' and a 'ar' one.
        self.assertEquals(project.available_teams.count(), 2)

    def test_teams_for_user(self):
        for user in ['reviewer', 'team_member', 'team_coordinator',
                'maintainer']:
            if user == 'maintainer':
                self.assertFalse(Team.objects.for_user(self.user[user]))
            else:
                self.assertEqual(set(Team.objects.for_user(self.user[user]
                    ).values_list('pk')),
                        set(Team.objects.filter(pk__in=[self.team.pk,
                            self.team_private.pk]).values_list('pk'))
                )



########NEW FILE########
__FILENAME__ = views
from django.core.urlresolvers import reverse
from django.test.client import Client
from django.contrib.auth.models import User

from languages.models import Language
from transifex.teams.models import TeamRequest, TeamAccessRequest
from transifex.teams.models import Team
from txcommon.tests import base, utils

class TestTeams(base.BaseTestCase):

    def setUp(self):
        super(TestTeams, self).setUp()

    def test_team_list(self):
        url = reverse('project_detail', args=[self.project.slug])
        resp = self.client['registered'].get(url)
        self.assertContains(resp, '(pt_BR)', status_code=200)

    def test_team_details(self):
        url = reverse('team_detail', args=[self.project.slug, self.language.code])
        resp = self.client['registered'].get(url)
        self.assertContains(resp, '(Brazil)', status_code=200)

    def test_create_team(self):
        """Test a successful team creation."""
        url = reverse('team_create', args=[self.project.slug])
        DATA = {
            'language': self.language_ar.id,
            'project': self.project.id,
            'coordinators': '|%s|' % User.objects.all()[0].id,
            'members': '|',
        }
        resp = self.client['maintainer'].post(url, data=DATA, follow=True)
        #from ipdb import set_trace; set_trace()
        #self.response_in_browser(resp)
        self.assertTemplateUsed(resp, 'teams/team_members.html')
        self.assertEqual(resp.context['team'].project.id, self.project.id)
        self.assertEqual(resp.context['team'].language.id, self.language_ar.id)
        self.assertIn(User.objects.all()[0], resp.context['team'].coordinators.all())

    def team_details_release(self):
        """Test releases appear correctly on team details page."""
        self.assertTrue(self.project.teams.all().count())
        url = reverse('team_detail', args=[self.project.slug, self.language.code])
        resp = self.client['team_member'].get(url)
        self.assertContains(resp, 'releaseslug', status_code=200)

    def test_team_request(self, lang_code=None):
        """Test creation of a team request"""
        url = reverse('team_request', args=[self.project.slug])
        if lang_code != None:
            language = Language.objects.get(code='ar')
        else:
            language = self.language_ar
        resp = self.client['registered'].post(url,
            {'language':language.id}, follow=True)
        self.assertContains(resp, "You requested creation of the &#39;%s&#39; team."%(language.name))
        self.assertEqual(resp.status_code, 200)

    def test_team_requests_on_team_creation(self):
        #test team request after a team is created
        language = self.language_ar
        url = reverse('team_request', args=[self.project.slug])
        self.test_team_request()
        self.test_create_team()
        self.assertTrue(TeamAccessRequest.objects.get(user=self.user[
            'registered'], team__project=self.project,
            team__language=self.language_ar))
        self.assertFalse(TeamRequest.objects.filter(user=self.user[
            'registered'], project=self.project))

        Team.objects.get(project=self.project,
                language=self.language_ar).delete()

        resp = self.client['registered'].post(url,
            {'language':language.id}, follow=True)
        self.assertContains(resp, "You requested creation of the &#39;%s&#39; team."%(language.name))
        self.assertEqual(resp.status_code, 200)

        url = reverse('team_create', args=[self.project.slug])
        DATA = {
            'language': self.language_ar.id,
            'project': self.project.id,
            'coordinators': '|%s|' % User.objects.all()[0].id,
            'members': '|%s|' % self.user['registered'].id,
        }
        resp = self.client['maintainer'].post(url, data=DATA, follow=True)
        self.assertTemplateUsed(resp, 'teams/team_members.html')
        self.assertEqual(resp.context['team'].project.id, self.project.id)
        self.assertEqual(resp.context['team'].language.id, self.language_ar.id)
        self.assertIn(User.objects.all()[0], resp.context['team'].coordinators.all())
        self.assertFalse(TeamAccessRequest.objects.filter(user=self.user[
            'registered'], team__project=self.project,
            team__language=self.language_ar))
        self.assertFalse(TeamRequest.objects.filter(user=self.user[
            'registered'], project=self.project))

    def test_team_request_deny(self):
        """Test denial of a team request"""
        self.test_team_request()
        language = self.language_ar
        url = reverse('team_request_deny', args=[self.project.slug, language.code])
        resp = self.client['maintainer'].post(url, {"team_request_deny":"Deny"}, follow=True)
        self.assertContains(resp, 'You rejected the request by', status_code=200)

    def test_team_request_approve(self):
        """Test approval of a team request"""
        self.test_team_request()
        url = reverse('team_request_approve', args=[self.project.slug, self.language_ar.code])
        resp = self.client['maintainer'].post(url, {'team_request_approve':'Approve'}, follow=True)
        self.assertContains(resp, 'You approved the', status_code=200)

    def test_team_join_request(self):
        """Test joining request to a team"""
        url = reverse('team_join_request', args=[self.project.slug, self.language.code])
        DATA = {'team_join':'Join this Team'}
        resp = self.client['registered'].post(url, DATA, follow=True)
        self.assertContains(resp, 'You requested to join the', status_code=200)

    def test_team_join_approve(self):
        '''Test approval of a joining request to a team'''
        self.test_team_join_request()
        url = reverse('team_join_approve', args=[self.project.slug, self.language.code, 'registered'])
        DATA = {'team_join_approve':'Approve'}
        resp = self.client['team_coordinator'].post(url, DATA, follow=True)
        self.assertContains(resp, 'You added', status_code=200)

    def test_team_join_deny(self):
        """Test denial of a joining request to a team"""
        self.test_team_join_request()
        url = reverse('team_join_deny', args=[self.project.slug, self.language.code, 'registered'])
        DATA = {'team_join_deny':'Deny'}
        resp = self.client['team_coordinator'].post(url, DATA, follow=True)
        self.assertContains(resp, 'You rejected', status_code=200)

    def test_team_join_withdraw(self):
        """Test the withdrawal of a team join request by the user"""
        self.test_team_join_request()
        url = reverse('team_join_withdraw', args=[self.project.slug, self.language.code])
        DATA = {"team_join_withdraw" : "Withdraw"}
        resp = self.client['registered'].post(url, DATA, follow=True)
        self.assertContains(resp, 'You withdrew your request to join the', status_code=200)

    def test_team_leave(self):
        """Test leaving a team"""
        self.test_team_join_approve()
        url = reverse('team_leave', args=[self.project.slug, self.language.code])
        DATA = {'team_leave' : 'Leave'}
        resp = self.client['registered'].post(url, DATA, follow=True)
        self.assertContains(resp, 'You left the', status_code=200)

    def test_team_delete(self):
        """Test team delete """
        self.test_create_team()
        url = reverse('team_delete', args=[self.project.slug, self.language_ar.code])
        DATA = {'team_delete':"Yes, I'm sure!",}
        resp = self.client['maintainer'].post(url, DATA, follow=True)
        self.assertContains(resp, 'was deleted', status_code=200)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *
from django.conf import settings
from django.views.generic.simple import redirect_to
from transifex.teams.views import *

TEAM_PARTIAL_URL =  r'language/(?P<language_code>[\-_@\w\.]+)/'

urlpatterns = patterns('',
    url(
        regex = r'languages/add/$',
        view = team_create,
        name = 'team_create',),
    url(
        regex = TEAM_PARTIAL_URL + r'edit/$',
        view = team_update,
        name = 'team_update',),
    url(
        regex = TEAM_PARTIAL_URL + r'$',
        view = team_detail,
        name = 'team_detail',),
    url(
        regex = TEAM_PARTIAL_URL + r'members/$',
        view = team_members,
        name = 'team_members',),
    url(
        regex = TEAM_PARTIAL_URL + r'delete/$',
        view = team_delete,
        name = 'team_delete',),
    url(
        regex = TEAM_PARTIAL_URL + r'request/$',
        view = team_join_request,
        name = 'team_join_request',),
    url(
        regex = TEAM_PARTIAL_URL + r'approve/(?P<username>[\.\w-]+)/$',
        view = team_join_approve,
        name = 'team_join_approve',),
    url(
        regex = TEAM_PARTIAL_URL + r'deny/(?P<username>[\.\w-]+)/$',
        view = team_join_deny,
        name = 'team_join_deny',),
    url(
        regex = TEAM_PARTIAL_URL + r'withdraw/$',
        view = team_join_withdraw,
        name = 'team_join_withdraw',),
    url(
        regex = TEAM_PARTIAL_URL + r'leave/$',
        view = team_leave,
        name = 'team_leave',),
    url(
        regex = r'languages/request/$',
        view = team_request,
        name = 'team_request',),
    url(
        regex = TEAM_PARTIAL_URL + r'approve/$',
        view = team_request_approve,
        name = 'team_request_approve',),
    url(
        regex = TEAM_PARTIAL_URL + r'deny/$',
        view = team_request_deny,
        name = 'team_request_deny',),
    # Legacy redirect
    url(r'teams/$', redirect_to, {'url': '/projects/p/%(project_slug)s/'}),
)

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
import copy
import itertools
from django.conf import settings
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib.contenttypes.models import ContentType
from django.contrib import messages
from django.core.urlresolvers import reverse
from django.db import IntegrityError
from django.db import transaction
from django.db.models import Q, Sum
from django.dispatch import Signal
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.http import Http404
from django.utils.translation import ugettext as _

from actionlog.models import action_logging
from transifex.languages.models import Language
from notification import models as notification
from transifex.projects.models import Project
from transifex.projects.permissions import *
from transifex.projects.signals import pre_team_request, pre_team_join, ClaNotSignedError
from transifex.resources.models import RLStats, Resource
from transifex.teams.forms import TeamSimpleForm, TeamRequestSimpleForm, ProjectsFilterForm
from transifex.teams.models import Team, TeamAccessRequest, TeamRequest
# Temporary
from transifex.txcommon import notifications as txnotification

from transifex.txcommon.decorators import one_perm_required_or_403, access_off
from transifex.txcommon.log import logger


def team_off(request, project, *args, **kwargs):
    """
    This view is used by the decorator 'access_off' to redirect a user when
    a project outsources its teams or allow anyone to submit files.

    Usage: '@access_off(team_off)' in front on any team view.
    """
    language_code = kwargs.get('language_code', None)
    if language_code:
        language = Language.objects.by_code_or_alias_or_404(language_code)
        extra_context = {
            'parent_template': 'teams/team_menu.html',
            'language': language,
            'project_team_members': True,
        }
    else:
        extra_context = {
            'parent_template': 'projects/project_menu.html',
            'project_overview': True,
        }

    context = {
        'project': project,
    }

    context.update(extra_context)

    return render_to_response('teams/team_off.html', context,
        context_instance=RequestContext(request)
    )

def update_team_request(team):
    project = team.project
    language = team.language
    try:
        team_request = project.teamrequest_set.get(
                language=language)
        user = team_request.user
        if not (user in team.members.all() or user in team.coordinators.all()\
                or user in team.reviewers.all()):
            team_access_request = TeamAccessRequest.objects.create(
                    user=user, team=team, created=team_request.created)
        team_request.delete()
    except TeamRequest.DoesNotExist, e:
        pass

def _team_create_update(request, project_slug, language_code=None, extra_context=None):
    """
    Handler for creating and updating a team of a project.

    This function helps to eliminate duplication of code between those two
    actions, and also allows to apply different permission checks in the
    respective views.
    """
    project = get_object_or_404(Project, slug=project_slug)
    team, language = None, None

    if language_code:
        language = get_object_or_404(Language, code=language_code)
        try:
            team = Team.objects.get(project__pk=project.pk,
                language=language)
        except Team.DoesNotExist:
            pass

    if request.POST:
        form = TeamSimpleForm(project, language, request.POST, instance=team)
        form.data["creator"] = request.user.pk
        if form.is_valid():
            team=form.save(commit=False)
            team_id = team.id
            team.save()
            form.save_m2m()

            # Delete access requests for users that were added
            for member in itertools.chain(team.members.all(),
                team.coordinators.all()):
                tr = TeamAccessRequest.objects.get_or_none(team, member)
                if tr:
                    tr.delete()

            # ActionLog & Notification
            # TODO: Use signals
            if not team_id:
                nt = 'project_team_added'
            else:
                nt = 'project_team_changed'

            context = {'team': team,
                       'sender': request.user}

            # Logging action
            action_logging(request.user, [project, team], nt, context=context)
            update_team_request(team)

            if settings.ENABLE_NOTICES:
                # Send notification for those that are observing this project
                txnotification.send_observation_notices_for(project,
                        signal=nt, extra_context=context)
                # Send notification for maintainers and coordinators
                from notification.models import NoticeType
                try:
                    notification.send(set(itertools.chain(project.maintainers.all(),
                        team.coordinators.all())), nt, context)
                except NoticeType.DoesNotExist:
                    pass

            return HttpResponseRedirect(reverse("team_members",
                                        args=[project.slug, team.language.code]))
    else:
        form = TeamSimpleForm(project, language, instance=team)

    context = {
        "project": project,
        "team": team,
        "project_team_form": form,
    }

    if extra_context:
        context.update(extra_context)

    return render_to_response("teams/team_form.html", context,
        context_instance=RequestContext(request))


pr_team_add=(("granular", "project_perm.maintain"),)
@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_team_add,
    (Project, "slug__exact", "project_slug"))
def team_create(request, project_slug):
    extra_context = {
        'parent_template': 'projects/base.html',
        'team_create': True
    }
    return _team_create_update(request, project_slug,
        extra_context=extra_context)


pr_team_update=(("granular", "project_perm.coordinate_team"),)
@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_team_update,
    (Project, 'slug__exact', 'project_slug'),
    (Language, "code__exact", "language_code"))
def team_update(request, project_slug, language_code):
    language = Language.objects.by_code_or_alias_or_404(language_code)
    extra_context = {
        'language': language,
        'parent_template': 'teams/team_menu.html',
        'team_update': True
    }
    return _team_create_update(request, project_slug, language_code,
        extra_context=extra_context)


@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def team_detail(request, project_slug, language_code):
    project = get_object_or_404(Project.objects.select_related(), slug=project_slug)
    language = Language.objects.by_code_or_alias_or_404(language_code)
    team = Team.objects.get_or_none(project, language.code)

    filter_form = ProjectsFilterForm(project, request.GET)

    projects_filter = []
    if filter_form.is_valid():
        projects_filter = filter_form.cleaned_data['project']

    if team and request.user.is_authenticated():
        user_access_request = request.user.teamaccessrequest_set.filter(
            team__pk=team.pk)
    else:
        user_access_request = None

    statslist = RLStats.objects.select_related('resource', 'resource__project',
        'lock', 'last_committer', 'resource__priority')

    if projects_filter:
        statslist = statslist.filter(resource__project__in=[projects_filter,])

    statslist = statslist.by_project_and_language(project, language)

    if not statslist and not team:
        raise Http404

    empty_rlstats = Resource.objects.select_related('project', 'priority'
        ).by_project(project).exclude(id__in=statslist.values('resource')
        ).order_by('project__name')

    if projects_filter:
        empty_rlstats = empty_rlstats.filter(project__in=[projects_filter,])

    total_entries = Resource.objects.by_project(project).aggregate(
        total_entities=Sum('total_entities'))['total_entities']

    if team:
        coordinators = team.coordinators.select_related('profile').all()[:6]
    else:
        coordinators = None

    # HACK: For every resource without an RLStats object, we need to fool
    # the template that there is one. So, we create the object without
    # saving it to the DB and append it to the list. I know this is not very
    # nice but I can't think of a nicer way to do it.
    statslist = list(statslist)
    for resource in empty_rlstats:
        rl = RLStats(resource=resource, language=language,
            untranslated=resource.total_entities,
        )
        statslist.append(rl)

    return render_to_response("teams/team_detail.html", {
        "project": project,
        "language": language,
        "team": team,
        "user_access_request": user_access_request,
        "project_team_page": True,
        "statslist": statslist,
        "filter_form": filter_form,
        "total_entries": total_entries,
        "coordinators": coordinators,
    }, context_instance=RequestContext(request))

@access_off(team_off)
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'), anonymous_access=True)
def team_members(request, project_slug, language_code):

    project = get_object_or_404(Project.objects.select_related(), slug=project_slug)
    language = get_object_or_404(Language.objects.select_related(), code=language_code)

    team = Team.objects.get_or_none(project, language.code)

    if team:
        team_access_requests = TeamAccessRequest.objects.filter(team__pk=team.pk)
    else:
        team_access_requests = None

    if team and request.user.is_authenticated():
        user_access_request = request.user.teamaccessrequest_set.filter(
            team__pk=team.pk)
    else:
        user_access_request = None

    return render_to_response("teams/team_members.html", {
        "project": project,
        "language": language,
        "team": team,
        "team_access_requests": team_access_requests,
        "user_access_request": user_access_request,
        "project_team_members": True,
    }, context_instance=RequestContext(request))

pr_team_delete=(("granular", "project_perm.maintain"),
                ("general",  "teams.delete_team"),)
@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_team_delete,
    (Project, "slug__exact", "project_slug"))
def team_delete(request, project_slug, language_code):

    project = get_object_or_404(Project, slug=project_slug)
    team = get_object_or_404(Team, project__pk=project.pk,
        language__code=language_code)

    if request.method == "POST":
        _team = copy.copy(team)
        team.delete()
        messages.success(request, _("The team '%s' was deleted.") % _team.language.name)

        # ActionLog & Notification
        # TODO: Use signals
        nt = 'project_team_deleted'
        context = {'team': _team,
                   'sender': request.user}

        #Delete rlstats for this team in outsourced projects
        for p in project.outsourcing.all():
            RLStats.objects.select_related('resource').by_project_and_language(
                    p, _team.language).filter(translated=0).delete()

        # Logging action
        action_logging(request.user, [project, _team], nt, context=context)

        if settings.ENABLE_NOTICES:
            # Send notification for those that are observing this project
            txnotification.send_observation_notices_for(project,
                    signal=nt, extra_context=context)
            # Send notification for maintainers
            notification.send(project.maintainers.all(), nt, context)

        return HttpResponseRedirect(reverse("project_detail",
                                     args=(project_slug,)))
    else:
        return render_to_response(
            "teams/team_confirm_delete.html",
            {"team": team, "project": team.project},
            context_instance=RequestContext(request)
        )


@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'))
@transaction.commit_on_success
def team_join_request(request, project_slug, language_code):

    team = get_object_or_404(Team, project__slug=project_slug,
        language__code=language_code)
    project = team.project

    if request.POST:
        if request.user in team.members.all() or \
            request.user in team.coordinators.all():
            messages.warning(request,
                          _("You are already on the '%s' team.") % team.language.name)
        try:
            # send pre_team_join signal
            cla_sign = 'cla_sign' in request.POST and request.POST['cla_sign']
            cla_sign = cla_sign and True
            pre_team_join.send(sender='join_team_view', project=project,
                               user=request.user, cla_sign=cla_sign)

            access_request = TeamAccessRequest(team=team, user=request.user)
            access_request.save()
            messages.success(request,
                _("You requested to join the '%s' team.") % team.language.name)
            # ActionLog & Notification
            # TODO: Use signals
            nt = 'project_team_join_requested'
            context = {'access_request': access_request,
                       'sender': request.user}

            # Logging action
            action_logging(request.user, [project, team], nt, context=context)

            if settings.ENABLE_NOTICES:
                # Send notification for those that are observing this project
                txnotification.send_observation_notices_for(project,
                        signal=nt, extra_context=context)
                # Send notification for maintainers and coordinators
                notification.send(set(itertools.chain(project.maintainers.all(),
                    team.coordinators.all())), nt, context)


        except IntegrityError:
            transaction.rollback()
            messages.error(request,
                            _("You already requested to join the '%s' team.")
                             % team.language.name)
        except ClaNotSignedError, e:
            messages.error(request,
                             _("You need to sign the Contribution License Agreement for this "\
                "project before you join a translation team"))


    return HttpResponseRedirect(reverse("team_detail",
                                        args=[project_slug, language_code]))



pr_team_add_member_perm=(("granular", "project_perm.coordinate_team"),)
@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_team_add_member_perm,
    (Project, "slug__exact", "project_slug"),
    (Language, "code__exact", "language_code"))
@transaction.commit_on_success
def team_join_approve(request, project_slug, language_code, username):

    team = get_object_or_404(Team, project__slug=project_slug,
        language__code=language_code)
    project = team.project
    user = get_object_or_404(User, username=username)
    access_request = get_object_or_404(TeamAccessRequest, team__pk=team.pk,
        user__pk=user.pk)

    if request.POST:
        if user in team.members.all() or \
            user in team.coordinators.all():
            messages.warning(request,
                            _("User '%(user)s' is already on the '%(team)s' team.")
                            % {'user':user, 'team':team.language.name})
            access_request.delete()
        try:
            team.members.add(user)
            team.save()
            messages.success(request,
                            _("You added '%(user)s' to the '%(team)s' team.")
                            % {'user':user, 'team':team.language.name})
            access_request.delete()

            # ActionLog & Notification
            # TODO: Use signals
            nt = 'project_team_join_approved'
            context = {'access_request': access_request,
                       'sender': request.user}

            # Logging action
            action_logging(request.user, [project, team], nt, context=context)

            if settings.ENABLE_NOTICES:
                # Send notification for those that are observing this project
                txnotification.send_observation_notices_for(project,
                        signal=nt, extra_context=context)
                # Send notification for maintainers, coordinators and the user
                notification.send(set(itertools.chain(project.maintainers.all(),
                    team.coordinators.all(), [access_request.user])), nt, context)

        except IntegrityError, e:
            transaction.rollback()
            logger.error("Something weird happened: %s" % str(e))

    return HttpResponseRedirect(reverse("team_detail",
                                        args=[project_slug, language_code]))


pr_team_deny_member_perm=(("granular", "project_perm.coordinate_team"),)
@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_team_deny_member_perm,
    (Project, "slug__exact", "project_slug"),
    (Language, "code__exact", "language_code"))
@transaction.commit_on_success
def team_join_deny(request, project_slug, language_code, username):

    team = get_object_or_404(Team, project__slug=project_slug,
        language__code=language_code)
    project = team.project
    user = get_object_or_404(User, username=username)
    access_request = get_object_or_404(TeamAccessRequest, team__pk=team.pk,
        user__pk=user.pk)

    if request.POST:
        try:
            access_request.delete()
            messages.info(request,_(
                "You rejected the request by user '%(user)s' to join the "
                "'%(team)s' team."
                ) % {'user':user, 'team':team.language.name})

            # ActionLog & Notification
            # TODO: Use signals
            nt = 'project_team_join_denied'
            context = {'access_request': access_request,
                       'performer': request.user,
                       'sender': request.user}

            # Logging action
            action_logging(request.user, [project, team], nt, context=context)

            if settings.ENABLE_NOTICES:
                # Send notification for those that are observing this project
                txnotification.send_observation_notices_for(project,
                        signal=nt, extra_context=context)
                # Send notification for maintainers, coordinators and the user
                notification.send(set(itertools.chain(project.maintainers.all(),
                    team.coordinators.all(), [access_request.user])), nt, context)

        except IntegrityError, e:
            transaction.rollback()
            logger.error("Something weird happened: %s" % str(e))

    return HttpResponseRedirect(reverse("team_detail",
                                        args=[project_slug, language_code]))

@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'))
@transaction.commit_on_success
def team_join_withdraw(request, project_slug, language_code):

    team = get_object_or_404(Team, project__slug=project_slug,
        language__code=language_code)
    project = team.project
    access_request = get_object_or_404(TeamAccessRequest, team__pk=team.pk,
        user__pk=request.user.pk)

    if request.POST:
        try:
            access_request.delete()
            messages.success(request,_(
                "You withdrew your request to join the '%s' team."
                ) % team.language.name)

            # ActionLog & Notification
            # TODO: Use signals
            nt = 'project_team_join_withdrawn'
            context = {'access_request': access_request,
                       'performer': request.user,
                       'sender': request.user}

            # Logging action
            action_logging(request.user, [project, team], nt, context=context)

            if settings.ENABLE_NOTICES:
                # Send notification for those that are observing this project
                txnotification.send_observation_notices_for(project,
                        signal=nt, extra_context=context)
                # Send notification for maintainers, coordinators
                notification.send(set(itertools.chain(project.maintainers.all(),
                    team.coordinators.all())), nt, context)

        except IntegrityError, e:
            transaction.rollback()
            logger.error("Something weird happened: %s" % str(e))

    return HttpResponseRedirect(reverse("team_detail",
                                        args=[project_slug, language_code]))

@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'))
@transaction.commit_on_success
def team_leave(request, project_slug, language_code):

    team = get_object_or_404(Team, project__slug=project_slug,
        language__code=language_code)
    project = team.project

    if request.POST:
        try:
            if (team.members.filter(username=request.user.username).exists() or
                team.reviewers.filter(username=request.user.username).exists()):
                team.members.remove(request.user)
                team.reviewers.remove(request.user)
                messages.info(request, _(
                    "You left the '%s' team."
                    ) % team.language.name)

                # ActionLog & Notification
                # TODO: Use signals
                nt = 'project_team_left'
                context = {'team': team,
                           'performer': request.user,
                           'sender': request.user}

                # Logging action
                action_logging(request.user, [project, team], nt, context=context)

                if settings.ENABLE_NOTICES:
                    # Send notification for those that are observing this project
                    txnotification.send_observation_notices_for(project,
                            signal=nt, extra_context=context)
                    # Send notification for maintainers, coordinators
                    notification.send(set(itertools.chain(project.maintainers.all(),
                        team.coordinators.all())), nt, context)
            else:
                messages.info(request, _(
                    "You are not in the '%s' team."
                    ) % team.language.name)

        except IntegrityError, e:
            transaction.rollback()
            logger.error("Something weird happened: %s" % str(e))

    return HttpResponseRedirect(reverse("team_detail",
                                        args=[project_slug, language_code]))


# Team Creation
@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_project_private_perm,
    (Project, 'slug__exact', 'project_slug'))
@transaction.commit_on_success
def team_request(request, project_slug):

    if request.POST:
        language_pk = request.POST.get('language', None)
        if not language_pk:
            messages.error(request, _(
                "Please select a language before submitting the form."))
            return HttpResponseRedirect(reverse("project_detail",
                                        args=[project_slug,]))


        project = get_object_or_404(Project, slug=project_slug)

        language = get_object_or_404(Language, pk=int(language_pk))

        try:
            team = Team.objects.get(project__pk=project.pk,
                language__pk=language.pk)
            messages.warning(request,_(
                "'%s' team already exists.") % team.language.name)
        except Team.DoesNotExist:
            try:
                team_request = TeamRequest.objects.get(project__pk=project.pk,
                    language__pk=language.pk)
                messages.warning(request, _(
                    "A request to create the '%s' team already exists.")
                    % team_request.language.name)
            except TeamRequest.DoesNotExist:
                try:
                    # send pre_team_request signal
                    cla_sign = 'cla_sign' in request.POST and \
                            request.POST['cla_sign']
                    cla_sign = cla_sign and True
                    pre_team_request.send(sender='request_team_view',
                                          project=project,
                                          user=request.user,
                                          cla_sign=cla_sign)

                    team_request = TeamRequest(project=project,
                        language=language, user=request.user)
                    team_request.save()
                    messages.info(request, _(
                        "You requested creation of the '%s' team.")
                        % team_request.language.name)

                    # ActionLog & Notification
                    # TODO: Use signals
                    nt = 'project_team_requested'
                    context = {'team_request': team_request,
                               'sender': request.user}

                    # Logging action
                    action_logging(request.user, [project], nt, context=context)

                    if settings.ENABLE_NOTICES:
                        # Send notification for those that are observing this project
                        txnotification.send_observation_notices_for(project,
                                signal=nt, extra_context=context)
                        # Send notification for maintainers
                        notification.send(project.maintainers.all(), nt, context)

                except IntegrityError, e:
                    transaction.rollback()
                    logger.error("Something weird happened: %s" % str(e))
                except ClaNotSignedError, e:
                    messages.error(request, _(
                        "You need to sign the Contribution License Agreement "\
                        "for this project before you submit a team creation "\
                        "request."
                    ))

    return HttpResponseRedirect(reverse("project_detail", args=[project_slug,]))


pr_team_request_approve=(("granular", "project_perm.maintain"),)
@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_team_request_approve,
    (Project, "slug__exact", "project_slug"),)
@transaction.commit_on_success
def team_request_approve(request, project_slug, language_code):

    team_request = get_object_or_404(TeamRequest, project__slug=project_slug,
        language__code=language_code)
    project = team_request.project

    if request.POST:
        try:
            team = Team(project=team_request.project,
                language=team_request.language, creator=request.user)
            team.save()
            team.coordinators.add(team_request.user)
            team.save()
            team_request.delete()
            messages.success(request, _(
                "You approved the '%(team)s' team requested by '%(user)s'."
                ) % {'team':team.language.name, 'user':team_request.user})

            # ActionLog & Notification
            # TODO: Use signals
            nt = 'project_team_added'
            context = {'team': team,
                       'sender': request.user}

            # Logging action
            action_logging(request.user, [project, team], nt, context=context)

            if settings.ENABLE_NOTICES:
                # Send notification for those that are observing this project
                txnotification.send_observation_notices_for(project,
                        signal=nt, extra_context=context)
                # Send notification for maintainers and coordinators
                notification.send(set(itertools.chain(project.maintainers.all(),
                    team.coordinators.all())), nt, context)

        except IntegrityError, e:
            transaction.rollback()
            logger.error("Something weird happened: %s" % str(e))

    return HttpResponseRedirect(reverse("project_detail",
                                        args=[project_slug,]))


pr_team_request_deny=(("granular", "project_perm.maintain"),)
@access_off(team_off)
@login_required
@one_perm_required_or_403(pr_team_request_deny,
    (Project, "slug__exact", "project_slug"),)
@transaction.commit_on_success
def team_request_deny(request, project_slug, language_code):

    team_request = get_object_or_404(TeamRequest, project__slug=project_slug,
        language__code=language_code)
    project = team_request.project

    if request.POST:
        try:
            team_request.delete()
            messages.success(request, _(
                "You rejected the request by '%(user)s' for a '%(team)s' team."
                ) % {'team':team_request.language.name,
                     'user':team_request.user})

            # ActionLog & Notification
            # TODO: Use signals
            nt = 'project_team_request_denied'
            context = {'team_request': team_request,
                       'performer': request.user,
                       'sender': request.user}

            # Logging action
            action_logging(request.user, [project], nt, context=context)

            if settings.ENABLE_NOTICES:
                # Send notification for those that are observing this project
                txnotification.send_observation_notices_for(project,
                        signal=nt, extra_context=context)
                # Send notification for maintainers and the user
                notification.send(set(itertools.chain(project.maintainers.all(),
                    [team_request.user])), nt, context)

        except IntegrityError, e:
            transaction.rollback()
            logger.error("Something weird happened: %s" % str(e))

    return HttpResponseRedirect(reverse("project_detail",
                                        args=[project_slug,]))


########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.forms import UserCreationForm, UserChangeForm
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _

from transifex.txcommon.fields import UnicodeRegexField


help_text = _("Required. 30 characters or fewer. Unicode alphanumeric "
              "characters only (letters, digits and underscores).")

error_message = _("This value must contain only unicode letters, "
                  "numbers and underscores.")

# Overrides django.contrib.auth.forms.UserCreationForm and changes
# username to accept unicode character in the username.
class UserCreationForm(UserCreationForm):
    # The regex must be a string
    username = UnicodeRegexField(label=_("Username"), max_length=30,
        regex=u'^\w+$', help_text=help_text, error_message=error_message)

# Overrides django.contrib.auth.forms.UserChangeForm and changes
# username to accept unicode character in the username.
class UserChangeForm(UserChangeForm):
    # The regex must be a string
    username = UnicodeRegexField(label=_("Username"), max_length=30,
        regex=u'^\w+$', help_text=help_text, error_message=error_message)

class UserProfileAdmin(UserAdmin):
    list_display = ('username', 'email', 'first_name', 'last_name', 'last_login',
        'date_joined', 'is_active', 'is_staff',)
    form = UserChangeForm
    add_form = UserCreationForm

admin.site.unregister(User)
admin.site.register(User, UserProfileAdmin)

########NEW FILE########
__FILENAME__ = cache
# -*- coding: utf-8 -*-

"""
Cache-related functionality.
"""

from django.core.cache import cache
from django.conf import settings
from django.template import Context
from django.template.loader import get_template
from django.templatetags.cache import CacheNode
from django.utils.hashcompat import md5_constructor
from django.utils.http import urlquote
from transifex.txcommon.log import logger


def invalidate_template_cache(fragment_name, *variables):
    """This function invalidates a template cache.

    The template cache is named `fragment_name` and the variables are
    included in *variables. For example:

    {% cache 500 project_details project.slug LANGUAGE_CODE%}
        ...
    {% endcache %}

    We invalidate this by calling:
     -  invalidate_template_cache("project_details", project.slug)
    """
    for lang,code in settings.LANGUAGES:
        cur_vars = list(variables)
        cur_vars.append(unicode(lang))
        args = md5_constructor(u':'.join([urlquote(var) for var in cur_vars]))
        cache_key = 'template.cache.%s.%s' % (fragment_name, args.hexdigest())
        cache.delete(cache_key)


def update_template_cache(template_name, fragment_names, key_vars, context):
    """Update the template cache with the new data.

    The caches will be invalidated in the order given.
    """
    logger.debug("Invalidating %s in %s" % (fragment_names, template_name))
    t = get_template(template_name)
    nodes = t.nodelist.get_nodes_by_type(CacheNode)
    for f_name in fragment_names:
        for node in nodes:
            if f_name == node.fragment_name:
                set_fragment_content(node, key_vars, context)
                break


def set_fragment_content(node, key_vars, context):
    """Set the rendered content of a template fragment."""
    try:
        for code, lang in settings.LANGUAGES:
            cur_vars = list(key_vars)
            cur_vars.append(unicode(code))
            args = md5_constructor(u':'.join([urlquote(var) for var in cur_vars]))
            cache_key = 'template.cache.%s.%s' % (node.fragment_name, args.hexdigest())
            context['use_l10n'] = True
            context['LANGUAGE_CODE'] = code
            value = node.nodelist.render(context=Context(context))
            cache.set(cache_key, value, settings.CACHE_MIDDLEWARE_SECONDS)
    except Exception, e:
        invalidate_template_cache(node.fragment_name, key_vars.keys())


########NEW FILE########
__FILENAME__ = commands
import os
import subprocess
from transifex.txcommon.log import logger

from django.core.files.uploadedfile import UploadedFile
from transifex.txcommon.log import logger

def python_to_args(**kwargs):
    """
    Convert function arguments to command line ones.

    Designed for use with the subprocess module.

    >>> python_to_args(baz=value, bar=True, v=True, f='foo')
    ['-v', '--bar', '--baz=foo', '-f', 'bar']

    """
    kwarglist = []
    for k,v in kwargs.iteritems():
        if len(k) > 1:
            k = k.replace('_','-')
            if v is True:
                kwarglist.append("--%s" % k)
            elif v is not None and type(v) is not bool:
                kwarglist.append("--%s=%s" % (k,v))
        else:
            if v is True:
                kwarglist.append("-%s" % k)
            elif v is not None and type(v) is not bool:
                kwarglist.append("-%s" % k)
                kwarglist.append(str(v))
    return kwarglist


class CommandError(Exception):
    def __init__(self, command, status, stderr=None, stdout=None):
        self.stderr = stderr
        self.stdout = stdout
        self.status = status
        self.command = command

    def __str__(self):
        return repr("%s returned exit status %d" %
                    (str(self.command), self.status))


def run_command(command, *args, **kw):
    """
    Handle shell command execution.

    Consume and return the returned information (stdout).

    ``command``
        The command argument list to execute

    ``cwd``
        Use cwd as the working dir.

    ``with_extended_output``
        Whether to return a (status, stdout, stderr) tuple.

    ``with_exceptions``
        Whether to raise an exception when command returns a non-zero status.

    ``with_raw_output``
        Whether to avoid stripping off trailing whitespace.

    ``convert_args``
        Converts python arguments to command line arguments.

    ``env``
        A dictionary mapping environment variables to be used with the command.

    Returns
        str(output)                     # extended_output = False (Default)
        tuple(int(status), str(stdout), str(stderr)) # extended_output = True
    """
    _input= kw.pop('_input', None)
    cwd = kw.pop('cwd', os.getcwd())

    with_extended_output = kw.pop('with_extended_output', False)
    with_exceptions = kw.pop('with_exceptions', True)
    with_raw_output = kw.pop('with_raw_output', False)
    env = kw.pop('env', None)

    # if command is a string split to a list
    if isinstance(command, basestring):
        command = command.split()

    # if more kwargs are given, convert them to command line args
    if kw:
        kwarglist = python_to_args(**kw)
    else:
        kwarglist = []
    command += kwarglist + list(args)

    # If stdin is a string, create a pipe so we can write the contents
    if _input:
        stdin = subprocess.PIPE
    else:
        stdin = None

    logger.debug("Running low-level command '%s'" % ' '.join(command))
    logger.debug("  CWD: '%s'" % cwd)

    # Start the process
    try:
        proc = subprocess.Popen(command, cwd=cwd, stdin=stdin,
            stderr=subprocess.PIPE, stdout=subprocess.PIPE, env=env,)
    except OSError, e:
        status = "Command '%s' not found." % command[0]
        logger.debug(status)
        raise CommandError(command, status, '', '')

    # Write the contents to the pipe
    if _input:
        if isinstance(_input, basestring):
            proc.stdin.write(_input)
        elif isinstance(_input, (file, UploadedFile)):
            _input.seek(0)
            for content in _input:
                proc.stdin.write(content)

    # Wait for the process to return
    stdout_value, stderr_value = proc.communicate()
    status = proc.returncode

    # Strip off trailing whitespace by default
    if not with_raw_output:
        stdout_value = stdout_value.rstrip()
        stderr_value = stderr_value.rstrip()

    if with_exceptions and status != 0:
        logger.debug('stdout: %s' % stdout_value)
        logger.error(stderr_value)
        raise CommandError(command, status, stderr_value, stdout_value)

    # Allow access to the command's status code
    if with_extended_output:
        return (status, stdout_value, stderr_value)
    else:
        return stdout_value


########NEW FILE########
__FILENAME__ = context_processors
# -*- coding: utf-8 -*-
from django.conf import settings
from django.utils import translation

def site_section(request):
    """
    Return a ContextProcessor with the tokens from the URL as a list.

    Eg. Templates accessed at a URL '/projects/foo/' will have a
    RequestContext processor with ``site_section`` available and equal to
    ['projects', 'foo'].
    
    To access in templates, use something like:
    
    {% if site_section.0 == "projects" %}...
    """

    try:
        ret = request.path.split('/')
    except IndexError:
        ret = ''
    # Avoid empty last token if URL ends with /
    if ret[-1] == '':
        ret.pop()
    return { 'site_section': ret[1:] }

def site_url_prefix_processor(request):
    """
    Inserts context variable SITE_URL_PREFIX for absolute URLs
    """
    return {"SITE_URL_PREFIX" : request.build_absolute_uri("/")[:-1] }


def bidi(request):
    """Adds to the context BiDi related variables

    LANGUAGE_DIRECTION -- Direction of current language ('ltr' or 'rtl')
    """
    if translation.get_language_bidi():
        extra_context = { 'LANGUAGE_DIRECTION':'rtl', }
    else:
        extra_context = { 'LANGUAGE_DIRECTION':'ltr', }
    return extra_context

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-
import base64, datetime, re
from django import forms
from django.conf import settings
from django.db.models.signals import post_save
from django.db.models.fields.related import OneToOneField
from django.db import models
from django.utils.text import compress_string
from django.utils.translation import ugettext_lazy as _
from south.modelsinspector import add_introspection_rules

import cPickle as pickle

def uncompress_string(s):
    """Helper function to reverse django.utils.text.compress_string."""
    import cStringIO, gzip
    try:
        zbuf = cStringIO.StringIO(s)
        zfile = gzip.GzipFile(fileobj=zbuf)
        ret = zfile.read()
        zfile.close()
    except:
        ret = s
    return ret


class ChainerManager(models.Manager):
    """
    Custom manager that has the ability to chain its methods to each other or
    to standard queryset filters.

    It needs to receive a custom ``django.db.model.query.QuerySet`` in order
    to be able to chain the methods.

    Example:

    NewsQuerySet(models.query.QuerySet):
        def live(self):
            return self.filter(state='published')

        def interesting(self):
            return self.filter(interesting=True)

    ChainerManager(NewsQuerySet).live().interesting()
    [<NewsItem: ...>]

    Usually a model will use this manager in the following way:

    NewsItem(models.Model):
        objects = ChainerManager(NewsQuerySet)

    Reference: http://djangosnippets.org/snippets/562/

    """
    def __init__(self, qs_class=models.query.QuerySet):
        super(ChainerManager,self).__init__()
        self.queryset_class = qs_class

    def get_query_set(self):
        return self.queryset_class(self.model)

    def __getattr__(self, attr, *args):
        try:
            return getattr(self.__class__, attr, *args)
        except AttributeError:
            return getattr(self.get_query_set(), attr, *args)


class IntegerTupleField(models.CharField):
    """
    A field type for holding a tuple of integers. Stores as a string
    with the integers delimited by colons.
    """
    __metaclass__ = models.SubfieldBase

    def formfield(self, **kwargs):
        defaults = {
            'form_class': forms.RegexField,
            # We include the final comma so as to not penalize Python
            # programmers for their inside knowledge
            'regex': r'^\((\s*[+-]?\d+\s*(,\s*[+-]?\d+)*)\s*,?\s*\)$',
            'max_length': self.max_length,
            'error_messages': {
                'invalid': _('Enter 0 or more comma-separated integers '
                    'in parentheses.'),
                'required': _('You must enter at least a pair of '
                    'parentheses containing nothing.'),
            },
        }
        defaults.update(kwargs)
        return super(IntegerTupleField, self).formfield(**defaults)

    def to_python(self, value):
        if type(value) == tuple:
            return value
        if type(value) == unicode and value.startswith('(') and \
            value.endswith(')'):
            return eval(value)
        if value == '':
            return ()
        if value is None:
            return None
        return tuple(int(x) for x in value.split(u':'))

    def get_db_prep_value(self, value, connection=None, prepared=False):
        if value is None:
            return None
        return u':'.join(unicode(x) for x in value)

    def get_db_prep_lookup(self, lookup_type, value, connection=None, prepared=False):
        if lookup_type == 'exact':
            return [self.get_db_prep_value(value)]
        else:
            raise TypeError('Lookup type %r not supported' %
                lookup_type)

    def value_to_string(self, obj):
        return self.get_db_prep_value(obj)


class ListCharField(models.CharField):
    """
    A field type for storing concatenated strings using the colon (:) char.

    This field received the values that must be concatenated as a list of
    string object, return also a list of string object whenever the database
    content is required too.
    """
    __metaclass__ = models.SubfieldBase

    def _replace(self, value):
        return [re.sub(r'(?<!\\)\:', '\:', unicode(v)) for v in value]

    # This is also called whenever setting the field value, it means that 
    # values other than a list can be attributed, such as string object.
    def to_python(self, value):
        if type(value) == list:
            return self._replace(value)
        if type(value) == unicode and value.startswith('[') and \
            value.endswith(']'):
            try:
                return self._replace(eval(value))
            except NameError:
                pass
        if value == '':
            return []
        if value is None:
            return None
        return self._replace(re.split(r'(?<!\\)\:', value))

    def get_db_prep_value(self, value, connection=None, prepared=False):
        if value is None:
            return None
        assert isinstance(value, list)
        return u':'.join(unicode(x) for x in value)


class CompressedTextField(models.TextField):
    """
    Transparently compress data before hitting the db and uncompress after
    fetching.
    """
    __metaclass__ = models.SubfieldBase

    def get_db_prep_value(self, value, connection=None, prepared=False):
        if value is not None:
            value = base64.encodestring(compress_string(pickle.dumps(value)))
        return value

    def to_python(self, value):
        if value is None: return
        try:
            value = pickle.loads(uncompress_string(base64.decodestring(value)))
        except:
            # if we can't unpickle it it's not pickled. probably we got a
            # normal string. pass
            pass
        return value

    def post_init(self, instance=None, **kwargs):
        value = self._get_val_from_obj(instance)
        if value:
            setattr(instance, self.attname, value)

    def contribute_to_class(self, cls, name):
        super(CompressedTextField, self).contribute_to_class(cls, name)
        models.signals.post_init.connect(self.post_init, sender=cls)


    def value_to_string(self, obj):
        value = self._get_val_from_obj(obj)
        return value

    def get_internal_type(self):
        return "TextField"

    def db_type(self, connection):
        db_types = {'django.db.backends.mysql':'longblob',
                    'django.db.backends.sqlite3':'blob',
                    'django.db.backends.postgres':'text',
                    'django.db.backends.postgresql_psycopg2':'text'}
        try:
            return db_types[connection.settings_dict['ENGINE']]
        except KeyError, e:
            print str(e)
            raise Exception, '%s currently works only with: %s' % (
                self.__class__.__name__,', '.join(db_types.keys()))


"""
South Introspection Extending for Custom fields
Reference: http://south.aeracode.org/docs/customfields.html#extending-introspection
"""

rules = {}
rules['IntegerTupleField'] = [
    (
        [IntegerTupleField],
        [],
        {
            "blank": ["blank", {"default": True}],
            "null": ["null", {"default": True}],
            "max_length": ["max_length", {"default": 64}],
        },
    ),
]

rules['CompressedTextField'] = [
    (
        [CompressedTextField],
        [],
        {
            "blank": ["blank", {"default": True}],
            "null": ["null", {"default": True}],
        },
    ),
]

rules['ListCharField'] = [
    (
        [ListCharField],
        [],
        {
            "blank": ["blank", {"default": True}],
            "null": ["null", {"default": True}],
        },
    ),
]

for f in rules.keys():
    add_introspection_rules(rules[f], ["^transifex\.txcommon\.db\.models\.%s" % f])

########NEW FILE########
__FILENAME__ = router
from django.conf import settings

class DatabaseAppsRouter(object):
    """
    A router to control all database operations on models for different 
    databases.

    In case an app is not set in settings.DATABASE_APPS_MAPPING, the router 
    will fallback to the `default` database.

    Settings example:

    DATABASE_APPS_MAPPING = {'app1': 'db1', 'app2': 'db2'}
    """

    def db_for_read(self, model, **hints):
        """"Point all read operations to the specific database."""
        if settings.DATABASE_APPS_MAPPING.has_key(model._meta.app_label):
            return settings.DATABASE_APPS_MAPPING[model._meta.app_label]
        return None

    def db_for_write(self, model, **hints):
        """Point all write operations to the specific database."""
        if settings.DATABASE_APPS_MAPPING.has_key(model._meta.app_label):
            return settings.DATABASE_APPS_MAPPING[model._meta.app_label]
        return None

    def allow_relation(self, obj1, obj2, **hints):
        """Allow any relation between apps that use the same database."""
        db_obj1 = settings.DATABASE_APPS_MAPPING.get(obj1._meta.app_label)
        db_obj2 = settings.DATABASE_APPS_MAPPING.get(obj2._meta.app_label)
        if db_obj1 and db_obj2:
            if db_obj1 == db_obj2:
                return True
            else:
                return False
        return None

    def allow_syncdb(self, db, model):
        """Make sure that apps only appear in the related database."""
        if db in settings.DATABASE_APPS_MAPPING.values():
            return settings.DATABASE_APPS_MAPPING.get(model._meta.app_label) == db
        elif settings.DATABASE_APPS_MAPPING.has_key(model._meta.app_label):
            return False
        return None

########NEW FILE########
__FILENAME__ = decorators
# -*- coding: utf-8 -*-
import inspect
from django.http import HttpResponseRedirect
from django.utils.http import urlquote
from django.utils.functional import wraps
from django.db.models import Model, get_model
from django.shortcuts import get_object_or_404
from django.conf import settings
from django.contrib.auth import REDIRECT_FIELD_NAME

from django.shortcuts import render_to_response
from django.template import RequestContext

from authority import permissions, get_check
from transifex.txcommon.views import permission_denied
from transifex.projects.models import Project

class access_off(object):
    """
    Decorator to check if writers and teams are disabled for a given project.

    It needs to be used in front of views that accept the key argument
    'project_slug'.

    Whenever a project has set 'anyone_submit' or the 'outsource' attribute
    this decorator will disable the access to the related view.

    The arg 'redirect_view' needs to be passed in order to specify the view
    where the user should be redirected.
    """
    def __init__(self, redirect_view):
        self.redirect_view = redirect_view

    def __call__(self, view_func):
        def _decorate(request, *args, **kwargs):
            project_slug = kwargs.get('project_slug', None)
            project = get_object_or_404(Project, slug=project_slug)
            if project.anyone_submit or project.outsource:
                return self.redirect_view(request, project=project, *args, **kwargs)
            return view_func(request, *args, **kwargs)
        return _decorate


def user_passes_test_with_403(test_func, login_url=None):
    """
    Decorator for views that checks that the user passes the given test.

    Users that fail the test will be given a 403 error.
    """
    def _dec(view_func):
        def _checklogin(request, *args, **kwargs):
            if test_func(request.user):
                return view_func(request, *args, **kwargs)
            else:
                resp = render_to_response('403.html', context_instance=RequestContext(request))
                resp.status_code = 403
                return resp
        _checklogin.__doc__ = view_func.__doc__
        _checklogin.__dict__ = view_func.__dict__
        return _checklogin
    return _dec

def perm_required_with_403(perm):
    """
    Decorator for views that checks whether a user has a particular permissions
    enabled, rendering a 403 page as necessary.

    """
    return user_passes_test_with_403(lambda u: u.has_perm(perm))


def _model_lookups_handler(model_lookups, *args, **kwargs):
    """
    Private function to handle the lookup model arguments from the decorator
    call.
    """

    lookup_list= []
    for model, lookup, varname in model_lookups:
        if varname not in kwargs:
            continue
        value = kwargs.get(varname, None)
        if value is None:
            continue
        if isinstance(model, basestring):
            model_class = get_model(*model.split("."))
        else:
            model_class = model
        if model_class is None:
            raise ValueError(
                "The given argument '%s' is not a valid model." % model)
        if inspect.isclass(model_class) and not \
                issubclass(model_class, Model):
            raise ValueError(
                'The argument %s needs to be a model.' % model)
        lookup_list.append((model_class, lookup, value))
    return lookup_list

def one_perm_required(perms, *model_lookups, **kwargs):
    """
    Decorator for views that checks whether a user has a particular permission
    enabled for an object or a general permission from the django permission
    system, redirecting to the log-in page if necessary.

    Example::

      # Permissions required for setting stats
      pr_set_stats = (
          ('granular', 'project_permission.maintain'),
          ('general',  'projects.refresh_stats'),
         #(<perm_type>, <perm_name>),
      )

      @one_perm_required_or_403(pr_set_stats,
          (Project, 'slug__contains', 'project_slug'))
      def set_stats(request, project_slug, resource_slug):
          bla bla bla

    In the example above the decorator checks for the `maintain` permission
    for a Project object, taking the project_slug from the view
    `set_stats`. If the user IS NOT a maintainer of that project, the
    second and general permission is checked.

    If at least one of the permissions checks in the list returns True, the
    access for the user is guarantee.

    The permissions are checked in the same order as they are put in the tuple
    and it is allowed to add how many permissions checks as wanted.

    CAUTION:
    This decorator implies login_required, since this is checked in the body.
    The ``allow_anonymous`` keyword allows you to use this decorator also for
    non-logged-in users. For example, we use it to limit access to the private
    projects, but at the same time allow anonymous users to see the page if the
    project is public.

    """

    login_url = kwargs.pop('login_url', settings.LOGIN_URL)
    redirect_field_name = kwargs.pop('redirect_field_name', REDIRECT_FIELD_NAME)
    redirect_to_login = kwargs.pop('redirect_to_login', True)
    allow_anonymous = kwargs.pop('anonymous_access', False)
    def decorate(view_func):
        def decorated(request, *args, **kwargs):
            objs = []
            if request.user.is_authenticated() or allow_anonymous:
                lookup_list = _model_lookups_handler(model_lookups, *args, **kwargs)
                granted = False
                for perm_type, perm in perms:
                    if perm_type == "granular":
                        for model_class, lookup, value in lookup_list:
                            objs.append(get_object_or_404(model_class, **{lookup: value}))
                        check = get_check(request.user, perm)
                        if check is not None:
                            granted = check(*objs)
                    else:
                        if request.user.has_perm(perm):
                            granted = True
                    if granted:
                        return view_func(request, *args, **kwargs)
            if redirect_to_login:
                path = urlquote(request.get_full_path())
                tup = login_url, redirect_field_name, path
                return HttpResponseRedirect('%s?%s=%s' % tup)
            return permission_denied(request)
        return wraps(view_func)(decorated)
    return decorate

def one_perm_required_or_403(perms, *args, **kwargs):
    """
    Decorator that wraps the one_perm_required_or_403 decorator and returns a
    permission denied (403) page instead of redirecting to the login URL.
    """
    kwargs['redirect_to_login'] = False
    return one_perm_required(perms, *args, **kwargs)

def admin_required(fn):
    """
    admin decorator: check whether the user is an admin
    """
    def _check(request, *args, **kwargs):
        user = request.user
        if not user.is_superuser:
            resp = render_to_response('403.html', context_instance =
                RequestContext(request))
            resp.status_code = 403
            return resp
        return fn(request, args, kwargs)
    return _check

########NEW FILE########
__FILENAME__ = feeds
from django.core.exceptions import ObjectDoesNotExist
from django.conf import settings
from django.contrib.syndication.feeds import FeedDoesNotExist, Feed as FeedClass
from django.contrib.syndication.views import Feed
from django.contrib.sites.models import Site
from django.shortcuts import get_object_or_404
from django.utils.translation import ugettext_lazy as _
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.utils.timesince import timesince

from transifex.actionlog.models import LogEntry
import re

from notification.feeds import NoticeUserFeed


class TxNoticeUserFeed(NoticeUserFeed, FeedClass):
    pass

class UserFeed(Feed):
    def get_object(self, request, username, url='feed/admin'):
        if not username:
            raise ObjectDoesNotExist
        return get_object_or_404(User, username__exact=username)

    def title(self, obj):
        return _("Recent activities by %(user)s" % {'user': obj.username })

    def description(self, obj):
        return _("Recent activities by user %s."%obj.username)

    def link(self, obj):
        if not obj:
            raise FeedDoesNotExist
        return reverse('profile_public', args=[obj.username])

    def items(self, obj):
        return LogEntry.objects.by_user_and_public_projects(obj)

    def item_title(self, item):
        return _(item.action_type.display + ' ' + timesince(item.action_time) + ' ago.')

    def item_link(self, item):
        if not item:
            raise LogEntry.DoesNotExist
        if item.message:
            match = re.search(r'href=[\'"]?([^\'" >]+)', item.message)
            if match:
                return match.group(1)
            else:
                return '/'
        else:
            return '/'

    def item_description(self, item):
        return _(item.message or 'None')


########NEW FILE########
__FILENAME__ = fields
import re
from django import forms

class UnicodeRegexField(forms.RegexField):
    """
    Return a regex field that allows unicode chars.

    The ``regex`` parameter needs to be a basestring for that to happen.
    """
    def __init__(self, regex, max_length=None, min_length=None,
        error_message=None, *args, **kwargs):

        if isinstance(regex, basestring):
            regex = re.compile(regex, re.UNICODE)

        super(UnicodeRegexField, self).__init__(regex, max_length,
            min_length, *args, **kwargs)


########NEW FILE########
__FILENAME__ = filters
import django_filters
from actionlog.models import LogEntry

class LogEntryFilter(django_filters.FilterSet):
    action_time = django_filters.DateRangeFilter()
    class Meta:
        model = LogEntry
        fields = ['action_type','action_time']

########NEW FILE########
__FILENAME__ = forms
from django import forms

from contact_form.forms import ContactForm
from tagging.forms import TagField
from tagging_autocomplete.widgets import TagAutocomplete
from userena.forms import EditProfileForm as UserenaEditProfileForm,\
                          AuthenticationForm
from userena.utils import get_profile_model


class EditProfileForm(UserenaEditProfileForm):
    def __init__(self, *args, **kw):
        super(forms.ModelForm, self).__init__(*args, **kw)

    def clean_tags(self):
        user_tags_list = self.cleaned_data['tags']
        tags = list(set([tag.strip() for tag in user_tags_list.split(',')])) or []
        for i in tags:
            if not i.strip():
                tags.remove(i)
        tags.append(u'')
        user_tags_list = ', '.join(tags)
        return user_tags_list

    class Meta:
        model = get_profile_model()
        exclude = ('user', 'privacy', 'mugshot', )
        fields = (
            'first_name', 'last_name', 'location', 'languages', 'tags', 'blog',
            'linked_in', 'twitter', 'about', 'looking_for_work'
        )

class CustomContactForm(ContactForm):
    subject = forms.CharField(max_length=150, widget=forms.TextInput())

    def __init__(self, data=None, files=None, request=None, *args, **kwargs):
        super(CustomContactForm, self).__init__(data=data, files=files,
            request=request, *args, **kwargs)
        self.fields.keyOrder = ['name', 'email', 'subject', 'body']

class TxAuthenticationForm(AuthenticationForm):
    def __init__(self, *args, **kwargs):
        super(TxAuthenticationForm, self).__init__(*args, **kwargs)
        self.fields['remember_me'].initial = True

########NEW FILE########
__FILENAME__ = utils
import re, operator
from django.conf import settings

from haystack import connections
from haystack.backends.solr_backend import SolrSearchBackend
from haystack.constants import DEFAULT_ALIAS
from haystack.inputs import Raw
from haystack.query import SQ

from transifex.txcommon.log import logger

def support_fulltext_search(using=DEFAULT_ALIAS):
    """
    Method to check whether django-haystack backend used supports fulltext 
    search or not.
    """

    if isinstance(connections[using].get_backend(), SolrSearchBackend):
        return True
    return False

def fulltext_project_search_filter(string):
    """
    Take a string and return a filter to be used on the SearchQuerySet.

    It splits string/phrases into words and search them individually with
    the operator OR using different boost values for 3 fields: 'name', 
    'description' and 'text'. The 'text' field uses fuzzy match.

    The parameter `string` must be passed through the function
    prepare_solr_query_string() before, to ensure the string don't break the
    query.

    >>> value = "Test <br/> %s"
    >>> fulltext_project_search_filter(prepare_solr_query_string(value))
    <SQ: OR (name__exact=Test^1.2 OR description__exact=Test^1.1 OR text__exact=Test~)>
    """
    if string:
        filters = []
        for w in string.split():
            filters.append(SQ(slug=Raw('%s^1.2' % w)))
            filters.append(SQ(name=Raw('%s^1.2' % w)))
            filters.append(SQ(description=Raw('%s^1.1' % w)))
            filters.append(SQ(text=Raw('"%s~"' % w)))
        return reduce(operator.__or__, filters)

def fulltext_fuzzy_match_filter(string):
    """
    Take a string and return a filter to be used on the SearchQuerySet.

    It splits string/phrases into words and search them individually with
    the operator OR using fuzzy match on each word.

    The parameter `string` must be passed through the function
    prepare_solr_query_string() before, to ensure the string don't break the
    query.

    >>> value = "Test <a href="">link</a> for %s"
    >>> fulltext_fuzzy_match_filter(prepare_solr_query_string(value)):
    <SQ: OR (text__exact=Test~ OR text__exact=link~ OR text__exact=for~)>
    """

    # TODO: Searching in this way might be slow. We should investigate 
    # alternatives for it.
    if string:
        return reduce(operator.__or__, 
            [SQ(text=Raw('"%s~"' % w)) for w in string.split()[:1000]])
    else:
        return SQ(text='""')

def prepare_solr_query_string(value):
    """
    Prepare text, striping special chars, HTML tags, prinf vars and extra 
    spaces to be used on a SOLR query.

    >>> value = "The <a href="">link</a> for %s and %(ops)s are NOT right."
    >>> prepare_solr_query_string(value)
    'The link for and are not right.'
    """
    from haystack.query import SearchQuerySet
    value = clean_tags(value)
    value = clean_printf_vars(value)
    value = clean_especial_chars(value)
    value = clean_extra_spaces(value)
    for word in SearchQuerySet().query.backend.RESERVED_WORDS:
        value = value.replace(word, word.lower())
    return value


def clean_especial_chars(value):
    """
    Remove SOLR special characters.

    Taken from SearchQuerySet().query.backend.RESERVED_CHARACTERS.
    We decided to remove them instead of escaping to improve the searching
    results

    >>> strip_chars('?:";')
    ''
    """
    matches = ['\\', '+', '-', '&', '|', '!', '(', ')', '{', '}', '[', ']', 
        '^', '~', '*', '?', ':', '"', ';']
    for m in matches:
        value = value.replace(m, '')
    return value.strip()


def clean_tags(value):
    """
    Return the given HTML with all tags stripped.

    >>> strip_tags('<a href="">link</a>')
    'link'
    """
    return re.sub(r'<[^>]*?>', '', value) 


def clean_extra_spaces(value):
    """
    Remove consecutive spaces from the given value.

    >>> strip_extra_spaces('foo    bar  baz')
    'foo bar baz'
    """
    p = re.compile(r'\s+')
    return p.sub(' ', value)


def clean_printf_vars(value):
    """
    Remove printf vars from the given value.

    >>> strip_printf_vars('foo %s bar $(ops)s')
    'foo  bar '
    """
    printf_pattern = re.compile('%((?:(?P<ord>\d+)\$|\((?P<key>\w+)\))'\
        '?(?P<fullvar>[+#-]*(?:\d+)?(?:\.\d+)?(hh\|h\|l\|ll)?(?P<type>[\w%])))')

    matches = re.finditer(printf_pattern, value)
    for m in matches:
        value = value.replace(m.group(0), '' )

    return value

########NEW FILE########
__FILENAME__ = i18n
# -*- coding: utf-8 -*-
import os
import codecs
import logging
from django.utils.translation import ugettext as _

# See https://docs.djangoproject.com/en/dev/ref/settings/#languages
gettext = lambda s: s


def available_languages(localedir):
    """Return available languages in the LINGUAS file."""
    available_languages = []
    linguas_file = os.path.join(localedir, 'LINGUAS')
    if not os.path.exists(linguas_file):
        raise EnvironmentError("The file 'locale/LINGUAS' cannot be read.")
    try:
        linguas = codecs.open(linguas_file, 'r')
        for lang in linguas.readlines():
            lang = lang.strip()
            if lang and not lang.startswith('#'):
                code, name = lang.split(None, 1)
                available_languages.append((code, gettext(name)))
    except IOError, e:
        logging.error(
            'The LINGUAS file (%(file)s) could not be opened: %(exc)s' %
            {'file': linguas_file, 'exc': e}
        )
    return available_languages

########NEW FILE########
__FILENAME__ = listeners
from django.conf import settings
from django.contrib.auth.models import Group, SiteProfileNotAvailable
from django.core.exceptions import ImproperlyConfigured
from django.db import models, transaction
from transifex.txcommon.log import logger

if not settings.AUTH_PROFILE_MODULE:
    raise SiteProfileNotAvailable
try:
    app_label, model_name = settings.AUTH_PROFILE_MODULE.split('.')
    Profile = models.get_model(app_label, model_name)
except (ImportError, ImproperlyConfigured):
    raise SiteProfileNotAvailable
if not Profile:
    raise SiteProfileNotAvailable

@transaction.commit_manually
def add_user_to_registered_group(sender, **kwargs):
    """
    Add any user created on the system to the `registered` group.

    This signal must be called by the post_save signal from the User class.
    This signal also creates a public profile for the user if it does not exist.
    """
    if 'created' in kwargs and kwargs['created'] is True:

        user = kwargs['instance']

        # Add user to registered group
        group, created = Group.objects.get_or_create(name='registered')
        user.groups.add(group)

        sid = transaction.savepoint()

        # Create Public Profile
        try:
            profile, created = Profile.objects.get_or_create(user=user)
            profile.save()
            transaction.savepoint_commit(sid)
        except:
            logger.debug("User profile not created.")
            transaction.savepoint_rollback(sid)

    transaction.commit()

def twitter_profile_values(sender, user, response, details, **kwargs):
    """
    For users that login through Twitter, set the ``twitter`` field in
    their profile to their Twitter screen name.

    Must return True or False.
    """
    profile = user.get_profile()
    if not profile.twitter:
        screen_name = response.get('screen_name')
        profile.twitter = 'http://twitter.com/%s' % screen_name
        profile.save()

    return True

def linkedin_profile_values(sender, user, response, details, **kwargs):
    """
    For users that login through LinkedIn, set the ``linked_in`` field in
    their profile to their public profile URL.

    Must return True or False.
    """
    profile = user.get_profile()
    if not profile.linked_in:
        public_profile = response.get('public-profile-url', None)
        if public_profile:
            profile.linked_in = public_profile
            profile.save()

    return True

########NEW FILE########
__FILENAME__ = receivers

"""
Logging receivers for signals by models, etc.
"""

def model_named(sender, message='', **kwargs):
    """
    Receive signals for objects with a .name attribute.
    """
    from txcommon.log import logger
    obj = kwargs['instance']
    logger.debug("%(msg)s %(obj)s %(name)s" %
                 {'msg': message,
                  'obj': sender.__name__,
                  'name': getattr(obj, 'name', '')})

def pre_save_named(sender, **kwargs):
    model_named(sender, message='About to save:', **kwargs)

def post_save_named(sender, **kwargs):
    model_named(sender, message='Saved:', **kwargs)

def pre_delete_named(sender, **kwargs):
    model_named(sender, message='About to delete:', **kwargs)

def post_delete_named(sender, **kwargs):
    model_named(sender, message='Deleted:', **kwargs)

########NEW FILE########
__FILENAME__ = lookups
from django.contrib.auth.models import User
from django.db.models import Q

def format_user(user):
    """
    Format user object to be displayed as username + full name if possible.
    """
    user_data = [user.username]
    
    full_name = user.get_full_name()
    if full_name:
        user_data.append(full_name)
    
    return u' - '.join(user_data)


class UsersLookup(object):
    """A lookup class, used by django-ajax-select app to search model data."""

    def get_query(self,q,request):
        """
        Return a query set.

        You also have access to request.user if needed.
        """
        return User.objects.filter(Q(username__istartswith=q) | 
            Q(first_name__istartswith=q) | Q(last_name__istartswith=q))

    def format_item(self,user):
        """Simple display of an object when displayed in the list of objects """
        return unicode(user)

    def format_result(self,user):
        """
        A more verbose display, used in the search results display.

        It may contain html and multi-lines.
        """
        return format_user(user)

    def get_objects(self,ids):
        """Given a list of ids, return the objects ordered."""
        return User.objects.filter(pk__in=ids).order_by('username','last_name')

########NEW FILE########
__FILENAME__ = txcompilemessages
import os
import glob
from django.core.management.base import CommandError, BaseCommand
from optparse import make_option
from django.core.management.commands.compilemessages import compile_messages

class Command(BaseCommand):
    option_list = BaseCommand.option_list + (
        make_option('--locale', '-l', default=None, dest='locale',
            help='The locale to process (e.g. pt_BR). Default is to process all.'),
    )
    help = "Compiles .po files to .mo files for use with builtin gettext support for Transifex."

    requires_model_validation = False
    can_import_settings = False

    def handle(self, *args, **options):
        locale = options.get('locale')

        # The hacking part is here
        if not locale:
            if os.path.isdir(os.path.join('conf', 'locale')):
                localedir = os.path.abspath(os.path.join('conf', 'locale'))
            elif os.path.isdir('locale'):
                localedir = os.path.abspath('locale')
            else:
                raise CommandError("This script should be run from the Transifex project tree.")

            # Only for directories under the locale dir, compile_messages
            locale_dirs = filter(os.path.isdir, glob.glob('%s/*' % localedir))
            for locale_dir in locale_dirs:
                locale = os.path.basename(locale_dir)
                compile_messages(self.stderr, locale)
        else:
            compile_messages(self.stderr, locale)

########NEW FILE########
__FILENAME__ = txcreatedirs
import os, sys
from django.core.management.base import NoArgsCommand

def transifex_paths():
    from django.conf import settings as s
    # Scratch dir
    yield s.SCRATCH_DIR
    # Msgmerge dir
    yield s.STORAGE_DIR
    # Log path
    yield s.LOG_PATH


class Command(NoArgsCommand):
    help = 'Create required directories'

    requires_model_validation = True
    can_import_settings = True

    def handle_noargs(self, **options):
        for path in transifex_paths():
            try:
                os.makedirs(path)
                sys.stdout.write((u"Creating %s\n" % path).encode('UTF-8'))
            except OSError, e:
                sys.stdout.write((u"Error creating %s: %s\n" % (path, e.strerror)).encode('UTF-8'))


########NEW FILE########
__FILENAME__ = txcreatenoticetypes
import os
from django.core.management.base import NoArgsCommand
from notification import models as notification
from transifex.txcommon.notifications import NOTICE_TYPES

def create_notice_types():
    for n in NOTICE_TYPES:
        notification.create_notice_type(n["label"], n["display"],
                                        n["description"], n["default"])


class Command(NoArgsCommand):
    help = ('Create or Update the notice types used in the ActionLog and '
           'Notification apps')

    requires_model_validation = True
    can_import_settings = False

    def handle_noargs(self, **options):
        verbose = int(options.get('verbosity'))
        if verbose:
            self.stdout.write("Creating or updating notice types\n")
        create_notice_types()
        if verbose:
            self.stdout.write(
                "Default set of notice types initialized successfully.\n"
            )

########NEW FILE########
__FILENAME__ = txmakemessages
import os
import glob
from django.core.management.base import CommandError, BaseCommand
from optparse import make_option
from django.core.management.commands.makemessages import (make_messages,
                                                          handle_extensions)

class Command(BaseCommand):
    option_list = BaseCommand.option_list + (
        make_option('--locale', '-l', default=None, dest='locale',
            help='Creates or updates the message files only for the given locale (e.g. pt_BR).'),
        make_option('--domain', '-d', default='django', dest='domain',
            help='The domain of the message files (default: "django").'),
        make_option('--all', '-a', action='store_true', dest='all',
            default=False, help='Reexamines all source code and templates for new translation strings and updates all message files for all available languages.'),
        make_option('--extension', '-e', dest='extensions',
            help='The file extension(s) to examine (default: ".html", separate multiple extensions with commas, or use -e multiple times)',
            action='append'),
    )
    help = "Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the 'locale' directory of Transifex."

    requires_model_validation = False
    can_import_settings = False

    def handle(self, *args, **options):
        if len(args) != 0:
            raise CommandError("Command doesn't accept any arguments")

        locale = options.get('locale')
        domain = options.get('domain')
        verbosity = int(options.get('verbosity'))
        process_all = options.get('all')
        extensions = options.get('extensions') or ['html']

        if domain == 'djangojs':
            extensions = []
        else:
            extensions = handle_extensions(extensions)

        if '.js' in extensions:
            raise CommandError("JavaScript files should be examined by using the special 'djangojs' domain only.")

        # The hacking part is here
        if process_all:
            if os.path.isdir(os.path.join('conf', 'locale')):
                localedir = os.path.abspath(os.path.join('conf', 'locale'))
            elif os.path.isdir('locale'):
                localedir = os.path.abspath('locale')
            else:
                raise CommandError("This script should be run from the Transifex project tree.")

            # Only for directories under the locale dir, make_messages
            locale_dirs = filter(os.path.isdir, glob.glob('%s/*' % localedir))
            for locale_dir in locale_dirs:
                locale = os.path.basename(locale_dir)
                make_messages(locale, domain, verbosity, False, extensions)
        else:
            make_messages(locale, domain, verbosity, process_all, extensions)

# Backwards compatibility
# http://code.djangoproject.com/changeset/9110
if not [opt for opt in Command.option_list if opt.dest=='verbosity']:
    Command.option_list += (
        make_option('--verbosity', '-v', action="store", dest="verbosity",
            default='1', type='choice', choices=['0', '1', '2'],
            help="Verbosity level; 0=minimal output, 1=normal output, 2=all output"),

    )

########NEW FILE########
__FILENAME__ = tx_static_last_modified
# -*- coding: utf-8 -*-

"""
Set the datetime of the last update of static pages.
"""

from __future__ import absolute_import
import hashlib
from datetime import datetime
from optparse import make_option
from django.core.management.base import BaseCommand
from datastores.txredis import TxRedisMapper, redis_exception_handler
from ...utils import STATIC_CACHE_KEY_LAST_MODIFIED, STATIC_CACHE_KEY_ETAG


class Command(BaseCommand):

    option_list = BaseCommand.option_list + (
        make_option(
            '--datetime', default=datetime.utcnow(), dest='when',
            help='The datetime of the last update.'
        ),
    )
    help = 'Set the date and time, when static pages in Transifex were updated.'

    def handle(self, *args, **options):
        when = options.get('when')
        self._set_datetime_mark(when)

    @redis_exception_handler
    def _set_datetime_mark(self, when):
        """Set the datetime mark for static pages to when."""
        r = TxRedisMapper()
        r.set(STATIC_CACHE_KEY_LAST_MODIFIED, data=when)
        etag = hashlib.md5(when.isoformat()).hexdigest()
        r.set(STATIC_CACHE_KEY_ETAG, data=etag)



########NEW FILE########
__FILENAME__ = 0001_initial

from south.db import db
from django.db import models
from transifex.txcommon.models import *

class Migration:

    def forwards(self, orm):
        "Write your forwards migration here"


    def backwards(self, orm):
        "Write your backwards migration here"


    models = {

    }

    complete_apps = ['txcommon']

########NEW FILE########
__FILENAME__ = 0002_release_06_07
# -*- coding: utf-8 -*-

from south.db import db
from django.db import models
from transifex.txcommon.models import *
from userprofile.countries import CountryField

class Migration:

    depends_on = (
        ("languages", "0001_initial"),
    )

    def forwards(self, orm):

        # Adding model 'Profile'
        db.create_table('txcommon_profile', (
            ('looking_for_work', models.BooleanField(_('Looking for work?'), default=False)),
            ('about', models.TextField(_('About yourself'), max_length=140, blank=True)),
            ('surname', models.CharField(_('Surname'), max_length=255, blank=True)),
            ('firstname', models.CharField(_('First name'), max_length=255, blank=True)),
            ('country', CountryField(null=True, blank=True)),
            ('twitter', models.URLField(_('Twitter'), blank=True)),
            ('native_language', models.ForeignKey(orm['languages.Language'], null=True, verbose_name=_('Native Language'), blank=True)),
            ('longitude', models.DecimalField(null=True, max_digits=10, decimal_places=6, blank=True)),
            ('creation_date', models.DateTimeField(default=datetime.datetime(2009, 7, 30, 13, 13, 50, 217271))),
            ('blog', models.URLField(_('Blog'), blank=True)),
            ('user', models.ForeignKey(orm['auth.User'], unique=True)),
            ('latitude', models.DecimalField(null=True, max_digits=10, decimal_places=6, blank=True)),
            ('linked_in', models.URLField(_('LinkedIn'), blank=True)),
            ('id', models.AutoField(primary_key=True)),
            ('location', models.CharField(max_length=255, blank=True)),
        ))
        db.send_create_signal('txcommon', ['Profile'])



    def backwards(self, orm):

        # Deleting model 'Profile'
        db.delete_table('txcommon_profile')



    models = {
        'auth.user': {
            '_stub': True,
            'id': ('models.AutoField', [], {'primary_key': 'True'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'db_table': "'translations_language'"},
            '_stub': True,
            'id': ('models.AutoField', [], {'primary_key': 'True'})
        },
        'txcommon.profile': {
            'about': ('models.TextField', ["_('About yourself')"], {'max_length': '140', 'blank': 'True'}),
            'blog': ('models.URLField', ["_('Blog')"], {'blank': 'True'}),
            'country': ('CountryField', [], {'null': 'True', 'blank': 'True'}),
            'creation_date': ('models.DateTimeField', [], {'default': 'datetime.datetime(2009, 7, 30, 13, 13, 50, 293400)'}),
            'firstname': ('models.CharField', ["_('First name')"], {'max_length': '255', 'blank': 'True'}),
            'id': ('models.AutoField', [], {'primary_key': 'True'}),
            'latitude': ('models.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('models.URLField', ["_('LinkedIn')"], {'blank': 'True'}),
            'location': ('models.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'longitude': ('models.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('models.BooleanField', ["_('Looking for work?')"], {'default': 'False'}),
            'native_language': ('models.ForeignKey', ['Language'], {'null': 'True', 'verbose_name': "_('Native Language')", 'blank': 'True'}),
            'surname': ('models.CharField', ["_('Surname')"], {'max_length': '255', 'blank': 'True'}),
            'twitter': ('models.URLField', ["_('Twitter')"], {'blank': 'True'}),
            'user': ('models.ForeignKey', ['User'], {'unique': 'True'})
        }
    }

    complete_apps = ['txcommon']

########NEW FILE########
__FILENAME__ = 0003_copy_firstname_and_lastname_from_profile
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        """Copy firstname and lastname of users from Profile to User model."""
        for profile in orm['txcommon.Profile'].objects.filter():
            user = profile.user
            user.first_name = profile.firstname
            user.last_name = profile.surname
            user.save()

    def backwards(self, orm):
        
        raise Exception("Cannot reverse this migration.")


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'txcommon.profile': {
            'Meta': {'object_name': 'Profile'},
            'about': ('django.db.models.fields.TextField', [], {'max_length': '140', 'blank': 'True'}),
            'blog': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'country': ('userprofile.countries.CountryField', [], {'null': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'firstname': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'latitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'native_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'twitter': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'})
        }
    }

    complete_apps = ['txcommon']

########NEW FILE########
__FILENAME__ = 0004_new_userena_profile
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):

        # Renaming field 'profile.native_language'
        db.rename_column('txcommon_profile', 'native_language_id', 'language_id')

        # Deleting field 'profile.surname'
        db.delete_column('txcommon_profile', 'surname')

        # Deleting field 'profile.firstname'
        db.delete_column('txcommon_profile', 'firstname')

        # Deleting field 'profile.creation_date'
        db.delete_column('txcommon_profile', 'creation_date')

        # Deleting field 'profile.country'
        db.delete_column('txcommon_profile', 'country')

        # Adding field 'Profile.mugshot'
        db.add_column('txcommon_profile', 'mugshot', self.gf('django.db.models.fields.files.ImageField')(default='', max_length=100, blank=True), keep_default=False)

        # Adding field 'Profile.privacy'
        db.add_column('txcommon_profile', 'privacy', self.gf('django.db.models.fields.CharField')(default='open', max_length=15), keep_default=False)

        # Changing field 'Profile.looking_for_work'
        db.alter_column('txcommon_profile', 'looking_for_work', self.gf('django.db.models.fields.BooleanField')())

        # Changing field 'Profile.about'
        db.alter_column('txcommon_profile', 'about', self.gf('django.db.models.fields.TextField')(max_length=140, null=True))

        # Changing field 'Profile.twitter'
        db.alter_column('txcommon_profile', 'twitter', self.gf('django.db.models.fields.URLField')(max_length=200, null=True))

        # Changing field 'Profile.location'
        db.alter_column('txcommon_profile', 'location', self.gf('django.db.models.fields.CharField')(max_length=255, null=True))

        # Changing field 'Profile.linked_in'
        db.alter_column('txcommon_profile', 'linked_in', self.gf('django.db.models.fields.URLField')(max_length=200, null=True))

        # Changing field 'Profile.blog'
        db.alter_column('txcommon_profile', 'blog', self.gf('django.db.models.fields.URLField')(max_length=200, null=True))

        # Changing field 'Profile.user'
        db.alter_column('txcommon_profile', 'user_id', self.gf('django.db.models.fields.related.OneToOneField')(unique=True, to=orm['auth.User']))


    def backwards(self, orm):
        
        # Renaming field 'profile.native_language'
        db.rename_column('txcommon_profile', 'language_id', 'native_language_id')
        
        # Adding field 'profile.surname'
        db.add_column('txcommon_profile', 'surname', self.gf('models.CharField')(_('Surname'), default='', max_length=255, blank=True), keep_default=False)

        # Adding field 'profile.firstname'
        db.add_column('txcommon_profile', 'firstname', self.gf('models.CharField')(_('First name'), default='', max_length=255, blank=True), keep_default=False)

        # Adding field 'profile.creation_date'
        db.add_column('txcommon_profile', 'creation_date', self.gf('models.DateTimeField')(default=datetime.datetime(2009, 7, 30, 13, 13, 50, 293400)), keep_default=False)

        # Adding field 'profile.country'
        db.add_column('txcommon_profile', 'country', self.gf('CountryField')(null=True, blank=True), keep_default=False)

        # Deleting field 'Profile.mugshot'
        db.delete_column('txcommon_profile', 'mugshot')

        # Deleting field 'Profile.privacy'
        db.delete_column('txcommon_profile', 'privacy')

        # Changing field 'Profile.looking_for_work'
        db.alter_column('txcommon_profile', 'looking_for_work', self.gf('models.BooleanField')(_('Looking for work?')))

        # Changing field 'Profile.about'
        db.alter_column('txcommon_profile', 'about', self.gf('models.TextField')(_('About yourself'), default='', max_length=140))

        # Changing field 'Profile.twitter'
        db.alter_column('txcommon_profile', 'twitter', self.gf('models.URLField')(_('Twitter'), default=''))

        # Changing field 'Profile.location'
        db.alter_column('txcommon_profile', 'location', self.gf('models.CharField')(default='', max_length=255))

        # Changing field 'Profile.linked_in'
        db.alter_column('txcommon_profile', 'linked_in', self.gf('models.URLField')(_('LinkedIn'), default=''))

        # Changing field 'Profile.blog'
        db.alter_column('txcommon_profile', 'blog', self.gf('models.URLField')(_('Blog'), default=''))

        # Changing field 'Profile.user'
        db.alter_column('txcommon_profile', 'user_id', self.gf('models.ForeignKey')(User, unique=True))


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'txcommon.profile': {
            'Meta': {'object_name': 'Profile'},
            'about': ('django.db.models.fields.TextField', [], {'max_length': '140', 'null': 'True', 'blank': 'True'}),
            'blog': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'mugshot': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'privacy': ('django.db.models.fields.CharField', [], {'default': "'open'", 'max_length': '15'}),
            'twitter': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'profile'", 'unique': 'True', 'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['txcommon']

########NEW FILE########
__FILENAME__ = 0005_create_new_profiles
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):

        for u in orm['auth.User'].objects.all(): 
            profile = orm['txcommon.Profile'].objects.get_or_create(user=u)[0]

    def backwards(self, orm):
        
        raise Exception("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'txcommon.profile': {
            'Meta': {'object_name': 'Profile'},
            'about': ('django.db.models.fields.TextField', [], {'max_length': '140', 'null': 'True', 'blank': 'True'}),
            'blog': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'mugshot': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'privacy': ('django.db.models.fields.CharField', [], {'default': "'open'", 'max_length': '15'}),
            'twitter': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'profile'", 'unique': 'True', 'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['txcommon']

########NEW FILE########
__FILENAME__ = 0006_associate_avatars
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models
from django.db.utils import DatabaseError

class Migration(DataMigration):

    depends_on = (
        ("userena", "0001_initial"),
    )

    def forwards(self, orm):

        try:
            # Get all valid avatars images from userprofile and set them as the
            # mugshot image for the userena profile app.
            for a in orm['userprofile.Avatar'].objects.filter(valid=True):
                try:
                    a.user.profile.mugshot = a.image
                    a.user.profile.save()
                except Exception, e:
                    print "Could not migrate avatar for '%s': %s" % (a.user,
                        e.message)
        except DatabaseError:
            pass

    def backwards(self, orm):
        
        raise Exception("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'txcommon.profile': {
            'Meta': {'object_name': 'Profile'},
            'about': ('django.db.models.fields.TextField', [], {'max_length': '140', 'null': 'True', 'blank': 'True'}),
            'blog': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'mugshot': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'privacy': ('django.db.models.fields.CharField', [], {'default': "'open'", 'max_length': '15'}),
            'twitter': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'profile'", 'unique': 'True', 'to': "orm['auth.User']"})
        },
        'userprofile.avatar': {
            'Meta': {'unique_together': "(('user', 'valid'),)", 'object_name': 'Avatar'},
            'date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'valid': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'userprofile.emailvalidation': {
            'Meta': {'object_name': 'EmailValidation'},
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '70', 'db_index': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'})
        }
    }

    complete_apps = ['userprofile', 'txcommon']

########NEW FILE########
__FILENAME__ = 0007_rename_profile_table
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        db.rename_table('txcommon_profile', 'txcommon_userenaprofile')


    def backwards(self, orm):
        db.rename_table('txcommon_userenaprofile', 'txcommon_profile')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'txcommon.profile': {
            'Meta': {'object_name': 'Profile', 'db_table': "'txcommon.userena_profile'"},
            'about': ('django.db.models.fields.TextField', [], {'max_length': '140', 'null': 'True', 'blank': 'True'}),
            'blog': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'mugshot': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'privacy': ('django.db.models.fields.CharField', [], {'default': "'open'", 'max_length': '15'}),
            'twitter': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'profile'", 'unique': 'True', 'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['txcommon']

########NEW FILE########
__FILENAME__ = 0008_add_m2m_languages_to_profile
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding M2M table for field languages on 'Profile'
        db.create_table('txcommon_userenaprofile_languages', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('profile', models.ForeignKey(orm['txcommon.profile'], null=False)),
            ('language', models.ForeignKey(orm['languages.language'], null=False))
        ))
        db.create_unique('txcommon_userenaprofile_languages', ['profile_id', 'language_id'])


    def backwards(self, orm):
        
        # Removing M2M table for field languages on 'Profile'
        db.delete_table('txcommon_userenaprofile_languages')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'txcommon.profile': {
            'Meta': {'object_name': 'Profile', 'db_table': "'txcommon_userenaprofile'"},
            'about': ('django.db.models.fields.TextField', [], {'max_length': '140', 'null': 'True', 'blank': 'True'}),
            'blog': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True', 'blank': 'True'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'bucket_languages'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['languages.Language']"}),
            'latitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'mugshot': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'privacy': ('django.db.models.fields.CharField', [], {'default': "'open'", 'max_length': '15'}),
            'twitter': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'profile'", 'unique': 'True', 'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['txcommon']

########NEW FILE########
__FILENAME__ = 0009_copy_lang_to_m2m_langs
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        for profile in orm['txcommon.Profile'].objects.all():
            if profile.language != None:
                profile.languages.add(profile.language)

    def backwards(self, orm):
        raise Exception("M2M Language field cannot be reversed to M2O.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'txcommon.profile': {
            'Meta': {'object_name': 'Profile', 'db_table': "'txcommon_userenaprofile'"},
            'about': ('django.db.models.fields.TextField', [], {'max_length': '140', 'null': 'True', 'blank': 'True'}),
            'blog': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['languages.Language']", 'null': 'True', 'blank': 'True'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'bucket_languages'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['languages.Language']"}),
            'latitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'mugshot': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'privacy': ('django.db.models.fields.CharField', [], {'default': "'open'", 'max_length': '15'}),
            'twitter': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'profile'", 'unique': 'True', 'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['txcommon']

########NEW FILE########
__FILENAME__ = 0010_auto__del_field_profile_language
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Profile.language'
        db.delete_column('txcommon_userenaprofile', 'language_id')


    def backwards(self, orm):
        
        # Adding field 'Profile.language'
        db.add_column('txcommon_userenaprofile', 'language', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['languages.Language'], null=True, blank=True), keep_default=False)


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'txcommon.profile': {
            'Meta': {'object_name': 'Profile', 'db_table': "'txcommon_userenaprofile'"},
            'about': ('django.db.models.fields.TextField', [], {'max_length': '140', 'null': 'True', 'blank': 'True'}),
            'blog': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['languages.Language']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'mugshot': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'privacy': ('django.db.models.fields.CharField', [], {'default': "'open'", 'max_length': '15'}),
            'twitter': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'profile'", 'unique': 'True', 'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['txcommon']

########NEW FILE########
__FILENAME__ = 0011_auto__add_field_profile_tags
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Profile.tags'
        db.add_column('txcommon_userenaprofile', 'tags', self.gf('tagging_autocomplete.models.TagAutocompleteField')(null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Profile.tags'
        db.delete_column('txcommon_userenaprofile', 'tags')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'languages.language': {
            'Meta': {'ordering': "('name',)", 'object_name': 'Language', 'db_table': "'translations_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'code_aliases': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'rule_few': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_many': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_one': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_other': ('django.db.models.fields.CharField', [], {'default': "'everything'", 'max_length': '255'}),
            'rule_two': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rule_zero': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'txcommon.profile': {
            'Meta': {'object_name': 'Profile', 'db_table': "'txcommon_userenaprofile'"},
            'about': ('django.db.models.fields.TextField', [], {'max_length': '140', 'null': 'True', 'blank': 'True'}),
            'blog': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['languages.Language']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'linked_in': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '10', 'decimal_places': '6', 'blank': 'True'}),
            'looking_for_work': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'mugshot': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'blank': 'True'}),
            'privacy': ('django.db.models.fields.CharField', [], {'default': "'open'", 'max_length': '15'}),
            'tags': ('tagging_autocomplete.models.TagAutocompleteField', [], {'null': 'True'}),
            'twitter': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'profile'", 'unique': 'True', 'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['txcommon']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-
import datetime
from django.conf import settings
from django.contrib.auth.models import User
from django.db import models
from django.db.models.fields.related import OneToOneField
from django.db.models.signals import post_save
from django.utils.translation import ugettext_lazy as _

import tagging
from tagging.fields import TagField
from tagging_autocomplete.models import TagAutocompleteField

from transifex.txcommon.log import logger
from userena import settings as userena_settings
from userena.models import UserenaBaseProfile

from social_auth.signals import pre_update
from social_auth.backends.twitter import TwitterBackend
from social_auth.backends.contrib.linkedin import LinkedinBackend
from south.modelsinspector import add_introspection_rules
add_introspection_rules([], ["tagging_autocomplete.models.TagAutocompleteField"])

Language = models.get_model('languages', 'Language')

class Profile(UserenaBaseProfile):
    """
    Profile class to used as a base for the django-profile app
    """
    user = models.OneToOneField(User, unique=True, verbose_name=_('user'),
        related_name='profile')

    languages = models.ManyToManyField(Language, verbose_name=_('Languages'),
        blank=True, null=True)
    tags = TagAutocompleteField(verbose_name=_('Interested in'), blank=True,
            null=True, help_text=_("Tags you may be interested in."))
    blog = models.URLField(_('Blog'), null=True, blank=True)
    linked_in = models.URLField(_('LinkedIn'), null=True, blank=True)
    twitter = models.URLField(_('Twitter'), null=True, blank=True)
    about = models.TextField(_('About yourself'), max_length=140, null=True,
        blank=True,
        help_text=_('Short description of yourself (140 chars).'))
    looking_for_work = models.BooleanField(_('Looking for work?'),
        default=False)

    latitude = models.DecimalField(max_digits=10, decimal_places=6,
        null=True, blank=True, editable=False)
    longitude = models.DecimalField(max_digits=10, decimal_places=6,
        null=True, blank=True, editable=False)
    location = models.CharField(_("Location"), max_length=255, null=True, blank=True,
        editable=True)

    class Meta:
        db_table = 'txcommon_userenaprofile'

try:
    tagging.register(Profile, tag_descriptor_attr='tagsobj')
except tagging.AlreadyRegistered, e:
    logger.debug('Tagging: %s' % str(e))

def exclusive_fields(inmodel, except_fields=[]):
    '''
    Returns a generator that yields the fields that belong only to the
    given model descendant

    ``except_fields`` is a list that allows to skip some fields based on theirs
    names
    '''
    for field, model in inmodel._meta.get_fields_with_model():
        if field.name in except_fields:
            yield field
        # Field belongs to an ancestor
        if model is not None:
            continue
        # Field relates to an ancestor
        if isinstance(field, OneToOneField) and (field.rel.to in
            inmodel.__bases__):
            continue
        yield field

def inclusive_fields(inmodel, except_fields=[]):
    '''
    Returns a generator that yields the fields that belong to the given
    model descendant or any of its ancestors

    ``except_fields`` is a list that allows to skip some fields based on theirs
    names
    '''
    for field, model in inmodel._meta.get_fields_with_model():
        # Field relates to the parent of the model it's on
        if isinstance(field, OneToOneField):
            # Passed model
            if (model is None) and (field.rel.to in inmodel.__bases__):
                continue
            # Ancestor model
            if (model is not None) and (field.rel.to in model.__bases__):
                continue
        if field.name in except_fields:
            continue
        yield field

# Signal Registration
import listeners
post_save.connect(listeners.add_user_to_registered_group, sender=User)

pre_update.connect(listeners.twitter_profile_values, sender=TwitterBackend)
pre_update.connect(listeners.linkedin_profile_values, sender=LinkedinBackend)

########NEW FILE########
__FILENAME__ = notifications
# -*- coding: utf-8 -*-
from django.contrib.auth.models import AnonymousUser
from django.contrib.contenttypes.models import ContentType
from django.utils.translation import ugettext_noop as _
from notification.models import ObservedItem, is_observing, send


# This is temporary
NOTICE_TYPES = [
            {
                "label": "project_added",
                "display": _("New project created"),
                "description": _("when a new project is created"),
                "default": 1,
                "show_to_user": False,
            },
            {
                "label": "project_changed",
                "display": _("Project modified"),
                "description": _("when a project is changed"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_deleted",
                "display": _("Project deleted"),
                "description": _("when a project is deleted"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_submit_access_requested",
                "display": _("Requested submit access to project"),
                "description": _("when a user request access to submit files "
                                 "to a project"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_submit_access_request_denied",
                "display": _("Denied submit access to project"),
                "description": _("when a maintainer denies a user access "
                                 "to submit files to a project"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_submit_access_request_withdrawn",
                "display": _("Withdrew request for submit access to project"),
                "description": _("when a user withdraws the request for "
                                 "access to submit files to a project"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_submit_access_granted",
                "display": _("Granted submit access to project"),
                "description": _("when a maintainer grants a user access "
                                 "to submit files to a project"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_submit_access_revoked",
                "display": _("Revoked submit access to project"),
                "description": _("when a maintainer revokes the access of an "
                                 "user to submit files to a project"),
                "default": 2,
                "show_to_user": True,
            },

            # Outsourcing requests
            {
                "label": "project_hub_join_requested",
                "display": _("Requested to join a project hub"),
                "description": _("when a project requests to join a "
                                 "project hub"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_hub_join_approved",
                "display": _("Approved to join project hub"),
                "description": _("when a project is approved to join a "
                                 "project hub"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_hub_join_denied",
                "display": _("Denied to join project hub"),
                "description": _("when a project is denied to join a "
                                 "project  hub"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_hub_join_withdrawn",
                "display": _("Withdrew request to join project hub"),
                "description": _("when a project decides not to "
                                 "join a project hub"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_hub_left",
                "display": _("Project left project hub"),
                "description": _("when a project leaves a "
                                 "project hub"),
                "default": 2,
                "show_to_user": False,
            },

            # Project releases

            {
                "label": "project_release_added",
                "display": _("Release added to project"),
                "description": _("when a release is added to a project"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_release_changed",
                "display": _("Release modified"),
                "description": _("when a release of a project is modified"),
                "default": 2,
                "show_to_user": True,
            },
            {   "label": "project_release_deleted",
                "display": _("Release deleted"),
                "description": _("when a release of a project is deleted"),
                "default": 2,
                "show_to_user": True,
            },
            {   "label": "project_release_before_stringfreeze",
                "display": _("Release about to enter the string freeze period"),
                "description": _("when a release of a project is about to "
                                 "enter the String Freeze period"),
                "default": 2,
                "show_to_user": True,
            },
            {   "label": "project_release_in_stringfreeze",
                "display": _("Release is in string freeze period"),
                "description": _("when a release of a project is on enter "
                                 "the String Freeze period"),
                "default": 2,
                "show_to_user": True,
            },
            {   "label": "project_release_before_trans_deadline",
                "display": _("Release about to hit the translation deadline"),
                "description": _("when a release of a project is about to "
                                 "hit the Translation Deadline date"),
                "default": 2,
                "show_to_user": True,
            },
            {   "label": "project_release_hit_trans_deadline",
                "display": _("Release has hit the translation deadline"),
                "description": _("when a release of a project hits the "
                                 "Translation Deadline date"),
                "default": 2,
                "show_to_user": True,
            },
            {   "label": "project_release_stringfreeze_breakage",
                "display": _("Release string freeze breakage"),
                "description": _("when a release of a project has a "
                                 "string freeze breakage"),
                "default": 2,
                "show_to_user": True,
            },

            # Teams

            {
                "label": "project_team_added",
                "display": _("New team created"),
                "description": _("when a new translation team is added "
                                 "to a project"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_team_changed",
                "display": _("Team modified"),
                "description": _("when a translation team of a project "
                                 "is modified"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_team_deleted",
                "display": _("Team removed"),
                "description": _("when a translation team of a project "
                                 "is removed"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_team_requested",
                "display": _("Requested team creation"),
                "description": _("when the creation of a translation team is "
                                 "requested for a project"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_team_request_denied",
                "display": _("Denied request for team creation"),
                "description": _("when the creation of a translation team "
                                 "for a project is denied by a maintainer"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_team_join_requested",
                "display": _("Requested to join translation team"),
                "description": _("when a user requests to join a "
                                 "project translation team"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_team_join_approved",
                "display": _("Approved to join translation team"),
                "description": _("when a user is approved as a member of a "
                                 "project translation team"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_team_join_denied",
                "display": _("Denied to join translation team"),
                "description": _("when a user is denied as a member of a "
                                 "project translation team"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_team_join_withdrawn",
                "display": _("Withdrew request to join team"),
                "description": _("when a user decides not to "
                                 "join a project translation team"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_team_left",
                "display": _("User left translation team"),
                "description": _("when a user leaves a "
                                 "project translation team"),
                "default": 2,
                "show_to_user": True,
            },

            # Reports

            {
                "label": "project_report_weekly_maintainers",
                "display": _("Weekly project report for maintainers"),
                "description": _("when you receive the weekly report of "
                                 "projects that you maintain."),
                "default": 2,
                "show_to_user": True,
            },

            {   "label": "user_nudge",
                "display": _("User nudge"),
                "description": _("when a user nudges you"),
                "default": 2,
                "show_to_user": True,
            },

            # Resources

            {
                "label": "project_resource_added",
                "display": _("Resource created"),
                "description": _("when a new resource is added to a project"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_resource_changed",
                "display": _("Resource modified"),
                "description": _("when a resource of a project is changed"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_resource_deleted",
                "display": _("Resource deleted"),
                "description": _("when a resource of a project is deleted"),
                "default": 2,
                "show_to_user": True,
            },
            {   # Used only for ActionLog purposes.
                "label": "project_resource_translated",
                "display": _("Resource translated"),
                "description": _("when a translation is sent to a project "
                    "resource"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_resource_translation_changed",
                "display": _("Resource translation updated"),
                "description": _("when a resource translation you are "
                    "watching changes"),
                "default": 2,
                "show_to_user": True,
            },
            {
                "label": "project_resource_full_reviewed",
                "display": _("Resource translation fully reviewed"),
                "description": _("when a resource translation of one of your "
                    "projects becomes fully reviewed"),
                "default": 2,
                "show_to_user": True,
            },
    ]


# Overwriting this function temporarily, until the upstream patch
# http://github.com/jezdez/django-notification/commit/a8eb0980d2f37b799ff55dbc3a386c97ad479f99
# be accepted on http://github.com/pinax/django-notification
def send_observation_notices_for(observed, signal='post_save', extra_context=None):
    """
    Send a notice for each registered user about an observed object.
    """
    observed_items = ObservedItem.objects.all_for(
        observed, signal
    ).select_related('user', 'notice_type', 'observed_object')
    for item in observed_items:
        if extra_context is None:
            extra_context = {}

        context = {
            "observed": item.observed_object,
        }
        context.update(extra_context)

        send([item.user], item.notice_type.label, context)
    return observed_items

########NEW FILE########
__FILENAME__ = rst
import re
# From: http://code.activestate.com/recipes/267662/#c2 and
# http://kogs-www.informatik.uni-hamburg.de/~meine/software/scripts/tableindent.py
def as_table(rows, header=True, vdelim=" ", border="=", padding=0, justify="left"):
    """
    Return a list of lists as a Restructured Text Table.

    - rows:    List of lists
    - header:  If True the first row is treated as a table header
    - vdelim:  Vertical delimiter between columns
    - border:  Character for drawing the the horizontal table border, in
                the header and footer.
    - padding: Padding nr. of spaces are left around the longest element
                in the column.
    - justify: May be 'left', 'center' or 'right'.
    """
    justify = {'center' : str.center,
                'right'  : str.rjust,
                'left'   : str.ljust}[justify.lower()]
    result = ""

    # Calculate column widths (longest item in each col
    # plus "padding" nr of spaces on both sides)
    cols = map(lambda *row: [elem or ' ' for elem in row], *rows)
    colWidths = [max([len(str(item))+2*padding for item in col]) for col in cols]

    # The horizontal border needed by rst
    borderline = vdelim.join([w*border for w in colWidths])+"\n"

    # Outputs table in rst format
    result += borderline
    for row in rows:
        result += vdelim.join([justify(str(item),width) for (item,width) in zip(row,colWidths)])+"\n"
        if header:
            result += borderline
            header = False

    result += borderline
    return result

def as_title(text, border="="):
    """
    Return a text as a Restructured Text Header.

    - text:    A string
    - border:  Character for drawing the bottom border.
    """
    # Calculate width
    width = len(str(text))
    # The horizontal border needed by rst
    borderline = ''.join([width*border])+"\n"
    # Outputs header in rst format
    result = text+"\n"+borderline
    return result

def strip_tags(text):
    """
    Remove any HTML/XML-like tag from the input text.
    """
    HTMLtag = re.compile('<.*?>')  # Matches HTML tags
    return HTMLtag.sub('', text.replace('\n',''))

########NEW FILE########
__FILENAME__ = template
# -*- coding: utf-8 -*-
# Code based on https://bitbucket.org/mitar/django-missing/src/b17d2580dd54/missing/templatetags/url_tags.py
# Licensed under GPLv3.

import re
import unicodedata
from django.conf import settings
from django.utils import encoding, safestring

LATIN_MAP = {
    'À': 'A', 'Á': 'A', 'Â': 'A', 'Ã': 'A', 'Ä': 'A', 'Å': 'A', 'Æ': 'AE', 'Ç':
    'C', 'È': 'E', 'É': 'E', 'Ê': 'E', 'Ë': 'E', 'Ì': 'I', 'Í': 'I', 'Î': 'I',
    'Ï': 'I', 'Ð': 'D', 'Ñ': 'N', 'Ò': 'O', 'Ó': 'O', 'Ô': 'O', 'Õ': 'O', 'Ö':
    'O', 'Ő': 'O', 'Ø': 'O', 'Ù': 'U', 'Ú': 'U', 'Û': 'U', 'Ü': 'U', 'Ű': 'U',
    'Ý': 'Y', 'Þ': 'TH', 'ß': 'ss', 'à':'a', 'á':'a', 'â': 'a', 'ã': 'a', 'ä':
    'a', 'å': 'a', 'æ': 'ae', 'ç': 'c', 'è': 'e', 'é': 'e', 'ê': 'e', 'ë': 'e',
    'ì': 'i', 'í': 'i', 'î': 'i', 'ï': 'i', 'ð': 'd', 'ñ': 'n', 'ò': 'o', 'ó':
    'o', 'ô': 'o', 'õ': 'o', 'ö': 'o', 'ő': 'o', 'ø': 'o', 'ù': 'u', 'ú': 'u',
    'û': 'u', 'ü': 'u', 'ű': 'u', 'ý': 'y', 'þ': 'th', 'ÿ': 'y'
}
LATIN_SYMBOLS_MAP = {
    '©':'(c)'
}
GREEK_MAP = {
    'α':'a', 'β':'b', 'γ':'g', 'δ':'d', 'ε':'e', 'ζ':'z', 'η':'h', 'θ':'8',
    'ι':'i', 'κ':'k', 'λ':'l', 'μ':'m', 'ν':'n', 'ξ':'3', 'ο':'o', 'π':'p',
    'ρ':'r', 'σ':'s', 'τ':'t', 'υ':'y', 'φ':'f', 'χ':'x', 'ψ':'ps', 'ω':'w',
    'ά':'a', 'έ':'e', 'ί':'i', 'ό':'o', 'ύ':'y', 'ή':'h', 'ώ':'w', 'ς':'s',
    'ϊ':'i', 'ΰ':'y', 'ϋ':'y', 'ΐ':'i',
    'Α':'A', 'Β':'B', 'Γ':'G', 'Δ':'D', 'Ε':'E', 'Ζ':'Z', 'Η':'H', 'Θ':'8',
    'Ι':'I', 'Κ':'K', 'Λ':'L', 'Μ':'M', 'Ν':'N', 'Ξ':'3', 'Ο':'O', 'Π':'P',
    'Ρ':'R', 'Σ':'S', 'Τ':'T', 'Υ':'Y', 'Φ':'F', 'Χ':'X', 'Ψ':'PS', 'Ω':'W',
    'Ά':'A', 'Έ':'E', 'Ί':'I', 'Ό':'O', 'Ύ':'Y', 'Ή':'H', 'Ώ':'W', 'Ϊ':'I',
    'Ϋ':'Y'
}
TURKISH_MAP = {
    'ş':'s', 'Ş':'S', 'ı':'i', 'İ':'I', 'ç':'c', 'Ç':'C', 'ü':'u', 'Ü':'U',
    'ö':'o', 'Ö':'O', 'ğ':'g', 'Ğ':'G'
}
RUSSIAN_MAP = {
    'а':'a', 'б':'b', 'в':'v', 'г':'g', 'д':'d', 'е':'e', 'ё':'yo', 'ж':'zh',
    'з':'z', 'и':'i', 'й':'j', 'к':'k', 'л':'l', 'м':'m', 'н':'n', 'о':'o',
    'п':'p', 'р':'r', 'с':'s', 'т':'t', 'у':'u', 'ф':'f', 'х':'h', 'ц':'c',
    'ч':'ch', 'ш':'sh', 'щ':'sh', 'ъ':'', 'ы':'y', 'ь':'', 'э':'e', 'ю':'yu',
    'я':'ya',
    'А':'A', 'Б':'B', 'В':'V', 'Г':'G', 'Д':'D', 'Е':'E', 'Ё':'Yo', 'Ж':'Zh',
    'З':'Z', 'И':'I', 'Й':'J', 'К':'K', 'Л':'L', 'М':'M', 'Н':'N', 'О':'O',
    'П':'P', 'Р':'R', 'С':'S', 'Т':'T', 'У':'U', 'Ф':'F', 'Х':'H', 'Ц':'C',
    'Ч':'Ch', 'Ш':'Sh', 'Щ':'Sh', 'Ъ':'', 'Ы':'Y', 'Ь':'', 'Э':'E', 'Ю':'Yu',
    'Я':'Ya'
}
UKRAINIAN_MAP = {
    'Є':'Ye', 'І':'I', 'Ї':'Yi', 'Ґ':'G', 'є':'ye', 'і':'i', 'ї':'yi', 'ґ':'g'
}
CZECH_MAP = {
    'č':'c', 'ď':'d', 'ě':'e', 'ň': 'n', 'ř':'r', 'š':'s', 'ť':'t', 'ů':'u',
    'ž':'z', 'Č':'C', 'Ď':'D', 'Ě':'E', 'Ň': 'N', 'Ř':'R', 'Š':'S', 'Ť':'T',
    'Ů':'U', 'Ž':'Z'
}
POLISH_MAP = {
    'ą':'a', 'ć':'c', 'ę':'e', 'ł':'l', 'ń':'n', 'ó':'o', 'ś':'s', 'ź':'z',
    'ż':'z', 'Ą':'A', 'Ć':'C', 'Ę':'e', 'Ł':'L', 'Ń':'N', 'Ó':'o', 'Ś':'S',
    'Ź':'Z', 'Ż':'Z'
}
LATVIAN_MAP = {
    'ā':'a', 'č':'c', 'ē':'e', 'ģ':'g', 'ī':'i', 'ķ':'k', 'ļ':'l', 'ņ':'n',
    'š':'s', 'ū':'u', 'ž':'z', 'Ā':'A', 'Č':'C', 'Ē':'E', 'Ģ':'G', 'Ī':'i',
    'Ķ':'k', 'Ļ':'L', 'Ņ':'N', 'Š':'S', 'Ū':'u', 'Ž':'Z'
}
LITHUANIAN_MAP = {
    'ą':'a', 'č':'c', 'ę':'e', 'ė':'e', 'į':'i', 'š':'s', 'ų':'u', 'ū':'u',
    'ž':'z', 'Ą':'A', 'Č':'C', 'Ę':'E', 'Ė':'E', 'Į':'I', 'Š':'S', 'Ų':'U',
    'Ū':'U', 'Ž':'Z'
}
SERBIAN_MAP = {
    'ђ': 'dj', 'ј' : 'j', 'љ' : 'lj', 'њ' : 'nj', 'ћ': 'c', 'џ': 'dz', 'đ' : 'dj',
    'Ђ' : 'Dj', 'Ј' : 'j', 'Љ' : 'Lj', 'Њ' : 'Nj', 'Ћ' : 'C', 'Џ' : 'Dz', 'Đ' : 'Dj'
}

ALL_DOWNCODE_MAPS = [
    LATIN_MAP,
    LATIN_SYMBOLS_MAP,
    GREEK_MAP,
    TURKISH_MAP,
    RUSSIAN_MAP,
    UKRAINIAN_MAP,
    CZECH_MAP,
    POLISH_MAP,
    LATVIAN_MAP,
    LITHUANIAN_MAP,
    SERBIAN_MAP
]

class Downcoder(object):
    map = {}
    regex = None

    def __init__(self):
        self.map = {}
        chars = u''

        for lookup in ALL_DOWNCODE_MAPS:
            for c, l in lookup.items():
                c = unicodedata.normalize('NFC', encoding.force_unicode(c))
                l = l.encode('ascii', 'strict')
                self.map[c] = l
                chars += c

        self.regex = re.compile(ur'[' + chars + ']|[^' + chars + ']+', re.U)

downcoder = Downcoder()

def downcode(value):
    downcoded = u''
    pieces = downcoder.regex.findall(value)

    if pieces:
        for p in pieces:
            mapped = downcoder.map.get(p)
            if mapped:
                downcoded += mapped
            else:
                downcoded += p
    else:
        downcoded = value

    return downcoded

def slugify(value):
    """
    Normalizes string, converts to lowercase, removes non-alpha characters,
    and converts spaces to hyphens.

    It is similar to built-in :filter:`slugify` but it also handles special characters in variety of languages
    so that they are not simply removed but properly transliterated/downcoded.
    """
    value = value.decode('utf-8')
    try:
        value = unicodedata.normalize('NFC', value)
        value = downcode(value)
        value = unicodedata.normalize('NFD', value).encode('ascii', 'ignore')
        value = unicode(re.sub('[^\w\s-]', '', value).strip().lower())
        return safestring.mark_safe(re.sub('[-\s]+', '-', value))
    except:
        if settings.TEMPLATE_DEBUG:
            raise
        else:
            return u''


########NEW FILE########
__FILENAME__ = fieldsets
import copy
from django import template
from django import forms
from django.utils.datastructures import SortedDict

register = template.Library()

class FieldsetNode(template.Node):
    def __init__(self, fields, variable_name, form_variable):
        self.fields = fields
        self.variable_name = variable_name
        self.form_variable = form_variable

    def render(self, context):
        form = template.Variable(self.form_variable).resolve(context)
        new_form = copy.copy(form)
        new_form.fields = SortedDict(
            [(key, form.fields[key]) for key in self.fields]
        )
        context[self.variable_name] = new_form
        return u''

@register.tag(name='get_fieldset')
def get_fieldset(parser, token):
    """
    A simple templatetag to split form fields into fieldsets from the template.

    Usage:
    {% load fieldsets %}

    {% get_fieldset slug,name,description,maintainers,tags as simple_fields from project_form %}
    {% for field in simple_fields %}
        {{ field }}
    </div>
    {% endfor %}
    """
    try:
        name, fields, as_, variable_name, from_, form = token.split_contents()
    except ValueError:
        raise template.TemplateSyntaxError('Bad arguments for %r' % token.split_contents()[0])

    return FieldsetNode(fields.split(','), variable_name, form)


########NEW FILE########
__FILENAME__ = search_filters
from django import template
from django.conf import settings
from django.template import Node, TemplateSyntaxError
from django.utils.safestring import mark_safe
from django.utils.datastructures import SortedDict
from itertools import ifilter, takewhile
import re

register = template.Library()

SETTINGS_PREFIX = 'SEARCH_'
SETTINGS_DEFAULTS = {
    'CONTEXT_WORDS': 10,
    'IGNORE_CASE': True,
    'WORD_BOUNDARY': False,
    'HIGHLIGHT_CLASS': "highlight"
}

def get_setting(name):
    return getattr(settings, SETTINGS_PREFIX + name, SETTINGS_DEFAULTS[name])

def searchexcerpt(text, phrases, context_words=None, ignore_case=None, word_boundary=None):
    if isinstance(phrases, basestring):
        phrases = [phrases]
    if context_words is None:
        context_words = get_setting('CONTEXT_WORDS')
    if ignore_case is None:
        ignore_case = get_setting('IGNORE_CASE')
    if word_boundary is None:
        word_boundary = get_setting('WORD_BOUNDARY')

    phrases = map(re.escape, phrases)
    flags = ignore_case and re.I or 0
    exprs = [re.compile(r"^%s$" % p, flags) for p in phrases]
    whitespace = re.compile(r'\s+')

    re_template = word_boundary and r"\b(%s)\b" or r"(%s)"
    pieces = re.compile(re_template % "|".join(phrases), flags).split(text)
    matches = {}
    word_lists = []
    index = {}
    for i, piece in enumerate(pieces):
        word_lists.append(whitespace.split(piece))
        if i % 2:
            index[i] = expr = ifilter(lambda e: e.match(piece), exprs).next()
            matches.setdefault(expr, []).append(i)

    def merge(lists):
        merged = []
        for words in lists:
            if merged and words:
                merged[-1] += words[0]
                del words[0]
            merged.extend(words)
        return merged

    i = 0
    merged = []
    for j in map(min, matches.itervalues()):
        merged.append(merge(word_lists[i:j]))
        merged.append(word_lists[j])
        i = j + 1
    merged.append(merge(word_lists[i:]))

    output = []
    for i, words in enumerate(merged):
        omit = None
        if i == len(merged) - 1:
            omit = slice(max(1, 2 - i) * context_words + 1, None)
        elif i == 0:
            omit = slice(-context_words - 1)
        elif not i % 2:
            omit = slice(context_words + 1, -context_words - 1)
        if omit and words[omit]:
            words[omit] = ["..."]
        output.append(" ".join(words))

    return dict(original=text, excerpt="".join(output), hits=len(index))

class FunctionProxyNode(Node):
    def __init__(self, nodelist, args, variable_name=None):
        self.nodelist = nodelist
        self.args = args
        self.variable_name = variable_name

    def render(self, context):
        args = [arg.resolve(context) for arg in self.args]
        text = self.nodelist.render(context)
        value = self.get_value(text, *args)
        if self.variable_name:
            context[self.variable_name] = value
            return ""
        else:
            return self.string_value(value)

    def get_value(self, *args):
        raise NotImplementedError

    def string_value(self, value):
        return value

class SearchContextNode(FunctionProxyNode):
    def get_value(self, *args):
        return searchexcerpt(*args)

    def string_value(self, value):
        return value['excerpt']

@register.tag(name='searchexcerpt')
def searchexcerpt_tag(parser, token):
    """
        {% searchexcerpt search_terms [context_words] [ignore_case] [word_boundary] [as name] %}
        ...text...
        {% endsearchexcerpt %}
    """
    bits = list(token.split_contents())
    if not 3 <= len(bits) <= 8:
        usage = searchexcerpt_tag.__doc__.strip()
        raise TemplateSyntaxError("%r expected usage: %s" % (bits[0], usage))

    if len(bits) > 4 and bits[-2] == "as":
        args, name = bits[1:-2], bits[-1]
    else:
        args, name = bits[1:], None

    nodelist = parser.parse(('endsearchexcerpt',))
    parser.delete_first_token()
    return SearchContextNode(nodelist, map(parser.compile_filter, args), name)

@register.filter(name='searchexcerpt')
def searchexcerpt_filter(value, arg):
    return searchexcerpt(value, arg)['excerpt']
searchexcerpt_filter.is_safe = True

def highlight(text, phrases, ignore_case=None, word_boundary=None, class_name=None):
    if isinstance(phrases, basestring):
        phrases = [phrases]
    if ignore_case is None:
        ignore_case = get_setting('IGNORE_CASE')
    if word_boundary is None:
        word_boundary = get_setting('WORD_BOUNDARY')
    if class_name is None:
        class_name = get_setting('HIGHLIGHT_CLASS')

    phrases = map(re.escape, phrases)
    flags = ignore_case and re.I or 0
    re_template = word_boundary and r"\b(%s)\b" or r"(%s)"
    expr = re.compile(re_template % "|".join(phrases), flags)
    template = '<span class="%s">%%s</span>' % class_name
    matches = []

    def replace(match):
        matches.append(match)
        return template % match.group(0)

    highlighted = mark_safe(expr.sub(replace, text))
    count = len(matches)
    return dict(original=text, highlighted=highlighted, hits=count)

class HighlightNode(FunctionProxyNode):
    def get_value(self, *args):
        return highlight(*args)

    def string_value(self, value):
        return value['highlighted']

@register.tag(name='highlight')
def highlight_tag(parser, token):
    """
        {% highlight search_terms [ignore_case] [word_boundary] [class_name] [as name] %}
        ...text...
        {% endhighlight %}
    """
    bits = list(token.split_contents())
    if not 2 <= len(bits) <= 7:
        usage = highlight_tag.__doc__.strip()
        raise TemplateSyntaxError("%r expected usage: %s" % (bits[0], usage))

    if len(bits) > 3 and bits[-2] == "as":
        args, name = bits[1:-2], bits[-1]
    else:
        args, name = bits[1:], None

    nodelist = parser.parse(('endhighlight',))
    parser.delete_first_token()
    return HighlightNode(nodelist, map(parser.compile_filter, args), name)

@register.filter(name='highlight')
def highlight_filter(value, arg):
    return highlight(value, arg)['highlighted']

def hits(text, phrases, ignore_case=None, word_boundary=None):
    if isinstance(phrases, basestring):
        phrases = [phrases]
    if ignore_case is None:
        ignore_case = get_setting('IGNORE_CASE')
    if word_boundary is None:
        word_boundary = get_setting('WORD_BOUNDARY')

    phrases = map(re.escape, phrases)
    flags = ignore_case and re.I or 0
    re_template = word_boundary and r"\b(%s)\b" or r"(%s)"
    expr = re.compile(re_template % "|".join(phrases), flags)
    return len(expr.findall(text))

class HitsNode(FunctionProxyNode):
    def get_value(self, *args):
        return hits(*args)

    def string_value(self, value):
        return "%d" % value

@register.tag(name='hits')
def hits_tag(parser, token):
    """
        {% hits search_terms [ignore_case] [word_boundary] [as name] %}
        ...text...
        {% endhits %}
    """
    bits = list(token.split_contents())
    if not 2 <= len(bits) <= 6:
        usage = hits_tag.__doc__.strip()
        raise TemplateSyntaxError("%r expected usage: %s" % (bits[0], usage))

    if len(bits) > 3 and bits[-2] == "as":
        args, name = bits[1:-2], bits[-1]
    else:
        args, name = bits[1:], None

    nodelist = parser.parse(('endhits',))
    parser.delete_first_token()
    return HitsNode(nodelist, map(parser.compile_filter, args), name)

@register.filter(name='hits')
def hits_filter(value, arg):
    return hits(value, arg)
hits.is_safe = True

########NEW FILE########
__FILENAME__ = truncate
"""
Template tags to make strings shorter in various ways.
"""

from django import template

register = template.Library()


@register.filter
def truncate_chars(value, max_length):
    """
    Truncates a string after a certain number of characters.
    """
    max_length = int(max_length)
    if len(value) > max_length:
        truncd_val = value[:max_length-1]
        if value[max_length] != " ":
            truncd_val = truncd_val[:truncd_val.rfind(" ")]
        return  truncd_val + "..."
    return value

@register.filter
def truncate_chars_middle(value, max_length):
    """
    Truncate a string putting dots in the its middle after a certain number of
    characters.
    """
    max_length = int(max_length)
    value_length = len(value)
    if value_length > max_length:
        max_first = max_length/2
        div_rest = max_length%2
        truncd_val = value[:max_first-2+div_rest]
        truncd_val2 = value[-(max_first-1):]
        return truncd_val + "..." + truncd_val2
    return value
########NEW FILE########
__FILENAME__ = txcommontags
# -*- coding: utf-8 -*-
import re
from django import template
from django.conf import settings
from django.template.defaultfilters import stringfilter
from django.utils.safestring import mark_safe
from django.utils.html import conditional_escape
from django.utils.translation import ugettext_lazy as _
from django.template import Node, NodeList, TemplateSyntaxError
from actionlog.models import LogEntry
from transifex.projects.models import Project
from transifex import txcommon

register = template.Library()

class ResolverNode(template.Node):
    """
    A small wrapper that adds a convenient resolve method.
    """
    def resolve(self, var, context):
        """Resolves a variable out of context if it's not in quotes"""
        if var is None:
            return var
        if var[0] in ('"', "'") and var[-1] == var[0]:
            return var[1:-1]
        else:
            return template.Variable(var).resolve(context)

    @classmethod
    def next_bit_for(cls, bits, key, if_none=None):
        try:
            return bits[bits.index(key)+1]
        except (ValueError, IndexError):
            return if_none


class LatestProjects(template.Node):

    def __init__(self, number=5):
        self.number = number

    def render(self, context):
        try:
            latest_projects = Project.public.order_by('-created')[:self.number]
        except ValueError:
            latest_projects = None

        context['latest_projects'] = latest_projects
        return ''

class DoGetLatestProjects:

    def __init__(self):
        pass

    def __call__(self, parser, token):
        tokens = token.contents.split()
        if not tokens[1].isdigit():
            raise template.TemplateSyntaxError, (
                "The argument for '%s' must be an integer" % tokens[0])
        return LatestProjects(tokens[1])

register.tag('get_latest_projects', DoGetLatestProjects())


@register.inclusion_tag("common_render_metacount.html")
def render_metacount(list, countable):
    """
    Return meta-style link rendered as superscript to count something.

    For example, with list=['a', 'b'] and countable='boxes' return
    the HTML for "2 boxes".
    """
    count = len(list)
    if count > 1:
        return {'count': count,
                'countable': countable}

@register.inclusion_tag("common_homelink.html")
def homelink(text=_("Home")):
    """Return a link to the homepage."""
    return {'text': text}

@register.simple_tag
def txversion():
    """Return the version of Transifex"""
    return txcommon.version

@register.simple_tag
def txrevision():
    """
    Return the revision of the Transifex repository in case it's running on
    top of a checkout. If it's not, return an empty string.
    """
    return txcommon.revision

@register.simple_tag
def txversion_full():
    """
    Return the full version of Transifex.

    For versions that are not 'final' return the current version of Transifex
    plus the revision of the repository, in case it's running on top of a
    checkout.
    """
    return txcommon.version_full

class CounterNode(ResolverNode):
    """A template node to count how many times it was called."""

    @classmethod
    def handle_token(cls, parser, token):
        bits = token.contents.split()
        tag_name = bits[0]
        kwargs = {
            'initial': cls.next_bit_for(bits, tag_name, 0),
        }
        return cls(**kwargs)

    def __init__(self, initial):
        self.count = 0
        self.initial = initial

    def render(self, context):
        if self.count == 0 and self.initial != 0:
            try:
                initial = int(self.initial)
            except ValueError:
                initial = int(template.resolve_variable(self.initial, context))
        else:
            initial = 0

        self.count += 1 + initial
        return self.count

@register.tag
def counter(parser, token):
    """
    Return a number increasing its counting each time it's called.
    An ``initial`` value can be passed to identify from which number it should
    start counting.

    Syntax::

        {% counter %}
        {% counter 20 %}

    """
    return CounterNode.handle_token(parser, token)


# Forms

@register.inclusion_tag("form_as_table_rows.html", takes_context=True)
def form_as_table_rows(context, form, id=None):
    """
    Create a form using HTML table rows.
    """
    context['form'] = form
    context['id'] = id
    return context


# Email Munger by cootetom
# http://www.djangosnippets.org/snippets/1284/

@register.filter
@stringfilter
def mungify(email, text=None, autoescape=None):
    text = text or email

    if autoescape:
        email = conditional_escape(email)
        text = conditional_escape(text)

    emailArrayContent = ''
    textArrayContent = ''
    r = lambda c: '"' + str(ord(c)) + '",'

    for c in email: emailArrayContent += r(c)
    for c in text: textArrayContent += r(c)

    result = """<script type=\"text/javascript\">
                var _tyjsdf = [%s], _qplmks = [%s];
                document.write('<a href="&#x6d;&#97;&#105;&#x6c;&#000116;&#111;&#x3a;');
                for(_i=0;_i<_tyjsdf.length;_i++){document.write('&#'+_tyjsdf[_i]+';');}
                document.write('">');
                for(_i=0;_i<_qplmks.length;_i++){document.write('&#'+_qplmks[_i]+';');}
                document.write('<\/a>');
                </script>""" % (re.sub(r',$', '', emailArrayContent),
                                re.sub(r',$', '', textArrayContent))

    return mark_safe(result)

mungify.needs_autoescape = True

@register.filter
def sort(value, arg):
    keys = [k.strip() for k in arg.split(',')]
    return txcommon.utils.key_sort(value, *keys)


# Temporary filter
@register.filter
def notice_type_user_filter(noticetype_list):
    """
    Filter a NoticeType list passed by parameter using the NOTICE_TYPES
    dictionary that says which notice types must be shown to the user.

    It is necessary by now until the upstream project have a model change to be
    able to do this filtering from the database.
    """
    from txcommon.notifications import NOTICE_TYPES
    new_list=[]
    for nt in noticetype_list:
        add = True
        for n in NOTICE_TYPES:
            if nt['notice_type'].label == n["label"]:
                if not n["show_to_user"]:
                    add = False
        if add:
            new_list.append(nt)
    return new_list

@register.filter
def in_list(value, arg):
    """Check if a value is present in a list."""
    return value in arg

@register.filter
def getitem(d, key):
  return d.get(key, '')

@register.filter
def get_next(request):
    """Return the next path from the request."""
    try:
        next = request.GET.get('next', '')
        if not next:
            next = request.path
        return next
    except AttributeError:
        return ''

@register.filter
def size_humanize(value):
    """Return a more human readable size number with the appropriate unit type."""
    return txcommon.utils.size_human(value)

@register.filter
def strip_tags(value):
    """Return the value with HTML tags striped."""
    return txcommon.rst.strip_tags(value)

@register.filter
def as_rest_title(value, border=None):
    """
    Return a value as a restructured text header.

    border - Character to be used in the header bottom-border
    """
    return txcommon.rst.as_title(value, border)

class TooltipNode(Node):
    def __init__(self, prefix, id, nodelist):
        self.prefix = prefix
        self.id = id
        self.nodelist = nodelist

    def __repr__(self):
        return "<TooltipNode:%s>" % self.id

    def render(self, context):
        output = self.nodelist.render(context).replace("\"", "\\\"").replace("\n", "") # We need better escaping ofc!
        id = self.id.resolve(context)
        return """<script type=\"text/javascript\">\ntooltip("#%s-%s", "%s");\n</script>""" % (self.prefix, id, output)

class GetSettings(Node):

    def __init__(self, variable_name, context_variable):
        self.variable_name = variable_name
        self.context_variable = context_variable

    def render(self, context):
        try:
            context[self.context_variable] = settings.__getattr__(
                    self.variable_name)
        except AttributeError:
            context[self.context_variable] = False

        return ""

def do_tooltip(parser, token):
    try:
        bits = token.split_contents()
        cmd, prefix, id = bits

    except:
        raise TemplateSyntaxError("%r expects two arguments constant 'prefix' and variable 'id'" %
                                  bits[0])
    nodelist = parser.parse(('endtooltip',))
    parser.delete_first_token()
    prefix = prefix[1:-1] # Strip quotes
    id = parser.compile_filter(id)
    return TooltipNode(prefix, id, nodelist)

register.tag('tooltip', do_tooltip)

def get_settings(parser, token):
    """
    {% settings VARIABLE_NAME as variable_name %}
    """
    bits = token.split_contents()
    if len(bits) == 2:
        variable_name = bits[1]
        context_variable = variable_name
    elif len(bits) == 4 and bits[2] == 'as':
        variable_name = bits[1]
        context_variable = bits[3]
    else:
        raise TemplateSyntaxError("%r expects a single argument or "\
                "two arguments separated by 'as'." % bits[0])
    return GetSettings(variable_name, context_variable)

register.tag('settings', get_settings)

########NEW FILE########
__FILENAME__ = txpagination
"""
NOTE: Why does Transifex have another pagination method?

Django-pagination does not work with POST method. Once the navigation among
the forms/pages of the translation wizard (webtrans app) requires a POST
method to be sent, in order to save the data in the session for each form/page,
it was necessary to implement a new templatetag for this kind of situation.

The most import part of this templatetag is the fact it allows to use a custom
template file anywhere it's needed. The template file used for the translation
wizard has its organization for each page as 'submit' buttons, so the whole
form is sent whenever a user navigates to another page.

Usage:

{% load txpagination %}
{% paginate "/items/" items current_page_number 20 6 paged_items %}
{% for item in paged_items %}
  {{ item }}
{% endfor %}
{% include "pagination.html" %}

Reference:
http://blog.awarelabs.com/2009/digg-style-pagination-in-django-revisited/
"""
import math
from django import template

register = template.Library()

class Pages:
  def __init__(self, view, page, pages, segment):
    self.view = view
    self.page = page + 1
    self.pages = pages
    self.left = []
    self.middle = []
    self.right = []
    self.next = None
    self.previous = None

    if self.page > 1:
      self.previous = self.page - 1

    p = int(1)

    while p < segment and p <= self.pages:
      self.left.append(p)
      p = p + 1

    if p < self.page - segment/2:
      p = self.page - segment/2 + 1

    if p > segment:
      while p < self.page + segment/2 and p <= self.pages:
        self.middle.append(int(p))
        p = p + 1
    else:
      while p < self.page + segment/2 and p <= self.pages:
        self.left.append(int(p))
        p = p + 1

    if p < self.pages - segment/2:
      p = self.pages - segment/2

    if p > self.pages - segment/2:
      while p < self.pages:
        self.middle.append(int(p))
        p = p + 1
    else:
      while p <= self.pages:
        self.right.append(int(p))
        p = p + 1

    if self.page < self.pages:
      self.next = self.page + 1

class PaginationNode(template.Node):
  def __init__(self, view, objects_var, page_var, step, segment, variable):
    self.view = view
    self.objects_var = objects_var
    self.page_var = page_var
    self.step = step
    self.segment = segment
    self.variable = variable

  def render(self, context):

    try:
        self.step = int(self.step)
    except ValueError:
        self.step = int(template.resolve_variable(self.step, context))

    try:
        self.segment = int(self.segment)
    except ValueError:
        self.segment = int(template.resolve_variable(self.segment, context))

    objects = template.resolve_variable(self.objects_var, context)

    page = template.resolve_variable(self.page_var, context)
    if not page:
      page = 1

    page = int(page) - 1

    count = len(objects)
    pages = math.ceil(float(count) / self.step)

    try:
      context[self.variable] = objects[page * self.step: (page + 1) * self.step]
      context['pagination'] = Pages(self.view, page, pages, self.segment)
    except:
      pass

    return ''

def paginate(parser, token):
  tokens = token.contents.split()
  if len(tokens) != 7:
    raise template.TemplateSyntaxError, "pagination tag takes view, objects, page, step, segment, and variable as arguments"
  return PaginationNode(tokens[1], tokens[2], tokens[3], tokens[4], tokens[5], tokens[6])

register.tag('txpaginate', paginate)


########NEW FILE########
__FILENAME__ = base
# -*- coding: utf-8 -*-

from django.conf import settings

try:
    ENABLE_TXTESTSUITE = settings.ENABLE_TXTESTSUITE
except Exception, e:
    ENABLE_TXTESTSUITE = False

if ENABLE_TXTESTSUITE:
    from transifex.addons.txtestsuite.tests.base2 import *
else:
    from transifex.txcommon.tests.base_legacy import *

########NEW FILE########
__FILENAME__ = base_legacy
# -*- coding: utf-8 -*-
import os
from django.core import management
from django.core.urlresolvers import reverse
from django.conf import settings
from django.utils import unittest
from django.db.models.loading import get_model
from django.test import TestCase, TransactionTestCase
from django.test.client import Client
from django.contrib.auth.models import User, Group, Permission as DjPermission
from django.contrib.contenttypes.models import ContentType
from django.utils import unittest
from django_addons.autodiscover import autodiscover_notifications
from transifex.txcommon.notifications import NOTICE_TYPES
from transifex.txcommon.log import logger

# Load models
Language = get_model('languages', 'Language')
AuPermission = get_model('authority', 'Permission')
Project = get_model('projects', 'Project')
Resource = get_model('resources', 'Resource')
Release = get_model('releases', 'Release')
Team = get_model('teams', 'Team')
SourceEntity = get_model('resources', 'SourceEntity')

def skip(func):
    func_name = func.__name__
    def decorator(func):
        msg = "%s skipped. Please implement it in your project path."%func_name
        if settings.TX_ROOT != settings.PROJECT_PATH:
            logger.debug(msg)
        return unittest.skipUnless(settings.TX_ROOT == settings.PROJECT_PATH, msg)
    return decorator

# Please refer to the README file in the tests directory for more info about
# the various user roles.
USER_ROLES = [
    'anonymous',
    'registered',
    'maintainer',
    'writer',
    'team_coordinator',
    'team_member',
    'reviewer']
PASSWORD = '123412341234'


def deactivate_caching_middleware():
    list_middle_c = list(settings.MIDDLEWARE_CLASSES)
    try:
        list_middle_c.remove('django.middleware.cache.FetchFromCacheMiddleware')
    except ValueError:
        pass
    try:
        list_middle_c.remove('django.middleware.cache.UpdateCacheMiddleware')
    except ValueError:
        pass


def deactivate_csrf_middleware():
    list_middle_c = list(settings.MIDDLEWARE_CLASSES)
    try:
        list_middle_c.remove('external.csrf.middleware.CsrfMiddleware')
    except ValueError:
        pass
    settings.MIDDLEWARE_CLASSES = list_middle_c


class TestCaseMixin(object):

    @staticmethod
    def response_in_browser(resp, halt=True):
        """
        Useful for debugging it shows the content of a http response in the
        browser when called.
        """
        from transifex.txcommon.tests.utils import response_in_browser
        return response_in_browser(resp, halt=True)

def create_users_and_clients(USER_ROLES):
    registered = Group.objects.get(name="registered")
    registered.permissions.add(
        DjPermission.objects.get_or_create(
            codename='add_project', name='Can add project',
            content_type=ContentType.objects.get_for_model(Project))[0])

    user = {}
    client = {}

    # Create users, respective clients and login users
    for nick in USER_ROLES:
        client[nick] = Client()
        if nick != 'anonymous':
            # Create respective users
            if User.objects.filter(username=nick):
                user[nick] = User.objects.get(username=nick)
            else:
                user[nick] = User.objects.create_user(
                    nick, '%s@localhost' % nick, PASSWORD)
            user[nick].groups.add(registered)
            # Login non-anonymous personas
            client[nick].login(username=nick, password=PASSWORD)

    return user, client


class Users(TestCaseMixin):
    """A class to create users in setUp().

    Use this as a mixin.
    """

    fixtures = ["sample_users", "sample_site", "sample_languages", "sample_data"]

    def setUp(self):
        self.user, self.client = create_users_and_clients(USER_ROLES)
        for nick in USER_ROLES:
            if nick != 'anonymous':
                self.assertTrue(self.user[nick].is_authenticated())
        super(Users, self).setUp()

TransactionUsers = Users

class NoticeTypes(TestCaseMixin):
    """A class to create default notice types.

    Use this as a mixin in tests.
    """

    @classmethod
    def setUpClass(cls):
        from django.core import management
        management.call_command('txcreatenoticetypes', verbosity=0)
        super(NoticeTypes, cls).setUpClass()


class TransactionNoticeTypes(TestCaseMixin):
    """A class to create default notice types.

    Use this as a mixin in tests.
    """

    def setUp(self):
        from django.core import management
        management.call_command('txcreatenoticetypes', verbosity=0)
        super(TransactionNoticeTypes, self).setUp()


class Languages(TestCaseMixin):
    """A class to create default languages.

    Use this as a mixin in tests.
    """

    @classmethod
    def setUpClass(cls):
        from django.core import management
        management.call_command('txlanguages', verbosity=0)
        cls.language = Language.objects.get(code='pt_BR')
        cls.language_en = Language.objects.get(code='en_US')
        cls.language_ar = Language.objects.get(code='ar')
        #self.language_hi_IN = Language.objects.get(code='hi_IN')
        super(Languages, cls).setUpClass()


class TransactionLanguages(TestCaseMixin):
    """A class to create default languages.

    Use this as a mixin in transaction-based tests.
    """

    def setUp(self):
        from django.core import management
        management.call_command('txlanguages', verbosity=0)
        self.language = Language.objects.get(code='pt_BR')
        self.language_en = Language.objects.get(code='en_US')
        self.language_ar = Language.objects.get(code='ar')
        super(TransactionLanguages, self).setUp()


class Projects(Users):
    """A class to create sample projects.

    Use this as a mixin in tests.
    """

    fixtures = ["sample_users", "sample_languages", "sample_data", ]

    def setUp(self):
        super(Projects, self).setUp()
        self.project = Project.objects.get(slug='project1')
        self.project.maintainers.add(self.user['maintainer'])
        self.project.owner = self.user['maintainer']
        self.project.save()

        self.project_private = Project.objects.get(slug='project2')
        self.project_private.maintainers.add(self.user['maintainer'])
        self.project_private.owner = self.user['maintainer']
        self.project_private.save()

TransactionProjects = Projects

class Resources(Projects):
    """A class to create sample resources.

    Use this as a mixin in tests.
    """

    def setUp(self):
        # Create a resource
        super(Resources, self).setUp()
        self.resource = Resource.objects.create(
            slug="resource1", name="Resource1", project=self.project,
            i18n_type='PO'
        )
        self.resource_private = Resource.objects.create(
            slug="resource1", name="Resource1", project=self.project_private,
            i18n_type='PO'
        )

TransactionResources = Resources

class SourceEntities(Resources):
    """A class to create some sample source entities.

    Use this as a mixin in tests.
    """

    def setUp(self):
        super(SourceEntities, self).setUp()
        self.source_entity = SourceEntity.objects.create(
            string='String1', context='Context1', occurrences='Occurrences1',
            resource=self.resource
        )
        self.source_entity_private = SourceEntity.objects.create(
            string='String1', context='Context1', occurrences='Occurrences1',
            resource=self.resource_private
        )
        self.source_entity_plural = SourceEntity.objects.create(
            string='pluralized_String1', context='Context1',
            occurrences='Occurrences1_plural', resource= self.resource,
            pluralized=True
        )
        self.source_entity_plural_private = SourceEntity.objects.create(
            string='pluralized_String1', context='Context1',
            occurrences='Occurrences1_plural', resource= self.resource_private,
            pluralized=True
        )

TransactionSourceEntities = SourceEntities

class Translations(SourceEntities):
    """A class to create some sample translations.

    Use this as a mixin in tests.
    """

    def setUp(self):
        # Create one translation
        super(Translations, self).setUp()
        self.translation_en = self.source_entity.translations.create(
            string='Buy me some BEER :)',
            rule=5,
            source_entity=self.source_entity,
            language=self.language_en,
            user=self.user['registered'],
            resource=self.resource
        )
        self.translation_ar = self.source_entity.translations.create(
            string=u'This is supposed to be arabic text! αβγ',
            rule=5,
            source_entity=self.source_entity,
            language=self.language_ar,
            user=self.user['registered'],
            resource=self.resource
        )

TransactionTranslations = Translations

class SampleData(TransactionLanguages, TransactionTranslations,
        TransactionNoticeTypes):
    """A class that has all sample data defined."""

class TransactionBaseTestCase(SampleData, TransactionTestCase,):
    fixtures = ["sample_users", "sample_site", "sample_languages", "sample_data"]

    def __init__(self, *args, **kwargs):
        super(TransactionBaseTestCase, self).__init__(*args, **kwargs)

        # Useful for writing tests: Enter ipython anywhere w/ ``self.ipython()``
        try:
            from IPython.frontend.terminal.embed import InteractiveShellEmbed as shell
            self.ipython = shell()
        except ImportError:
            pass

        #FIXME: This should not happen, since it diverges away the test suite
        # from the actual deployment.
        # Remove the caching middlewares because they interfere with the
        # anonymous client.
        deactivate_caching_middleware()
        deactivate_csrf_middleware()
        # Disable actionlog, which in turn disables noticetype requirement.
        settings.ACTIONLOG_ENABLED = False

    def setUp(self):
        """Set up a sample set of base objects for inherited tests.

        If you are inheriting the class and overriding setUp, don't forget to
        call super::

          from transifex.txcommon.tests import (base, utils)
          class TestClassName(base.BaseTestCase)
              def setUp(self):
                  super(TestClassName, self).setUp()

        """
        super(TransactionBaseTestCase, self).setUp()

        # Add django-authority permission for writer
        self.permission = AuPermission.objects.create(
            codename='project_perm.submit_translations',
            approved=True, user=self.user['writer'],
            content_object=self.project, creator=self.user['maintainer'])

        # Create teams
        self.team = Team.objects.get_or_create(language=self.language,
            project=self.project, creator=self.user['maintainer'])[0]
        self.team_private = Team.objects.get_or_create(language=self.language,
            project=self.project_private, creator=self.user['maintainer'])[0]
        self.team.coordinators.add(self.user['team_coordinator'])
        self.team.members.add(self.user['team_member'])
        self.team.members.add(self.user['reviewer'])
        self.team_private.coordinators.add(self.user['team_coordinator'])
        self.team_private.members.add(self.user['team_member'])
        self.team_private.members.add(self.user['reviewer'])

        # Create a release
        self.release = Release.objects.create(slug="releaseslug1",
            name="Release1", project=self.project)
        self.release.resources.add(self.resource)
        self.release_private = Release.objects.create(slug="releaseslug2",
            name="Release2", project=self.project_private)
        self.release_private.resources.add(self.resource_private)


        # Create common URLs
        # Easier to call common URLs in your view/template unit tests.
        self.urls = {
            'project': reverse('project_detail', args=[self.project.slug]),
            'project_edit': reverse('project_edit', args=[self.project.slug]),
            'project_resources': reverse('project_resources', args=[self.project.slug]),
            'resource': reverse('resource_detail', args=[self.resource.project.slug, self.resource.slug]),
            'resource_actions': reverse('resource_actions', args=[self.resource.project.slug, self.resource.slug, self.language.code]),
            'resource_edit': reverse('resource_edit', args=[self.resource.project.slug, self.resource.slug]),
            'translate': reverse('translate_resource', args=[self.resource.project.slug, self.resource.slug, self.language.code]),
            'release': reverse('release_detail', args=[self.release.project.slug, self.release.slug]),
            'release_create': reverse('release_create', args=[self.project.slug]),
            'team': reverse('team_detail', args=[self.resource.project.slug,
                                                 self.language.code]),

            'project_private': reverse('project_detail', args=[self.project_private.slug]),
            'resource_private': reverse('resource_detail', args=[self.resource_private.project.slug, self.resource_private.slug]),
            'translate_private': reverse('translate_resource', args=[self.resource_private.project.slug, self.resource_private.slug, self.language.code]),
        }

        from django.core import management
        management.call_command('txstatsupdate', verbosity=0)


class BaseTestCase(Languages, NoticeTypes, Translations, TestCase):
    """Provide a solid test case for all tests to inherit from."""

    fixtures = ["sample_users", "sample_site", "sample_languages", "sample_data"]

    def __init__(self, *args, **kwargs):
        super(BaseTestCase, self).__init__(*args, **kwargs)

        # Useful for writing tests: Enter ipython anywhere w/ ``self.ipython()``
        try:
            from IPython.frontend.terminal.embed import InteractiveShellEmbed as shell
            self.ipython = shell()
        except ImportError:
            pass

        #FIXME: This should not happen, since it diverges away the test suite
        # from the actual deployment.
        # Remove the caching middlewares because they interfere with the
        # anonymous client.
        deactivate_caching_middleware()
        deactivate_csrf_middleware()
        # Disable actionlog, which in turn disables noticetype requirement.
        settings.ACTIONLOG_ENABLED = False

    def setUp(self):
        """Set up a sample set of base objects for inherited tests.

        If you are inheriting the class and overriding setUp, don't forget to
        call super::

          from transifex.txcommon.tests import (base, utils)
          class TestClassName(base.BaseTestCase)
              def setUp(self):
                  super(TestClassName, self).setUp()

        """
        super(BaseTestCase, self).setUp()

        # Add django-authority permission for writer
        self.permission = AuPermission.objects.create(
            codename='project_perm.submit_translations',
            approved=True, user=self.user['writer'],
            content_object=self.project, creator=self.user['maintainer'])

        # Create teams
        self.team = Team.objects.get_or_create(language=self.language,
            project=self.project, creator=self.user['maintainer'])[0]
        self.team_private = Team.objects.get_or_create(language=self.language,
            project=self.project_private, creator=self.user['maintainer'])[0]
        self.team.coordinators.add(self.user['team_coordinator'])
        self.team.members.add(self.user['team_member'])
        self.team.members.add(self.user['reviewer'])
        self.team_private.coordinators.add(self.user['team_coordinator'])
        self.team_private.members.add(self.user['team_member'])
        self.team_private.members.add(self.user['reviewer'])

        # Create a release
        self.release = Release.objects.create(slug="releaseslug1",
            name="Release1", project=self.project)
        self.release.resources.add(self.resource)
        self.release_private = Release.objects.create(slug="releaseslug2",
            name="Release2", project=self.project_private)
        self.release_private.resources.add(self.resource_private)


        # Create common URLs
        # Easier to call common URLs in your view/template unit tests.
        self.urls = {
            'project': reverse('project_detail', args=[self.project.slug]),
            'project_edit': reverse('project_edit', args=[self.project.slug]),
            'project_resources': reverse('project_resources', args=[self.project.slug]),
            'resource': reverse('resource_detail', args=[self.resource.project.slug, self.resource.slug]),
            'resource_actions': reverse('resource_actions', args=[self.resource.project.slug, self.resource.slug, self.language.code]),
            'resource_edit': reverse('resource_edit', args=[self.resource.project.slug, self.resource.slug]),
            'translate': reverse('translate_resource', args=[self.resource.project.slug, self.resource.slug, self.language.code]),
            'release': reverse('release_detail', args=[self.release.project.slug, self.release.slug]),
            'release_create': reverse('release_create', args=[self.project.slug]),
            'team': reverse('team_detail', args=[self.resource.project.slug,
                                                 self.language.code]),

            'project_private': reverse('project_detail', args=[self.project_private.slug]),
            'resource_private': reverse('resource_detail', args=[self.resource_private.project.slug, self.resource_private.slug]),
            'translate_private': reverse('translate_resource', args=[self.resource_private.project.slug, self.resource_private.slug, self.language.code]),
        }

        from django.core import management
        management.call_command('txstatsupdate', verbosity=0)

    def tearDown(self):
        pass

    def create_more_entities(self, total=1):
        """A method to create more entities for those tests that require them."""
        self.source_entity2 = SourceEntity.objects.create(string='String2',
            context='Context1', occurrences='Occurrences1', resource=self.resource)
        self.translation_en2 = self.source_entity2.translations.create(
            string='Translation String 2',
            rule=5,
            source_entity=self.source_entity,
            resource=self.resource,
            language=self.language_en,
            user=self.user['registered'])
        self.resource.update_total_entities()
        self.resource.update_wordcount()

    # Custom assertions
    def assertNoticeTypeExistence(self, noticetype_label):
        """Assert that a specific noticetype was created."""
        found = False
        for n in NOTICE_TYPES:
             if n["label"] == noticetype_label:
                 found = True
        self.assertTrue(found, msg = "Notice type '%s' wasn't "
            "added" % noticetype_label)

    #FIXME: Port all status checks to this method.
    def assert_url_statuses(self, pages_dict, client):
        """Test whether a list of URLs return the correct status codes.

        'pages_dict':
          A dictionary of status codes, each one listing a
          set of pages to test whether they return that status code.
        'client': A django.test.client.Client object.

        >>> pages = {200: ['/', '/projects/',],
                     404: ['/foobar'],}
        >>> self.assert_url_statuses(pages, self.client["anonymous"])

        """

        for expected_code, pages in pages_dict.items():
            for page_url in pages:
                page = client.get(page_url)
                self.assertEquals(page.status_code, expected_code,
                    "Status code for page '%s' was %s instead of %s" %
                    (page_url, page.status_code, expected_code))


class BaseTestCaseTests(BaseTestCase):
    """Test the base test case itself."""

    @unittest.skipIf(settings.TX_ROOT != settings.PROJECT_PATH, 'Unsupported redirect')
    def test_basetest_users(self):
        """Test that basic users can function normally."""
        for role in USER_ROLES:
            # All users should be able to see the homepage
            resp = self.client[role].get('/')
            self.assertEquals(resp.status_code, 200)


########NEW FILE########
__FILENAME__ = projects
#coding: utf-8
from django.core import management
from django.test import TestCase
from django.core.urlresolvers import reverse
from django_addons.autodiscover import autodiscover_notifications
from transifex.txcommon.tests.base import BaseTestCase, skip

# TODO: Most of these are really unnecessary and will break again at some point
# so they should be removed.

class TestmakerBase(BaseTestCase):
    pass


class TestmakerAnonymous(TestmakerBase):

    login_url = reverse('userena_signin')

    def test__128272158449(self):
        r = self.client["anonymous"].get(self.login_url)
        self.assertEqual(r.status_code, 200)
        self.assertTrue("id_identification" in r.content)


class TestmakerLoggedIn(TestmakerBase):

    def setUp(self, *args, **kwargs):
        super(TestmakerLoggedIn, self).setUp(*args, **kwargs)
        self.c = self.client["team_member"]

    @skip
    def test_projects_128272193615(self):
        r = self.c.get('/projects/', {})
        self.assertEqual(r.status_code, 200)
        self.assertTrue("Test Project" in r.content)

    def test_projectspexample_128272202817(self):
        r = self.c.get('/projects/p/project1/', {})
        self.assertEqual(r.status_code, 200)
        self.assertEqual(unicode(r.context["project"]), u"""Test Project""")
        self.assertEqual(unicode(r.context["languages"][0]), u"""Afrikaans (af)""")

    def test_projectspexampleeditaccess_12828136919(self):
        r = self.c.get('/projects/p/project1/edit/access/', {})
        self.assertEqual(r.status_code, 403)

    # Timeline
    def test_projectspexampletimeline_12828136955(self):
        r = self.c.get('/projects/p/project1/timeline/', {})
        self.assertEqual(r.status_code, 200)

    def test_projectspexampletimeline_128281374911(self):
        r = self.c.get('/projects/p/project1/timeline/', {'action_time': '', 'action_type': '2', })
        self.assertEqual(r.status_code, 200)

    # Widgets
    def test_projectspexamplewidgets_12828136967(self):
        r = self.c.get('/projects/p/project1/widgets/', {})
        self.assertEqual(r.status_code, 200)

    def test_projectspexampleresourceresource1chart_128281369682(self):
        r = self.c.get('/projects/p/project1/resource/resource1/chart/', {})
        self.assertEqual(r.status_code, 200)

    def test_projectspexampleresourceresource1chartinc_js_128281369702(self):
        r = self.c.get('/projects/p/project1/resource/resource1/chart/inc_js/', {})
        self.assertEqual(r.status_code, 200)

    def test_projectspexampleresourceresource1chartimage_png_12828136972(self):
        r = self.c.get('/projects/p/project1/resource/resource1/chart/image_png/', {})
        self.assertEqual(r.status_code, 302)

    def test_projectspexampleresourceresource1chartjson_128281369791(self):
        r = self.c.get('/projects/p/project1/resource/resource1/chart/json/', {'tqx': 'reqId:0', })
        self.assertEqual(r.status_code, 200)

    # Teams
    def test_projectspexampleteamsadd_128281371426(self):
        r = self.c.get('/projects/p/project1/languages/add/', {})
        self.assertEqual(r.status_code, 403)

    def test_projectspexampleteamsadd_128281371653(self):
        r = self.c.post('/projects/p/project1/languages/add/', {'language': '', 'creator': '', 'mainlist': '', 'save_team': 'Save team', 'members_text': '', 'next': '', 'project': '1', 'coordinators': '|', 'coordinators_text': '', 'members': '|', }, follow=True)
        self.assertEqual(r.status_code, 403)

    def test_ajaxajax_lookupusers_128281371984(self):
        r = self.c.get('/ajax/ajax_lookup/users', {'q': 'ed', 'timestamp': '1282813719831', 'limit': '150', })
        self.assertContains(r, 'editor', status_code=200)

    def test_projectspexampleteamsadd_128281372177(self):
        r = self.c.post('/projects/p/project1/languages/add/', {'language': '1', 'creator': '1', 'mainlist': '', 'save_team': 'Save team', 'members_text': '', 'next': '', 'project': '1', 'coordinators': '|1|', 'coordinators_text': '', 'members': '|', }, follow=True)
        self.assertEqual(r.status_code, 403)
        r = self.c.get('/projects/p/project1/language/af/delete/', {})
        self.assertEqual(r.status_code, 403)

    def test_projectspexampleteamafdelete_128282090157(self):
        r = self.c.post('/projects/p/project1/language/ar/delete/', {'team_delete': "Yes, I'm sure!", })
        self.assertEqual(r.status_code, 403)
        r = self.c.get('/projects/p/project1/language/ar/', {})
        self.assertEqual(r.status_code, 200)

    # Edit project
    def test_projectspexampleedit_128281375582(self):
        r = self.c.get('/projects/p/project1/edit/', {})
        self.assertEqual(r.status_code, 403)

    # Other
    def test_faviconico_128281378356(self):
        r = self.c.get('/favicon.ico', {})
        self.assertNotEqual(r.status_code, 404)


########NEW FILE########
__FILENAME__ = user
# -*- coding: utf-8 -*-

from django.contrib.auth.models import User
from transifex.txcommon.tests.base import BaseTestCase
from transifex.txcommon.user import get_username


class TestSocialAuth(BaseTestCase):
    """Test the social auth custom steps."""

    def test_case_insensitivity_in_username_generation(self):
        """Test that we case-insensitively search for exisitng usernames."""
        User.objects.create(username='me')
        username = get_username({'username': 'Me'}, None)
        self.assertNotEqual(username, 'Me')


########NEW FILE########
__FILENAME__ = utils
from transifex.txcommon.tests.base import USER_ROLES
from transifex.txcommon.log import logger

def getitem(list, index, default=None):
    """
    Return a value from a 'list' for the given 'index' or the 'default' value.
    """
    try:
        return list[index]
    except IndexError:
        return default

def assert_status_code(unittest, response, expected_code, url, user_role):
    unittest.assertEqual(response.status_code, expected_code,
        "Status code for page '%s' was %s instead of %s for the '%s' "
        "user role. \n%s" % (url, response.status_code, expected_code,
        user_role, response))


def check_page_status(unittest, user_role, url_roles):
    """
    Check if each URL set in 'url_roles' match its status_code with the
    response code status depending on the user role. Each URL can be added to
    the 'url_roles' dictionary using a predefined structure of data.

    unittest - It's a instance of a class that inherits
        txcommon.tests.base.BaseTestCase.
    user_role - One of the user roles allowed on
        txcommon.tests.base.BaseTestCase.
    url_roles - A structured dictionary containing the url to be tested.

    Structure of 'url_roles':
        url_roles = {'<REQUEST_METHOD>:<URL>':{
            '<USER_ROLE>':(<STATUS_CODE>, <DICT_OF_ARGS>,
                <EXPECTED_CONTENTS>, <UNEXPECTED_CONTENTS>, <FOLLOW_REDIRECT>),
            (...)
            },
        }

        <REQUEST_METHOD> - Might be 'GET' or 'POST'.
        <URL> - The url that must be tested.
        <USER_ROLE> - One of the user roles allowed on
            txcommon.tests.base.BaseTestCase. At least one user
            role is required.
        <STATUS_CODE> - Code of status for the HTTP response.
        <DICT_OF_ARGS> - Arguments that might be passed to the HTTP request.
            Not required.
        <EXPECTED_CONTENTS> - A string that might be found using
            assertContains on the response contents. Not required.
        <UNEXPECTED_CONTENTS> - A string that shouldn't be found. Not required.
        <FOLLOW_REDIRECT> - If it's a redirect, follow it

    Know issues:
        <EXPECTED_CONTENTS> usually does not work with the status code 302.
    """
    if not user_role in USER_ROLES:
        unittest.fail("Unknown user role: '%s'" % user_role)

    for url, date_dict in url_roles.items():
        try:
            expected_code = date_dict[user_role][0]
            args = getitem(date_dict[user_role], 1, {})
            expected_contents = getitem(date_dict[user_role], 2, None)
            unexpected_contents = getitem(date_dict[user_role], 3, None)
            follow_redirect = getitem(date_dict[user_role], 4, False)

            client = unittest.client[user_role]

            method, url = tuple(url.split(':'))
            if method == 'GET':
                response = client.get(url, args, follow=follow_redirect)
            elif method == 'POST':
                response = client.post(url, args, follow=follow_redirect)
            else:
                unittest.fail("Unknown method request: '%s'" % role)

            assert_status_code(unittest, response, expected_code, url,
                user_role)

            if expected_contents:
                unittest.assertContains(response, expected_contents,
                    status_code=expected_code)
            if unexpected_contents:
                unittest.assertNotContains(response, unexpected_contents,
                    status_code=expected_code)
        except KeyError:
            logger.info("User role '%s' not defined for the '%s' URL." % (
                user_role, url))


def convert_url_roles(url_with_roles_as_key):
    """
    Convert url roles from a dictionary using the roles as the key to a
    dictionary using the url as key.

    'url_with_roles_as_key' is a dict in the following format:

    url_with_roles_as_key = {
        '(301, )':[
            'GET:/projects/p/project1/access/pm/add',
        ],
        '(200, {}, "Translation Teams Off")':[
            'GET:/projects/p/project1/teams/',
        ],
    }

    Output:
        {'GET:/projects/p/project1/access/pm/add': {
            'anonymous': (301,),
            'maintainer': (301,),
            'registered': (301,),
            'team_coordinator': (301,),
            'team_member': (301,),
            'writer': (301,)},
        'GET:/projects/p/project1/teams/': {
            'anonymous': (200, {}, 'Translation Teams Off'),
            'maintainer': (200, {}, 'Translation Teams Off'),
            'registered': (200, {}, 'Translation Teams Off'),
            'team_coordinator': (200, {}, 'Translation Teams Off'),
            'team_member': (200, {}, 'Translation Teams Off'),
            'writer': (200, {}, 'Translation Teams Off')}}
        }
    """
    url_keys = {}
    for url_role, urls in url_with_roles_as_key.items():
        user_roles_dict={}
        url_role = eval(url_role)
        for user_role in USER_ROLES:
            user_roles_dict.update({user_role:url_role})
        for url in urls:
            url_keys.update({url:user_roles_dict})
    return url_keys


COLORS = ['BLACK', 'RED', 'GREEN', 'YELLOW', 'BLUE', 'MAGENTA', 'CYAN', 'WHITE']

def color_text(text, color_name, bold=False):
    """
    This command can be used to colorify command line output. If the shell
    doesn't support this or the --disable-colors options has been set, it just
    returns the plain text.

    Usage:
        print "%s" % color_text("This text is red", "RED")
    """
    return '\033[%s;%sm%s\033[0m' % (
        int(bold), COLORS.index(color_name) + 30, text)

def grep(haystack, needle, ln=0, color=None):
    """Highlight needle in haystack and return a few lines around it.

    Mimic UNIX's grep method. Search for a string (needle) in a text chunk
    (haystack).

    Return a list of matches. Each match will have ln number of lines
    before and after it (similar to "grep -C NUM"). The matching line will be
    highlighted with a color from a pre-defined list.

    Examples:

    >>> grep('a\nb\na1\na2\na3', 'b', 0)
    ['b']
    >>> grep('a\nb\na1\na2\na3', 'b', 1)
    ['a\nb\na1']
    >>> grep('a\nb\na1\na2\na3', 'b', 3)
    ['a\nb\na1\na2\na3']
    >>> grep('a\nb\na1\na2\na3', 'b', 3, 'RED')
    ['a\n\x1b[0;31mb\x1b[0m\na1\na2\na3']
    >>> grep('a\nb\na1\na2\na3', 'a')
    ['a', 'a1', 'a2', 'a3']
    >>> grep('a\nb\na1\na2\na3', 'a', 1)
    ['a\nb', 'b\na1\na2', 'a1\na2\na3', 'a2\na3']

    """

    #TODO: Merge two overlapping matches together.
    #TODO: Grep for more than one possible string (joined with logical OR).
    ret = []
    lines = haystack.split()
    for i, line in enumerate(lines):
        if needle in line:
            # Before
            first_possible = i-ln
            start = first_possible if first_possible >= 0 else 0
            before = '\n'.join(lines[start:i])
            # After
            last_possible = len(lines)
            end = i+1+ln if i+1+ln <= last_possible else last_possible
            after = '\n'.join(lines[i+1:end])
            # Let's join them with newlines if needed.
            txt = '%(before)s%(match)s%(after)s' % {
                'before': before + '\n' if before else '',
                'match': color_text(lines[i], color) if color else lines[i],
                'after': '\n' + after if after else ''}
            ret.append(txt)
    return ret

def highlight_grep(resp, text, context=2):
    """Highlight matches of text in response.content and print them.

    Particularly useful in tests with the django client to find some string
    in the response body. For example::

    >>> from txcommon.tests.utils import highlight_grep
    >>> resp = self.client.get(reverse('myUrlName', args=['foo']))
    >>> highlight_grep("SearchMe!")
    """

    res = grep(resp.content, text, context, 'RED')
    print ("\n===== Matches =====================================\n" +
           "\n---------------------------------------------------\n".join(res) +
           "\n===================================================\n")

def response_in_browser(resp, halt=True):
    """Open a browser and render the response's content.

    Use it in tests to visually present the response and find what you need
    with your browser's super tools such as 'View Source' and 'Inspect Element'.

    The browser will not render static media (e.g. CSS). To achieve this, run
    a separate Django server and setup your static serving variable to an
    absolute URI (e.g. STATIC_URL = 'http://localhost:8000/site_media/).
    This will trick the temporary window to show the test's HTML with the
    static files served from the server.

    Call it as follows::

    >>> from txcommon.tests.utils import response_in_browser
    >>> resp = self.client.get(reverse('myUrlName', args=['foo']))
    >>> response_in_browser(resp)

    More info http://miniblog.glezos.com/post/3388080372/tests-browser

    """

    import tempfile, webbrowser, time
    with tempfile.NamedTemporaryFile(suffix='.html') as f:
        f.write(resp.content)
        f.flush()
        webbrowser.open(f.name)
        if halt:
            raw_input("Press a key to continue with your tests...")
        else:
            # Wait a bit to give the chance to the browser to open the file.
            time.sleep(1)


########NEW FILE########
__FILENAME__ = user
# -*- coding: utf-8 -*-
"""
User related class and functions.
"""

from uuid import uuid4
from django.conf import settings
from django.contrib.auth.models import User
from userena.models import UserenaSignup
from social_auth.backends.pipeline import USERNAME, USERNAME_MAX_LENGTH, \
        warn_setting


class CreateUserFromSocial(object):
    """Create local users from a social auth mechanism.

    Perform every step to create new users to the system. This is a
    wrapper around userena.
    """

    def __call__(self, *args, **kwargs):
        """Create a new user to Transifex.

        For now, this is copied from social_auth.backends.pipeline.user.
        """
        user = kwargs.get('user')
        if user is not None:
            return {'user': user}
        username = kwargs.get('username')
        if username is None:
            return None
        details = kwargs.get('details')
        if details is not None:
            email = details.get('email')
        user = UserenaSignup.objects.create_user(
            username, email, password=None, active=True, send_email=False
        )
        # Activate user automatically
        user = UserenaSignup.objects.activate_user(user, user.userena_signup.activation_key)
        return {'user': user, 'is_new': True}


create_user = CreateUserFromSocial()


class GetUsername(object):
    """Choose a username for socially authenticated users.

    This is a wrapper around social_auth.backends.pipeline.user.get_username.
    """

    def __call__(self, details, user=None, *args, **kwargs):
        """Get a new username.

        We check for existing usernames in a case-insensitive way.
        """
        if user:
            return {'username': user.username}

        warn_setting('SOCIAL_AUTH_FORCE_RANDOM_USERNAME', 'get_username')
        warn_setting('SOCIAL_AUTH_DEFAULT_USERNAME', 'get_username')
        warn_setting('SOCIAL_AUTH_UUID_LENGTH', 'get_username')
        warn_setting('SOCIAL_AUTH_USERNAME_FIXER', 'get_username')

        if getattr(settings, 'SOCIAL_AUTH_FORCE_RANDOM_USERNAME', False):
            username = uuid4().get_hex()
        elif details.get(USERNAME):
            username = details[USERNAME]
        elif settings.hasattr('SOCIAL_AUTH_DEFAULT_USERNAME'):
            username = settings.SOCIAL_AUTH_DEFAULT_USERNAME
            if callable(username):
                username = username()
        else:
            username = uuid4().get_hex()

        uuid_lenght = getattr(settings, 'SOCIAL_AUTH_UUID_LENGTH', 16)
        username_fixer = getattr(settings, 'SOCIAL_AUTH_USERNAME_FIXER',
                                 lambda u: u)

        short_username = username[:USERNAME_MAX_LENGTH - uuid_lenght]
        final_username = None

        while True:
            final_username = username_fixer(username)[:USERNAME_MAX_LENGTH]

            try:
                User.objects.get(username__iexact=final_username)
            except User.DoesNotExist:
                break
            else:
                # User with same username already exists, generate a unique
                # username for current user using username as base but adding
                # a unique hash at the end. Original username is cut to avoid
                # the field max_length.
                username = short_username + uuid4().get_hex()[:uuid_lenght]
        return {'username': final_username}

get_username = GetUsername()

########NEW FILE########
__FILENAME__ = utils
from __future__ import absolute_import
import gc, re
import operator
from django.core.urlresolvers import get_resolver
from django.views.generic.simple import direct_to_template
from django.views.decorators.http import condition
from django.conf import settings
from django.core.cache import cache
from transifex.txcommon.log import logger
from datastores.txredis import TxRedisMapper, redis_exception_handler


STATIC_CACHE_KEY_LAST_MODIFIED = 'tx_static_pages_last_modified'
STATIC_CACHE_KEY_ETAG = 'tx_static_pages_etag'


@redis_exception_handler
def static_etag(*args, **kwargs):
    r = TxRedisMapper()
    return r.get(STATIC_CACHE_KEY_ETAG)


@redis_exception_handler
def static_last_modified(*args, **kwargs):
    r = TxRedisMapper()
    return r.get(STATIC_CACHE_KEY_LAST_MODIFIED)

cached_direct_to_template = condition(
    last_modified_func=static_last_modified, etag_func=static_etag
)(direct_to_template)


def log_skip_transaction_test(msg):
    if not settings.DATABASES['default']['ENGINE'].endswith('postgresql_psycopg2'):
        logger.info(msg)
    return msg

def get_url_pattern(urlname, args=[]):
    """
    Return URL pattern for a URL based on its name.

    args - list of argument names for the URL. Useful to distinguish URL
    patterns identified with the same name.

    >>> get_url_pattern('project_detail')
    u'/projects/p/%(project_slug)s/'

    >>> get_url_pattern('project_detail', args=['project_slug'])
    u'/projects/p/%(project_slug)s/'

    """
    patterns = get_resolver(None).reverse_dict.getlist(urlname)
    if not args:
        return '/%s' % patterns[0][0][0][0]

    for pattern in patterns:
        if pattern[0][0][1] == args:
            return '/%s' % pattern[0][0][0]


def cached_property(func):
    """
    Cached property.

    This function is able to verify if an instance of a property field
    was already created before and, if not, it creates the new one.
    When needed it also is able to delete the cached property field from
    the memory.

    Usage:
    @cached_property
    def trans(self):
        ...

    del(self.trans)

    """
    def _set_cache(self):
        cache_attr = "__%s" % func.__name__
        try:
            return getattr(self, cache_attr)
        except AttributeError:
            value = func(self)
            setattr(self, cache_attr, value)
            return value

    def _del_cache(self):
        cache_attr = "__%s" % func.__name__
        try:
            delattr(self, cache_attr)
        except AttributeError:
            pass

    return property(_set_cache, fdel=_del_cache)


def immutable_property(func):
    """
    Immutable property.

    This function prevents an instance of a property field to be
    altered and/or deleted.

    Usage:
    class Foo(object):
        @immutable_property
        def bar(self):
            return True

    foo=Foo()
    foo.bar = False
    ValueError: 'bar' is immutable and can not be changed

    del(foo.bar)
    ValueError: 'bar' is immutable and can not be deleted

    """
    def _set_attr(self, value):
        raise ValueError("'%s' is immutable and can not be changed"
            % func.__name__)

    def _get_attr(self):
        return func(self)

    def _del_attr(self):
        raise ValueError("'%s' is immutable and can not be deleted"
            % func.__name__)

    return property(fget=_get_attr, fset=_set_attr, fdel=_del_attr)


def key_sort(l, *keys):
    """
    Sort an iterable given an arbitrary number of keys relative to it
    and return the result as a list. When a key starts with '-' the
    sorting is reversed.

    Example: key_sort(people, 'lastname', '-age')
    """
    l = list(l)
    for key in keys:
        #Find out if we want a reversed ordering
        if key.startswith('-'):
            reverse = True
            key = key[1:]
        else:
            reverse = False

        attrs = key.split('.')
        def fun(x):
            # Calculate x.attr1.attr2...
            for attr in attrs:
                x = getattr(x, attr)
            # If the key attribute is a string we lowercase it
            if isinstance(x, basestring):
                x = x.lower()
            return x
        l.sort(key=fun, reverse=reverse)
    return l

def size_human(size):
    """
    Make the size in bytes to a more human readable format.

    This function compares the size value with some thresholds and returns
    a new value with the appropriate suffix (K, M, T, P). The correct input
    is an integer value not a string!!!

    >>> size_human(755745434)
    '721.0M'
    """

    if size:
        _abbrevs = [
        (1<<50L, 'P'),
        (1<<40L, 'T'),
        (1<<30L, 'G'),
        (1<<20L, 'M'),
        (1<<10L, 'k'),
        (1, 'bytes')]

        for factor, suffix in _abbrevs:
            if size > factor:
                break
        if factor == 1:
            return "%d %s" % (size, suffix)
        else:
            return "%.3f%s" % (float(size)/float(factor), suffix)


def restructured_table(column_names, column_ids, object_list, truncate_len=13):
    """Restructured table creation method

    This method takes some objects in a list and present them in a table format.
    The format is similar with the one used in restructured text, so it can easily
    be used in formatted text.
    The arguments are the following:
    column_names : a list or tuple with the title of each column
    column_id : a list or tuple of all the keys which will be presented from
    each object
    object_list : the list of the objects which contain the data to be presented
    truncate_len : the length of the strings in each cell

    Example output :
    +---------------+---------------+---------------+
    |Alfa           |Beta           |Gama           |
    +---------------+---------------+---------------+
    |2314           |34545          |5666           |
    |12165          |34512345       |53254          |
    +---------------+---------------+---------------+

    """
    single_cell_border = "+" + (truncate_len+2) * "-"
    border = len(column_names) * single_cell_border + "+"
    table = "\n" + border + "\n"
    # Column Headers first
    for column in column_names:
        table += "| %-13s " % column[:truncate_len]
    table += "|\n" + border + "\n"
    # Data next
    for obj in object_list:
        for i in column_ids:
            levels = i.split(".")
            attr = obj
            for l in levels:
                attr = getattr(attr, l)
            table += "| %-13s " % str(attr)[:truncate_len]
        table += "|\n"
    table += border + "\n"
    return table

def paginate(qs, start, end):
    """
    Return the specified queryset paginated by start:end.
    """
    if start is None and end is None:
        return (qs, "")

    int_msg = "Value of '%s' parameter must be an integer."
    neg_msg = "Parameter '%s' cannot be less than 1."
    if start is not None:
        try:
            start = int(start) - 1
            if start < 0:
                return (None, neg_msg % "start")
        except ValueError, TypeError:
            return (None, int_msg % "start")
    if end is not None:
        try:
            end = int(end) - 1
            if end < 0:
                return (None, neg_msg % "end")
        except ValueError, TypeError:
            return (None, int_msg % "end")

    if start is None:
        return (qs[:end], "")
    elif end is None:
        return (qs[start:], "")
    else:
        return (qs[start:end], "")


def queryset_iterator(queryset, chunksize=1000):
    """
    Iterate over a Django Queryset ordered by the primary key

    This method loads a maximum of chunksize (default: 1000) rows in it's
    memory at the same time while django normally would load all rows in it's
    memory. Using the iterator() method only causes it to not preload all the
    classes.

    Note that the implementation of the iterator does not support ordered
    query sets.
    """
    pk = 0
    last_pk = queryset.order_by('-pk')[0].pk
    queryset = queryset.order_by('pk')
    while pk < last_pk:
        for row in queryset.filter(pk__gt=pk)[:chunksize]:
            pk = row.pk
            yield row
        gc.collect()

def normalize_query(query_string,
        findterms=re.compile(r'\'([^\']+)\'|"([^"]+)"|(\S+)').findall,
    normspace=re.compile(r'\s{2,}').sub):
    """
    Splits the query string in individual keywords, getting rid of unnecessary
    spaces and grouping quoted words together.
    Example:

    >>> normalize_query('  some random  words "with   quotes  " and   spaces')
    ['some', 'random', 'words', 'with quotes', 'and', 'spaces']

    """
    return list(set([normspace(' ', (t[0] or t[1] or t[2]).strip()) for t in
        findterms(query_string)]))


class StatBarsPositions(dict):
    """
    Hold the positions of a number of statistic bars.

    Used to present bars for translation completion status.
    """

    class BarPos:
        def __init__(self, width, left=0):
            """Initialize a simple bar."""
            self.w = width
            self.l = left

    def __init__(self, bar_data, width=100, border=1):
        """
        A dictionary to hold the positions of named bars.

        Arguments:

        - An ordered list of tuples (name, bar_width) to render
        - The width of the "100%" bar in pixels
        - The width of a border to pad each consecutive non-zero-sized bar

        Example:

        >>> pos = [('a', 2), ('b', 1), border=1]
        >>> pos['a'].w
        2
        >>> pos['b'].l   # Should return first bar width + border = 2
        3
        """
        innerwidth = width
        if innerwidth < 0:
            raise ValueError('Too many items (%d) for given width (%d) '
                'and border (%d)' % (len(bar_data), width, border))

        totsegwidth = reduce(operator.add, (x[1] for x in bar_data), 0)
        if totsegwidth == 0:
            # No translations whatsoever
            self['trans'] = self.BarPos(width, 0)
            self['fuzzy'] = self.BarPos(0, width)
            self['untrans'] = self.BarPos(0, width)
            return
        oldend = 0
        for segnum, segment in enumerate(bar_data):
            if segment[1] < 0:
                raise ValueError('Negative segment size (%d) given for '
                    'element %d'% (segment[1], segnum + 1))
            fl = oldend
            fr = fl + segment[1] * innerwidth
            oldend = fr
            l = int(round(float(fl) / totsegwidth))
            r = int(round(float(fr) / totsegwidth))
            self[segment[0]] = self.BarPos(r - l, l)
        return

########NEW FILE########
__FILENAME__ = validators
# -*- coding: utf-8 -*-

"""
Validators to use in model fields.
"""

from django.core.exceptions import ValidationError


def validate_http_url(url):
    """Validate that the url is for HTTP/HTTPS."""
    if not url.startswith(('http://', 'https://', )):
        raise ValidationError(u'Only HTTP and HTTPS protocols are allowed')

########NEW FILE########
__FILENAME__ = views
from __future__ import absolute_import
import datetime
from django.conf import settings
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import PasswordChangeForm, SetPasswordForm
from django.contrib.contenttypes.models import ContentType
from django.db.models import Q
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils import simplejson
from django.utils.translation import ugettext as _
from django.views.decorators.csrf import csrf_protect
from django.views.generic import list_detail
from django.core.urlresolvers import reverse
from django.contrib.syndication.views import feed

from haystack.query import SearchQuerySet
from notification import models as notification
from userena.views import password_change
from userena.views import profile_edit as userena_profile_edit

from transifex.actionlog.models import LogEntry, action_logging
from transifex.languages.models import Language
from transifex.projects.models import Project
from transifex.simpleauth.forms import RememberMeAuthForm
from transifex.txcommon.feeds import TxNoticeUserFeed
from transifex.txcommon.filters import LogEntryFilter
from transifex.txcommon.forms import TxAuthenticationForm
from transifex.txcommon.haystack.utils import (support_fulltext_search,
        prepare_solr_query_string, fulltext_fuzzy_match_filter,
        fulltext_project_search_filter)
from transifex.txcommon.log import logger

from notification.decorators import basic_auth_required, simple_basic_auth_callback

FULLTEXT = support_fulltext_search()

@basic_auth_required(realm='Notices Feed', callback_func=simple_basic_auth_callback)
def feed_for_user(request):
    url = "feed/%s" % request.user.username
    return feed(request, url, {
        "feed": TxNoticeUserFeed,
    })


def permission_denied(request, template_name=None, extra_context={}, *args,
    **kwargs):
    """Wrapper to allow undeclared key arguments."""
    from authority.views import permission_denied
    return permission_denied(request, template_name, extra_context)

def search(request):
    query_string = prepare_solr_query_string(request.GET.get('q', ""))
    search_terms = query_string.split()
    index_query = SearchQuerySet().models(Project)
    spelling_suggestion = None

    if not FULLTEXT:
        try:
            results = index_query.auto_query(query_string)
            count = results.count()
        except TypeError:
            count = 0
    else:
        try:
            qfilter = fulltext_project_search_filter(query_string)
            results = index_query.filter(qfilter)
            spelling_suggestion = results.spelling_suggestion(query_string)
            count = results.count()
        except TypeError:
            results = []
            count = 0

    logger.debug("Searched for %s. Found %s results." % (query_string, count))
    return render_to_response("search.html",
        {'query': query_string,
         'terms': search_terms,
         'results': results,
         'spelling_suggestion': spelling_suggestion},
          context_instance = RequestContext(request))

@csrf_protect
def index(request):
    if settings.ENABLE_SIMPLEAUTH:
        form = RememberMeAuthForm()
    else:
        form = TxAuthenticationForm()
    return render_to_response("index.html",
        {'form': form,
         'next': request.path,
         'num_projects': Project.objects.count(),
         'num_languages': Language.objects.count(),
         'num_users': User.objects.count(),
        },
        context_instance = RequestContext(request))


@login_required
def user_timeline(request, *args, **kwargs):
    """
    Present a log of the latest actions of a user.

    The view limits the results and uses filters to allow the user to even
    further refine the set.
    """
    log_entries = LogEntry.objects.by_user(request.user)
    f = LogEntryFilter(request.GET, queryset=log_entries)

    return render_to_response("txcommon/user_timeline.html", {
        'f': f,
        'actionlog': f.qs
    }, context_instance = RequestContext(request))


def profile_public(request, username, template_name='userena/public.html'):
    """User public profile page."""
    user = get_object_or_404(
        User.objects.select_related('profile'), username=username
    )
    teams_coordinating = user.team_coordinators.public()
    projects_maintaining = Project.objects.maintained_by(user).public()

    entries = []
    for n, project in enumerate(projects_maintaining):
        entries.append({
            'action': 'maintaining',
            'project': project,
            'index': n
        })

    for n, team in enumerate(teams_coordinating):
        entries.append({
            'action': 'coordinating',
            'project': team.project,
            'team': team,
            'index': n
        })

    return render_to_response(template_name, {
        'profile': user.get_profile(),
        'entries': entries,
    }, context_instance=RequestContext(request))


@login_required
def profile_social_settings(request, username,
    template_name='userena/profile_social_settings.html'):
    """Social login settings page under user profile."""
    user = get_object_or_404(User, username=username)
    return render_to_response(template_name, {
        'profile': user.get_profile()
    }, context_instance=RequestContext(request))


@login_required
def profile_social_settings_redirect(request):
    """
    Redirect a logged in user to his social settings page. This is necessary
    because the URL is used in a settings variable by django-social-auth that
    doesn't support dynamics URL (i.e. with a username in it).
    """
    return HttpResponseRedirect(reverse('profile_social_settings',
        args=[request.user,]))


@login_required
def password_change_custom(request, username):
    """
    This was added because users created through django-social-auth don't
    have a usable password but we should allow them to set a new one.
    """
    if request.user.has_usable_password():
        pass_form = PasswordChangeForm
    else:
        pass_form = SetPasswordForm

    return password_change(request, username=username, pass_form=pass_form)

def profile_edit(request, username, edit_profile_form=None):
    if request.user.is_authenticated() and request.user.username == username:
        return userena_profile_edit(request, username=username,
                                    edit_profile_form=edit_profile_form)
    else:
        return HttpResponseRedirect(reverse("profile_public",
                                            kwargs={'username': username}))


# Ajax response

def json_result(result):
    return HttpResponse(simplejson.dumps(result))

def json_error(message, result=None):
    if result is None:
        result = {}
    result.update({
        'style': 'error',
        'error': message,
    })
    return json_result(result)

########NEW FILE########
__FILENAME__ = widgets
import re
from itertools import chain
from django import forms
from django.forms import widgets
from django.forms.extras.widgets import SelectDateWidget
from django.utils.html import escape, conditional_escape
from django.utils.encoding import force_unicode
from django.utils.safestring import mark_safe


# Attempt to match many time formats:
# Example: "12:34:56 P.M."  matches:
# ('12', '34', ':56', '56', 'P.M.', 'P', '.', 'M', '.')
# ('12', '34', ':56', '56', 'P.M.')
# Note that the colon ":" before seconds is optional, but only if seconds are
# omitted
time_pattern = r'(\d\d?):(\d\d)(:(\d\d))? *([aApP]\.?[mM]\.?)?$' 

RE_TIME = re.compile(time_pattern)
# The following are just more readable ways to access re.matched groups:
HOURS = 0
MINUTES = 1
SECONDS = 3
MERIDIEM = 4


class SelectTimeWidget(widgets.Widget):
    """
    A Widget that splits time input into <select> elements.
    Allows form to show as 24hr: <hour>:<minute>:<second>,
    or as 12hr: <hour>:<minute>:<second> <am|pm>

    Also allows user-defined increments for minutes/seconds
    """
    hour_field = '%s_hour'
    minute_field = '%s_minute'
    second_field = '%s_second'
    meridiem_field = '%s_meridiem'
    twelve_hr = False # Default to 24hr.

    def __init__(self, attrs=None, hour_step=None, minute_step=None, 
        second_step=None, twelve_hr=False):
        '''
        hour_step, minute_step, second_step are optional step values for
        for the range of values for the associated select element
        twelve_hr: If True, forces the output to be in 12-hr format (rather 
        than 24-hr)
        '''
        self.attrs = attrs or {}

        if twelve_hr:
            self.twelve_hr = True # Do 12hr (rather than 24hr)
            self.meridiem_val = 'a.m.' # Default to Morning (A.M.)

        if hour_step and twelve_hr:
            self.hours = range(1, 13, hour_step)
        elif hour_step: # 24hr, with stepping.
            self.hours = range(0, 24, hour_step)
        elif twelve_hr: # 12hr, no stepping
            self.hours = range(1, 13)
        else: # 24hr, no stepping
            self.hours = range(0, 24)
        if minute_step:
            self.minutes = range(0, 60, minute_step)
        else:
            self.minutes = range(0, 60)

        if second_step:
            self.seconds = range(0, 60, second_step)
        else:
            self.seconds = range(0, 60)

    def render(self, name, value, attrs=None):
        try: # try to get time values from a datetime.time object (value)
            hour_val, minute_val, second_val = value.hour, value.minute, value.second
            if self.twelve_hr:
                if hour_val >= 12:
                    self.meridiem_val = 'p.m.'
                else:
                    self.meridiem_val = 'a.m.'
        except AttributeError:
            hour_val = minute_val = second_val = 0
            if isinstance(value, basestring):
                match = RE_TIME.match(value)
                if match:
                    time_groups = match.groups()
                    hour_val = int(time_groups[HOURS]) % 24 #force range(0-24)
                    minute_val = int(time_groups[MINUTES])
                    if time_groups[SECONDS] is None:
                        second_val = 0
                    else:
                        second_val = int(time_groups[SECONDS])

                    # check to see if meridiem was passed in
                    if time_groups[MERIDIEM] is not None:
                        self.meridiem_val = time_groups[MERIDIEM]
                    else: # otherwise, set the meridiem based on the time
                        if self.twelve_hr:
                            if hour_val >= 12:
                                self.meridiem_val = 'p.m.'
                            else:
                                self.meridiem_val = 'a.m.'
                        else:
                            self.meridiem_val = None

        # If we're doing a 12-hr clock, there will be a meridiem value, so 
        # make sure the hours get printed correctly
        if self.twelve_hr and self.meridiem_val:
            if self.meridiem_val.lower().startswith('p') and \
                hour_val > 12 and hour_val < 24:
                hour_val = hour_val % 12
        elif hour_val == 0:
            hour_val = 12

        output = []
        if 'id' in self.attrs:
            id_ = self.attrs['id']
        else:
            id_ = 'id_%s' % name

        # NOTE: for times to get displayed correctly, the values MUST be 
        # converted to unicode When Select builds a list of options, it 
        # checks against Unicode values
        hour_val = u"%.2d" % hour_val
        minute_val = u"%.2d" % minute_val
        second_val = u"%.2d" % second_val

        hour_choices = [("%.2d"%i, "%.2d"%i) for i in self.hours]
        local_attrs = self.build_attrs(id=self.hour_field % id_)
        select_html = widgets.Select(choices=hour_choices).render(
            self.hour_field % name, hour_val, local_attrs)
        output.append(select_html)

        minute_choices = [("%.2d"%i, "%.2d"%i) for i in self.minutes]
        local_attrs['id'] = self.minute_field % id_
        select_html = widgets.Select(choices=minute_choices).render(
            self.minute_field % name, minute_val, local_attrs)
        output.append(select_html)

        second_choices = [("%.2d"%i, "%.2d"%i) for i in self.seconds]
        local_attrs['id'] = self.second_field % id_
        select_html = widgets.Select(choices=second_choices).render(
            self.second_field % name, second_val, local_attrs)
        output.append(select_html)

        if self.twelve_hr:
            # If we were given an initial value, make sure the correct 
            # meridiem get's selected.
            if self.meridiem_val is not None and \
                self.meridiem_val.startswith('p'):
                meridiem_choices = [('p.m.', 'p.m.'), ('a.m.', 'a.m.')]
            else:
                meridiem_choices = [('a.m.', 'a.m.'), ('p.m.', 'p.m.')]

            local_attrs['id'] = local_attrs['id'] = self.meridiem_field % id_
            select_html = Select(choices=meridiem_choices).render(
                self.meridiem_field % name, self.meridiem_val, local_attrs)
            output.append(select_html)

        return mark_safe(u'\n'.join(output))

    def id_for_label(self, id_):
        return '%s_hour' % id_
    id_for_label = classmethod(id_for_label)

    def value_from_datadict(self, data, files, name):
        # if there's not h:m:s data, assume zero:
        h = data.get(self.hour_field % name, 0) # hour
        m = data.get(self.minute_field % name, 0) # minute
        s = data.get(self.second_field % name, 0) # second

        meridiem = data.get(self.meridiem_field % name, None)

        #NOTE: if meridiem IS None, assume 24-hr
        if meridiem is not None:
            if meridiem.lower().startswith('p') and int(h) != 12:
                h = (int(h)+12)%24
            elif meridiem.lower().startswith('a') and int(h) == 12:
                h = 0

        if (int(h) == 0 or h) and m and s:
            return '%s:%s:%s' % (h, m, s)

        return data.get(name, None)


class SplitSelectDateTimeWidget(widgets.MultiWidget):
    """
    This class combines SelectTimeWidget (djangosnippets.org #1202)
    and SelectDateWidget (from django.forms.extras) so we have something
    like SpliteDateTimeWidget (in django.forms.widgets), but with Select 
    elements.
    """

    def __init__(self, attrs=None, hour_step=None, minute_step=None, \
                 second_step=None, twelve_hr=None, years=None):
        """
        Pass all these parameters to their respective widget constructors.
        """
        widgets = (SelectDateWidget(attrs=attrs, years=years), \
            SelectTimeWidget(attrs=attrs, hour_step=hour_step, \
            minute_step=minute_step, second_step=second_step, \
            twelve_hr=twelve_hr))
        super(SplitSelectDateTimeWidget, self).__init__(widgets, attrs)

    def decompress(self, value):
        if value:
            return [value.date(), value.time().replace(microsecond=0)]
        return [None, None]

    def format_output(self, rendered_widgets):
        """
        Given a list of rendered widgets (as strings), it inserts an HTML
        linebreak between them.

        Returns a Unicode string representing the HTML for the whole lot.
        """
        rendered_widgets.insert(-1, '<br/>')
        return u''.join(rendered_widgets)


class ReadOnlyWidget(forms.Widget):
    """Display a form field value as plain-text just for reading purposes."""
    def __init__(self, value):
        self.value = value

        super(ReadOnlyWidget, self).__init__()

    def render(self, name, value, attrs=None):
        return unicode(self.value)


class SelectWithDisabledOptions(forms.Select):
    """
    Custom Select widget to allow to display disabled options in a Select box.

    Just pass to ``disabled_choices`` the list of ``choices`` integer ids that
    should be disabled in the rendering.

    NOTE: This is only for redering purposes. Validation in a field or form
    level is still required.
    """
    def __init__(self, attrs=None, choices=(), disabled_choices=()):
        super(SelectWithDisabledOptions, self).__init__(attrs)
        self.choices = list(choices)
        self.disabled_choices = list(disabled_choices)

    def render_option(self, selected_choices, option_value, option_label):
        option_value = force_unicode(option_value)
        selected_html = (option_value in selected_choices) and u' selected="selected"' or ''
        disabled_html = (int(option_value) in self.disabled_choices) and u' disabled="disabled"' or ''
        return u'<option value="%s"%s>%s</option>' % (
            escape(option_value), selected_html + disabled_html,
            conditional_escape(force_unicode(option_label)))
########NEW FILE########
__FILENAME__ = forms
from django.utils.translation import ugettext_lazy as _

from ajax_select.fields import AutoCompleteField, AutoCompleteWidget
from authority.forms import UserPermissionForm


class UserAjaxPermissionForm(UserPermissionForm):
    """
    A class for building a permission form using an ajax autocomplete field.

    This class mimics the functionality of UserPermissionForm in django
    authority application, but instead of a Charfield for user field, uses
    an AutoCompleteField as specified by ajax_select application. Usernames
    are retrieved asynchronously with ajax calls and filling of the input field
    occurs with an automatic way.
    """

    user = AutoCompleteField('users', required=True, label=_('User'),
        help_text=_('Search for a username'))

########NEW FILE########
__FILENAME__ = 0001_submit_translations
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models
from authority.models import Permission

class Migration(DataMigration):

    def forwards(self, orm):
        """
        Rename permission with the ``project_perm.submit_file`` codename into
        ``project_perm.submit_translations``.
        """
        Permission.objects.filter(codename="project_perm.submit_file"
            ).update(codename="project_perm.submit_translations")

    def backwards(self, orm):
        """
        Rename permission with the ``project_perm.submit_translations`` back
        into ``project_perm.submit_file`` codename.
        """
        Permission.objects.filter(codename="project_perm.submit_translations"
            ).update(codename="project_perm.submit_file")

    models = {}

    complete_apps = ['txpermissions']

########NEW FILE########
__FILENAME__ = models
# -*- coding: utf-8 -*-

########NEW FILE########
__FILENAME__ = txpermissions
from django import template
from django.core.urlresolvers import reverse
from django.core.exceptions import ImproperlyConfigured
from django.contrib.auth.models import User, AnonymousUser
from django.core.urlresolvers import reverse

from authority import permissions, get_check
from authority.models import Permission
from authority.templatetags.permissions import ResolverNode, url_for_obj

from transifex.projects.permissions.project import ProjectPermission
#FIXME: the module forms cannot be located else
from transifex.txpermissions.forms import UserAjaxPermissionForm

register = template.Library()

def _base_permission_form(context, obj, perm, view_name):
    """
    Handler for returning a dictionary with two basic fields (url and next) for
    the permission form, based on the arguments passed by parameter.
    """
    return {
        'next': context['request'].build_absolute_uri(),
        'url': reverse(view_name, kwargs={'project_slug': obj.slug,
                                          'permission_pk': perm.pk,}),
    }

@register.simple_tag
def txurl_for_obj(view_name, obj):
    """
    Return the reverse url for a given obj and view_name based on the
    object slug
    """
    return reverse(view_name, kwargs={'%s_slug' % obj._meta.module_name: obj.slug})


@register.simple_tag
def txadd_url_for_obj(obj):
    """Return the reverse url for adding permissions to an object"""
    return txurl_for_obj(u'%s_add_permission' % obj._meta.module_name, obj)


@register.simple_tag
def txrequest_url_for_obj(obj):
    """Return the reverse url for adding permission request to an object"""
    return txurl_for_obj(u'%s_add_permission_request' % obj._meta.module_name,
                         obj)


@register.inclusion_tag('txpermissions/permission_delete_form.html',
                        takes_context=True)
def txpermission_delete_form(context, obj, perm):
    """
    Render a html form to the delete view of the given permission. Return
    no content if the request-user has no permission to delete foreign
    permissions.
    """
    user = context['request'].user
    if user.is_authenticated():
        check = ProjectPermission(user)
        if (check.maintain(obj) or user.has_perm('authority.delete_permission')
            or user.pk == perm.creator.pk):
            return _base_permission_form(context, obj, perm,
                                         'project_delete_permission')
    return {'url': None}


@register.inclusion_tag('txpermissions/permission_request_delete_form.html',
                        takes_context=True)
def txpermission_request_delete_form(context, obj, perm):
    """
    Render a html form to the delete view of the given permission request.
    Return no content if the request-user has no permission to delete
    permissions.
    """
    user = context['request'].user
    if user.is_authenticated():
        check = ProjectPermission(user)
        form_kwargs = _base_permission_form(context, obj, perm,
                                            'project_delete_permission_request')
        if check.maintain(obj) or user.has_perm('authority.delete_permission'):
            form_kwargs['is_requestor'] = False
            return form_kwargs
        if not perm.approved and perm.user == user:
            form_kwargs['is_requestor'] = True
            return form_kwargs
    return {'url': None}


@register.inclusion_tag('txpermissions/permission_request_approve_form.html',
                        takes_context=True)
def txpermission_request_approve_form(context, obj, perm):
    """
    Render a html form to the approve view of the given permission request.
    Return no content if the request-user has no permission to delete
    permissions.
    """
    user = context['request'].user
    if user.is_authenticated():
        check = ProjectPermission(user)
        if (check.maintain(obj) or
            user.has_perm('authority.approve_permission_requests')):
            return _base_permission_form(context, obj, perm,
                                         'project_approve_permission_request')
    return {'url': None}


class PermissionFormNode(ResolverNode):

    @classmethod
    def handle_token(cls, parser, token, approved):
        bits = token.contents.split()
        tag_name = bits[0]
        kwargs = {
            'obj': cls.next_bit_for(bits, 'for'),
            'perm': cls.next_bit_for(bits, 'using', None),
            'template_name': cls.next_bit_for(bits, 'with', ''),
            'approved': approved,
        }
        return cls(**kwargs)

    def __init__(self, obj, perm=None, approved=False, template_name=None):
        self.obj = obj
        self.perm = perm
        self.approved = approved
        self.template_name = template_name

    def render(self, context):
        obj = self.resolve(self.obj, context)
        perm = self.resolve(self.perm, context)
        if self.template_name:
            template_name = [self.resolve(obj, context)
                             for obj in self.template_name.split(',')]
        else:
            template_name = 'txpermissions/permission_form.html'
        request = context['request']
        extra_context = {}
        if self.approved:
            check = ProjectPermission(request.user)
            if request.user.is_authenticated():
                if (check.maintain(obj)
                    or request.user.has_perm('authority.add_permission')):
                    extra_context = {
                        'form_url': txadd_url_for_obj(obj),
                        'next': request.build_absolute_uri(),
                        'approved': self.approved,
                        'form': UserAjaxPermissionForm(perm, obj,
                            approved=self.approved, initial=dict(codename=perm)),
                    }
        else:
            if request.user.is_authenticated() and not request.user.is_superuser:
                extra_context = {
                    'form_url': txrequest_url_for_obj(obj),
                    'next': request.build_absolute_uri(),
                    'approved': self.approved,
                    'form': UserAjaxPermissionForm(perm, obj,
                        approved=self.approved, initial=dict(
                        codename=perm, user=request.user.username)),
                }
        return template.loader.render_to_string(template_name, extra_context,
                            context_instance=template.RequestContext(request))


@register.tag
def txpermission_form(parser, token):
    """
    Render an "add permissions" form for the given object. If no object
    is given it will render a select box to choose from.

    Syntax::

        {% txpermission_form for OBJ using PERMISSION_LABEL.CHECK_NAME [with TEMPLATE] %}
        {% txpermission_form for project using "project_permission.add_project" %}

    """
    return PermissionFormNode.handle_token(parser, token, approved=True)


@register.tag
def txpermission_request_form(parser, token):
    """
    Render an "add permission requests" form for the given object. If no object
    is given it will render a select box to choose from.

    Syntax::

        {% txpermission_request_form for OBJ and PERMISSION_LABEL.CHECK_NAME [with TEMPLATE] %}
        {% txpermission_request_form for project using "project_permission.add_project" with "txpermissions/permission_request_form.html" %}

    """
    return PermissionFormNode.handle_token(parser, token, approved=False)

########NEW FILE########
__FILENAME__ = views
from django.shortcuts import render_to_response, get_object_or_404
from django.views.decorators.http import require_POST
from django.http import HttpResponseRedirect, HttpResponseForbidden
from django.conf import settings
from django.db.models.loading import get_model
from django.utils.translation import ugettext as _
from django.template.context import RequestContext
from django.template import loader
from django.contrib import messages
from django.contrib.auth.decorators import login_required

from actionlog.models import action_logging
from authority.models import Permission
from authority.views import get_next
from notification import models as notification
from transifex.txpermissions.templatetags.txpermissions import (txadd_url_for_obj,
                                                      txrequest_url_for_obj,
                                                      txurl_for_obj)
from transifex.txpermissions.forms import UserAjaxPermissionForm

def _send_notice_save_action(request, notice):
    """
    Handler for manipulating notifications and save action logs

    The argument notice must have the following dictionary structure:

    notice = {
        'type': '<notice_type_label>',
        'object': <object>,
        'sendto': [<list_of_users_to_send_to>],
        'extra_context': {'var_needed_in_template': var_needed_in_template},
    }

    Explanation:
        `type`: It is the notice label related to the action
        `object`: It is the object that is suffering the action
        `sendto`: List of Users to sent the notification to
        `extra_context`: Any extra var used in the message templates
    """
    action_logging(request.user, [notice['object']], notice['type'],
                context=notice['extra_context'])
    if settings.ENABLE_NOTICES:
        notification.send(set(notice['sendto']),
            notice['type'], extra_context=notice['extra_context'])



def add_permission_or_request(request, obj, view_name, approved=False,
                   template_name = 'authority/permission_form.html',
                   extra_context={}):
    """
    View for adding either a permission or a permission request for a user.

    This view is a centralized place for adding permissions/requests for any
    kind of object through the whole Transifex.

    Following the upstream django-authority app, all the entries are considered
    requests until the field approved be set to True.

    For the extra_context, this view expect a key called 'notice' that MUST
    have a determinate dictionary structure to be able to send notifications
    and save action logs. See the `_send_notice_save_action` function docstring
    for more information.

    Example of `extra_context` with `notice` key:
        # See `_send_notice_save_action` docstring for the `notice` var below
        notice = {}
        extra_context.update({'notice': notice})

    If the key 'notice' is not found in the extra_context parameter, nothing is
    executed about notification and action log.
    """
    codename = request.POST.get('codename', None)
    next = get_next(request, obj)

    if request.method == 'POST':
        # POST method requires a permission codename
        if codename is None:
            return HttpResponseForbidden(next)
        form = UserAjaxPermissionForm(data=request.POST, obj=obj,
                                  approved=approved, perm=codename,
                                  initial=dict(codename=codename))
        if not approved:
            # Limit permission request to current user
            form.data['user'] = request.user
        if form.is_valid():
            permission = form.save(request)

            if extra_context.has_key('notice'):
                # ActionLog & Notification
                _send_notice_save_action(request, extra_context['notice'])

            if approved:
                msg = _('You added a permission.')
            else:
                msg = _('You added a permission request.')

            messages.info(request, msg)

            return HttpResponseRedirect(next)
    else:
        form = None

    context = {
        'form': form,
        'form_url': txurl_for_obj(view_name, obj),
        'next': next,
        'perm': codename,
        'approved': approved,
    }
    extra_context.update({'notice':None})
    context.update(extra_context)
    return render_to_response(template_name, context,
                              context_instance=RequestContext(request))


def approve_permission_request(request, requested_permission, extra_context={}):
    """
    View for approving/rejecting a user's permission request.

    This view is a centralized place for approving permission requests for any
    kind of object through the whole Transifex.

    Following the upstream django-authority app, all the entries are considered
    requests until the field approved be set to True.
    """
    requested_permission.approve(request.user)

    if extra_context.has_key('notice'):
        # ActionLog & Notification
        _send_notice_save_action(request, extra_context['notice'])

    messages.info(request, _('You approved the permission request.'))
    next = get_next(request, requested_permission)
    return HttpResponseRedirect(next)


def delete_permission_or_request(request, permission, approved, extra_context={}):
    """
    View for deleting either a permission or a permission request from a user.

    This view is a centralized place for deleting permission/requests for any
    kind of object through the whole Transifex.

    Following the upstream django-authority app, all the entries are considered
    requests until the field approved be set to True.
    """
    next = request.POST.get('next', '/')

    if approved:
        msg = _('You removed the permission.')
    else:
        msg = _('You removed the permission request.')

    permission.delete()

    if extra_context.has_key('notice'):
        # ActionLog & Notification
        _send_notice_save_action(request, extra_context['notice'])

    messages.info(request, msg)
    return HttpResponseRedirect(next)

########NEW FILE########
__FILENAME__ = common
from django.conf import settings
from django.conf.urls.defaults import *
from django.contrib import admin
from django.contrib.auth.decorators import login_required
from django.views.generic.simple import redirect_to
import authority

from userena import views as userena_views

from txcommon.forms import EditProfileForm, CustomContactForm
from txcommon.feeds import UserFeed
from txcommon.views import profile_edit as txcommon_profile_edit

# Overriding 500 error handler
handler500 = 'views.server_error'

admin.autodiscover()
authority.autodiscover()

panel_url = getattr(settings,'DJANGO_ADMIN_PANEL_URL', 'admin')

urlpatterns = patterns('',)

if settings.ENABLE_ADDONS:
    urlpatterns += patterns('', (r'', include('django_addons.urls')))

PROJECTS_URL = '^projects/'

urlpatterns += patterns('',
    url(r'^$', 'txcommon.views.index', name='transifex.home'),
    url(PROJECTS_URL, include('projects.urls')),
    url(r'^search/$', 'txcommon.views.search', name='search'),
    url(r'^%s/doc/' % panel_url, include('django.contrib.admindocs.urls')),
    url(r'^%s/' % panel_url, include(admin.site.urls)),
    url(r'^languages/', include('languages.urls')),
    url(r'^i18n/', include('django.conf.urls.i18n')),
    url(r'^ajax/', include('ajax_select.urls')),
    url(r'^ajax/', include('projects.urls.ajax')),
    url(r'^ajax/', include('resources.urls.ajax')),
    url(r'^api/', include('api.urls')),
    url(r'^tagging_autocomplete/', include('tagging_autocomplete.urls')),
    url(r'^contact/$', 'contact_form.views.contact_form',
        {'form_class': CustomContactForm}, name='contact_form'),
)

if settings.ENABLE_CONTACT_FORM:
    urlpatterns += patterns('',
        url(r'^contact/', include('contact_form.urls'), name='contact'),
    )

urlpatterns += patterns('',
        url(r'^accounts/profile/(?P<username>.+)/feed/$', UserFeed(), name='user_feed')
)

if settings.ENABLE_SIMPLEAUTH:
    urlpatterns += patterns('',
        url(r'^accounts/', include('simpleauth.urls')),)
else:
    urlpatterns += patterns('',
        # Custom EditProfileForm
        url(regex   =   r'^accounts/(?P<username>(?!signout|signup|signin)[\.\w]+)/$',
            view    =   login_required(txcommon_profile_edit),
            kwargs  =   {'edit_profile_form': EditProfileForm},
            name    =   'userena_profile_edit'),

        url(regex   =   r'^accounts/(?P<username>[\.\w]+)/password/$',
            view    =   'txcommon.views.password_change_custom',
            name    =   'password_change_redirect'),

        url(regex   =   r'^accounts/(?P<username>[\.\w]+)/email/$',
            view    =   login_required(userena_views.email_change),
            name    =   'userena_email_change'),

        url(regex   =   r'^accounts/(?P<username>[\.\w]+)/password/$',
            view    =   login_required(userena_views.password_change),
            name    =   'userena_password_change'),

        url(regex   =   r'^accounts/(?P<username>[\.\w]+)/edit/$',
            view    =   login_required(userena_views.profile_edit),
            name    =   'userena_profile_edit'),

        url(regex   =   r'^accounts/',
            view    =   include('userena.urls')),

        url(regex   =   r'^accounts/profile/(?P<username>.+)/$',
            view    =   'txcommon.views.profile_public',
            name    =   'profile_public'),
    )

if settings.USE_SOCIAL_LOGIN:
    urlpatterns += patterns('',
        url(r'^accounts/', include('social_auth.urls')),
        url(r'^accounts/(?P<username>(?!signout|signup|signin)[\.\w]+)/social/$',
            view='txcommon.views.profile_social_settings', name='profile_social_settings'),
        # Ugly, see comments in view
        url(r'^profile/social/$', 'txcommon.views.profile_social_settings_redirect',
            name='profile-social-redirect'),
    )

if settings.ENABLE_NOTICES:
    urlpatterns += patterns('',
        url(r'^notices/feed/$', 'txcommon.views.feed_for_user', name="notification_feed_for_user"),
        (r'^notices/', include('notification.urls')),
    )

if settings.SERVE_MEDIA:
    urlpatterns += patterns('',
        url(r'^site_media/media/(?P<path>.*)$', 'django.views.static.serve', {
            'document_root': settings.MEDIA_ROOT,
        }),
        url(r'^', include('staticfiles.urls'))
   )

########NEW FILE########
__FILENAME__ = extra
from django.conf.urls.defaults import *

from common import PROJECTS_URL

urlpatterns = patterns('',
    url(PROJECTS_URL, include('projects.urls.extra')),
)
########NEW FILE########
__FILENAME__ = main
# Main urlconf file of Transifex used in ROOT_URLCONF
from common import urlpatterns
from extra import urlpatterns as urlpatterns_extra

urlpatterns += urlpatterns_extra
########NEW FILE########
__FILENAME__ = views
from django.conf import settings
from django.template import Context, loader

def server_error(request, template_name='500.html'):
    """Always include STATIC_URL into the 500 error"""
    from django.http import HttpResponseServerError
    t = loader.get_template(template_name)
    return HttpResponseServerError(t.render(Context({
        'STATIC_URL': settings.STATIC_URL})))


########NEW FILE########
