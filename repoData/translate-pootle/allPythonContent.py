__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# This file is execfile()d with the current directory set to its containing
# dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

sys.path.insert(0, os.path.abspath('_ext'))
sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['jsonlexer', 'pootle_docs',
              'sphinx.ext.extlinks', 'sphinx.ext.intersphinx']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Pootle'
copyright = u'2004-2014, Translate'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '2.5.1'
# The full version, including alpha/beta/rc tags.
release = '2.5.1-rc1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build', '_themes/README.rst', 'specs']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# Build a refence icon.rst.inc files that we can include for inline
# icons.
import os

icons_dir = "../pootle/static/images/sprite"
icons_inc_file_name = "icons.rst.inc"
build_icons_inc = False

if not os.path.isfile(os.path.join(os.curdir, icons_inc_file_name)):
    build_icons_inc = True
else:
    icon_inc_mtime = os.stat(os.path.join(os.curdir,
                                          icons_inc_file_name)).st_mtime
    for icon_image in os.listdir(icons_dir):
        if os.stat(os.path.join(icons_dir,
                                icon_image)).st_mtime > icon_inc_mtime:
            build_icons_inc = True

if build_icons_inc:
    icons_txt_file = open(icons_inc_file_name, "w")
    for icon_image in os.listdir(icons_dir):
        icon_name = icon_image[:icon_image.rfind(".")]
        print >>icons_txt_file, ".. |icon:" + icon_name + "| " + \
                                "image:: /" + icons_dir + "/" + icon_image
        print >>icons_txt_file, "                      :alt: " + \
                                icon_name.replace("-", " ").replace("_", " ") + \
                                " icon"
        print >>icons_txt_file
    icons_txt_file.close()

# Files to include at the end of every .rst file
rst_epilog = """
.. include:: /%s
""" % icons_inc_file_name


# -- Options for HTML output --------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinx-bootstrap'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    'nosidebar': True,
    'link_color': '#489b7',
    'link_color_hover': '#489b7',
}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = ['_themes']

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = '_static/pootle_logo.png'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = '../pootle/static/favicon.ico'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
html_domain_indices = False

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Pootledoc'


# -- Options for LaTeX output -------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual])
latex_documents = [
  ('index', 'Pootle.tex', u'Pootle Documentation',
   u'Translate.org.za', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output -------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'pootle', u'Pootle Documentation',
     [u'Translate.org.za'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'Pootle', u'Pootle Documentation',
   u'Translate.org.za', 'Pootle', 'Online translation tool.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'


# -- Options for Intersphinx -------------------------------------------------

intersphinx_mapping = {
    'python': ('http://docs.python.org/2.7', None),
    'django': ('http://docs.djangoproject.com/en/dev',
        'http://docs.djangoproject.com/en/dev/_objects'),
    'toolkit': ('http://docs.translatehouse.org/projects/translate-toolkit/en/latest/', None),
    'south':  ('http://south.readthedocs.org/en/latest/', None),
    'tastypie':  ('http://django-tastypie.readthedocs.org/en/latest/', None),
}


# -- Options for External links -------------------------------------------------

extlinks = {
    # :role: (URL, prefix)
    'bug': ('http://bugs.locamotion.org/show_bug.cgi?id=%s', 'bug '),
    'man': ('http://linux.die.net/man/1/%s', ''),
    'wiki': ('http://translate.sourceforge.net/wiki/%s', ''),
    'wp': ('http://en.wikipedia.org/wiki/%s', ''),
}

# -- Options for Gettext -------------------------------------------------

locale_dirs = ["_translations/"]
gettext_compact = False

########NEW FILE########
__FILENAME__ = apache-wsgi
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import site
import sys


# You probably will need to change these paths to match your deployment,
# most likely because of the Python version you are using.
ALLDIRS = [
    '/var/www/pootle/env/lib/python2.7/site-packages',
    '/var/www/pootle/env/lib/python2.7/site-packages/pootle/apps',
]

# Remember original sys.path.
prev_sys_path = list(sys.path)

# Add each new site-packages directory.
for directory in ALLDIRS:
    site.addsitedir(directory)

# Reorder sys.path so new directories at the front.
new_sys_path = []

for item in list(sys.path):
    if item not in prev_sys_path:
        new_sys_path.append(item)
        sys.path.remove(item)

sys.path[:0] = new_sys_path

# Set the Pootle settings module as DJANGO_SETTINGS_MODULE.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

# Set the WSGI application.
def application(environ, start_response):
    """Wrapper for Django's WSGIHandler().

    This allows to get values specified by SetEnv in the Apache
    configuration or interpose other changes to that environment, like
    installing middleware.
    """
    try:
        os.environ['POOTLE_SETTINGS'] = environ['POOTLE_SETTINGS']
    except KeyError:
        pass

    from django.core.wsgi import get_wsgi_application
    _wsgi_application = get_wsgi_application()
    return _wsgi_application(environ, start_response)

########NEW FILE########
__FILENAME__ = jsonlexer
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Sphinx extension to enable JSON code highlighting."""


def setup(app):
    # enable Pygments json lexer
    try:
        import pygments
        if pygments.__version__ >= '1.5':
            # use JSON lexer included in recent versions of Pygments
            from pygments.lexers import JsonLexer
        else:
            # use JSON lexer from pygments-json if installed
            from pygson.json_lexer import JSONLexer as JsonLexer
    except ImportError:
        pass  # not fatal if we have old (or no) Pygments and no pygments-json
    else:
        app.add_lexer('json', JsonLexer())

########NEW FILE########
__FILENAME__ = pootle_docs
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Sphinx extension with custom stuff for Pootle docs."""


def setup(app):
    # Django :xxx: roles for intersphinx cross-references
    app.add_crossref_type(
        directivename="setting",
        rolename="setting",
        indextemplate="pair: %s; setting",
    )
    app.add_description_unit(
        directivename="django-admin",
        rolename="djadmin",
        indextemplate="pair: %s; django-admin command",
        #parse_node=parse_django_admin_node,
    )

########NEW FILE########
__FILENAME__ = fabfile
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Fabric deployment file."""

from os.path import isfile, isdir

from fabric.api import cd, env
from fabric.context_managers import hide, prefix, settings
from fabric.contrib.console import confirm
from fabric.contrib.files import exists, upload_template
from fabric.operations import get, put, require, run, sudo
from fabric.utils import abort


#
# Deployment environments
#


def production(branch=None, repo=None, feature=None):
    """Work on the production environment."""

    try:
        from deploy.production import fabric
    except ImportError:
        abort("Can't load 'production' environment; is PYTHONPATH exported?")

    # Get new settings based on the provided parameters.
    new_settings = _get_new_settings(branch, repo, feature)

    env.update(fabric.get_settings(new_settings))
    env.environment = 'production'


def staging(branch=None, repo=None, feature=None):
    """Work on the staging environment."""

    try:
        from deploy.staging import fabric
    except ImportError:
        abort("Can't load 'staging' environment; is PYTHONPATH exported?")

    # Get new settings based on the provided parameters.
    new_settings = _get_new_settings(branch, repo, feature)

    env.update(fabric.get_settings(new_settings))
    env.environment = 'staging'


def _get_new_settings(branch=None, repo=None, feature=None):
    """Get a new settings dictionary based on the provided parameters."""

    # If no branch is provided then don't return any new settings.
    if branch is None:
        return {}

    # Create new settings based on the provided parameters.
    new_settings = {
        'repo_branch': branch,
    }

    # If a repository is specified.
    if repo is not None:
        new_settings['project_repo'] = repo

    # If the flag for feature-staging server is specified.
    if feature is not None:
        # Replace all occurrences of problematic characters with - character.
        # Basically this is all characters outside alphanumeric characters, dot
        # and hyphen characters.
        import re
        hyphen_branch = re.sub(r'([^A-Za-z0-9.-])', "-", branch)

        new_settings['db_name'] = 'pootle-' + hyphen_branch
        new_settings['project_name'] = 'pootle-' + hyphen_branch
        new_settings['project_url'] = hyphen_branch + '.testing.locamotion.org'

    # Return the new settings.
    return new_settings


#
# Commands
#


def _remove_directories():
    """Remove initial directories."""
    if exists('%(project_path)s' % env):
        sudo('rm -rf %(project_path)s' % env)
    if exists('%(translations_path)s' % env):
        sudo('rm -rf %(translations_path)s' % env)
    if exists('%(repos_path)s' % env):
        sudo('rm -rf %(repos_path)s' % env)


def _init_directories():
    """Create initial directories."""
    print('\n\nCreating initial directories...')

    _remove_directories()

    sudo('mkdir -p %(project_path)s' % env)
    sudo('mkdir -p %(project_path)s/logs' % env)
    sudo('mkdir -p %(translations_path)s' % env)
    sudo('mkdir -p %(repos_path)s' % env)
    sudo('chmod -R g=u '
         '%(project_path)s %(translations_path)s %(repos_path)s' % env)
    sudo('chown -R %(user)s:%(server_group)s '
         '%(project_path)s %(translations_path)s %(repos_path)s' % env)


def _init_virtualenv():
    """Create initial virtualenv."""
    print('\n\nCreating virtualenv...')

    run('virtualenv -p %(python)s --no-site-packages %(env_path)s' % env)
    with prefix('source %(env_path)s/bin/activate' % env):
        run('easy_install pip')


def _clone_repo():
    """Clone the Git repository."""
    print('\n\nCloning the repository...')

    run('git clone %(project_repo)s %(project_repo_path)s' % env)


def _update_repo():
    """Update the Git repository and checks out the specified branch."""
    print('\n\nUpdating repository branch...')

    with cd(env.project_repo_path):
        run('git fetch --all')
        run('git checkout %(repo_branch)s' % env)
        # Reset the branch to be the origin one. This can avoid problems or
        # merge commits when updating a branch that was forced update.
        run('git reset --hard origin/%(repo_branch)s' % env)
    run('chmod -R go=u,go-w %(project_repo_path)s' % env)


def _install_requirements():
    """Install dependencies defined in the deploy requirements file."""
    print('\n\nInstalling deploy requirements...')

    with prefix('source %(env_path)s/bin/activate' % env):
        run('pip install -r %(project_repo_path)s/requirements/deploy.txt' % env)
    run('chmod -R go=u,go-w %(env_path)s' % env)


def _update_requirements():
    """Update dependencies defined in the deploy requirements file."""
    print('\n\nUpdating deploy requirements...')

    with prefix('source %(env_path)s/bin/activate' % env):
        run('pip install -U -r %(project_repo_path)s/requirements/deploy.txt' % env)
    run('chmod -R go=u,go-w %(env_path)s' % env)


def bootstrap():
    """Bootstrap a Pootle deployment."""
    require('environment', provided_by=[production, staging])

    if (not exists('%(project_path)s' % env) or
        confirm('\n%(project_path)s already exists. Do you want to continue?'
                % env, default=False)):
            with settings(hide('stdout', 'stderr')):
                _init_directories()
                _init_virtualenv()
                _clone_repo()
                _update_repo()
                _install_requirements()
    else:
        abort('\nAborting.')


def stage_feature():
    """Deploy a Pootle server for testing a feature branch.

    This copies the DB from a previous Pootle deployment.
    """
    require('environment', provided_by=[staging])

    # Run the required commands to deploy a new Pootle instance based on a
    # previous staging one and using the specified branch.
    bootstrap()
    create_db()
    _copy_db()
    # Upload custom settings before calling the update_db() command.
    update_config()
    update_db()
    deploy_static()
    enable_site()
    print('\n\nSuccessfully deployed at:\n\n\thttp://%(project_url)s\n' % env)


def drop_deployment():
    """Wipe out a Pootle deployment.

    The deployment might have not been completed.
    """
    require('environment', provided_by=[production, staging])

    try:
        disable_site()
    except:
        print('\n\nSeems that the site was not enabled on Apache.')

    try:
        drop_db()
    except:
        print("\n\nSeems that database didn't exist.")

    _remove_config()
    _remove_directories()
    print('\n\nRemoved Pootle deployment for http://%(project_url)s' % env)


def unstage_feature():
    """Remove a Pootle server deployed using the stage_feature command."""
    require('environment', provided_by=[staging])

    drop_deployment()


def create_db():
    """Create a new DB."""
    require('environment', provided_by=[production, staging])

    create_db_cmd = ("CREATE DATABASE `%(db_name)s` "
                     "DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;"
                     % env)
    grant_db_cmd = ("GRANT ALL PRIVILEGES ON `%(db_name)s`.* TO `%(db_user)s`"
                    "@localhost IDENTIFIED BY \"%(db_password)s\"; "
                    "FLUSH PRIVILEGES;"
                    % env)

    print('\n\nCreating DB...')

    with settings(hide('stderr')):
        run(("mysql -u %(db_user)s %(db_password_opt)s -e '" % env) +
            create_db_cmd +
            ("' || { test root = '%(db_user)s' && exit $?; " % env) +
            "echo 'Trying again, with MySQL root DB user'; " +
            ("mysql -u root %(db_root_password_opt)s -e '" % env) +
            create_db_cmd + grant_db_cmd + "';}")


def drop_db():
    """Drop the current database.

     This will remove all the data on the database!
     """
    require('environment', provided_by=[production, staging])

    print('\n\nDropping DB...')

    if confirm('\nDropping the %s DB loses ALL its data! Are you sure?'
               % (env['db_name']), default=False):
        run("echo 'DROP DATABASE `%s`' | mysql -u %s %s" %
            (env['db_name'], env['db_user'], env['db_password_opt']))
    else:
        abort('\nAborting.')


def setup():
    """Run `setup` to create or upgrade the DB as required."""
    require('environment', provided_by=[production, staging])

    print('\n\nRunning `setup` command...')

    with settings(hide('stdout', 'stderr')):
        with cd('%(project_repo_path)s' % env):
            with prefix('source %(env_path)s/bin/activate' % env):
                run('python manage.py setup')


def setup_db():
    """Run all the necessary steps to create the DB schema from scratch."""
    require('environment', provided_by=[production, staging])

    syncdb()
    migratedb()
    initdb()


def _copy_db():
    """Copy the data in the source DB into the DB to use for deployment."""
    require('environment', provided_by=[production, staging])

    print('\n\nCloning DB...')

    with settings(hide('stderr'),
                  temp_dump='%(project_path)s/temporary_DB_backup.sql' % env):
        print('\nDumping DB data...')

        run("mysqldump -u %(db_user)s %(db_password_opt)s %(source_db)s > "
            "%(temp_dump)s"
            " || { test root = '%(db_user)s' && exit $?; "
            "echo 'Trying again, with MySQL root DB user'; "
            "mysqldump -u root %(db_root_password_opt)s %(source_db)s > "
            "%(temp_dump)s;}" % env)

        print('\nLoading data into the DB...')

        run("mysql -u %(db_user)s %(db_password_opt)s %(db_name)s < "
            "%(temp_dump)s"
            " || { test root = '%(db_user)s' && exit $?; "
            "echo 'Trying again, with MySQL root DB user'; "
            "mysql -u root %(db_root_password_opt)s %(db_name)s < "
            "%(temp_dump)s;}" % env)

        run('rm -f %(temp_dump)s' % env)


def syncdb():
    """Run `syncdb` to create the DB schema."""
    require('environment', provided_by=[production, staging])

    print('\n\nRunning `syncdb` command...')

    with settings(hide('stdout', 'stderr')):
        with cd('%(project_repo_path)s' % env):
            with prefix('source %(env_path)s/bin/activate' % env):
                run('python manage.py syncdb --noinput')


def initdb():
    """Run `initdb` to initialize the DB."""
    require('environment', provided_by=[production, staging])

    print('\n\nRunning `initdb` command...')

    with settings(hide('stdout', 'stderr')):
        with cd('%(project_repo_path)s' % env):
            with prefix('source %(env_path)s/bin/activate' % env):
                run('python manage.py initdb')


def migratedb():
    """Run `migrate` to bring the DB up to date with the latest schema."""
    require('environment', provided_by=[production, staging])

    print('\n\nRunning `migrate` command...')

    with settings(hide('stdout', 'stderr')):
        with cd('%(project_repo_path)s' % env):
            with prefix('source %(env_path)s/bin/activate' % env):
                run('python manage.py migrate --noinput')


def update_db():
    """Update the database to the latest schema version.

    Runs all the necessary (and probably some unnecessary) steps to update the
    DB to the latest schema version.
    """
    require('environment', provided_by=[production, staging])

    _updatedb()
    syncdb()
    _migrate_fake()
    migratedb()


def _updatedb():
    """Update the database schema up to Pootle version 2.5.0."""
    require('environment', provided_by=[production, staging])

    print('\n\nRunning `updatedb` command...')

    with settings(hide('stdout', 'stderr')):
        with cd('%(project_repo_path)s' % env):
            with prefix('source %(env_path)s/bin/activate' % env):
                run('python manage.py updatedb')


def _migrate_fake():
    """Run `migrate --fake` to convert the DB to migrations."""
    require('environment', provided_by=[production, staging])

    print('\n\nRunning `migrate --fake` command...')

    with settings(hide('stdout', 'stderr')):
        with cd('%(project_repo_path)s' % env):
            with prefix('source %(env_path)s/bin/activate' % env):
                # Don't fake (back to) initial migration if already converted
                run(r"if ! python manage.py migrate --list | grep '(\*) 0001';"
                    "then python manage.py migrate --all --fake 0001; fi")


def upgrade():
    """Run `upgrade` to upgrade the DB for new Pootle/Translate Toolkit."""
    require('environment', provided_by=[production, staging])

    print('\n\nRunning `upgrade` command...')

    with settings(hide('stdout', 'stderr')):
        with cd('%(project_repo_path)s' % env):
            with prefix('source %(env_path)s/bin/activate' % env):
                run('python manage.py upgrade')


def load_db(dumpfile=None):
    """Load data from a SQL script to Pootle DB."""
    require('environment', provided_by=[production, staging])

    print('\n\nLoading data into the DB...')

    if dumpfile is not None:
        if isfile(dumpfile):
            remote_filename = '%(project_path)s/DB_backup_to_load.sql' % env

            if (not exists(remote_filename) or
                confirm('\n%s already exists. Do you want to overwrite it?'
                        % remote_filename, default=False)):

                with settings(hide('stderr')):
                    put(dumpfile, remote_filename)
                    run('mysql -u %s %s %s < %s' %
                        (env['db_user'], env['db_password_opt'],
                         env['db_name'], remote_filename))
                    run('rm %s' % (remote_filename))
            else:
                abort('\nAborting.')
        else:
            abort('\nERROR: The file "%s" does not exist. Aborting.' % dumpfile)
    else:
        abort('\nERROR: A (local) dumpfile must be provided. Aborting.')


def dump_db(dumpfile="pootle_DB_backup.sql"):
    """Dump the DB as a SQL script and downloads it."""
    require('environment', provided_by=[production, staging])

    print('\n\nDumping DB...')

    if isdir(dumpfile):
        abort("dumpfile '%s' is a directory! Aborting." % dumpfile)

    elif (not isfile(dumpfile) or
          confirm('\n%s already exists locally. Do you want to overwrite it?'
                  % dumpfile, default=False)):

        remote_filename = '%s/%s' % (env['project_path'], dumpfile)

        if (not exists(remote_filename) or
            confirm('\n%s already exists. Do you want to overwrite it?'
                    % remote_filename, default=False)):

            with settings(hide('stderr')):
                run('mysqldump -u %s %s %s > %s' %
                    (env['db_user'], env['db_password_opt'],
                     env['db_name'], remote_filename))
                get(remote_filename, '.')
                run('rm %s' % (remote_filename))
        else:
            abort('\nAborting.')
    else:
        abort('\nAborting.')


def update_code():
    """Update the source code and its requirements."""
    require('environment', provided_by=[production, staging])

    with settings(hide('stdout', 'stderr')):
        _update_repo()
        _update_requirements()


def deploy_static():
    """Run `collectstatic` to collect all the static files."""
    require('environment', provided_by=[production, staging])

    print('\n\nCollecting static files and building assets...')

    with settings(hide('stdout', 'stderr')):
        with cd('%(project_repo_path)s' % env):
            with prefix('source %(env_path)s/bin/activate' % env):
                run('mkdir -p pootle/assets')
                run('python manage.py collectstatic --noinput --clear')
                run('python manage.py assets build')
    run('chmod -R go=u,go-w %(project_repo_path)s' % env)


def deploy():
    """Update the code and installs the production site."""
    require('environment', provided_by=[production, staging])

    with settings(hide('stdout', 'stderr')):
        update_code()
        syncdb()
        migratedb()
        deploy_static()
        install_site()


def install_site():
    """Configure the server and enables the site."""
    require('environment', provided_by=[production, staging])

    with settings(hide('stdout', 'stderr')):
        update_config()
        enable_site()


def update_config():
    """Update server configuration files."""
    require('environment', provided_by=[production, staging])

    print('\n\nUpdating server configuration...')

    with settings(hide('stdout', 'stderr')):

        # Configure VirtualHost
        upload_template('deploy/%(environment)s/virtualhost.conf' % env,
                        env.vhost_file, context=env, use_sudo=True)

        # Configure WSGI application
        upload_template('deploy/pootle.wsgi',
                        env.wsgi_file, context=env)

        # Configure and install settings
        upload_template('deploy/%(environment)s/settings.conf' % env,
                        '%(project_settings_path)s/90-%(environment)s-local.conf'
                        % env, context=env)


def _remove_config():
    """Remove server configuration files."""
    print('\n\nRemoving server configuration...')

    sudo('rm -rf %(vhost_file)s' % env)
    run('rm -rf %(wsgi_file)s' % env)
    run('rm -rf %(project_settings_path)s/90-%(environment)s-local.conf' % env)


def enable_site():
    """Enable the site."""
    require('environment', provided_by=[production, staging])

    with settings(hide('stdout', 'stderr')):
        _switch_site(True)


def disable_site():
    """Disable the site."""
    require('environment', provided_by=[production, staging])

    with settings(hide('stdout', 'stderr')):
        _switch_site(False)


def _switch_site(enable):
    """Switch site's status to enabled or disabled."""

    action = "Enabling" if enable else "Disabling"
    print('\n\n%s site...' % action)

    env.apache_command = 'a2ensite' if enable else 'a2dissite'
    sudo('%(apache_command)s %(project_name)s' % env)
    sudo('service apache2 reload')


def touch():
    """Reload daemon processes by touching the WSGI file."""
    require('environment', provided_by=[production, staging])

    print('\n\nRunning `touch`...')

    with settings(hide('stdout', 'stderr')):
        run('touch %(wsgi_file)s' % env)


def compile_translations():
    """Compile PO translations."""
    require('environment', provided_by=[production, staging])

    print('\n\nCompiling translations...')

    with settings(hide('stdout', 'stderr')):
        with cd(env.project_repo_path):
            with prefix('source %(env_path)s/bin/activate' % env):
                run('python setup.py build_mo')

def mysql_conf():
    """Set up .my.cnf file for passwordless MySQL operation."""
    require('environment', provided_by=[production, staging])

    print('\n\nSetting up MySQL password configuration...')

    conf_filename = '~/.my.cnf'

    if (not exists(conf_filename) or
        confirm('\n%s already exists. Do you want to overwrite it?'
                % conf_filename, default=False)):

        with settings(hide('stdout', 'stderr')):
            upload_template('deploy/my.cnf', conf_filename, context=env)
            run('chmod 600 %s' % conf_filename)

    else:
        abort('\nAborting.')

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import os
import sys

from django.core.management import execute_from_command_line

from pootle import syspath_override


if __name__ == "__main__":
    os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'
    from pootle.core.log import cmd_log
    cmd_log(*sys.argv)
    execute_from_command_line()

########NEW FILE########
__FILENAME__ = api_factory
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from tastypie.api import Api

from pootle_language.api import LanguageResource
from pootle_profile.api import UserResource
from pootle_project.api import ProjectResource
from pootle_store.api import StoreResource, SuggestionResource, UnitResource
from pootle_translationproject.api import TranslationProjectResource


def api_factory():
    API_VERSION = 'v1'
    pootle_api = Api(api_name=API_VERSION)
    pootle_api.register(LanguageResource())
    pootle_api.register(ProjectResource())
    pootle_api.register(StoreResource())
    pootle_api.register(SuggestionResource())
    pootle_api.register(TranslationProjectResource())
    pootle_api.register(UnitResource())
    pootle_api.register(UserResource())
    return pootle_api

########NEW FILE########
__FILENAME__ = managers
#
# Copyright (c) 2008  Christian Hammond
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

from django.contrib.sites.models import Site
from django.db import models


_SITECONFIG_CACHE = {}


class SiteConfigurationManager(models.Manager):
    """
    A Manager that provides a get_current function for retrieving the
    SiteConfiguration for this particular running site.
    """
    def get_current(self):
        """
        Returns the site configuration on the active site.
        """
        from djblets.siteconfig.models import SiteConfiguration
        global _SITECONFIG_CACHE

        # This will handle raising a ImproperlyConfigured if not set up
        # properly.
        site = Site.objects.get_current()

        if site.id not in _SITECONFIG_CACHE:
            _SITECONFIG_CACHE[site.id] = \
                SiteConfiguration.objects.get(site=site)

        return _SITECONFIG_CACHE[site.id]

    def clear_cache(self):
        global _SITECONFIG_CACHE
        _SITECONFIG_CACHE = {}

########NEW FILE########
__FILENAME__ = models
#
# Copyright (c) 2008  Christian Hammond
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

from datetime import datetime

from django.contrib.sites.models import Site
from django.core.cache import cache
from django.db import models

from djblets.siteconfig.managers import SiteConfigurationManager
from djblets.util.fields import JSONField


_DEFAULTS = {}


class SiteConfiguration(models.Model):
    """
    Configuration data for a site. The version and all persistent settings
    are stored here.

    The usual way to retrieve a SiteConfiguration is to use
    ```SiteConfiguration.objects.get_current()'''
    """
    site = models.ForeignKey(Site, related_name="config")
    version = models.CharField(max_length=20)
    settings = JSONField()

    objects = SiteConfigurationManager()

    def __init__(self, *args, **kwargs):
        models.Model.__init__(self, *args, **kwargs)
        self._last_sync_time = datetime.now()

    def get(self, key, default=None):
        """
        Retrieves a setting. If the setting is not found, the default value
        will be returned. This is represented by the default parameter, if
        passed in, or a global default if set.
        """
        if default is None and self.id in _DEFAULTS:
            default = _DEFAULTS[self.id].get(key, None)

        return self.settings.get(key, default)

    def set(self, key, value):
        """
        Sets a setting. The key should be a string, but the value can be
        any native Python object.
        """
        self.settings[key] = value

    def add_defaults(self, defaults_dict):
        """
        Adds a dictionary of defaults to this SiteConfiguration. These
        defaults will be used when calling ```get''', if that setting wasn't
        saved in the database.
        """
        if self.id not in _DEFAULTS:
            _DEFAULTS[self.id] = {}

        _DEFAULTS[self.id].update(defaults_dict)

    def get_defaults(self):
        """
        Returns all default settings registered with this SiteConfiguration.
        """
        if self.id not in _DEFAULTS:
            _DEFAULTS[self.id] = {}

        return _DEFAULTS[self.id]

    def save(self, **kwargs):
        now = datetime.now()
        self._last_sync_time = now
        cache.set(self.__get_sync_cache_key(), now)

        # The cached siteconfig might be stale now. We'll want a refresh.
        # Also refresh the Site cache, since callers may get this from
        # Site.config.
        SiteConfiguration.objects.clear_cache()
        Site.objects.clear_cache()

        super(SiteConfiguration, self).save(**kwargs)

    def __get_sync_cache_key(self):
        return "%s:siteconfig:%s:last-updated" % (self.site.domain, self.id)

    def __unicode__(self):
        return "%s (version %s)" % (unicode(self.site), self.version)

########NEW FILE########
__FILENAME__ = fields
#
# Copyright (c) 2007-2008  Christian Hammond
# Copyright (c) 2007-2008  David Trowbridge
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import json
import logging

from django.conf import settings
from django.core.serializers.json import DjangoJSONEncoder
from django.db import models


class JSONField(models.TextField):
    """
    A field for storing JSON-encoded data. The data is accessible as standard
    Python data types and is transparently encoded/decoded to/from a JSON
    string in the database.
    """
    serialize_to_string = True

    def __init__(self, verbose_name=None, name=None,
                 encoder=DjangoJSONEncoder(), **kwargs):
        models.TextField.__init__(self, verbose_name, name, blank=True,
                                  **kwargs)
        self.encoder = encoder

    def contribute_to_class(self, cls, name):
        def get_json(model_instance):
            return self.dumps(getattr(model_instance, self.attname, None))

        def set_json(model_instance, json):
            setattr(model_instance, self.attname, self.loads(json))

        super(JSONField, self).contribute_to_class(cls, name)

        setattr(cls, "get_%s_json" % self.name, get_json)
        setattr(cls, "set_%s_json" % self.name, set_json)

        models.signals.post_init.connect(self.post_init, sender=cls)

    def pre_save(self, model_instance, add):
        return self.dumps(getattr(model_instance, self.attname, None))

    def post_init(self, instance=None, **kwargs):
        value = self.value_from_object(instance)

        if value:
            value = self.loads(value)
        else:
            value = {}

        setattr(instance, self.attname, value)

    def get_db_prep_save(self, value, *args, **kwargs):
        if not isinstance(value, basestring):
            value = self.dumps(value)

        return super(JSONField, self).get_db_prep_save(value, *args, **kwargs)

    def value_to_string(self, obj):
        return self.dumps(self.value_from_object(obj))

    def dumps(self, data):
        return self.encoder.encode(data)

    def loads(self, val):
        try:
            val = json.loads(val, encoding=settings.DEFAULT_CHARSET)

            # XXX We need to investigate why this is happening once we have
            #     a solid repro case.
            if isinstance(val, basestring):
                logging.warning("JSONField decode error. Expected dictionary, "
                                "got string for input '%s'" % val)
                # For whatever reason, we may have gotten back
                val = json.loads(val, encoding=settings.DEFAULT_CHARSET)
        except ValueError:
            # There's probably embedded unicode markers (like u'foo') in the
            # string. We have to eval it.
            val = eval(val)

        return val

########NEW FILE########
__FILENAME__ = admin
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import re

from django import forms
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _

from pootle_profile.models import PootleProfile
from pootle_project.models import Project


### Project

class MyProjectAdminForm(forms.ModelForm):

    def clean_code(self):
        if re.search("[^a-zA-Z0-9_]", self.cleaned_data['code']):
            raise forms.ValidationError(_('Project code may only contain '
                                          'letters, numbers and _'))
        return self.cleaned_data["code"]

class ProjectAdmin(admin.ModelAdmin):
    list_display = ('code', 'fullname', 'description', 'localfiletype')
    list_display_links = ('code', 'fullname')
    prepopulated_fields = {"fullname": ("code",)}
    radio_fields = {"treestyle": admin.VERTICAL}
    fieldsets = (
        (None, {
            'fields': ('code', 'fullname', 'description', 'localfiletype'),
        }),
        (_('Advanced Options'), {
            'classes': ('collapse',),
            'fields': ('treestyle', 'ignoredfiles'),
        }),
    )
    form = MyProjectAdminForm

admin.site.register(Project, ProjectAdmin)


### User / PootleProfile

admin.site.unregister(User)

class PootleProfileInline(admin.StackedInline):
    model = PootleProfile

class MyUserAdmin(UserAdmin):
    inlines = [PootleProfileInline]

admin.site.register(User, MyUserAdmin)

########NEW FILE########
__FILENAME__ = assets
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django_assets import Bundle, register


js_common = Bundle(
    'js/vendor/jquery/jquery.js',
    'js/vendor/jquery/jquery.tipsy.js',
    'js/vendor/jquery/jquery.cookie.js',
    'js/vendor/jquery/jquery.bidi.js',
    'js/vendor/jquery/jquery.magnific-popup.js',
    'js/vendor/jquery/jquery.utils.js',
    'js/vendor/jquery/jquery.easing.js',
    'js/vendor/jquery/jquery.serializeObject.js',
    'js/vendor/jquery/jquery.select2.js',
    'js/vendor/bootstrap/bootstrap-alert.js',
    'js/vendor/bootstrap/bootstrap-transition.js',
    'js/browser.js',
    'js/captcha.js',
    'js/common.js',
    'js/languages.js',
    'js/contact.js',
    'js/search.js',
    'js/stats.js',
    'js/utils.js',
    'js/zoom.js',
    'js/vendor/sorttable.js',
    'js/vendor/spin.js',
    'js/vendor/shortcut.js',  # Leave shortcut.js as the last one.
    filters='rjsmin', output='js/common.min.%(version)s.js')
register('js_common', js_common)


js_admin = Bundle(
    'js/admin.js',
    filters='rjsmin', output='js/admin.min.%(version)s.js')
register('js_admin', js_admin)


js_editor = Bundle(
    'js/vendor/jquery/jquery.history.js',
    'js/vendor/jquery/jquery.textarea-expander.js',
    'js/vendor/jquery/jquery.textcomplete.js',
    'js/vendor/diff_match_patch.js',
    'js/vendor/jquery/jquery.caret.js',
    'js/vendor/jquery/jquery.highlightRegex.js',
    'js/vendor/jquery/jquery.jsonp.js',
    'js/vendor/iso8601.js',
    'js/vendor/underscore.js',
    'js/vendor/backbone.js',
    'js/vendor/backbone-relational.js',
    'js/models.js',
    'js/collections.js',
    'js/editor.js',
    filters='rjsmin', output='js/editor.min.%(version)s.js')
register('js_editor', js_editor)


css_common = Bundle(
    'css/style.css',
    'css/buttons.css',
    'css/contact.css',
    'css/magnific-popup.css',
    'css/tipsy.css',
    'css/markup.css',
    'css/sprite.css',
    'css/select2.css',
    'css/select2-pootle.css',
    'css/custom/custom.css',
    filters='cssmin', output='css/common.min.%(version)s.css')
register('css_common', css_common)


css_admin = Bundle(
    'css/admin.css',
    filters='cssmin', output='css/admin.min.%(version)s.css')
register('css_admin', css_admin)


css_editor = Bundle(
    'css/editor.css',
    'css/jquery.textcomplete.css',
    filters='cssmin', output='css/editor.min.%(version)s.css')
register('css_editor', css_editor)

########NEW FILE########
__FILENAME__ = forms
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2013, 2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import re

from django import forms

from pootle_app.models.pootle_site import PootleSite
from pootle_language.models import Language


LANGCODE_RE = re.compile("^[a-z]{2,}([_-][a-z]{2,})*(@[a-z0-9]+)?$",
                         re.IGNORECASE)


class LanguageAdminForm(forms.ModelForm):

    class Meta:
        model = Language

    def __init__(self, *args, **kwargs):
        super(LanguageAdminForm, self).__init__(*args, **kwargs)
        self.fields['nplurals'].widget.attrs['class'] = \
            "js-select2 select2-nplurals"

    def clean_code(self):
        if (self.cleaned_data['code'] != 'templates' and
            not LANGCODE_RE.match(self.cleaned_data['code'])):
            raise forms.ValidationError(_('Language code does not follow the '
                                          'ISO convention'))
        return self.cleaned_data["code"]


class GeneralSettingsForm(forms.ModelForm):

    class Meta:
        model = PootleSite

########NEW FILE########
__FILENAME__ = add_project_goals
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/>.

import logging
import os
from optparse import make_option

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from django.contrib.contenttypes.models import ContentType
from django.core.exceptions import ObjectDoesNotExist
from django.core.management.base import BaseCommand, CommandError

from pootle_project.models import Project
from pootle_store.models import Store
from pootle_tagging.models import Goal, slugify_tag_name


class Command(BaseCommand):
    option_list = BaseCommand.option_list + (
            make_option('--project', dest='project_name',
                        help='Project to add project goals to'),
            make_option('-f', '--filename', dest='goals_file', metavar='FILE',
                        help='File with filenames and applied goals'),
    )
    help = "Add project goals from file to a project."

    def handle(self, *args, **options):
        """Add project goals from file to the given project."""
        project_name = options.get('project_name', None)
        goals_filename = options.get('goals_file', None)

        if project_name is None:
            raise CommandError("A project must be provided.")
        elif goals_filename is None:
            raise CommandError("A filename must be provided.")
        elif not os.path.isfile(goals_filename):
            raise CommandError("Filename '%s' doesn't point to an existing "
                               "file." % goals_filename)

        try:
            project = Project.objects.get(code=project_name)
        except Project.DoesNotExist:
            raise CommandError("Project '%s' does not exist." %
                               project_name)

        template_tp = project.get_template_translationproject()

        if not template_tp:
            raise CommandError("Project '%s' doesn't have a template "
                               "translation project." % project_name)

        try:
            inputfile = open(goals_filename, "r")
            inputlines = inputfile.readlines()
            inputfile.close()
        except IOError as e:
            raise CommandError("Some error occurred while handling the file: "
                               "%s" % e.strerror)

        line_number = 0
        goals_section_start = 0
        files_section_start = 0

        for line in inputlines:
            line_number += 1

            if line.startswith("[goals]"):
                goals_section_start = line_number
            elif line.startswith("[files]"):
                files_section_start = line_number
                break

        if not goals_section_start and not files_section_start:
            raise CommandError("Wrong syntax: Required section is missing.")

        line_number = 0
        reading_goal_description = False
        goals_dict = {}
        current_goal = None

        # Parse the goals section.
        for line in inputlines[goals_section_start:files_section_start-1]:
            line = line.rstrip("\n")

            if reading_goal_description:
                if line.endswith("\\"):
                    current_goal['description'] += line.rstrip("\\") + "\n"
                else:
                    reading_goal_description = False
                    current_goal['description'] += line
                    goals_dict[current_goal['name']] = current_goal
                    current_goal = None
            else:
                if line.endswith("\\"):
                    reading_goal_description = True
                    line = line.rstrip("\\") + "\n"

                try:
                    goal_name, priority, description = line.split("\t")
                except ValueError:
                    raise CommandError("Wrong syntax at line %d." %
                                       line_number)
                goal_name = goal_name.lower()

                if not goal_name.startswith("goal:"):
                    goal_name = "goal:" + goal_name

                current_goal = {
                    'name': goal_name,
                    'description': description,
                    'files': [],
                }

                try:
                    current_goal['priority'] = int(priority)
                except Exception:
                    pass

                if not reading_goal_description:
                    goals_dict[current_goal['name']] = current_goal
                    current_goal = None

        # Parse the files section.
        line_number = files_section_start
        template_language = template_tp.language.code

        for line in inputlines[files_section_start:]:
            line_number += 1
            line = line.strip()

            try:
                goal_name, filename = line.split("\t")
            except ValueError:
                raise CommandError("Wrong syntax at line %d." % line_number)

            # Polish the goal name and filename before working with them.
            filename = filename.strip().lstrip("./")
            filename = "/".join([project_name, template_language, filename])
            goal_name = goal_name.lower()

            if not goal_name.startswith("goal:"):
                goal_name = "goal:" + goal_name

            try:
                goals_dict[goal_name]['files'].append(filename)
            except KeyError:
                raise CommandError("Goal at line %d is not in [goals]." %
                                   line_number)

        logging.info("\nParsed %d lines from '%s'\n", line_number,
                     goals_filename)

        # First check if any of the goals already exists and it is not a
        # project goal, in order to abort before creating or adding any of the
        # goals to the files.
        for goal_name in goals_dict.keys():
            try:
                goal = Goal.objects.get(name=goal_name)

                if not goal.project_goal:
                    raise CommandError("The goal '%s' already exists but it "
                                       "isn't a project goal." % goal)
            except Goal.DoesNotExist:
                pass

        # Criteria to get all the items in a random goal that correspond to
        # stores in the 'templates' translation project.
        #
        # It is used several lines below, but here is possible to calculate it
        # just once.
        stores_criteria = {
            'content_type': ContentType.objects.get_for_model(Store),
            'object_id__in': template_tp.stores.values_list('pk', flat=True),
        }

        applied_goals = set()

        # Now apply the goal to each of the stores.
        for goal_item in goals_dict.values():
            goal_name = goal_item['name']
            try:
                # Retrieve the goal if it already exists.
                goal = Goal.objects.get(name=goal_name)

                # Unapply the goal from all the stores in the 'templates'
                # translation project to which the goal is currently applied.
                goal.items_with_goal.filter(**stores_criteria).delete()

                changed = False
                if (goal_item['description']
                    and goal_item['description'] != goal.description):
                    goal.description = goal_item['description']
                    changed = True
                    logging.info("Description for goal '%s' will be changed.",
                                 goal_name)

                if ('priority' in goal_item
                    and goal.priority != goal_item['priority']):
                    goal.priority = goal_item['priority']
                    changed = True
                    logging.info("Priority for goal '%s' will be changed to "
                                 "%d.", goal_name, goal.priority)

                if changed:
                    goal.save()
            except Goal.DoesNotExist:
                # If the goal doesn't exist yet then create it.
                criteria = {
                    'name': goal_name,
                    # Note: for some unknown reason it is necessary to provide
                    # the slug instead of letting the model create it.
                    'slug': slugify_tag_name(goal_name),
                    'project_goal': True,
                }

                if 'priority' in goal_item:
                    criteria['priority'] = goal_item['priority']

                goal = Goal(**criteria)
                goal.save()

            for filename in goal_item['files']:
                try:
                    store = template_tp.stores.get(file=filename)
                    store.goals.add(goal)
                    applied_goals.add(goal_name)
                    logging.info("Goal '%s' applied to '%s'.", goal_name,
                                 filename)
                except ObjectDoesNotExist:
                    logging.warning("File '%s' is not on the template "
                                    "language. Skipping it.\n", filename)

        logging.info("\nSucessfully added %d project goals to project '%s'.",
                     len(applied_goals), project_name)

########NEW FILE########
__FILENAME__ = assign_permissions
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/>.

import logging
import os
from optparse import make_option

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from django.contrib.auth.models import Permission
from django.core.management.base import BaseCommand, CommandError

from pootle_app.models.permissions import PermissionSet, get_pootle_permission
from pootle_language.models import Language
from pootle_profile.models import PootleProfile
from pootle_project.models import Project
from pootle_translationproject.models import TranslationProject


class Command(BaseCommand):
    option_list = BaseCommand.option_list + (
            make_option('--project', dest='project_code',
                        help='Project to assign permissions to. Use with '
                             '--language to specify a translation project.'),
            make_option('--language', dest='language_code',
                        help='Language to assign permissions to. Use with '
                             '--project to specify a translation project.'),
            make_option('--user', dest='username', metavar='USERNAME',
                        help='Username to assign permissions to.'),
            make_option('--permissions', dest='permissions',
                        help='Comma separated list of permissions codenames '
                             'to assign. Like view,suggest,translate or just'
                             'translate'),
    )
    help = ("Assign permissions to a user in a project, language or "
            "translation project.")

    def handle(self, *args, **options):
        """Assign permissions to a user in a project, language or translation
        project.
        """
        project_code = options.get('project_code', None)
        language_code = options.get('language_code', None)
        username = options.get('username', None)
        permissions = options.get('permissions', None)

        # Make sure all the required parameters are provided.
        if username is None:
            raise CommandError("A username must be provided.")

        if permissions is None:
            raise CommandError("A permissions list must be provided.")

        if project_code is None and language_code is None:
            raise CommandError("Either a project code or a language code must "
                               "be provided.")

        # Get the object we are assigning permissions for. This object can be a
        # translation project, a language or a project. This checks if it
        # exists.
        if project_code is not None and language_code is not None:
            try:
                criteria = {
                    'project__code': project_code,
                    'language__code': language_code,
                }
                perms_for = TranslationProject.objects.get(**criteria)
            except TranslationProject.DoesNotExist:
                raise CommandError("Translation project for project '%s' and "
                                   "language '%s' doesn't exist." %
                                   (project_code, language_code))
        elif project_code is not None:
            try:
                perms_for = Project.objects.get(code=project_code)
            except Project.DoesNotExist:
                raise CommandError("Project '%s' does not exist." %
                                   project_code)
        elif language_code is not None:
            try:
                perms_for = Language.objects.get(code=language_code)
            except Language.DoesNotExist:
                raise CommandError("Language '%s' does not exist." %
                                   language_code)

        # Get the profile for the specified username. This checks if it exists.
        try:
            profile = PootleProfile.objects.get(user__username=username)
        except PootleProfile.DoesNotExist:
            raise CommandError("Profile for user '%s' does not exist." %
                               username)

        # Get all the specified permissions. This checks if they exist.
        permission_list = permissions.split(",")
        perms_dict = {}

        for permission in permission_list:
            try:
                perms_dict[permission] = get_pootle_permission(permission)
            except Permission.DoesNotExist:
                raise CommandError("Permission with code '%s' doesn't exist." %
                                   permission)

        # Assign the permissions to the user.
        params = {
            'profile': profile,
            'directory': perms_for.directory,
        }
        permission_set, created = PermissionSet.objects.get_or_create(**params)

        if created:
            # If the user doesn't yet have any permission for this object, just
            # apply all the permissions.
            permission_set.positive_permissions = perms_dict.values()
            permission_set.save()
        else:
            # If the user already has some permissions for this object.
            has_perms = permission_set.positive_permissions.all()
            has_perms_list = "\n\t".join([perm.codename for perm in has_perms])
            logging.info("The user already has the permissions:\n\t%s",
                         has_perms_list)

            # Get the permissions not yet applied.
            missing_perms = [permission for permission in perms_dict.values()
                                        if permission not in has_perms]
            missing_perms_list = "\n\t".join([perm.codename for perm in
                                              missing_perms])
            logging.info("About to apply the missing permissions:\n\t%s",
                         missing_perms_list)

            # Apply the missing permissions.
            for missing in missing_perms:
                permission_set.positive_permissions.add(missing)

        # Nofify success in permissions assignment.
        if project_code is not None and language_code is not None:
            logging.info("Sucessfully applied the permissions to user '%s' in "
                         "translation project for project '%s' and language "
                         "'%s'.", username, project_code, language_code)
        elif project_code is not None:
            logging.info("Sucessfully applied the permissions to user '%s' in "
                         "project '%s'.", username, project_code)
        elif language_code is not None:
            logging.info("Sucessfully applied the permissions to user '%s' in "
                         "language '%s'.", username, language_code)

########NEW FILE########
__FILENAME__ = commit_to_vcs
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import logging
import os
from optparse import make_option

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_app.management.commands import PootleCommand


class Command(PootleCommand):
    help = "Allow VCS-managed data to be committed manually."
    option_list = PootleCommand.option_list + (
        make_option('--user', default='admin',
                    help="Username to list in the commit message"),
        )

    def handle_noargs(self, **options):
        from django.contrib.auth.models import User
        try:
            self.user = User.objects.get(username=options['user'])
        except User.DoesNotExist:
            logging.error("Unknown user (%s)", options['user'])
            return

        super(Command, self).handle_noargs(**options)

    def handle_translation_project(self, tp, **options):
        """Commit to VCS all stores referred to by the translation project

        The translation project may be limited by language, filename, etc.
        """
        tp.commit_dir(self.user, tp.directory)

########NEW FILE########
__FILENAME__ = flush_cache
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_app.management.commands import PootleCommand


class Command(PootleCommand):
    help = "Flush stats cache."

    def handle_all_stores(self, translation_project, **options):
        translation_project.flush_cache()

    def handle_store(self, store, **options):
        store.flush_cache()

    def handle_language(self, lang, **options):
        lang.flush_cache(False)

    def handle_project(self, prj, **options):
        prj.flush_cache(False)

########NEW FILE########
__FILENAME__ = initdb
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging
import os

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from django.core.management.base import NoArgsCommand

from pootle.core.initdb import initdb


class Command(NoArgsCommand):
    help = 'Populates the database with initial values: users, projects, ...'

    def handle_noargs(self, **options):
        logging.info('Populating the database.')
        initdb()
        logging.info('Successfully populated the database.')

########NEW FILE########
__FILENAME__ = latest_change_id
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from django.core.management.base import NoArgsCommand
from pootle_statistics.models import Submission


class Command(NoArgsCommand):

    help = "Print the ID of the latest change made."

    def handle_noargs(self, **options):
        try:
            self.stdout.write(Submission.objects.values_list('id', flat=True) \
                                    .select_related("").latest())
        except Submission.DoesNotExist:
            # if there is no latest id, treat it as id 0
            self.stdout.write(0)

########NEW FILE########
__FILENAME__ = list_languages
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os
from optparse import make_option

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_app.management.commands import (NoArgsCommandMixin,
                                            ModifiedSinceMixin)


class Command(ModifiedSinceMixin, NoArgsCommandMixin):
    option_list = NoArgsCommandMixin.option_list + (
            make_option('--project', action='append', dest='projects',
                        help='Limit to PROJECTS'),
    )
    help = "List language codes."

    def handle_noargs(self, **options):
        super(Command, self).handle_noargs(**options)
        self.list_languages(**options)

    def list_languages(self, **options):
        """List all languages on the server or the given projects."""
        change_id = options.get('modified_since', 0)
        projects = options.get('projects', [])

        from pootle_translationproject.models import TranslationProject
        tps = TranslationProject.objects.distinct()
        tps = tps.exclude(language__code='templates').order_by('language__code')

        if change_id:
            tps = tps.filter(submission__id__gt=change_id)

        if projects:
            tps = tps.filter(project__code__in=projects)

        for lang in tps.values_list('language__code', flat=True):
            self.stdout.write(lang)

########NEW FILE########
__FILENAME__ = list_projects
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_app.management.commands import (NoArgsCommandMixin,
                                            ModifiedSinceMixin)
from pootle_project.models import Project


class Command(ModifiedSinceMixin, NoArgsCommandMixin):

    def handle_noargs(self, **options):
        super(Command, self).handle_noargs(**options)
        self.list_projects(**options)

    def list_projects(self, **options):
        """List all projects on the server."""
        change_id = options.get('modified_since', 0)

        if change_id:
            from pootle_translationproject.models import TranslationProject
            projects = TranslationProject.objects \
                                         .filter(submission__id__gt=change_id) \
                                         .distinct() \
                                         .values('project__code')

            for project in projects:
                self.stdout.write(project["project__code"])
        else:
            for project in Project.objects.all():
                self.stdout.write(project.code)

########NEW FILE########
__FILENAME__ = refresh_stats
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os
from optparse import make_option

from translate.filters.decorators import Category

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_store.util import OBSOLETE, UNTRANSLATED, FUZZY, TRANSLATED
from pootle_store.caching import count_words
from pootle_store.models import QualityCheck, Suggestion
from pootle_app.management.commands import PootleCommand


class Command(PootleCommand):
    help = "Allow stats to be refreshed manually."

    shared_option_list = (
        make_option("--calculate-checks", dest="calculate_checks",
                    action="store_true", help="Recalculate all quality checks"),
    )
    option_list = PootleCommand.option_list + shared_option_list

    def handle_noargs(self, *args, **kwargs):
        self._updated_tps = set()
        super(Command, self).handle_noargs(*args, **kwargs)
        self.update_translation_projects(self._updated_tps)

    def handle_store(self, store, **options):
        self.stdout.write("Processing %r" % (store))
        store.total_wordcount = 0
        store.translated_wordcount = 0
        store.fuzzy_wordcount = 0

        suggestions = Suggestion.objects.filter(unit__store=store, unit__state__gt=OBSOLETE)
        store.suggestion_count = suggestions.count()

        QualityCheck.objects.filter(unit__store=store).delete()

        for unit in store.units.all():
            wordcount = count_words(unit.source_f.strings)
            store.total_wordcount += wordcount
            if unit.state == TRANSLATED:
                store.translated_wordcount += wordcount
            elif unit.state == FUZZY:
                store.fuzzy_wordcount += wordcount

        if options["calculate_checks"]:
            store.update_qualitychecks()

            store.failing_critical_count = QualityCheck.objects.filter(
                unit__store=store,
                unit__state__gt=UNTRANSLATED,
                category=Category.CRITICAL,
                false_positive=False,
            ).values('unit').distinct().count()

        store.save()
        self._updated_tps.add(store.translation_project)

    def update_translation_projects(self, tps):
        def update(tp, col):
            setattr(tp, col, sum(getattr(store, col) for store in tp.stores.iterator()))

        self.stdout.write("Processing translation projects... (almost done!)")
        for tp in tps:
            update(tp, "total_wordcount")
            update(tp, "translated_wordcount")
            update(tp, "fuzzy_wordcount")
            update(tp, "suggestion_count")
            update(tp, "failing_critical_count")
            tp.save()

########NEW FILE########
__FILENAME__ = run_cherrypy
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os
from optparse import make_option

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_app.management.commands import BaseRunCommand


class Command(BaseRunCommand):
    help = "Runs Pootle with the CherryPy server."

    option_list = BaseRunCommand.option_list + (
        make_option('--threads', action='store', dest='threads', default=5,
            type=int,
            help='Number of working threads. Default: 5'),
        make_option('--name', action='store', dest='server_name', default='',
            help='Name of the worker process.'),
        make_option('--queue', action='store', dest='request_queue_size',
            default=5, type=int,
            help='Maximum number of queued connections.'),
        make_option('--ssl_certificate', action='store',
            dest='ssl_certificate', default='',
            help='Path to the server\'s SSL certificate.'),
        make_option('--ssl_private_key', action='store',
            dest='ssl_private_key', default='',
            help='Path to the server\'s SSL private key.'),
    )

    def serve_forever(self, *args, **options):
        # Not using launch_server since we want further control over the
        # CherryPy WSGI server
        from translate.misc.wsgiserver import CherryPyWSGIServer as Server

        server = Server(
            (options['host'], int(options['port'])),
            self.get_app(),
            int(options['threads']),
            options['server_name'],
            request_queue_size=int(options['request_queue_size'])
        )

        if options['ssl_certificate'] and options['ssl_private_key']:
            server.ssl_certificate = options['ssl_certificate']
            server.ssl_private_key = options['ssl_private_key']

        import logging
        logging.info("Starting CherryPy server, listening on port %s",
                     options['port'])

        try:
            server.start()
        except KeyboardInterrupt:
            server.stop()

########NEW FILE########
__FILENAME__ = start
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django.core.management import call_command
from django.core.management.base import BaseCommand, CommandError


class Command(BaseCommand):
    args = '<server>'
    help = 'Starts the Pootle server'

    def handle(self, server_name='cherrypy', **options):
        # XXX: Find a cleaner way to handle these and their custom options
        servers = {
            'cherrypy': 'run_cherrypy',
            'fcgi': 'runfcgi',
            'gunicorn': 'run_gunicorn',
        }

        try:
            server_command = servers[server_name]
        except KeyError:
            raise CommandError('%s is not a valid server' % server_name)

        call_command(server_command)

########NEW FILE########
__FILENAME__ = sync_stores
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import logging
import os
from optparse import make_option

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_app.management.commands import PootleCommand, ModifiedSinceMixin


class Command(ModifiedSinceMixin, PootleCommand):
    option_list = PootleCommand.option_list + (
        make_option('--overwrite', action='store_true', dest='overwrite',
                    default=False, help="Don't just save translations, but "
                    "overwrite files to reflect state in database"),
        make_option('--skip-missing', action='store_true', dest='skip_missing',
                    default=False, help="Ignore missing files on disk"),
        )
    help = "Save new translations to disk manually."

    def handle_all_stores(self, translation_project, **options):
        overwrite = options.get('overwrite', False)
        skip_missing = options.get('skip_missing', False)
        change_id = options.get('modified_since', 0)

        if change_id:
            has_changes = translation_project.submission_set \
                                             .filter(id__gte=change_id) \
                                             .exists()
            if not has_changes:
                # No change to this translation project since the given change ID
                return

        translation_project.sync(
                conservative=not overwrite,
                skip_missing=skip_missing,
                modified_since=change_id,
        )

    def handle_store(self, store, **options):
        overwrite = options.get('overwrite', False)
        skip_missing = options.get('skip_missing', False)
        change_id = options.get('modified_since', 0)

        if change_id:
            from pootle_statistics.models import Submission

            has_changes = Submission.objects.filter(
                    id__gte=change_id,
                    unit__store=store,
            ).exists()

            if not has_changes:
                logging.debug(u"File didn't change since %d, skipping %s",
                              change_id, store.pootle_path)
                return

        store.sync(update_translation=True, conservative=not overwrite,
                   update_structure=overwrite, skip_missing=skip_missing,
                   modified_since=change_id)

########NEW FILE########
__FILENAME__ = updatedb
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging
import os

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from django.core.management.base import NoArgsCommand

from pootle_app.management.commands.upgrade import DEFAULT_POOTLE_BUILDVERSION
from pootle_app.models.pootle_config import get_pootle_build


class Command(NoArgsCommand):

    def handle_noargs(self, **options):
        db_buildversion = get_pootle_build()

        if db_buildversion and db_buildversion < DEFAULT_POOTLE_BUILDVERSION:
            from pootle_misc.upgrade.schema import staggered_update

            logging.info('Upgrading Pootle database from schema version '
                         '%d to %d', db_buildversion,
                         DEFAULT_POOTLE_BUILDVERSION)
            staggered_update(db_buildversion)
            logging.info('Database upgrade done.')
        elif db_buildversion and db_buildversion > DEFAULT_POOTLE_BUILDVERSION:
            logging.info('Your installation is newer than Pootle 2.5.\n'
                         'You do not need to run this.')
        elif db_buildversion:
            logging.info('No database upgrades required.')

        if db_buildversion:
            new_buildversion = max(db_buildversion,
                                   DEFAULT_POOTLE_BUILDVERSION)
            logging.info('Current schema version: %d', new_buildversion)

        logging.info('THIS UPGRADE SCRIPT HAS BEEN DEPRECATED!')
        logging.info('If you are trying to upgrade Pootle from version 2.5\n'
                     'or older, please read the upgrade instructions at\n'
                     'http://docs.translatehouse.org/projects/pootle/en/'
                     'latest/server/upgrading.html')

########NEW FILE########
__FILENAME__ = update_against_templates
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import os

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_app.management.commands import PootleCommand


class Command(PootleCommand):
    help = "Mass update against templates."

    def handle_translation_project(self, translation_project, **options):
        translation_project.update_against_templates()

########NEW FILE########
__FILENAME__ = update_from_vcs
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging
import os

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_app.management.commands import PootleCommand


class Command(PootleCommand):
    help = "Allow VCS-managed data to be updated manually."

    def handle_translation_project(self, tp, **options):
        """Update all stores in a translation project from the VCS.

        The translation project may be limited by language, project etc.
        """
        tp.update_dir(directory=tp.directory)

########NEW FILE########
__FILENAME__ = update_stores
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import logging
import os
import sys
from optparse import make_option

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_app.management.commands import PootleCommand, ModifiedSinceMixin


class Command(ModifiedSinceMixin, PootleCommand):
    option_list = PootleCommand.option_list + (
        make_option('--keep', action='store_true', dest='keep', default=False,
                    help="Keep existing translations; just update "
                         "untranslated units and add new units."),
        make_option('--force', action='store_true', dest='force', default=False,
                    help="Unconditionally process all files (even if they "
                         "appear unchanged)."),
        )
    help = "Update database stores from files."

    def handle_noargs(self, **options):
        keep = options.get('keep', False)
        change_id = options.get('modified_since', 0)

        if change_id and not keep:
            logging.error(u"Both --keep and --modified-since must be set.")
            sys.exit(1)

        super(Command, self).handle_noargs(**options)

    def handle_translation_project(self, translation_project, **options):
        """
        :return: flag if child stores should be updated
        """
        if not translation_project.disabled:
            logging.info(u"Scanning for new files in %s", translation_project)
            translation_project.scan_files()
            return True
        else:
            return False

    def handle_store(self, store, **options):
        keep = options.get('keep', False)
        force = options.get('force', False)
        change_id = options.get('modified_since', 0)

        store.update(update_translation=not keep, update_structure=True,
                     only_newer=not force, modified_since=change_id)

########NEW FILE########
__FILENAME__ = update_translation_projects
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Evernote Corporation
# Copyright 2009-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import errno
import logging
import os
from optparse import make_option

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle_app.management.commands import PootleCommand
from pootle_language.models import Language
from pootle_project.models import Project
from pootle_translationproject.models import create_or_enable_translation_project


def does_not_exist(path):
    if os.path.exists(path):
        return False

    try:
        os.stat(path)
        # what the hell?
    except OSError as e:
        if e.errno == errno.ENOENT:
            # explicit no such file or directory
            return True


class Command(PootleCommand):
    option_list = PootleCommand.option_list + (
        make_option('--cleanup', action='store_true', dest='clean',
                    default=False, help="Delete translation projects"
                    " that ceased to exist (handle with care)."),
        )
    help = "Detects new translation projects in the file system and " \
           "adds them to database."

    def handle_project(self, project, **options):
        clean = options.get('clean', False)
        if clean and does_not_exist(project.get_real_path()):
            logging.info(u"Disabling %s", project)
            project.disabled = True
            project.save()
            project.clear_all_cache(parents=True, children=False)
            return

        lang_query = Language.objects.exclude(
                id__in=project.translationproject_set.enabled() \
                              .values_list('language', flat=True)
            )
        for language in lang_query.iterator():
            create_or_enable_translation_project(language, project)

    def handle_language(self, language, **options):
        project_query = Project.objects.exclude(
                id__in=language.translationproject_set.enabled() \
                               .values_list('project', flat=True)
            )
        create_or_enable_translation_project

    def handle_translation_project(self, translation_project, **options):
        clean = options.get('clean', False)
        if not translation_project.disabled and \
                clean and does_not_exist(translation_project.abs_real_path):
            logging.info(u"Disabling %s", translation_project)
            translation_project.disabled = True
            translation_project.save()
            translation_project.clear_all_cache(parents=True, children=False)

########NEW FILE########
__FILENAME__ = upgrade
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging
import os
from optparse import make_option

from translate.__version__ import build as CODE_TTK_BUILDVERSION

# This must be run before importing Django.
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from django.core.management.base import BaseCommand

from pootle.__version__ import build as CODE_PTL_BUILDVERSION
from pootle_app.models.pootle_config import get_pootle_build, get_toolkit_build


#: Build version referring to Pootle version 2.5.
#: We'll assume db represents version 2.5 if no build version is stored.
DEFAULT_POOTLE_BUILDVERSION = 22000

#: Build version referring to Translate Toolkit version 1.7.0.
#: We'll assume db represents version 1.7.0 if no build version is stored.
DEFAULT_TT_BUILDVERSION = 12005


def calculate_stats():
    """Calculate full translation statistics.

    First time to visit the front page all stats for projects and
    languages will be calculated which can take forever. Since users don't
    like webpages that take forever let's precalculate the stats here.
    """
    from pootle_language.models import Language
    from pootle_project.models import Project

    logging.info('Calculating translation statistics, this will take a few '
                 'minutes')

    for language in Language.objects.iterator():
        logging.info(u'Language %s is %d%% complete', language.name,
                     language.translated_percentage())

    for project in Project.objects.iterator():
        logging.info(u'Project %s is %d%% complete', project.fullname,
                     project.translated_percentage())

    logging.info(u"Done calculating statistics")


def flush_quality_checks():
    """Revert stores to unchecked state.

    If a store has false positives marked, quality checks will be updated
    keeping false postivies intact.
    """
    from pootle_store.models import Store, QualityCheck, CHECKED, PARSED

    logging.info('Fixing quality checks. This will take a while')

    for store in Store.objects.filter(state=CHECKED).iterator():
        store_checks = QualityCheck.objects.filter(unit__store=store)
        false_positives = store_checks.filter(false_positive=True).count()

        if false_positives:
            logging.debug("%s has false positives, updating quality checks",
                          store.pootle_path)

            for unit in store.units.iterator():
                unit.update_qualitychecks(keep_false_positives=True)
        else:
            logging.debug("%s has no false positives, deleting checks",
                          store.pootle_path)
            store_checks.delete()
            store.state = PARSED
            store.save()


class Command(BaseCommand):
    help = 'Runs the upgrade machinery.'

    option_list = BaseCommand.option_list + (
        make_option('--calculate-stats', action='store_true',
            dest='calculate_stats', default=False,
            help='Calculate full translation statistics after upgrading. '
                 'Default: False'),
        make_option('--flush-checks', action='store_true',
            dest='flush_qc', default=False,
            help='Flush quality checks after upgrading. Default: False'),
    )

    def handle(self, *args, **options):
        db_ptl_buildversion = get_pootle_build(DEFAULT_POOTLE_BUILDVERSION)
        db_tt_buildversion = get_toolkit_build(DEFAULT_TT_BUILDVERSION)

        ptl_changed = db_ptl_buildversion < CODE_PTL_BUILDVERSION
        tt_changed = db_tt_buildversion < CODE_TTK_BUILDVERSION

        if ptl_changed or tt_changed:
            from pootle_misc.upgrade import upgrade

            if ptl_changed:
                logging.info('Detected new Pootle version: %d.',
                             CODE_PTL_BUILDVERSION)

            if tt_changed:
                logging.info('Detected new Translate Toolkit version: %d.',
                             CODE_TTK_BUILDVERSION)

            logging.info('Running the upgrade machinery...')

            if ptl_changed:
                upgrade('pootle', db_ptl_buildversion, CODE_PTL_BUILDVERSION)

            if tt_changed:
                upgrade('ttk', db_tt_buildversion, CODE_TTK_BUILDVERSION)

            # Perform the option related actions.
            if options['calculate_stats']:
                calculate_stats()

            if options['flush_qc']:
                flush_quality_checks()

            logging.info('Done.')
        else:
            logging.info(
                    'You are already up to date! Current build versions:\n'
                    '- Pootle: %s\n'
                    '- Translate Toolkit: %s',
                CODE_PTL_BUILDVERSION, CODE_TTK_BUILDVERSION,
            )

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Suggestion'
        db.create_table('pootle_app_suggestion', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('unit', self.gf('django.db.models.fields.IntegerField')(db_index=True)),
            ('state', self.gf('django.db.models.fields.CharField')(default='pending', max_length=16, db_index=True)),
            ('creation_time', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, db_index=True, blank=True)),
            ('review_time', self.gf('django.db.models.fields.DateTimeField')(null=True, db_index=True)),
        ))
        db.send_create_signal('pootle_app', ['Suggestion'])

        # Adding model 'Directory'
        db.create_table('pootle_app_directory', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(related_name='child_dirs', null=True, to=orm['pootle_app.Directory'])),
            ('pootle_path', self.gf('django.db.models.fields.CharField')(max_length=255, db_index=True)),
        ))
        db.send_create_signal('pootle_app', ['Directory'])

        # Adding model 'PermissionSet'
        db.create_table('pootle_app_permissionset', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('directory', self.gf('django.db.models.fields.related.ForeignKey')(related_name='permission_sets', to=orm['pootle_app.Directory'])),
        ))
        db.send_create_signal('pootle_app', ['PermissionSet'])

        # Adding M2M table for field positive_permissions on 'PermissionSet'
        db.create_table('pootle_app_permissionset_positive_permissions', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('permissionset', models.ForeignKey(orm['pootle_app.permissionset'], null=False)),
            ('permission', models.ForeignKey(orm['auth.permission'], null=False))
        ))
        db.create_unique('pootle_app_permissionset_positive_permissions', ['permissionset_id', 'permission_id'])

        # Adding M2M table for field negative_permissions on 'PermissionSet'
        db.create_table('pootle_app_permissionset_negative_permissions', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('permissionset', models.ForeignKey(orm['pootle_app.permissionset'], null=False)),
            ('permission', models.ForeignKey(orm['auth.permission'], null=False))
        ))
        db.create_unique('pootle_app_permissionset_negative_permissions', ['permissionset_id', 'permission_id'])


    def backwards(self, orm):
        # Deleting model 'Suggestion'
        db.delete_table('pootle_app_suggestion')

        # Deleting model 'Directory'
        db.delete_table('pootle_app_directory')

        # Deleting model 'PermissionSet'
        db.delete_table('pootle_app_permissionset')

        # Removing M2M table for field positive_permissions on 'PermissionSet'
        db.delete_table('pootle_app_permissionset_positive_permissions')

        # Removing M2M table for field negative_permissions on 'PermissionSet'
        db.delete_table('pootle_app_permissionset_negative_permissions')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_app.permissionset': {
            'Meta': {'unique_together': "(('profile', 'directory'),)", 'object_name': 'PermissionSet'},
            'directory': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'permission_sets'", 'to': "orm['pootle_app.Directory']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'negative_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'permission_sets_negative'", 'symmetrical': 'False', 'to': "orm['auth.Permission']"}),
            'positive_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'related_name': "'permission_sets_positive'", 'symmetrical': 'False', 'to': "orm['auth.Permission']"}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_profile.PootleProfile']"})
        },
        'pootle_app.suggestion': {
            'Meta': {'object_name': 'Suggestion'},
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'review_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '16', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_languages'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'to': "orm['pootle_project.Project']", 'symmetrical': 'False', 'blank': 'True'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['pootle_app']

########NEW FILE########
__FILENAME__ = 0002_add_m2ms
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models, connection

class Migration(SchemaMigration):
    depends_on = (
        ("pootle_translationproject", "0001_initial"),
        ("pootle_profile", "0001_initial"),
    )

    def forwards(self, orm):
        cursor = connection.cursor()
        if "translation_project_id" in [column[0] for column in connection.introspection.get_table_description(cursor, "pootle_app_suggestion")]:
            # skip the migration if it shouldnt be applied
            return

        # Adding field 'Suggestion.translation_project'
        db.add_column('pootle_app_suggestion', 'translation_project',
                      self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['pootle_translationproject.TranslationProject']),
                      keep_default=False)

        # Adding field 'Suggestion.suggester'
        db.add_column('pootle_app_suggestion', 'suggester',
                      self.gf('django.db.models.fields.related.ForeignKey')(related_name='suggester', null=True, to=orm['pootle_profile.PootleProfile']),
                      keep_default=False)

        # Adding field 'Suggestion.reviewer'
        db.add_column('pootle_app_suggestion', 'reviewer',
                      self.gf('django.db.models.fields.related.ForeignKey')(related_name='reviewer', null=True, to=orm['pootle_profile.PootleProfile']),
                      keep_default=False)

        db.add_column('pootle_app_permissionset', 'profile',
                      self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['pootle_profile.PootleProfile']),
                      keep_default=False)

        # Adding unique constraint on 'PermissionSet', fields ['profile', 'directory']
        db.create_unique('pootle_app_permissionset', ['profile_id', 'directory_id'])


    def backwards(self, orm):
        # Removing unique constraint on 'PermissionSet', fields ['profile', 'directory']
        db.delete_unique('pootle_app_permissionset', ['profile_id', 'directory_id'])

        # Deleting field 'Suggestion.translation_project'
        db.delete_column('pootle_app_suggestion', 'translation_project')

        # Deleting field 'Suggestion.suggester'
        db.delete_column('pootle_app_suggestion', 'suggester')

        # Deleting field 'Suggestion.reviewer'
        db.delete_column('pootle_app_suggestion', 'reviewer')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_app.permissionset': {
            'Meta': {'unique_together': "(('profile', 'directory'),)", 'object_name': 'PermissionSet'},
            'directory': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'permission_sets'", 'to': "orm['pootle_app.Directory']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'negative_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'permission_sets_negative'", 'symmetrical': 'False', 'to': "orm['auth.Permission']"}),
            'positive_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'related_name': "'permission_sets_positive'", 'symmetrical': 'False', 'to': "orm['auth.Permission']"}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_profile.PootleProfile']"})
        },
        'pootle_app.suggestion': {
            'Meta': {'object_name': 'Suggestion'},
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'review_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
            'reviewer': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'reviewer'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '16', 'db_index': 'True'}),
            'suggester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suggester'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_translationproject.TranslationProject']"}),
            'unit': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_languages'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'to': "orm['pootle_project.Project']", 'symmetrical': 'False', 'blank': 'True'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['pootle_app']

########NEW FILE########
__FILENAME__ = 0003_auto__add_pootleconfig
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'PootleConfig'
        db.create_table(u'pootle_app_pootleconfig', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('ptl_build', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
            ('ttk_build', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
        ))
        db.send_create_signal('pootle_app', ['PootleConfig'])


    def backwards(self, orm):
        # Deleting model 'PootleConfig'
        db.delete_table(u'pootle_app_pootleconfig')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_app.permissionset': {
            'Meta': {'unique_together': "(('profile', 'directory'),)", 'object_name': 'PermissionSet'},
            'directory': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'permission_sets'", 'to': "orm['pootle_app.Directory']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'negative_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'permission_sets_negative'", 'symmetrical': 'False', 'to': u"orm['auth.Permission']"}),
            'positive_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'related_name': "'permission_sets_positive'", 'symmetrical': 'False', 'to': u"orm['auth.Permission']"}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_profile.PootleProfile']"})
        },
        'pootle_app.pootleconfig': {
            'Meta': {'object_name': 'PootleConfig'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ptl_build': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'ttk_build': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'pootle_app.suggestion': {
            'Meta': {'object_name': 'Suggestion'},
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'review_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
            'reviewer': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'reviewer'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '16', 'db_index': 'True'}),
            'suggester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suggester'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_translationproject.TranslationProject']"}),
            'unit': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': u"orm['pootle_language.Language']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        u'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': u"orm['pootle_tagging.Goal']"})
        },
        u'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fuzzy_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'}),
            'suggestion_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'total_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'})
        },
        u'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': u"orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_app']

########NEW FILE########
__FILENAME__ = 0004_auto__add_pootlesite
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'PootleSite'
        db.create_table(u'pootle_app_pootlesite', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('site', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['sites.Site'], unique=True)),
            ('title', self.gf('django.db.models.fields.CharField')(default='Pootle Demo', max_length=50)),
            ('description', self.gf('pootle.core.markup.fields.MarkupField')(default='', blank=True)),
        ))
        db.send_create_signal('pootle_app', ['PootleSite'])


    def backwards(self, orm):
        # Deleting model 'PootleSite'
        db.delete_table(u'pootle_app_pootlesite')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_app.permissionset': {
            'Meta': {'unique_together': "(('profile', 'directory'),)", 'object_name': 'PermissionSet'},
            'directory': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'permission_sets'", 'to': "orm['pootle_app.Directory']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'negative_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'permission_sets_negative'", 'symmetrical': 'False', 'to': u"orm['auth.Permission']"}),
            'positive_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'related_name': "'permission_sets_positive'", 'symmetrical': 'False', 'to': u"orm['auth.Permission']"}),
            'profile': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_profile.PootleProfile']"})
        },
        'pootle_app.pootleconfig': {
            'Meta': {'object_name': 'PootleConfig'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ptl_build': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
            'ttk_build': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
        },
        'pootle_app.pootlesite': {
            'Meta': {'object_name': 'PootleSite'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'default': "''", 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'site': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['sites.Site']", 'unique': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'default': "'Pootle Demo'", 'max_length': '50'})
        },
        'pootle_app.suggestion': {
            'Meta': {'object_name': 'Suggestion'},
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'review_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
            'reviewer': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'reviewer'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '16', 'db_index': 'True'}),
            'suggester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suggester'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_translationproject.TranslationProject']"}),
            'unit': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': u"orm['pootle_language.Language']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        u'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': u"orm['pootle_tagging.Goal']"})
        },
        u'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fuzzy_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'}),
            'suggestion_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'total_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'})
        },
        u'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': u"orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_app']
########NEW FILE########
__FILENAME__ = directory
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse
from django.db import models
from django.utils.functional import cached_property

from pootle.core.mixins import TreeItem
from pootle.core.url_helpers import get_editor_filter, split_pootle_path
from pootle_misc.baseurl import l


class DirectoryManager(models.Manager):

    def get_query_set(self):
        # ForeignKey fields with null=True are not selected by select_related
        # unless explicitly specified.
        return super(DirectoryManager, self).get_query_set() \
                                            .select_related('parent')

    @cached_property
    def root(self):
        return self.get(pootle_path='/')

    @cached_property
    def projects(self):
        return self.get(pootle_path='/projects/')

    @cached_property
    def goals(self):
        return self.get(pootle_path='/goals/')


class Directory(models.Model, TreeItem):

    name = models.CharField(max_length=255, null=False)
    parent = models.ForeignKey(
        'Directory',
        related_name='child_dirs',
        null=True,
        db_index=True,
    )
    pootle_path = models.CharField(max_length=255, null=False, db_index=True)

    is_dir = True

    objects = DirectoryManager()

    class Meta:
        ordering = ['name']
        app_label = "pootle_app"

    ############################ Properties ###################################

    @property
    def stores(self):
        """Queryset with all descending stores."""
        # Putting the next import at the top of the file causes circular import
        # issues.
        from pootle_store.models import Store

        return Store.objects.filter(pootle_path__startswith=self.pootle_path)

    @property
    def is_template_project(self):
        return self.pootle_path.startswith('/templates/')

    @property
    def is_root(self):
        """Tell if this directory is the root directory."""
        return self.pootle_path == '/'

    @property
    def code(self):
        return self.name.replace('.', '-')

    ############################ Cached properties ############################

    @cached_property
    def path(self):
        """Return just the path part omitting language and project codes.

        If the `pootle_path` of a :cls:`Directory` object `dir` is
        `/af/project/dir1/dir2/file.po`, `dir.path` will return
        `dir1/dir2/file.po`.
        """
        return u'/'.join(self.pootle_path.split(u'/')[3:])

    @cached_property
    def translation_project(self):
        """Return the translation project belonging to this directory."""
        if self.is_language() or self.is_project():
            return None
        elif self.is_translationproject():
            return self.translationproject
        else:
            aux_dir = self
            while (not aux_dir.is_translationproject() and
                   aux_dir.parent is not None):
                aux_dir = aux_dir.parent

            return aux_dir.translationproject

    ############################ Methods ######################################

    def __unicode__(self):
        return self.pootle_path

    def __init__(self, *args, **kwargs):
        super(Directory, self).__init__(*args, **kwargs)

    def save(self, *args, **kwargs):
        if self.parent is not None:
            self.pootle_path = self.parent.pootle_path + self.name + '/'
        else:
            self.pootle_path = '/'

        super(Directory, self).save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        for store in self.stores.iterator():
            store.delete()

        super(Directory, self).delete(*args, **kwargs)

    def get_absolute_url(self):
        return l(self.pootle_path)

    def get_translate_url(self, **kwargs):
        lang, proj, dir, fn = split_pootle_path(self.pootle_path)

        if lang and proj:
            pattern_name = 'pootle-tp-translate'
            pattern_args = [lang, proj, dir, fn]
        elif lang:
            pattern_name = 'pootle-language-translate'
            pattern_args = [lang]
        elif proj:
            pattern_name = 'pootle-project-translate'
            pattern_args = [proj]
        else:
            pattern_name = 'pootle-projects-translate'
            pattern_args = []

        return u''.join([
            reverse(pattern_name, args=pattern_args),
            get_editor_filter(**kwargs),
        ])

    def get_relative(self, path):
        """Given a path of the form a/b/c, where the path is relative
        to this directory, recurse the path and return the object
        (either a Directory or a Store) named 'c'.

        This does not currently deal with .. path components.
        """
        # Putting the next import at the top of the file causes circular import
        # issues.
        from pootle_store.models import Store

        if path not in (None, ''):
            pootle_path = '%s%s' % (self.pootle_path, path)
            try:
                return Directory.objects.get(pootle_path=pootle_path)
            except Directory.DoesNotExist, e:
                try:
                    return Store.objects.get(pootle_path=pootle_path)
                except Store.DoesNotExist:
                    raise e
        else:
            return self

    def get_or_make_subdir(self, child_name):
        return Directory.objects.get_or_create(name=child_name, parent=self)[0]

    ### TreeItem

    def get_children(self):
        result = []
        if self.parent is None:
            # For root directory we are interested in a list of all projects
            # and languages.
            from pootle_language.models import Language
            from pootle_project.models import Project
            result.extend([item for item in Language.objects.iterator()])
            result.extend([item for item in Project.objects.iterator()])
        else:
            #FIXME: can we replace this with a quicker path query?
            result.extend([item for item in self.child_stores.iterator()])
            result.extend([item for item in self.child_dirs.iterator()])
        return result

    def get_parents(self):
        if self.parent:
            if self.parent.is_translationproject():
                return [self.parent.translationproject]
            else:
                return [self.parent]
        else:
            return []

    def _get_next_goal_count(self):
        # Trigger only if it is a regular directory inside a TP.
        if self.pootle_path.count('/') > 3:
            # Putting the next import at the top of the file causes circular
            # import issues.
            from pootle_tagging.models import Goal

            goal = Goal.get_most_important_incomplete_for_path(self)

            if goal is not None:
                return goal.get_incomplete_words_in_path(self)

        return 0

    def get_next_goal_url(self):
        # Trigger only if it is a regular directory inside a TP.
        if self.pootle_path.count('/') > 3:
            # Putting the next import at the top of the file causes circular
            # import issues.
            from pootle_tagging.models import Goal

            goal = Goal.get_most_important_incomplete_for_path(self)

            if goal is not None:
                return goal.get_translate_url_for_path(self.pootle_path,
                                                       state='incomplete')
        return ''

    def get_cachekey(self):
        return self.pootle_path

    ### /TreeItem

    def trail(self, only_dirs=True):
        """Return a list of ancestor directories excluding
        :cls:`~pootle_translationproject.models.TranslationProject` and above.
        """
        path_parts = self.pootle_path.split('/')
        parents = []
        if only_dirs:
            # skip language, and translation_project directories
            start = 4
        else:
            start = 1

        for i in xrange(start, len(path_parts)):
            path = '/'.join(path_parts[:i]) + '/'
            parents.append(path)

        if parents:
            return Directory.objects.filter(pootle_path__in=parents) \
                                    .order_by('pootle_path')

        return Directory.objects.none()

    def is_language(self):
        """Tell if this directory points at a language."""
        return self.pootle_path.count('/') == 2

    def is_project(self):
        """Tell if this directory points at a project."""
        return (self.pootle_path.startswith('/projects/') and
                self.pootle_path.count('/') == 3)

    def is_translationproject(self):
        """Tell if this directory points at a translation project."""
        return (self.pootle_path.count('/') == 3 and not
                self.pootle_path.startswith('/projects/'))

    def get_real_path(self):
        """Return physical filesystem path for directory."""
        if self.is_project():
            return self.project.code

        translation_project = self.translation_project
        if self.is_translationproject():
            return translation_project.real_path

        if translation_project:
            tp_path = translation_project.pootle_path
            path_prefix = self.pootle_path[len(tp_path)-1:-1]
            return translation_project.real_path + path_prefix

########NEW FILE########
__FILENAME__ = permissions
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType
from django.core.cache import cache
from django.db import models
from django.utils.encoding import iri_to_uri

from pootle.core.managers import RelatedManager


def get_permission_contenttype():
    return ContentType.objects.filter(name='pootle', app_label='pootle_app',
                                      model="directory")[0]


def get_pootle_permission(codename):
    # The content type of our permission.
    content_type = get_permission_contenttype()
    # Get the pootle view permission.
    return Permission.objects.get(content_type=content_type, codename=codename)


def get_pootle_permissions(codenames=None):
    """Get the available rights and their localized names."""
    content_type = get_permission_contenttype()

    if codenames is not None:
        permissions = Permission.objects.filter(content_type=content_type,
                                                codename__in=codenames)
    else:
        permissions = Permission.objects.filter(content_type=content_type)

    return dict((permission.codename, permission) for permission in permissions)


def get_permissions_by_username(username, directory):
    pootle_path = directory.pootle_path
    path_parts = filter(None, pootle_path.split('/'))
    key = iri_to_uri('Permissions:%s' % username)
    permissions_cache = cache.get(key, {})

    if pootle_path not in permissions_cache:
        try:
            permissionset = PermissionSet.objects.filter(
                directory__in=directory.trail(only_dirs=False),
                profile__user__username=username) \
                        .order_by('-directory__pootle_path')[0]
        except IndexError:
            permissionset = None

        if (len(path_parts) > 1 and path_parts[0] != 'projects' and
            (permissionset is None or
            len(filter(None, permissionset.directory.pootle_path.split('/'))) < 2)):
                # Active permission at language level or higher, check project
                # level permission.
                try:
                    project_path = '/projects/%s/' % path_parts[1]
                    permissionset = PermissionSet.objects \
                            .get(directory__pootle_path=project_path,
                                 profile__user__username=username)
                except PermissionSet.DoesNotExist:
                    pass

        if permissionset:
            permissions_cache[pootle_path] = permissionset.to_dict()
        else:
            permissions_cache[pootle_path] = None

        cache.set(key, permissions_cache, settings.OBJECT_CACHE_TIMEOUT)

    return permissions_cache[pootle_path]


def get_matching_permissions(profile, directory, check_default=True):
    if profile.user.is_authenticated():
        permissions = get_permissions_by_username(profile.user.username,
                                                  directory)
        if permissions is not None:
            return permissions

        if not check_default:
            return {}

        permissions = get_permissions_by_username('default', directory)
        if permissions is not None:
            return permissions

    permissions = get_permissions_by_username('nobody', directory)

    return permissions


def check_profile_permission(profile, permission_codename, directory,
                             check_default=True):
    """Check if the current user has the permission the perform
    ``permission_codename``."""
    if profile.user.is_superuser:
        return True

    permissions = get_matching_permissions(profile, directory, check_default)

    return ("administrate" in permissions or
            permission_codename in permissions)


def check_permission(permission_codename, request):
    """Check if the current user has `permission_codename`
    permissions.
    """
    if request.user.is_superuser:
        return True

    # `view` permissions are project-centric, and we must treat them
    # differently
    if permission_codename == 'view':
        path_obj = None
        if hasattr(request, 'translation_project'):
            path_obj = request.translation_project
        elif hasattr(request, 'project'):
            path_obj = request.project

        if path_obj is None:
            return True  # Always allow to view language pages

        return path_obj.is_accessible_by(request.user)

    return ("administrate" in request.permissions or
            permission_codename in request.permissions)


class PermissionSet(models.Model):

    profile = models.ForeignKey('pootle_profile.PootleProfile', db_index=True)
    directory = models.ForeignKey(
        'pootle_app.Directory',
        db_index=True,
        related_name='permission_sets',
    )
    positive_permissions = models.ManyToManyField(
        Permission,
        db_index=True,
        related_name='permission_sets_positive',
    )
    # Negative permissions are no longer used, kept around to scheme
    # compatibility with older versions.
    negative_permissions = models.ManyToManyField(
        Permission,
        editable=False,
        related_name='permission_sets_negative',
    )

    objects = RelatedManager()

    class Meta:
        unique_together = ('profile', 'directory')
        app_label = "pootle_app"

    def __unicode__(self):
        return "%s : %s" % (self.profile.user.username,
                            self.directory.pootle_path)

    def to_dict(self):
        permissions_iterator = self.positive_permissions.iterator()
        return dict((perm.codename, perm) for perm in permissions_iterator)

    def save(self, *args, **kwargs):
        super(PermissionSet, self).save(*args, **kwargs)
        # FIXME: can we use `post_save` signals or invalidate caches in
        # model managers, please?
        username = self.profile.user.username
        keys = [
            iri_to_uri('Permissions:%s' % username),
            iri_to_uri('projects:accessible:%s' % username),
        ]
        cache.delete_many(keys)

    def delete(self, *args, **kwargs):
        super(PermissionSet, self).delete(*args, **kwargs)
        # FIXME: can we use `post_delete` signals or invalidate caches in
        # model managers, please?
        username = self.profile.user.username
        keys = [
            iri_to_uri('Permissions:%s' % username),
            iri_to_uri('projects:accessible:%s' % username),
        ]
        cache.delete_many(keys)

########NEW FILE########
__FILENAME__ = pootle_config
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.db import models, DatabaseError


def get_pootle_build(default=0):
    """Get the Pootle build version for the current deployment, if any."""
    try:
        build = PootleConfig.objects.get_current().ptl_build
    except Exception:
        build = 0

    if not build:
        build = get_legacy_ptl_build()

    # We have some code that depends on the build version being not less than a
    # specific value.
    if build < default:
        build = default

    return build


def get_toolkit_build(default=0):
    """Get the Toolkit build version for the current deployment, if any."""
    try:
        build = PootleConfig.objects.get_current().ttk_build
    except Exception:
        build = 0

    if not build:
        build = get_legacy_ttk_build()

    # We have some code that depends on the build version being not less than a
    # specific value.
    if build < default:
        build = default

    return build


def get_legacy_ptl_build():
    """Retrieve a Pootle build version stored using djblets.

    This allows to retrieve build versions stored using the old
    POOTLE_BUILDVERSION or the even older BUILDVERSION.
    """
    from pootle_misc.siteconfig import load_site_config

    try:
        config = load_site_config()
        build = config.get('POOTLE_BUILDVERSION', 0)

        if not build:
            # Ancient Pootle versions used BUILDVERSION instead.
            build = config.get('BUILDVERSION', 0)
    except DatabaseError:
        build = 0

    return int(build)


def get_legacy_ttk_build():
    """Retrieve a Toolkit build version stored using djblets."""
    from pootle_misc.siteconfig import load_site_config

    try:
        config = load_site_config()
        build = int(config.get('TT_BUILDVERSION', 0))
    except DatabaseError:
        build = 0

    return build


class PootleConfigManager(models.Manager):

    def get_current(self):
        """Return the object holding the Pootle configuration."""
        return PootleConfig.objects.all()[0]


class PootleConfig(models.Model):
    """Model to store Pootle configuration on the database.

    The configuration includes some data for install/upgrade mechanisms.
    """
    ptl_build = models.PositiveIntegerField(default=0)
    ttk_build = models.PositiveIntegerField(default=0)

    objects = PootleConfigManager()

    class Meta:
        app_label = "pootle_app"

########NEW FILE########
__FILENAME__ = pootle_site
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.contrib.sites.models import Site
from django.db import models
from django.utils.translation import ugettext_lazy as _

from pootle.core.markup import get_markup_filter_name, MarkupField


def get_site_title():
    try:
        pootle_site = PootleSite.objects.get_current()
        return pootle_site.title
    except Exception:
        return PootleSite._meta.get_field('title').default


def get_site_description():
    try:
        pootle_site = PootleSite.objects.get_current()
        return pootle_site.description
    except Exception:
        return PootleSite._meta.get_field('description').default


def get_legacy_site_title():
    """Retrieve the site title from the database as stored by djblets."""
    from pootle_misc.siteconfig import load_site_config

    siteconfig = load_site_config()
    return siteconfig.get('TITLE')


def get_legacy_site_description():
    """Retrieve the site description from the database as stored by djblets."""
    from pootle_misc.siteconfig import load_site_config

    siteconfig = load_site_config()
    return siteconfig.get('DESCRIPTION')


class PootleSiteManager(models.Manager):

    def get_current(self):
        """Return the site configuration for the current Pootle site."""
        return PootleSite.objects.get(site=Site.objects.get_current())


class PootleSite(models.Model):
    """Model to store each specific Pootle site configuration.

    The configuration includes some data for install/upgrade mechanisms.
    """
    site = models.OneToOneField(Site, editable=False)
    title = models.CharField(
        max_length=50,
        blank=False,
        default="Pootle Demo",
        verbose_name=_("Title"),
        help_text=_("The name for this Pootle server"),
    )
    description = MarkupField(
        blank=True,
        default='',
        verbose_name=_("Description"),
        help_text=_("The description and instructions shown on the about "
                    "page. Allowed markup: %s", get_markup_filter_name()),
    )

    objects = PootleSiteManager()

    class Meta:
        app_label = "pootle_app"

########NEW FILE########
__FILENAME__ = signals
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.dispatch import Signal


post_file_upload = Signal(providing_args=["user", "oldstats", "newstats",
                                          "archive"])
post_template_update = Signal()
post_vc_commit = Signal(providing_args=["store", "user", "success"])
post_vc_update = Signal()

########NEW FILE########
__FILENAME__ = suggestion
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.db import models
from django.utils.translation import ugettext_lazy as _

from pootle.core.managers import RelatedManager


class Suggestion(models.Model):

    unit = models.IntegerField(null=False, db_index=True)
    translation_project = models.ForeignKey(
        'pootle_translationproject.TranslationProject',
        db_index=True,
    )
    state = models.CharField(
        max_length=16,
        default='pending',
        null=False,
        choices=[
            ('pending', _('Pending')),
            ('accepted', _('Accepted')),
            ('rejected', _('Rejected')),
        ],
        db_index=True,
    )
    suggester = models.ForeignKey(
        'pootle_profile.PootleProfile',
        null=True,
        related_name='suggester',
        db_index=True,
    )
    creation_time = models.DateTimeField(auto_now_add=True, db_index=True)
    reviewer = models.ForeignKey(
        'pootle_profile.PootleProfile',
        null=True,
        related_name='reviewer',
        db_index=True,
    )
    review_time = models.DateTimeField(null=True, db_index=True)

    objects = RelatedManager()

    class Meta:
        app_label = "pootle_app"

########NEW FILE########
__FILENAME__ = project_tree
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import logging
import os
import re
import shutil

from translate.lang import data as langdata

from pootle_app.models.directory import Directory
from pootle_language.models import Language
from pootle_store.models import Store, PARSED
from pootle_store.util import absolute_real_path, add_trailing_slash


#: Case insensitive match for language codes
LANGCODE_RE = re.compile('^[a-z]{2,3}([_-][a-z]{2,3})?(@[a-z0-9]+)?$',
                         re.IGNORECASE)
#: Case insensitive match for language codes as postfix
LANGCODE_POSTFIX_RE = re.compile('^.*?[-_.]([a-z]{2,3}([_-][a-z]{2,3})?(@[a-z0-9]+)?)$',
                                 re.IGNORECASE)


def language_match_filename(language_code, filename):
    name, ext = os.path.splitext(os.path.basename(filename))
    return langdata.languagematch(language_code, name)


def direct_language_match_filename(language_code, path_name):
    name, ext = os.path.splitext(os.path.basename(path_name))
    if name == language_code or name.lower() == language_code.lower():
        return True

    # Check file doesn't match another language.
    if Language.objects.filter(code__iexact=name).count():
        return False

    detect = LANGCODE_POSTFIX_RE.split(name)
    return (len(detect) > 1 and
            (detect[1] == language_code or
             detect[1].lower() == language_code.lower()))


def match_template_filename(project, filename):
    """Test if :param:`filename` might point at a template file for a given
    :param:`project`.
    """
    name, ext = os.path.splitext(os.path.basename(filename))

    #FIXME: is the test for matching extension redundant?
    if ext == os.path.extsep + project.get_template_filetype():
        if ext != os.path.extsep + project.localfiletype:
            # Template extension is distinct, surely file is a template.
            return True
        elif not find_lang_postfix(filename):
            # File name can't possibly match any language, assume it is a
            # template.
            return True

    return False


def get_matching_language_dirs(project_dir, language):
    return [lang_dir for lang_dir in os.listdir(project_dir)
            if language.code == lang_dir]


def get_non_existant_language_dir(project_dir, language, file_style, make_dirs):
    if file_style == "gnu":
        return project_dir
    elif make_dirs:
        language_dir = os.path.join(project_dir, language.code)
        os.mkdir(language_dir)
        return language_dir
    else:
        raise IndexError("Directory not found for language %s, project %s" %
                         (language.code, project_dir))


def get_or_make_language_dir(project_dir, language, file_style, make_dirs):
    matching_language_dirs = get_matching_language_dirs(project_dir, language)
    if len(matching_language_dirs) == 0:
        # If no matching directories can be found, check if it is a GNU-style
        # project.
        return get_non_existant_language_dir(project_dir, language, file_style,
                                             make_dirs)
    else:
        return os.path.join(project_dir, matching_language_dirs[0])


def get_language_dir(project_dir, language, file_style, make_dirs):
    language_dir = os.path.join(project_dir, language.code)
    if not os.path.exists(language_dir):
        return get_or_make_language_dir(project_dir, language, file_style,
                                        make_dirs)
    else:
        return language_dir


def get_translation_project_dir(language, project_dir, file_style,
                                make_dirs=False):
    """Returns the base directory containing translations files for the
    project.

    :param make_dirs: if ``True``, project and language directories will be
                      created as necessary.
    """
    if file_style == 'gnu':
        return project_dir
    else:
        return get_language_dir(project_dir, language, file_style, make_dirs)


def is_hidden_file(path):
    return path[0] == '.'


def split_files_and_dirs(ignored_files, ext, real_dir, file_filter):
    files = []
    dirs = []
    for child_path in [child_path for child_path in os.listdir(real_dir)
                       if child_path not in ignored_files and
                       not is_hidden_file(child_path)]:
        full_child_path = os.path.join(real_dir, child_path)
        if (os.path.isfile(full_child_path) and
            full_child_path.endswith(ext) and file_filter(full_child_path)):
            files.append(child_path)
        elif os.path.isdir(full_child_path):
            dirs.append(child_path)

    return files, dirs


def recursive_files_and_dirs(ignored_files, ext, real_dir, file_filter):
    """Traverses :param:`real_dir` searching for files and directories.

    :param ignored_files: List of files that will be ignored.
    :param ext: Only files ending with this extension will be considered.
    :param real_dir:
    :param file_filter: Filtering function applied to the list of files found.
    :return: A tuple of lists of files and directories found when traversing the
        given path and after applying the given restrictions.
    """
    real_dir = add_trailing_slash(real_dir)
    files = []
    dirs = []

    for _path, _dirs, _files in os.walk(real_dir, followlinks=True):
        # Make it relative:
        _path = _path[len(real_dir):]
        files += [os.path.join(_path, f) for f in filter(file_filter, _files)
                  if f.endswith(ext) and f not in ignored_files]

        # Edit _dirs in place to avoid further recursion into hidden directories
        for d in _dirs:
            if is_hidden_file(d):
                _dirs.remove(d)

        dirs += _dirs

    return files, dirs


def add_items(fs_items, db_items, create_db_item):
    """Add/remove the database items to correspond to the filesystem.

    :param fs_items: entries currently in the filesystem
    :param db_items: entries currently in the database
    :create_db_item: callable that will create a new db item with a given name
    :return: list of all items, list of newly added items
    :rtype: tuple
    """
    items = []
    new_items = []
    fs_items_set = set(fs_items)
    db_items_set = set(db_items)

    items_to_delete = db_items_set - fs_items_set
    items_to_create = fs_items_set - db_items_set

    for name in items_to_delete:
        db_items[name].delete()

    for name in db_items_set - items_to_delete:
        items.append(db_items[name])

    for name in items_to_create:
        item = create_db_item(name)
        items.append(item)
        new_items.append(item)
        try:
            item.save()
        except Exception:
            logging.exception('Error while adding %s', item)
    return items, new_items


def add_files(translation_project, ignored_files, ext, relative_dir, db_dir,
              file_filter=lambda _x: True):
    from pootle_misc import versioncontrol
    podir_path = versioncontrol.to_podir_path(relative_dir)
    files, dirs = split_files_and_dirs(ignored_files, ext, podir_path,
                                       file_filter)
    file_set = set(files)
    dir_set = set(dirs)

    existing_stores = dict((store.name, store) for store in
                           db_dir.child_stores.exclude(file='').iterator())
    existing_dirs = dict((dir.name, dir) for dir in
                         db_dir.child_dirs.iterator())
    files, new_files = add_items(file_set, existing_stores,
              lambda name: Store(file=os.path.join(relative_dir, name),
                                 parent=db_dir,
                                 name=name,
                                 translation_project=translation_project))

    db_subdirs, new_db_subdirs = add_items(dir_set, existing_dirs,
                           lambda name: Directory(name=name, parent=db_dir))

    for db_subdir in db_subdirs:
        fs_subdir = os.path.join(relative_dir, db_subdir.name)
        _files, _new_files = add_files(translation_project, ignored_files, ext,
                                       fs_subdir, db_subdir, file_filter)
        files += _files
        new_files += _new_files

    return files, new_files


def sync_from_vcs(ignored_files, ext, relative_dir,
                  file_filter=lambda _x: True):
    """Recursively synchronise the PO directory from the VCS directory.

    This brings over files from VCS, and removes files in PO directory that
    were removed in VCS.
    """
    from pootle_misc import versioncontrol
    if not versioncontrol.hasversioning(relative_dir):
        return

    podir_path = versioncontrol.to_podir_path(relative_dir)
    vcs_path = versioncontrol.to_vcs_path(relative_dir)
    vcs_files, vcs_dirs = recursive_files_and_dirs(ignored_files, ext,
                                                   vcs_path, file_filter)
    files, dirs = recursive_files_and_dirs(ignored_files, ext, podir_path,
                                           file_filter)

    vcs_file_set = set(vcs_files)
    vcs_dir_set = set(vcs_dirs)
    file_set = set(files)
    dir_set = set(dirs)

    for d in vcs_dir_set - dir_set:
        new_path = os.path.join(podir_path, d)
        os.makedirs(new_path)

    # copy into podir
    for f in vcs_file_set - file_set:
        vcs_f = os.path.join(vcs_path, f)
        new_path = os.path.join(podir_path, f)
        shutil.copy2(vcs_f, new_path)

    # remove from podir
    #TODO: review this carefully, as we are now deleting stuff
    for f in file_set - vcs_file_set:
        remove_path = os.path.join(podir_path, f)
        os.remove(remove_path)

    for d in dir_set - vcs_dir_set:
        remove_path = os.path.join(podir_path, d)
        shutil.rmtree(remove_path)


def find_lang_postfix(filename):
    """Finds the language code at end of a filename."""
    name = os.path.splitext(os.path.basename(filename))[0]
    if LANGCODE_RE.match(name):
        return name

    match = LANGCODE_POSTFIX_RE.match(name)
    if match:
        return match.groups()[0]

    for code in Language.objects.values_list('code', flat=True):
        if (name.endswith('-'+code) or name.endswith('_'+code) or
            name.endswith('.'+code) or
            name.lower().endswith('-'+code.lower()) or
            name.endswith('_'+code) or name.endswith('.'+code)):
            return code


def translation_project_should_exist(language, project):
    """Tests if there are translation files corresponding to the given
    :param:`language` and :param:`project`.
    """
    if project.get_treestyle() == "gnu":
        # GNU style projects are tricky

        if language.code == 'templates':
            # Language is template look for template files
            for dirpath, dirnames, filenames in os.walk(project.get_real_path()):
                for filename in filenames:
                    if project.file_belongs_to_project(filename, match_templates=True) and \
                           match_template_filename(project, filename):
                        return True
        else:
            # find files with the language name in the project dir
            for dirpath, dirnames, filenames in os.walk(project.get_real_path()):
                for filename in filenames:
                    #FIXME: don't reuse already used file
                    if project.file_belongs_to_project(filename, match_templates=False) and \
                           direct_language_match_filename(language.code, filename):
                        return True
    else:
        # find directory with the language name in the project dir
        try:
            dirpath, dirnames, filename = os.walk(project.get_real_path()).next()
            if language.code in dirnames:
                return True
        except StopIteration:
            pass

    return False


def get_extension(language, project):
    """File extension used for this project, returns pot if it's a po project
    and language is templates.
    """
    ext = project.localfiletype
    if language.code == 'templates' and ext == 'po':
        return 'pot'
    else:
        return ext


def ensure_target_dir_exists(target_path):
    target_dir = os.path.dirname(target_path)
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)


def read_original_target(target_path):
    try:
        return open(target_path, "rb")
    except:
        return None


def convert_template(translation_project, template_store, target_pootle_path,
                     target_path, monolingual=False):
    """Run pot2po to update or initialize the file on `target_path` with
    `template_store`.
    """

    ensure_target_dir_exists(target_path)

    if template_store.file:
        template_file = template_store.file.store
    else:
        template_file = template_store

    try:
        store = Store.objects.get(pootle_path=target_pootle_path)

        if monolingual and store.state < PARSED:
            #HACKISH: exploiting update from templates to parse monolingual files
            store.update(store=template_file)
            store.update(update_translation=True)
            return

        if not store.file or monolingual:
            original_file = store
        else:
            original_file = store.file.store
    except Store.DoesNotExist:
        original_file = None
        store = None

    from translate.convert import pot2po
    from pootle_store.filetypes import factory_classes
    output_file = pot2po.convert_stores(template_file, original_file,
                                        fuzzymatching=False,
                                        classes=factory_classes)
    if template_store.file:
        if store:
            store.update(update_structure=True, update_translation=True,
                         store=output_file, fuzzy=True)
        output_file.settargetlanguage(translation_project.language.code)
        output_file.savefile(target_path)
    elif store:
        store.mergefile(output_file, None, allownewstrings=True,
                        suggestions=False, notranslate=False,
                        obsoletemissing=True)
    else:
        output_file.translation_project = translation_project
        output_file.name = template_store.name
        output_file.parent = translation_project.directory
        output_file.state = PARSED
        output_file.save()

    # pot2po modifies its input stores so clear caches is needed
    if template_store.file:
        template_store.file._delete_store_cache()
    if store and store.file:
        store.file._delete_store_cache()


def get_translated_name_gnu(translation_project, store):
    """Given a template :param:`store` and a :param:`translation_project` return
    target filename.
    """
    pootle_path_parts = store.pootle_path.split('/')
    pootle_path_parts[1] = translation_project.language.code
    pootle_path = '/'.join(pootle_path_parts[:-1])
    if not pootle_path.endswith('/'):
        pootle_path = pootle_path + '/'

    suffix = translation_project.language.code + os.extsep + \
             translation_project.project.localfiletype
    # try loading file first
    try:
        target_store = translation_project.stores.get(
                parent__pootle_path=pootle_path,
                name__iexact=suffix,
        )
        return (target_store.pootle_path,
                target_store.file and target_store.file.path)
    except Store.DoesNotExist:
        target_store = None

    # is this GNU-style with prefix?
    use_prefix = store.parent.child_stores.exclude(file="").count() > 1 or \
                 translation_project.stores.exclude(name__iexact=suffix).exclude(file="").count()
    if not use_prefix:
        # let's make sure
        for tp in translation_project.project.translationproject_set.exclude(language__code='templates').iterator():
            temp_suffix = tp.language.code + os.extsep + translation_project.project.localfiletype
            if tp.stores.exclude(name__iexact=temp_suffix).exclude(file="").count():
                use_prefix = True
                break

    if use_prefix:
        if store.translation_project.language.code == 'templates':
            tprefix = os.path.splitext(store.name)[0]
            #FIXME: we should detect seperator
            prefix = tprefix + '-'
        else:
            prefix = os.path.splitext(store.name)[0][:-len(store.translation_project.language.code)]
            tprefix = prefix[:-1]

        try:
            target_store = translation_project.stores.filter(
                    parent__pootle_path=pootle_path,
                    name__in=[
                        tprefix + '-' + suffix,
                        tprefix + '_' + suffix,
                        tprefix + '.' + suffix,
                        tprefix + '-' + suffix.lower(),
                        tprefix + '_' + suffix.lower(),
                        tprefix + '.' + suffix.lower(),
                    ],
            )[0]

            return (target_store.pootle_path,
                    target_store.file and target_store.file.path)
        except (Store.DoesNotExist, IndexError):
            pass
    else:
        prefix = ""

    if store.file:
        path_parts = store.file.path.split(os.sep)
        name = prefix + suffix
        path_parts[-1] =  name
        pootle_path_parts[-1] = name
    else:
        path_parts = store.parent.get_real_path().split(os.sep)
        path_parts.append(store.name)

    return '/'.join(pootle_path_parts), os.sep.join(path_parts)


def get_translated_name(translation_project, store):
    name, ext = os.path.splitext(store.name)

    if store.file:
        path_parts = store.file.name.split(os.sep)
    else:
        path_parts = store.parent.get_real_path().split(os.sep)
        path_parts.append(store.name)

    pootle_path_parts = store.pootle_path.split('/')

    # Replace language code
    path_parts[1] = translation_project.language.code
    pootle_path_parts[1] = translation_project.language.code

    # Replace extension
    path_parts[-1] = name + '.' + translation_project.project.localfiletype
    pootle_path_parts[-1] = name + '.' + \
                            translation_project.project.localfiletype

    return ('/'.join(pootle_path_parts),
            absolute_real_path(os.sep.join(path_parts)))

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import include, patterns, url


urlpatterns = patterns('',
    url(r'^admin',
        include('pootle_app.views.admin.urls')),
    url(r'',
        include('pootle_app.views.index.urls')),
)

########NEW FILE########
__FILENAME__ = adminlanguages
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse

from pootle.core.decorators import admin_required
from pootle_app.forms import LanguageAdminForm
from pootle_app.views.admin import util
from pootle_language.models import Language


@admin_required
def view(request):

    def generate_link(language):
        url = reverse('pootle-language-admin-permissions',
                      args=[language.code])
        return '<a href="%s">%s</a>' % (url, language)

    return util.edit(request, 'admin/languages.html', Language,
                     link=generate_link, form=LanguageAdminForm,
                     exclude='description', can_delete=True)

########NEW FILE########
__FILENAME__ = adminpages
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#  Copyright 2006-2014 Zuza Software Foundation
#  Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/>.

from django.shortcuts import render

from pootle.core.decorators import admin_required
from pootle_app.forms import GeneralSettingsForm
from pootle_app.models.pootle_site import PootleSite


@admin_required
def view(request):
    site = PootleSite.objects.get_current()

    if request.POST:
        setting_form = GeneralSettingsForm(data=request.POST, instance=site)

        if setting_form.is_valid():
            setting_form.save()
    else:
        setting_form = GeneralSettingsForm(instance=site)

    ctx = {
        'form': setting_form,
    }
    return render(request, "admin/settings.html", ctx)

########NEW FILE########
__FILENAME__ = adminprojects
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import forms
from django.core.exceptions import ValidationError
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _

from pootle.core.decorators import admin_required
from pootle_app.views.admin import util
from pootle_language.models import Language
from pootle_project.models import Project, RESERVED_PROJECT_CODES
from pootle_store.models import Store


@admin_required
def view(request):
    queryset = Language.objects.exclude(code='templates')
    try:
        default_lang = Language.objects.get(code='en')
    except Language.DoesNotExist:
        default_lang = queryset[0]


    class ProjectForm(forms.ModelForm):

        source_language = forms.ModelChoiceField(
            label=_('Source Language'),
            initial=default_lang.pk,
            queryset=queryset,
        )

        class Meta:
            model = Project

        def __init__(self, *args, **kwargs):
            super(ProjectForm, self).__init__(*args, **kwargs)
            if self.instance.id:
                has_stores = Store.objects.filter(
                        translation_project__project=self.instance
                    ).count
                if has_stores:
                    self.fields['localfiletype'].widget.attrs['disabled'] = True
                    self.fields['localfiletype'].required = False
                if (self.instance.treestyle != 'auto' and
                    self.instance.translationproject_set.count() and
                    self.instance.treestyle ==
                        self.instance._detect_treestyle()):
                    self.fields['treestyle'].widget.attrs['disabled'] = True
                    self.fields['treestyle'].required = False
            self.fields['checkstyle'].widget.attrs['class'] = \
                "js-select2 select2-checkstyle"
            self.fields['localfiletype'].widget.attrs['class'] = \
                "js-select2 select2-localfiletype"
            self.fields['treestyle'].widget.attrs['class'] = \
                "js-select2 select2-treestyle"
            self.fields['source_language'].widget.attrs['class'] = \
                "js-select2 select2-language"

        def clean_localfiletype(self):
            value = self.cleaned_data.get('localfiletype', None)
            if not value:
                value = self.instance.localfiletype
            return value

        def clean_treestyle(self):
            value = self.cleaned_data.get('treestyle', None)
            if not value:
                value = self.instance.treestyle
            return value

        def clean_code(self):
            value = self.cleaned_data['code']
            if value in RESERVED_PROJECT_CODES:
                raise ValidationError(_('"%s" cannot be used as a project '
                                        'code' % value))
            return value

    def generate_link(project):
        url = reverse('pootle-project-admin-languages', args=[project.code])
        return '<a href="%s">%s</a>' % (url, project.code)

    return util.edit(
            request,
            'admin/projects.html',
            Project,
            link=generate_link,
            form=ProjectForm,
            exclude=('description', 'report_email'),
            can_delete=True,
    )

########NEW FILE########
__FILENAME__ = adminroot
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from pootle.core.decorators import admin_required
from pootle_app.models.directory import Directory
from pootle_app.views.admin.permissions import admin_permissions


@admin_required
def view(request):
    directory = Directory.objects.root
    ctx = {
        'directory': directory,
    }
    return admin_permissions(request, directory, "admin/permissions.html", ctx)

########NEW FILE########
__FILENAME__ = adminusers
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of translate.
#
# translate is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with translate; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from django import forms
from django.contrib.auth.models import User
from django.forms.models import BaseModelFormSet
from django.utils.translation import ugettext as _

from pootle.core.decorators import admin_required
from pootle_app.views.admin import util


@admin_required
def view(request):
    fields = ('username', 'first_name', 'last_name', 'email', 'is_active',
              'is_superuser')
    queryset = User.objects.hide_defaults().order_by('username')
    return util.edit(request, 'admin/users.html', User, fields=fields,
                     formset=BaseUserFormSet, queryset=queryset,
                     can_delete=True)


class BaseUserFormSet(BaseModelFormSet):
    """This formset deals with user admininistration. We have to add a
    password field so that the passwords of users can be set.

    We override the save_existing and save_new formset methods so that
    we can 1) yank out the password field before the formset attempts
    to save the field 'set_password' (which would fail anyway, since
    the User model has no such field) and 2) set the password for an
    object once it has been saved.
    """

    def add_fields(self, form, index):
        super(BaseUserFormSet, self).add_fields(form, index)
        form.fields["set_password"] = forms.CharField(required=False, label=_("Password"), widget=forms.PasswordInput())

    def del_field(self, form):
        password = form['set_password'].data
        del form.fields['set_password']
        return password

    def save_extra(self, instance, password, commit=True):
        """process fields that require behavior different from model default"""
        changed = False
        # don't store plain text password, use set_password method to
        # set encrypted password
        if password != '':
            instance.set_password(password)
            changed = True
        # no point in seperating admin rights from access to
        # django_admin, make sure the two bits are in synch
        if instance.is_staff != instance.is_superuser:
            instance.is_staff = instance.is_superuser
            changed = True

        if commit and changed:
            instance.save()

        return instance

    def save_existing(self, form, instance, commit=True):
        password = self.del_field(form)
        return self.save_extra(super(BaseUserFormSet, self).save_existing(form, instance, commit), password, commit)

    def save_new(self, form, commit=True):
        password = self.del_field(form)
        return self.save_extra(super(BaseUserFormSet, self).save_new(form, commit), password, commit)

########NEW FILE########
__FILENAME__ = dashboard
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import json
import locale
import os

from django.conf import settings
from django.contrib.auth.models import User
from django.core.cache import cache
from django.http import HttpResponse
from django.shortcuts import render
from django.utils.translation import ugettext as _

from pootle import depcheck
from pootle.core.decorators import admin_required
from pootle.core.markup import get_markup_filter
from pootle_app.models import Suggestion as SuggestionStat
from pootle_misc.aggregate import sum_column
from pootle_profile.models import PootleProfile
from pootle_statistics.models import Submission
from pootle_store.models import Unit, Suggestion
from pootle_store.util import TRANSLATED


def required_depcheck():
    required = []

    status, version = depcheck.test_translate()
    if status:
        text = _('Translate Toolkit version %s installed.', version)
        state = 'tick'
    else:
        trans_vars = {
            'installed': version,
            'required': ".".join([str(i) for i in
                                  depcheck.TTK_MINIMUM_REQUIRED_VERSION]),
        }
        text = _("Translate Toolkit version %(installed)s installed. Pootle "
                 "requires at least version %(required)s.", trans_vars)
        state = 'error'

    required.append({
        'dependency': 'translate',
        'state': state,
        'text': text,
    })

    status, version = depcheck.test_django()
    if status:
        text = _('Django version %s is installed.', version)
        state = 'tick'
    else:
        trans_vars = {
            'installed': version,
            'required': ".".join([str(i) for i in
                                  depcheck.DJANGO_MINIMUM_REQUIRED_VERSION]),
        }
        text = _("Django version %(installed)s is installed. Pootle requires "
                 "at least version %(required)s.", trans_vars)
        state = 'error'

    required.append({
        'dependency': 'django',
        'state': state,
        'text': text,
    })

    status, version = depcheck.test_lxml()
    if status:
        text = _('lxml version %s is installed.', version)
        state = 'tick'
    elif version is not None:
        trans_vars = {
            'installed': version,
            'required': ".".join([str(i) for i in
                                  depcheck.LXML_MINIMUM_REQUIRED_VERSION]),
        }
        text = _("lxml version %(installed)s is installed. Pootle requires at "
                 "least version %(required)s.", trans_vars)
        state = 'error'
    else:
        text = _('lxml is not installed. Pootle requires lxml.')
        state = 'error'

    required.append({
        'dependency': 'lxml',
        'state': state,
        'text': text,
    })

    return required


def optional_depcheck():
    optional = []

    if not depcheck.test_unzip():
        optional.append({
            'dependency': 'unzip',
            'text': _('Can\'t find the unzip command. Uploading archives is '
                      'faster if "unzip" is available.')
        })
    if not depcheck.test_iso_codes():
        optional.append({
            'dependency': 'iso-codes',
            'text': _("Can't find the ISO codes package. Pootle uses ISO codes"
                      " to translate language names.")
        })
    if not depcheck.test_gaupol():
        optional.append({
            'dependency': 'gaupol',
            'text': _("Can't find the aeidon package. Pootle requires Gaupol "
                      "or aeidon to support subtitle formats.")
        })
    if not depcheck.test_levenshtein():
        optional.append({
            'dependency': 'levenshtein',
            'text': _("Can't find python-levenshtein package. Updating against"
                      " templates is faster with python-levenshtein.")
        })
    if not depcheck.test_indexer():
        optional.append({
            'dependency': 'indexer',
            'text': _("No text indexing engine found. Searching is faster if "
                      "an indexing engine like Xapian or Lucene is installed.")
        })

    filter_name, filter_args = get_markup_filter()
    if filter_name is None:
        text = None
        if filter_args == 'missing':
            text = _("MARKUP_FILTER is missing. Falling back to HTML.")
        elif filter_args == 'misconfigured':
            text = _("MARKUP_FILTER is misconfigured. Falling back to HTML.")
        elif filter_args == 'uninstalled':
            text = _("Can't find the package which provides '%s' markup "
                     "support. Falling back to HTML.",
                     settings.MARKUP_FILTER[0])
        elif filter_args == 'invalid':
            text = _("Invalid value '%s' in MARKUP_FILTER. Falling back to "
                     "HTML.", settings.MARKUP_FILTER[0])

        if text is not None:
            optional.append({
                'dependency': filter_args + '-markup',
                'text': text
            })

    return optional


def optimal_depcheck():
    optimal = []

    if not depcheck.test_db():
        if depcheck.test_mysqldb():
            text = _("Using the default sqlite3 database engine. SQLite is "
                     "only suitable for small installations with a small "
                     "number of users. Pootle will perform better with the "
                     "MySQL database engine.")
        else:
            text = _("Using the default sqlite3 database engine. SQLite is "
                     "only suitable for small installations with a small "
                     "number of users. Pootle will perform better with the "
                     "MySQL database engine, but you need to install "
                     "python-MySQLdb first.")
        optimal.append({'dependency': 'db', 'text': text})

    if depcheck.test_cache():
        if depcheck.test_memcache():
            if not depcheck.test_memcached():
                # memcached configured but connection failing
                optimal.append({
                    'dependency': 'cache',
                    'text': _("Pootle is configured to use memcached as a "
                              "caching backend, but can't connect to the "
                              "memcached server. Caching is currently "
                              "disabled.")
                })
            else:
                if not depcheck.test_session():
                    text = _("For optimal performance, use django.contrib."
                             "sessions.backends.cached_db as the session "
                             "engine.")
                    optimal.append({'dependency': 'session', 'text': text})
        else:
            optimal.append({
                'dependency': 'cache',
                'text': _("Pootle is configured to use memcached as caching "
                          "backend, but Python support for memcached is not "
                          "installed. Caching is currently disabled.")
            })
    else:
        optimal.append({
            'dependency': 'cache',
            'text': _("For optimal performance, use memcached as the caching "
                      "backend.")
        })

    if not depcheck.test_webserver():
        optimal.append({
            'dependency': 'webserver',
            'text': _("For optimal performance, use Apache as the webserver.")
        })
    if not depcheck.test_from_email():
        optimal.append({
            'dependency': 'from_email',
            'text': _('The "from" address used to send registration emails is '
                      'not specified. Also review the mail server settings.')
        })
    if not depcheck.test_contact_email():
        optimal.append({
            'dependency': 'contact_email',
            'text': _("No contact address is specified. The contact form will "
                      "allow users to contact the server administrators.")
        })
    if not depcheck.test_debug():
        optimal.append({
            'dependency': 'debug',
            'text': _("Running in debug mode. Debug mode is only needed when "
                      "developing Pootle. For optimal performance, disable "
                      "debugging mode.")
        })

    return optimal


def _format_numbers(dict):
    for k in dict.keys():
        formatted_number = locale.format("%d", dict[k], grouping=True)
        # Under Windows, formatted number must be converted to Unicode
        if os.name == 'nt':
            formatted_number = formatted_number.decode(
                locale.getpreferredencoding()
            )
        dict[k] = formatted_number


def server_stats():
    result = cache.get("server_stats")
    if result is None:
        result = {}
        result['user_count'] = max(User.objects.filter(is_active=True).count()-2, 0)
        # 'default' and 'nobody' might be counted
        # FIXME: the special users should not be retuned with is_active
        result['submission_count'] = Submission.objects.count() + SuggestionStat.objects.count()
        result['pending_count'] = Suggestion.objects.count()
        cache.set("server_stats", result, 86400)
    _format_numbers(result)
    return result


@admin_required
def server_stats_more(request):
    result = cache.get("server_stats_more")
    if result is None:
        result = {}
        unit_query = Unit.objects.filter(state__gte=TRANSLATED).exclude(
            store__translation_project__project__code__in=('pootle', 'tutorial', 'terminology')).exclude(
            store__translation_project__language__code='templates').order_by()
        result['store_count'] = unit_query.values('store').distinct().count()
        result['project_count'] = unit_query.values('store__translation_project__project').distinct().count()
        result['language_count'] = unit_query.values('store__translation_project__language').distinct().count()
        sums = sum_column(unit_query, ('source_wordcount',), count=True)
        result['string_count'] = sums['count']
        result['word_count'] = sums['source_wordcount'] or 0
        result['user_active_count'] = (PootleProfile.objects.exclude(submission=None) |\
                                       PootleProfile.objects.exclude(suggestion=None) |\
                                       PootleProfile.objects.exclude(suggester=None)).order_by().count()
        cache.set("server_stats_more", result, 86400)
    _format_numbers(result)
    stat_strings = {
        'store_count': _('Files'),
        'project_count': _('Active projects'),
        'language_count': _('Active languages'),
        'string_count': _('Translated strings'),
        'word_count': _('Translated words'),
        'user_active_count': _('Active users')
    }
    response = []
    for k in result.keys():
        response.append((stat_strings[k], result[k]))
    response = json.dumps(response)
    return HttpResponse(response, mimetype="application/json")


@admin_required
def view(request):
    ctx = {
        'server_stats': server_stats(),
        'required': required_depcheck(),
        'optional': optional_depcheck(),
        'optimal': optimal_depcheck(),
    }
    return render(request, "admin/dashboard.html", ctx)

########NEW FILE########
__FILENAME__ = permissions
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2012 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pootle is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pootle; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from django import forms
from django.utils.translation import ugettext as _

from pootle_app.models import Directory
from pootle_app.models.permissions import (get_permission_contenttype,
                                           PermissionSet)
from pootle_app.views.admin import util
from pootle_misc.forms import GroupedModelChoiceField
from pootle_profile.models import PootleProfile
from pootle_statistics.models import Submission


class PermissionFormField(forms.ModelMultipleChoiceField):

    def label_from_instance(self, instance):
        return _(instance.name)


def admin_permissions(request, current_directory, template, context):
    project = context.get('project', None)
    language = context.get('language', None)

    # FIXME: Shouldn't we just remove unused permissions from the DB?
    excluded_permissions = [
        'add_directory', 'change_directory', 'delete_directory',
    ]
    # Don't provide means to add `view` permissions under /<lang_code>/*
    # In other words: only allow setting `view` permissions for the root
    # and the `/projects/<code>/` directories
    if language is not None:
        excluded_permissions.append('view')

    content_type = get_permission_contenttype()
    permission_queryset = content_type.permission_set.exclude(
        codename__in=excluded_permissions,
    )

    base_queryset = PootleProfile.objects.filter(user__is_active=1).exclude(
            id__in=current_directory.permission_sets \
                                    .values_list('profile_id', flat=True),
    )
    querysets = [(None, base_queryset.filter(
        user__username__in=('nobody', 'default')
    ))]

    if project is not None:
        if language is not None:
            group_label = _('Translation Project Contributors')
            tp_path = '/%s/%s/' % (language.code, project.code)
            contributions = Submission.objects.filter(
                    translation_project__pootle_path=tp_path,
                )
        else:
            group_label = _('Project Contributors')
            contributions = Submission.objects.filter(
                    translation_project__project__code=project.code,
                )

        querysets.append((
            group_label,
            base_queryset.filter(submission__in=contributions)
                         .distinct()
                         .order_by('user__username'),
        ))

    if language is not None:
        contributions = Submission.objects.filter(
                translation_project__language__code=language.code,
            )
        querysets.append((
            _('Language Contributors'),
            base_queryset.filter(submission__in=contributions)
                         .distinct()
                         .order_by('user__username'),
        ))

    querysets.append((
        _('All Users'),
        base_queryset.exclude(user__username__in=('nobody', 'default'))
                     .order_by('user__username'),
    ))


    class PermissionSetForm(forms.ModelForm):

        class Meta:
            model = PermissionSet

        directory = forms.ModelChoiceField(
                queryset=Directory.objects.filter(pk=current_directory.pk),
                initial=current_directory.pk,
                widget=forms.HiddenInput,
        )
        profile = GroupedModelChoiceField(
                label=_('Username'),
                querysets=querysets,
                queryset=PootleProfile.objects.all(),
                required=True,
                widget=forms.Select(attrs={
                    'class': 'js-select2 select2-username',
                }),
        )
        positive_permissions = PermissionFormField(
                label=_('Permissions'),
                queryset=permission_queryset,
                required=False,
                widget=forms.SelectMultiple(attrs={
                    'class': 'js-select2 select2-multiple',
                    'data-placeholder': _('Select one or more permissions'),
                }),
        )

    link = lambda instance: unicode(instance.profile)
    directory_permissions = current_directory.permission_sets \
                                             .order_by('profile').all()

    return util.edit(request, template, PermissionSet, context, link,
                     linkfield='profile', queryset=directory_permissions,
                     can_delete=True, form=PermissionSetForm)

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import include, patterns, url

import staticpages.urls


urlpatterns = patterns('pootle_app.views.admin',
    url(r'^/?$',
        'dashboard.view',
        name='pootle-admin'),

    url(r'^/pages/',
        include(staticpages.urls.admin_patterns)),

    url(r'^/users/$',
        'adminusers.view',
        name='pootle-admin-users'),
    url(r'^/languages/$',
        'adminlanguages.view',
        name='pootle-admin-languages'),
    url(r'^/projects/$',
        'adminprojects.view',
        name='pootle-admin-projects'),
    url(r'^/permissions/$',
        'adminroot.view',
        name='pootle-admin-permissions'),
    url(r'^/general/$',
        'adminpages.view',
        name='pootle-admin-general'),

    # XHR
    url(r'^/more-stats/$',
        'dashboard.server_stats_more',
        name='pootle-admin-more-stats'),
)

########NEW FILE########
__FILENAME__ = util
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.forms.models import modelformset_factory
from django.forms.util import ErrorList
from django.shortcuts import render
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext as _

from pootle.core.paginator import paginate


def form_set_as_table(formset, link=None, linkfield='code'):
    """Create an HTML table from the formset. The first form in the
    formset is used to obtain a list of the fields that need to be
    displayed. All these fields not appearing in 'exclude' will be
    placed into consecutive columns.

    Errors, if there are any, appear in the row above the form which
    triggered any errors.

    If the forms are based on database models, the order of the
    columns is determined by the order of the fields in the model
    specification."""

    def add_header(result, fields, form):
        result.append('<tr>\n')
        for field in fields:
            widget = form.fields[field].widget
            widget_name = widget.__class__.__name__

            if widget.is_hidden or \
               widget_name in ('CheckboxInput', 'SelectMultiple'):
                result.append('<th class="sorttable_nosort">')
            else:
                result.append('<th>')

            if widget_name in ('CheckboxInput',):
                result.append(form[field].as_widget())
                result.append(form[field].label_tag())
            elif form.fields[field].label is not None and not widget.is_hidden:
                result.append(unicode(form.fields[field].label))

            result.append('</th>\n')
        result.append('</tr>\n')

    def add_footer(result, fields, form):
        result.append('<tr>\n')
        for field in fields:
            field_obj = form.fields[field]
            result.append('<td>')

            if field_obj.label is not None and not field_obj.widget.is_hidden:
                result.append(unicode(field_obj.label))

            result.append('</td>\n')
        result.append('</tr>\n')

    def add_errors(result, fields, form):
        # If the form has errors, then we'll add a table row with the
        # errors.
        if len(form.errors) > 0:
            result.append('<tr>\n')
            for field in fields:
                result.append('<td>')
                result.append(form.errors.get(field, ErrorList()).as_ul())
                result.append('</td>\n')

            result.append('</tr>\n')

    def add_widgets(result, fields, form, link, zebra):
        result.append('<tr class="%s">\n' % zebra)
        for i, field in enumerate(fields):
            result.append('<td class="%s">' % field)
            # Include a hidden element containing the form's id to the
            # first column.
            if i == 0:
                result.append(form['id'].as_hidden())

            # `link` indicates whether we put the first field as a link or as
            # widget
            if field == linkfield and linkfield in form.initial and link:
                if callable(link):
                    result.append(link(form.instance))
                result.append(form[field].as_hidden())
            else:
                result.append(form[field].as_widget())

            result.append('</td>\n')
        result.append('</tr>\n')

    result = []
    try:
        first_form = formset.forms[0]
        # Get the fields of the form, but filter our the 'id' field,
        # since we don't want to print a table column for it.
        fields = [field for field in first_form.fields if field != 'id']

        result.append('<thead>\n')
        add_header(result, fields, first_form)
        result.append('</thead>\n')
        result.append('<tfoot>\n')
        add_footer(result, fields, first_form)
        result.append('</tfoot>\n')

        result.append('<tbody>\n')
        for i, form in enumerate(formset.forms):
            if i % 2:
                zebra = "odd"
            else:
                zebra = "even"

            add_errors(result, fields, form)
            add_widgets(result, fields, form, link, zebra)

        result.append('</tbody>\n')
    except IndexError:
        result.append('<tr>\n')
        result.append('<td>\n')
        result.append(_('No files in this project.'))
        result.append('</td>\n')
        result.append('</tr>\n')

    return u''.join(result)


def process_modelformset(request, model_class, queryset, **kwargs):
    """With the Django model class `model_class` and the given `queryset`,
    construct a formset process its submission."""

    # Create a formset class for the model `model_class` (i.e. it will contain
    # forms whose contents are based on the fields of `model_class`);
    # parameters for the construction of the forms used in the formset should
    # be in kwargs.
    formset_class = modelformset_factory(model_class, **kwargs)

    if queryset is None:
        queryset = model_class.objects.all()

    objects = paginate(request, queryset)

    # If the request is a POST, we want to possibly update our data
    if request.method == 'POST' and request.POST:
        # Create a formset from all the 'model_class' instances whose values
        # will be updated using the contents of request.POST
        formset = formset_class(request.POST, queryset=objects.object_list)

        # Validate all the forms in the formset
        if formset.is_valid():
            # If all is well, Django can save all our data for us
            formset.save()
            return formset, None, objects

        # Otherwise, complain to the user that something went wrong
        return formset, _("There are errors in the form. Please review "
                          "the problems below."), objects

    return formset_class(queryset=objects.object_list), None, objects


def edit(request, template, model_class, ctx={},
         link=None, linkfield='code', queryset=None, **kwargs):
    formset, msg, objects = process_modelformset(request, model_class,
                                                 queryset=queryset, **kwargs)
    ctx.update({
        'formset_text': mark_safe(form_set_as_table(formset, link, linkfield)),
        'formset': formset,
        'objects': objects,
        'error_msg': msg,
    })

    return render(request, template, ctx)

########NEW FILE########
__FILENAME__ = about
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from translate.__version__ import sver as toolkit_version

from django.shortcuts import render

from pootle.__version__ import sver as pootle_version


def view(request):
    ctx = {
        'keywords': [
            'Pootle',
            'locamotion',
            'translate',
            'translation',
            'localisation',
            'localization',
            'l10n',
            'traduction',
            'traduire',
        ],
        'pootle_version': pootle_version,
        'toolkit_version': toolkit_version,
    }
    return render(request, 'about/about.html', ctx)

########NEW FILE########
__FILENAME__ = contributors
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.contrib.auth.models import User
from django.shortcuts import render

from pootle.i18n.gettext import tr_lang
from pootle_app.models import Suggestion
from pootle_language.models import Language
from pootle_project.models import Project
from pootle_statistics.models import Submission
from pootle_translationproject.models import TranslationProject


def view(request):
    """Render a nested list like this::

        contributors = [
          ('french', [
            ('Hackaraus', ['Auser Name', 'username2', ...]),
            ('Project 2', ['username1', 'usernameX', ...]),
            ...
            ]),
          ('spanish', [
            ('Project 1', ['User 1', 'User2', ...]),
            ('Project 2', ['User 1', 'UserX', ...]),
            ...
            ]),
        ]
    """

    exclude_project_names = getattr(
        settings,
        'CONTRIBUTORS_EXCLUDED_PROJECT_NAMES',
        []
    )
    excluded_names = set(getattr(
        settings,
        'CONTRIBUTORS_EXCLUDED_NAMES',
        []
    ))

    user_names = {}  # user id -> name
    _skip_users = set()
    for user in (User.objects.all()
                 .values('id', 'first_name', 'last_name', 'username')):
        if excluded_names:
            names = [user[e] for e in ['username', 'first_name', 'last_name']]
            if set(names) & excluded_names:
                _skip_users.add(user['id'])
                continue
        name = ('%s %s' % (user['first_name'], user['last_name'])).strip()
        if not name:
            name = user['username']
        user_names[user['id']] = name

    language_names = {}  # language id -> name
    for language in Language.objects.all().values('id', 'fullname'):
        language_names[language['id']] = tr_lang(language['fullname'])

    project_names = {}  # project id -> name
    for project in (Project.objects
                    .exclude(fullname__in=exclude_project_names)
                    .values('id', 'fullname')):
        project_names[project['id']] = project['fullname']

    # map users to projects per language across:
    # submitters, suggesters and reviewers
    languages = {}
    tp_to_lang_id = {}
    tp_to_proj_id = {}

    # prepare a map of TranslationProject IDs to
    # language and project to save queries for later
    for tp in (TranslationProject.objects.all()
               .values('id', 'language_id', 'project_id')):
        tp_to_lang_id[tp['id']] = tp['language_id']
        tp_to_proj_id[tp['id']] = tp['project_id']

    for model, user_key in ((Submission, 'submitter_id'),
                            (Suggestion, 'suggester_id'),
                            (Suggestion, 'reviewer_id')):
        for item in (model.objects.all()
                     .values('translation_project_id', user_key)
                     .distinct()):
            lang_id = tp_to_lang_id[item['translation_project_id']]
            proj_id = tp_to_proj_id[item['translation_project_id']]
            user_id = item[user_key]
            if not user_id:  # bad paste on_delete cascades
                continue
            if lang_id not in languages:
                languages[lang_id] = {}
            if proj_id not in languages[lang_id]:
                languages[lang_id][proj_id] = set()
            languages[lang_id][proj_id].add(user_id)

    # finally, turn this massive dict into a list of lists of lists
    # to be used in the template to loop over.
    # also change from IDs to real names
    contributors = []
    for lang_id, projectsmap in languages.items():
        language = language_names[lang_id]
        projects = []
        users = None
        for proj_id, user_ids in projectsmap.items():
            usersset = [user_names[x] for x in user_ids
                                      if x not in _skip_users]
            users = sorted(usersset, lambda x, y: cmp(x.lower(), y.lower()))
            try:
                projectname = project_names[proj_id]
            except KeyError:
                # some legacy broken project or excluded
                continue
            if users:
                projects.append((projectname, users))
        if projects:
            contributors.append((language, projects))
    contributors.sort()

    ctx = {
        'contributors': contributors,
    }

    return render(request, 'about/contributors.html', ctx)

########NEW FILE########
__FILENAME__ = index
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse
from django.shortcuts import redirect

from pootle.i18n.override import get_lang_from_http_header
from pootle_language.models import Language


COOKIE_NAME = 'pootle-language'


def view(request):
    lang = request.COOKIES.get(COOKIE_NAME, None)

    if lang is None:
        supported = dict(Language.live.cached().values_list('code', 'fullname'))
        lang = get_lang_from_http_header(request, supported)

    if lang is not None and lang not in ('projects', ''):
        url = reverse('pootle-language-overview', args=[lang])
    else:
        url = reverse('pootle-projects-overview')

    # Preserve query strings
    args = request.GET.urlencode()
    qs = '?%s' % args if args else ''
    redirect_url = '%s%s' % (url, qs)

    return redirect(redirect_url)

########NEW FILE########
__FILENAME__ = robots
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django.http import HttpResponse
from pootle_language.models import Language


def view(request):
    """generates the robots.txt file"""
    langcodes = [language.code for language in Language.objects.iterator()]
    content = "User-agent: *\n"
    for langcode in langcodes + ["accounts"]:
        content += "Disallow: /%s/\n" % langcode
    return HttpResponse(content, mimetype="text/plain")

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url


urlpatterns = patterns('pootle_app.views.index',
    url(r'^robots.txt$',
        'robots.view',
        name='pootle-robots'),

    url(r'^/?$',
        'index.view',
        name='pootle-home'),

    url(r'^about/$',
        'about.view',
        name='pootle-about'),
    url(r'^about/contributors/$',
        'contributors.view',
        name='pootle-about-contributors'),
)

########NEW FILE########
__FILENAME__ = top_stats
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.contrib.auth.models import User
from django.conf import settings
from django.core.cache import cache
from django.utils.encoding import iri_to_uri

from pootle_misc.aggregate import group_by_sort


def gentopstats_root():
    """
    Generate the top contributor stats to be displayed for an entire
    Pootle installation.
    """
    key = "/:gentopstats"
    result = cache.get(key)
    if result is None:
        top_sugg   = group_by_sort(User.objects.exclude(pootleprofile__suggester=None),
                                   'pootleprofile__suggester', ['username'])[:settings.TOPSTAT_SIZE]
        top_review = group_by_sort(User.objects.exclude(pootleprofile__reviewer=None),
                                   'pootleprofile__reviewer', ['username'])[:settings.TOPSTAT_SIZE]
        top_sub    = group_by_sort(User.objects.exclude(pootleprofile__submission=None),
                                   'pootleprofile__submission', ['username'])[:settings.TOPSTAT_SIZE]
        result = map(None, top_sugg, top_review, top_sub)
        cache.set(key, result, settings.POOTLE_TOP_STATS_CACHE_TIMEOUT)
    return result


def gentopstats_language(language):
    """Generate the top contributor stats to be displayed
    for an entire Pootle installation, a language or a project.
    The output of this function looks something like this:
      {'data':        [],
       'headerlabel': u'Suggestions'},
      {'data':        [],
       'headerlabel': u'Reviews'},
      {'data':        [],
       'headerlabel': u'Submissions'}]
    """
    key = iri_to_uri("%s:gentopstats" % language.pootle_path)
    result = cache.get(key)
    if result is None:
        top_sugg   = group_by_sort(User.objects.filter(pootleprofile__suggester__translation_project__language=language),
                                   'pootleprofile__suggester', ['username'])[:settings.TOPSTAT_SIZE]
        top_review = group_by_sort(User.objects.filter(pootleprofile__reviewer__translation_project__language=language),
                                   'pootleprofile__reviewer', ['username'])[:settings.TOPSTAT_SIZE]
        top_sub    = group_by_sort(User.objects.filter(pootleprofile__submission__translation_project__language=language),
                                   'pootleprofile__submission', ['username'])[:settings.TOPSTAT_SIZE]

        result = map(None, top_sugg, top_review, top_sub)
        cache.set(key, result, settings.POOTLE_TOP_STATS_CACHE_TIMEOUT)
    return result


def gentopstats_project(project):
    """Generate the top contributor stats to be displayed
    for an entire Pootle installation, a language or a project.
    The output of this function looks something like this:
      {'data':        [],
       'headerlabel': u'Suggestions'},
      {'data':        [],
       'headerlabel': u'Reviews'},
      {'data':        [],
       'headerlabel': u'Submissions'}]
    """
    key = iri_to_uri("%s:gentopstats" % project.pootle_path)
    result = cache.get(key)
    if result is None:
        top_sugg   = group_by_sort(User.objects.filter(pootleprofile__suggester__translation_project__project=project),
                                   'pootleprofile__suggester', ['username'])[:settings.TOPSTAT_SIZE]
        top_review = group_by_sort(User.objects.filter(pootleprofile__reviewer__translation_project__project=project),
                                   'pootleprofile__reviewer', ['username'])[:settings.TOPSTAT_SIZE]
        top_sub    = group_by_sort(User.objects.filter(pootleprofile__submission__translation_project__project=project),
                                   'pootleprofile__submission', ['username'])[:settings.TOPSTAT_SIZE]

        result = map(None, top_sugg, top_review, top_sub)
        cache.set(key, result, settings.POOTLE_TOP_STATS_CACHE_TIMEOUT)
    return result


def gentopstats_translation_project(translation_project):
    """Generate the top contributor stats to be displayed
    for an entire Pootle installation, a language or a project.
    The output of this function looks something like this:
      {'data':        [],
       'headerlabel': u'Suggestions'},
      {'data':        [],
       'headerlabel': u'Reviews'},
      {'data':        [],
       'headerlabel': u'Submissions'}]
    """
    key = iri_to_uri("%s:gentopstats" % translation_project.pootle_path)
    result = cache.get(key)
    if result is None:
        top_sugg   = group_by_sort(User.objects.filter(pootleprofile__suggester__translation_project=translation_project),
                                   'pootleprofile__suggester', ['username'])[:settings.TOPSTAT_SIZE]
        top_review = group_by_sort(User.objects.filter(pootleprofile__reviewer__translation_project=translation_project),
                                   'pootleprofile__reviewer', ['username'])[:settings.TOPSTAT_SIZE]
        top_sub    = group_by_sort(User.objects.filter(pootleprofile__submission__translation_project=translation_project),
                                   'pootleprofile__submission', ['username'])[:settings.TOPSTAT_SIZE]

        result = map(None, top_sugg, top_review, top_sub)
        cache.set(key, result, settings.CACHE_MIDDLEWARE_SECONDS)
    return result

########NEW FILE########
__FILENAME__ = signals
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

"""A set of signal handlers for generating automatic notifications on system
events."""

import logging

from pootle_app.models import Directory
from pootle_misc.stats import stats_message_raw
from pootle_notifications.models import Notice
from pootle_profile.models import get_profile


##### Model Events #####

def new_object(created, message, parent):
    if created:
        notice = Notice(directory=parent, message=message)
        notice.save()


def new_language(sender, instance, created=False, raw=False, **kwargs):
    if raw:
        return

    args = {
        'url': instance.get_absolute_url(),
        'language': instance.fullname,
    }
    message = 'New language <a href="%(url)s">%(language)s</a> created.' % args
    new_object(created, message, instance.directory.parent)


def new_project(sender, instance, created=False, raw=False, **kwargs):
    if raw:
        return

    args = {
        'url': instance.get_absolute_url(),
        'project': instance.fullname,
    }
    message = 'New project <a href="%(url)s">%(project)s</a> created.' % args
    new_object(created, message, parent=Directory.objects.root)


def new_user(sender, instance, created=False, raw=False, **kwargs):
    if raw:
        return

    # New user needs to be wrapped in a try block because it might be called
    # before the rest of the models are loaded when first installing Pootle.

    try:
        args = {
            'url': instance.get_profile().get_absolute_url(),
            'user': instance.get_profile(),
        }
        message = 'New user <a href="%(url)s">%(user)s</a> registered.' % args
        new_object(created, message, parent=Directory.objects.root)
    except:
        pass


##### TranslationProject Events #####

def updated_against_template(sender, **kwargs):
    args = {
        'url': sender.get_absolute_url(),
        'sender': sender.fullname,
    }
    message = ('Updated <a href="%(url)s">%(sender)s</a> '
               'to latest template' % args)
    new_object(True, message, sender.directory)


def updated_from_version_control(sender, **kwargs):
    if sender.is_template_project:
        # Add template news to project instead of translation project.
        directory = sender.project.directory
    else:
        directory = sender.directory

    args = {
        'url': sender.get_absolute_url(),
        'sender': sender.fullname,
    }
    message = ('Updated <a href="%(url)s">%(sender)s</a> '
               'from version control' % args)
    new_object(True, message, directory)


def committed_to_version_control(sender, path_obj, user, success, **kwargs):
    args = {
        'user_url': user.get_absolute_url(),
        'user': get_profile(user),
        'path_obj_url': path_obj.get_absolute_url(),
        'path_obj': path_obj.pootle_path,
    }
    message = ('<a href="%(user_url)s">%(user)s</a> committed <a '
               'href="%(path_obj_url)s">%(path_obj)s</a> to version control' %
               args)

    total = path_obj.get_total_wordcount()
    translated = path_obj.get_translated_wordcount()
    fuzzy = path_obj.get_fuzzy_wordcount()
    message = stats_message_raw(message, total, translated, fuzzy)
    new_object(success, message, sender.directory)


def file_uploaded(sender, oldstats, user, newstats, archive, **kwargs):
    if sender.is_template_project:
        # Add template news to project instead of translation project.
        directory = sender.project.directory
    else:
        directory = sender.directory

    if oldstats == newstats:
        logging.debug("file uploaded but stats didn't change")
        return

    args = {
        'user_url': get_profile(user).get_absolute_url(),
        'user': get_profile(user),
        'sender_url': sender.get_absolute_url(),
        'sender': sender.fullname,
    }
    if archive:
        message = ('<a href="%(user_url)s">%(user)s</a> uploaded an archive '
                   'to <a href="%(sender_url)s">%(sender)s</a> <br />' % args)
    else:
        message = ('<a href="%(user_url)s">%(user)s</a> uploaded a file to '
                   '<a href="%(sender_url)s">%(sender)s</a> <br />' % args)

    old_total = oldstats["total"]
    new_total = newstats["total"]
    old_translated = oldstats["translated"]
    new_translated = newstats["translated"]
    old_fuzzy = oldstats["fuzzy"]
    new_fuzzy = newstats["fuzzy"]
    message += stats_message_raw('Before upload', old_total, old_translated,
                                 old_fuzzy) + ' <br />'
    message += stats_message_raw('After upload', new_total, new_translated,
                                 new_fuzzy) + ' <br />'
    new_object(True, message, directory)

########NEW FILE########
__FILENAME__ = forms
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import forms
from django.conf import settings
from django.utils.translation import ugettext_lazy as _

from contact_form.forms import ContactForm

from pootle.core.forms import MathCaptchaForm


class PootleContactForm(MathCaptchaForm, ContactForm):

    subject = forms.CharField(
        max_length=100,
        label=_(u'Summary'),
        widget=forms.TextInput(
            attrs={'placeholder': _('Please enter your message summary')}
        ),
    )

    def __init__(self, *args, **kwargs):
        super(PootleContactForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _(u'Name')
        name_placeholder = _('Please enter your name')
        self.fields['name'].widget.attrs['placeholder'] = name_placeholder

        self.fields['email'].label = _(u'Email address')
        email_placeholder = _('Please enter your email address')
        self.fields['email'].widget.attrs['placeholder'] = email_placeholder

        self.fields['body'].label = _(u'Message')
        body_placeholder = _('Please enter your message')
        self.fields['body'].widget.attrs['placeholder'] = body_placeholder

        self.fields.keyOrder = ['name', 'email', 'subject', 'body',
                                'captcha_answer', 'captcha_token']

        if self.request.user.is_authenticated():
            del self.fields['captcha_answer']
            del self.fields['captcha_token']

    def from_email(self):
        # Pootle customization.
        return u'%s <%s>' % (
            self.cleaned_data['name'],
            self.cleaned_data['email']
        )


class PootleReportForm(PootleContactForm):
    """Contact form used to report errors on strings."""

    report_email = forms.EmailField(
        max_length=254,
        required=False,
        widget=forms.HiddenInput(),
    )

    def __init__(self, *args, **kwargs):
        super(PootleReportForm, self).__init__(*args, **kwargs)
        self.fields.keyOrder += ['report_email']

    def recipient_list(self):
        # Try to report string error to the report email for the project
        # (injected in the 'report_email' field with initial values). If the
        # project doesn't have a report email then fall back to the global
        # string errors report email.
        if self.cleaned_data['report_email']:
            return [self.cleaned_data['report_email']]
        return [settings.POOTLE_REPORT_STRING_ERRORS_EMAIL]

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url

from .views import PootleContactFormView, PootleReportFormView


urlpatterns = patterns('',
    url(r'^$',
        PootleContactFormView.as_view(),
        name='pootle-contact'),
    url(r'report/$',
        PootleReportFormView.as_view(),
        name='pootle-contact-report-error'),
)

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse

from contact_form.views import ContactFormView

from pootle.core.views import AjaxResponseMixin

from .forms import PootleContactForm, PootleReportForm


SUBJECT_TEMPLATE = 'Unit #%d (%s)'
BODY_TEMPLATE = '''
Unit: %s

Source: %s

Current translation: %s

Your question or comment:
'''


class PootleContactFormView(AjaxResponseMixin, ContactFormView):
    form_class = PootleContactForm

    def get_context_data(self, **kwargs):
        # Provide the form action URL to use in the template that renders the
        # contact dialog.
        context = {
            'contact_form_url': reverse('pootle-contact'),
        }
        context.update(kwargs)
        return super(PootleContactFormView, self).get_context_data(**context)

    def get_initial(self):
        initial = super(PootleContactFormView, self).get_initial()

        user = self.request.user
        if user.is_authenticated():
            initial.update({
                'name': user.get_profile().fullname,
                'email': user.email,
            })

        return initial

    def get_success_url(self):
        # XXX: This is unused. We don't need a `/contact/sent/` URL, but
        # the parent :cls:`ContactView` enforces us to set some value here
        return reverse('pootle-contact')


class PootleReportFormView(PootleContactFormView):
    form_class = PootleReportForm

    def get_context_data(self, **kwargs):
        # Provide the form action URL to use in the template that renders the
        # contact dialog.
        context = {
            'contact_form_url': reverse('pootle-contact-report-error'),
        }
        context.update(kwargs)
        return super(PootleReportFormView, self).get_context_data(**context)

    def get_initial(self):
        initial = super(PootleReportFormView, self).get_initial()

        report = self.request.GET.get('report', False)
        if report:
            try:
                from pootle_store.models import Unit
                uid = int(report)
                try:
                    unit = Unit.objects.select_related(
                        'store__translation_project__project',
                    ).get(id=uid)
                    if unit.is_accessible_by(self.request.user):
                        unit_absolute_url = self.request.build_absolute_uri(
                                unit.get_translate_url()
                            )
                        initial.update({
                            'subject': SUBJECT_TEMPLATE % (
                                unit.id,
                                unit.store.translation_project.language.code
                            ),
                            'body': BODY_TEMPLATE % (
                                unit_absolute_url,
                                unit.source,
                                unit.target
                            ),
                            'report_email': unit.store.translation_project \
                                                      .project.report_email,
                        })
                except Unit.DoesNotExist:
                    pass
            except ValueError:
                pass

        return initial

########NEW FILE########
__FILENAME__ = api
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/>.

from tastypie import fields
from tastypie.authentication import BasicAuthentication
from tastypie.authorization import DjangoAuthorization

from pootle.core.api import StatisticsModelResource
from pootle_language.models import Language
from pootle_translationproject.api import TranslationProjectResource


# Lookups that can be used on CharField fields for filtering objects.
TEXT_LOOKUPS = (
    'exact', 'iexact', 'contains', 'icontains', 'startswith', 'istartswith',
    'endswith', 'iendswith',
)


class LanguageResource(StatisticsModelResource):
    translation_projects = fields.ToManyField(TranslationProjectResource,
                                              'translationproject_set')

    class Meta:
        queryset = Language.objects.all()
        resource_name = 'languages'
        fields = [
            'code',
            'description',
            'fullname',
            'nplurals',
            'pluralequation',
            'specialchars',
            'translation_projects',
        ]
        filtering = {
            "code": TEXT_LOOKUPS,
        }
        # HTTP methods allowed for visiting /statistics/ URLs.
        statistics_allowed_methods = ['get']
        authorization = DjangoAuthorization()
        authentication = BasicAuthentication()

    def retrieve_statistics(self, bundle):
        """Retrieve the statistics for the current resource object."""
        return bundle.obj.get_stats()

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import forms

from pootle_language.models import Language


class DescriptionForm(forms.ModelForm):

    class Meta:
        model = Language
        fields = ("description", "specialchars")

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Language'
        db.create_table('pootle_app_language', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('code', self.gf('django.db.models.fields.CharField')(unique=True, max_length=50, db_index=True)),
            ('fullname', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('description_html', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('specialchars', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
            ('nplurals', self.gf('django.db.models.fields.SmallIntegerField')(default=0)),
            ('pluralequation', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
            ('directory', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['pootle_app.Directory'], unique=True)),
        ))
        db.send_create_signal('pootle_language', ['Language'])


    def backwards(self, orm):
        # Deleting model 'Language'
        db.delete_table('pootle_app_language')


    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['pootle_language']
########NEW FILE########
__FILENAME__ = 0002_auto__del_field_language_description_html__chg_field_language_descript
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'Language.description_html'
        db.delete_column('pootle_app_language', 'description_html')


        # Changing field 'Language.description'
        db.alter_column('pootle_app_language', 'description', self.gf('pootle.core.markup.fields.MarkupField')())

    def backwards(self, orm):
        # Adding field 'Language.description_html'
        db.add_column('pootle_app_language', 'description_html',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True),
                      keep_default=False)


        # Changing field 'Language.description'
        db.alter_column('pootle_app_language', 'description', self.gf('django.db.models.fields.TextField')())

    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['pootle_language']
########NEW FILE########
__FILENAME__ = models
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.core.cache import cache
from django.core.urlresolvers import reverse
from django.db import models
from django.utils.translation import ugettext_lazy as _

from pootle.core.managers import RelatedManager
from pootle.core.markup import get_markup_filter_name, MarkupField
from pootle.core.mixins import TreeItem
from pootle.core.url_helpers import get_editor_filter
from pootle.i18n.gettext import tr_lang, language_dir


# FIXME: Generate key dynamically
CACHE_KEY = 'pootle-languages'


class LiveLanguageManager(models.Manager):
    """Manager that only considers `live` languages.

    A live language is any language other than the special `Templates`
    language that have any project with translatable files and is not a
    source language.

    Note that this doesn't inherit from :cls:`RelatedManager`.
    """
    def get_query_set(self):
        return super(LiveLanguageManager, self).get_query_set().filter(
                ~models.Q(code='templates'),
                translationproject__isnull=False,
                project__isnull=True,
            ).distinct()

    def cached(self):
        languages = cache.get(CACHE_KEY)
        if not languages:
            languages = self.all()
            cache.set(CACHE_KEY, languages, settings.OBJECT_CACHE_TIMEOUT)

        return languages

class Language(models.Model, TreeItem):

    code = models.CharField(
        max_length=50,
        null=False,
        unique=True,
        db_index=True,
        verbose_name=_("Code"),
        help_text=_('ISO 639 language code for the language, possibly '
                    'followed by an underscore (_) and an ISO 3166 country '
                    'code. <a href="http://www.w3.org/International/articles/'
                    'language-tags/">More information</a>'),
    )
    fullname = models.CharField(
        max_length=255,
        null=False,
        verbose_name=_("Full Name"),
    )
    description = MarkupField(
        blank=True,
        help_text=_('A description of this language. This is useful to give '
                    'more information or instructions. Allowed markup: %s',
                    get_markup_filter_name()),
    )
    specialchars = models.CharField(
        max_length=255,
        blank=True,
        verbose_name=_("Special Characters"),
        help_text=_('Enter any special characters that users might find '
                    'difficult to type'),
    )
    nplurals = models.SmallIntegerField(
        default=0,
        choices=(
            (0, _('Unknown')), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)
        ),
        verbose_name=_("Number of Plurals"),
        help_text=_('For more information, visit <a href="'
                    'http://docs.translatehouse.org/projects/'
                    'localization-guide/en/latest/l10n/pluralforms.html">our '
                    'page</a> on plural forms.'),
    )
    pluralequation = models.CharField(
        max_length=255,
        blank=True,
        verbose_name=_("Plural Equation"),
        help_text=_('For more information, visit <a href="'
                    'http://docs.translatehouse.org/projects/'
                    'localization-guide/en/latest/l10n/pluralforms.html">our '
                    'page</a> on plural forms.'),
    )
    directory = models.OneToOneField(
        'pootle_app.Directory',
        db_index=True,
        editable=False,
    )

    objects = RelatedManager()
    live = LiveLanguageManager()

    class Meta:
        ordering = ['code']
        db_table = 'pootle_app_language'

    ############################ Properties ###################################

    @property
    def pootle_path(self):
        return '/%s/' % self.code

    @property
    def name(self):
        """Localized fullname for the language."""
        return tr_lang(self.fullname)

    @property
    def direction(self):
        """Return the language direction."""
        return language_dir(self.code)

    ############################ Methods ######################################

    def __init__(self, *args, **kwargs):
        super(Language, self).__init__(*args, **kwargs)

    def __repr__(self):
        return u'<%s: %s>' % (self.__class__.__name__, self.fullname)

    def __unicode__(self):
        return u"%s - %s" % (self.name, self.code)

    def save(self, *args, **kwargs):
        # create corresponding directory object.
        from pootle_app.models.directory import Directory
        self.directory = Directory.objects.root.get_or_make_subdir(self.code)

        super(Language, self).save(*args, **kwargs)

        # FIXME: far from ideal, should cache at the manager level instead.
        cache.delete(CACHE_KEY)

    def delete(self, *args, **kwargs):
        directory = self.directory
        super(Language, self).delete(*args, **kwargs)
        directory.delete()

        # FIXME: far from ideal, should cache at the manager level instead.
        cache.delete(CACHE_KEY)

    def get_absolute_url(self):
        return reverse('pootle-language-overview', args=[self.code])

    def get_translate_url(self, **kwargs):
        return u''.join([
            reverse('pootle-language-translate', args=[self.code]),
            get_editor_filter(**kwargs),
        ])

    ### TreeItem

    def get_children(self):
        return self.translationproject_set.enabled()

    def get_cachekey(self):
        return self.directory.pootle_path

    ### /TreeItem

    def translated_percentage(self):
        total = max(self.get_total_wordcount(), 1)
        translated = self.get_translated_wordcount()
        return int(100.0 * translated / total)

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url


urlpatterns = patterns('pootle_language.views',
    url(r'^(?P<language_code>[^/]*)/$',
        'overview',
        name='pootle-language-overview'),

    url(r'^(?P<language_code>[^/]*)/translate/$',
        'translate',
        name='pootle-language-translate'),

    url(r'^(?P<language_code>[^/]*)/export-view/$',
        'export_view',
        name='pootle-language-export-view'),

    # Admin
    url(r'^(?P<language_code>[^/]*)/admin/settings/$',
        'language_settings_edit',
        name='pootle-language-admin-settings'),
    url(r'^(?P<language_code>[^/]*)/admin/permissions/$',
        'language_admin',
        name='pootle-language-admin-permissions'),
)

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2004-2010, 2012-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse
from django.http import HttpResponse
from django.shortcuts import render
from django.template import loader, RequestContext
from django.utils.translation import ugettext as _

from pootle.core.browser import get_table_headings, make_project_item
from pootle.core.decorators import get_path_obj, permission_required
from pootle.core.helpers import (get_export_view_context, get_overview_context,
                                 get_translation_context)
from pootle.i18n.gettext import tr_lang
from pootle_app.models.permissions import check_permission
from pootle_app.views.admin.permissions import admin_permissions
from pootle_misc.util import jsonify, ajax_required


@get_path_obj
@permission_required('view')
def overview(request, language):
    can_edit = check_permission('administrate', request)

    translation_projects = language.get_children() \
                                   .order_by('project__fullname')
    user_tps = filter(lambda x: x.is_accessible_by(request.user),
                      translation_projects)
    items = (make_project_item(tp) for tp in user_tps)

    table_fields = ['name', 'progress', 'total', 'need-translation',
                    'suggestions', 'critical', 'last-updated', 'activity']
    table = {
        'id': 'language',
        'fields': table_fields,
        'headings': get_table_headings(table_fields),
        'items': items,
    }

    ctx = get_overview_context(request)
    ctx.update({
        'language': {
          'code': language.code,
          'name': tr_lang(language.fullname),
          'description': language.description,
        },
        'feed_path': '%s/' % language.code,
        'can_edit': can_edit,
        'table': table,

        'browser_extends': 'languages/base.html',
    })

    if can_edit:
        from pootle_language.forms import DescriptionForm
        ctx.update({
            'form': DescriptionForm(instance=language),
            'form_action': reverse('pootle-language-admin-settings',
                                   args=[language.code]),
        })

    response = render(request, "browser/overview.html", ctx)
    response.set_cookie('pootle-language', language.code)

    return response


@ajax_required
@get_path_obj
@permission_required('administrate')
def language_settings_edit(request, language):
    from pootle_language.forms import DescriptionForm
    form = DescriptionForm(request.POST, instance=language)

    response = {}
    rcode = 400

    if form.is_valid():
        form.save()
        rcode = 200

        if language.description:
            the_html = language.description
        else:
            the_html = u"".join([
                u'<p class="placeholder muted">',
                _(u"No description yet."), u"</p>"
            ])

        response["description"] = the_html

    context = {
        "form": form,
        "form_action": reverse('pootle-language-admin-settings',
                               args=[language.code]),
    }
    t = loader.get_template('admin/_settings_form.html')
    c = RequestContext(request, context)
    response['form'] = t.render(c)

    return HttpResponse(jsonify(response), status=rcode,
                        mimetype="application/json")


@get_path_obj
@permission_required('view')
def translate(request, language):
    request.pootle_path = language.pootle_path
    request.ctx_path = language.pootle_path

    request.store = None
    request.directory = language.directory

    project = None

    context = get_translation_context(request)
    context.update({
        'language': language,
        'project': project,

        'editor_extends': 'languages/base.html',
    })

    return render(request, "editor/main.html", context)


@get_path_obj
@permission_required('view')
def export_view(request, language):
    """Displays a list of units with filters applied."""
    request.pootle_path = language.pootle_path
    request.ctx_path = language.pootle_path
    request.resource_path = ''

    request.store = None
    request.directory = language.directory

    project = None

    ctx = get_export_view_context(request)
    ctx.update({
        'source_language': 'en',
        'language': language,
        'project': project,
    })

    return render(request, "editor/export_view.html", ctx)


@get_path_obj
@permission_required('administrate')
def language_admin(request, language):
    ctx = {
        'page': 'admin-permissions',

        'language': language,
        'directory': language.directory,
        'feed_path': '%s/' % language.code,
    }
    return admin_permissions(request, language.directory,
                             'languages/admin/permissions.html', ctx)

########NEW FILE########
__FILENAME__ = aggregate
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2009 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Wrappers around Django 1.1+ aggregate query functions."""

from django.db.models import Sum, Count, Max


def max_column(queryset, column, default):
    result = queryset.aggregate(result=Max(column))['result']

    if result is None:
        return default
    else:
        return result


def sum_column(queryset, columns, count=False):
    arg_dict = {}

    if count:
        arg_dict['count'] = Count('id')

    for column in columns:
        arg_dict[column] = Sum(column)

    return queryset.aggregate(**arg_dict)


def group_by_sort(queryset, column, fields):
    return queryset.annotate(count=Count(column)).order_by('-count') \
                   .values('count', *fields)

########NEW FILE########
__FILENAME__ = baseurl
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Utility functions to help deploy Pootle under different url prefixes."""

from django.conf import settings
from django.contrib.auth import REDIRECT_FIELD_NAME
from django.utils.http import urlencode


def l(path):
    """Filter URLs adding base_path prefix if required."""
    if path and path.startswith('/'):
        base_url = getattr(settings, "SCRIPT_NAME", "")
        return base_url + path
    return path


def s(path):
    """Filter URLs adding STATIC_URL prefix."""
    return settings.STATIC_URL + path


def get_next(request):
    """Return a query string to use as a next URL."""
    try:
        next = request.GET.get(REDIRECT_FIELD_NAME, '')

        if not next:
            next = request.path_info
    except AttributeError:
        next = ''

    return u"?%s" % urlencode({REDIRECT_FIELD_NAME: next})

########NEW FILE########
__FILENAME__ = checks
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from translate.filters.decorators import Category
from translate.filters import checks

from django.utils.translation import ugettext_lazy as _


category_names = {
    Category.CRITICAL: _("Critical"),
    Category.FUNCTIONAL: _("Functional"),
    Category.COSMETIC: _("Cosmetic"),
    Category.EXTRACTION: _("Extraction"),
    Category.NO_CATEGORY: _("No category"),
}


check_names = {
    'accelerators': _(u"Accelerators"),
    'acronyms': _(u"Acronyms"),
    'blank': _(u"Blank"),
    'brackets': _(u"Brackets"),
    'compendiumconflicts': _(u"Compendium conflict"),
    'credits': _(u"Translator credits"),
    'doublequoting': _(u"Double quotes"),
    'doublespacing': _(u"Double spaces"),
    'doublewords': _(u"Repeated word"),
    'emails': _(u"E-mail"),
    'endpunc': _(u"Ending punctuation"),
    'endwhitespace': _(u"Ending whitespace"),
    'escapes': _(u"Escapes"),
    'filepaths': _(u"File paths"),
    'functions': _(u"Functions"),
    'gconf': _(u"GConf values"),
    'kdecomments': _(u"Old KDE comment"),
    'long': _(u"Long"),
    'musttranslatewords': _(u"Must translate words"),
    'newlines': _(u"Newlines"),
    'nplurals': _(u"Number of plurals"),
    'notranslatewords': _(u"Don't translate words"),
    'numbers': _(u"Numbers"),
    'options': _(u"Options"),
    'printf': _(u"printf()"),
    'puncspacing': _(u"Punctuation spacing"),
    'purepunc': _(u"Pure punctuation"),
    'sentencecount': _(u"Number of sentences"),
    'short': _(u"Short"),
    'simplecaps': _(u"Simple capitalization"),
    'simpleplurals': _(u"Simple plural(s)"),
    'singlequoting': _(u"Single quotes"),
    'startcaps': _(u"Starting capitalization"),
    'startpunc': _(u"Starting punctuation"),
    'startwhitespace': _(u"Starting whitespace"),
    # Translators: This refers to tabulation characters
    'tabs': _(u"Tabs"),
    'unchanged': _(u"Unchanged"),
    'untranslated': _(u"Untranslated"),
    'urls': _(u"URLs"),
    'validchars': _(u"Valid characters"),
    'variables': _(u"Placeholders"),
    'xmltags': _(u"XML tags"),
}

excluded_filters = ['hassuggestion', 'spellcheck']


def get_qualitychecks():
    sc = checks.StandardChecker()
    for filt in sc.defaultfilters:
        if not filt in excluded_filters:
            # don't use an empty string because of
            # http://bugs.python.org/issue18190
            getattr(sc, filt)(u'_', u'_')

    return sc.categories


def get_qualitycheck_schema(path_obj=None):
    d = {}
    checks = get_qualitychecks()

    for check, cat in checks.items():
        if not cat in d:
            d[cat] = {
                'code': cat,
                'title': u"%s" % category_names[cat],
                'checks': []
            }
        d[cat]['checks'].append({
            'code': check,
            'title': u"%s" % check_names.get(check, check),
            'url': path_obj.get_translate_url(check=check) if path_obj else ''
        })

    result = sorted([item for code, item in d.items()],
                    key=lambda x: x['code'],
                    reverse=True)

    return result


def get_qualitychecks_by_category(category):
    checks = get_qualitychecks()
    return filter(lambda x: checks[x] == category, checks)


def get_quality_check_failures(path_obj):
    """Returns a list of the failed checks sorted by their importance.

    :param path_obj: A TreeItem instance.
    """
    checks = []

    try:
        property_stats = path_obj.get_checks()
        total = path_obj.get_total_wordcount()
        keys = property_stats.keys()
        keys.sort(reverse=True)

        for i, category in enumerate(keys):
            group = {
                'checks': []
            }

            if category != Category.NO_CATEGORY:
                group.update({
                    'name': category,
                    'display_name': unicode(category_names[category]),
                })

            cat_keys = property_stats[category].keys()
            cat_keys.sort()

            cat_total = 0

            for checkname in cat_keys:
                checkcount = property_stats[category][checkname]
                cat_total += checkcount

                if total and checkcount:
                    check_display = unicode(check_names.get(checkname,
                                                            checkname))
                    check = {
                        'name': checkname,
                        'display_name': check_display,
                        'count': checkcount,
                        'url': path_obj.get_translate_url(check=checkname),
                    }
                    group['checks'].append(check)

            if cat_total:
                checks.append(group)

    except IOError:
        pass

    return checks

########NEW FILE########
__FILENAME__ = context_processors
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django.conf import settings

from pootle.__version__ import sver
from pootle_app.models.pootle_site import get_site_description, get_site_title
from pootle_language.models import Language
from pootle_project.models import Project
from staticpages.models import LegalPage


def _agreement_context(request):
    """Returns whether the agreement box should be displayed or not."""
    request_path = request.META['PATH_INFO']
    nocheck = filter(lambda x: request_path.startswith(x),
                     settings.LEGALPAGE_NOCHECK_PREFIXES)
    display_agreement = False

    if (request.user.is_authenticated() and not nocheck and
        LegalPage.objects.pending_user_agreement(request.user).exists()):
        display_agreement = True

    return {
        'display_agreement': display_agreement,
    }


def pootle_context(request):
    """Exposes settings to templates."""
    #FIXME: maybe we should expose relevant settings only?
    context = {
        'settings': {
            'TITLE': get_site_title(),
            'DESCRIPTION':  get_site_description(),
            'CAN_REGISTER': settings.CAN_REGISTER,
            'CAN_CONTACT': settings.CAN_CONTACT and settings.CONTACT_EMAIL,
            'SCRIPT_NAME': settings.SCRIPT_NAME,
            'POOTLE_VERSION': sver,
            'CACHE_TIMEOUT': settings.CACHE_MIDDLEWARE_SECONDS,
            'DEBUG': settings.DEBUG,
        },
        'custom': settings.CUSTOM_TEMPLATE_CONTEXT,
    }

    context.update({
        'ALL_LANGUAGES': Language.live.cached(),
        'ALL_PROJECTS': Project.objects.cached(),
    })

    context.update(_agreement_context(request))

    return context

########NEW FILE########
__FILENAME__ = forms
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2010-2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pootle is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import forms
from django.core.validators import EMPTY_VALUES
from django.utils.translation import ugettext_lazy as _


class GroupedModelChoiceField(forms.ModelChoiceField):
    def __init__(self, querysets, *args, **kwargs):
        super(GroupedModelChoiceField, self).__init__(*args, **kwargs)
        self.querysets = querysets

    def _get_choices(self):
        orig_queryset = self.queryset
        orig_empty_label = self.empty_label
        if self.empty_label is not None:
            yield (u"", self.empty_label)
            self.empty_label = None

        for title, queryset in self.querysets:
            self.queryset = queryset
            if title is None:
                for choice in super(GroupedModelChoiceField, self).choices:
                    yield choice
            else:
                yield (title, [choice for choice in
                               super(GroupedModelChoiceField, self).choices])

        self.queryset = orig_queryset
        self.empty_label = orig_empty_label
    choices = property(_get_choices, forms.ModelChoiceField._set_choices)


class LiberalModelChoiceField(forms.ModelChoiceField):
    """ModelChoiceField that doesn't complain about choices not present in the
    queryset.

    This is essentially a hack for admin pages. to be able to exclude currently
    used choices from dropdowns without failing validation.
    """

    def clean(self, value):
        if value in EMPTY_VALUES:
            return None
        try:
            key = self.to_field_name or 'pk'
            value = self.queryset.model.objects.get(**{key: value})
        except self.queryset.model.DoesNotExist:
            raise forms.ValidationError(self.error_messages['invalid_choice'])
        return value


def make_search_form(*args, **kwargs):
    """Factory that instantiates one of the search forms below."""
    terminology = kwargs.pop('terminology', False)
    request = kwargs.pop('request', None)

    if request is not None:
        env = terminology and "terminology" or "editor"
        sparams_cookie = request.COOKIES.get("search-%s" % env)

        if sparams_cookie:
            import json
            import urllib

            initial_sparams = json.loads(urllib.unquote(sparams_cookie))
            if isinstance(initial_sparams, dict):
                if 'sfields' in initial_sparams:
                    kwargs.update({
                        'initial': initial_sparams,
                    })

    if terminology:
        return TermSearchForm(*args, **kwargs)

    return SearchForm(*args, **kwargs)


class SearchForm(forms.Form):
    """Normal search form for translation projects."""
    search = forms.CharField(
        widget=forms.TextInput(attrs={
            'size': '15',
            'title': _("Search (Ctrl+Shift+S)<br/>Type and press Enter to "
                       "search"),
        }),
    )
    soptions = forms.MultipleChoiceField(
        required=False,
        widget=forms.CheckboxSelectMultiple,
        choices=(
            ('exact', _('Exact Match')),
        ),
    )
    sfields = forms.MultipleChoiceField(
        required=False,
        widget=forms.CheckboxSelectMultiple,
        choices=(
            ('source', _('Source Text')),
            ('target', _('Target Text')),
            ('notes', _('Comments')),
            ('locations', _('Locations'))
        ),
        initial=['source', 'target'],
    )


class TermSearchForm(SearchForm):
    """Search form for terminology projects and pootle-terminology files."""
    # Mostly the same as SearchForm, but defining it this way seemed easiest.
    sfields = forms.ChoiceField(
        required=False,
        widget=forms.CheckboxSelectMultiple,
        choices=(
            ('source', _('Source Terms')),
            ('target', _('Target Terms')),
            ('notes', _('Definitions')),
        ),
        initial=['source', 'target'],
    )

########NEW FILE########
__FILENAME__ = mail
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django.core.mail import get_connection, EmailMultiAlternatives
from django.core.mail.message import EmailMessage


def send_mail(subject, message, from_email=None, recipient_list=[],
              bcc=[], cc=[], fail_silently=False, auth_user=None,
              auth_password=None, connection=None, html_message=False):
    """Wrapper around Django's :class:`~django.core.mail.message.EmailMessage`
    that accepts more fields than the defaults offered by
    :func:`~django.core.mail.send_mail`.

    :param subject: Subject of the email.
    :param message: Body of the email.
    :param from_email: Sender's address. If omitted,
                       :setting:`DEFAULT_FROM_EMAIL` is used.
    :param recipient_list: List of addresses used in the `To` header.
    :param bcc: List of addresses used in the `Bcc` header.
    :param cc: List of addresses used in the `Cc` header.
    :param fail_silently: Whether to invalidate exceptions raised when sending
                          mail.
    :param auth_user: Username used when authenticating the connection. If
                      unset, :setting:`EMAIL_HOST_USER` will be used.
    :param auth_password: Password used when authenticating the connection. If
                          unset, :setting:`EMAIL_HOST_PASSWORD` will be used.
    :param connection: An e-mail backend instance. Useful to reuse the same
                       connection for multiple messages. If unset, a new
                       connection will be created.
    :param html_message: Tells if `message` is formatted using HTML.
    """
    connection = connection or get_connection(username=auth_user,
                                              password=auth_password,
                                              fail_silently=fail_silently)
    if html_message:
        from lxml.html import fromstring, tostring
        # Get a plain text version of the HTML formatted message.
        text_content = tostring(fromstring(message), method='text')
        email_msg = EmailMultiAlternatives(subject, text_content, from_email,
                                           recipient_list, bcc=bcc, cc=cc,
                                           connection=connection)
        # Attach the HTML formatted message.
        email_msg.attach_alternative(message, "text/html")
        return email_msg.send()
    else:
        return EmailMessage(subject, message, from_email, recipient_list,
                            bcc=bcc, cc=cc, connection=connection).send()

########NEW FILE########
__FILENAME__ = ptempfile
# -*- coding: utf-8 -*-
#
# Copyright 2011, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os
import tempfile

from django.conf import settings


def mkstemp(*args, **kwargs):
    """Wrap tempfile.mkstemp, setting the permissions of the created temporary
    file as specified in settings (see bug 1983).
    """
    fd, name = tempfile.mkstemp(*args, **kwargs)
    if hasattr(os, 'fchmod'):
        os.fchmod(fd, settings.EXPORTED_FILE_MODE)
    else:
        os.chmod(name, settings.EXPORTED_FILE_MODE)
    return fd, name


def mkdtemp(*args, **kwargs):
    """Wrap tempfile.mkdtemp, setting the permissions of the created temporary
    file as specified in settings (see bug 1983).
    """
    name = tempfile.mkdtemp(*args, **kwargs)
    os.chmod(name, settings.EXPORTED_DIRECTORY_MODE)
    return name

########NEW FILE########
__FILENAME__ = siteconfig
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2004-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

"""
NOTE: Import this file in your urls.py or some place before any code relying on
      settings is imported.
"""

from django.contrib.sites.models import Site

from djblets.siteconfig.models import SiteConfiguration


def load_site_config():
    """Set up the SiteConfiguration, provide defaults and sync settings."""
    try:
        siteconfig = SiteConfiguration.objects.get_current()
    except SiteConfiguration.DoesNotExist:
        # Either warn or just create the thing. Depends on your app.
        siteconfig = SiteConfiguration(site=Site.objects.get_current(),
                                       version="1.0")
        siteconfig.save()

    # If TITLE and DESCRIPTION are not on the database then pick the defaults
    # from the settings and save them in the database.
    if not siteconfig.get_defaults():
        from django.conf import settings

        defaults = {}

        for setting_name in ('DESCRIPTION', 'TITLE'):
            if hasattr(settings, setting_name):
                defaults[setting_name] = getattr(settings, setting_name)

        siteconfig.add_defaults(defaults)

    return siteconfig

########NEW FILE########
__FILENAME__ = stats
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django.utils.translation import gettext as _


def get_translation_states(path_obj):
    states = []

    def make_dict(state, title, filter_url=True):
        filter_name = filter_url and state or None
        return {
            'state': state,
            'title': title,
            'url': path_obj.get_translate_url(state=filter_name)
        }

    states.append(make_dict('total', _("Total"), False))
    states.append(make_dict('translated', _("Translated")))
    states.append(make_dict('fuzzy', _("Needs work")))
    states.append(make_dict('untranslated', _("Untranslated")))

    return states


def stats_message_raw(version, total, translated, fuzzy):
    """Build a message of statistics used in VCS actions."""
    return "%s: %d of %d strings translated (%d need review)." % \
           (version, translated, total, fuzzy)

########NEW FILE########
__FILENAME__ = baseurl
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django import template
from django.template.defaultfilters import stringfilter

from pootle_misc.baseurl import s, get_next


register = template.Library()

register.filter('s', stringfilter(s))
register.filter('get_next', get_next)

########NEW FILE########
__FILENAME__ = cleanhtml
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import random
import re

from lxml.etree import ParserError
from lxml.html import rewrite_links
from lxml.html.clean import clean_html

from django import template
from django.template.defaultfilters import stringfilter
from django.utils.html import escape, simple_email_re as email_re
from django.utils.safestring import mark_safe


register = template.Library()


@register.filter
@stringfilter
def clean(text):
    """Wrapper around lxml's html cleaner that returns SafeStrings for
    immediate rendering in templates.
    """
    try:
        clean_text = clean_html(text)
    except ParserError:
        clean_text = u""

    return mark_safe(clean_text)


@register.filter
@stringfilter
def obfuscate(text):
    """Obfuscate the given text in case it is an email address.

    Based on the implementation used in addons.mozilla.org
    """
    if not email_re.match(text):
        return text

    fallback = text[::-1]  # Reverse.
    # Inject junk somewhere.
    i = random.randint(0, len(text) - 1)
    fallback = u"%s%s%s" % (escape(fallback[:i]),
                            u'<span class="i">null</span>',
                            escape(fallback[i:]))
    # Replace '@' and '.'.
    fallback = fallback.replace('@', '&#x0040;').replace('.', '&#x002E;')

    title = '<span class="email">%s</span>' % fallback

    node = u'%s<span class="email hide">%s</span>' % (title, fallback)
    return mark_safe(node)


@register.filter
@stringfilter
def url_target_blank(text):
    """Set the target="_blank" for hyperlinks."""
    return mark_safe(text.replace('<a ', '<a target="_blank" '))


LANGUAGE_LINK_RE = re.compile(ur'/xx/', re.IGNORECASE)

@register.filter
@stringfilter
def rewrite_language_links(html, language_code):
    if language_code:
        html = rewrite_links(
            html,
            lambda lnk: LANGUAGE_LINK_RE.sub(u'/' + language_code + u'/', lnk)
        )

    return mark_safe(html)

########NEW FILE########
__FILENAME__ = common_tags
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django import template
from django.template.defaultfilters import stringfilter


register = template.Library()


@register.inclusion_tag('browser/_table.html', takes_context=True)
def display_table(context, table):
    return {
        'table': table,
        'user': context.get('user', None),
        'request': context.get('request', None),
    }


@register.filter
def endswith(value, arg):
    return value.endswith(arg)


@register.filter
def count(value, arg):
    return value.count(arg)

########NEW FILE########
__FILENAME__ = locale
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django import template
from django.utils import dateformat
from django.utils.formats import get_format
from django.utils.translation import trans_real


register = template.Library()


@register.simple_tag
def locale_dir():
    """Returns current locale's direction."""
    return trans_real.get_language_bidi() and "rtl" or "ltr"


@register.simple_tag
def locale_align():
    """Returns current locale's default alignment."""
    return trans_real.get_language_bidi() and "right" or "left"


@register.simple_tag
def locale_reverse_align():
    """Returns current locale's reverse alignment."""
    return trans_real.get_language_bidi() and "left" or "right"


@register.filter(name='dateformat')
def do_dateformat(value, format='DATETIME_FORMAT'):
    """Formats a `value` date using `format`.

    :param value: a datetime object.
    :param format: a format string accepted by
        :func:`django.utils.formats.get_format` or
        :func:`django.utils.dateformat.format`. If none is set, the current
        locale's default format will be used.
    """
    try:
        use_format = get_format(format)
    except AttributeError:
        use_format = format

    return dateformat.format(value, use_format)

########NEW FILE########
__FILENAME__ = render_pager
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2009 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django import template
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext as _


def render_pager(pager):
    """Render a pager block with next and previous links"""
    if not pager.has_other_pages():
        return ""

    result = '<ul class="pager">'
    if pager.has_previous():
        result += '<li><a href="?page=1" class="nth-link">%s</a></li>' % _('First')
        result += '<li><a href="?page=%d" class="prevnext-link">%s</a></li>' % (pager.previous_page_number(),
                                                                                _('Previous'))

    start = max(1, pager.number - 4)
    end = min(pager.paginator.num_pages, pager.number + 4)
    if start > 1:
        result += '<li>...</li>'
    for i in range(start, end+1):
        if i == pager.number:
            result += '<li><span class="current-link">%s</span></li>' % i
        else:
            result += '<li><a href="?page=%d" class="number-link">%d</a></li>' % (i, i)
    if end < pager.paginator.num_pages:
        result += '<li>...</li>'

    if pager.has_next():
        result += '<li><a href="?page=%d" class="prevnext-link">%s</a></li>' % (pager.next_page_number(),
                                                                                _('Next'))
        result += '<li><a href="?page=%d" class="nth-link">%s</a></li>' % (pager.paginator.num_pages,
                                                                           _('Last (%d)', pager.paginator.num_pages))

    result += '</ul>'
    return mark_safe(result)

register = template.Library()
register.filter('render_pager', render_pager)

########NEW FILE########
__FILENAME__ = search
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django import template

from pootle_misc.forms import make_search_form


register = template.Library()


@register.inclusion_tag('core/search.html', takes_context=True)
def render_search(context, form=None, action=None):
    request = context['request']

    if form is None:
        is_terminology = False
        tp = context.get('translation_project', None)

        if tp is not None:
            is_terminology = tp.project.is_terminology

        form = make_search_form(request=request, terminology=is_terminology)

    if action is None:
        action = request.resource_obj.get_translate_url()

    template_vars = {
        'search_form': form,
        'search_action': action,
    }

    return template_vars

########NEW FILE########
__FILENAME__ = pootle
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

"""Pootle version-specific upgrade actions."""

import logging


def upgrade_to_21060():
    """Post-upgrade actions for upgrades to 21060."""
    from pootle_misc.util import deletefromcache
    from pootle_store.models import OBSOLETE
    from pootle_translationproject.models import TranslationProject

    logging.info('Flushing cached stats')

    for tp in TranslationProject.objects.filter(stores__unit__state=OBSOLETE) \
                                        .distinct().iterator():
        deletefromcache(tp, ["getquickstats", "getcompletestats", "get_mtime",
                             "has_suggestions"])


def upgrade_to_22000():
    """Post-upgrade actions for upgrades to 22000."""
    from django.core.cache import cache
    from django.utils.encoding import iri_to_uri

    from pootle_store.models import Store

    # In previous versions, we cached the sync times, so let's see if we can
    # recover some.
    for store in Store.objects.iterator():
        key = iri_to_uri("%s:sync" % store.pootle_path)
        last_sync = cache.get(key)
        if last_sync:
            store.sync_time = last_sync
            store.save()


def upgrade_to_25100():
    """Post-upgrade actions for upgrades to 25100."""
    from pootle_app.models import Directory

    # Create the new directory used for goals.
    Directory.objects.root.get_or_make_subdir('goals')


def upgrade_to_25200():
    """Post-upgrade actions for upgrades to 25200."""
    from pootle.core.initdb import create_local_tm

    logging.info('About to create the local translation memory.')
    create_local_tm()
    logging.info('Succesfully created the local translation memory.')


def upgrade_to_25201():
    """New semantics for the `view` permission."""
    from django.contrib.auth.models import Permission
    from django.contrib.contenttypes.models import ContentType
    from django.utils.translation import ugettext_noop as _

    from pootle_app.models import Directory
    from pootle_app.models.permissions import PermissionSet
    from pootle_profile.models import PootleProfile

    # Remove old `view` permission
    Permission.objects.filter(codename='view').delete()

    # Create new `view` permission
    pootle_content_type = ContentType.objects.get(
        app_label='pootle_app',
        model='directory',
    )
    view = Permission.objects.create(
        name=_(u'Can view a project'),
        content_type=pootle_content_type,
        codename='view',
    )

    # Attach `view` permission to the root directory for anonymous and
    # default users
    nobody = PootleProfile.objects.get(user__username='nobody')
    default = PootleProfile.objects.get(user__username='default')

    root = Directory.objects.root
    permission_set = PermissionSet.objects.get(
        profile=nobody,
        directory=root,
    )
    permission_set.positive_permissions.add(view)

    permission_set = PermissionSet.objects.get(
        profile=default,
        directory=root,
    )
    permission_set.positive_permissions.add(view)


def upgrade_to_25202():
    from pootle.core.initdb import create_system_user

    create_system_user()


def upgrade_to_25203():
    """Set `Submission` model's type to the new `SubmissionTypes.SYSTEM` for
    submissions performed by the `system` user.
    """
    from pootle_statistics.models import Submission, SubmissionTypes

    Submission.objects.filter(
        type=None,
        submitter__user__username='system',
    ).update(
        type=SubmissionTypes.SYSTEM,
    )


def upgrade_to_25204():
    """Copy site title and description stored using djblets to new models."""
    from pootle.core.initdb import create_default_pootle_site
    from pootle_app.models.pootle_site import (get_legacy_site_description,
                                               get_legacy_site_title)

    # Copy the Pootle site data.
    create_default_pootle_site(
        get_legacy_site_title(),
        get_legacy_site_description()
    )


def upgrade_to_25205():
    """Synchronize latest submission data with the denormalized submission
    fields available in the :cls:`pootle_store.models.Unit` model.
    """
    from pootle_statistics.models import SubmissionFields
    from pootle_store.models import Unit

    logging.info('About to synchronize latest submission data.')

    rows = Unit.objects.filter(
        submission__field__in=[
            SubmissionFields.SOURCE,
            SubmissionFields.STATE,
            SubmissionFields.TARGET,
        ],
    ).select_related('submission__creation_time',
                     'submission__submitter') \
     .order_by('id', '-submission__creation_time') \
     .values('id', 'submission__creation_time', 'submission__submitter')

    saved_id = None
    for row in rows:
        unit_id = row['id']
        if saved_id is None or saved_id != unit_id:
            last_submitter = row['submission__submitter']
            last_submission_time = row['submission__creation_time']
            Unit.objects.filter(id=unit_id).update(
                submitted_by=last_submitter,
                submitted_on=last_submission_time,
            )
            saved_id = unit_id

    logging.info('Succesfully synchronized latest submission data.')


def upgrade_to_25206():
    """Set a correct build version for Translate Toolkit.

    Since Pootle 2.5.1 the upgrade for Translate Toolkit was using the Pootle
    build version. This fix is meant to save a working build version so
    future upgrades for Translate Toolkit are run.

    Note that this is Translate Toolkit fix is being run as an upgrade for
    Pootle because the Pootle upgrades are being run before the Translate
    Toolkit ones.
    """
    from . import save_build_version
    save_build_version('ttk', 12008)

########NEW FILE########
__FILENAME__ = schema
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Database schema upgrade code.

This is legacy code that only performs upgrades up to version 2.5. Any
future schema migrations are handled entirely by South.
"""

import logging

from django.core.management import call_command


def update_tables_22000():
    logging.info("Updating existing database tables")

    from django.db import models

    from south.db import db

    from pootle_language.models import Language
    from pootle_misc.siteconfig import load_site_config
    from pootle_project.models import Project
    from pootle_statistics.models import Submission
    from pootle_store.models import QualityCheck, Store, Suggestion, Unit
    from pootle_translationproject.models import TranslationProject

    # For the sake of South bug 313, we set the default for these fields here:
    # See http://south.aeracode.org/ticket/313
    table_name = Suggestion._meta.db_table
    field = Suggestion._meta.get_field('translator_comment_f')
    field.default = u''
    db.add_column(table_name, field.name, field)

    table_name = Language._meta.db_table
    field = Language._meta.get_field('description')
    field.default = u''
    db.add_column(table_name, field.name, field)

    field = models.TextField(default=u'', editable=False, blank=True)
    db.add_column(table_name, 'description_html', field)

    table_name = TranslationProject._meta.db_table
    field = TranslationProject._meta.get_field('description')
    field.default = u''
    db.add_column(table_name, field.name, field)

    field = models.TextField(default=u'', editable=False, blank=True)
    db.add_column(table_name, 'description_html', field)

    table_name = Project._meta.db_table
    field = Project._meta.get_field('report_target')
    field.default = u''
    db.add_column(table_name, field.name, field)

    field = models.TextField(default=u'', editable=False, blank=True)
    db.add_column(table_name, 'description_html', field)

    table_name = QualityCheck._meta.db_table
    field = QualityCheck._meta.get_field('category')
    db.add_column(table_name, field.name, field)
    # Delete all 'hassuggestion' failures, since we don't actually use them
    # See bug 2412.
    QualityCheck.objects.filter(name="hassuggestion").delete()

    table_name = Submission._meta.db_table
    for field_name in ('unit', 'field', 'type', 'old_value', 'new_value'):
        field = Submission._meta.get_field(field_name)
        db.add_column(table_name, field.name, field)

    table_name = Unit._meta.db_table
    for field_name in ('submitted_by', 'submitted_on', 'commented_by',
                       'commented_on'):
        field = Unit._meta.get_field(field_name)
        db.add_column(table_name, field.name, field)

    table_name = Store._meta.db_table
    field = Store._meta.get_field('sync_time')
    db.add_column(table_name, field.name, field)

    # Save the legacy buildversion using djblets.
    config = load_site_config()
    config.set('POOTLE_BUILDVERSION', 22000)
    config.save()
    logging.info("Database now at Pootle build 22000")


def staggered_update(db_buildversion):
    """Updates Pootle's database schema in steps."""

    # Build missing tables
    try:
        logging.info("Creating missing database tables")

        call_command('syncdb', interactive=False)
    except Exception as e:
        logging.warning(u"Something broke while creating new database tables:"
                        u"\n%s", e)

    if db_buildversion < 22000:
        update_tables_22000()

########NEW FILE########
__FILENAME__ = ttk
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

"""Translate Toolkit version-specific upgrade actions."""

import logging


def upgrade_to_12008():
    from pootle_store.models import Store, PARSED

    logging.info('Reparsing Qt ts')

    criteria = {
        'state__gt': PARSED,
        'translation_project__project__localfiletype': 'ts',
        'file__iendswith': '.ts',
    }
    for store in Store.objects.filter(**criteria).iterator():
        store.sync(update_translation=True)
        store.update(update_structure=True, update_translation=True)

########NEW FILE########
__FILENAME__ = util
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2004-2013 Zuza Software Foundation
# Copyright 2013-2014 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import json
import logging
from datetime import datetime
from functools import wraps

from django.conf import settings
from django.core.cache import cache
from django.http import HttpResponseBadRequest
from django.utils import timezone
from django.utils.encoding import force_unicode, iri_to_uri
from django.utils.functional import Promise

from pootle.core.markup import Markup


# Timezone aware minimum for datetime (if appropriate) (bug 2567)
datetime_min = datetime.min
if settings.USE_TZ:
    datetime_min = timezone.make_aware(datetime_min, timezone.utc)


def getfromcachebyname(function, timeout=settings.OBJECT_CACHE_TIMEOUT):
    def _getfromcache(instance, *args, **kwargs):
        key = iri_to_uri(instance.pootle_path + ":" + args[0] + function.__name__)
        result = cache.get(key)
        if result is None:
            logging.debug(u"cache miss for %s", key)
            result = function(instance, *args, **kwargs)
            cache.set(key, result, timeout)
        return result
    return _getfromcache


def get_cached_value(obj, fn):
    key = iri_to_uri(obj.get_cachekey() + ":" + fn)
    return cache.get(key)


def set_cached_value(obj, fn, value, timeout=settings.OBJECT_CACHE_TIMEOUT):
    key = iri_to_uri(obj.get_cachekey() + ":" + fn)
    return cache.set(key, value, timeout)


def getfromcache(function, timeout=settings.OBJECT_CACHE_TIMEOUT):
    def _getfromcache(instance, *args, **kwargs):
        key = iri_to_uri(instance.get_cachekey() + ":" + function.__name__)
        result = cache.get(key)
        if result is None:
            logging.debug(u"cache miss for %s", key)
            result = function(instance, *args, **kwargs)
            cache.set(key, result, timeout)
        return result
    return _getfromcache



def deletefromcache(sender, functions, **kwargs):
    path = iri_to_uri(sender.pootle_path)
    path_parts = path.split("/")

    # Clean project cache.
    if len(path_parts):
        key = "/projects/%s/" % path_parts[2]
        for func in functions:
            cache.delete(key + ":" + func)

    # Clean store and directory cache.
    while path_parts:
        for func in functions:
            cache.delete(path + ":" + func)

        path_parts = path_parts[:-1]
        path = "/".join(path_parts) + "/"


def dictsum(x, y):
    return dict((n, x.get(n, 0)+y.get(n, 0)) for n in set(x) | set(y))


class PootleJSONEncoder(json.JSONEncoder):
    """Custom JSON encoder for Pootle.

    This is mostly implemented to avoid calling `force_unicode` all the time on
    certain types of objects.
    https://docs.djangoproject.com/en/1.4/topics/serialization/#id2
    """
    def default(self, obj):
        if isinstance(obj, Promise) or isinstance(obj, Markup):
            return force_unicode(obj)

        return super(PootleJSONEncoder, self).default(obj)


def jsonify(obj):
    """Serialize Python `obj` object into a JSON string."""
    if settings.DEBUG:
        indent = 4
    else:
        indent = None

    return json.dumps(obj, indent=indent, cls=PootleJSONEncoder)


def ajax_required(f):
    """Check that the request is an AJAX request.

    Use it in your views:

    @ajax_required
    def my_view(request):
        ....

    Taken from:
    http://djangosnippets.org/snippets/771/
    """
    @wraps(f)
    def wrapper(request, *args, **kwargs):
        if not settings.DEBUG and not request.is_ajax():
            return HttpResponseBadRequest("This must be an AJAX request.")
        return f(request, *args, **kwargs)

    return wrapper


def to_int(value):
    """Converts `value` to `int` and returns `None` if the conversion is
    not possible.
    """
    try:
        return int(value)
    except ValueError:
        return None

########NEW FILE########
__FILENAME__ = versioncontrol
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Utility functions to help with version control systems."""

import os.path
import shutil

from translate.storage import versioncontrol

from django.conf import settings

from pootle_store.util import relative_real_path


def to_vcs_path(path):
    # FIXME: this is ignoring symlinks!
    path = relative_real_path(path)
    return os.path.join(settings.VCS_DIRECTORY, path)


def to_podir_path(path):
    path = relative_real_path(path)
    return os.path.join(settings.PODIRECTORY, path)


def hasversioning(path):
    path = to_vcs_path(path)
    return versioncontrol.hasversioning(path, settings.VCS_DIRECTORY)


def commit_file(path, message, author):
    vcs_path = to_vcs_path(path)
    path = to_podir_path(path)
    shutil.copy2(path, vcs_path)
    versioncontrol.commitfile(vcs_path, message=message, author=author)


def copy_to_podir(path):
    """Copy the given path from the VCS directory to the PO directory."""
    vcs_path = to_vcs_path(path)
    path = to_podir_path(path)
    shutil.copy2(vcs_path, path)


def update_file(path):
    vcs_path = to_vcs_path(path)
    path = to_podir_path(path)
    versioncontrol.updatefile(vcs_path)
    shutil.copy2(vcs_path, path)


def update_dir(path):
    """Updates a whole directory without syncing with the po directory.

    This assumes that we can update cleanly, and must be followed by
    :meth:`~pootle_translationproject.models.TranslationProject.scan_files`
    since the podirectory isn't updated as part of this call.

    For some systems (like git) this can cause the rest of a cloned repository
    to be updated as well, so changes might not be limited to the given path.
    """
    vcs_path = to_vcs_path(path)
    vcs_object = versioncontrol.get_versioned_object(vcs_path)
    vcs_object.update(needs_revert=False)


def add_files(path, files, message, author=None):
    vcs_path = to_vcs_path(path)
    path = to_podir_path(path)
    vcs = versioncontrol.get_versioned_object(vcs_path)
    #: list of (podir_path, vcs_path) tuples
    file_paths = [(to_podir_path(f), to_vcs_path(f)) for f in files]
    for podir_path, vcs_path in file_paths:
        vcs_dir = os.path.dirname(vcs_path)
        if not os.path.exists(vcs_dir):
            os.makedirs(vcs_dir)
        shutil.copy(podir_path, vcs_path)
    output = vcs.add([to_vcs_path(f) for f in files], message, author)
    return output

########NEW FILE########
__FILENAME__ = feeds
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2010,2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django.contrib.syndication.views import Feed
from django.core.exceptions import PermissionDenied
from django.shortcuts import get_object_or_404

from pootle_app.models import Directory
from pootle_app.models.permissions import (check_permission,
                                           get_matching_permissions)
from pootle_notifications.models import Notice
from pootle_notifications.views import directory_to_title
from pootle_profile.models import get_profile


class NoticeFeed(Feed):
    title_template = "notifications/notice_title.html"
    description_template = "notifications/notice_body.html"

    def get_object(self, request, path):
        pootle_path = '/%s' % path
        directory = get_object_or_404(Directory, pootle_path=pootle_path)

        request.permissions = get_matching_permissions(
                get_profile(request.user), directory
        )
        if not check_permission('view', request):
            raise PermissionDenied

        self.directory = directory
        self.link = directory.get_absolute_url()
        self.recusrive = request.GET.get('all', False)

        return self.directory

    def title(self, directory):
        return directory_to_title(directory)

    def items(self, directory):
        if self.recusrive:
            return Notice.objects.filter(
                    directory__pootle_path__startswith=directory.pootle_path
                ).select_related('directory')[:30]
        else:
            return Notice.objects.filter(directory=directory) \
                                 .select_related('directory')[:30]

    def item_pubdate(self, item):
        return item.added

########NEW FILE########
__FILENAME__ = forms
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django import forms
from django.utils.translation import ugettext_lazy as _

from pootle_app.models import Directory
from pootle_notifications.models import Notice
from pootle_project.models import Project


def form_factory(current_directory):

    class _NoticeForm(forms.ModelForm):
        directory = forms.ModelChoiceField(
            queryset=Directory.objects.filter(pk=current_directory.pk),
            initial=current_directory.pk,
            widget=forms.HiddenInput(),
        )
        publish_rss = forms.BooleanField(
            label=_('Publish on news feed'),
            required=False,
            initial=True,
        )
        send_email = forms.BooleanField(
            label=_('Send email'),
            required=False,
        )
        email_header = forms.CharField(
            label=_('Title'),
            required=False,
        )
        restrict_to_active_users = forms.BooleanField(
            label=_('Email only to recently active users'),
            required=False,
            initial=True,
        )

        # Project selection
        if current_directory.is_language() or current_directory.is_root:
            project_all = forms.BooleanField(
                label=_('All Projects'),
                required=False,
            )
            project_selection = forms.ModelMultipleChoiceField(
                label=_("Project Selection"),
                queryset=Project.objects.all(),
                required=False,
                widget=forms.SelectMultiple(attrs={
                    'class': 'js-select2 select2-multiple',
                    'data-placeholder': _('Select one or more projects'),
                }),
            )

        # Language selection
        if current_directory.is_project() or current_directory.is_root:
            language_all = forms.BooleanField(
                label=_('All Languages'),
                required=False,
            )
            language_selection = forms.ModelMultipleChoiceField(
                label=_("Language Selection"),
                queryset=current_directory.project.languages,
                required=False,
                widget=forms.SelectMultiple(attrs={
                    'class': 'js-select2 select2-multiple',
                    'data-placeholder': _('Select one or more languages'),
                }),
            )

        class Meta:
            model = Notice

    return _NoticeForm

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Notice'
        db.create_table('pootle_notifications_notice', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('directory', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_app.Directory'])),
            ('message', self.gf('django.db.models.fields.TextField')()),
            ('added', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, null=True, db_index=True, blank=True)),
        ))
        db.send_create_signal('pootle_notifications', ['Notice'])


    def backwards(self, orm):
        # Deleting model 'Notice'
        db.delete_table('pootle_notifications_notice')


    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_notifications.notice': {
            'Meta': {'ordering': "['-added']", 'object_name': 'Notice'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'directory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_app.Directory']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {})
        }
    }

    complete_apps = ['pootle_notifications']
########NEW FILE########
__FILENAME__ = models
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import locale

from django.core.urlresolvers import reverse
from django.db import models
from django.utils.translation import ugettext_lazy as _


class Notice(models.Model):
    directory = models.ForeignKey('pootle_app.Directory', db_index=True)
    message = models.TextField(_('Message'))
    added = models.DateTimeField(
        # Translators: The date that the news item was written
        _('Added'),
        auto_now_add=True,
        null=True,
        db_index=True,
    )

    class Meta:
        ordering = ["-added"]

    def __unicode__(self):
        return self.message

    def get_absolute_url(self):
        return reverse('pootle-notifications-notice',
                       args=[self.directory.pootle_path, self.id])

    def get_date(self):
        return self.added.strftime(locale.nl_langinfo(locale.D_T_FMT))

########NEW FILE########
__FILENAME__ = notification_tags
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django import template

from pootle_app.models.directory import Directory
from pootle_app.models.permissions import check_profile_permission
from pootle_profile.models import get_profile
from pootle_notifications.models import Notice

register = template.Library()


@register.inclusion_tag('notifications/_latest.html', takes_context=True)
def render_latest_news(context, path, num):
    try:
        directory = Directory.objects.get(pootle_path='/%s' % path)
        user = context['user']
        can_view = check_profile_permission(get_profile(user), "view", directory)
        if not can_view:
            directory = None
    except Directory.DoesNotExist:
        directory = None

    if directory is None:
        return {'news_items': None}
    news_items = Notice.objects.filter(directory=directory)[:num]
    return {'news_items': news_items}

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url

from pootle_notifications.feeds import NoticeFeed


urlpatterns = patterns('pootle_notifications',
    # Feed
    url(r'^(?P<path>.*)notices/rss.xml$',
        NoticeFeed(),
        name='pootle-notifications-feed'),

    url(r'^projects/(?P<project_code>[^/]*)/notices/$',
        'views.view',
        name='pootle-notifications-project-notices'),
    url(r'^(?P<language_code>[^/]*)/notices/$',
        'views.view',
        name='pootle-notifications-language-notices'),
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/notices/$',
        'views.view',
        name='pootle-notifications-tp-notices'),

    url(r'^(?P<path>.*)notices/(?P<notice_id>[0-9]+)/$',
        'views.view_notice_item',
        name='pootle-notifications-notice'),
)

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django.core.exceptions import PermissionDenied
from django.core.urlresolvers import reverse
from django.http import Http404
from django.shortcuts import get_object_or_404, render
from django.template import RequestContext
from django.utils.translation import ugettext as _

from pootle.core.decorators import get_path_obj
from pootle.i18n.gettext import tr_lang
from pootle_app.models import Directory
from pootle_app.models.permissions import (get_matching_permissions,
                                           check_permission,
                                           check_profile_permission)
from pootle_misc.mail import send_mail
from pootle_notifications.forms import form_factory
from pootle_notifications.models import Notice
from pootle_profile.models import get_profile, PootleProfile
from pootle_translationproject.models import TranslationProject


@get_path_obj
def view(request, path_obj):
    directory = path_obj.directory

    # Find language and project defaults, passed to handle_form.
    proj = None
    lang = None
    if directory.is_translationproject():
        trans_proj = path_obj
        lang = path_obj.language
        proj = path_obj.project
    elif directory.is_language():
        lang = path_obj
    elif directory.is_project():
        proj = path_obj
    else:
        # Notices lists are only shown for languages, projects or TPs.
        raise Http404

    # Set permissions on request in order to allow check them later using
    # different functions.
    request.permissions = get_matching_permissions(get_profile(request.user),
                                                   directory)

    if request.GET.get('all', False):
        criteria = {
            'directory__pootle_path__startswith': directory.pootle_path,
        }
    else:
        criteria = {
            'directory': directory,
        }

    ctx = {
        'page': 'news',

        'notification_url': reverse('pootle-notifications-feed',
                                    args=[path_obj.pootle_path[:1]]),
        'directory': directory,
        'title': directory_to_title(directory),
        'notices': Notice.objects.filter(**criteria) \
                                 .select_related('directory')[:30],
        'language': lang,
        'project': proj,
    }

    if check_permission('administrate', request):
        ctx['form'] = handle_form(request, directory, proj, lang, ctx)

    return render(request, "notifications/notices.html", ctx)


def directory_to_title(directory):
    """Figures out if directory refers to a Language or TranslationProject and
    returns appropriate string for use in titles.
    """
    if directory.is_language():
        trans_vars = {
            'language': tr_lang(directory.language.fullname),
        }
        return _('News for %(language)s', trans_vars)
    elif directory.is_project():
        trans_vars = {
            'project': directory.project.fullname,
        }
        return _('News for %(project)s', trans_vars)
    elif directory.is_translationproject():
        trans_vars = {
            'language': tr_lang(directory.translationproject.language.fullname),
            'project': directory.translationproject.project.fullname,
        }
        return _('News for the %(project)s project in %(language)s', trans_vars)
    return _('News for %(path)s', {'path': directory.pootle_path})


def create_notice(creator, message, directory):
    profile = get_profile(creator)
    if not check_profile_permission(profile, 'administrate', directory):
        raise PermissionDenied
    new_notice = Notice(directory=directory, message=message)
    new_notice.save()
    return new_notice


def get_recipients(restrict_to_active_users, directory):
    to_list = PootleProfile.objects.all()

    # Take into account 'only active users' flag from the form.
    if restrict_to_active_users:
        to_list = to_list.exclude(submission=None).exclude(suggestion=None) \
                                                  .exclude(suggester=None)

    recipients = []
    for person in to_list:
        # Check if the User profile has permissions in the directory.
        if not check_profile_permission(person, 'view', directory,
                                        check_default=False):
            continue

        if person.user.email:
            recipients.append(person.user.email)

    return recipients


def handle_form(request, current_directory, current_project, current_language,
                ctx):
    if request.method != 'POST':
        # Not a POST method. Return a default starting state of the form
        return form_factory(current_directory)()

    # Reconstruct the NoticeForm with the user data.
    form = form_factory(current_directory)(request.POST)
    if not form.is_valid():
        return form

    message = form.cleaned_data['message']
    languages = form.cleaned_data.get('language_selection', [])
    projects = form.cleaned_data.get('project_selection', [])
    publish_dirs = []
    ctx['notices_published'] = []

    # Figure out which directories, projects, and languages are involved
    if current_language and current_project:
        # The current translation project
        publish_dirs = [current_directory]
        languages = [current_language]
        projects = [current_project]
    elif current_language:
        languages = [current_language]
        if form.cleaned_data['project_all']:
            # The current language
            publish_dirs = [current_language.directory]
        else:
            # Certain projects in the current language
            translation_projects = TranslationProject.objects.filter(
                    language=current_language, project__in=projects)
            publish_dirs = [tp.directory for tp in translation_projects]
    elif current_project:
        projects = [current_project]
        if form.cleaned_data['language_all']:
            # The current project
            publish_dirs = [current_project.directory]
        else:
            # Certain languages in the current project
            translation_projects = TranslationProject.objects.filter(
                    language__in=languages, project=current_project)
            publish_dirs = [tp.directory for tp in translation_projects]
    else:
        # The form is top-level (server-wide)
        if form.cleaned_data['project_all']:
            if form.cleaned_data['language_all']:
                # Publish at server root
                publish_dirs = [current_directory]
            else:
                # Certain languages
                publish_dirs = [l.directory for l in languages]
        else:
            if form.cleaned_data['language_all']:
                # Certain projects
                publish_dirs = [p.directory for p in projects]
            else:
                # Specific translation projects
                translation_projects = TranslationProject.objects.filter(
                        language__in=languages, project__in=projects)
                publish_dirs = [tp.directory for tp in translation_projects]

    # RSS (notices)
    if form.cleaned_data['publish_rss']:
        for d in publish_dirs:
            new_notice = create_notice(request.user, message, d)
            ctx['notices_published'].append(new_notice)

    # E-mail
    if form.cleaned_data['send_email']:
        email_header = form.cleaned_data['email_header']
        recipients = get_recipients(
            form.cleaned_data['restrict_to_active_users'],
            form.cleaned_data['directory']
        )
        # Send the email to the recipients, ensuring addresses are hidden
        send_mail(email_header, message, bcc=recipients, fail_silently=True)

    form = form_factory(current_directory)()

    return form


def view_notice_item(request, path, notice_id):
    notice = get_object_or_404(Notice, id=notice_id)
    ctx = {
        "title": _("View News Item"),
        "notice_message": notice.message,
    }
    return render(request, "notifications/view_notice.html", ctx)

########NEW FILE########
__FILENAME__ = api
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/>.

from django.contrib.auth.models import User

from tastypie.authentication import BasicAuthentication
from tastypie.authorization import DjangoAuthorization
from tastypie.exceptions import Unauthorized

from pootle.core.api import StatisticsModelResource
from pootle_profile.models import PootleProfile


class UserObjectsOnlyAuthorization(DjangoAuthorization):
    """Custom Authorization class for checking access to UserResource objects.

    This relies on DjangoAuthorization provided by Tastypie, but ensures that:

    * User resources are only accessed if the consumer is the resource owner,
    * All consumers can access all users statistics.
    """
    def _get_authorized_objects(self, object_list, bundle):
        """Return the object list only with objects owned by the consumer.

        Return the complete object list if the consumer is a superuser.

        Should return an empty list if none are allowed.
        """
        # Do not show any object when performing a GET request unless an exact
        # filter on 'username' is provided.
        if (bundle.request.method == 'GET' and
            'username__exact' not in bundle.request.GET):
            raise Unauthorized("You are not allowed to access that resource.")

        # If the consumer is a superuser then return all the objects.
        if bundle.request.user.is_superuser:
            return object_list

        # This assumes that object_list is a QuerySet from ModelResource.
        return object_list.filter(pk=bundle.request.user.pk)

    def _is_authorized_for_object(self, bundle):
        """Return the authorization status for current object.

        This method:

        * Returns ``True`` if the object belongs to the consumer, or if the
          consumer is a superuser,
        * Raises ``Unauthorized`` if it doesn't belong to the consumer.
        """
        if (bundle.obj == bundle.request.user or
            bundle.request.user.is_superuser or
            bundle.request.path.endswith("/statistics/")):
            return True
        raise Unauthorized("You are not allowed to access that resource.")

    def read_list(self, object_list, bundle):
        """Return a list of all the objects the consumer is allowed to read.

        Should return an empty list if none are allowed.
        """
        object_list = super(UserObjectsOnlyAuthorization, self).read_list(
                object_list, bundle)
        return self._get_authorized_objects(object_list, bundle)

    def read_detail(self, object_list, bundle):
        """Return the authorization status for reading the current object.

        This method:

        * Returns ``True`` if the consumer is allowed to read the object,
        * Raises ``Unauthorized`` if the consumer is not allowed to read it.
        """
        authorized = super(UserObjectsOnlyAuthorization, self).read_detail(
                object_list, bundle)
        return authorized and self._is_authorized_for_object(bundle)

    def update_list(self, object_list, bundle):
        """Return a list of all the objects the consumer is allowed to update.

        Should return an empty list if none are allowed.
        """
        object_list = super(UserObjectsOnlyAuthorization, self).update_list(
                object_list, bundle)
        return self._get_authorized_objects(object_list, bundle)

    def update_detail(self, object_list, bundle):
        """Return the authorization status for updating the current object.

        This method:

        * Returns ``True`` if the consumer is allowed to update the object,
        * Raises ``Unauthorized`` if the consumer is not allowed to update it.
        """
        authorized = super(UserObjectsOnlyAuthorization, self).update_detail(
                object_list, bundle)
        return authorized and self._is_authorized_for_object(bundle)

    def delete_list(self, object_list, bundle):
        """Return a list of all the objects the consumer is allowed to delete.

        Should return an empty list if none are allowed.
        """
        object_list = super(UserObjectsOnlyAuthorization, self).delete_list(
                object_list, bundle)
        return self._get_authorized_objects(object_list, bundle)

    def delete_detail(self, object_list, bundle):
        """Return the authorization status for deleting the current object.

        This method:

        * Returns ``True`` if the consumer is allowed to delete the object,
        * Raises ``Unauthorized`` if the consumer is not allowed to delete it.
        """
        authorized = super(UserObjectsOnlyAuthorization, self).delete_detail(
                object_list, bundle)
        return authorized and self._is_authorized_for_object(bundle)


class UserResource(StatisticsModelResource):
    class Meta:
        queryset = User.objects.all()
        resource_name = 'users'
        fields = [
            'date_joined',
            'email',
            'first_name',
            'last_name',
            'username',
        ]
        list_allowed_methods = ['post', 'get']
        filtering = {
            "username": ('exact', ),
        }
        # List of fields shown when visiting /statistics/
        statistics_fields = [
            'statistics',
            'username',
        ]
        # HTTP methods allowed for visiting /statistics/ URLs.
        statistics_allowed_methods = ['get']
        authorization = UserObjectsOnlyAuthorization()
        authentication = BasicAuthentication()

    def obj_create(self, bundle, **kwargs):
        """Custom user creation that sends a password reset email."""
        value = super(UserResource, self).obj_create(bundle, **kwargs)

        # Send the password reset email so the user can set its own password.
        from django.contrib.auth.forms import PasswordResetForm
        from django.conf import settings

        form = PasswordResetForm({'email': bundle.obj.email})
        form.full_clean()
        tpl = "account/password_reset_email_for_api_user_creation.html"
        form.save(email_template_name=tpl,
                  from_email=settings.DEFAULT_FROM_EMAIL)

        return value

    def retrieve_statistics(self, bundle):
        """Retrieve the statistics for the current resource object."""
        up = PootleProfile.objects.get(user=bundle.obj)
        return up.contributions

    def dehydrate(self, bundle):
        """A hook to allow final manipulation of data.

        It is run after all fields/methods have built out the dehydrated data.

        Useful if you need to access more than one dehydrated field or want to
        annotate on additional data.

        Must return the modified bundle.
        """
        bundle = super(UserResource, self).dehydrate(bundle)
        if not bundle.obj == bundle.request.user:
            # Remove sensitive data when other users look at the statistics for
            # a given user.
            for field in self._meta.fields:
                if field not in self._meta.statistics_fields:
                    bundle.data.pop(field, None)
        return bundle

########NEW FILE########
__FILENAME__ = forms
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import forms
from django.contrib import auth
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _

from .models import PootleProfile


class UserForm(forms.ModelForm):

    class Meta:
        model = User
        fields = ('first_name', 'last_name', 'email')


def pootle_profile_form_factory(exclude_fields):

    class PootleProfileForm(forms.ModelForm):

        class Meta:
            model = PootleProfile

        def __init__(self, *args, **kwargs):
            self.exclude_fields = exclude_fields
            super(PootleProfileForm, self).__init__(*args, **kwargs)

            # Delete the fields the user can't edit.
            for field in self.exclude_fields:
                del self.fields[field]
            self.fields['alt_src_langs'].widget.attrs['class'] = \
                "js-select2 select2-multiple"
            self.fields['alt_src_langs'].widget.attrs['data-placeholder'] = \
                _('Select one or more languages')

    return PootleProfileForm

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'PootleProfile'
        db.create_table('pootle_app_pootleprofile', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['auth.User'], unique=True)),
            ('unit_rows', self.gf('django.db.models.fields.SmallIntegerField')(default=9)),
            ('input_height', self.gf('django.db.models.fields.SmallIntegerField')(default=5)),
            ('ui_lang', self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True)),
        ))
        db.send_create_signal('pootle_profile', ['PootleProfile'])


    def backwards(self, orm):
        # Deleting model 'PootleProfile'
        db.delete_table('pootle_app_pootleprofile')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_languages'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'to': "orm['pootle_project.Project']", 'symmetrical': 'False', 'blank': 'True'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        }
    }

    complete_apps = ['pootle_profile']

########NEW FILE########
__FILENAME__ = 0002_add_m2ms
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models, connection


class Migration(SchemaMigration):

    def forwards(self, orm):
        cursor = connection.cursor()
        if "pootle_app_pootleprofile_languages" in connection.introspection.get_table_list(cursor):
            # skip the migration if it shouldnt be applied
            return

        # Adding M2M table for field languages on 'PootleProfile'
        db.create_table('pootle_app_pootleprofile_languages', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('pootleprofile', models.ForeignKey(orm['pootle_profile.pootleprofile'], null=False)),
            ('language', models.ForeignKey(orm['pootle_language.language'], null=False))
        ))
        db.create_unique('pootle_app_pootleprofile_languages', ['pootleprofile_id', 'language_id'])

        # Adding M2M table for field projects on 'PootleProfile'
        db.create_table('pootle_app_pootleprofile_projects', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('pootleprofile', models.ForeignKey(orm['pootle_profile.pootleprofile'], null=False)),
            ('project', models.ForeignKey(orm['pootle_project.project'], null=False))
        ))
        db.create_unique('pootle_app_pootleprofile_projects', ['pootleprofile_id', 'project_id'])

        # Adding M2M table for field alt_src_langs on 'PootleProfile'
        db.create_table('pootle_app_pootleprofile_alt_src_langs', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('pootleprofile', models.ForeignKey(orm['pootle_profile.pootleprofile'], null=False)),
            ('language', models.ForeignKey(orm['pootle_language.language'], null=False))
        ))
        db.create_unique('pootle_app_pootleprofile_alt_src_langs', ['pootleprofile_id', 'language_id'])


    def backwards(self, orm):
        # Removing M2M table for field languages on 'PootleProfile'
        db.delete_table('pootle_app_pootleprofile_languages')

        # Removing M2M table for field projects on 'PootleProfile'
        db.delete_table('pootle_app_pootleprofile_projects')

        # Removing M2M table for field alt_src_langs on 'PootleProfile'
        db.delete_table('pootle_app_pootleprofile_alt_src_langs')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_languages'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'to': "orm['pootle_project.Project']", 'symmetrical': 'False', 'blank': 'True'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        }
    }

    complete_apps = ['pootle_profile']

########NEW FILE########
__FILENAME__ = 0003_auto
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Removing M2M table for field languages on 'PootleProfile'
        db.delete_table('pootle_app_pootleprofile_languages')

        # Removing M2M table for field projects on 'PootleProfile'
        db.delete_table('pootle_app_pootleprofile_projects')


    def backwards(self, orm):
        # Adding M2M table for field languages on 'PootleProfile'
        db.create_table('pootle_app_pootleprofile_languages', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('pootleprofile', models.ForeignKey(orm['pootle_profile.pootleprofile'], null=False)),
            ('language', models.ForeignKey(orm['pootle_language.language'], null=False))
        ))
        db.create_unique('pootle_app_pootleprofile_languages', ['pootleprofile_id', 'language_id'])

        # Adding M2M table for field projects on 'PootleProfile'
        db.create_table('pootle_app_pootleprofile_projects', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('pootleprofile', models.ForeignKey(orm['pootle_profile.pootleprofile'], null=False)),
            ('project', models.ForeignKey(orm['pootle_project.project'], null=False))
        ))
        db.create_unique('pootle_app_pootleprofile_projects', ['pootleprofile_id', 'project_id'])


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'})
        }
    }

    complete_apps = ['pootle_profile']
########NEW FILE########
__FILENAME__ = 0004_auto__del_field_pootleprofile_ui_lang
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'PootleProfile.ui_lang'
        db.delete_column('pootle_app_pootleprofile', 'ui_lang')


    def backwards(self, orm):
        # Adding field 'PootleProfile.ui_lang'
        db.add_column('pootle_app_pootleprofile', 'ui_lang',
                      self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True),
                      keep_default=False)


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': u"orm['pootle_language.Language']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        }
    }

    complete_apps = ['pootle_profile']
########NEW FILE########
__FILENAME__ = models
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/>.

from hashlib import md5

from django.contrib.auth.models import User, UserManager, AnonymousUser
from django.core.urlresolvers import reverse
from django.db import models
from django.db.models import Q
from django.db.models.signals import post_save
from django.utils.functional import cached_property
from django.utils.html import simple_email_re as email_re
from django.utils.translation import ugettext_lazy as _

from pootle_language.models import Language
from pootle_statistics.models import Submission, SubmissionTypes
from pootle_translationproject.models import TranslationProject


class PootleUserManager(UserManager):
    """A manager class which is meant to replace the manager class for the User
    model. This manager hides the 'nobody' and 'default' users for normal
    queries, since they are special users. Code that needs access to these
    users should use the methods get_default_user and get_nobody_user.
    """
    def get_default_user(self):
        return super(PootleUserManager, self).get_query_set() \
                                             .select_related(depth=1) \
                                             .get(username='default')

    def get_nobody_user(self):
        return super(PootleUserManager, self).get_query_set() \
                                             .select_related(depth=1) \
                                             .get(username='nobody')

    def get_system_user(self):
        return super(PootleUserManager, self).get_query_set() \
                                             .select_related(depth=1) \
                                             .get(username='system')

    def hide_defaults(self):
        return super(PootleUserManager, self).get_query_set().exclude(
                username__in=('nobody', 'default')
            )


# Since PootleUserManager has no state, we can just replace the User manager's
# class with PootleUserManager to get the desired functionality.
User.objects.__class__ = PootleUserManager


class PootleProfileManager(models.Manager):
    def get_query_set(self):
        return super(PootleProfileManager, self).get_query_set() \
                                                .select_related('alt_src_langs')


class PootleProfile(models.Model):

    # This is the only required field.
    user = models.OneToOneField(User, unique=True, db_index=True)
    unit_rows = models.SmallIntegerField(
        default=9,
        verbose_name=_("Number of Rows"),
    )
    input_height = models.SmallIntegerField(default=5, editable=False)
    alt_src_langs = models.ManyToManyField(
        'pootle_language.Language',
        blank=True,
        db_index=True,
        limit_choices_to=~Q(code='templates'),
        related_name="user_alt_src_langs",
        verbose_name=_("Alternative Source Languages"),
    )

    objects = PootleProfileManager()

    class Meta:
        db_table = 'pootle_app_pootleprofile'

    ############################ Properties ###################################

    @property
    def fullname(self):
        # FIXME: "first name + last name" is just lame
        return ('%s %s' % (self.user.first_name,
                           self.user.last_name)).strip()

    @property
    def isopen(self):
        return True

    @property
    def pootle_user(self):
        if self.user_id is not None:
            return self.user
        else:
            return AnonymousUser()

    @property
    def contributions(self):
        """Get user contributions grouped by language and project.

        :return: List of tuples containing the following information::

            [
              ('Language 1', [
                  ('Project 1', [
                      {
                        'id': 'foo-bar',
                        'count': 0,
                        'url': 'foo/bar',
                      },
                      {
                        'id': 'bar-foo',
                        'count': 3,
                        'url': 'baz/blah',
                      },
                      {
                        'id': 'baz-blah',
                        'count': 5,
                        'url': 'bar/baz',
                      },
                  ]),
                  ('Project 2', [
                      ...
                  ]),
              ]),
              ('LanguageN', [
                  ('Project N', [
                      ...
                  ]),
                  ('Project N+1', [
                      ...
                  ]),
              ]),
            ]
        """
        # TODO: optimize — we need a schema that helps reduce the number
        # of needed queries for these kind of data retrievals.
        contributions = []
        username = self.user.username

        languages = Language.objects.filter(
                translationproject__submission__submitter=self,
                translationproject__submission__type=SubmissionTypes.NORMAL,
            ).distinct()

        for language in languages:
            translation_projects = TranslationProject.objects.filter(
                    language=language,
                    submission__submitter=self,
                    submission__type=SubmissionTypes.NORMAL,
                ).distinct().order_by('project__fullname')

            tp_user_stats = []
            # Retrieve tp-specific stats for this user.
            for tp in translation_projects:
                tp_stats = [
                    {
                        'id': 'suggestions-pending',
                        'count': self.pending_suggestion_count(tp),
                        'url': tp.get_translate_url(state='user-suggestions',
                                                    user=username),
                    },
                    {
                        'id': 'suggestions-accepted',
                        'count': self.accepted_suggestion_count(tp),
                        'url': tp.get_translate_url(
                            state='user-suggestions-accepted',
                            user=username,
                        ),
                    },
                    {
                        'id': 'suggestions-rejected',
                        'count': self.rejected_suggestion_count(tp),
                        'url': tp.get_translate_url(
                            state='user-suggestions-rejected',
                            user=username,
                        ),
                    },
                    {
                        'id': 'submissions-total',
                        'count': self.total_submission_count(tp),
                        'url': tp.get_translate_url(state='user-submissions',
                                                    user=username),
                    },
                    {
                        'id': 'submissions-overwritten',
                        'count': self.overwritten_submission_count(tp),
                        'url': tp.get_translate_url(
                            state='user-submissions-overwritten',
                            user=username,
                        ),
                    },
                ]

                tp_user_stats.append((tp, tp_stats))

            contributions.append((language, tp_user_stats))

        return contributions

    ############################ Cached properties ############################

    @cached_property
    def get_email_hash(self):
        try:
            return md5(self.user.email).hexdigest()
        except UnicodeEncodeError:
            return None

    ############################ Methods ######################################

    def __unicode__(self):
        username = self.user.username

        if email_re.match(username):
            username = username.strip().rsplit('@', 1)[0]

        return username

    def get_absolute_url(self):
        return reverse('profiles_profile_detail', args=[self.user.username])

    def gravatar_url(self, size=80):
        if not self.get_email_hash:
            return ''

        return 'https://secure.gravatar.com/avatar/%s?s=%d&d=mm' % \
            (self.get_email_hash, size)

    def get_unit_rows(self):
        return min(max(self.unit_rows, 5), 49)

    def pending_suggestion_count(self, tp):
        """Return the number of pending suggestions for the user in the given
        translation project.

        :param tp: a :cls:`TranslationProject` object.
        """
        return self.suggester.filter(translation_project=tp,
                                     state='pending').count()

    def accepted_suggestion_count(self, tp):
        """Return the number of accepted suggestions for the user in the given
        translation project.

        :param tp: a :cls:`TranslationProject` object.
        """
        return self.suggester.filter(translation_project=tp,
                                     state='accepted').count()

    def rejected_suggestion_count(self, tp):
        """Return the number of rejected suggestions for the user in the given
        translation project.

        :param tp: a :cls:`TranslationProject` object.
        """
        return self.suggester.filter(translation_project=tp,
                                     state='rejected').count()

    def total_submission_count(self, tp):
        """Return the number of submissions the current user has done from the
        editor in the given translation project.

        :param tp: a :cls:`TranslationProject` object.
        """
        return Submission.objects.filter(
            submitter=self,
            translation_project=tp,
            type=SubmissionTypes.NORMAL,
        ).count()

    def overwritten_submission_count(self, tp):
        """Return the number of submissions the current user has done from the
        editor and have been overwritten by other users in the given
        translation project.

        :param tp: a :cls:`TranslationProject` object.
        """
        return Submission.objects.filter(
            submitter=self,
            translation_project=tp,
            type=SubmissionTypes.NORMAL,
        ).exclude(
            unit__submitted_by=self,
        ).count()


def get_profile(user):
    """Return the PootleProfile associated with a user.

    This function is only necessary if 'user' could be an anonymous
    user.  If you know for certain that a user is logged in, then use
    the .get_profile() method on a user instead.
    """
    if user.is_authenticated():
        # Return the PootleProfile associated with authenticated users
        return user.get_profile()
    else:
        # Anonymous users get the PootleProfile associated with the 'nobody'
        # user
        return User.objects.get(username='nobody').get_profile()


################################ Signal handlers ##############################

def create_pootle_profile(sender, instance, **kwargs):
    """A post-save hook for the User model which ensures that it gets an
    associated PootleProfile.
    """
    try:
        profile = instance.get_profile()
    except PootleProfile.DoesNotExist:
        profile = PootleProfile(user=instance)
        profile.save()

post_save.connect(create_pootle_profile, sender=User)

########NEW FILE########
__FILENAME__ = profile_tags
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2011 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import template


register = template.Library()


@register.filter
def gravatar(profile, size):
    return profile.gravatar_url(size)

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.conf.urls import include, patterns, url


urlpatterns = patterns('pootle_profile.views',
    url(r'^edit/$',
        'profile_edit',
        name='pootle-profile-edit'),
    url(r'^personal/edit/$',
        'edit_personal_info',
        name='pootle-profile-personal-edit'),
)

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.contrib.auth.decorators import login_required
from django.core.urlresolvers import reverse
from django.shortcuts import redirect, render
from profiles.views import edit_profile

from .forms import UserForm, pootle_profile_form_factory


def profile_edit(request):
    # FIXME: better to whitelist fields rather than blacklisting them.
    excluded = ('user', )

    return edit_profile(request,
                        form_class=pootle_profile_form_factory(excluded),
                        template_name='profiles/settings/profile.html')


@login_required
def edit_personal_info(request):
    if request.POST:
        post = request.POST.copy()
        user_form = UserForm(post, instance=request.user)

        if user_form.is_valid():
            user_form.save()
            redirect_url = reverse('profiles_profile_detail',
                                   kwargs={'username': request.user.username})
            response = redirect(redirect_url)
    else:
        user_form = UserForm(instance=request.user)

    ctx = {
        'form': user_form,
    }
    return render(request, "profiles/settings/personal.html", ctx)

########NEW FILE########
__FILENAME__ = api
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/>.

from django.contrib.sites.models import Site

from tastypie import fields
from tastypie.authentication import BasicAuthentication
from tastypie.authorization import DjangoAuthorization

from pootle.core.api import StatisticsModelResource
from pootle_project.models import Project
from pootle_translationproject.api import TranslationProjectResource


class ProjectResource(StatisticsModelResource):
    source_language = fields.ForeignKey(
        'pootle_language.api.LanguageResource',
        'source_language',
    )
    translation_projects = fields.ToManyField(
        TranslationProjectResource,
        'translationproject_set',
    )

    class Meta:
        queryset = Project.objects.all()
        resource_name = 'projects'
        fields = [
            'checkstyle',
            'code',
            'description',
            'fullname',
            'ignoredfiles',
            'localfiletype',
            'source_language',
            'translation_projects',
            'treestyle',
        ]
        always_return_data = True
        list_allowed_methods = ['get', 'post']
        detail_allowed_methods = ['get', 'put', 'delete', 'patch']
        # HTTP methods allowed for visiting /statistics/ URLs.
        statistics_allowed_methods = ['get']
        authorization = DjangoAuthorization()
        authentication = BasicAuthentication()

    def dehydrate(self, bundle):
        # Include a custom 'backlink' field.
        bundle.data['backlink'] = ('http://%s%s' %
                                   (Site.objects.get_current().domain,
                                    bundle.obj.get_absolute_url()))
        return bundle

    def retrieve_statistics(self, bundle):
        """Retrieve the statistics for the current resource object."""
        return bundle.obj.get_stats()

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import forms
from django.utils.translation import ugettext as _

from pootle_language.models import Language
from pootle_misc.forms import LiberalModelChoiceField
from pootle_project.models import Project
from pootle_tagging.forms import TagForm
from pootle_translationproject.models import TranslationProject


class DescriptionForm(forms.ModelForm):

    class Meta:
        model = Project
        fields = ("fullname", "description", "report_email")


class TranslationProjectTagForm(TagForm):

    def __init__(self, *args, **kwargs):
        project = kwargs.pop('project')
        super(TranslationProjectTagForm, self).__init__(*args, **kwargs)

        self.fields['translation_project'] = forms.ModelChoiceField(
            label='',  # Blank label to don't see it.
            queryset=TranslationProject.objects.filter(project=project),
            widget=forms.Select(attrs={
                'id': 'js-tags-tp',
                # Use the 'hide' class to hide the field. The HiddenInput
                # widget renders a 'input' tag instead of a 'select' one and
                # that way the translation project can't be set.
                'class': 'hide',
            }),
        )


class TranslationProjectFormSet(forms.models.BaseModelFormSet):

    def save_existing(self, form, instance, commit=True):
        result = super(TranslationProjectFormSet, self) \
                 .save_existing(form, instance, commit)
        form.process_extra_fields()
        return result

    def save_new(self, form, commit=True):
        result = super(TranslationProjectFormSet, self).save_new(form, commit)
        form.process_extra_fields()
        return result


def tp_form_factory(current_project):

    template_tp = current_project.get_template_translationproject()

    class TranslationProjectForm(forms.ModelForm):

        if template_tp is not None:
            update = forms.BooleanField(
                required=False,
                label=_("Update against templates"),
            )

        #FIXME: maybe we can detect if initialize is needed to avoid
        # displaying it when not relevant.
        #initialize = forms.BooleanField(required=False, label=_("Initialize"))

        project = forms.ModelChoiceField(
            queryset=Project.objects.filter(pk=current_project.pk),
            initial=current_project.pk,
            widget=forms.HiddenInput(),
        )
        language = LiberalModelChoiceField(
            label=_("Language"),
            queryset=Language.objects.exclude(
                translationproject__project=current_project
            ),
            widget=forms.Select(attrs={
                'class': 'js-select2 select2-language',
            }),
        )

        class Meta:
            prefix = "existing_language"
            model = TranslationProject

        def process_extra_fields(self):
            if self.instance.pk is not None:
                if self.cleaned_data.get('initialize', None):
                    self.instance.initialize()

                if (self.cleaned_data.get('update', None) or
                    not self.instance.stores.count()):
                    self.instance.update_against_templates()

    return TranslationProjectForm

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Project'
        db.create_table('pootle_app_project', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('code', self.gf('django.db.models.fields.CharField')(unique=True, max_length=255, db_index=True)),
            ('fullname', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('description_html', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('checkstyle', self.gf('django.db.models.fields.CharField')(default='standard', max_length=50)),
            ('localfiletype', self.gf('django.db.models.fields.CharField')(default='po', max_length=50)),
            ('treestyle', self.gf('django.db.models.fields.CharField')(default='auto', max_length=20)),
            ('ignoredfiles', self.gf('django.db.models.fields.CharField')(default='', max_length=255, blank=True)),
            ('directory', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['pootle_app.Directory'], unique=True)),
            ('report_target', self.gf('django.db.models.fields.CharField')(max_length=512, blank=True)),
        ))
        db.send_create_signal('pootle_project', ['Project'])


    def backwards(self, orm):
        # Deleting model 'Project'
        db.delete_table('pootle_app_project')


    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        }
    }

    complete_apps = ['pootle_project']

########NEW FILE########
__FILENAME__ = 0002_auto__del_field_project_description_html__chg_field_project_descriptio
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'Project.description_html'
        db.delete_column('pootle_app_project', 'description_html')


        # Changing field 'Project.description'
        db.alter_column('pootle_app_project', 'description', self.gf('pootle.core.markup.fields.MarkupField')())

    def backwards(self, orm):
        # Adding field 'Project.description_html'
        db.add_column('pootle_app_project', 'description_html',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True),
                      keep_default=False)


        # Changing field 'Project.description'
        db.alter_column('pootle_app_project', 'description', self.gf('django.db.models.fields.TextField')())

    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        }
    }

    complete_apps = ['pootle_project']
########NEW FILE########
__FILENAME__ = 0003_add_m2ms
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models, connection


class Migration(SchemaMigration):

    def forwards(self, orm):
        cursor = connection.cursor()
        if "source_language_id" in [column[0] for column in connection.introspection.get_table_description(cursor, "pootle_app_project")]:
            # skip the migration if it shouldnt be applied
            return

        # Adding field 'Project.source_language'
        db.add_column('pootle_app_project', 'source_language',
                      self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['pootle_language.Language']),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Project.source_language'
        db.delete_column('pootle_app_project', 'source_language')

    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        }
    }

    complete_apps = ['pootle_project']

########NEW FILE########
__FILENAME__ = 0004_auto__del_field_project_report_target
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'Project.report_target'
        db.delete_column('pootle_app_project', 'report_target')


    def backwards(self, orm):
        # Adding field 'Project.report_target'
        db.add_column('pootle_app_project', 'report_target',
                      self.gf('django.db.models.fields.CharField')(default='', max_length=512, blank=True),
                      keep_default=False)


    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        }
    }

    complete_apps = ['pootle_project']

########NEW FILE########
__FILENAME__ = 0005_auto__add_field_project_report_email
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Project.report_email'
        db.add_column('pootle_app_project', 'report_email',
                      self.gf('django.db.models.fields.EmailField')(default='', max_length=254, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Project.report_email'
        db.delete_column('pootle_app_project', 'report_email')


    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        }
    }

    complete_apps = ['pootle_project']
########NEW FILE########
__FILENAME__ = 0006_auto__add_field_project_disabled
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Project.disabled'
        db.add_column('pootle_app_project', 'disabled',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Project.disabled'
        db.delete_column('pootle_app_project', 'disabled')


    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        }
    }

    complete_apps = ['pootle_project']
########NEW FILE########
__FILENAME__ = models
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging
import os

from django.conf import settings
from django.contrib.auth.models import User
from django.core.cache import cache
from django.core.exceptions import ObjectDoesNotExist, ValidationError
from django.core.urlresolvers import reverse
from django.db import connection, models
from django.db.models import Q
from django.db.models.signals import post_delete, post_save
from django.dispatch import receiver
from django.utils.encoding import iri_to_uri
from django.utils.functional import cached_property
from django.utils.translation import ugettext_lazy as _

from translate.filters import checks
from translate.lang.data import langcode_re

from pootle.core.cache import make_method_key
from pootle.core.managers import RelatedManager
from pootle.core.markup import get_markup_filter_name, MarkupField
from pootle.core.mixins import TreeItem
from pootle.core.models import VirtualResource
from pootle.core.url_helpers import (get_editor_filter, get_path_sortkey,
                                     split_pootle_path)
from pootle_app.models.directory import Directory
from pootle_app.models.permissions import PermissionSet
from pootle_store.filetypes import (factory_classes, filetype_choices,
                                    is_monolingual)
from pootle_store.util import absolute_real_path


# FIXME: Generate key dynamically
CACHE_KEY = 'pootle-projects'

RESERVED_PROJECT_CODES = ('admin', 'translate', 'settings')


class ProjectManager(RelatedManager):

    def cached(self):
        projects = cache.get(CACHE_KEY)
        if not projects:
            projects = self.order_by('fullname').all()
            cache.set(CACHE_KEY, projects, settings.OBJECT_CACHE_TIMEOUT)

        return projects


class ProjectURLMixin(object):
    """Mixin class providing URL methods to be shared across
    project-related classes.
    """

    def get_absolute_url(self):
        return reverse('pootle-project-overview', args=[self.code, ''])

    def get_translate_url(self, **kwargs):
        lang, proj, dir, fn = split_pootle_path(self.pootle_path)

        if proj is not None:
            pattern_name = 'pootle-project-translate'
            pattern_args = [proj, dir, fn]
        else:
            pattern_name = 'pootle-projects-translate'
            pattern_args = []

        return u''.join([
            reverse(pattern_name, args=pattern_args),
            get_editor_filter(**kwargs),
        ])



class Project(models.Model, TreeItem, ProjectURLMixin):

    code = models.CharField(
        max_length=255,
        null=False,
        unique=True,
        db_index=True,
        verbose_name=_('Code'),
        help_text=_('A short code for the project. This should only contain '
                    'ASCII characters, numbers, and the underscore (_) '
                    'character.'),
    )
    fullname = models.CharField(
        max_length=255,
        null=False,
        verbose_name=_("Full Name"),
    )
    description = MarkupField(
        blank=True,
        help_text=_('A description of this project. This is useful to give '
                    'more information or instructions. Allowed markup: %s',
                    get_markup_filter_name()),
    )

    checker_choices = [('standard', 'standard')]
    checkers = list(checks.projectcheckers.keys())
    checkers.sort()
    checker_choices.extend([(checker, checker) for checker in checkers])
    checkstyle = models.CharField(
        max_length=50,
        default='standard',
        null=False,
        choices=checker_choices,
        verbose_name=_('Quality Checks'),
    )

    localfiletype = models.CharField(
        max_length=50,
        default="po",
        choices=filetype_choices,
        verbose_name=_('File Type'),
    )
    treestyle = models.CharField(
        max_length=20,
        default='auto',
        choices=(
            # TODO: check that the None is stored and handled correctly
            ('auto', _('Automatic detection (slower)')),
            ('gnu', _('GNU style: files named by language code')),
            ('nongnu', _('Non-GNU: Each language in its own directory')),
        ),
        verbose_name=_('Project Tree Style'),
    )
    source_language = models.ForeignKey(
        'pootle_language.Language',
        db_index=True,
        verbose_name=_('Source Language'),
    )
    ignoredfiles = models.CharField(
        max_length=255,
        blank=True,
        null=False,
        default="",
        verbose_name=_('Ignore Files'),
    )
    directory = models.OneToOneField(
        'pootle_app.Directory',
        db_index=True,
        editable=False,
    )
    report_email = models.EmailField(
        max_length=254,
        blank=True,
        verbose_name=_("Errors Report Email"),
        help_text=_('An email address where issues with the source text can '
                    'be reported.'),
    )

    disabled = models.BooleanField(verbose_name=_('Disabled'), default=False)

    objects = ProjectManager()

    class Meta:
        ordering = ['code']
        db_table = 'pootle_app_project'

    ############################ Properties ###################################

    @property
    def name(self):
        return self.fullname

    @property
    def pootle_path(self):
        return "/projects/" + self.code + "/"

    @property
    def is_terminology(self):
        """Returns ``True`` if this project is a terminology project."""
        return self.checkstyle == 'terminology'

    @property
    def is_monolingual(self):
        """Return ``True`` if this project is monolingual."""
        return is_monolingual(self.get_file_class())

    ############################ Cached properties ############################

    @cached_property
    def languages(self):
        """Returns a list of active :cls:`~pootle_languages.models.Language`
        objects for this :cls:`~pootle_project.models.Project`.
        """
        from pootle_language.models import Language
        # FIXME: we should better have a way to automatically cache models with
        # built-in invalidation -- did I hear django-cache-machine?
        return Language.objects.filter(Q(translationproject__project=self),
                                       ~Q(code='templates'))

    @cached_property
    def resources(self):
        """Returns a list of :cls:`~pootle_app.models.Directory` and
        :cls:`~pootle_store.models.Store` resource paths available for
        this :cls:`~pootle_project.models.Project` across all languages.
        """
        cache_key = make_method_key(self, 'resources', self.code)

        resources = cache.get(cache_key, None)
        if resources is not None:
            return resources

        logging.debug(u'Cache miss for %s', cache_key)

        resources_path = ''.join(['/%/', self.code, '/%'])

        if connection.vendor == 'mysql':
            sql_query = '''
            SELECT DISTINCT
                REPLACE(pootle_path,
                        CONCAT(SUBSTRING_INDEX(pootle_path, '/', 3), '/'),
                        '')
            FROM (
                SELECT pootle_path
                FROM pootle_store_store
                WHERE pootle_path LIKE %s
              UNION
                SELECT pootle_path FROM pootle_app_directory
                WHERE pootle_path LIKE %s
            ) AS t;
            '''
        elif connection.vendor == 'postgresql':
            sql_query = '''
            SELECT DISTINCT
                REPLACE(pootle_path,
                        ARRAY_TO_STRING((
                                         STRING_TO_ARRAY(pootle_path,'/')
                                        )[1:3], '/')
                        || '/',
                        '')
            FROM (
                SELECT pootle_path
                FROM pootle_store_store
                WHERE pootle_path LIKE %s
              UNION
                SELECT pootle_path FROM pootle_app_directory
                WHERE pootle_path LIKE %s
            ) AS t;
            '''
        elif connection.vendor == 'sqlite':
            # Due to the limitations of SQLite there is no way to do this just
            # using raw SQL.
            from pootle_store.models import Store

            store_objs = Store.objects.extra(
                where=[
                    'pootle_store_store.pootle_path LIKE %s',
                    'pootle_store_store.pootle_path NOT LIKE %s',
                ], params=[resources_path, '/templates/%']
            ).select_related('parent').distinct()

            # Populate with stores and their parent directories, avoiding any
            # duplicates
            resources = []
            for store in store_objs.iterator():
                directory = store.parent
                if (not directory.is_translationproject() and
                    all(directory.path != path for path in resources)):
                    resources.append(directory.path)

                if all(store.path != path for path in resources):
                    resources.append(store.path)

            resources.sort(key=get_path_sortkey)

            cache.set(cache_key, resources, settings.OBJECT_CACHE_TIMEOUT)
            return resources

        cursor = connection.cursor()
        cursor.execute(sql_query, [resources_path, resources_path])

        results = cursor.fetchall()

        # Flatten tuple and sort in a list
        resources = list(reduce(lambda x,y: x+y, results))
        resources.sort(key=get_path_sortkey)

        cache.set(cache_key, resources, settings.OBJECT_CACHE_TIMEOUT)

        return resources

    ############################ Methods ######################################

    @classmethod
    def for_username(self, username):
        """Returns a list of project codes available to `username`.

        Checks for `view` permissions in project directories, and if no
        explicit permissions are available, falls back to the root
        directory for that user.
        """
        key = iri_to_uri('projects:accessible:%s' % username)
        user_projects = cache.get(key, None)

        if user_projects is None:
            logging.debug(u'Cache miss for %s', key)
            lookup_args = {
                'directory__permission_sets__positive_permissions__codename':
                    'view',
                'directory__permission_sets__profile__user__username':
                    username,
            }
            user_projects = self.objects.cached().filter(**lookup_args) \
                                                 .values_list('code', flat=True)

            # No explicit permissions for projects, let's examine the root
            if not user_projects.count():
                root_permissions = PermissionSet.objects.filter(
                    directory__pootle_path='/',
                    profile__user__username=username,
                    positive_permissions__codename='view',
                )
                if root_permissions.count():
                    user_projects = self.objects.cached() \
                                                .values_list('code', flat=True)

            cache.set(key, user_projects, settings.OBJECT_CACHE_TIMEOUT)

        return user_projects

    @classmethod
    def accessible_by_user(self, user):
        """Returns a list of project codes accessible by `user`.

        First checks for `user`, and if no explicit `view` permissions
        have been found, falls back to `default` (if logged-in) and
        `nobody` users.
        """
        user_projects = []

        check_usernames = ['nobody']
        if user.is_authenticated():
            check_usernames = [user.username, 'default', 'nobody']

        for username in check_usernames:
            user_projects = self.for_username(username)

            if user_projects:
                break

        return user_projects

    def __unicode__(self):
        return self.fullname

    def __init__(self, *args, **kwargs):
        super(Project, self).__init__(*args, **kwargs)

    def save(self, *args, **kwargs):
        # Create file system directory if needed
        project_path = self.get_real_path()
        if not os.path.exists(project_path):
            os.makedirs(project_path)

        from pootle_app.models.directory import Directory
        self.directory = Directory.objects.projects \
                                          .get_or_make_subdir(self.code)

        super(Project, self).save(*args, **kwargs)

        # FIXME: far from ideal, should cache at the manager level instead
        cache.delete(CACHE_KEY)
        users_list = User.objects.values_list('username', flat=True)
        cache.delete_many(map(lambda x: 'projects:accessible:%s' % x,
                              users_list))

    def delete(self, *args, **kwargs):
        directory = self.directory

        # Just doing a plain delete will collect all related objects in memory
        # before deleting: translation projects, stores, units, quality checks,
        # pootle_store suggestions, pootle_app suggestions and submissions.
        # This can easily take down a process. If we do a translation project
        # at a time and force garbage collection, things stay much more
        # managable.
        import gc
        gc.collect()
        for tp in self.translationproject_set.iterator():
            tp.delete()
            gc.collect()

        super(Project, self).delete(*args, **kwargs)

        directory.delete()

        # FIXME: far from ideal, should cache at the manager level instead
        cache.delete(CACHE_KEY)
        users_list = User.objects.values_list('username', flat=True)
        cache.delete_many(map(lambda x: 'projects:accessible:%s' % x,
                              users_list))

    def clean(self):
        if self.code in RESERVED_PROJECT_CODES:
            raise ValidationError(
                _('"%s" cannot be used as a project code' % (self.code,))
            )

    ### TreeItem

    def get_children(self):
        return self.translationproject_set.all()

    def get_cachekey(self):
        return self.directory.pootle_path

    def get_parents(self):
        from pootle_app.models.directory import Directory
        return [Directory.objects.projects]

    ### /TreeItem

    def translated_percentage(self):
        total = self.get_total_wordcount()
        translated = self.get_translated_wordcount()
        max_words = max(total, 1)
        return int(100.0 * translated / max_words)

    def get_real_path(self):
        return absolute_real_path(self.code)

    def is_accessible_by(self, user):
        """Returns `True` if the current project is accessible by
        `user`.
        """
        if user.is_superuser:
            return True

        return self.code in Project.accessible_by_user(user)

    def get_template_filetype(self):
        if self.localfiletype == 'po':
            return 'pot'
        else:
            return self.localfiletype

    def get_file_class(self):
        """Returns the TranslationStore subclass required for parsing
        project files."""
        return factory_classes[self.localfiletype]

    def file_belongs_to_project(self, filename, match_templates=True):
        """Tests if ``filename`` matches project filetype (ie. extension).

        If ``match_templates`` is ``True``, this will also check if the
        file matches the template filetype.
        """
        template_ext = os.path.extsep + self.get_template_filetype()
        return (filename.endswith(os.path.extsep + self.localfiletype)
                or match_templates and filename.endswith(template_ext))

    def _detect_treestyle(self):
        try:
            dirlisting = os.walk(self.get_real_path())
            dirpath, dirnames, filenames = dirlisting.next()

            if not dirnames:
                # No subdirectories
                if filter(self.file_belongs_to_project, filenames):
                    # Translation files found, assume gnu
                    return "gnu"
            else:
                # There are subdirectories
                if filter(lambda dirname: dirname == 'templates' or langcode_re.match(dirname), dirnames):
                    # Found language dirs assume nongnu
                    return "nongnu"
                else:
                    # No language subdirs found, look for any translation file
                    for dirpath, dirnames, filenames in os.walk(self.get_real_path()):
                        if filter(self.file_belongs_to_project, filenames):
                            return "gnu"
        except:
            pass

        # Unsure
        return None

    def get_treestyle(self):
        """Returns the real treestyle, if :attr:`Project.treestyle` is set
        to ``auto`` it checks the project directory and tries to guess
        if it is gnu style or nongnu style.

        We are biased towards nongnu because it makes managing projects
        from the web easier.
        """
        if self.treestyle != "auto":
            return self.treestyle
        else:
            detected = self._detect_treestyle()

            if detected is not None:
                return detected

        # When unsure return nongnu
        return "nongnu"

    def get_template_translationproject(self):
        """Returns the translation project that will be used as a template
        for this project.

        First it tries to retrieve the translation project that has the
        special 'templates' language within this project, otherwise it
        falls back to the source language set for current project.
        """
        try:
            return self.translationproject_set.get(language__code='templates')
        except ObjectDoesNotExist:
            try:
                return self.translationproject_set \
                           .get(language=self.source_language_id)
            except ObjectDoesNotExist:
                pass


class ProjectResource(VirtualResource, ProjectURLMixin):

    ### TreeItem

    def _get_code(self, resource):
        return resource.translation_project.language.code

    ### /TreeItem


class ProjectSet(VirtualResource, ProjectURLMixin):

    ### TreeItem

    def _get_code(self, project):
        return project.code

    ### /TreeItem


@receiver([post_delete, post_save])
def invalidate_resources_cache(sender, instance, **kwargs):
    if instance.__class__.__name__ not in ['Directory', 'Store']:
        return

    # Don't invalidate if the save didn't create new objects
    if (('created' in kwargs and 'raw' in kwargs) and
        (not kwargs['created'] or kwargs['raw'])):
        return

    lang, proj, dir, fn = split_pootle_path(instance.pootle_path)
    if proj is not None:
        cache.delete(make_method_key(Project, 'resources', proj))

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url


urlpatterns = patterns('pootle_project.views',
    # All projects
    url(r'^$',
        'projects_overview',
        name='pootle-projects-overview'),

    url(r'^translate/$',
        'projects_translate',
        name='pootle-projects-translate'),

    url(r'^export-view/$',
        'projects_export_view',
        name='pootle-projects-export-view'),

    # Admin
    url(r'^(?P<project_code>[^/]*)/admin/settings/$',
        'project_settings_edit',
        name='pootle-project-admin-settings'),
    url(r'^(?P<project_code>[^/]*)/admin/languages/$',
        'project_admin',
        name='pootle-project-admin-languages'),
    url(r'^(?P<project_code>[^/]*)/admin/permissions/$',
        'project_admin_permissions',
        name='pootle-project-admin-permissions'),

    # Specific project
    url(r'^(?P<project_code>[^/]*)/translate/'
        r'(?P<dir_path>(.*/)*)(?P<filename>.*\.*)?$',
        'translate',
        name='pootle-project-translate'),

    url(r'^(?P<project_code>[^/]*)/export-view/'
        r'(?P<dir_path>(.*/)*)(?P<filename>.*\.*)?$',
        'export_view',
        name='pootle-project-export-view'),

    url(r'^(?P<project_code>[^/]*)/'
        r'(?P<dir_path>(.*/)*)(?P<filename>.*\.*)?$',
        'overview',
        name='pootle-project-overview'),

    # XHR views
    url(r'^(?P<project_code>[^/]*)/ajax-add-tag-to-tp/$',
        'ajax_add_tag_to_tp_in_project',
        name='pootle-xhr-tag-tp-in-project'),
    url(r'^(?P<project_code>[^/]*)/ajax-remove-tag-from-tp/'
        r'(?P<language_code>[^/]*)/(?P<tag_name>.*\.*)?$',
        'ajax_remove_tag_from_tp_in_project',
        name='pootle-xhr-untag-tp-in-project'),
    url(r'^ajax/tags/list/(?P<project_code>.*\.*)?$',
        'ajax_list_tags',
        name='pootle-xhr-list-project-tags'),
)

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import forms
from django.core.urlresolvers import reverse
from django.http import HttpResponse
from django.shortcuts import render
from django.template import loader, RequestContext
from django.utils.translation import ugettext as _
from django.views.decorators.http import require_POST

from taggit.models import Tag

from pootle.core.browser import (get_table_headings, make_language_item,
                                 make_project_list_item, make_xlanguage_item)
from pootle.core.decorators import (get_path_obj, get_resource,
                                    permission_required)
from pootle.core.helpers import (get_export_view_context, get_overview_context,
                                 get_translation_context)
from pootle.core.url_helpers import split_pootle_path
from pootle_app.models.permissions import check_permission
from pootle_misc.util import ajax_required, jsonify
from pootle_project.forms import (TranslationProjectFormSet,
                                  TranslationProjectTagForm, tp_form_factory)
from pootle_project.models import Project
from pootle_tagging.models import Goal
from pootle_translationproject.models import TranslationProject


@ajax_required
@get_path_obj
@permission_required('view')
def ajax_list_tags(request, project):
    from django.contrib.contenttypes.models import ContentType
    from django.core import serializers

    translation_projects = project.translationproject_set.all()
    ct = ContentType.objects.get_for_model(TranslationProject)
    criteria = {
        "taggit_taggeditem_items__content_type": ct,
        "taggit_taggeditem_items__object_id__in": translation_projects,
    }

    queryset = Tag.objects.filter(**criteria).distinct()  # .values_list("id", "name")

    return HttpResponse(serializers.serialize("json", queryset))

@require_POST
@ajax_required
@get_path_obj
@permission_required('administrate')
def ajax_remove_tag_from_tp_in_project(request, translation_project, tag_name):

    if tag_name.startswith("goal:"):
        translation_project.goals.remove(tag_name)
    else:
        translation_project.tags.remove(tag_name)
    ctx = {
        'tp_tags': translation_project.tags.all().order_by('name'),
        'project': translation_project.project.code,
        'language': translation_project.language.code,
    }
    response = render(request, "projects/xhr_tags_list.html", ctx)
    response.status_code = 201
    return response


def _add_tag(request, translation_project, tag_like_object):
    if isinstance(tag_like_object, Tag):
        translation_project.tags.add(tag_like_object)
    else:
        translation_project.goals.add(tag_like_object)
    ctx = {
        'tp_tags': translation_project.tag_like_objects,
        'project': translation_project.project.code,
        'language': translation_project.language.code,
    }
    response = render(request, "projects/xhr_tags_list.html", ctx)
    response.status_code = 201
    return response


@require_POST
@ajax_required
@get_path_obj
@permission_required('administrate')
def ajax_add_tag_to_tp_in_project(request, project):
    """Return an HTML snippet with the failed form or blank if valid."""

    add_tag_form = TranslationProjectTagForm(request.POST, project=project)

    if add_tag_form.is_valid():
        translation_project = add_tag_form.cleaned_data['translation_project']
        new_tag_like_object = add_tag_form.save()
        return _add_tag(request, translation_project, new_tag_like_object)
    else:
        # If the form is invalid, perhaps it is because the tag already
        # exists, so instead of creating the tag just retrieve it and add
        # it to the translation project.
        try:
            # Try to retrieve the translation project.
            kwargs = {
                'pk': add_tag_form.data['translation_project'],
            }
            translation_project = TranslationProject.objects.get(**kwargs)

            # Check if the tag (or goal) is already added to the translation
            # project, or try adding it.
            criteria = {
                'name': add_tag_form.data['name'],
                'slug': add_tag_form.data['slug'],
            }
            if len(translation_project.tags.filter(**criteria)) == 1:
                # If the tag is already applied to the translation project then
                # avoid reloading the page.
                return HttpResponse(status=204)
            elif len(translation_project.goals.filter(**criteria)) == 1:
                # If the goal is already applied to the translation project
                # then avoid reloading the page.
                return HttpResponse(status=204)
            else:
                # Else add the tag (or goal) to the translation project.
                if criteria['name'].startswith("goal:"):
                    tag_like_object = Goal.objects.get(**criteria)
                else:
                    tag_like_object = Tag.objects.get(**criteria)
                return _add_tag(request, translation_project, tag_like_object)
        except Exception:
            # If the form is invalid and the tag (or goal) doesn't exist yet
            # then display the form with the error messages.
            url_kwargs = {
                'project_code': project.code,
            }
            ctx = {
                'add_tag_form': add_tag_form,
                'add_tag_action_url': reverse('pootle-xhr-tag-tp-in-project',
                                              kwargs=url_kwargs)
            }
            return render(request, "core/xhr_add_tag_form.html", ctx)


@get_path_obj
@permission_required('view')
@get_resource
def overview(request, project, dir_path, filename):
    """Languages overview for a given project."""
    from locale import strcoll

    item_func = (make_xlanguage_item if dir_path or filename
                                     else make_language_item)
    items = [item_func(item) for item in request.resource_obj.get_children()]
    items.sort(lambda x, y: strcoll(x['title'], y['title']))

    table_fields = ['name', 'progress', 'total', 'need-translation',
                    'suggestions', 'critical', 'last-updated', 'activity']

    ctx = get_overview_context(request)
    ctx.update({
        'project': project,
        'can_edit': check_permission("administrate", request),
        'table': {
            'id': 'project',
            'fields': table_fields,
            'headings': get_table_headings(table_fields),
            'items': items,
        },

        'browser_extends': 'projects/base.html',
    })

    if ctx['can_edit']:
        from pootle_project.forms import DescriptionForm
        tag_action_url = reverse('pootle-xhr-tag-tp-in-project',
                                 kwargs={'project_code': project.code})
        ctx.update({
            'form': DescriptionForm(instance=project),
            'form_action': reverse('pootle-project-admin-settings',
                                   args=[project.code]),
            'add_tag_form': TranslationProjectTagForm(project=project),
            'add_tag_action_url': tag_action_url,
        })

    return render(request, 'browser/overview.html', ctx)


@require_POST
@ajax_required
@get_path_obj
@permission_required('administrate')
def project_settings_edit(request, project):
    from pootle_project.forms import DescriptionForm
    form = DescriptionForm(request.POST, instance=project)

    response = {}
    status = 400

    if form.is_valid():
        form.save()
        status = 200

        if project.description:
            the_html = project.description
        else:
            the_html = u"".join([
                u'<p class="placeholder muted">',
                _(u"No description yet."),
                u"</p>",
            ])

        response["description"] = the_html

    ctx = {
        "form": form,
        "form_action": reverse('pootle-project-admin-settings',
                               args=[project.code]),
    }

    template = loader.get_template('admin/_settings_form.html')
    response['form'] = template.render(RequestContext(request, ctx))

    return HttpResponse(jsonify(response), status=status,
                        mimetype="application/json")


@get_path_obj
@permission_required('view')
@get_resource
def translate(request, project, dir_path, filename):
    ctx = get_translation_context(request)
    ctx.update({
        'language': None,
        'project': project,

        'editor_extends': 'projects/base.html',
    })

    return render(request, "editor/main.html", ctx)


@get_path_obj
@permission_required('view')
@get_resource
def export_view(request, project, dir_path, filename):
    language = None

    ctx = get_export_view_context(request)
    ctx.update({
        'source_language': 'en',
        'language': language,
        'project': project,
    })

    return render(request, "editor/export_view.html", ctx)


@get_path_obj
@permission_required('administrate')
def project_admin(request, project):
    """Adding and deleting project languages."""
    from pootle_app.views.admin.util import edit as admin_edit

    def generate_link(tp):
        path_args = split_pootle_path(tp.pootle_path)[:2]
        perms_url = reverse('pootle-tp-admin-permissions', args=path_args)
        return '<a href="%s">%s</a>' % (perms_url, tp.language)

    queryset = TranslationProject.objects.filter(project=project)
    queryset = queryset.order_by('pootle_path')

    ctx = {
        'page': 'admin-languages',

        'project': {
            'code': project.code,
            'name': project.fullname,
        }
    }

    return admin_edit(request, 'projects/admin/languages.html',
                      TranslationProject, ctx, generate_link,
                      linkfield="language", queryset=queryset,
                      can_delete=True, form=tp_form_factory(project),
                      formset=TranslationProjectFormSet,
                      exclude=('description',))


@get_path_obj
@permission_required('administrate')
def project_admin_permissions(request, project):
    from pootle_app.views.admin.permissions import admin_permissions

    ctx = {
        'page': 'admin-permissions',

        'project': project,
        'directory': project.directory,
        'feed_path': project.pootle_path[1:],
    }
    return admin_permissions(request, project.directory,
                             'projects/admin/permissions.html', ctx)


@get_path_obj
@permission_required('view')
def projects_overview(request, project_set):
    """Page listing all projects."""
    items = [make_project_list_item(project)
             for project in project_set.get_children()]

    table_fields = ['name', 'progress', 'total', 'need-translation',
                    'suggestions', 'critical', 'last-updated', 'activity']

    ctx = get_overview_context(request)
    ctx.update({
        'table': {
            'id': 'projects',
            'fields': table_fields,
            'headings': get_table_headings(table_fields),
            'items': items,
        },

        'browser_extends': 'projects/all/base.html',
    })

    response = render(request, 'browser/overview.html', ctx)
    response.set_cookie('pootle-language', 'projects')

    return response


@get_path_obj
@permission_required('view')
def projects_translate(request, project_set):
    ctx = get_translation_context(request)
    ctx.update({
        'language': None,
        'project': None,

        'editor_extends': 'projects/all/base.html',
    })

    return render(request, "editor/main.html", ctx)


@get_path_obj
@permission_required('view')
def projects_export_view(request, project_set):
    ctx = get_export_view_context(request)
    ctx.update({
        'source_language': 'en',
        'language': None,
        'project': None,
    })

    return render(request, "editor/export_view.html", ctx)

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Submission'
        db.create_table('pootle_app_submission', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('creation_time', self.gf('django.db.models.fields.DateTimeField')(db_index=True)),
            ('translation_project', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_translationproject.TranslationProject'])),
            ('submitter', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_profile.PootleProfile'], null=True)),
            ('from_suggestion', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['pootle_app.Suggestion'], unique=True, null=True)),
            ('unit', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_store.Unit'], null=True, blank=True)),
            ('field', self.gf('django.db.models.fields.IntegerField')(db_index=True, null=True, blank=True)),
            ('type', self.gf('django.db.models.fields.IntegerField')(db_index=True, null=True, blank=True)),
            ('old_value', self.gf('django.db.models.fields.TextField')(default=u'', blank=True)),
            ('new_value', self.gf('django.db.models.fields.TextField')(default=u'', blank=True)),
        ))
        db.send_create_signal('pootle_statistics', ['Submission'])


    def backwards(self, orm):
        # Deleting model 'Submission'
        db.delete_table('pootle_app_submission')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_app.suggestion': {
            'Meta': {'object_name': 'Suggestion'},
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'review_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
            'reviewer': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'reviewer'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '16', 'db_index': 'True'}),
            'suggester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suggester'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_translationproject.TranslationProject']"}),
            'unit': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_languages'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'to': "orm['pootle_project.Project']", 'symmetrical': 'False', 'blank': 'True'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        'pootle_statistics.submission': {
            'Meta': {'object_name': 'Submission', 'db_table': "'pootle_app_submission'"},
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
            'field': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'from_suggestion': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Suggestion']", 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'new_value': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'old_value': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'submitter': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_profile.PootleProfile']", 'null': 'True'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_translationproject.TranslationProject']"}),
            'type': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Unit']", 'null': 'True', 'blank': 'True'})
        },
        'pootle_store.store': {
            'Meta': {'ordering': "['pootle_path']", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Store'},
            'file': ('pootle_store.fields.TranslationStoreField', [], {'max_length': '255', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_stores'", 'to': "orm['pootle_app.Directory']"}),
            'pending': ('pootle_store.fields.TranslationStoreField', [], {'ignore': "'.pending'", 'max_length': '255'}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'sync_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1, 1, 1, 0, 0)'}),
            'tm': ('pootle_store.fields.TranslationStoreField', [], {'ignore': "'.tm'", 'max_length': '255'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stores'", 'to': "orm['pootle_translationproject.TranslationProject']"})
        },
        'pootle_store.unit': {
            'Meta': {'ordering': "['store', 'index']", 'unique_together': "(('store', 'unitid_hash'),)", 'object_name': 'Unit'},
            'commented_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'commented'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'context': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'index': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'locations': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'mtime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'source_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'store': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Store']"}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'submitted'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True', 'blank': 'True'}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'target_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'translator_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unitid': ('django.db.models.fields.TextField', [], {}),
            'unitid_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'})
        },
        'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['pootle_statistics']
########NEW FILE########
__FILENAME__ = 0002_auto__add_field_submission_check
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Submission.check'
        db.add_column('pootle_app_submission', 'check',
                      self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_store.QualityCheck'], null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Submission.check'
        db.delete_column('pootle_app_submission', 'check_id')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_app.suggestion': {
            'Meta': {'object_name': 'Suggestion'},
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'review_time': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
            'reviewer': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'reviewer'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '16', 'db_index': 'True'}),
            'suggester': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'suggester'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_translationproject.TranslationProject']"}),
            'unit': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': u"orm['pootle_language.Language']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        u'pootle_statistics.submission': {
            'Meta': {'ordering': "['creation_time']", 'object_name': 'Submission', 'db_table': "'pootle_app_submission'"},
            'check': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.QualityCheck']", 'null': 'True', 'blank': 'True'}),
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
            'field': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'from_suggestion': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Suggestion']", 'unique': 'True', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'new_value': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'old_value': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'submitter': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_profile.PootleProfile']", 'null': 'True'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_translationproject.TranslationProject']"}),
            'type': ('django.db.models.fields.IntegerField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']", 'null': 'True', 'blank': 'True'})
        },
        u'pootle_store.qualitycheck': {
            'Meta': {'object_name': 'QualityCheck'},
            'category': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'false_positive': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"})
        },
        u'pootle_store.store': {
            'Meta': {'ordering': "['pootle_path']", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Store'},
            'file': ('pootle_store.fields.TranslationStoreField', [], {'max_length': '255', 'db_index': 'True'}),
            'fuzzy_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_stores'", 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suggestion_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'sync_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1, 1, 1, 0, 0)'}),
            'total_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stores'", 'to': u"orm['pootle_translationproject.TranslationProject']"})
        },
        u'pootle_store.unit': {
            'Meta': {'ordering': "['store', 'index']", 'unique_together': "(('store', 'unitid_hash'),)", 'object_name': 'Unit'},
            'commented_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'commented'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'context': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'index': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'locations': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'mtime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'source_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'store': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Store']"}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'submitted'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True', 'blank': 'True'}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'target_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'translator_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unitid': ('django.db.models.fields.TextField', [], {}),
            'unitid_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'})
        },
        u'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': u"orm['pootle_tagging.Goal']"})
        },
        u'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'fuzzy_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'}),
            'suggestion_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'total_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'})
        },
        u'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': u"orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_statistics']
########NEW FILE########
__FILENAME__ = models
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.contrib.auth.models import User
from django.db import models
from django.template.defaultfilters import escape, truncatechars
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _

from pootle.core.managers import RelatedManager
from pootle_misc.checks import check_names
from pootle_store.util import FUZZY, TRANSLATED, UNTRANSLATED


class SubmissionTypes(object):
    """Values for the 'type' field of Submission."""
    # None/0 = no information
    NORMAL = 1  # Interactive web editing
    REVERT = 2  # Revert action on the web
    SUGG_ACCEPT = 3  # Accepting a suggestion
    UPLOAD = 4  # Uploading an offline file
    SYSTEM = 5  # Batch actions performed offline
    MUTE_CHECK = 6  # Mute QualityCheck
    UNMUTE_CHECK = 7  # Unmute QualityCheck


class SubmissionFields(object):
    """Values for the 'field' field of Submission."""
    NONE = 0  # non-field submission
    SOURCE = 1  # pootle_store.models.Unit.source
    TARGET = 2  # pootle_store.models.Unit.target
    STATE = 3  # pootle_store.models.Unit.state
    COMMENT = 4  # pootle_store.models.Unit.translator_comment

    NAMES_MAP = {
        NONE: "",
        SOURCE: _("Source"),
        TARGET: _("Target"),
        STATE: _("State"),
        COMMENT: _("Comment"),
    }


class Submission(models.Model):

    creation_time = models.DateTimeField(db_index=True)
    translation_project = models.ForeignKey(
        'pootle_translationproject.TranslationProject',
        db_index=True,
    )
    submitter = models.ForeignKey(
        'pootle_profile.PootleProfile',
        null=True,
        db_index=True,
    )
    from_suggestion = models.OneToOneField(
        'pootle_app.Suggestion',
        null=True,
        db_index=True,
    )
    unit = models.ForeignKey(
        'pootle_store.Unit',
        blank=True,
        null=True,
        db_index=True,
    )
    check = models.ForeignKey(
        'pootle_store.QualityCheck',
        blank=True,
        null=True,
        db_index=True,
    )
    # The field that was changed in the unit.
    field = models.IntegerField(null=True, blank=True, db_index=True)

    # How did this submission come about? (one of the constants above).
    type = models.IntegerField(null=True, blank=True, db_index=True)

    # old_value and new_value can store string representations of multistrings
    # in the case where they store values for a unit's source or target. In
    # such cases, the strings might not be usable as is. Use the two helper
    # functions in pootle_store.fields to convert to and from this format.
    old_value = models.TextField(blank=True, default=u"")
    new_value = models.TextField(blank=True, default=u"")

    objects = RelatedManager()
    simple_objects = models.Manager()

    class Meta:
        ordering = ["creation_time"]
        get_latest_by = "creation_time"
        db_table = 'pootle_app_submission'

    def __unicode__(self):
        return u"%s (%s)" % (self.creation_time.strftime("%Y-%m-%d %H:%M"),
                             unicode(self.submitter))

    def as_html(self):
        return self.get_submission_message()

    def get_submission_message(self):
        """Return a message describing the submission.

        The message includes the user (with link to profile and gravatar), a
        message describing the action performed, and when it was performed.
        """

        unit = None
        if self.unit is not None:
            unit = {
                'source': escape(truncatechars(self.unit, 50)),
                'url': self.unit.get_translate_url(),
            }

            if self.check is not None:
                unit['check_name'] = self.check.name
                unit['check_display_name'] = check_names[self.check.name]
                unit['checks_url'] = ('http://docs.translatehouse.org/'
                                      'projects/translate-toolkit/en/latest/'
                                      'commands/pofilter_tests.html')

        if self.from_suggestion:
            displayuser = self.from_suggestion.reviewer
        else:
            # Sadly we may not have submitter information in all the
            # situations yet
            # TODO check if it is true
            if self.submitter:
                displayuser = self.submitter
            else:
                displayuser = User.objects.get_nobody_user().get_profile()

        displayname = displayuser.fullname
        if not displayname:
            displayname = displayuser.user.username

        action_bundle = {
            "profile_url": displayuser.get_absolute_url(),
            "gravatar_url": displayuser.gravatar_url(20),
            "displayname": displayname,
            "username": displayuser.user.username,
            "date": self.creation_time,
            "isoformat_date": self.creation_time.isoformat(),
            "action": "",
        }

        action_bundle["action"] = {
            SubmissionTypes.REVERT: _(
                'reverted translation for '
                '<i><a href="%(url)s">%(source)s</a></i>',
                unit
            ),
            SubmissionTypes.SUGG_ACCEPT: _(
                'accepted suggestion for '
                '<i><a href="%(url)s">%(source)s</a></i>',
                unit
            ),
            SubmissionTypes.UPLOAD: _(
                'uploaded a file'
            ),
            SubmissionTypes.MUTE_CHECK: _(
                'muted '
                '<a href="%(checks_url)s#%(check_name)s">%(check_display_name)s</a>'
                ' check for <i><a href="%(url)s">%(source)s</a></i>',
                unit
            ),
            SubmissionTypes.UNMUTE_CHECK: _(
                'unmuted '
                '<a href="%(checks_url)s#%(check_name)s">%(check_display_name)s</a>'
                ' check for <i><a href="%(url)s">%(source)s</a></i>',
                unit
            ),
        }.get(self.type, '')

        #TODO Look how to detect submissions for "sent suggestion", "rejected
        # suggestion"...

        #TODO Fix bug 3011 and replace the following code with the appropiate
        # one in the dictionary above.

        if not action_bundle["action"]:
            try:
                # If the action is unset, maybe the action is one of the
                # following ones.
                action_bundle["action"] = {
                    TRANSLATED: _(
                        'translated '
                        '<i><a href="%(url)s">%(source)s</a></i>',
                        unit
                    ),
                    FUZZY: _(
                        'pre-translated '
                        '<i><a href="%(url)s">%(source)s</a></i>',
                        unit
                    ),
                    UNTRANSLATED: _(
                        'removed translation for '
                        '<i><a href="%(url)s">%(source)s</a></i>',
                        unit
                    ),
                }.get(self.unit.state, '')
            except AttributeError:
                return ''

        return mark_safe(
            u'<div class="last-action">'
            '  <a href="%(profile_url)s">'
            '    <img src="%(gravatar_url)s" />'
            '    <span title="%(username)s">%(displayname)s</span>'
            '  </a>'
            '  <span class="action-text">%(action)s</span>'
            '  <time class="extra-item-meta js-relative-date"'
            '    title="%(date)s" datetime="%(isoformat_date)s">&nbsp;'
            '  </time>'
            '</div>'
            % action_bundle)

########NEW FILE########
__FILENAME__ = api
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/>.

from tastypie import fields
from tastypie.authentication import BasicAuthentication
from tastypie.authorization import DjangoAuthorization
from tastypie.exceptions import ImmediateHttpResponse
from tastypie.http import HttpNotImplemented
from tastypie.resources import ModelResource

from pootle.core.api import StatisticsModelResource
from pootle_store.models import Store, Suggestion, Unit
from pootle_store.util import OBSOLETE, UNTRANSLATED, FUZZY, TRANSLATED


# Lookups that can be used on CharField fields for filtering objects.
TEXT_LOOKUPS = (
    'exact', 'iexact', 'contains', 'icontains', 'startswith', 'istartswith',
    'endswith', 'iendswith',
)

# Lookups that can be used on DateTimeField fields for filtering objects.
DATE_LOOKUPS = (
    'year', 'month', 'day',
)


class SuggestionResource(ModelResource):
    unit = fields.ForeignKey('pootle_store.api.UnitResource', 'unit')

    class Meta:
        queryset = Suggestion.objects.all()
        resource_name = 'suggestions'
        fields = [
            'target_f',
            'translator_comment_f',
            'unit',
        ]
        list_allowed_methods = ['post']
        authorization = DjangoAuthorization()
        authentication = BasicAuthentication()


class UnitResource(ModelResource):
    store = fields.ForeignKey('pootle_store.api.StoreResource', 'store')
    suggestions = fields.ToManyField(SuggestionResource, 'suggestion_set')

    class Meta:
        queryset = Unit.objects.all()
        resource_name = 'units'
        fields = [
            'commented_on',
            'context',
            'developer_comment',
            'locations',
            'mtime',
            'source_f',
            'source_length',
            'source_wordcount',
            'state',
            'store',
            'submitted_on',
            'suggestions',
            'target_f',
            'target_length',
            'target_wordcount',
            'translator_comment',
        ]
        filtering = {
            "commented_on": DATE_LOOKUPS,
            "context": TEXT_LOOKUPS,
            "developer_comment": TEXT_LOOKUPS,
            "locations": TEXT_LOOKUPS,
            "mtime": DATE_LOOKUPS,
            "source_f": TEXT_LOOKUPS,
            "state": ('exact',),
            "store": ('exact',),
            "submitted_on": DATE_LOOKUPS,
            "target_f": TEXT_LOOKUPS,
            "translator_comment": TEXT_LOOKUPS,
        }
        list_allowed_methods = ['get', 'post']
        authorization = DjangoAuthorization()
        authentication = BasicAuthentication()

    def build_filters(self, filters=None):
        """Given a filters dictionary, create the necessary ORM-level filters.

        Keys should be resource fields, **NOT** model fields.

        Valid values are either a list of Django filter types (i.e.
        ``['startswith', 'exact', 'lte']``), the ``ALL`` constant or the
        ``ALL_WITH_RELATIONS`` constant.
        """
        # Convert the human-readable state names to the real values used in
        # Pootle.
        state = {
            u'untranslated': unicode(UNTRANSLATED),
            u'fuzzy': unicode(FUZZY),
            u'translated': unicode(TRANSLATED),
            u'obsolete': unicode(OBSOLETE),
        }.get(filters.get(u'state', None), None)

        if state is not None:
            filters = filters.copy()
            filters.__setitem__(u'state', state)

        return super(UnitResource, self).build_filters(filters)

    def apply_filters(self, request, applicable_filters):
        """An ORM-specific implementation of ``apply_filters``.

        The default simply applies the ``applicable_filters`` as ``**kwargs``,
        but should make it possible to do more advanced things.
        """
        # List units only when a filter criterion was provided.
        if not applicable_filters:
            raise ImmediateHttpResponse(response=HttpNotImplemented())
        return super(UnitResource, self).apply_filters(request,
                                                       applicable_filters)


class StoreResource(StatisticsModelResource):
    translation_project = fields.ForeignKey(
        'pootle_translationproject.api.TranslationProjectResource',
        'translation_project')
    units = fields.ToManyField(UnitResource, 'unit_set')

    class Meta:
        queryset = Store.objects.all()
        resource_name = 'stores'
        fields = [
            'file',
            'name',
            'pootle_path',
            'state',
            'sync_time',
            'translation_project',
            'units',
        ]
        list_allowed_methods = ['post']
        # HTTP methods allowed for visiting /statistics/ URLs
        statistics_allowed_methods = ['get']
        authorization = DjangoAuthorization()
        authentication = BasicAuthentication()

    def retrieve_statistics(self, bundle):
        """Given a ``Bundle``, return the statistics for it."""
        return bundle.obj.get_stats()

########NEW FILE########
__FILENAME__ = caching
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

"""
Caching functionality for Unit model
"""

from hashlib import md5

from translate.storage.statsdb import wordcount

from pootle.core import log
from .util import FUZZY, OBSOLETE, TRANSLATED, UNTRANSLATED


def count_words(strings):
    return sum(wordcount(string) for string in strings)


def unit_delete_cache(unit):
    """
    Triggered on unit.delete()
    Decrement the cache columns by the appropriate amount
    """
    wordcount = count_words(unit.source_f.strings)

    unit.store.total_wordcount -= wordcount
    unit.store.translation_project.total_wordcount -= wordcount

    if unit.state == FUZZY:
        unit.store.fuzzy_wordcount -= wordcount
        unit.store.translation_project.fuzzy_wordcount -= wordcount
    elif unit.state == TRANSLATED:
        unit.store.translated_wordcount -= wordcount
        unit.store.translation_project.translated_wordcount -= wordcount

    if unit.has_critical_failures:
        unit.store.failing_critical_count -= 1
        unit.store.translation_project.failing_critical_count -= 1

    unit.store.save()
    unit.store.translation_project.save()


def unit_update_cache(unit):
    """
    Update the Store (and related) cache columns when a Unit is modified
    Triggered on unit.save() before anything is saved
    """
    if unit.id:
        orig = unit.__class__.objects.get(id=unit.id)
    else:
        orig = None

    source_wordcount = count_words(unit.source_f.strings)
    difference = source_wordcount - unit.source_wordcount

    if not orig:
        # New instance. Calculate everything.
        unit.store.total_wordcount += source_wordcount
        unit.store.translation_project.total_wordcount += source_wordcount
        if unit.state == TRANSLATED:
            unit.store.translated_wordcount += source_wordcount
            unit.store.translation_project.translated_wordcount += source_wordcount
        elif unit.state == FUZZY:
            unit.store.fuzzy_wordcount += source_wordcount
            unit.store.translation_project.fuzzy_wordcount += source_wordcount

    if unit._source_updated or unit._target_updated:
        # Calculate quality checks for the unit and update critical counts.
        had_failures = unit.has_critical_failures

        unit.update_qualitychecks()

        has_failures_now = unit.has_critical_failures

        if has_failures_now and not had_failures:
            unit.store.failing_critical_count += 1
            unit.store.translation_project.failing_critical_count += 1
        elif not has_failures_now and had_failures:
            unit.store.failing_critical_count -= 1
            unit.store.translation_project.failing_critical_count -= 1

    if unit._source_updated:
        # update source related fields
        unit.source_hash = md5(unit.source_f.encode("utf-8")).hexdigest()
        unit.store.total_wordcount += difference
        unit.store.translation_project.total_wordcount += difference
        unit.source_wordcount = source_wordcount
        unit.source_length = len(unit.source_f)
        if not orig:
            unit.store.total_wordcount += difference
            unit.store.translation_project.total_wordcount += difference

    if orig:
        # Case 1: Unit was not translated before
        if orig.state == UNTRANSLATED:
            if unit.state == UNTRANSLATED:
                pass
            elif unit.state == FUZZY:
                unit.store.fuzzy_wordcount += source_wordcount
                unit.store.translation_project.fuzzy_wordcount += source_wordcount
            elif unit.state == TRANSLATED:
                unit.store.translated_wordcount += source_wordcount
                unit.store.translation_project.translated_wordcount += source_wordcount

        # Case 2: Unit was fuzzy before
        elif orig.state == FUZZY:
            if unit.state == UNTRANSLATED:
                unit.store.fuzzy_wordcount -= source_wordcount
                unit.store.translation_project.fuzzy_wordcount -= source_wordcount
            elif unit.state == FUZZY:
                unit.store.fuzzy_wordcount += difference
                unit.store.translation_project.fuzzy_wordcount += difference
            elif unit.state == TRANSLATED:
                unit.store.fuzzy_wordcount -= source_wordcount
                unit.store.translation_project.fuzzy_wordcount -= source_wordcount
                unit.store.translated_wordcount += source_wordcount
                unit.store.translation_project.translated_wordcount += source_wordcount

        # Case 3: Unit was translated before
        elif orig.state == TRANSLATED:
            if unit.state == UNTRANSLATED:
                unit.store.translated_wordcount -= source_wordcount
                unit.store.translation_project.translated_wordcount -= source_wordcount
            elif unit.state == FUZZY:
                unit.store.translated_wordcount -= source_wordcount
                unit.store.translation_project.translated_wordcount -= source_wordcount
                unit.store.fuzzy_wordcount += source_wordcount
                unit.store.translation_project.fuzzy_wordcount += source_wordcount
            elif unit.state == TRANSLATED:
                unit.store.translated_wordcount += difference
                unit.store.translation_project.translated_wordcount += difference

    # Update the unit state
    if unit._target_updated:
        unit.target_length = len(unit.target_f)
        # Triggered when suggestions are accepted...
        # what exactly is happening here?
        if filter(None, unit.target_f.strings):
            if unit.state == UNTRANSLATED:
                unit.state = TRANSLATED
                # TODO do this in the previous block. Properly.
                unit.store.translated_wordcount += source_wordcount
                unit.store.translation_project.translated_wordcount += source_wordcount
                if not hasattr(unit, '_save_action'):
                    unit._save_action = log.TRANSLATION_ADDED
            else:
                if not hasattr(unit, '_save_action'):
                    unit._save_action = log.TRANSLATION_CHANGED
        else:
            unit._save_action = log.TRANSLATION_DELETED
            # if it was TRANSLATED then set to UNTRANSLATED
            if unit.state > FUZZY:
                unit.state = UNTRANSLATED

    unit.store.save()
    unit.store.translation_project.save()

########NEW FILE########
__FILENAME__ = decorators
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from functools import wraps

from django.core.exceptions import PermissionDenied
from django.shortcuts import get_object_or_404
from django.utils.translation import ugettext as _

from pootle_app.models.permissions import (check_permission,
                                           get_matching_permissions)
from pootle_misc.util import jsonify
from pootle_profile.models import get_profile

from .models import Unit, Store


def get_permission_message(permission_code):
    """Returns a human-readable message when `permission_code` is not met
    by the current context.
    """
    default_message = _("Insufficient rights to access this directory.")

    return {
        'suggest': _('Insufficient rights to access suggestion mode.'),
        'translate': _('Insufficient rights to access translation mode.'),
        'review': _('Insufficient rights to access review mode.'),
    }.get(permission_code, default_message)


def _common_context(request, translation_project, permission_codes):
    """Adds common context to request object and checks permissions."""
    request.translation_project = translation_project
    _check_permissions(request, translation_project.directory,
                       permission_codes)


def _check_permissions(request, directory, permission_code):
    """Checks if the current user has enough permissions defined by
    `permission_code` in the current`directory`.
    """
    request.profile = get_profile(request.user)
    request.permissions = get_matching_permissions(request.profile,
                                                   directory)

    if not permission_code:
        return

    if not check_permission(permission_code, request):
        raise PermissionDenied(get_permission_message(permission_code))


def get_store_context(permission_codes):

    def wrap_f(f):

        @wraps(f)
        def decorated_f(request, pootle_path, *args, **kwargs):
            if pootle_path[0] != '/':
                pootle_path = '/' + pootle_path
            try:
                store = Store.objects.select_related('translation_project',
                                                     'parent') \
                                     .get(pootle_path=pootle_path)
            except Store.DoesNotExist:
                raise Http404

            _common_context(request, store.translation_project, permission_codes)
            request.store = store
            request.directory = store.parent

            return f(request, store, *args, **kwargs)

        return decorated_f

    return wrap_f


def get_unit_context(permission_codes):

    def wrap_f(f):

        @wraps(f)
        def decorated_f(request, uid, *args, **kwargs):
            unit = get_object_or_404(
                    Unit.objects.select_related("store__translation_project",
                                                "store__parent"),
                    id=uid,
            )
            _common_context(request, unit.store.translation_project,
                            permission_codes)
            request.unit = unit
            request.store = unit.store
            request.directory = unit.store.parent

            return f(request, unit, *args, **kwargs)

        return decorated_f

    return wrap_f

########NEW FILE########
__FILENAME__ = fields
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Fields required for handling translation files"""

import logging
import os

from django.db import models
from django.db.models.fields.files import FieldFile, FileField

from south.modelsinspector import add_introspection_rules

from translate.misc.multistring import multistring

from pootle_store.signals import translation_file_updated

################# String #############################

SEPARATOR = "__%$%__%$%__%$%__"
PLURAL_PLACEHOLDER = "__%POOTLE%_$NUMEROUS$__"

def list_empty(strings):
    """check if list is exclusively made of empty strings.

    useful for detecting empty multistrings and storing them as a
    simple empty string in db."""
    for string in strings:
        if len(string) > 0:
            return False
    return True


def to_db(value):
    """Flatten the given value (string, list of plurals or multistring) into
    the database string representation."""
    if value is None:
        return None
    elif isinstance(value, multistring):
        if list_empty(value.strings):
            return ''
        else:
            return SEPARATOR.join(value.strings)
    elif isinstance(value, list):
        if list_empty(value):
            return ''
        else:
            return SEPARATOR.join(value)
    else:
        return value


def to_python(value):
    """Reconstruct a multistring from the database string representation."""
    if not value:
        return multistring("", encoding="UTF-8")
    elif isinstance(value, multistring):
        return value
    elif isinstance(value, basestring):
        strings = value.split(SEPARATOR)
        if strings[-1] == PLURAL_PLACEHOLDER:
            strings = strings[:-1]
            plural = True
        else:
            plural = len(strings) > 1
        ms = multistring(strings, encoding="UTF-8")
        ms.plural = plural
        return ms
    elif isinstance(value, dict):
        return multistring([val for key, val in sorted(value.items())],
                           encoding="UTF-8")
    else:
        return multistring(value, encoding="UTF-8")


class MultiStringField(models.Field):
    description = "a field imitating translate.misc.multistring used for plurals"
    __metaclass__ = models.SubfieldBase

    def __init__(self, *args, **kwargs):
        super(MultiStringField, self).__init__(*args, **kwargs)

    def get_internal_type(self):
        return "TextField"

    def to_python(self, value):
        return to_python(value)

    def get_prep_value(self, value):
        return to_db(value)

    def get_prep_lookup(self, lookup_type, value):
        if (lookup_type in ('exact', 'iexact') or
            not isinstance(value, basestring)):
            value = self.get_prep_value(value)
        return super(MultiStringField, self) \
                .get_prep_lookup(lookup_type, value)

add_introspection_rules(
        [],
        ["^pootle_store\.fields\.MultiStringField"],
    )


################# File ###############################


class StoreTuple(object):
    """Encapsulates toolkit stores in the in memory cache, needed
    since LRUCachingDict is based on a weakref.WeakValueDictionary
    which cannot reference normal tuples"""
    def __init__(self, store, mod_info, realpath):
        self.store = store
        self.mod_info = mod_info
        self.realpath = realpath


class TranslationStoreFieldFile(FieldFile):
    """FieldFile is the file-like object of a FileField, that is found in a
    TranslationStoreField."""
    from translate.misc.lru import LRUCachingDict
    from django.conf import settings

    _store_cache = LRUCachingDict(settings.PARSE_POOL_SIZE,
                                  settings.PARSE_POOL_CULL_FREQUENCY)

    def getpomtime(self):
        file_stat = os.stat(self.realpath)
        return file_stat.st_mtime, file_stat.st_size

    @property
    def filename(self):
        return os.path.basename(self.name)

    def _get_realpath(self):
        """Return realpath resolving symlinks if necessary."""
        if not hasattr(self, "_realpath"):
            self._realpath = os.path.realpath(self.path)
        return self._realpath

    @property
    def realpath(self):
        """Get real path from cache before attempting to check for symlinks."""
        if not hasattr(self, "_store_tuple"):
            return self._get_realpath()
        else:
            return self._store_tuple.realpath

    @property
    def store(self):
        """Get translation store from dictionary cache, populate if store not
        already cached."""
        self._update_store_cache()
        return self._store_tuple.store

    def _update_store_cache(self):
        """Add translation store to dictionary cache, replace old cached
        version if needed."""
        mod_info = self.getpomtime()
        if (not hasattr(self, "_store_tuple") or
            self._store_tuple.mod_info != mod_info):
            try:
                self._store_tuple = self._store_cache[self.path]
                if self._store_tuple.mod_info != mod_info:
                    # if file is modified act as if it doesn't exist in cache
                    raise KeyError
            except KeyError:
                logging.debug(u"Cache miss for %s", self.path)
                from translate.storage import factory
                from pootle_store.filetypes import factory_classes

                store_obj = factory.getobject(self.path,
                                              ignore=self.field.ignore,
                                              classes=factory_classes)
                self._store_tuple = StoreTuple(store_obj, mod_info,
                                               self.realpath)
                self._store_cache[self.path] = self._store_tuple

                translation_file_updated.send(sender=self, path=self.path)

    def _touch_store_cache(self):
        """Update stored mod_info without reparsing file."""
        if hasattr(self, "_store_tuple"):
            mod_info = self.getpomtime()
            if self._store_tuple.mod_info != mod_info:
                self._store_tuple.mod_info = mod_info
                translation_file_updated.send(sender=self, path=self.path)
        else:
            #FIXME: do we really need that?
            self._update_store_cache()

    def _delete_store_cache(self):
        """Remove translation store from cache."""
        try:
            del self._store_cache[self.path]
        except KeyError:
            pass

        try:
            del self._store_tuple
        except AttributeError:
            pass

        translation_file_updated.send(sender=self, path=self.path)

    def exists(self):
        return os.path.exists(self.realpath)

    def savestore(self):
        """Saves to temporary file then moves over original file. This
        way we avoid the need for locking."""
        import shutil
        from pootle_misc import ptempfile as tempfile
        tmpfile, tmpfilename = tempfile.mkstemp(suffix=self.filename)
        os.close(tmpfile)
        self.store.savefile(tmpfilename)
        shutil.move(tmpfilename, self.realpath)
        self._touch_store_cache()

    def save(self, name, content, save=True):
        #FIXME: implement save to tmp file then move instead of directly saving
        super(TranslationStoreFieldFile, self).save(name, content, save)
        self._delete_store_cache()

    def delete(self, save=True):
        self._delete_store_cache()
        if save:
            super(TranslationStoreFieldFile, self).delete(save)

add_introspection_rules(
        [],
        ["^pootle_store\.fields\.TranslationStoreFieldFile"],
    )


class TranslationStoreField(FileField):
    """This is the field class to represent a FileField in a model that
    represents a translation store."""

    attr_class = TranslationStoreFieldFile

    def __init__(self, ignore=None, **kwargs):
        """ignore: postfix to be stripped from filename when trying to
        determine file format for parsing, useful for .pending files"""
        self.ignore = ignore
        super(TranslationStoreField, self).__init__(**kwargs)

add_introspection_rules([
    (
        [TranslationStoreField],
        [],
        {
            'ignore': ['ignore', {'default': None}],
        },
    ),
], ["^pootle_store\.fields\.TranslationStoreField"])

########NEW FILE########
__FILENAME__ = filetypes
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Helper functions for translation file formats support."""

from django.utils.translation import ugettext_lazy as _


def get_supported_formats():
    formats = []

    # Bilingual formats
    from translate.storage.po import pofile
    formats.append(('po', _('Gettext PO'), pofile, 'bilingual'))

    try:
        from translate.storage.xliff import xlifffile
        formats.append(('xlf', _('XLIFF'), xlifffile, 'bilingual'))
        formats.append(('xliff', _('XLIFF'), xlifffile, 'bilingual'))
    except ImportError:
        pass

    try:
        from translate.storage.ts2 import tsfile
        formats.append(('ts', _('Qt ts'), tsfile, 'bilingual'))
    except ImportError:
        pass

    try:
        from translate.storage.tmx import tmxfile
        formats.append(('tmx', _('TMX'), tmxfile, 'bilingual'))
    except ImportError:
        pass

    try:
        from translate.storage.tbx import tbxfile
        formats.append(('tbx', _('TBX'), tbxfile, 'bilingual'))
    except ImportError:
        pass

    try:
        from translate.storage.catkeys import CatkeysFile
        formats.append(('catkeys', _('Haiku catkeys'), CatkeysFile, 'bilingual'))
    except ImportError:
        pass

    try:
        from translate.storage.csvl10n import csvfile
        formats.append(('csv', _('Excel CSV'), csvfile, 'bilingual'))
    except ImportError:
        pass

    try:
        from translate.storage.mozilla_lang import LangStore
        formats.append(('lang', _('Mozilla .lang'), LangStore, 'bilingual'))
    except ImportError:
        pass

    # Monolingual formats

    # FIXME: It's impossible to use both properties and UTF-8 properties
    # formats: they share the same key. For more information see bug 1918.
    try:
        from translate.storage.properties import javafile
        formats.append(('properties', _('Java Properties'), javafile,
                        'monolingual'))
    except ImportError:
        from translate.storage.properties import propfile
        formats.append(('properties', _('Java Properties'), propfile,
                        'monolingual'))
    try:
        from translate.storage.properties import javautf8file
        formats.append(('properties', _('Java Properties (UTF-8)'),
                        javautf8file, 'monolingual'))
    except ImportError:
        pass

    try:
        from translate.storage.properties import stringsfile
        # Translators: Don't translate "strings" unless you are sure these
        # files have another name in your language
        formats.append(('strings', _('OS X Strings'), stringsfile,
                        'monolingual'))
    except ImportError:
        pass

    from translate.storage.php import phpfile
    formats.append(('php', _('PHP arrays'), phpfile, 'monolingual'))

    try:
        from translate.storage.subtitles import (SubRipFile, MicroDVDFile,
                                                 AdvSubStationAlphaFile,
                                                 SubStationAlphaFile)
        formats.append(('srt', _('Subtitles: srt'), SubRipFile,
                        'monolingual'))
        formats.append(('sub', _('Subtitles: sub'), MicroDVDFile,
                        'monolingual'))
        formats.append(('ssa', _('Subtitles: ssa'), SubStationAlphaFile,
                        'monolingual'))
        formats.append(('ass', _('Subtitles: ass'), AdvSubStationAlphaFile,
                        'monolingual'))
    except ImportError:
        pass

    return formats

supported_formats = get_supported_formats()


def get_filetype_choices():
    return [(format[0], format[1]) for format in supported_formats]

filetype_choices = get_filetype_choices()


def get_factory_classes():
    classes = dict(((format[0], format[2]) for format in supported_formats))

    # Add template formats manually
    from translate.storage.po import pofile
    classes['pot'] = pofile

    return classes

factory_classes = get_factory_classes()


def is_monolingual(klass):
    classes = dict(((format[2], format[3]) for format in supported_formats))
    return classes.get(klass, 'bilingual') == 'monolingual'

########NEW FILE########
__FILENAME__ = forms
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2012 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Form fields required for handling translation files."""
import re

from django import forms
from django.utils import timezone
from django.utils.translation import get_language, ugettext as _

from translate.misc.multistring import multistring

from pootle.core.log import TRANSLATION_ADDED, TRANSLATION_CHANGED, TRANSLATION_DELETED
from pootle.core.mixins import CachedMethods
from pootle_app.models.permissions import check_permission
from pootle_statistics.models import Submission, SubmissionFields, SubmissionTypes
from pootle_store.fields import PLURAL_PLACEHOLDER, to_db
from pootle_store.models import Unit
from pootle_store.util import FUZZY, TRANSLATED, UNTRANSLATED


############## text cleanup and highlighting #########################

FORM_RE = re.compile('\r\n|\r|\n|\t|\\\\')

def highlight_whitespace(text):
    """Make whitespace chars visible."""

    def replace(match):
        submap = {
            '\r\n': '\\r\\n\n',
            '\r': '\\r\n',
            '\n': '\\n\n',
            '\t': '\\t',
            '\\': '\\\\',
            }
        return submap[match.group()]

    return FORM_RE.sub(replace, text)

FORM_UNRE = re.compile('\r|\n|\t|\\\\r|\\\\n|\\\\t|\\\\\\\\')
def unhighlight_whitespace(text):
    """Replace visible whitespace with proper whitespace."""

    def replace(match):
        submap = {
            '\t': '',
            '\n': '',
            '\r': '',
            '\\t': '\t',
            '\\n': '\n',
            '\\r': '\r',
            '\\\\': '\\',
            }
        return submap[match.group()]

    return FORM_UNRE.sub(replace, text)

class MultiStringWidget(forms.MultiWidget):
    """Custom Widget for editing multistrings, expands number of text
    area based on number of plural forms."""

    def __init__(self, attrs=None, nplurals=1, textarea=True):
        if textarea:
            widget = forms.Textarea
        else:
            widget = forms.TextInput

        widgets = [widget(attrs=attrs) for i in xrange(nplurals)]
        super(MultiStringWidget, self).__init__(widgets, attrs)

    def format_output(self, rendered_widgets):
        from django.utils.safestring import mark_safe
        if len(rendered_widgets) == 1:
            return mark_safe(rendered_widgets[0])

        output = ''
        for i, widget in enumerate(rendered_widgets):
            output += '<div lang="%s" title="%s">' % \
                (get_language(), _('Plural Form %d', i))
            output += widget
            output += '</div>'

        return mark_safe(output)

    def decompress(self, value):
        if value is None:
            return [None] * len(self.widgets)
        elif isinstance(value, multistring):
            return [highlight_whitespace(string) for string in value.strings]
        elif isinstance(value, list):
            return [highlight_whitespace(string) for string in value]
        elif isinstance(value, basestring):
            return [highlight_whitespace(value)]
        else:
            raise ValueError

class HiddenMultiStringWidget(MultiStringWidget):
    """Uses hidden input instead of textareas."""

    def __init__(self, attrs=None, nplurals=1):
        widgets = [forms.HiddenInput(attrs=attrs) for i in xrange(nplurals)]
        super(MultiStringWidget, self).__init__(widgets, attrs)

    def format_output(self, rendered_widgets):
        return super(MultiStringWidget, self).format_output(rendered_widgets)

    def __call__(self):
        #HACKISH: Django is inconsistent in how it handles
        # Field.widget and Field.hidden_widget, it expects widget to
        # be an instantiated object and hidden_widget to be a class,
        # since we need to specify nplurals at run time we can let
        # django instantiate hidden_widget.
        #
        # making the object callable let's us get away with forcing an
        # object where django expects a class
        return self


class MultiStringFormField(forms.MultiValueField):

    def __init__(self, nplurals=1, attrs=None, textarea=True, *args, **kwargs):
        self.widget = MultiStringWidget(nplurals=nplurals, attrs=attrs,
                                        textarea=textarea)
        self.hidden_widget = HiddenMultiStringWidget(nplurals=nplurals)
        fields = [forms.CharField() for i in range(nplurals)]
        super(MultiStringFormField, self).__init__(fields=fields,
                                                   *args, **kwargs)

    def compress(self, data_list):
        return [unhighlight_whitespace(string) for string in data_list]


class UnitStateField(forms.BooleanField):

    def to_python(self, value):
        """Returns a Python boolean object.

        It is necessary to customize the behavior because the default
        ``BooleanField`` treats the string '0' as ``False``, but if the
        unit is in ``UNTRANSLATED`` state (which would report '0' as a
        value), we need the marked checkbox to be evaluated as ``True``.

        :return: ``False`` for any unknown :cls:`~pootle_store.models.Unit`
            states and for the 'False' string.
        """
        truthy_values = (str(s) for s in (UNTRANSLATED, FUZZY, TRANSLATED))
        if (isinstance(value, basestring) and
            (value.lower() == 'false' or value not in truthy_values)):
            value = False
        else:
            value = bool(value)

        value = super(forms.BooleanField, self).to_python(value)

        if not value and self.required:
            raise forms.ValidationError(self.error_messages['required'])

        return value


def unit_form_factory(language, snplurals=None, request=None):

    if snplurals is not None:
        tnplurals = language.nplurals
    else:
        tnplurals = 1

    action_disabled = False
    if request is not None:
        cantranslate = check_permission("translate", request)
        cansuggest = check_permission("suggest", request)

        if not (cansuggest or cantranslate):
            action_disabled = True

    target_attrs = {
        'lang': language.code,
        'dir': language.direction,
        'class': 'translation expanding focusthis js-translation-area',
        'rows': 5,
        'tabindex': 10,
    }

    fuzzy_attrs = {
        'accesskey': 'f',
        'class': 'fuzzycheck',
        'tabindex': 13,
    }

    if action_disabled:
        target_attrs['disabled'] = 'disabled'
        fuzzy_attrs['disabled'] = 'disabled'

    class UnitForm(forms.ModelForm):
        class Meta:
            model = Unit
            exclude = ['store', 'developer_comment', 'translator_comment',
                       'submitted_by', 'commented_by']

        id = forms.IntegerField(required=False)
        source_f = MultiStringFormField(
            nplurals=snplurals or 1,
            required=False,
            textarea=False,
        )
        target_f = MultiStringFormField(
            nplurals=tnplurals,
            required=False,
            attrs=target_attrs,
        )
        state = UnitStateField(
            required=False,
            label=_('Needs work'),
            widget=forms.CheckboxInput(
                attrs=fuzzy_attrs,
                check_test=lambda x: x == FUZZY,
            ),
        )

        def __init__(self, *args, **kwargs):
            self.request = kwargs.pop('request', None)
            super(UnitForm, self).__init__(*args, **kwargs)
            self.updated_fields = []

        def clean_source_f(self):
            value = self.cleaned_data['source_f']

            if self.instance.source.strings != value:
                self.instance._source_updated = True
                self.updated_fields.append((SubmissionFields.SOURCE,
                                            to_db(self.instance.source),
                                            to_db(value)))
            if snplurals == 1:
                # Plural with single form, insert placeholder.
                value.append(PLURAL_PLACEHOLDER)

            return value

        def clean_target_f(self):
            value = self.cleaned_data['target_f']

            if self.instance.target.strings != multistring(value or [u'']):
                self.instance._target_updated = True
                self.updated_fields.append((SubmissionFields.TARGET,
                                            to_db(self.instance.target),
                                            to_db(value)))

            return value

        def clean_state(self):
            old_state = self.instance.state  # Integer
            is_fuzzy = self.cleaned_data['state']  # Boolean
            new_target = self.cleaned_data['target_f']

            if (self.request is not None and
                not check_permission('administrate', self.request) and
                is_fuzzy == True):
                raise forms.ValidationError(_('Fuzzy flag must be cleared'))

            if new_target:
                if old_state == UNTRANSLATED:
                    self.instance._save_action = TRANSLATION_ADDED
                    self.instance.store \
                                 .flag_for_deletion(CachedMethods.TRANSLATED)
                else:
                    self.instance._save_action = TRANSLATION_CHANGED

                if is_fuzzy:
                    new_state = FUZZY
                else:
                    new_state = TRANSLATED
            else:
                new_state = UNTRANSLATED
                if old_state > FUZZY:
                    self.instance._save_action = TRANSLATION_DELETED
                    self.instance.store \
                                 .flag_for_deletion(CachedMethods.TRANSLATED)

            if is_fuzzy != (old_state == FUZZY):
                # when Unit toggles its FUZZY state the number of translated words
                # also changes
                self.instance.store.flag_for_deletion(CachedMethods.FUZZY,
                                                      CachedMethods.TRANSLATED,
                                                      CachedMethods.LAST_ACTION)

            if old_state != new_state:
                self.instance._state_updated = True
                self.updated_fields.append((SubmissionFields.STATE,
                                            old_state, new_state))
            else:
                self.instance._state_updated = False

            return new_state


    return UnitForm


def unit_comment_form_factory(language):

    comment_attrs = {
        'lang': language.code,
        'dir': language.direction,
        'class': 'comments expanding focusthis',
        'rows': 2,
        'tabindex': 15,
    }

    class UnitCommentForm(forms.ModelForm):

        class Meta:
            fields = ('translator_comment',)
            model = Unit

        translator_comment = forms.CharField(
            required=True,
            label=_("Translator comment"),
            widget=forms.Textarea(attrs=comment_attrs),
        )

        def __init__(self, *args, **kwargs):
            self.request = kwargs.pop('request', None)
            super(UnitCommentForm, self).__init__(*args, **kwargs)

        def save(self):
            """Register the submission and save the comment."""
            if self.has_changed():
                creation_time = timezone.now()
                translation_project = self.request.translation_project

                sub = Submission(
                    creation_time=creation_time,
                    translation_project=translation_project,
                    submitter=self.request.profile,
                    unit=self.instance,
                    field=SubmissionFields.COMMENT,
                    type=SubmissionTypes.NORMAL,
                    old_value=u"",
                    new_value=self.cleaned_data['translator_comment']
                )
                sub.save()

            super(UnitCommentForm, self).save()


    return UnitCommentForm

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'QualityCheck'
        db.create_table('pootle_store_qualitycheck', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=64, db_index=True)),
            ('unit', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_store.Unit'])),
            ('category', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('message', self.gf('django.db.models.fields.TextField')()),
            ('false_positive', self.gf('django.db.models.fields.BooleanField')(default=False, db_index=True)),
        ))
        db.send_create_signal('pootle_store', ['QualityCheck'])

        # Adding model 'Suggestion'
        db.create_table('pootle_store_suggestion', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('target_f', self.gf('pootle_store.fields.MultiStringField')()),
            ('target_hash', self.gf('django.db.models.fields.CharField')(max_length=32, db_index=True)),
            ('unit', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_store.Unit'])),
            ('translator_comment_f', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
        ))
        db.send_create_signal('pootle_store', ['Suggestion'])

        # Adding unique constraint on 'Suggestion', fields ['unit', 'target_hash']
        db.create_unique('pootle_store_suggestion', ['unit_id', 'target_hash'])

        # Adding model 'Unit'
        db.create_table('pootle_store_unit', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('store', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_store.Store'])),
            ('index', self.gf('django.db.models.fields.IntegerField')(db_index=True)),
            ('unitid', self.gf('django.db.models.fields.TextField')()),
            ('unitid_hash', self.gf('django.db.models.fields.CharField')(max_length=32, db_index=True)),
            ('source_f', self.gf('pootle_store.fields.MultiStringField')(null=True)),
            ('source_hash', self.gf('django.db.models.fields.CharField')(max_length=32, db_index=True)),
            ('source_wordcount', self.gf('django.db.models.fields.SmallIntegerField')(default=0)),
            ('source_length', self.gf('django.db.models.fields.SmallIntegerField')(default=0, db_index=True)),
            ('target_f', self.gf('pootle_store.fields.MultiStringField')(null=True, blank=True)),
            ('target_wordcount', self.gf('django.db.models.fields.SmallIntegerField')(default=0)),
            ('target_length', self.gf('django.db.models.fields.SmallIntegerField')(default=0, db_index=True)),
            ('developer_comment', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('translator_comment', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('locations', self.gf('django.db.models.fields.TextField')(null=True)),
            ('context', self.gf('django.db.models.fields.TextField')(null=True)),
            ('state', self.gf('django.db.models.fields.IntegerField')(default=0, db_index=True)),
            ('mtime', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, db_index=True, blank=True)),
            ('submitted_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, null=True, db_index=True, blank=True)),
            ('commented_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, null=True, db_index=True, blank=True)),
        ))
        db.send_create_signal('pootle_store', ['Unit'])

        # Adding unique constraint on 'Unit', fields ['store', 'unitid_hash']
        db.create_unique('pootle_store_unit', ['store_id', 'unitid_hash'])

        # Adding model 'Store'
        db.create_table('pootle_store_store', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('file', self.gf('pootle_store.fields.TranslationStoreField')(max_length=255, db_index=True)),
            ('pending', self.gf('pootle_store.fields.TranslationStoreField')(ignore='.pending', max_length=255)),
            ('tm', self.gf('pootle_store.fields.TranslationStoreField')(ignore='.tm', max_length=255)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(related_name='child_stores', to=orm['pootle_app.Directory'])),
            ('pootle_path', self.gf('django.db.models.fields.CharField')(unique=True, max_length=255, db_index=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=128)),
            ('sync_time', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(1, 1, 1, 0, 0))),
            ('state', self.gf('django.db.models.fields.IntegerField')(default=0, db_index=True)),
        ))
        db.send_create_signal('pootle_store', ['Store'])

        # Adding unique constraint on 'Store', fields ['parent', 'name']
        db.create_unique('pootle_store_store', ['parent_id', 'name'])

    def backwards(self, orm):
        # Removing unique constraint on 'Store', fields ['parent', 'name']
        db.delete_unique('pootle_store_store', ['parent_id', 'name'])

        # Removing unique constraint on 'Unit', fields ['store', 'unitid_hash']
        db.delete_unique('pootle_store_unit', ['store_id', 'unitid_hash'])

        # Removing unique constraint on 'Suggestion', fields ['unit', 'target_hash']
        db.delete_unique('pootle_store_suggestion', ['unit_id', 'target_hash'])

        # Deleting model 'QualityCheck'
        db.delete_table('pootle_store_qualitycheck')

        # Deleting model 'Suggestion'
        db.delete_table('pootle_store_suggestion')

        # Deleting model 'Unit'
        db.delete_table('pootle_store_unit')

        # Deleting model 'Store'
        db.delete_table('pootle_store_store')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_languages'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'to': "orm['pootle_project.Project']", 'symmetrical': 'False', 'blank': 'True'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        'pootle_store.qualitycheck': {
            'Meta': {'object_name': 'QualityCheck'},
            'category': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'false_positive': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Unit']"})
        },
        'pootle_store.store': {
            'Meta': {'ordering': "['pootle_path']", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Store'},
            'file': ('pootle_store.fields.TranslationStoreField', [], {'max_length': '255', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_stores'", 'to': "orm['pootle_app.Directory']"}),
            'pending': ('pootle_store.fields.TranslationStoreField', [], {'ignore': "'.pending'", 'max_length': '255'}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'sync_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1, 1, 1, 0, 0)'}),
            'tm': ('pootle_store.fields.TranslationStoreField', [], {'ignore': "'.tm'", 'max_length': '255'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stores'", 'to': "orm['pootle_translationproject.TranslationProject']"})
        },
        'pootle_store.suggestion': {
            'Meta': {'unique_together': "(('unit', 'target_hash'),)", 'object_name': 'Suggestion'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {}),
            'target_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'translator_comment_f': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Unit']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_profile.PootleProfile']", 'null': 'True'})
        },
        'pootle_store.unit': {
            'Meta': {'ordering': "['store', 'index']", 'unique_together': "(('store', 'unitid_hash'),)", 'object_name': 'Unit'},
            'commented_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'commented'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'context': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'index': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'locations': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'mtime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'source_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'store': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Store']"}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'submitted'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True', 'blank': 'True'}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'target_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'translator_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unitid': ('django.db.models.fields.TextField', [], {}),
            'unitid_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'})
        },
        'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['pootle_store']

########NEW FILE########
__FILENAME__ = 0002_auto__add_tmunit
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):
    depends_on = (
        ("pootle_app", "0002_add_m2ms"),
        ("pootle_profile", "0001_initial"),
        ("pootle_project", "0001_initial"),
        ("pootle_language", "0001_initial"),
    )

    def forwards(self, orm):
        # Adding model 'TMUnit'
        db.create_table('pootle_store_tmunit', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('project', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_project.Project'])),
            ('source_lang', self.gf('django.db.models.fields.related.ForeignKey')(related_name='tmunit_source_lang', to=orm['pootle_language.Language'])),
            ('target_lang', self.gf('django.db.models.fields.related.ForeignKey')(related_name='tmunit_target_lang', to=orm['pootle_language.Language'])),
            ('source_f', self.gf('pootle_store.fields.MultiStringField')(null=True)),
            ('source_length', self.gf('django.db.models.fields.SmallIntegerField')(default=0, db_index=True)),
            ('target_f', self.gf('pootle_store.fields.MultiStringField')(null=True)),
            ('target_length', self.gf('django.db.models.fields.SmallIntegerField')(default=0, db_index=True)),
            ('submitted_by', self.gf('django.db.models.fields.related.ForeignKey')(related_name='tmunit_submitted_by', null=True, to=orm['pootle_profile.PootleProfile'])),
            ('submitted_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, null=True, db_index=True, blank=True)),
            ('unit', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_store.Unit'])),
        ))
        db.send_create_signal('pootle_store', ['TMUnit'])


    def backwards(self, orm):
        # Deleting model 'TMUnit'
        db.delete_table('pootle_store_tmunit')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_languages'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'to': "orm['pootle_project.Project']", 'symmetrical': 'False', 'blank': 'True'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        'pootle_store.qualitycheck': {
            'Meta': {'object_name': 'QualityCheck'},
            'category': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'false_positive': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Unit']"})
        },
        'pootle_store.store': {
            'Meta': {'ordering': "['pootle_path']", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Store'},
            'file': ('pootle_store.fields.TranslationStoreField', [], {'max_length': '255', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_stores'", 'to': "orm['pootle_app.Directory']"}),
            'pending': ('pootle_store.fields.TranslationStoreField', [], {'ignore': "'.pending'", 'max_length': '255'}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'sync_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1, 1, 1, 0, 0)'}),
            'tm': ('pootle_store.fields.TranslationStoreField', [], {'ignore': "'.tm'", 'max_length': '255'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stores'", 'to': "orm['pootle_translationproject.TranslationProject']"})
        },
        'pootle_store.suggestion': {
            'Meta': {'unique_together': "(('unit', 'target_hash'),)", 'object_name': 'Suggestion'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {}),
            'target_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'translator_comment_f': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Unit']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_profile.PootleProfile']", 'null': 'True'})
        },
        'pootle_store.tmunit': {
            'Meta': {'object_name': 'TMUnit'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_source_lang'", 'to': "orm['pootle_language.Language']"}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_submitted_by'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'target_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_target_lang'", 'to': "orm['pootle_language.Language']"}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Unit']"})
        },
        'pootle_store.unit': {
            'Meta': {'ordering': "['store', 'index']", 'unique_together': "(('store', 'unitid_hash'),)", 'object_name': 'Unit'},
            'commented_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'commented'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'context': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'index': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'locations': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'mtime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'source_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'store': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Store']"}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'submitted'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True', 'blank': 'True'}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'target_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'translator_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unitid': ('django.db.models.fields.TextField', [], {}),
            'unitid_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'})
        },
        'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': "orm['pootle_tagging.Goal']"})
        },
        'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        },
        'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': "orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_store']

########NEW FILE########
__FILENAME__ = 0003_add_m2ms
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models, connection


class Migration(SchemaMigration):

    def forwards(self, orm):
        cursor = connection.cursor()
        if "user_id" in [column[0] for column in connection.introspection.get_table_description(cursor, "pootle_store_suggestion")]:
            # skip the migration if it shouldnt be applied
            return

        # Adding field 'Suggestion.user'
        db.add_column('pootle_store_suggestion', 'user',
                      self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pootle_profile.PootleProfile'], null=True),
                      keep_default=False)

        # Adding field 'Unit.submitted_by'
        db.add_column('pootle_store_unit', 'submitted_by',
                      self.gf('django.db.models.fields.related.ForeignKey')(related_name='submitted', null=True, to=orm['pootle_profile.PootleProfile']),
                      keep_default=False)

        # Adding field 'Unit.commented_by'
        db.add_column('pootle_store_unit', 'commented_by',
                      self.gf('django.db.models.fields.related.ForeignKey')(related_name='commented', null=True, to=orm['pootle_profile.PootleProfile']),
                      keep_default=False)

        # Adding field 'Store.translation_project'
        db.add_column('pootle_store_store', 'translation_project',
                      self.gf('django.db.models.fields.related.ForeignKey')(related_name='stores', null=True, to=orm['pootle_translationproject.TranslationProject']),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Suggestion.user'
        db.delete_column('pootle_store_suggestion', 'user')

        # Deleting field 'Unit.submitted_by'
        db.delete_column('pootle_store_unit', 'submitted_by')

        # Deleting field 'Unit.commented_by'
        db.delete_column('pootle_store_unit', 'commented_by')

        # Deleting field 'Store.translation_project'
        db.delete_column('pootle_store_store', 'translation_project')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'languages': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_languages'", 'blank': 'True', 'db_index': 'True', 'to': "orm['pootle_language.Language']"}),
            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'db_index': 'True', 'to': "orm['pootle_project.Project']", 'symmetrical': 'False', 'blank': 'True'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['auth.User']", 'unique': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        'pootle_store.qualitycheck': {
            'Meta': {'object_name': 'QualityCheck'},
            'category': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'false_positive': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Unit']"})
        },
        'pootle_store.store': {
            'Meta': {'ordering': "['pootle_path']", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Store'},
            'file': ('pootle_store.fields.TranslationStoreField', [], {'max_length': '255', 'db_index': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_stores'", 'to': "orm['pootle_app.Directory']"}),
            'pending': ('pootle_store.fields.TranslationStoreField', [], {'ignore': "'.pending'", 'max_length': '255'}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'sync_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1, 1, 1, 0, 0)'}),
            'tm': ('pootle_store.fields.TranslationStoreField', [], {'ignore': "'.tm'", 'max_length': '255'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stores'", 'to': "orm['pootle_translationproject.TranslationProject']"})
        },
        'pootle_store.suggestion': {
            'Meta': {'unique_together': "(('unit', 'target_hash'),)", 'object_name': 'Suggestion'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {}),
            'target_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'translator_comment_f': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Unit']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_profile.PootleProfile']", 'null': 'True'})
        },
        'pootle_store.tmunit': {
            'Meta': {'object_name': 'TMUnit'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_source_lang'", 'to': "orm['pootle_language.Language']"}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_submitted_by'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'target_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_target_lang'", 'to': "orm['pootle_language.Language']"}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Unit']"})
        },
        'pootle_store.unit': {
            'Meta': {'ordering': "['store', 'index']", 'unique_together': "(('store', 'unitid_hash'),)", 'object_name': 'Unit'},
            'commented_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'commented'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'context': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'index': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'locations': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'mtime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'source_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'store': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_store.Store']"}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'submitted'", 'null': 'True', 'to': "orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True', 'blank': 'True'}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'target_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'translator_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unitid': ('django.db.models.fields.TextField', [], {}),
            'unitid_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'})
        },
        'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': "orm['pootle_tagging.Goal']"})
        },
        'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        },
        'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': "orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_store']

########NEW FILE########
__FILENAME__ = 0004_auto__add_field_unit_creation_time
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Unit.creation_time'
        db.add_column(u'pootle_store_unit', 'creation_time',
                      self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, null=True, db_index=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Unit.creation_time'
        db.delete_column(u'pootle_store_unit', 'creation_time')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': u"orm['pootle_language.Language']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        u'pootle_store.qualitycheck': {
            'Meta': {'object_name': 'QualityCheck'},
            'category': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'false_positive': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"})
        },
        u'pootle_store.store': {
            'Meta': {'ordering': "['pootle_path']", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Store'},
            'file': ('pootle_store.fields.TranslationStoreField', [], {'max_length': '255', 'db_index': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_stores'", 'to': "orm['pootle_app.Directory']"}),
            'pending': ('pootle_store.fields.TranslationStoreField', [], {'ignore': "'.pending'", 'max_length': '255'}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'sync_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1, 1, 1, 0, 0)'}),
            'tm': ('pootle_store.fields.TranslationStoreField', [], {'ignore': "'.tm'", 'max_length': '255'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stores'", 'to': u"orm['pootle_translationproject.TranslationProject']"})
        },
        u'pootle_store.suggestion': {
            'Meta': {'unique_together': "(('unit', 'target_hash'),)", 'object_name': 'Suggestion'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {}),
            'target_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'translator_comment_f': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_profile.PootleProfile']", 'null': 'True'})
        },
        u'pootle_store.tmunit': {
            'Meta': {'object_name': 'TMUnit'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_source_lang'", 'to': u"orm['pootle_language.Language']"}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_submitted_by'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'target_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_target_lang'", 'to': u"orm['pootle_language.Language']"}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"})
        },
        u'pootle_store.unit': {
            'Meta': {'ordering': "['store', 'index']", 'unique_together': "(('store', 'unitid_hash'),)", 'object_name': 'Unit'},
            'commented_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'commented'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'context': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'index': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'locations': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'mtime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'source_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'store': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Store']"}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'submitted'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True', 'blank': 'True'}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'target_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'translator_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unitid': ('django.db.models.fields.TextField', [], {}),
            'unitid_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'})
        },
        u'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': u"orm['pootle_tagging.Goal']"})
        },
        u'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        },
        u'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': u"orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_store']
########NEW FILE########
__FILENAME__ = 0005_auto__del_field_store_tm__del_field_store_pending
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'Store.tm'
        db.delete_column(u'pootle_store_store', 'tm')

        # Deleting field 'Store.pending'
        db.delete_column(u'pootle_store_store', 'pending')


    def backwards(self, orm):
        # Adding field 'Store.tm'
        db.add_column(u'pootle_store_store', 'tm',
                      self.gf('pootle_store.fields.TranslationStoreField')(ignore='.tm', default='', max_length=255),
                      keep_default=False)

        # Adding field 'Store.pending'
        db.add_column(u'pootle_store_store', 'pending',
                      self.gf('pootle_store.fields.TranslationStoreField')(ignore='.pending', default='', max_length=255),
                      keep_default=False)


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': u"orm['pootle_language.Language']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        u'pootle_store.qualitycheck': {
            'Meta': {'object_name': 'QualityCheck'},
            'category': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'false_positive': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"})
        },
        u'pootle_store.store': {
            'Meta': {'ordering': "['pootle_path']", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Store'},
            'file': ('pootle_store.fields.TranslationStoreField', [], {'max_length': '255', 'db_index': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_stores'", 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'sync_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1, 1, 1, 0, 0)'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stores'", 'to': u"orm['pootle_translationproject.TranslationProject']"})
        },
        u'pootle_store.suggestion': {
            'Meta': {'unique_together': "(('unit', 'target_hash'),)", 'object_name': 'Suggestion'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {}),
            'target_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'translator_comment_f': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_profile.PootleProfile']", 'null': 'True'})
        },
        u'pootle_store.tmunit': {
            'Meta': {'object_name': 'TMUnit'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_source_lang'", 'to': u"orm['pootle_language.Language']"}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_submitted_by'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'target_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_target_lang'", 'to': u"orm['pootle_language.Language']"}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"})
        },
        u'pootle_store.unit': {
            'Meta': {'ordering': "['store', 'index']", 'unique_together': "(('store', 'unitid_hash'),)", 'object_name': 'Unit'},
            'commented_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'commented'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'context': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'index': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'locations': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'mtime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'source_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'store': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Store']"}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'submitted'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True', 'blank': 'True'}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'target_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'translator_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unitid': ('django.db.models.fields.TextField', [], {}),
            'unitid_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'})
        },
        u'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': u"orm['pootle_tagging.Goal']"})
        },
        u'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        },
        u'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': u"orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_store']

########NEW FILE########
__FILENAME__ = 0006_auto__add_field_store_total_wordcount__add_field_store_translated_word
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Store.total_wordcount'
        db.add_column(u'pootle_store_store', 'total_wordcount',
                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
                      keep_default=False)

        # Adding field 'Store.translated_wordcount'
        db.add_column(u'pootle_store_store', 'translated_wordcount',
                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
                      keep_default=False)

        # Adding field 'Store.fuzzy_wordcount'
        db.add_column(u'pootle_store_store', 'fuzzy_wordcount',
                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
                      keep_default=False)

        # Adding field 'Store.suggestion_count'
        db.add_column(u'pootle_store_store', 'suggestion_count',
                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Store.total_wordcount'
        db.delete_column(u'pootle_store_store', 'total_wordcount')

        # Deleting field 'Store.translated_wordcount'
        db.delete_column(u'pootle_store_store', 'translated_wordcount')

        # Deleting field 'Store.fuzzy_wordcount'
        db.delete_column(u'pootle_store_store', 'fuzzy_wordcount')

        # Deleting field 'Store.suggestion_count'
        db.delete_column(u'pootle_store_store', 'suggestion_count')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': u"orm['pootle_language.Language']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'ui_lang': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        u'pootle_store.qualitycheck': {
            'Meta': {'object_name': 'QualityCheck'},
            'category': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'false_positive': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"})
        },
        u'pootle_store.store': {
            'Meta': {'ordering': "['pootle_path']", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Store'},
            'file': ('pootle_store.fields.TranslationStoreField', [], {'max_length': '255', 'db_index': 'True'}),
            'fuzzy_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_stores'", 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suggestion_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'sync_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1, 1, 1, 0, 0)'}),
            'total_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stores'", 'to': u"orm['pootle_translationproject.TranslationProject']"})
        },
        u'pootle_store.suggestion': {
            'Meta': {'unique_together': "(('unit', 'target_hash'),)", 'object_name': 'Suggestion'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {}),
            'target_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'translator_comment_f': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_profile.PootleProfile']", 'null': 'True'})
        },
        u'pootle_store.tmunit': {
            'Meta': {'object_name': 'TMUnit'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_source_lang'", 'to': u"orm['pootle_language.Language']"}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_submitted_by'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'target_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_target_lang'", 'to': u"orm['pootle_language.Language']"}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"})
        },
        u'pootle_store.unit': {
            'Meta': {'ordering': "['store', 'index']", 'unique_together': "(('store', 'unitid_hash'),)", 'object_name': 'Unit'},
            'commented_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'commented'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'context': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'index': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'locations': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'mtime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'source_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'store': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Store']"}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'submitted'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True', 'blank': 'True'}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'target_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'translator_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unitid': ('django.db.models.fields.TextField', [], {}),
            'unitid_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'})
        },
        u'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': u"orm['pootle_tagging.Goal']"})
        },
        u'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        },
        u'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': u"orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_store']
########NEW FILE########
__FILENAME__ = 0007_auto__add_field_store_failing_critical_count
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Store.failing_critical_count'
        db.add_column(u'pootle_store_store', 'failing_critical_count',
                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Store.failing_critical_count'
        db.delete_column(u'pootle_store_store', 'failing_critical_count')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_profile.pootleprofile': {
            'Meta': {'object_name': 'PootleProfile', 'db_table': "'pootle_app_pootleprofile'"},
            'alt_src_langs': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "'user_alt_src_langs'", 'blank': 'True', 'db_index': 'True', 'to': u"orm['pootle_language.Language']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'input_height': ('django.db.models.fields.SmallIntegerField', [], {'default': '5'}),
            'unit_rows': ('django.db.models.fields.SmallIntegerField', [], {'default': '9'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        u'pootle_store.qualitycheck': {
            'Meta': {'object_name': 'QualityCheck'},
            'category': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'false_positive': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"})
        },
        u'pootle_store.store': {
            'Meta': {'ordering': "['pootle_path']", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Store'},
            'failing_critical_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'file': ('pootle_store.fields.TranslationStoreField', [], {'max_length': '255', 'db_index': 'True'}),
            'fuzzy_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_stores'", 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'suggestion_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'sync_time': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1, 1, 1, 0, 0)'}),
            'total_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translation_project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stores'", 'to': u"orm['pootle_translationproject.TranslationProject']"})
        },
        u'pootle_store.suggestion': {
            'Meta': {'unique_together': "(('unit', 'target_hash'),)", 'object_name': 'Suggestion'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {}),
            'target_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'translator_comment_f': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_profile.PootleProfile']", 'null': 'True'})
        },
        u'pootle_store.tmunit': {
            'Meta': {'object_name': 'TMUnit'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_source_lang'", 'to': u"orm['pootle_language.Language']"}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_submitted_by'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'target_lang': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'tmunit_target_lang'", 'to': u"orm['pootle_language.Language']"}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'unit': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Unit']"})
        },
        u'pootle_store.unit': {
            'Meta': {'ordering': "['store', 'index']", 'unique_together': "(('store', 'unitid_hash'),)", 'object_name': 'Unit'},
            'commented_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'commented'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'commented_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'context': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'creation_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'developer_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'index': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'locations': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'mtime': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'db_index': 'True', 'blank': 'True'}),
            'source_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True'}),
            'source_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
            'source_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'source_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0', 'db_index': 'True'}),
            'store': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_store.Store']"}),
            'submitted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'submitted'", 'null': 'True', 'to': u"orm['pootle_profile.PootleProfile']"}),
            'submitted_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'target_f': ('pootle_store.fields.MultiStringField', [], {'null': 'True', 'blank': 'True'}),
            'target_length': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'target_wordcount': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'translator_comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'unitid': ('django.db.models.fields.TextField', [], {}),
            'unitid_hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'})
        },
        u'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': u"orm['pootle_tagging.Goal']"})
        },
        u'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'failing_critical_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'fuzzy_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'}),
            'suggestion_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'total_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'})
        },
        u'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': u"orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_store']
########NEW FILE########
__FILENAME__ = models
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import datetime
import logging
import os
import re
from hashlib import md5
from itertools import chain

from translate.filters.decorators import Category
from translate.storage import base

from django.conf import settings
from django.contrib.auth.models import User
from django.core.exceptions import ObjectDoesNotExist
from django.core.files.storage import FileSystemStorage
from django.core.urlresolvers import reverse
from django.db import models, DatabaseError, IntegrityError
from django.db.models.signals import post_delete
from django.db.transaction import commit_on_success
from django.template.defaultfilters import escape, truncatechars
from django.utils import dateformat, timezone, tzinfo
from django.utils.functional import cached_property
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _

from taggit.managers import TaggableManager

from pootle.core import log
from pootle.core.managers import RelatedManager
from pootle.core.mixins import CachedMethods, TreeItem
from pootle.core.url_helpers import get_editor_filter, split_pootle_path
from pootle_misc.aggregate import max_column
from pootle_misc.checks import check_names
from pootle_misc.util import datetime_min
from pootle_statistics.models import (Submission, SubmissionFields,
                                      SubmissionTypes)
from pootle_tagging.models import ItemWithGoal

from .caching import unit_delete_cache, unit_update_cache
from .fields import (MultiStringField, TranslationStoreField,
                     PLURAL_PLACEHOLDER, SEPARATOR)
from .filetypes import factory_classes, is_monolingual
from .signals import translation_submitted
from .util import FUZZY, OBSOLETE, TRANSLATED, UNTRANSLATED


#
# Store States
#

# Store being modified
LOCKED = -1
# Store just created, not parsed yet
NEW = 0
# Store just parsed, units added but no quality checks were run
PARSED = 1
# Quality checks run
CHECKED = 2



############### Quality Check #############

class QualityCheck(models.Model):
    """Database cache of results of qualitychecks on unit."""
    name = models.CharField(max_length=64, db_index=True)
    unit = models.ForeignKey("pootle_store.Unit", db_index=True)
    category = models.IntegerField(null=False, default=Category.NO_CATEGORY)
    message = models.TextField()
    false_positive = models.BooleanField(default=False, db_index=True)

    objects = RelatedManager()

    @property
    def display_name(self):
        return check_names.get(self.name, self.name)

    def __unicode__(self):
        return self.name


################# Suggestion ################


class Suggestion(models.Model, base.TranslationUnit):
    """Suggested translation for a :cls:`~pootle_store.models.Unit`, provided
    by users or automatically generated after a merge.
    """
    target_f = MultiStringField()
    target_hash = models.CharField(max_length=32, db_index=True)
    unit = models.ForeignKey('pootle_store.Unit')
    user = models.ForeignKey('pootle_profile.PootleProfile', null=True)
    translator_comment_f = models.TextField(null=True, blank=True)

    objects = RelatedManager()

    class Meta:
        unique_together = ('unit', 'target_hash')

    ############################ Properties ###################################

    @property
    def _target(self):
        return self.target_f

    @_target.setter
    def _target(self, value):
        self.target_f = value
        self._set_hash()

    @property
    def _source(self):
        return self.unit._source

    @property
    def translator_comment(self):
        return self.translator_comment_f

    @translator_comment.setter
    def translator_comment(self, value):
        self.translator_comment_f = value
        self._set_hash()

    ############################ Methods ######################################

    def __unicode__(self):
        return unicode(self.target)

    def _set_hash(self):
        string = self.translator_comment_f
        if string:
            string = self.target_f + SEPARATOR + string
        else:
            string = self.target_f
        self.target_hash = md5(string.encode("utf-8")).hexdigest()

    def save(self, *args, **kwargs):
        if not self.id:
            self.unit.store.suggestion_count += 1
            self.unit.store.save()
            self.unit.store.translation_project.suggestion_count += 1
            self.unit.store.translation_project.save()
        super(Suggestion, self).save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        self.unit.store.suggestion_count -= 1
        self.unit.store.save()
        self.unit.store.translation_project.suggestion_count -= 1
        self.unit.store.translation_project.save()
        super(Suggestion, self).delete(*args, **kwargs)


################################ Signal handlers ##############################

def delete_votes(sender, instance, **kwargs):
    # Since votes are linked by ContentType and not foreign keys, referential
    # integrity is not kept, and we have to ensure we remove any votes manually
    # when a suggestion is removed
    from voting.models import Vote
    from django.contrib.contenttypes.models import ContentType
    ctype = ContentType.objects.get_for_model(instance)
    Vote.objects.filter(content_type=ctype,
                        object_id=instance._get_pk_val()).delete()

post_delete.connect(delete_votes, sender=Suggestion)


############### Unit ####################

def fix_monolingual(oldunit, newunit, monolingual=None):
    """Hackish workaround for monolingual files always having only source and
    no target.

    We compare monolingual unit with corresponding bilingual unit, if sources
    differ assume monolingual source is actually a translation.
    """
    if monolingual is None:
        monolingual = is_monolingual(type(newunit._store))

    if monolingual and newunit.source != oldunit.source:
        newunit.target = newunit.source
        newunit.source = oldunit.source


class UnitManager(RelatedManager):
    def get_for_path(self, pootle_path, profile, permission_code='view'):
        """Returns units that fall below the `pootle_path` umbrella.

        :param pootle_path: An internal pootle path.
        :param profile: The user profile who is accessing the units.
        :param permission_code: The permission code to check units for.
        """
        lang, proj, dir_path, filename = split_pootle_path(pootle_path)

        units_qs = super(UnitManager, self).get_query_set().filter(
            state__gt=OBSOLETE,
            store__translation_project__project__disabled=False,
            store__translation_project__disabled=False,
        )

        # /projects/<project_code>/translate/*
        if lang is None and proj is not None:
            if dir_path and filename:
                units_path = ''.join(['/%/', proj, '/', dir_path, filename])
            elif dir_path:
                units_path = ''.join(['/%/', proj, '/', dir_path, '%'])
            elif filename:
                units_path = ''.join(['/%/', proj, '/', filename])
            else:
                units_path = ''.join(['/%/', proj, '/%'])
        # /projects/translate/*
        elif lang is None and proj is None:
            units_path = '/%'
        # /<lang_code>/<project_code>/translate/*
        # /<lang_code>/translate/*
        else:
            units_path = ''.join([pootle_path, '%'])

        units_qs = units_qs.extra(
            where=[
                'pootle_store_store.pootle_path LIKE %s',
                'pootle_store_store.pootle_path NOT LIKE %s',
            ], params=[units_path, '/templates/%']
        )

        # Non-superusers are limited to the projects they have access to
        if not profile.user.is_superuser:
            from pootle_project.models import Project
            user_projects = Project.accessible_by_user(profile.user)
            units_qs = units_qs.filter(
                store__translation_project__project__code__in=user_projects,
            )

        return units_qs


class TMUnit(models.Model, base.TranslationUnit):
    """A model representing a translation memory unit."""

    project = models.ForeignKey('pootle_project.Project', db_index=True)
    source_lang = models.ForeignKey(
        'pootle_language.Language',
        db_index=True,
        related_name='tmunit_source_lang',
    )
    target_lang = models.ForeignKey(
        'pootle_language.Language',
        db_index=True,
        related_name='tmunit_target_lang',
    )
    source_f = MultiStringField(null=True)
    source_length = models.SmallIntegerField(
        db_index=True,
        default=0,
        editable=False,
    )
    target_f = MultiStringField(null=True)
    target_length = models.SmallIntegerField(
        db_index=True,
        default=0,
        editable=False,
    )
    submitted_by = models.ForeignKey(
        'pootle_profile.PootleProfile',
        null=True,
        db_index=True,
        related_name='tmunit_submitted_by',
    )
    submitted_on = models.DateTimeField(
        auto_now_add=True,
        db_index=True,
        null=True,
    )
    unit = models.ForeignKey('pootle_store.Unit', db_index=True)

    ############################ Properties ###################################

    @property
    def _source(self):
        return self.source_f

    @_source.setter
    def _source(self, value):
        self.source_f = value
        self.source_length = len(value)

    @property
    def _target(self):
        return self.target_f

    @_target.setter
    def _target(self, value):
        self.target_f = value
        self.target_length = len(value)

    ############################ Methods ######################################

    def __unicode__(self):
        # FIXME: consider using unit id instead?
        return unicode(self.source)

    def __init__(self, *args, **kwargs):
        super(TMUnit, self).__init__(*args, **kwargs)

    def create(self, unit):
        if unit is not None:
            try:
                tmunit = TMUnit.objects.get(unit=unit)
            except TMUnit.DoesNotExist:
                tmunit = self
            except TMUnit.MultipleObjectsReturned:
                raise AssertionError("Multiple TMUnits for the same Unit")

            tmunit.source = unit.source
            tmunit.target = unit.target

            tmunit.submitted_by = unit.submitted_by
            tmunit.submitted_on = unit.submitted_on

            tp = unit.store.translation_project
            tmunit.project = tp.project
            tmunit.source_lang = tp.project.source_language
            tmunit.target_lang = tp.language

            tmunit.unit = unit

            return tmunit

    def hasplural(self):
        return (self.source is not None and
                (len(self.source.strings) > 1
                or hasattr(self.source, "plural") and
                self.source.plural))

class Unit(models.Model, base.TranslationUnit):
    store = models.ForeignKey("pootle_store.Store", db_index=True)
    index = models.IntegerField(db_index=True)
    unitid = models.TextField(editable=False)
    unitid_hash = models.CharField(
        max_length=32,
        db_index=True,
        editable=False,
    )
    source_f = MultiStringField(null=True)
    source_hash = models.CharField(
        max_length=32,
        db_index=True,
        editable=False,
    )
    source_wordcount = models.SmallIntegerField(default=0, editable=False)
    source_length = models.SmallIntegerField(
        db_index=True,
        default=0,
        editable=False,
    )
    target_f = MultiStringField(null=True, blank=True)
    target_wordcount = models.SmallIntegerField(default=0, editable=False)
    target_length = models.SmallIntegerField(
        db_index=True,
        default=0,
        editable=False,
    )
    developer_comment = models.TextField(null=True, blank=True)
    translator_comment = models.TextField(null=True, blank=True)
    locations = models.TextField(null=True, editable=False)
    context = models.TextField(null=True, editable=False)
    state = models.IntegerField(
        null=False,
        default=UNTRANSLATED,
        db_index=True,
    )

    # Metadata
    creation_time = models.DateTimeField(
        auto_now_add=True,
        db_index=True,
        editable=False,
        null=True,
    )
    mtime = models.DateTimeField(
        auto_now=True,
        auto_now_add=True,
        db_index=True,
        editable=False,
    )
    submitted_by = models.ForeignKey(
        'pootle_profile.PootleProfile',
        null=True,
        db_index=True,
        related_name='submitted',
    )
    submitted_on = models.DateTimeField(
        auto_now_add=True,
        db_index=True,
        null=True,
    )
    commented_by = models.ForeignKey(
        'pootle_profile.PootleProfile',
        null=True,
        db_index=True,
        related_name='commented',
    )
    commented_on = models.DateTimeField(
        auto_now_add=True,
        db_index=True,
        null=True,
    )

    objects = UnitManager()

    class Meta:
        ordering = ['store', 'index']
        unique_together = ('store', 'unitid_hash')
        get_latest_by = 'mtime'

    ############################ Properties ###################################

    @property
    def _source(self):
        return self.source_f

    @_source.setter
    def _source(self, value):
        self.source_f = value
        self._source_updated = True

    @property
    def _target(self):
        return self.target_f

    @_target.setter
    def _target(self, value):
        self.target_f = value
        self._target_updated = True

    @property
    def has_critical_failures(self):
        return QualityCheck.objects.filter(
            unit=self,
            category=Category.CRITICAL,
            false_positive=False,
        ).exists()

    ############################ Methods ######################################

    def __unicode__(self):
        # FIXME: consider using unit id instead?
        return unicode(self.source)

    def __str__(self):
        unitclass = self.get_unit_class()
        return str(self.convert(unitclass))

    def __init__(self, *args, **kwargs):
        super(Unit, self).__init__(*args, **kwargs)
        self._rich_source = None
        self._source_updated = False
        self._rich_target = None
        self._target_updated = False
        self._encoding = 'UTF-8'

    def delete(self, *args, **kwargs):
        log.action_log(user='system', action=log.UNIT_DELETED,
            lang=self.store.translation_project.language.code,
            unit=self.id,
            translation='')
        unit_delete_cache(self)

        super(Unit, self).delete(*args, **kwargs)

    def save(self, *args, **kwargs):
        if not hasattr(self, '_log_user'):
            self._log_user = 'system'
        if not self.id:
            self._save_action = log.UNIT_ADDED

        unit_update_cache(self)

        if self.id:
            if hasattr(self, '_save_action'):
                log.action_log(user=self._log_user, action=self._save_action,
                    lang=self.store.translation_project.language.code,
                    unit=self.id, translation=self.target_f
                )

        super(Unit, self).save(*args, **kwargs)

        if hasattr(self, '_save_action') and self._save_action == log.UNIT_ADDED:
            log.action_log(user=self._log_user, action=self._save_action,
                lang=self.store.translation_project.language.code,
                unit=self.id,
                translation=self.target_f
            )

        if self._source_updated or self._target_updated:
            # Add to TM
            if (self.source is not None) and (self.target is not None):
                tmunit = TMUnit().create(self)
                tmunit.save()

        # done processing source/target update remove flag
        self._source_updated = False
        self._target_updated = False

        # update cache only if we are updating a single unit
        if self.store.state >= PARSED:
            self.store.flag_for_deletion(CachedMethods.MTIME)
            self.store.update_cache()

    def get_absolute_url(self):
        lang, proj, dir, fn = split_pootle_path(self.store.pootle_path)
        return reverse('pootle-tp-overview', args=[lang, proj, dir, fn])

    def get_translate_url(self):
        lang, proj, dir, fn = split_pootle_path(self.store.pootle_path)
        return u''.join([
            reverse('pootle-tp-translate', args=[lang, proj, dir, fn]),
            '#unit=', unicode(self.id),
        ])

    def get_mtime(self):
        return self.mtime

    def is_accessible_by(self, user):
        """Returns `True` if the current unit is accessible by `user`."""
        if user.is_superuser:
            return True

        from pootle_project.models import Project
        user_projects = Project.accessible_by_user(user)
        return self.store.translation_project.project.code in user_projects

    def convert(self, unitclass):
        """Convert to a unit of type :param:`unitclass` retaining as much
        information from the database as the target format can support."""
        newunit = unitclass(self.source)
        newunit.target = self.target
        newunit.markfuzzy(self.isfuzzy())

        locations = self.getlocations()
        if locations:
            newunit.addlocations(locations)

        notes = self.getnotes(origin="developer")
        if notes:
            newunit.addnote(notes, origin="developer")

        notes = self.getnotes(origin="translator")
        if notes:
            newunit.addnote(notes, origin="translator")

        newunit.setid(self.getid())
        newunit.setcontext(self.getcontext())

        if hasattr(newunit, "addalttrans"):
            for suggestion in self.get_suggestions().iterator():
                newunit.addalttrans(suggestion.target,
                                    origin=unicode(suggestion.user))

        if self.isobsolete():
            newunit.makeobsolete()

        return newunit

    def get_unit_class(self):
        try:
            return self.store.get_file_class().UnitClass
        except ObjectDoesNotExist:
            from translate.storage import po
            return po.pounit

    def getorig(self):
        unit = self.store.file.store.units[self.index]
        if self.getid() == unit.getid():
            return unit

        # FIXME: if we are here, file changed structure and we need to update
        # indexes
        logging.debug(u"Incorrect unit index %d for %s in file %s",
                      unit.index, unit, unit.store.file)

        self.store.file.store.require_index()
        unit = self.store.file.store.findid(self.getid())

        return unit

    def sync(self, unit):
        """Sync in file unit with translations from the DB."""
        changed = False

        if not self.isobsolete() and unit.isobsolete():
            unit.resurrect()
            changed = True

        if unit.target != self.target:
            if unit.hasplural():
                nplurals = self.store.translation_project.language.nplurals
                target_plurals = len(self.target.strings)
                strings = self.target.strings
                if target_plurals < nplurals:
                    strings.extend([u'']*(nplurals - target_plurals))
                if unit.target.strings != strings:
                    unit.target = strings
                    changed = True
            else:
                unit.target = self.target
                changed = True

        self_notes = self.getnotes(origin="translator")
        if unit.getnotes(origin="translator") != self_notes or '':
            unit.addnote(self_notes, origin="translator", position="replace")
            changed = True

        if unit.isfuzzy() != self.isfuzzy():
            unit.markfuzzy(self.isfuzzy())
            changed = True

        if hasattr(unit, 'addalttrans') and self.get_suggestions().count():
            alttranslist = [alttrans.target for alttrans in unit.getalttrans()]
            for suggestion in self.get_suggestions().iterator():
                if suggestion.target in alttranslist:
                    # don't add duplicate suggestion
                    continue
                unit.addalttrans(suggestion.target, unicode(suggestion.user))
                changed = True

        if self.isobsolete() and not unit.isobsolete():
            unit.makeobsolete()
            changed = True

        return changed

    def update(self, unit):
        """Update in-DB translation from the given :param:`unit`.

        :rtype: bool
        :return: True if the new :param:`unit` differs from the current unit.
            Two units differ when any of the fields differ (source, target,
            translator/developer comments, locations, context, status...).
        """
        changed = False

        def stringcount(string):
            try:
                return len(string.strings)
            except AttributeError:
                return 1

        if (self.source != unit.source or
            len(self.source.strings) != stringcount(unit.source) or
            self.hasplural() != unit.hasplural()):

            if unit.hasplural() and len(unit.source.strings) == 1:
                self.source = [unit.source, PLURAL_PLACEHOLDER]
            else:
                self.source = unit.source

            changed = True

        if (self.target != unit.target or
            len(self.target.strings) != stringcount(unit.target)):
            notempty = filter(None, self.target_f.strings)
            self.target = unit.target

            if filter(None, self.target_f.strings) or notempty:
                #FIXME: we need to do this cause we discard nplurals
                # for empty plurals
                changed = True

        notes = unit.getnotes(origin="developer")

        if (self.developer_comment != notes and
            (self.developer_comment or notes)):
            self.developer_comment = notes or None
            changed = True

        notes = unit.getnotes(origin="translator")

        if (self.translator_comment != notes and
            (self.translator_comment or notes)):
            self.translator_comment = notes or None
            changed = True

        locations = "\n".join(unit.getlocations())
        if self.locations != locations and (self.locations or locations):
            self.locations = locations or None
            changed = True

        context = unit.getcontext()
        if self.context != unit.getcontext() and (self.context or context):
            self.context = context or None
            changed = True

        if self.isfuzzy() != unit.isfuzzy():
            self.markfuzzy(unit.isfuzzy())
            changed = True

        if self.isobsolete() != unit.isobsolete():
            if unit.isobsolete():
                self.makeobsolete()
            else:
                self.resurrect()

            changed = True

        if self.unitid != unit.getid():
            self.unitid = unicode(unit.getid()) or unicode(unit.source)
            self.unitid_hash = md5(self.unitid.encode("utf-8")).hexdigest()
            changed = True

        if hasattr(unit, 'getalttrans'):
            for suggestion in unit.getalttrans():
                if suggestion.source == self.source:
                    self.add_suggestion(suggestion.target, touch=False)

                changed = True

        return changed

    def update_qualitychecks(self, created=False, keep_false_positives=False):
        """Run quality checks and store result in the database."""
        existing = []

        if not created:
            checks = self.qualitycheck_set.all()
            if keep_false_positives:
                existing = set(checks.filter(false_positive=True) \
                                     .values_list('name', flat=True))
                checks = checks.filter(false_positive=False)

            if checks.count() > 0:
                self.store.flag_for_deletion(CachedMethods.CHECKS)
                # all checks should be recalculated
                checks.delete()

        # no checks if unit is untranslated
        if not self.target:
            return

        qc_failures = self.store.translation_project.checker \
                                .run_filters(self, categorised=True)

        for name in qc_failures.iterkeys():
            if name == 'fuzzy' or name in existing:
                # keep false-positive checks
                continue

            message = qc_failures[name]['message']
            category = qc_failures[name]['category']

            self.qualitycheck_set.create(name=name, message=message,
                                         category=category)

            self.store.flag_for_deletion(CachedMethods.CHECKS)

    def get_qualitychecks(self):
        return self.qualitycheck_set.all()

    def get_active_qualitychecks(self):
        return self.qualitycheck_set.filter(false_positive=False)

    # FIXME: This is a hackish implementation needed due to the underlying
    # lame model definitions
    def get_reviewer(self):
        """Retrieve reviewer information for the current unit.

        :return: In case the current unit's status is an effect of accepting a
            suggestion, the reviewer profile is returned.
            Otherwise, returns ``None``, indicating that the current unit's
            status is an effect of any other actions.
        """
        if self.submission_set.count():
            # Find the latest submission changing either the target or the
            # unit's state and return the reviewer attached to it in case the
            # submission type was accepting a suggestion
            last_submission = self.submission_set.filter(
                    field__in=[SubmissionFields.TARGET, SubmissionFields.STATE]
                ).latest()
            if last_submission.type == SubmissionTypes.SUGG_ACCEPT:
                return getattr(last_submission.from_suggestion, 'reviewer',
                               None)

        return None

    ################# TranslationUnit ############################

    def getnotes(self, origin=None):
        if origin is None:
            notes = ''
            if self.translator_comment is not None:
                notes += self.translator_comment
            if self.developer_comment is not None:
                notes += self.developer_comment
            return notes
        elif origin == "translator":
            return self.translator_comment or ''
        elif origin in ["programmer", "developer", "source code"]:
            return self.developer_comment or ''
        else:
            raise ValueError("Comment type not valid")

    def addnote(self, text, origin=None, position="append"):
        if not (text and text.strip()):
            return
        if origin in ["programmer", "developer", "source code"]:
            self.developer_comment = text
        else:
            self.translator_comment = text

    def getid(self):
        return self.unitid

    def setid(self, value):
        self.unitid = value
        self.unitid_hash = md5(self.unitid.encode("utf-8")).hexdigest()

    def getlocations(self):
        if self.locations is None:
            return []
        return filter(None, self.locations.split('\n'))

    def addlocation(self, location):
        if self.locations is None:
            self.locations = ''
        self.locations += location + "\n"

    def getcontext(self):
        return self.context

    def setcontext(self, value):
        self.context = value

    def isfuzzy(self):
        return self.state == FUZZY

    def markfuzzy(self, value=True):
        if self.state <= OBSOLETE:
            return

        if value != (self.state == FUZZY):
            # when Unit toggles its FUZZY state the number of translated words
            # also changes
            self.store.flag_for_deletion(CachedMethods.FUZZY,
                                         CachedMethods.TRANSLATED,
                                         CachedMethods.LAST_ACTION)

        if value:
            self.state = FUZZY
        elif self.state <= FUZZY:
            if filter(None, self.target_f.strings):
                self.state = TRANSLATED
            else:
                self.state = UNTRANSLATED

    def hasplural(self):
        return (self.source is not None and
                (len(self.source.strings) > 1
                or hasattr(self.source, "plural") and
                self.source.plural))

    def isobsolete(self):
        return self.state == OBSOLETE

    def makeobsolete(self):
        if self.state > OBSOLETE:
            # when Unit becomes obsolete the cache should be updated
            unit_delete_cache(self)
            self._save_action = log.UNIT_OBSOLETE

            self.state = OBSOLETE

    def resurrect(self):
        if self.state > OBSOLETE:
            return

        if filter(None, self.target_f.strings):
            self.state = TRANSLATED
        else:
            self.state = UNTRANSLATED

    def istranslated(self):
        if self._target_updated and not self.isfuzzy():
            return bool(filter(None, self.target_f.strings))
        return self.state >= TRANSLATED

    @classmethod
    def buildfromunit(cls, unit):
        newunit = cls()
        newunit.update(unit)
        return newunit

    def addalttrans(self, txt, origin=None):
        self.add_suggestion(txt, user=origin)

    def getalttrans(self):
        return self.get_suggestions()

    def delalttrans(self, alternative):
        alternative.delete()

    def fuzzy_translate(self, matcher):
        candidates = matcher.matches(self.source)
        if candidates:
            match_unit = candidates[0]
            changed = self.merge(match_unit, authoritative=True)
            if changed:
                return match_unit


    def merge(self, merge_unit, overwrite=False, comments=True,
              authoritative=False):
        """Merges :param:`merge_unit` with the current unit.

        :param merge_unit: The unit that will be merged into the current unit.
        :param overwrite: Whether to replace the existing translation or not.
        :param comments: Whether to merge translator comments or not.
        :param authoritative: Not used. Kept for Toolkit API consistenty.
        :return: True if the current unit has been changed.
        """
        changed = False

        if comments:
            notes = merge_unit.getnotes(origin="translator")

            if notes and self.translator_comment != notes:
                self.translator_comment = notes
                changed = True

        # No translation in merge_unit: bail out
        if not bool(merge_unit.target):
            return changed

        # Won't replace existing translation unless overwrite is True
        if bool(self.target) and not overwrite:
            return changed

        # Current translation more trusted
        if self.istranslated() and not merge_unit.istranslated():
            return changed

        if self.target != merge_unit.target:
            self.target = merge_unit.target

            if self.source != merge_unit.source:
                self.markfuzzy()
            else:
                self.markfuzzy(merge_unit.isfuzzy())

            changed = True
        elif self.isfuzzy() != merge_unit.isfuzzy():
            self.markfuzzy(merge_unit.isfuzzy())
            changed = True

        return changed

    ################# Suggestions #################################
    def get_suggestions(self):
        return self.suggestion_set.select_related('user').all()

    def add_suggestion(self, translation, user=None, touch=True):
        if not filter(None, translation):
            return None

        if translation == self.target:
            return None

        suggestion = Suggestion(unit=self, user=user)
        suggestion.target = translation
        try:
            suggestion.save()
            self.store.flag_for_deletion(CachedMethods.SUGGESTIONS)
            if touch:
                self.save()
        except:
            # probably duplicate suggestion
            return None
        return suggestion

    def accept_suggestion(self, suggestion, translation_project, reviewer):
        if suggestion is not None:
            old_state = self.state
            old_target = self.target
            self.target = suggestion.target

            if suggestion.user_id is not None:
                suggestion_user = suggestion.user
            else:
                suggestion_user = User.objects.get_nobody_user().get_profile()

            self.submitted_by = suggestion_user
            self.submitted_on = timezone.now()

            # It is important to first delete the suggestion before calling
            # ``save``, otherwise the quality checks won't be properly updated
            # when saving the unit.
            suggestion.delete()
            self._log_user = reviewer
            self.store.flag_for_deletion(CachedMethods.SUGGESTIONS)
            self.save()

            # FIXME: we need a totally different model for tracking stats, this
            # is just lame
            from pootle_app.models import Suggestion as SuggestionStat

            suggstat, created = SuggestionStat.objects.get_or_create(
                    translation_project=translation_project,
                    suggester=suggestion_user,
                    state='pending',
                    unit=self.id,
            )
            suggstat.reviewer = reviewer
            suggstat.state = 'accepted'
            suggstat.save()

            create_subs = {}
            # assume the target changed
            create_subs[SubmissionFields.TARGET] = [old_target, self.target]
            # check if the state changed
            if old_state != self.state:
                create_subs[SubmissionFields.STATE] = [old_state, self.state]

            for field in create_subs:
                kwargs = {
                    'creation_time': self.submitted_on,
                    'translation_project': translation_project,
                    'submitter': suggestion_user,
                    'unit': self,
                    'field': field,
                    'type': SubmissionTypes.SUGG_ACCEPT,
                    'old_value': create_subs[field][0],
                    'new_value': create_subs[field][1],
                }
                if field == SubmissionFields.TARGET:
                    kwargs['from_suggestion'] = suggstat

                sub = Submission(**kwargs)
                sub.save()

            if suggestion_user:
                translation_submitted.send(sender=translation_project,
                                           unit=self, profile=suggestion_user)

        return True

    def reject_suggestion(self, suggestion, translation_project, reviewer):
        if suggestion is not None:
            # FIXME: we need a totally different model for tracking stats, this
            # is just lame
            from pootle_app.models import Suggestion as SuggestionStat

            suggstat, created = SuggestionStat.objects.get_or_create(
                    translation_project=translation_project,
                    suggester=suggestion.user,
                    state='pending',
                    unit=self.id,
            )
            suggstat.reviewer = reviewer
            suggstat.state = 'rejected'
            suggstat.save()

        suggestion.delete()
        self.store.flag_for_deletion(CachedMethods.SUGGESTIONS)
        # Update timestamp
        self.save()

        return True

    def toggle_qualitycheck(self, check_id, false_positive, user):
        check = self.qualitycheck_set.get(id=check_id)

        if check.false_positive == false_positive:
            return

        check.false_positive = false_positive
        check.save()

        has_other_critical_failures = QualityCheck.objects.filter(
            unit=self,
            category=Category.CRITICAL,
            false_positive=False,
        ).exclude(id=check_id).exists()

        self.store.flag_for_deletion(CachedMethods.CHECKS,
                                     CachedMethods.LAST_ACTION)
        self._log_user = user
        if false_positive:
            self._save_action = log.MUTE_QUALITYCHECK
            if not has_other_critical_failures:
                self.store.failing_critical_count -= 1
                self.store.translation_project.failing_critical_count -= 1
                self.store.save()
                self.store.translation_project.save()
        else:
            self._save_action = log.UNMUTE_QUALITYCHECK
            if not has_other_critical_failures:
                self.store.failing_critical_count += 1
                self.store.translation_project.failing_critical_count += 1
                self.store.save()
                self.store.translation_project.save()

        # create submission
        self.submitted_on = timezone.now()
        self.submitted_by = user
        self.save()
        if false_positive:
            sub_type = SubmissionTypes.MUTE_CHECK
        else:
            sub_type = SubmissionTypes.UNMUTE_CHECK

        sub = Submission(creation_time=self.submitted_on,
            translation_project=self.store.translation_project,
            submitter=user,
            field=SubmissionFields.NONE,
            unit=self,
            type=sub_type,
            check=check
        )
        sub.save()

    def get_terminology(self):
        """get terminology suggestions"""
        matcher = self.store.translation_project.gettermmatcher()
        if matcher is not None:
            result = matcher.matches(self.source)
        else:
            result = []
        return result

    def get_last_updated_message(self):
        unit = {
            'source': escape(truncatechars(self, 50)),
            'url': self.get_translate_url(),
        }

        action_bundle = {
            'action': _(
                '<i><a href="%(url)s">%(source)s</a></i>&nbsp;'
                'added',
                unit
            ),
            "date": self.creation_time,
            "isoformat_date": self.creation_time.isoformat(),
        }
        return mark_safe(
            '<time class="extra-item-meta js-relative-date"'
            '    title="%(date)s" datetime="%(isoformat_date)s">&nbsp;'
            '</time>&nbsp;'
            u'<span class="action-text">%(action)s</span>'
            % action_bundle)


###################### Store ###########################

# custom storage otherwise django assumes all files are uploads headed to
# media dir
fs = FileSystemStorage(location=settings.PODIRECTORY)

# regexp to parse suggester name from msgidcomment
suggester_regexp = re.compile(r'suggested by (.*) \[[-0-9]+\]')


class Store(models.Model, TreeItem, base.TranslationStore):
    """A model representing a translation store (i.e. a PO or XLIFF file)."""

    file = TranslationStoreField(upload_to="fish", max_length=255, storage=fs,
            db_index=True, null=False, editable=False)

    parent = models.ForeignKey('pootle_app.Directory',
            related_name='child_stores', db_index=True, editable=False)

    translation_project_fk = 'pootle_translationproject.TranslationProject'
    translation_project = models.ForeignKey(translation_project_fk,
            related_name='stores', db_index=True, editable=False)

    pootle_path = models.CharField(max_length=255, null=False, unique=True,
            db_index=True, verbose_name=_("Path"))
    name = models.CharField(max_length=128, null=False, editable=False)

    sync_time = models.DateTimeField(default=datetime_min)
    state = models.IntegerField(null=False, default=NEW, editable=False,
            db_index=True)

    tags = TaggableManager(blank=True, verbose_name=_("Tags"),
                           help_text=_("A comma-separated list of tags."))
    goals = TaggableManager(blank=True, verbose_name=_("Goals"),
                            through=ItemWithGoal,
                            help_text=_("A comma-separated list of goals."))

    # Cached Unit values
    total_wordcount = models.PositiveIntegerField(default=0, null=True)
    translated_wordcount = models.PositiveIntegerField(default=0, null=True)
    fuzzy_wordcount = models.PositiveIntegerField(default=0, null=True)
    suggestion_count = models.PositiveIntegerField(default=0, null=True)
    failing_critical_count = models.PositiveIntegerField(default=0, null=True)

    UnitClass = Unit
    Name = "Model Store"
    is_dir = False

    objects = RelatedManager()

    class Meta:
        ordering = ['pootle_path']
        unique_together = ('parent', 'name')

    ############################ Properties ###################################

    @property
    def code(self):
        return self.name.replace('.', '-')

    @property
    def tag_like_objects(self):
        """Return the tag like objects applied to this store.

        Tag like objects can be either tags or goals.
        """
        return list(chain(self.tags.all().order_by("name"),
                          self.goals.all().order_by("name")))

    @property
    def abs_real_path(self):
        if self.file:
            return self.file.path

    @property
    def real_path(self):
        return self.file.name

    @property
    def is_terminology(self):
        """Is this a project specific terminology store?"""
        #TODO: Consider if this should check if the store belongs to a
        # terminology project. Probably not, in case this might be called over
        # several files in a project.
        return self.name.startswith('pootle-terminology')

    @property
    def units(self):
        if hasattr(self, '_units'):
            return self._units

        self.require_units()
        return self.unit_set.filter(state__gt=OBSOLETE).order_by('index') \
                            .select_related('store__translation_project')

    @units.setter
    def units(self, value):
        """Null setter to avoid tracebacks if :meth:`TranslationStore.__init__`
        is called.
        """
        pass

    ############################ Cached properties ############################

    @cached_property
    def path(self):
        """Returns just the path part omitting language and project codes.

        If the `pootle_path` of a :cls:`Store` object `store` is
        `/af/project/dir1/dir2/file.po`, `store.path` will return
        `dir1/dir2/file.po`.
        """
        return self.pootle_path.split(u'/', 2)[-1]

    ############################ Methods ######################################

    @classmethod
    def _get_mtime_from_header(cls, store):
        mtime = None
        from translate.storage import poheader
        if isinstance(store, poheader.poheader):
            try:
                _mtime = store.parseheader().get('X-POOTLE-MTIME', None)
                if _mtime:
                    mtime = datetime.datetime.fromtimestamp(float(_mtime))
                    if settings.USE_TZ:
                        # Africa/Johanesburg - pre-2.1 default
                        tz = tzinfo.FixedOffset(120)
                        mtime = timezone.make_aware(mtime, tz)
                    else:
                        mtime -= datetime.timedelta(hours=2)
            except Exception as e:
                logging.debug("failed to parse mtime: %s", e)
        return mtime

    def __init__(self, *args, **kwargs):
        super(Store, self).__init__(*args, **kwargs)

    def __unicode__(self):
        return unicode(self.pootle_path)

    def __str__(self):
        storeclass = self.get_file_class()
        store = self.convert(storeclass)
        return str(store)

    def save(self, *args, **kwargs):
        self.pootle_path = self.parent.pootle_path + self.name
        super(Store, self).save(*args, **kwargs)
        if not self.id:
            # new unit
            log.store_log(user="system", action=STORE_ADDED,
                          path=self.pootle_path, store=self.id)

        if hasattr(self, '_units'):
            index = self.max_index() + 1
            for i, unit in enumerate(self._units):
                unit.store = self
                unit.index = index + i
                unit.save()
        if self.state >= PARSED:
            self.update_cache()

    def delete(self, *args, **kwargs):
        log.store_log(user="system", action=log.STORE_DELETED,
                      path=self.pootle_path, store=self.id)
        for unit in self.unit_set.iterator():
            log.action_log(user="system", action=log.UNIT_DELETED,
                lang=self.translation_project.language.code,
                unit=unit.id, Translation="")

        super(Store, self).delete(*args, **kwargs)

    def get_absolute_url(self):
        lang, proj, dir, fn = split_pootle_path(self.pootle_path)
        return reverse('pootle-tp-overview', args=[lang, proj, dir, fn])

    def get_translate_url(self, **kwargs):
        lang, proj, dir, fn = split_pootle_path(self.pootle_path)
        return u''.join([
            reverse('pootle-tp-translate', args=[lang, proj, dir, fn]),
            get_editor_filter(**kwargs),
        ])

    def require_units(self):
        """Make sure file is parsed and units are created."""
        if self.state < PARSED and self.unit_set.count() == 0:
            if (self.file and is_monolingual(type(self.file.store)) and
                not self.translation_project.is_template_project):
                self.translation_project \
                    .update_against_templates(pootle_path=self.pootle_path)
            else:
                self.parse()

    def require_dbid_index(self, update=False, obsolete=False):
        """build a quick mapping index between unit ids and database ids"""
        if update or not hasattr(self, "dbid_index"):
            units = self.unit_set.all()
            if not obsolete:
                units = units.filter(state__gt=OBSOLETE)
            self.dbid_index = dict(units.values_list('unitid', 'id'))

    def findid_bulk(self, ids):
        chunks = 200
        for i in xrange(0, len(ids), chunks):
            units = self.unit_set.filter(id__in=ids[i:i+chunks])
            for unit in units.iterator():
                yield unit

    def get_matcher(self):
        """builds a TM matcher from current translations and obsolete units"""
        from translate.search import match
        #FIXME: should we cache this?
        matcher = match.matcher(
            self,
            max_candidates=1,
            max_length=settings.FUZZY_MATCH_MAX_LENGTH,
            min_similarity=settings.FUZZY_MATCH_MIN_SIMILARITY,
            usefuzzy=True
        )
        matcher.extendtm(self.unit_set.filter(state=OBSOLETE))
        matcher.addpercentage = False
        return matcher

    def clean_stale_lock(self):
        if self.state != LOCKED:
            return

        mtime = max_column(self.unit_set.all(), 'mtime', None)
        if mtime is None:
            #FIXME: we can't tell stale locks if store has no units at all
            return

        delta = timezone.now() - mtime
        if delta.days or delta.seconds > 2 * 60 * 60:
            logging.warning("Found stale lock in %s, something went wrong "
                            "with a previous operation on the store",
                            self.pootle_path)

            # lock been around for too long, assume it is stale
            if QualityCheck.objects.filter(unit__store=self).exists():
                # there are quality checks, assume we are checked
                self.state = CHECKED
            else:
                # there are units assumed we are parsed
                self.state = PARSED

            return True

        return False

    @commit_on_success
    def parse(self, store=None):
        self.clean_stale_lock()

        if self.state == LOCKED:
            # File currently being updated
            # FIXME: shall we idle wait for lock to be released first? what
            # about stale locks?
            logging.info(u"Attemped to update %s while locked",
                         self.pootle_path)
            return

        if store is None:
            store = self.file.store

        if self.state < PARSED:
            logging.debug(u"Parsing %s", self.pootle_path)
            # no existing units in db, file hasn't been parsed before
            # no point in merging, add units directly
            old_state = self.state
            self.state = LOCKED
            self.save()
            try:
                for index, unit in enumerate(store.units):
                    if unit.istranslatable():
                        try:
                            self.addunit(unit, index)
                        except IntegrityError as e:
                            logging.warning(u'Data integrity error while '
                                            u'importing unit %s:\n%s',
                                            unit.getid(), e)
            except:
                # Something broke, delete any units that got created
                # and return store state to its original value
                self.unit_set.all().delete()
                self.state = old_state
                self.save()
                raise

            self.state = PARSED
            self.sync_time = self.get_mtime()
            self.save()
            return

    def _remove_obsolete(self, source):
        """Removes an obsolete unit from the DB. This will usually be used
        after fuzzy matching.
        """
        obsolete_unit = self.findunit(source, obsolete=True)
        if obsolete_unit:
            obsolete_unit.delete()

    @commit_on_success
    def update(self, update_structure=False, update_translation=False,
               store=None, fuzzy=False, only_newer=False, modified_since=0):
        """Update DB with units from file.

        :param update_structure: Whether to update store's structure by marking
            common DB units as obsolete and adding new units.
        :param update_translation: Whether to update existing translations or
            not.
        :param store: The target :class:`~pootle_store.models.Store`. If unset,
            the current file will be used as a target.
        :param fuzzy: Whether to perform fuzzy matching or not.
        :param only_newer: Whether to update only the files that changed on
            disk after the last sync.
        :param modified_since: Don't update translations that have been
            modified since the given change ID.
        """
        self.clean_stale_lock()

        if self.state == LOCKED:
            # File currently being updated
            # FIXME: Shall we idle wait for lock to be released first?
            # What about stale locks?
            logging.info(u"Attempted to update %s while locked",
                         self.pootle_path)
            return
        elif self.state < PARSED:
            # File has not been parsed before
            logging.debug(u"Attempted to update unparsed file %s",
                          self.pootle_path)
            self.parse(store=store)
            return

        if only_newer:
            disk_mtime = datetime.datetime \
                                 .fromtimestamp(self.file.getpomtime()[0])
            if settings.USE_TZ:
                tz = timezone.get_default_timezone()
                disk_mtime = timezone.make_aware(disk_mtime, tz)

            if disk_mtime <= self.sync_time:
                # The file on disk wasn't changed since the last sync
                logging.debug(u"File didn't change since last sync, skipping "
                              u"%s", self.pootle_path)
                return

        if store is None:
            store = self.file.store

        # Lock store
        logging.debug(u"Updating %s", self.pootle_path)
        old_state = self.state
        self.state = LOCKED
        self.save()

        try:
            if fuzzy:
                matcher = self.get_matcher()

            monolingual = is_monolingual(type(store))

            # Force a rebuild of the unit ID <-> DB ID index and get IDs for
            # in-DB (old) and on-disk (new) stores
            self.require_dbid_index(update=True, obsolete=True)
            old_ids = set(self.dbid_index.keys())
            new_ids = set(store.getids())

            if update_structure:
                # Remove old units or make them obsolete if they were already
                # translated
                obsolete_dbids = [self.dbid_index.get(uid)
                                  for uid in old_ids - new_ids]
                for unit in self.findid_bulk(obsolete_dbids):
                    # Use the same (parent) object since units will accumulate
                    # the list of cache attributes to clear in the parent Store
                    # object
                    unit.store = self
                    if unit.istranslated():
                        unit.makeobsolete()
                        unit.save()
                    else:
                        unit.delete()

                # Add new units to the store
                new_units = (store.findid(uid) for uid in new_ids - old_ids)
                for unit in new_units:
                    newunit = self.addunit(unit, unit.index)

                    # Fuzzy match non-empty target strings
                    if fuzzy and not filter(None, newunit.target.strings):
                        match_unit = newunit.fuzzy_translate(matcher)
                        if match_unit:
                            newunit.save()
                            self._remove_obsolete(match_unit.source)

            if update_translation or modified_since:
                modified_units = set()

                if modified_since:
                    self_unit_ids = set(self.dbid_index.values())

                    try:
                        modified_units = set(Submission.objects.filter(
                                id__gt=modified_since,
                                unit__id__in=self_unit_ids,
                        ).values_list('unit', flat=True).distinct())
                    except DatabaseError as e:
                        # SQLite might barf with the IN operator over too many
                        # values
                        modified_units = set(Submission.objects.filter(
                                id__gt=modified_since,
                        ).values_list('unit', flat=True).distinct())
                        modified_units &= self_unit_ids

                common_dbids = set(self.dbid_index.get(uid) \
                                   for uid in old_ids & new_ids)

                # If some units have been modified since a given change ID,
                # keep them safe and avoid overwrites
                if modified_units:
                    common_dbids -= modified_units

                common_dbids = list(common_dbids)
                system = User.objects.get_system_user().get_profile()
                for unit in self.findid_bulk(common_dbids):
                    # Use the same (parent) object since units will accumulate
                    # the list of cache attributes to clear in the parent Store
                    # object
                    unit.store = self
                    newunit = store.findid(unit.getid())
                    old_target_f = unit.target_f
                    old_unit_state = unit.state

                    if (monolingual and not
                        self.translation_project.is_template_project):
                        fix_monolingual(unit, newunit, monolingual)

                    changed = unit.update(newunit)

                    # Unit's index within the store might have changed
                    if update_structure and unit.index != newunit.index:
                        unit.index = newunit.index
                        changed = True

                    # Fuzzy match non-empty target strings
                    if fuzzy and not filter(None, unit.target.strings):
                        match_unit = unit.fuzzy_translate(matcher)
                        if match_unit:
                            changed = True
                            self._remove_obsolete(match_unit.source)

                    if changed:
                        create_subs = {}

                        if unit._target_updated:
                            create_subs[SubmissionFields.TARGET] = \
                                [old_target_f, unit.target_f]

                        # Set unit fields if submission should be created
                        if create_subs:
                            unit.submitted_by = system
                            unit.submitted_on = timezone.now()
                        unit.save()
                        # check unit state after saving
                        if old_unit_state != unit.state:
                            create_subs[SubmissionFields.STATE] = [old_unit_state,
                                                                   unit.state]

                        # Create Submission after unit saved
                        for field in create_subs:
                            sub = Submission(
                                creation_time=unit.submitted_on,
                                translation_project=self.translation_project,
                                submitter=system,
                                unit=unit,
                                field=field,
                                type=SubmissionTypes.SYSTEM,
                                old_value=create_subs[field][0],
                                new_value=create_subs[field][1]
                            )
                            sub.save()
        finally:
            # Unlock store
            self.state = old_state
            if (update_structure and
                (update_translation or modified_since)):
                self.sync_time = timezone.now()
            self.save()

    #TODO process cache for _get_checks
    def require_qualitychecks(self):
        """make sure quality checks are run"""
        if self.state < CHECKED:
            self.update_qualitychecks()

    @commit_on_success
    def update_qualitychecks(self):
        logging.debug(u"Updating quality checks for %s", self.pootle_path)
        for unit in self.units.iterator():
            unit.update_qualitychecks()

        if self.state < CHECKED:
            self.state = CHECKED
            self.save()

    def sync(self, update_structure=False, update_translation=False,
             conservative=True, create=False, profile=None, skip_missing=False,
             modified_since=0):
        """Sync file with translations from DB."""
        if skip_missing and not self.file.exists():
            return

        if (not modified_since and conservative and
            self.sync_time >= self.get_mtime()):
            return

        if not self.file:
            if create:
                # File doesn't exist let's create it
                logging.debug(u"Creating file %s", self.pootle_path)

                storeclass = self.get_file_class()
                store_path = os.path.join(
                    self.translation_project.abs_real_path, self.name
                )
                store = self.convert(storeclass)
                store.savefile(store_path)

                self.file = store_path
                self.update_store_header(profile=profile)
                self.file.savestore()
                self.sync_time = self.get_mtime()

                self.save()
            return

        if conservative and self.translation_project.is_template_project:
            # don't save to templates
            return

        logging.debug(u"Syncing %s", self.pootle_path)
        self.require_dbid_index(update=True)
        disk_store = self.file.store
        old_ids = set(disk_store.getids())
        new_ids = set(self.dbid_index.keys())

        file_changed = False

        if update_structure:
            obsolete_units = (disk_store.findid(uid) \
                              for uid in old_ids - new_ids)
            for unit in obsolete_units:
                if not unit.istranslated():
                    del unit
                elif not conservative:
                    unit.makeobsolete()

                    if not unit.isobsolete():
                        del unit

                file_changed = True

            new_dbids = [self.dbid_index.get(uid) for uid in new_ids - old_ids]
            for unit in self.findid_bulk(new_dbids):
                newunit = unit.convert(disk_store.UnitClass)
                disk_store.addunit(newunit)
                file_changed = True

        monolingual = is_monolingual(type(disk_store))

        if update_translation:
            modified_units = set()

            if modified_since:
                self_unit_ids = set(self.dbid_index.values())

                try:
                    modified_units = set(Submission.objects.filter(
                            id__gt=modified_since,
                            unit__id__in=self_unit_ids,
                    ).values_list('unit', flat=True).distinct())
                except DatabaseError as e:
                    # SQLite might barf with the IN operator over too many
                    # values
                    modified_units = set(Submission.objects.filter(
                            id__gt=modified_since,
                    ).values_list('unit', flat=True).distinct())
                    modified_units &= self_unit_ids

            common_dbids = set(self.dbid_index.get(uid) \
                               for uid in old_ids & new_ids)

            if modified_units:
                common_dbids &= modified_units

            common_dbids = list(common_dbids)
            for unit in self.findid_bulk(common_dbids):
                # FIXME: use a better mechanism for handling states and
                # different formats
                if monolingual and not unit.istranslated():
                    continue

                match = disk_store.findid(unit.getid())
                if match is not None:
                    changed = unit.sync(match)
                    if changed:
                        file_changed = True

        if file_changed:
            self.update_store_header(profile=profile)
            self.file.savestore()

        self.sync_time = timezone.now()
        self.save()

    def get_file_class(self):
        try:
            return self.translation_project.project.get_file_class()
        except ObjectDoesNotExist:
            if self.name:
                name, ext = os.path.splitext(self.name)
                return factory_classes[ext]
        return factory_classes['po']

    def convert(self, fileclass):
        """export to fileclass"""
        logging.debug(u"Converting %s to %s", self.pootle_path, fileclass)
        output = fileclass()
        try:
            output.settargetlanguage(self.translation_project.language.code)
        except ObjectDoesNotExist:
            pass
        #FIXME: we should add some headers
        for unit in self.units.iterator():
            output.addunit(unit.convert(output.UnitClass))
        return output

    #################### TranslationStore #########################

    suggestions_in_format = True

    def max_index(self):
        """Largest unit index"""
        return max_column(self.unit_set.all(), 'index', -1)

    def addunit(self, unit, index=None):
        if index is None:
            index = self.max_index() + 1

        newunit = self.UnitClass(store=self, index=index)
        newunit.update(unit)

        if self.id:
            newunit.save()
        else:
            # We can't save the unit if the store is not in the
            # database already, so let's keep it in temporary list
            if not hasattr(self, '_units'):
                class FakeQuerySet(list):
                    def iterator(self):
                        return self.__iter__()

                self._units = FakeQuerySet()

            self._units.append(newunit)

        return newunit

    def findunits(self, source, obsolete=False):
        if not obsolete and hasattr(self, "sourceindex"):
            return super(Store, self).findunits(source)

        # find using hash instead of index
        source_hash = md5(source.encode("utf-8")).hexdigest()
        units = self.unit_set.filter(source_hash=source_hash)
        if obsolete:
            units = units.filter(state=OBSOLETE)
        else:
            units = units.filter(state__gt=OBSOLETE)
        if units.count():
            return units

    def findunit(self, source, obsolete=False):
        units = self.findunits(source, obsolete)
        if units:
            return units[0]

    def findid(self, id):
        if hasattr(self, "id_index"):
            return self.id_index.get(id, None)

        unitid_hash = md5(id.encode("utf-8")).hexdigest()
        try:
            return self.units.get(unitid_hash=unitid_hash)
        except Unit.DoesNotExist:
            return None

    def getids(self, filename=None):
        if hasattr(self, "_units"):
            self.makeindex()
        if hasattr(self, "id_index"):
            return self.id_index.keys()
        elif hasattr(self, "dbid_index"):
            return self.dbid_index.values()
        else:
            return self.units.values_list('unitid', flat=True)

    def header(self):
        #FIXME: we should store some metadata in db
        if self.file and hasattr(self.file.store, 'header'):
            return self.file.store.header()

    ### TreeItem

    def get_parents(self):
        if self.parent.is_translationproject():
            return [self.translation_project]
        else:
            return [self.parent]

    def get_cachekey(self):
        return self.pootle_path

    def get_total_wordcount(self):
        return self.total_wordcount

    def get_translated_wordcount(self):
        return self.translated_wordcount

    def get_fuzzy_wordcount(self):
        return self.fuzzy_wordcount

    def get_suggestion_count(self):
        return self.suggestion_count

    def get_critical_error_unit_count(self):
        return self.failing_critical_count

    def _get_checks(self):
        try:
            self.require_qualitychecks()
            queryset = QualityCheck.objects.filter(unit__store=self,
                                                   unit__state__gt=UNTRANSLATED,
                                                   false_positive=False)

            queryset = queryset.values('unit', 'name').order_by('unit')

            saved_unit = None
            result = {
                'unit_count': 0,
                'checks': {},
            }
            for item in queryset:
                if item['unit'] != saved_unit or saved_unit is None:
                    saved_unit = item['unit']
                    # assumed all checks are critical and should be counted
                    result['unit_count'] += 1
                if item['name'] in result['checks']:
                    result['checks'][item['name']] += 1
                else:
                    result['checks'][item['name']] = 1

            return result
        except Exception as e:
            logging.info(u"Error getting quality checks for %s\n%s",
                         self.name, e)
            return {}

    def _get_mtime(self):
        return max_column(self.unit_set.all(), 'mtime', datetime_min)

    def _get_last_updated(self):
        try:
            max_unit = self.unit_set.all().order_by('-creation_time')[0]
        except IndexError as e:
            max_unit = None

        # creation_time field has been added recently, so it can have NULL value
        if max_unit is not None:
            max_time = max_unit.creation_time
            if max_time:
                return {
                    'id': max_unit.id,
                    'creation_time': int(dateformat.format(max_time, 'U')),
                    'snippet': max_unit.get_last_updated_message()
                }

        return {'id': 0, 'creation_time': 0, 'snippet': ''}

    def _get_last_action(self):
        units = Unit.objects.filter(store=self).order_by('-submitted_on')[:1]

        try:
            sub = Submission.simple_objects.filter(unit=units[0]) \
                                           .order_by('-creation_time')[0]
        except IndexError:
            return {
                'id': 0,
                'mtime': 0,
                'snippet': '',
            }

        return {
            'id': sub.unit.id,
            'mtime': int(dateformat.format(sub.creation_time, 'U')),
            'snippet': sub.get_submission_message()
        }

    ### /TreeItem

    ############################ Translation #############################

    def getitem(self, item):
        """Returns a single unit based on the item number."""
        return self.units[item]

    @commit_on_success
    def mergefile(self, newfile, profile, allownewstrings, suggestions,
                  notranslate, obsoletemissing):
        """Merges :param:`newfile` with the current store.

        :param newfile: The file that will be merged into the current store.
        :param profile: A :cls:`~pootle_profile.models.PootleProfile` user
            profile.
        :param allownewstrings: Whether to add or not units from
            :param:`newfile` not present in the current store.
        :param suggestions: Try to add conflicting units as suggestions in case
            the new file's modified time is unknown or older that the in-DB
            unit).
        :param notranslate: Don't translate/merge in-DB units but rather add
            them as suggestions.
        :param obsoletemissing: Whether to remove or not units present in the
            current store but not in :param:`newfile`.
        """
        if not newfile.units:
            return

        monolingual = is_monolingual(type(newfile))
        self.clean_stale_lock()

        # Must be done before locking the file in case it wasn't already parsed
        self.require_units()

        if self.state == LOCKED:
            # File currently being updated
            # FIXME: shall we idle wait for lock to be released first? what
            # about stale locks?
            logging.info(u"Attemped to merge %s while locked", self.pootle_path)
            return

        logging.debug(u"Merging %s", self.pootle_path)

        # Lock store
        old_state = self.state
        self.state = LOCKED
        self.save()

        if suggestions:
            mtime = self._get_mtime_from_header(newfile)
        else:
            mtime = None

        try:
            self.require_dbid_index(update=True, obsolete=True)
            old_ids = set(self.dbid_index.keys())
            if issubclass(self.translation_project.project.get_file_class(),
                          newfile.__class__):
                new_ids = set(newfile.getids())
            else:
                new_ids = set(newfile.getids(self.name))

            if ((not monolingual or
                 self.translation_project.is_template_project) and
                allownewstrings):
                new_units = (newfile.findid(uid) for uid in new_ids - old_ids)
                for unit in new_units:
                    self.addunit(unit)

            if obsoletemissing:
                obsolete_dbids = [self.dbid_index.get(uid)
                                  for uid in old_ids - new_ids]
                for unit in self.findid_bulk(obsolete_dbids):
                    if unit.istranslated():
                        unit.makeobsolete()
                        unit.save()
                    else:
                        unit.delete()

            common_dbids = [self.dbid_index.get(uid)
                            for uid in old_ids & new_ids]
            for oldunit in self.findid_bulk(common_dbids):
                newunit = newfile.findid(oldunit.getid())

                if (monolingual and
                    not self.translation_project.is_template_project):
                    fix_monolingual(oldunit, newunit, monolingual)

                if newunit.istranslated():
                    if (notranslate or suggestions and
                        oldunit.istranslated() and
                        (not mtime or mtime < oldunit.mtime)):
                        oldunit.add_suggestion(newunit.target, profile)
                    else:
                        changed = oldunit.merge(newunit, overwrite=True)
                        if changed:
                            oldunit.save()

            if allownewstrings or obsoletemissing:
                self.sync(update_structure=True, update_translation=True,
                          conservative=False, create=False, profile=profile)

        finally:
            # Unlock store
            self.state = old_state
            self.save()

    def update_store_header(self, profile=None):
        language = self.translation_project.language
        source_language = self.translation_project.project.source_language
        disk_store = self.file.store
        disk_store.settargetlanguage(language.code)
        disk_store.setsourcelanguage(source_language.code)

        from translate.storage import poheader
        if isinstance(disk_store, poheader.poheader):
            mtime = self.get_mtime()
            if mtime is None:
                mtime = timezone.now()
            if profile is None:
                try:
                    submission = self.translation_project.submission_set \
                                     .filter(creation_time=mtime).latest()
                    submitter = submission.submitter

                    if submitter is not None:
                        if submitter.user.username != 'nobody':
                            profile = submitter
                except ObjectDoesNotExist:
                    try:
                        submission = self.translation_project.submission_set \
                                                             .latest()
                        mtime = min(submission.creation_time, mtime)
                        submitter = submission.submitter

                        if submitter is not None:
                            if submitter.user.username != 'nobody':
                                profile = submitter
                    except ObjectDoesNotExist:
                        pass

            po_revision_date = mtime.strftime('%Y-%m-%d %H:%M') + \
                               poheader.tzstring()
            from pootle.__version__ import sver as pootle_version
            x_generator = "Pootle %s" % pootle_version
            headerupdates = {
                    'PO_Revision_Date': po_revision_date,
                    'X_Generator': x_generator,
                    'X_POOTLE_MTIME': ('%s.%06d' %
                                       (int(dateformat.format(mtime, 'U')),
                                        mtime.microsecond)),
                    }
            if profile is not None and profile.user.is_authenticated():
                headerupdates['Last_Translator'] = '%s <%s>' % \
                        (profile.user.first_name or profile.user.username,
                         profile.user.email)
            else:
                #FIXME: maybe insert settings.TITLE or domain here?
                headerupdates['Last_Translator'] = 'Anonymous Pootle User'
            disk_store.updateheader(add=True, **headerupdates)

            if language.nplurals and language.pluralequation:
                disk_store.updateheaderplural(language.nplurals,
                                              language.pluralequation)

########NEW FILE########
__FILENAME__ = placeables
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import re

from translate.storage.placeables import general
from translate.storage.placeables.base import Ph

from django.utils.translation import ugettext_lazy as _


PLACEABLE_DESCRIPTIONS = {
    # Pootle placeables.
    'PootleTabEscapePlaceable': _("Escaped tab"),
    'PootleEscapePlaceable': _("Escaped sequence"),
    'PootleSpacesPlaceable': _("Unusual space in string"),

    # Translate Toolkit placeables.
    'AltAttrPlaceable': _("'alt' attribute inside XML tag"),
    'NewlinePlaceable': _("New-line"),
    'NumberPlaceable': _("Number"),
    'QtFormattingPlaceable': _("Qt string formatting variable"),
    'PythonFormattingPlaceable': _("Python string formatting variable"),
    'JavaMessageFormatPlaceable': _("Java Message formatting variable"),
    'FormattingPlaceable': _("String formatting variable"),
    'UrlPlaceable': _("URI"),
    'FilePlaceable': _("File location"),
    'EmailPlaceable': _("Email"),
    'PunctuationPlaceable': _("Punctuation"),
    'XMLEntityPlaceable': _("XML entity"),
    'CapsPlaceable': _("Long all-caps string"),
    'CamelCasePlaceable': _("Camel case string"),
#    'SpacesPlaceable': _("Unusual space in string"),  # Not used.
    'XMLTagPlaceable': _("XML tag"),
    'OptionPlaceable': _("Command line option"),
}


class PootleTabEscapePlaceable(Ph):
    """Placeable handling tab escapes."""
    istranslatable = False
    regex = re.compile(r'\t')
    parse = classmethod(general.regex_parse)


class PootleEscapePlaceable(Ph):
    """Placeable handling escapes."""
    istranslatable = False
    regex = re.compile(r'\\')
    parse = classmethod(general.regex_parse)


class PootleSpacesPlaceable(Ph):
    """Placeable handling spaces."""
    istranslatable = False
    regex = re.compile('^ +| +$|[\r\n\t] +| {2,}')
    parse = classmethod(general.regex_parse)


PLACEABLE_PARSERS = [
    PootleTabEscapePlaceable.parse,
    PootleEscapePlaceable.parse,
    general.NewlinePlaceable.parse,
    # The spaces placeable can match '\n  ' and mask the newline, so must come
    # later.
    PootleSpacesPlaceable.parse,
    general.XMLTagPlaceable.parse,
    general.AltAttrPlaceable.parse,
    general.XMLEntityPlaceable.parse,
    general.PythonFormattingPlaceable.parse,
    general.JavaMessageFormatPlaceable.parse,
    general.FormattingPlaceable.parse,
    # The Qt variables can consume the %1 in %1$s which will mask a printf
    # placeable, so it has to come later.
    general.QtFormattingPlaceable.parse,
    general.UrlPlaceable.parse,
    general.FilePlaceable.parse,
    general.EmailPlaceable.parse,
    general.CapsPlaceable.parse,
    general.CamelCasePlaceable.parse,
    general.OptionPlaceable.parse,
    general.PunctuationPlaceable.parse,
    general.NumberPlaceable.parse,
]

########NEW FILE########
__FILENAME__ = signals
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.dispatch import Signal


post_unit_update = Signal(providing_args=["oldstats", "newstats"])
translation_file_updated = Signal(providing_args=["path"])
translation_submitted = Signal(providing_args=["unit", "profile"])

########NEW FILE########
__FILENAME__ = store_tags
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import re

from diff_match_patch import diff_match_patch
from translate.misc.multistring import multistring
from translate.storage.placeables import parse as parse_placeables
from translate.storage.placeables.interfaces import BasePlaceable

from django import template
from django.core.exceptions import ObjectDoesNotExist
from django.template.defaultfilters import stringfilter
from django.template.loaders.filesystem import Loader
from django.utils.html import escape
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext as _

from pootle_store.fields import list_empty
from pootle_store.placeables import PLACEABLE_PARSERS, PLACEABLE_DESCRIPTIONS


register = template.Library()


@register.filter
@stringfilter
def highlight_placeables(text):
    """Wrap placeables to easily distinguish and manipulate them."""
    output = u""

    # Get a flat list of placeables and StringElem instances.
    flat_items = parse_placeables(text, PLACEABLE_PARSERS).flatten()

    for item in flat_items:
        if isinstance(item, BasePlaceable):
            # It is a placeable, so highlight it.

            class_name = item.__class__.__name__
            placeable = unicode(item)  # String representation for placeable.

            # CSS class used to highlight the placeable.
            css_class = {
                'PootleEscapePlaceable': "highlight-escape",
                'PootleSpacesPlaceable': "translation-space",
                'PootleTabEscapePlaceable': "highlight-escape",
                'NewlinePlaceable': "highlight-escape",
            }.get(class_name, "placeable")

            # Some placeables require changing the representation in order to
            # correctly display them on the translation editor.

            def replace_whitespace(string):
                fancy_space = '&nbsp;'
                if string.startswith(' '):
                    return fancy_space * len(string)
                return string[0] + fancy_space * (len(string) - 1)

            content = {
                'PootleEscapePlaceable': u'\\\\',
                'PootleTabEscapePlaceable': u'\\t',
                'PootleSpacesPlaceable': replace_whitespace(placeable),
                'NewlinePlaceable': {
                        u'\r\n': u'\\r\\n<br/>\n',
                        u'\r': u'\\r<br/>\n',
                        u'\n': u'\\n<br/>\n',
                    }.get(placeable),
                'XMLEntityPlaceable': placeable.replace('&', '&amp;'),
                'XMLTagPlaceable': placeable.replace('<', '&lt;') \
                                            .replace('>', '&gt;'),
            }.get(class_name, placeable)

            # Provide a description for the placeable using a tooltip.
            description = PLACEABLE_DESCRIPTIONS.get(class_name,
                                                     _("Unknown placeable"))

            output += (u'<span class="%s js-editor-copytext js-placeable" '
                       u'title="%s">%s</span>') % (css_class, description,
                                                   content)
        else:
            # It is not a placeable, so just concatenate to output string.
            output += escape(item)

    return mark_safe(output)


IMAGE_URL_RE = re.compile("(https?://[^\s]+\.(png|jpe?g|gif))")
@register.filter
def image_urls(text):
    """Return a list of image URLs extracted from `text`."""
    return map(lambda x: x[0], IMAGE_URL_RE.findall(text))


ESCAPE_RE = re.compile('<[^<]*?>|\\\\|\r\n|[\r\n\t&<>]')
def fancy_escape(text):
    """Replace special chars with entities, and highlight XML tags and
    whitespaces.
    """
    def replace(match):
        escape_highlight = ('<span class="highlight-escape '
                            'js-editor-copytext">%s</span>')
        submap = {
            '\r\n': (escape_highlight % '\\r\\n') + '<br/>\n',
            '\r': (escape_highlight % '\\r') + '<br/>\n',
            '\n': (escape_highlight % '\\n') + '<br/>\n',
            '\t': (escape_highlight % '\\t'),
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '\\': (escape_highlight % '\\\\'),
        }
        try:
            return submap[match.group()]
        except KeyError:
            html_highlight = ('<span class="highlight-html '
                              'js-editor-copytext">&lt;%s&gt;</span>')
            return html_highlight % fancy_escape(match.group()[1:-1])

    return ESCAPE_RE.sub(replace, text)


def call_highlight(old, new):
    """Call diff highlighting code only if the target is set.

    Otherwise, highlight as a normal unit.
    """
    if isinstance(old, multistring):
        old_value = old.strings
    else:
        old_value = old
    if list_empty(old_value):
        return highlight_placeables(new)
    else:
        return highlight_diffs(old, new)


differencer = diff_match_patch()
def highlight_diffs(old, new):
    """Highlight the differences between old and new."""

    textdiff = u""  # To store the final result.
    removed = u""  # The removed text that we might still want to add.
    diff = differencer.diff_main(old, new)
    differencer.diff_cleanupSemantic(diff)
    for op, text in diff:
        if op == 0:  # Equality.
            if removed:
                textdiff += ('<span class="diff-delete">%s</span>' %
                             fancy_escape(removed))
                removed = u""
            textdiff += fancy_escape(text)
        elif op == 1:  # Insertion.
            if removed:
                # This is part of a substitution, not a plain insertion. We
                # will format this differently.
                textdiff += ('<span class="diff-replace">%s</span>' %
                             fancy_escape(text))
                removed = u""
            else:
                textdiff += ('<span class="diff-insert">%s</span>' %
                             fancy_escape(text))
        elif op == -1:  # Deletion.
            removed = text
    if removed:
        textdiff += ('<span class="diff-delete">%s</span>' %
                     fancy_escape(removed))
    return mark_safe(textdiff)


@register.filter('pluralize_source')
def pluralize_source(unit):
    if unit.hasplural():
        count = len(unit.source.strings)
        if count == 1:
            return [(0, unit.source.strings[0], "%s+%s" % (_('Singular'),
                                                           _('Plural')))]
        elif count == 2:
            return [(0, unit.source.strings[0], _('Singular')),
                    (1, unit.source.strings[1], _('Plural'))]
        else:
            forms = []
            for i, source in enumerate(unit.source.strings):
                forms.append((i, source, _('Plural Form %d', i)))
            return forms
    else:
        return [(0, unit.source, None)]


@register.filter('pluralize_target')
def pluralize_target(unit, nplurals=None):
    if unit.hasplural():
        if nplurals is None:
            try:
                nplurals = unit.store.translation_project.language.nplurals
            except ObjectDoesNotExist:
                pass
        forms = []
        if nplurals is None:
            for i, target in enumerate(unit.target.strings):
                forms.append((i, target, _('Plural Form %d', i)))
        else:
            for i in range(nplurals):
                try:
                    target = unit.target.strings[i]
                except IndexError:
                    target = ''
                forms.append((i, target, _('Plural Form %d', i)))
        return forms
    else:
        return [(0, unit.target, None)]


@register.filter('pluralize_diff_sugg')
def pluralize_diff_sugg(sugg):
    unit = sugg.unit
    if unit.hasplural():
        forms = []
        for i, target in enumerate(sugg.target.strings):
            if i < len(unit.target.strings):
                forms.append((i, target, call_highlight(unit.target.strings[i],
                                                        target),
                              _('Plural Form %d', i)))
            else:
                forms.append((i, target, call_highlight('', target),
                              _('Plural Form %d', i)))
        return forms
    else:
        return [(0, sugg.target, call_highlight(unit.target, sugg.target),
                 None)]


@register.tag(name="include_raw")
def do_include_raw(parser, token):
    """Perform a raw template include.

    This means to include the template without parsing context, just dump the
    template in.

    Source: http://djangosnippets.org/snippets/1684/
    """
    bits = token.split_contents()
    if len(bits) != 2:
        excp_msg = ("%r tag takes one argument: the name of the template to "
                    "be included" % bits[0])
        raise template.TemplateSyntaxError(excp_msg)

    template_name = bits[1]
    if (template_name[0] in ('"', "'") and
        template_name[-1] == template_name[0]):
        template_name = template_name[1:-1]

    template_loader = Loader()
    source, path = template_loader.load_template_source(template_name)

    return template.TextNode(source)

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url


urlpatterns = patterns('pootle_store.views',
    # Download and export
    url(r'^download/(?P<pootle_path>.*)/?$',
        'download',
        name='pootle-store-download'),
    url(r'^export-file/xlf/(?P<pootle_path>.*)/?$',
        'export_as_xliff',
        name='pootle-store-export-xliff'),
    url(r'^export-file/(?P<filetype>.*)/(?P<pootle_path>.*)/?$',
        'export_as_type'),

    # XHR
    url(r'^xhr/stats/checks/?$',
        'get_qualitycheck_stats',
        name='pootle-xhr-stats-checks'),
    url(r'^xhr/stats/overview/?$',
        'get_overview_stats',
        name='pootle-xhr-stats-overview'),

    url(r'^xhr/units/?$',
        'get_units',
        name='pootle-xhr-units'),

    url(r'^xhr/units/(?P<uid>[0-9]+)/?$',
        'submit',
        name='pootle-xhr-units-submit'),
    url(r'^xhr/units/(?P<uid>[0-9]+)/comment/?$',
        'comment',
        name='pootle-xhr-units-comment'),
    url(r'^xhr/units/(?P<uid>[0-9]+)/context/?$',
        'get_more_context',
        name='pootle-xhr-units-context'),
    url(r'^xhr/units/(?P<uid>[0-9]+)/edit/?$',
        'get_edit_unit',
        name='pootle-xhr-units-edit'),
    url(r'^xhr/units/(?P<uid>[0-9]+)/timeline/?$',
        'timeline',
        name='pootle-xhr-units-timeline'),

    url(r'^xhr/units/(?P<uid>[0-9]+)/suggestions/?$',
        'suggest',
        name='pootle-xhr-units-suggest'),
    url(r'^xhr/units/(?P<uid>[0-9]+)/suggestions/(?P<suggid>[0-9]+)/accept/?$',
        'accept_suggestion',
        name='pootle-xhr-units-suggestion-accept'),
    url(r'^xhr/units/(?P<uid>[0-9]+)/suggestions/(?P<suggid>[0-9]+)/reject/?$',
        'reject_suggestion',
        name='pootle-xhr-units-suggestion-reject'),
    url(r'^xhr/units/(?P<uid>[0-9]+)/suggestions/(?P<suggid>[0-9]+)/votes/?$',
        'vote_up',
        name='pootle-xhr-units-suggestions-votes-up'),
    # FIXME: unify voting URLs
    url(r'^xhr/votes/(?P<voteid>[0-9]+)/clear/?$',
        'clear_vote',
        name='pootle-xhr-votes-clear'),

    url(r'^xhr/units/(?P<uid>[0-9]+)/checks/(?P<check_id>[0-9]+)/toggle/?$',
        'toggle_qualitycheck',
        name='pootle-xhr-units-checks-toggle'),

    url(r'^xhr/units/(?P<uid>[0-9]+)/tm/?$',
        'get_tm_results',
        name='pootle-xhr-units-tm'),

    # XHR for tags.
    url(r'^ajax/tags/add/store/(?P<store_pk>[0-9]+)?$',
        'ajax_add_tag_to_store',
        name='pootle-xhr-tag-store'),

    url(r'^ajax/tags/remove/(?P<tag_slug>[a-z0-9-]+)/store/'
        r'(?P<store_pk>[0-9]+)?$',
        'ajax_remove_tag_from_store',
        name='pootle-xhr-untag-store'),
)

########NEW FILE########
__FILENAME__ = util
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2004-2013 Zuza Software Foundation
#
# This file is part of translate.
#
# translate is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with translate; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import os

from django.conf import settings
from django.utils.translation import ugettext_lazy as _


# Unit States
#: Unit is no longer part of the store
OBSOLETE = -100
#: Empty unit
UNTRANSLATED = 0
#: Marked as fuzzy, typically means translation needs more work
FUZZY = 50
#: Unit is fully translated
TRANSLATED = 200


# Map for retrieving natural names for unit states
STATES_MAP = {
    OBSOLETE: _("Obsolete"),
    UNTRANSLATED: _("Untranslated"),
    FUZZY: _("Needs work"),
    TRANSLATED: _("Translated"),
}


def add_trailing_slash(path):
    """If path does not end with /, add it and return."""

    if len(path) > 0 and path[-1] == os.sep:
        return path
    else:
        return path + os.sep


def relative_real_path(p):
    if p.startswith(settings.PODIRECTORY):
        return p[len(add_trailing_slash(settings.PODIRECTORY)):]
    else:
        return p


def absolute_real_path(p):
    if not p.startswith(settings.PODIRECTORY):
        return os.path.join(settings.PODIRECTORY, p)
    else:
        return p


def suggestions_sum(queryset):
    total = 0
    for item in queryset:
        total += item.get_suggestion_count()

    return total


def find_altsrcs(unit, alt_src_langs, store=None, project=None):
    from pootle_store.models import Unit

    store = store or unit.store
    project = project or store.translation_project.project

    altsrcs = Unit.objects.filter(
                    unitid_hash=unit.unitid_hash,
                    store__translation_project__project=project,
                    store__translation_project__language__in=alt_src_langs,
                    state=TRANSLATED) \
                          .select_related(
                                'store', 'store__translation_project',
                                'store__translation_project__language')

    if project.get_treestyle() == 'nongnu':
        altsrcs = filter(lambda x: x.store.path == store.path, altsrcs)

    return altsrcs


def get_sugg_list(unit):
    """Get suggested translations and rated scores for the given unit.

    :return: List of tuples containing the suggestion and the score for
             it in case it's a terminology project. Otherwise the score
             part is filled with False values.
    """
    sugg_list = []
    scores = {}
    suggestions = unit.get_suggestions()

    # Avoid the votes query if we're not editing terminology
    if (suggestions and (unit.store.is_terminology or
        unit.store.translation_project.project.is_terminology)):
        from voting.models import Vote
        scores = Vote.objects.get_scores_in_bulk(suggestions)

    for sugg in suggestions:
        score = scores.get(sugg.id, False)
        sugg_list.append((sugg, score))

    return sugg_list

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2010-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging
import os
from itertools import groupby

from translate.filters.decorators import Category
from translate.lang import data
from translate.search.lshtein import LevenshteinComparer

from django.conf import settings
from django.contrib.auth.models import User
from django.core.cache import cache
from django.core.exceptions import PermissionDenied, ObjectDoesNotExist
from django.core.urlresolvers import reverse
from django.db.models import Q
from django.http import HttpResponse, Http404
from django.shortcuts import get_object_or_404, redirect, render
from django.template import loader, RequestContext
from django.utils.translation import to_locale, ugettext as _
from django.utils.translation.trans_real import parse_accept_lang_header
from django.utils import timezone
from django.utils.encoding import iri_to_uri
from django.views.decorators.cache import never_cache
from django.views.decorators.http import require_POST

from taggit.models import Tag

from pootle.core.decorators import (get_path_obj, get_resource,
                                    permission_required)
from pootle.core.exceptions import Http400
from pootle.core.url_helpers import split_pootle_path
from pootle_app.models import Suggestion as SuggestionStat
from pootle_app.models.permissions import (check_permission,
                                           check_profile_permission)
from pootle_language.models import Language
from pootle_misc.checks import check_names
from pootle_misc.forms import make_search_form
from pootle_misc.util import ajax_required, jsonify, to_int
from pootle_profile.models import get_profile
from pootle_project.models import Project
from pootle_statistics.models import (Submission, SubmissionFields,
                                      SubmissionTypes)
from pootle_tagging.forms import TagForm
from pootle_tagging.models import Goal
from pootle_translationproject.models import TranslationProject

from .decorators import get_store_context, get_unit_context
from .fields import to_python
from .forms import (unit_comment_form_factory, unit_form_factory,
                    highlight_whitespace)
from .models import Store, TMUnit, Unit
from .signals import translation_submitted
from .templatetags.store_tags import (highlight_diffs, pluralize_source,
                                      pluralize_target)
from .util import (UNTRANSLATED, FUZZY, TRANSLATED, STATES_MAP,
                   absolute_real_path, find_altsrcs, get_sugg_list)


@get_store_context('view')
def export_as_xliff(request, store):
    """Export given file to xliff for offline translation."""
    path = store.real_path
    if not path:
        # bug 2106
        project = request.translation_project.project
        if project.get_treestyle() == "gnu":
            path = "/".join(store.pootle_path.split(os.path.sep)[2:])
        else:
            parts = store.pootle_path.split(os.path.sep)[1:]
            path = "%s/%s/%s" % (parts[1], parts[0], "/".join(parts[2:]))

    path, ext = os.path.splitext(path)
    export_path = "/".join(['POOTLE_EXPORT', path + os.path.extsep + 'xlf'])
    abs_export_path = absolute_real_path(export_path)

    key = iri_to_uri("%s:export_as_xliff" % store.pootle_path)
    last_export = cache.get(key)
    if (not (last_export and last_export == store.get_mtime() and
        os.path.isfile(abs_export_path))):
        from pootle_app.project_tree import ensure_target_dir_exists
        from translate.storage.poxliff import PoXliffFile
        from pootle_misc import ptempfile as tempfile
        import shutil
        ensure_target_dir_exists(abs_export_path)
        outputstore = store.convert(PoXliffFile)
        outputstore.switchfile(store.name, createifmissing=True)
        fd, tempstore = tempfile.mkstemp(prefix=store.name, suffix='.xlf')
        os.close(fd)
        outputstore.savefile(tempstore)
        shutil.move(tempstore, abs_export_path)
        cache.set(key, store.get_mtime(), settings.OBJECT_CACHE_TIMEOUT)
    return redirect('/export/' + export_path)


@get_store_context('view')
def export_as_type(request, store, filetype):
    """Export given file to xliff for offline translation."""
    from pootle_store.filetypes import factory_classes, is_monolingual
    klass = factory_classes.get(filetype, None)
    if (not klass or is_monolingual(klass) or
        store.pootle_path.endswith(filetype)):
        raise ValueError

    path, ext = os.path.splitext(store.real_path)
    export_path = os.path.join('POOTLE_EXPORT',
                               path + os.path.extsep + filetype)
    abs_export_path = absolute_real_path(export_path)

    key = iri_to_uri("%s:export_as_%s" % (store.pootle_path, filetype))
    last_export = cache.get(key)
    if (not (last_export and last_export == store.get_mtime() and
        os.path.isfile(abs_export_path))):
        from pootle_app.project_tree import ensure_target_dir_exists
        from pootle_misc import ptempfile as tempfile
        import shutil
        ensure_target_dir_exists(abs_export_path)
        outputstore = store.convert(klass)
        fd, tempstore = tempfile.mkstemp(prefix=store.name,
                                         suffix=os.path.extsep + filetype)
        os.close(fd)
        outputstore.savefile(tempstore)
        shutil.move(tempstore, abs_export_path)
        cache.set(key, store.get_mtime(), settings.OBJECT_CACHE_TIMEOUT)
    return redirect('/export/' + export_path)

@get_store_context('view')
def download(request, store):
    store.sync(update_translation=True)
    return redirect('/export/' + store.real_path)


####################### Translate Page ##############################

def get_alt_src_langs(request, profile, translation_project):
    language = translation_project.language
    project = translation_project.project
    source_language = project.source_language

    langs = profile.alt_src_langs.exclude(
            id__in=(language.id, source_language.id)
        ).filter(translationproject__project=project)

    if not profile.alt_src_langs.count():
        from pootle_language.models import Language
        accept = request.META.get('HTTP_ACCEPT_LANGUAGE', '')

        for accept_lang, unused in parse_accept_lang_header(accept):
            if accept_lang == '*':
                continue

            simplified = data.simplify_to_common(accept_lang)
            normalized = to_locale(data.normalize_code(simplified))
            code = to_locale(accept_lang)
            if (normalized in
                    ('en', 'en_US', source_language.code, language.code) or
                code in ('en', 'en_US', source_language.code, language.code)):
                continue

            langs = Language.objects.filter(
                code__in=(normalized, code),
                translationproject__project=project,
            )
            if langs.count():
                break

    return langs


def get_non_indexed_search_step_query(form, units_queryset):
    words = form.cleaned_data['search'].split()
    result = units_queryset.none()

    if 'source' in form.cleaned_data['sfields']:
        subresult = units_queryset
        for word in words:
            subresult = subresult.filter(source_f__icontains=word)
        result = result | subresult

    if 'target' in form.cleaned_data['sfields']:
        subresult = units_queryset
        for word in words:
            subresult = subresult.filter(target_f__icontains=word)
        result = result | subresult

    if 'notes' in form.cleaned_data['sfields']:
        translator_subresult = units_queryset
        developer_subresult = units_queryset
        for word in words:
            translator_subresult = translator_subresult.filter(
                translator_comment__icontains=word,
            )
            developer_subresult = developer_subresult.filter(
                developer_comment__icontains=word,
            )
        result = result | translator_subresult | developer_subresult

    if 'locations' in form.cleaned_data['sfields']:
        subresult = units_queryset
        for word in words:
            subresult = subresult.filter(locations__icontains=word)
        result = result | subresult

    return result

def get_non_indexed_search_exact_query(form, units_queryset):
    phrase = form.cleaned_data['search']
    result = units_queryset.none()

    if 'source' in form.cleaned_data['sfields']:
        subresult = units_queryset.filter(source_f__contains=phrase)
        result = result | subresult

    if 'target' in form.cleaned_data['sfields']:
        subresult = units_queryset.filter(target_f__contains=phrase)
        result = result | subresult

    if 'notes' in form.cleaned_data['sfields']:
        translator_subresult = units_queryset
        developer_subresult = units_queryset
        translator_subresult = translator_subresult.filter(
            translator_comment__contains=phrase,
        )
        developer_subresult = developer_subresult.filter(
            developer_comment__contains=phrase,
        )
        result = result | translator_subresult | developer_subresult

    if 'locations' in form.cleaned_data['sfields']:
        subresult = units_queryset.filter(locations__contains=phrase)
        result = result | subresult

    return result

def get_search_step_query(request, form, units_queryset):
    """Narrows down units query to units matching search string."""

    if 'exact' in form.cleaned_data['soptions']:
        logging.debug(u"Using exact database search")
        return get_non_indexed_search_exact_query(form, units_queryset)

    path = request.GET.get('path', None)
    if path is not None:
        lang, proj, dir_path, filename = split_pootle_path(path)

        translation_projects = []
        # /<language_code>/<project_code>/
        if lang is not None and proj is not None:
            project = get_object_or_404(Project, code=proj)
            language = get_object_or_404(Language, code=lang)
            translation_projects = \
                    TranslationProject.objects.filter(project=project,
                                                      language=language)
        # /projects/<project_code>/
        elif lang is None and proj is not None:
            project = get_object_or_404(Project, code=proj)
            translation_projects = \
                    TranslationProject.objects.filter(project=project)
        # /<language_code>/
        elif lang is not None and proj is None:
            language = get_object_or_404(Language, code=lang)
            translation_projects = \
                    TranslationProject.objects.filter(language=language)
        # /
        elif lang is None and proj is None:
            translation_projects = TranslationProject.objects.all()

        has_indexer = True
        for translation_project in translation_projects:
            if translation_project.indexer is None:
                has_indexer = False

        if not has_indexer:
            logging.debug(u"No indexer for one or more translation project,"
                          u" using database search")
            return get_non_indexed_search_step_query(form, units_queryset)
        else:
            alldbids = []
            for translation_project in translation_projects:
                logging.debug(u"Found %s indexer for %s, using indexed search",
                              translation_project.indexer.INDEX_DIRECTORY_NAME,
                              translation_project)

                word_querylist = []
                words = form.cleaned_data['search']
                fields = form.cleaned_data['sfields']
                paths = units_queryset.order_by() \
                                      .values_list('store__pootle_path',
                                                   flat=True) \
                                      .distinct()
                path_querylist = [('pofilename', pootle_path)
                                  for pootle_path in paths.iterator()]
                cache_key = "search:%s" % str(hash((repr(path_querylist),
                                                    translation_project.get_mtime(),
                                                    repr(words),
                                                    repr(fields))))

                dbids = cache.get(cache_key)
                if dbids is None:
                    searchparts = []
                    word_querylist = [(field, words) for field in fields]
                    textquery = \
                            translation_project.indexer.make_query(word_querylist,
                                                                   False)
                    searchparts.append(textquery)

                    pathquery = \
                            translation_project.indexer.make_query(path_querylist,
                                                                   False)
                    searchparts.append(pathquery)
                    limitedquery = \
                            translation_project.indexer.make_query(searchparts,
                                                                   True)

                    result = translation_project.indexer.search(limitedquery,
                                                                ['dbid'])
                    dbids = [int(item['dbid'][0]) for item in result[:999]]
                    cache.set(cache_key, dbids, settings.OBJECT_CACHE_TIMEOUT)

                alldbids.extend(dbids)

            return units_queryset.filter(id__in=alldbids)


def get_step_query(request, units_queryset):
    """Narrows down unit query to units matching conditions in GET."""
    if 'filter' in request.GET:
        unit_filter = request.GET['filter']
        username = request.GET.get('user', None)

        profile = request.profile
        if username is not None:
            try:
                user = User.objects.get(username=username)
                profile = user.get_profile()
            except User.DoesNotExist:
                pass

        if unit_filter:
            match_queryset = units_queryset.none()

            if unit_filter == 'all':
                match_queryset = units_queryset
            elif unit_filter == 'translated':
                match_queryset = units_queryset.filter(state=TRANSLATED)
            elif unit_filter == 'untranslated':
                match_queryset = units_queryset.filter(state=UNTRANSLATED)
            elif unit_filter == 'fuzzy':
                match_queryset = units_queryset.filter(state=FUZZY)
            elif unit_filter == 'incomplete':
                match_queryset = units_queryset.filter(
                    Q(state=UNTRANSLATED) | Q(state=FUZZY),
                )
            elif unit_filter == 'suggestions':
                #FIXME: is None the most efficient query
                match_queryset = units_queryset.exclude(suggestion=None)
            elif unit_filter in ('my-suggestions', 'user-suggestions'):
                match_queryset = units_queryset.filter(
                        suggestion__user=profile,
                    ).distinct()
            elif unit_filter == 'user-suggestions-accepted':
                # FIXME: Oh, this is pretty lame, we need a completely
                # different way to model suggestions
                unit_ids = SuggestionStat.objects.filter(
                        suggester=profile,
                        state='accepted',
                    ).values_list('unit', flat=True)
                match_queryset = units_queryset.filter(
                        id__in=unit_ids,
                    ).distinct()
            elif unit_filter == 'user-suggestions-rejected':
                # FIXME: Oh, this is as lame as above
                unit_ids = SuggestionStat.objects.filter(
                        suggester=profile,
                        state='rejected',
                    ).values_list('unit', flat=True)
                match_queryset = units_queryset.filter(
                        id__in=unit_ids,
                    ).distinct()
            elif unit_filter in ('my-submissions', 'user-submissions'):
                match_queryset = units_queryset.filter(
                        submission__submitter=profile,
                    ).distinct()
            elif (unit_filter in ('my-submissions-overwritten',
                                  'user-submissions-overwritten')):
                match_queryset = units_queryset.filter(
                        submission__submitter=profile,
                    ).exclude(submitted_by=profile).distinct()
            elif unit_filter == 'checks' and 'checks' in request.GET:
                checks = request.GET['checks'].split(',')

                if checks:
                    match_queryset = units_queryset.filter(
                        qualitycheck__false_positive=False,
                        qualitycheck__name__in=checks
                    ).distinct()


            units_queryset = match_queryset

    if 'goal' in request.GET:
        try:
            goal = Goal.objects.get(slug=request.GET['goal'])
        except Goal.DoesNotExist:
            pass
        else:
            pootle_path = (request.GET.get('path', '') or
                           request.path.replace("/export-view/", "/", 1))
            goal_stores = goal.get_stores_for_path(pootle_path)
            units_queryset = units_queryset.filter(store__in=goal_stores)

    if 'search' in request.GET and 'sfields' in request.GET:
        # Accept `sfields` to be a comma-separated string of fields (#46)
        GET = request.GET.copy()
        sfields = GET['sfields']
        if isinstance(sfields, unicode) and u',' in sfields:
            GET.setlist('sfields', sfields.split(u','))

        # use the search form for validation only
        search_form = make_search_form(GET)

        if search_form.is_valid():
            units_queryset = get_search_step_query(request, search_form,
                                                   units_queryset)

    return units_queryset


#
# Views used with XMLHttpRequest requests.
#

def _filter_ctx_units(units_qs, unit, how_many, gap=0):
    """Returns ``how_many``*2 units that are before and after ``index``."""
    result = {'before': [], 'after': []}

    if how_many and unit.index - gap > 0:
        before = units_qs.filter(store=unit.store_id, index__lt=unit.index) \
                         .order_by('-index')[gap:how_many+gap]
        result['before'] = _build_units_list(before, reverse=True)
        result['before'].reverse()

    #FIXME: can we avoid this query if length is known?
    if how_many:
        after = units_qs.filter(store=unit.store_id,
                                index__gt=unit.index)[gap:how_many+gap]
        result['after'] = _build_units_list(after)

    return result


def _prepare_unit(unit):
    """Constructs a dictionary with relevant `unit` data."""
    return {
        'id': unit.id,
        'url': unit.get_translate_url(),
        'isfuzzy': unit.isfuzzy(),
        'source': [source[1] for source in pluralize_source(unit)],
        'target': [target[1] for target in pluralize_target(unit)],
    }


def _path_units_with_meta(path, units):
    """Constructs a dictionary which contains a list of `units`
    corresponding to `path` as well as its metadata.
    """
    meta = None
    units_list = []

    for unit in iter(units):
        if meta is None:
            # XXX: Watch out for the query count
            store = unit.store
            tp = store.translation_project
            project = tp.project
            meta = {
                'source_lang': project.source_language.code,
                'source_dir': project.source_language.direction,
                'target_lang': tp.language.code,
                'target_dir': tp.language.direction,
                'project_code': project.code,
                'project_style': project.checkstyle,
            }

        units_list.append(_prepare_unit(unit))

    return {
        path: {
            'meta': meta,
            'units': units_list,
        },
    }


def _build_units_list(units, reverse=False):
    """Given a list/queryset of units, builds a list with the unit data
    contained in a dictionary ready to be returned as JSON.

    :return: A list with unit id, source, and target texts. In case of
             having plural forms, a title for the plural form is also provided.
    """
    return_units = []

    for unit in iter(units):
        return_units.append(_prepare_unit(unit))

    return return_units


@ajax_required
def get_units(request):
    """Gets source and target texts and its metadata.

    :return: A JSON-encoded string containing the source and target texts
        grouped by the store they belong to.

        The optional `count` GET parameter defines the chunk size to
        consider. The user's preference will be used by default.

        When the `initial` GET parameter is present, a sorted list of
        the result set ids will be returned too.
    """
    pootle_path = request.GET.get('path', None)
    if pootle_path is None:
        raise Http400(_('Arguments missing.'))

    request.profile = get_profile(request.user)
    limit = request.profile.get_unit_rows()

    units_qs = Unit.objects.get_for_path(pootle_path, request.profile)
    step_queryset = get_step_query(request, units_qs)

    is_initial_request = request.GET.get('initial', False)
    chunk_size = request.GET.get('count', limit)
    uids_param = filter(None, request.GET.get('uids', '').split(u','))
    uids = filter(None, map(to_int, uids_param))

    units = None
    unit_groups = []
    uid_list = []

    if is_initial_request:
        uid_list = list(step_queryset.values_list('id', flat=True))

        if len(uids) == 1:
            try:
                uid = uids[0]
                index = uid_list.index(uid)
                begin = max(index - chunk_size, 0)
                end = min(index + chunk_size + 1, len(uid_list))
                uids = uid_list[begin:end]
            except ValueError:
                raise Http404  # `uid` not found in `uid_list`
        else:
            count = 2 * chunk_size
            units = step_queryset[:count]

    if units is None and uids:
        units = step_queryset.filter(id__in=uids)

    units_by_path = groupby(units, lambda x: x.store.pootle_path)
    for pootle_path, units in units_by_path:
        unit_groups.append(_path_units_with_meta(pootle_path, units))

    response = {
        'unitGroups': unit_groups,
    }
    if uid_list:
        response['uIds'] = uid_list

    return HttpResponse(jsonify(response), mimetype="application/json")


def _is_filtered(request):
    """Checks if unit list is filtered."""
    return ('filter' in request.GET or 'checks' in request.GET or
            'user' in request.GET or
            ('search' in request.GET and 'sfields' in request.GET))


@ajax_required
@get_unit_context('view')
def get_more_context(request, unit):
    """Retrieves more context units.

    :return: An object in JSON notation that contains the source and target
             texts for units that are in the context of unit ``uid``.
    """
    store = request.store
    json = {}
    gap = int(request.GET.get('gap', 0))
    qty = int(request.GET.get('qty', 1))

    json["ctx"] = _filter_ctx_units(store.units, unit, qty, gap)
    rcode = 200
    response = jsonify(json)
    return HttpResponse(response, status=rcode, mimetype="application/json")


@never_cache
@get_unit_context('view')
def timeline(request, unit):
    """Returns a JSON-encoded string including the changes to the unit
    rendered in HTML.
    """
    timeline = Submission.objects.filter(unit=unit, field__in=[
        SubmissionFields.TARGET, SubmissionFields.STATE,
        SubmissionFields.COMMENT, SubmissionFields.NONE
    ])
    timeline = timeline.select_related("submitter__user",
                                       "translation_project__language")

    entries_group = []
    context = {
        'system': User.objects.get_system_user().get_profile()
    }

    if unit.creation_time:
        context['created'] = {
            'datetime': unit.creation_time,
        }

    for key, values in groupby(timeline, key=lambda x: x.creation_time):
        entry_group = {
            'datetime': key,
            'entries': [],
        }

        for item in values:
            # Only add submitter information for the whole entry group once
            entry_group.setdefault('submitter', item.submitter)

            context.setdefault('language', item.translation_project.language)

            entry = {
                'field': item.field,
                'field_name': SubmissionFields.NAMES_MAP[item.field],
            }

            if item.field == SubmissionFields.STATE:
                entry['old_value'] = STATES_MAP[int(to_python(item.old_value))]
                entry['new_value'] = STATES_MAP[int(to_python(item.new_value))]
            elif item.check:
                entry.update({
                    'check_name': item.check.name,
                    'check_display_name': check_names[item.check.name],
                    'checks_url': reverse('pootle-staticpages-display',
                                          args=['help/quality-checks']),
                    'action': {
                                SubmissionTypes.MUTE_CHECK: 'Muted',
                                SubmissionTypes.UNMUTE_CHECK: 'Unmuted'
                              }.get(item.type, '')
                })
            else:
                entry['new_value'] = to_python(item.new_value)

            entry_group['entries'].append(entry)

        entries_group.append(entry_group)

    # Let's reverse the chronological order
    entries_group.reverse()

    # May be better to show all translations?
    # Remove first timeline item if it's solely a change to the target
    #if (entries_group and len(entries_group[0]['entries']) == 1 and
    #    entries_group[0]['entries'][0]['field'] == SubmissionFields.TARGET):
    #    del entries_group[0]

    context['entries_group'] = entries_group

    if request.is_ajax():
        # The client will want to confirm that the response is relevant for
        # the unit on screen at the time of receiving this, so we add the uid.
        json = {'uid': unit.id}

        t = loader.get_template('editor/units/xhr_timeline.html')
        c = RequestContext(request, context)
        json['timeline'] = t.render(c).replace('\n', '')

        response = jsonify(json)
        return HttpResponse(response, mimetype="application/json")
    else:
        return render(request, "editor/units/timeline.html", context)


@ajax_required
@get_path_obj
@permission_required('view')
@get_resource
def get_qualitycheck_stats(request, path_obj, **kwargs):
    failing_checks = request.resource_obj.get_checks()['checks']
    response = jsonify(failing_checks)
    return HttpResponse(response, mimetype="application/json")


@ajax_required
@get_path_obj
@permission_required('view')
@get_resource
def get_overview_stats(request, path_obj, **kwargs):
    stats = request.resource_obj.get_stats()
    response = jsonify(stats)
    return HttpResponse(response, mimetype="application/json")


@require_POST
@ajax_required
@get_unit_context('translate')
def comment(request, unit):
    """Stores a new comment for the given ``unit``.

    :return: If the form validates, the cleaned comment is returned.
             An error message is returned otherwise.
    """
    # Update current unit instance's attributes
    unit.commented_by = request.profile
    unit.commented_on = timezone.now()

    language = request.translation_project.language
    form = unit_comment_form_factory(language)(request.POST, instance=unit,
                                               request=request)

    if form.is_valid():
        form.save()

        context = {
            'unit': unit,
            'language': language,
        }
        t = loader.get_template('editor/units/xhr_comment.html')
        c = RequestContext(request, context)

        json = {'comment': t.render(c)}
        rcode = 200
    else:
        json = {'msg': _("Comment submission failed.")}
        rcode = 400

    response = jsonify(json)

    return HttpResponse(response, status=rcode, mimetype="application/json")


@never_cache
@ajax_required
@get_unit_context('view')
def get_edit_unit(request, unit):
    """Given a store path ``pootle_path`` and unit id ``uid``, gathers all the
    necessary information to build the editing widget.

    :return: A templatised editing widget is returned within the ``editor``
             variable and paging information is also returned if the page
             number has changed.
    """
    json = {}

    translation_project = request.translation_project
    language = translation_project.language

    if unit.hasplural():
        snplurals = len(unit.source.strings)
    else:
        snplurals = None

    form_class = unit_form_factory(language, snplurals, request)
    form = form_class(instance=unit, request=request)
    comment_form_class = unit_comment_form_factory(language)
    comment_form = comment_form_class({}, instance=unit)

    store = unit.store
    directory = store.parent
    profile = request.profile
    alt_src_langs = get_alt_src_langs(request, profile, translation_project)
    project = translation_project.project

    suggestions = get_sugg_list(unit)
    template_vars = {
        'unit': unit,
        'form': form,
        'comment_form': comment_form,
        'store': store,
        'directory': directory,
        'profile': profile,
        'user': request.user,
        'project': project,
        'language': language,
        'source_language': translation_project.project.source_language,
        'cantranslate': check_profile_permission(profile, "translate",
                                                 directory),
        'cansuggest': check_profile_permission(profile, "suggest", directory),
        'canreview': check_profile_permission(profile, "review", directory),
        'is_admin': check_profile_permission(profile, 'administrate',
                                             directory),
        'altsrcs': find_altsrcs(unit, alt_src_langs, store=store,
                                project=project),
        'suggestions': suggestions,
    }

    if translation_project.project.is_terminology or store.is_terminology:
        t = loader.get_template('editor/units/term_edit.html')
    else:
        t = loader.get_template('editor/units/edit.html')
    c = RequestContext(request, template_vars)
    json['editor'] = t.render(c)

    rcode = 200

    # Return context rows if filtering is applied but
    # don't return any if the user has asked not to have it.
    current_filter = request.GET.get('filter', 'all')
    show_ctx = request.COOKIES.get('ctxShow', 'true')

    if ((_is_filtered(request) or current_filter not in ('all',)) and
        show_ctx == 'true'):
        # TODO: review if this first 'if' branch makes sense.
        if translation_project.project.is_terminology or store.is_terminology:
            json['ctx'] = _filter_ctx_units(store.units, unit, 0)
        else:
            ctx_qty = int(request.COOKIES.get('ctxQty', 1))
            json['ctx'] = _filter_ctx_units(store.units, unit, ctx_qty)

    response = jsonify(json)
    return HttpResponse(response, status=rcode, mimetype="application/json")


def _get_project_icon(project):
    path = "/".join(["", project.code, ".pootle", "icon.png"])
    if os.path.isfile(settings.PODIRECTORY + path):
        # XXX: we are abusing the export URL, need a better way to serve
        # static files
        return "/export" + path
    else:
        return ""

@ajax_required
@get_unit_context('view')
def get_tm_results(request, unit):
    """Gets a list of TM results for the current object.

    :return: JSON string with a list of TM results.
    """

    max_len = settings.LV_MAX_LENGTH
    min_similarity = settings.LV_MIN_SIMILARITY

    results = []

    # Shortcut Levenshtein comparer, since the distance, by definition, can't
    # be less than the difference in string length
    diff_len = unit.source_length * (100 - min_similarity)/100
    max_unit_len = unit.source_length + diff_len
    min_unit_len = unit.source_length - diff_len

    criteria = {
        'target_lang': unit.store.translation_project.language,
        'source_lang': unit.store.translation_project.project.source_language,
        'source_length__range': (min_unit_len, max_unit_len),
    }
    tmunits = TMUnit.objects.filter(**criteria).exclude(unit=unit)

    comparer = LevenshteinComparer(max_len)
    for tmunit in tmunits:
        quality = comparer.similarity(tmunit.source, unit.source,
                                      min_similarity)
        if quality >= min_similarity:
            project = tmunit.project
            profile = tmunit.submitted_by
            result = {
                'source': tmunit.source,
                'target': tmunit.target,
                'quality': quality,
                'project': {
                    'project': project.code,
                    'projectname': project.fullname,
                    'absolute_url': project.get_absolute_url(),
                    'icon': _get_project_icon(project),
                }
            }

            if profile is not None:
                submissions = Submission.objects.filter(
                                submitter=profile,
                                type=SubmissionTypes.NORMAL,
                                ).distinct().count()
                suggestions = SuggestionStat.objects.filter(
                                suggester=profile,
                                ).distinct().count()
                translations = submissions - suggestions  # XXX: is this correct?
                title = _("By %s on %s<br/><br/>%s translations<br/>%s suggestions" % (
                            profile.user.get_full_name(),
                            tmunit.submitted_on,
                            translations, suggestions))

                result['translator'] = {
                    'username': unicode(profile.user),
                    'title': title,
                    'absolute_url': profile.get_absolute_url(),
                    'gravatar': profile.gravatar_url(24),
                }

            results.append(result)

    return HttpResponse(jsonify(results), mimetype="application/json")


@require_POST
@ajax_required
@get_unit_context('translate')
def submit(request, unit):
    """Processes translation submissions and stores them in the database.

    :return: An object in JSON notation that contains the previous and last
             units for the unit next to unit ``uid``.
    """
    json = {}

    translation_project = request.translation_project
    language = translation_project.language

    if unit.hasplural():
        snplurals = len(unit.source.strings)
    else:
        snplurals = None

    # Store current time so that it is the same for all submissions
    current_time = timezone.now()

    # Update current unit instance's attributes
    unit.submitted_by = request.profile
    unit.submitted_on = current_time

    form_class = unit_form_factory(language, snplurals, request)
    form = form_class(request.POST, instance=unit, request=request)

    if form.is_valid():
        if form.updated_fields:
            for field, old_value, new_value in form.updated_fields:
                sub = Submission(
                        creation_time=current_time,
                        translation_project=translation_project,
                        submitter=request.profile,
                        unit=unit,
                        field=field,
                        type=SubmissionTypes.NORMAL,
                        old_value=old_value,
                        new_value=new_value,
                )
                sub.save()
            form.instance._log_user = request.profile
            form.save()
            translation_submitted.send(
                    sender=translation_project,
                    unit=form.instance,
                    profile=request.profile,
            )

            has_critical_checks = unit.qualitycheck_set.filter(
                category=Category.CRITICAL
            ).exists()

            if has_critical_checks:
                can_review = check_profile_permission(request.profile,
                                                      'review',
                                                      unit.store.parent)
                ctx = {
                    'canreview': can_review,
                    'unit': unit
                }
                template = loader.get_template('editor/units/xhr_checks.html')
                context = RequestContext(request, ctx)
                json['checks'] = template.render(context)

        rcode = 200
    else:
        # Form failed
        #FIXME: we should display validation errors here
        rcode = 400
        json["msg"] = _("Failed to process submission.")

    response = jsonify(json)
    return HttpResponse(response, status=rcode, mimetype="application/json")


@require_POST
@ajax_required
@get_unit_context('suggest')
def suggest(request, unit):
    """Processes translation suggestions and stores them in the database.

    :return: An object in JSON notation that contains the previous and last
             units for the unit next to unit ``uid``.
    """
    json = {}

    translation_project = request.translation_project
    language = translation_project.language

    if unit.hasplural():
        snplurals = len(unit.source.strings)
    else:
        snplurals = None

    form_class = unit_form_factory(language, snplurals, request)
    form = form_class(request.POST, instance=unit, request=request)

    if form.is_valid():
        if form.instance._target_updated:
            # TODO: Review if this hackish method is still necessary
            #HACKISH: django 1.2 stupidly modifies instance on
            # model form validation, reload unit from db
            unit = Unit.objects.get(id=unit.id)
            sugg = unit.add_suggestion(form.cleaned_data['target_f'],
                                       request.profile)
            if sugg:
                SuggestionStat.objects.get_or_create(
                    translation_project=translation_project,
                    suggester=request.profile, state='pending', unit=unit.id
                )
        rcode = 200
    else:
        # Form failed
        #FIXME: we should display validation errors here
        rcode = 400
        json["msg"] = _("Failed to process suggestion.")
    response = jsonify(json)
    return HttpResponse(response, status=rcode, mimetype="application/json")


@ajax_required
@get_unit_context('review')
def reject_suggestion(request, unit, suggid):
    if request.POST.get('reject'):
        try:
            sugg = unit.suggestion_set.get(id=suggid)
        except ObjectDoesNotExist:
            raise Http404

        unit.reject_suggestion(sugg, request.translation_project,
                               request.profile)

    json = {
        'udbid': unit.id,
        'sugid': suggid,
    }
    response = jsonify(json)
    return HttpResponse(response, mimetype="application/json")


@ajax_required
@get_unit_context('review')
def accept_suggestion(request, unit, suggid):
    json = {
        'udbid': unit.id,
        'sugid': suggid,
    }
    if request.POST.get('accept'):
        try:
            suggestion = unit.suggestion_set.get(id=suggid)
        except ObjectDoesNotExist:
            raise Http404

        unit.accept_suggestion(suggestion, request.translation_project,
                               request.profile)

        json['newtargets'] = [highlight_whitespace(target)
                              for target in unit.target.strings]
        json['newdiffs'] = {}
        for sugg in unit.get_suggestions():
            json['newdiffs'][sugg.id] = \
                    [highlight_diffs(unit.target.strings[i], target)
                     for i, target in enumerate(sugg.target.strings)]

    response = jsonify(json)
    return HttpResponse(response, mimetype="application/json")


@ajax_required
def clear_vote(request, voteid):
    json = {}
    json["voteid"] = voteid
    if request.POST.get('clear'):
        try:
            from voting.models import Vote
            vote = Vote.objects.get(pk=voteid)
            if vote.user != request.user:
                # No i18n, will not go to UI
                raise PermissionDenied("Users can only remove their own votes")
            vote.delete()
        except ObjectDoesNotExist:
            raise Http404
    response = jsonify(json)
    return HttpResponse(response, mimetype="application/json")


@ajax_required
@get_unit_context('')
def vote_up(request, unit, suggid):
    json = {}
    json["suggid"] = suggid
    if request.POST.get('up'):
        try:
            suggestion = unit.suggestion_set.get(id=suggid)
            from voting.models import Vote
            # Why can't it just return the vote object?
            Vote.objects.record_vote(suggestion, request.user, +1)
            json["voteid"] = Vote.objects.get_for_user(suggestion,
                                                       request.user).id
        except ObjectDoesNotExist:
            raise Http404(_("The suggestion or vote is not valid any more."))
    response = jsonify(json)
    return HttpResponse(response, mimetype="application/json")


@ajax_required
@get_unit_context('review')
def toggle_qualitycheck(request, unit, check_id):
    json = {}
    json["udbid"] = unit.id
    json["checkid"] = check_id

    try:
        unit.toggle_qualitycheck(check_id,
            bool(request.POST.get('mute')), request.profile)
    except ObjectDoesNotExist:
        raise Http404

    response = jsonify(json)
    return HttpResponse(response, mimetype="application/json")


@require_POST
@ajax_required
def ajax_remove_tag_from_store(request, tag_slug, store_pk):
    if not check_permission('administrate', request):
        raise PermissionDenied(_("You do not have rights to remove tags."))

    store = get_object_or_404(Store, pk=store_pk)

    if tag_slug.startswith("goal-"):
        goal = get_object_or_404(Goal, slug=tag_slug)
        store.goals.remove(goal)
    else:
        tag = get_object_or_404(Tag, slug=tag_slug)
        store.tags.remove(tag)

    return HttpResponse(status=201)


def _add_tag(request, store, tag_like_object):
    if isinstance(tag_like_object, Tag):
        store.tags.add(tag_like_object)
    else:
        store.goals.add(tag_like_object)
    context = {
        'store_tags': store.tag_like_objects,
        'path_obj': store,
        'can_edit': check_permission('administrate', request),
    }
    response = render(request, "stores/xhr_tags_list.html", context)
    response.status_code = 201
    return response


@require_POST
@ajax_required
def ajax_add_tag_to_store(request, store_pk):
    """Return an HTML snippet with the failed form or blank if valid."""

    if not check_permission('administrate', request):
        raise PermissionDenied(_("You do not have rights to add tags."))

    store = get_object_or_404(Store, pk=store_pk)

    add_tag_form = TagForm(request.POST)

    if add_tag_form.is_valid():
        new_tag_like_object = add_tag_form.save()
        return _add_tag(request, store, new_tag_like_object)
    else:
        # If the form is invalid, perhaps it is because the tag already exists,
        # so check if the tag exists.
        try:
            criteria = {
                'name': add_tag_form.data['name'],
                'slug': add_tag_form.data['slug'],
            }
            if len(store.tags.filter(**criteria)) == 1:
                # If the tag is already applied to the store then avoid
                # reloading the page.
                return HttpResponse(status=204)
            elif len(store.goals.filter(**criteria)) == 1:
                # If the goal is already applied to the store then avoid
                # reloading the page.
                return HttpResponse(status=204)
            else:
                # Else add the tag (or goal) to the store.
                if criteria['name'].startswith("goal:"):
                    tag_like_object = Goal.objects.get(**criteria)
                else:
                    tag_like_object = Tag.objects.get(**criteria)
                return _add_tag(request, store, tag_like_object)
        except Exception:
            # If the form is invalid and the tag doesn't exist yet then display
            # the form with the error messages.
            context = {
                'add_tag_form': add_tag_form,
                'add_tag_action_url': reverse('pootle-xhr-tag-store',
                                              args=[store.pk])
            }
            return render(request, "core/xhr_add_tag_form.html", context)

########NEW FILE########
__FILENAME__ = decorators
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging
from functools import wraps

from django.conf import settings
from django.core.cache import cache
from django.core.urlresolvers import resolve, reverse
from django.http import Http404
from django.shortcuts import redirect
from django.utils.encoding import iri_to_uri


def get_goal(func):
    @wraps(func)
    def wrapper(request, *args, **kwargs):
        # Putting the next import at the top of the file causes circular import
        # issues.
        from .models import Goal

        goal_slug = kwargs.pop('goal_slug', '')

        if goal_slug:
            try:
                goal = Goal.objects.get(slug=goal_slug)
            except Goal.DoesNotExist:
                pass
            else:
                url_match = resolve(request.path)

                if (not url_match.url_name == 'pootle-xhr-edit-goal' and
                    not goal.get_stores_for_path(request.pootle_path)):
                    # If this is not an AJAX request to edit the goal, and the
                    # resource object doesn't belong to the goal, then redirect
                    # to the translation project root for the goal.
                    language = request.ctx_obj.language.code
                    project = request.ctx_obj.project.code
                    url = reverse('pootle-tp-goal-drill-down',
                                  args=[language, project, goal.slug, '', ''])
                    return redirect(url)

                kwargs['goal'] = goal

        return func(request, *args, **kwargs)

    return wrapper


def require_goal(func):
    @wraps(func)
    def wrapper(request, *args, **kwargs):

        goal = kwargs.pop('goal', '')

        if goal:
            return func(request, goal, *args, **kwargs)
        else:
            raise Http404

    return wrapper


def get_from_cache_for_path(func, timeout=settings.OBJECT_CACHE_TIMEOUT):
    @wraps(func)
    def wrapper(instance, pootle_path, *args, **kwargs):
        key = iri_to_uri(":".join([instance.pootle_path, pootle_path,
                                   func.__name__]))
        result = cache.get(key)
        if result is None:
            logging.debug(u"cache miss for %s", key)
            result = func(instance, pootle_path, *args, **kwargs)
            cache.set(key, result, timeout)
        return result
    return wrapper

########NEW FILE########
__FILENAME__ = forms
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import re

from django import forms
from django.utils.translation import ugettext as _

from taggit.models import Tag

from .models import Goal, slugify_tag_name


def check_name(name):
    """Perform extra validations and normalizations on tag name.

    * Tag names must be alphanumeric strings that can have (but not begin
      or end with, and don't have two or more consecutive) the following
      characters:

        * space,
        * colon (:),
        * hyphen (-),
        * underscore (_),
        * slash (/) or
        * period (.)

    * Tag names must be case insensitive (displayed as lowercase).
    """
    if name != name.strip(" -_/:."):
        msg = _("Tag names cannot have leading nor trailing spaces, colons "
                "(:), hyphens (-), underscores (_), slashes (/) or "
                "periods (.)!")
        raise forms.ValidationError(msg)

    if name != re.sub(r'\s{2,}|:{2,}|-{2,}|_{2,}|/{2,}|\.{2,}', "-", name):
        msg = _("Tag names cannot contain two or more consecutive: spaces, "
                "colons (:), hyphens (-), underscores (_), slashes (/) or "
                "periods (.)!")
        raise forms.ValidationError(msg)

    #TODO Unicode alphanumerics must be allowed.
    if name != re.sub(r'[^\w _/:.-]', "-", name):
        msg = _("Tag names must be an alphanumeric lowercase string with no "
                "trailing nor leading (but yes on the middle): spaces, colons "
                "(:), hyphens (-), underscores (_), slashes (/) or "
                "periods (.)!")
        raise forms.ValidationError(msg)

    # Lowercase since all tags must be case insensitive.
    return name.lower()


def check_goal_name(name):
    name = name.lstrip("goal:")

    if name != name.lstrip(" -_/:."):
        msg = _("Name cannot contain just after 'goal:' any of these "
                "characters: spaces, colons (:), hyphens (-), underscores "
                "(_), slashes (/) or periods (.)")
        raise forms.ValidationError(msg)


class TagForm(forms.ModelForm):

    class Meta:
        model = Tag
        widgets = {
            'name': forms.TextInput(attrs={
                'id': 'js-tag-form-name',
            }),
            'slug': forms.HiddenInput(attrs={
                'id': 'js-tag-form-slug',
            }),
        }

    def __init__(self, *args, **kwargs):
        super(TagForm, self).__init__(*args, **kwargs)
        self.fields['slug'].label = ''  # Blank label to don't see it.

    def save(self, commit=True):
        # If this form is saving a goal and not a tag, then replace the tag
        # instance with a goal instance using the same values.
        if self.instance.name.startswith("goal:"):
            params = {
                'name': self.instance.name,
                'slug': self.instance.slug,
            }
            self.instance = Goal(**params)

        return super(TagForm, self).save(commit)

    def clean_name(self):
        """Perform extra validations and normalizations on tag name.

        * Tag names must be alphanumeric strings that can have (but not begin
          or end with, and don't have two or more consecutive) the following
          characters:

            * space,
            * colon (:),
            * hyphen (-),
            * underscore (_),
            * slash (/) or
            * period (.)

        * Tag names must be case insensitive (displayed as lowercase).
        * Also if the name corresponds to a goal name it must be checked that
          the name is not used for any existing goal.
        """
        name = check_name(self.cleaned_data['name'])

        if name.startswith("goal:"):
            check_goal_name(name)

            if Goal.objects.filter(name=name):
                msg = _("A goal with that name already exists. Please pick "
                        "another name.")
                raise forms.ValidationError(msg)

        # Always return the cleaned data, whether you have changed it or not.
        return name

    def clean_slug(self):
        """Perform extra validations and normalizations on tag slug.

        * Tag slugs must be equal to the corresponding tag name, but replacing
          with a hyphen (-) the following characters:

            * space,
            * colon (:),
            * underscore (_),
            * slash (/) or
            * period (.)

        * Tag slugs can't have two or more consecutive hyphens, nor start nor
          end with hyphens.
        * Also if the slug corresponds to a goal slug it must be checked that
          the slug is not used for any existing goal.
        """
        # Get the tag name.
        tag_name = self.cleaned_data.get('name', "")

        # If there is no tag name, maybe because it failed to validate.
        if not tag_name:
            # Return any non-empty string to avoid showing an error message for
            # the slug field.
            return "slug"

        # Calculate the slug from the tag name.
        test_slug = slugify_tag_name(tag_name)

        # Get the actual slug provided to the form.
        slug = self.cleaned_data['slug']

        if slug != test_slug:
            msg = _("Tag slugs must be equal to the tag name, but replacing "
                    "with a hyphen the single or multiple occurrences of the "
                    "following characters: spaces, colons (:), hyphens (-), "
                    "underscores (_), slashes (/) or periods (.)!")
            raise forms.ValidationError(msg)

        if slug.startswith("goal-") and Goal.objects.filter(slug=slug):
            raise forms.ValidationError(_("A goal with this slug already "
                                          "exists."))

        # Always return the cleaned data, whether you have changed it or not.
        return slug


class GoalForm(forms.ModelForm):

    class Meta:
        model = Goal

    def __init__(self, *args, **kwargs):
        super(GoalForm, self).__init__(*args, **kwargs)
        help_text = _("Warning: Changing the name also changes the slug, so "
                      "it won't be possible to view this goal on this page!")
        self.fields['name'].help_text = help_text
        self.fields['slug'].widget = forms.HiddenInput()
        self.fields['slug'].label = ''  # Blank label to don't see it.

    def clean_name(self):
        name = check_name(self.cleaned_data['name'])
        check_goal_name(name)
        # Always return the cleaned data, whether you have changed it or not.
        return name

    def clean(self):
        cleaned_data = super(GoalForm, self).clean()
        goal_name = cleaned_data.get("name", "")

        if goal_name:
            # Create a slug from the goal name.
            cleaned_data["slug"] = slugify_tag_name(goal_name)

            # Remove errors for slug field, if any.
            try:
                self.errors.pop("slug")
            except KeyError:
                pass

        # Always return the full collection of cleaned data.
        return cleaned_data

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Goal'
        db.create_table('pootle_tagging_goal', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(unique=True, max_length=100)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=100)),
            ('description', self.gf('pootle.core.markup.fields.MarkupField')(blank=True)),
            ('priority', self.gf('django.db.models.fields.IntegerField')(default=10)),
            ('project_goal', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('directory', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['pootle_app.Directory'], unique=True)),
        ))
        db.send_create_signal('pootle_tagging', ['Goal'])

        # Adding model 'ItemWithGoal'
        db.create_table('pootle_tagging_itemwithgoal', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('object_id', self.gf('django.db.models.fields.IntegerField')(db_index=True)),
            ('content_type', self.gf('django.db.models.fields.related.ForeignKey')(related_name=u'pootle_tagging_itemwithgoal_tagged_items', to=orm['contenttypes.ContentType'])),
            ('tag', self.gf('django.db.models.fields.related.ForeignKey')(related_name='items_with_goal', to=orm['pootle_tagging.Goal'])),
        ))
        db.send_create_signal('pootle_tagging', ['ItemWithGoal'])


    def backwards(self, orm):
        # Deleting model 'Goal'
        db.delete_table('pootle_tagging_goal')

        # Deleting model 'ItemWithGoal'
        db.delete_table('pootle_tagging_itemwithgoal')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': "orm['pootle_tagging.Goal']"})
        }
    }

    complete_apps = ['pootle_tagging']
########NEW FILE########
__FILENAME__ = models
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013, 2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import re
from itertools import chain

from translate.filters.decorators import Category

from django.contrib.contenttypes.models import ContentType
from django.core.cache import cache
from django.core.urlresolvers import reverse
from django.db import models
from django.utils.encoding import iri_to_uri
from django.utils.translation import ugettext_lazy as _

from taggit.models import TagBase, GenericTaggedItemBase

from pootle.core.markup import get_markup_filter_name, MarkupField
from pootle.core.url_helpers import get_editor_filter, split_pootle_path
from pootle_app.models.signals import (post_file_upload, post_template_update,
                                       post_vc_update)
from pootle_misc.checks import category_names, check_names
from pootle_misc.checks import get_qualitychecks_by_category
from pootle_store.signals import translation_submitted
from pootle_store.util import OBSOLETE, suggestions_sum

from .decorators import get_from_cache_for_path


def slugify_tag_name(tag_name):
    """Convert the given tag name to a slug."""
    # Replace invalid characters for slug with hyphens.
    slug = re.sub(r'[^a-z0-9-]', "-", tag_name.lower())

    # Replace groups of hyphens with a single hyphen.
    slug = re.sub(r'-{2,}', "-", slug)

    # Remove leading and trailing hyphens.
    return slug.strip("-")


class Goal(TagBase):
    """Goal is a tag with a priority.

    Also it might be used to set shared goals across a translation project, for
    example a goal with all the files that must focus first their effor on all
    the translators (independently of the language they are translating to).

    It inherits from TagBase instead of Tag because that way it is possible to
    reduce the number of DB queries.
    """
    description = MarkupField(
        verbose_name=_("Description"),
        blank=True,
        help_text=_('A description of this goal. This is useful to give more '
                    'information or instructions. Allowed markup: %s',
                    get_markup_filter_name()),
    )

    # Priority goes from 1 to 10, being 1 the greater and 10 the lower.
    priority = models.IntegerField(
        verbose_name=_("Priority"),
        default=10,
        help_text=_("The priority for this goal."),
    )

    # Tells if the goal is going to be shared across a project. This might be
    # seen as a 'virtual goal' because it doesn't apply to any real TP, but to
    # the templates one.
    project_goal = models.BooleanField(
        verbose_name=_("Project goal?"),
        default=False,
        help_text=_("Designates that this is a project goal (shared across "
                    "all languages in the project)."),
    )

    # Necessary for assigning and checking permissions.
    directory = models.OneToOneField(
        'pootle_app.Directory',
         db_index=True,
         editable=False,
    )

    CACHED_FUNCTIONS = ["get_raw_stats_for_path"]

    class Meta:
        ordering = ["priority"]

    ############################ Properties ###################################

    @property
    def pootle_path(self):
        return "/goals/" + self.slug + "/"

    @property
    def goal_name(self):
        """Return the goal name, i.e. the name without the 'goal:' prefix.

        If this is a project goal, then is appended a text indicating that.
        """
        if self.project_goal:
            return "%s %s" % (self.name[5:], _("(Project goal)"))
        else:
            return self.name[5:]

    ############################ Methods ######################################

    @classmethod
    def get_goals_for_path(cls, pootle_path):
        """Return the goals applied to the stores in this path.

        If this is not the 'templates' translation project for the project then
        also return the 'project goals' applied to the stores in the
        'templates' translation project.

        :param pootle_path: A string with a valid pootle path.
        """
        # Putting the next imports at the top of the file causes circular
        # import issues.
        from pootle_app.models.directory import Directory
        from pootle_store.models import Store

        directory = Directory.objects.get(pootle_path=pootle_path)
        stores_pks = directory.stores.values_list("pk", flat=True)
        criteria = {
            'items_with_goal__content_type': ContentType.objects \
                                                        .get_for_model(Store),
            'items_with_goal__object_id__in': stores_pks,
        }
        try:
            tp = directory.translation_project
        except:
            return []

        if tp.is_template_project:
            # Return the 'project goals' applied to stores in this path.
            return cls.objects.filter(**criteria) \
                              .order_by('project_goal', 'priority').distinct()
        else:
            # Get the 'non-project goals' (aka regular goals) applied to stores
            # in this path.
            criteria['project_goal'] = False
            regular_goals = cls.objects.filter(**criteria).distinct()

            # Now get the 'project goals' applied to stores in the 'templates'
            # TP for this TP's project.
            template_tp = tp.project.get_template_translationproject()

            if template_tp is None:  # If this project has no 'templates' TP.
                project_goals = cls.objects.none()
            else:
                tpl_dir_path = "/%s/%s" % (template_tp.language.code,
                                           pootle_path.split("/", 2)[-1])
                try:
                    tpl_dir = Directory.objects.get(pootle_path=tpl_dir_path)
                except Directory.DoesNotExist:
                    project_goals = cls.objects.none()
                else:
                    tpl_stores_pks =  tpl_dir.stores.values_list('pk',
                                                                 flat=True)
                    criteria.update({
                        'project_goal': True,
                        'items_with_goal__object_id__in': tpl_stores_pks,
                    })
                    project_goals = cls.objects.filter(**criteria).distinct()

            return list(chain(regular_goals, project_goals))

    @classmethod
    def get_trail_for_path(cls, pootle_path):
        """Return a list with the trail for the given path.

        If the pootle path does not exist, then an empty list is returned.

        The trail is all the directories that correspond to the given pootle
        path, plus the Translation project where the given pootle path is. For
        example for the pootle path /ru/firefoxos/add-ons/dropbox/nvda.po the
        following trail is returned:

        * Translation project object for /ru/firefoxos/
        * Directory object for /ru/firefoxos/add-ons/
        * Directory object for /ru/firefoxos/add-ons/dropbox/

        Note that no object for the store is included in the returned trail.

        :param pootle_path: A string with a valid pootle path.
        """
        # Putting the next import at the top of the file causes circular import
        # issues.
        from pootle_store.models import Store

        try:
            path_obj = Store.objects.get(pootle_path=pootle_path)
        except Store.DoesNotExist:
            # Putting the next import at the top of the file causes circular
            # import issues.
            from pootle_app.models.directory import Directory

            try:
                path_obj = Directory.objects.get(pootle_path=pootle_path)
            except Directory.DoesNotExist:
                # If it is not possible to retrieve any path_obj for the
                # provided pootle_path, then abort.
                return []

        if isinstance(path_obj, Store):
            path_dir = path_obj.parent
        else:  # Else it is a directory.
            path_dir = path_obj

        # Note: Not including path_obj (if it is a store) in path_objs since we
        # still don't support including units in a goal.
        path_objs = chain([path_obj.translation_project], path_dir.trail())

        return path_objs

    @classmethod
    def get_most_important_incomplete_for_path(cls, path_obj):
        """Return the most important incomplete goal for this path or None.

        If this is not the 'templates' translation project for the project then
        also considers the 'project goals' applied to the stores in the
        'templates' translation project.

        The most important goal is the one with the lowest priority, or if more
        than a goal have the lower priority then the alphabetical order is
        taken in account.

        :param path_obj: A pootle path object.
        """
        most_important = None
        for goal in cls.get_goals_for_path(path_obj.pootle_path):
            if (most_important is None or
                goal.priority < most_important.priority or
                (goal.priority == most_important.priority and
                 goal.name < most_important.name)):
                if goal.get_incomplete_words_in_path(path_obj):
                    most_important = goal

        return most_important

    @classmethod
    def flush_all_caches_in_tp(cls, translation_project):
        """Remove the cache for all the goals in the given translation project.

        :param translation_project: An instance of :class:`TranslationProject`.
        """
        pootle_path = translation_project.pootle_path
        keys = set()

        for goal in cls.get_goals_for_path(pootle_path):
            for store in goal.get_stores_for_path(pootle_path):
                for path_obj in store.parent.trail():
                    for function_name in cls.CACHED_FUNCTIONS:
                        keys.add(iri_to_uri(goal.pootle_path + ":" +
                                            path_obj.pootle_path + ":" +
                                            function_name))

            for function_name in cls.CACHED_FUNCTIONS:
                keys.add(iri_to_uri(goal.pootle_path + ":" + pootle_path +
                                    ":" + function_name))
        cache.delete_many(list(keys))

    @classmethod
    def flush_all_caches_for_path(cls, pootle_path):
        """Remove the cache for all the goals in the given path and upper
        directories.

        The cache is deleted for the given path, for the directories between
        the given path and the translation project, and for the translation
        project itself.

        :param pootle_path: A string with a valid pootle path.
        """
        # Get all the affected objects just once, to avoid querying the
        # database all the time if there are too many objects involved.
        affected_trail = cls.get_trail_for_path(pootle_path)

        if not affected_trail:
            return

        affected_goals = cls.get_goals_for_path(pootle_path)

        keys = []
        for goal in affected_goals:
            for path_obj in affected_trail:
                for function_name in cls.CACHED_FUNCTIONS:
                    keys.append(iri_to_uri(goal.pootle_path + ":" +
                                           path_obj.pootle_path + ":" +
                                           function_name))
        cache.delete_many(keys)

    def save(self, *args, **kwargs):
        # Putting the next import at the top of the file causes circular import
        # issues.
        from pootle_app.models.directory import Directory

        self.directory = Directory.objects.goals.get_or_make_subdir(self.slug)
        super(Goal, self).save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        directory = self.directory
        super(Goal, self).delete(*args, **kwargs)
        directory.delete()

    def get_translate_url_for_path(self, pootle_path, **kwargs):
        """Return this goal's translate URL for the given path.

        :param pootle_path: A string with a valid pootle path.
        """
        lang, proj, dir_path, fn = split_pootle_path(pootle_path)
        return u''.join([
            reverse('pootle-tp-translate', args=[lang, proj, dir_path, fn]),
            get_editor_filter(goal=self.slug, **kwargs),
        ])

    def get_critical_url_for_path(self, pootle_path, **kwargs):
        """Return this goal's translate URL for critical checks failures in the
        given path.

        :param pootle_path: A string with a valid pootle path.
        """
        critical = ','.join(get_qualitychecks_by_category(Category.CRITICAL))
        return self.get_translate_url_for_path(pootle_path, check=critical)

    def get_drill_down_url_for_path(self, pootle_path):
        """Return this goal's drill down URL for the given path.

        :param pootle_path: A string with a valid pootle path.
        """
        lang, proj, dir_path, filename = split_pootle_path(pootle_path)
        reverse_args = [lang, proj, self.slug, dir_path, filename]
        return reverse('pootle-tp-goal-drill-down', args=reverse_args)

    def get_stores_for_path(self, pootle_path):
        """Return the stores for this goal in the given pootle path.

        If this is a project goal then the corresponding stores in the path to
        that ones in the 'templates' TP for this goal are returned instead.

        :param pootle_path: A string with a valid pootle path.
        """
        # Putting the next imports at the top of the file causes circular
        # import issues.
        from pootle_store.models import Store
        from pootle_translationproject.models import TranslationProject

        lang, proj, dir_path, filename = split_pootle_path(pootle_path)

        # Get the translation project for this pootle_path.
        try:
            tp = TranslationProject.objects.get(language__code=lang,
                                                project__code=proj)
        except TranslationProject.DoesNotExist:
            return Store.objects.none()

        if self.project_goal and not tp.is_template_project:
            # Get the stores for this goal that are in the 'templates' TP.
            templates_tp = tp.project.get_template_translationproject()

            if templates_tp is None:
                return Store.objects.none()
            else:
                path_in_templates = (templates_tp.pootle_path + dir_path +
                                     filename)
                lookups = {
                    'pootle_path__startswith': path_in_templates,
                    'goals__in': [self],
                }
                template_stores_in_goal = Store.objects.filter(**lookups)

                # Putting the next imports at the top of the file causes circular
                # import issues.
                if tp.file_style == 'gnu':
                    from pootle_app.project_tree import (
                        get_translated_name_gnu as get_translated_name)
                else:
                    from pootle_app.project_tree import get_translated_name

                # Get the pootle path for the corresponding stores in the given
                # TP for those stores in the 'templates' TP.
                criteria = {
                    'pootle_path__in': [get_translated_name(tp, store)[0]
                                        for store in template_stores_in_goal],
                }
        else:
            # This is a regular goal or the given TP is the 'templates' TP, so
            # just retrieve the goal stores on this TP.
            criteria = {
                'pootle_path__startswith': pootle_path,
                'goals__in': [self],
            }

        # Return the stores.
        return Store.objects.filter(**criteria)

    def get_children_for_path(self, pootle_path):
        """Return this goal stores and subdirectories in the given directory.

        The subdirectories returned are the ones that have any store for this
        goal just below them, or in any of its subdirectories.

        If this is a project goal then are returned instead:

        * The stores in the given directory that correspond to the goal stores
          in the corresponding directory in the 'templates' TP,
        * The subdirectories in the given directory that have stores that
          correspond to goal stores in the 'templates' TP.

        :param pootle_path: The pootle path for a :class:`Directory` instance.
        :return: Tuple with a stores list and a directories queryset.
        """
        # Putting the next import at the top of the file causes circular import
        # issues.
        from pootle_app.models.directory import Directory

        stores_in_dir = []
        subdir_paths = set()

        stores_for_path = self.get_stores_for_path(pootle_path)

        # Put apart the stores that are just below the directory from those
        # that are in subdirectories inside directory.
        for store in stores_for_path:
            trailing_path = store.pootle_path[len(pootle_path):]

            if "/" in trailing_path:
                # Store is in a subdirectory.
                subdir_name = trailing_path.split("/")[0] + "/"
                subdir_paths.add(pootle_path + subdir_name)
            else:
                # Store is in the directory.
                stores_in_dir.append(store)

        # Get the subdirectories that have stores for this goal.
        subdirs_in_dir = Directory.objects.filter(pootle_path__in=subdir_paths)

        # Return a tuple with stores and subdirectories in the given directory.
        return (stores_in_dir, subdirs_in_dir)

    def slugify(self, tag, i=None):
        return slugify_tag_name(tag)

    def get_incomplete_words_in_path(self, path_obj):
        """Return the number of incomplete words for this goal in the path.

        :param path_obj: A pootle path object.
        """
        total = path_obj.get_total_wordcount()
        translated = path_obj.get_translated_wordcount()
        return total - translated


class ItemWithGoal(GenericTaggedItemBase):
    """Item that relates a Goal and an item with that goal."""
    # Set the custom 'Tag' model, which is 'Goal', to use as tag.
    tag = models.ForeignKey(Goal, related_name="items_with_goal")

    class Meta:
        verbose_name = "Item with goal"
        verbose_name_plural = "Items with goal"


################################ Signal handlers ##############################

def flush_goal_caches_for_unit(sender, unit, **kwargs):
    """Flush all goals caches for the store that holds the unit.

    This signal handler is called, for example, when a new translation is sent
    or a suggestion is accepted.
    """
    pootle_path = unit.store.parent.pootle_path
    Goal.flush_all_caches_for_path(pootle_path)


translation_submitted.connect(flush_goal_caches_for_unit)


def flush_goal_caches(sender, **kwargs):
    """Flush all goals caches for sender if a signal is received.

    This signal handler is called, for example, when the TP is updated against
    the templates, or a new file is uploaded, or the TP is updated from VCS.
    """
    # Not all signals has stats args, so we check their presence first.
    if 'oldstats' in kwargs and kwargs['oldstats'] == kwargs['newstats']:
        # Nothing changed, no need to flush goal cached stats.
        return
    else:
        #FIXME: It is too radical to remove all the caches even if just one
        # file was uploaded. Look at a more surgical way to perform this.
        Goal.flush_all_caches_in_tp(sender)


post_file_upload.connect(flush_goal_caches)
post_template_update.connect(flush_goal_caches)
post_vc_update.connect(flush_goal_caches)

########NEW FILE########
__FILENAME__ = goal_tags
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import template
from django.utils.safestring import mark_safe

from ..models import Goal


register = template.Library()


@register.filter
def goal_trail(path_obj, goal=None):
    """Outputs an HTML-formatted directory/store trail on goal drilldown.

    :param path_obj: A :cls:`pootle_app.models.Directory` or
                     :cls:`pootle_store.models.Store` object.
                     In case `path_obj` is a store, it will be built based on
                     its parent directory.
    :param goal_slug: A :cls:`pootle_tagging.models.Goal` object.
    """
    trail_list = []
    sep = u' / '

    if goal is None:
        return mark_safe(sep.join(trail_list))

    is_store = not path_obj.is_dir
    directory = is_store and path_obj.parent or path_obj
    dir_trail = directory.trail()

    for i, trail_dir in enumerate(dir_trail):
        if is_store or i != (len(dir_trail) - 1):
            tr = u'<span><a href="%(url)s">%(dir_name)s</a></span>' % {
                'url': goal.get_drill_down_url_for_path(trail_dir.pootle_path),
                'dir_name': trail_dir.name,
            }
        else:
            tr = u'<span>%(dir_name)s</span>' % {
                'dir_name': trail_dir.name,
            }
        trail_list.append(tr)

    if is_store:
        tr = u'<span>%(file_name)s</span>' % {
            'file_name': path_obj.name,
        }
        trail_list.append(tr)

    return mark_safe(sep.join(trail_list))

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url


urlpatterns = patterns('pootle_tagging.views',

    # XHR views
    url(r'^(?P<goal_slug>[a-z0-9-]+)/edit/$',
        'ajax_edit_goal',
        name='pootle-xhr-edit-goal'),
)

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse
from django.http import HttpResponse
from django.template import loader, RequestContext
from django.views.decorators.http import require_POST

from pootle.core.decorators import get_path_obj, permission_required
from pootle_misc.util import ajax_required, jsonify

from .decorators import get_goal, require_goal
from .forms import GoalForm


@require_POST
@ajax_required
@get_path_obj
@get_goal
@require_goal
@permission_required('administrate')
def ajax_edit_goal(request, goal, path_obj):
    """Edit a goal through a form using AJAX."""

    form = GoalForm(request.POST, instance=goal)
    response = {}
    rcode = 400

    if form.is_valid():
        form.save()
        rcode = 200

        if goal.description:
            response["description"] = goal.description
        else:
            response["description"] = (u'<p class="placeholder muted">%s</p>' %
                                       _(u"No description yet."))
    ctx = {
        'form': form,
        'form_action': reverse('pootle-xhr-edit-goal', args=[goal.slug]),
    }
    t = loader.get_template('admin/_settings_form.html')
    c = RequestContext(request, ctx)
    response['form'] = t.render(c)

    return HttpResponse(jsonify(response), status=rcode,
                        mimetype="application/json")

########NEW FILE########
__FILENAME__ = terminology_tags
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import template


register = template.Library()


@register.inclusion_tag('translation_projects/terminology/_term_edit.html',
                        takes_context=True)
def render_term_edit(context, form):
    template_vars = {
        'unit': form.instance,
        'form': form,
        'language': context['language'],
        'source_language': context['source_language'],
    }
    return template_vars

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url


urlpatterns = patterns('pootle_terminology.views',
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)'
        r'/terminology/extract/$',
        'extract',
        name='pootle-terminology-extract'),
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/terminology/',
        'manage',
        name='pootle-terminology-manage'),
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/(?P<path>.*?)'
        r'/terminology/',
        'manage',
        name='pootle-terminology-manage-store'),
)

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.core.urlresolvers import reverse
from django.db.transaction import commit_on_success
from django.shortcuts import get_object_or_404, redirect, render
from django.utils.translation import ugettext as _

from pootle.core.decorators import get_path_obj, permission_required
from pootle.core.url_helpers import split_pootle_path
from pootle_app.views.admin import util
from pootle_store.models import Store, Unit, PARSED, LOCKED


def create_termunit(term, unit, targets, locations, sourcenotes, transnotes,
                    filecounts):
    termunit = Unit()
    termunit.source = term
    termunit.setid(term)

    if unit is not None:
        termunit.merge(unit)

    termunit.pending_suggestions = []

    for target in targets.keys():
        if target != termunit.target:
            termunit.pending_suggestions.append(target)

    for location in locations:
        termunit.addlocation(location)

    for sourcenote in sourcenotes:
        termunit.addnote(sourcenote, "developer")

    for filename, count in filecounts.iteritems():
        termunit.addnote('(poterminology) %s (%d)\n' % (filename, count),
                         'translator')

    return termunit


def get_terminology_filename(translation_project):
    try:
        # See if a terminology store already exists.
        return translation_project.stores.filter(
            name__startswith='pootle-terminology.',
        ).values_list('name', flat=True)[0]
    except IndexError:
        pass
    if translation_project.project.is_monolingual:
        # Terminology is a virtual store, so extension is not really important
        # but to avoid confusion we will not use monolingual extensions.
        return 'pootle-terminology.po'
    return 'pootle-terminology.' + translation_project.project.localfiletype


@commit_on_success
@get_path_obj
@permission_required('administrate')
def extract(request, translation_project):
    """Generate glossary of common keywords and phrases from translation
    project.
    """
    ctx = {
        'page': 'admin-terminology',

        'translation_project': translation_project,
        'language': translation_project.language,
        'project': translation_project.project,
        'directory': translation_project.directory,
    }

    if request.method == 'POST' and request.POST['extract']:
        from translate.tools.poterminology import TerminologyExtractor
        extractor = TerminologyExtractor(
            accelchars=translation_project.checker.config.accelmarkers,
            sourcelanguage=str(translation_project.project.source_language.code)
        )

        for store in translation_project.stores.iterator():
            if store.is_terminology:
                continue
            extractor.processunits(store.units, store.pootle_path)

        terms = extractor.extract_terms(create_termunit=create_termunit)
        termunits = extractor.filter_terms(terms, nonstopmin=2)

        store, created = Store.objects.get_or_create(
            parent=translation_project.directory,
            translation_project=translation_project,
            name=get_terminology_filename(translation_project),
        )

        # Lock file.
        oldstate = store.state
        store.state = LOCKED
        store.save()

        if not created:
            store.units.delete()

        # Calculate maximum terms.
        maxunits = int(translation_project.get_total_wordcount() * 0.02)
        maxunits = min(max(settings.MIN_AUTOTERMS, maxunits),
                       settings.MAX_AUTOTERMS)
        for index, (score, unit) in enumerate(termunits[:maxunits]):
            unit.store = store
            unit.index = index
            #FIXME: what to do with score?
            unit.save()
            for suggestion in unit.pending_suggestions:
                # Touch=True which saves unit on every call.
                unit.add_suggestion(suggestion)

        # Unlock file.
        store.state = oldstate
        if store.state < PARSED:
            store.state = PARSED
        store.save()

        ctx.update({
            'store': store,
            'termcount': len(termunits),
        })

        path_args = split_pootle_path(translation_project.pootle_path)[:2]
        return redirect(reverse('pootle-terminology-manage', args=path_args))

    return render(request, "translation_projects/terminology/extract.html", ctx)


def manage_store(request, ctx, language, term_store):
    from django import forms
    from pootle_store.forms import unit_form_factory
    unit_form_class = unit_form_factory(language)

    # XXX: Review this
    # HACKISH: Django won't allow excluding form fields already defined in
    # the parent class, manually extra fields.
    del(unit_form_class.base_fields['target_f'])
    del(unit_form_class.base_fields['id'])
    del(unit_form_class.base_fields['state'])
    del(unit_form_class.declared_fields['target_f'])
    del(unit_form_class.declared_fields['id'])
    del(unit_form_class.declared_fields['state'])

    class TermUnitForm(unit_form_class):
        # Set store for new terms.
        qs = Store.objects.filter(pk=term_store.pk)
        store = forms.ModelChoiceField(queryset=qs, initial=term_store.pk,
                                       widget=forms.HiddenInput)
        index = forms.IntegerField(required=False, widget=forms.HiddenInput)

        def clean_index(self):
            # Assign new terms an index value.
            value = self.cleaned_data['index']

            if self.instance.id is None:
                value = term_store.max_index() + 1
            return value

        def clean_source_f(self):
            value = super(TermUnitForm, self).clean_source_f()

            if value:
                existing = term_store.findid(value[0])

                if existing and existing.id != self.instance.id:
                    raise forms.ValidationError(_('This term already exists '
                                                  'in this file.'))
                self.instance.setid(value[0])

            return value

    #TODO 'submitted_by' and 'commented_by' had to be excluded in order to get
    # terminology editing working. When the schema can be changed again this
    # exclusion should be removed and change the schema accordingly.
    excluded_fields = ['state', 'target_f', 'id', 'translator_comment',
                       'submitted_by', 'commented_by']
    template_name = 'translation_projects/terminology/manage.html'

    return util.edit(request, template_name, Unit, ctx,
                     None, None, queryset=term_store.units, can_delete=True,
                     form=TermUnitForm, exclude=excluded_fields)


@get_path_obj
@permission_required('administrate')
def manage(request, translation_project, path=None):
    ctx = {
        'page': 'admin-terminology',

        'translation_project': translation_project,
        'language': translation_project.language,
        'project': translation_project.project,
        'source_language': translation_project.project.source_language,
        'directory': translation_project.directory,
    }

    if translation_project.project.is_terminology:
        if path:
            pootle_path = translation_project.pootle_path + path
            store = get_object_or_404(Store, pootle_path=pootle_path)
            return manage_store(request, ctx, ctx['language'], store)

        # Which file should we edit?
        stores = list(Store.objects.filter(
            translation_project=translation_project,
        ))
        if len(stores) == 1:
            # There is only one, and we're not going to offer file-level
            # activities, so let's just edit the one that is there.
            return manage_store(request, ctx, ctx['language'], stores[0])
        elif len(stores) > 1:
            for store in stores:
                path_length = len(translation_project.pootle_path)
                store.nice_name = store.pootle_path[path_length:]

            ctx['stores'] = stores
            return render(request, "translation_projects/terminology/stores.html", ctx)

    try:
        terminology_filename = get_terminology_filename(translation_project)
        term_store = Store.objects.get(
            pootle_path=translation_project.pootle_path + terminology_filename,
        )
        return manage_store(request, ctx, ctx['language'], term_store)
    except Store.DoesNotExist:
        return render(request, "translation_projects/terminology/manage.html", ctx)

########NEW FILE########
__FILENAME__ = actions
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

"""Actions available for the translation project overview page."""

from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _

from pootle.core.url_helpers import split_pootle_path
from pootle_app.models.permissions import check_permission
from pootle_misc.versioncontrol import hasversioning
from pootle.scripts import actions


def directory(fn):
    """Decorator that returns links only for directory objects."""
    def wrapper(request, path_obj, **kwargs):
        if not path_obj.is_dir:
            return

        return fn(request, path_obj)

    return wrapper


def store(fn):
    """Decorator that returns links only for store objects."""
    def wrapper(request, path_obj, **kwargs):
        if path_obj.is_dir:
            return

        return fn(request, path_obj)

    return wrapper


@directory
def download_zip(request, path_obj, **kwargs):
    if check_permission('archive', request):
        if not path_obj.is_dir:
            path_obj = path_obj.parent

        language_code = path_obj.translation_project.language.code
        project_code = path_obj.translation_project.project.code

        text = _('Download (.zip)')
        link = reverse('pootle-tp-export-zip',
                       args=[language_code, project_code, path_obj.path])

        return {
            'icon': 'icon-download',
            'href': link,
            'text': text,
        }


@store
def download_source(request, path_obj, **kwargs):
    href = None
    if path_obj.name.startswith("pootle-terminology"):
        text = _("Download XLIFF")
        tooltip = _("Download file in XLIFF format")
        href = reverse('pootle-store-export-xliff',
                       args=[path_obj.pootle_path])
    elif path_obj.translation_project.project.is_monolingual:
        text = _('Export')
        tooltip = _('Export translations')
    else:
        text = _('Download')
        tooltip = _('Download file')

    return {
        'icon': 'icon-download',
        'href': href or reverse('pootle-store-download',
                                args=[path_obj.pootle_path]),
        'text': text,
        'tooltip': tooltip,
    }


@store
def download_xliff(request, path_obj):
    if path_obj.translation_project.project.localfiletype == 'xlf':
        return
    if path_obj.name.startswith("pootle-terminology"):
        return

    text = _("Download XLIFF")
    tooltip = _('Download XLIFF file for offline translation')
    href = reverse('pootle-store-export-xliff', args=[path_obj.pootle_path])

    return {
        'icon': 'icon-download',
        'href': href,
        'text': text,
        'tooltip': tooltip,
    }


def upload_zip(request, path_obj, **kwargs):
    if (check_permission('translate', request) or
        check_permission('suggest', request) or
        check_permission('overwrite', request)):
        text = _('Upload')
        tooltip = _('Upload translation files or archives in .zip format')
        link = '#upload'

        return {
            'icon': 'icon-upload',
            'class': 'js-popup-inline',
            'href': link,
            'text': text,
            'tooltip': tooltip,
        }


@store
def update_from_vcs(request, path_obj, **kwargs):
    if (path_obj.abs_real_path and check_permission('commit', request) and
        hasversioning(path_obj.abs_real_path)):
        link = reverse('pootle-vcs-update',
                       args=split_pootle_path(path_obj.pootle_path))
        text = _('Update from VCS')

        return {
            'icon': 'icon-vcs-update',
            'href': link,
            'text': text,
        }


@store
def commit_to_vcs(request, path_obj, **kwargs):
    if (path_obj.abs_real_path and check_permission('commit', request) and
        hasversioning(path_obj.abs_real_path)):
        link = reverse('pootle-vcs-commit',
                       args=split_pootle_path(path_obj.pootle_path))
        text = _('Commit to VCS')

        return {
            'icon': 'icon-vcs-commit',
            'href': link,
            'text': text,
        }


@directory
def update_dir_from_vcs(request, path_obj, **kwargs):
    if (path_obj.get_real_path() and check_permission('commit', request) and
            hasversioning(path_obj.get_real_path())):
        link = reverse('pootle-vcs-update',
                       args=split_pootle_path(path_obj.pootle_path))
        # Translators: "all" here refers to all files and sub directories in a directory/project.
        text = _('Update all from VCS')

        return {
            'icon': 'icon-vcs-update',
            'href': link,
            'text': text,
        }


@directory
def commit_dir_to_vcs(request, path_obj, **kwargs):
    if (path_obj.get_real_path() and check_permission('commit', request) and
            hasversioning(path_obj.get_real_path())):
        link = reverse('pootle-vcs-commit',
                       args=split_pootle_path(path_obj.pootle_path))
        # Translators: "all" here refers to all files and sub directories in a directory/project.
        text = _('Commit all to VCS')

        return {
            'icon': 'icon-vcs-commit',
            'href': link,
            'text': text,
        }


def rescan_project_files(request, path_obj, **kwargs):
    if check_permission('administrate', request):
        tp = path_obj.translation_project
        link = reverse('pootle-tp-rescan',
                       args=[tp.language.code, tp.project.code])
        text = _("Rescan project files")

        return {
            'icon': 'icon-rescan-files',
            'href': link,
            'text': text,
        }


def update_against_templates(request, path_obj, **kwargs):
    if check_permission('administrate', request):
        tp = path_obj.translation_project
        link = reverse('pootle-tp-update-against-templates',
                       args=[tp.language.code, tp.project.code])
        text = _("Update against templates")

        return {
            'icon': 'icon-update-templates',
            'href': link,
            'text': text,
        }


def delete_path_obj(request, path_obj, **kwargs):
    if check_permission('administrate', request):
        tp = path_obj.translation_project
        link = reverse('pootle-tp-delete-path-obj',
                       args=[tp.language.code, tp.project.code, request.path])

        if path_obj.is_dir:
            text = _("Delete this folder...")
        else:
            text = _("Delete this file...")

        return {
            'icon': 'icon-delete-path',
            'class': 'js-overview-actions-delete-path',
            'href': link,
            'text': text,
        }


def _gen_link_list(request, path_obj, link_funcs, **kwargs):
    """Generates a list of links based on :param:`link_funcs`."""
    links = []

    for link_func in link_funcs:
        link = link_func(request, path_obj, **kwargs)

        if link is not None:
            links.append(link)

    return links


def action_groups(request, path_obj, **kwargs):
    """Returns a list of action links grouped for the overview page.

    :param request: A :class:`~django.http.HttpRequest` object.
    :param path_obj: A :class:`~pootle_app.models.Directory` or
        :class:`~pootle_app.models.Store` object.
    :param kwargs: Extra keyword arguments passed to the underlying functions.
    """
    action_groups = []

    groups = [
        {'group': 'translate-offline', 'group_display': _("Translate offline"),
         'actions': [download_source, download_xliff,
                     download_zip, upload_zip]},
        {'group': 'manage', 'group_display': _("Manage"),
         'actions': [update_from_vcs, commit_to_vcs, update_dir_from_vcs,
                     commit_dir_to_vcs, rescan_project_files,
                     update_against_templates, delete_path_obj,
                    ]
        },
    ]

    if path_obj.is_dir:
        act = actions.TranslationProjectAction
    else:
        act = actions.StoreAction

    for ext in act.instances():
        if ext.is_active(request):
            group = ext.category.lower().replace(' ', '-')
            for grp in groups:
                if grp['group'] == group:
                    grp['actions'].append(ext.get_link_func())
                    break
            else:
                groups.append({'group': group, 'group_display': _(ext.category),
                               'actions': [ext.get_link_func()]})

    for group in groups:
        action_links = _gen_link_list(request, path_obj, group['actions'],
                                      **kwargs)

        if action_links:
            group['actions'] = action_links
            action_groups.append(group)

    return action_groups

########NEW FILE########
__FILENAME__ = api
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from tastypie import fields
from tastypie.authentication import BasicAuthentication
from tastypie.authorization import DjangoAuthorization

from pootle.core.api import StatisticsModelResource
from pootle_store.api import StoreResource
from pootle_translationproject.models import TranslationProject


class TranslationProjectResource(StatisticsModelResource):
    language = fields.ForeignKey('pootle_language.api.LanguageResource',
                                 'language')
    project = fields.ForeignKey('pootle_project.api.ProjectResource',
                                'project')
    stores = fields.ToManyField(StoreResource, 'stores')

    class Meta:
        queryset = TranslationProject.objects.all()
        resource_name = 'translation-projects'
        fields = [
            'description',
            'language',
            'pootle_path',
            'project',
            'real_path',
            'stores',
        ]
        list_allowed_methods = ['post']
        # HTTP methods allowed for visiting /statistics/ URLs
        statistics_allowed_methods = ['get']
        authorization = DjangoAuthorization()
        authentication = BasicAuthentication()

    def retrieve_statistics(self, bundle):
        """Retrieve the statistics for the current resource object."""
        return bundle.obj.get_stats()

########NEW FILE########
__FILENAME__ = forms
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2010-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import forms
from django.utils.translation import ugettext as _

from pootle_app.models import Directory
from pootle_app.models.permissions import check_permission
from pootle_translationproject.models import TranslationProject


class DescriptionForm(forms.ModelForm):

    class Meta:
        model = TranslationProject
        fields = ("description",)


def upload_form_factory(request):
    translation_project = request.translation_project
    choices = []

    if check_permission('overwrite', request):
        choices.append(('overwrite', _("Overwrite the current file if it "
                                       "exists")))
    if check_permission('translate', request):
        choices.append(('merge', _("Merge the file with the current file and "
                                   "turn conflicts into suggestions")))
    if check_permission('suggest', request):
        choices.append(('suggest', _("Add all new translations as "
                                     "suggestions")))

    if check_permission('translate', request):
        initial = 'merge'
    else:
        initial = 'suggest'

    class StoreFormField(forms.ModelChoiceField):
        def label_from_instance(self, instance):
            return instance.pootle_path[len(request.pootle_path):]

    class DirectoryFormField(forms.ModelChoiceField):
        def label_from_instance(self, instance):
            return instance.pootle_path[len(translation_project.pootle_path):]

    class UploadForm(forms.Form):
        file = forms.FileField(required=True, label=_('File'))
        overwrite = forms.ChoiceField(
            required=True,
            widget=forms.RadioSelect,
            label='',
            choices=choices,
            initial=initial
        )
        upload_to = StoreFormField(
            required=False,
            label=_('Upload to'),
            queryset=translation_project.stores.filter(
                pootle_path__startswith=request.pootle_path),
            help_text=_("Optionally select the file you want to merge with. "
                        "If not specified, the uploaded file's name is used.")
        )
        upload_to_dir = DirectoryFormField(
            required=False,
            label=_('Upload to'),
            queryset=Directory.objects.filter(
                pootle_path__startswith=translation_project.pootle_path). \
                exclude(pk=translation_project.directory.pk),
            help_text=_("Optionally select the file you want to merge with. "
                        "If not specified, the uploaded file's name is used.")
        )

    return UploadForm

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'TranslationProject'
        db.create_table('pootle_app_translationproject', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('description', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('description_html', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('real_path', self.gf('django.db.models.fields.FilePathField')(max_length=100)),
            ('pootle_path', self.gf('django.db.models.fields.CharField')(unique=True, max_length=255, db_index=True)),
        ))
        db.send_create_signal('pootle_translationproject', ['TranslationProject'])

    def backwards(self, orm):
        # Removing unique constraint on 'TranslationProject', fields ['language', 'project']
        db.delete_unique('pootle_app_translationproject', ['language_id', 'project_id'])

        # Deleting model 'TranslationProject'
        db.delete_table('pootle_app_translationproject')

    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['pootle_translationproject']

########NEW FILE########
__FILENAME__ = 0002_auto__del_field_translationproject_description_html__chg_field_transla
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'TranslationProject.description_html'
        db.delete_column('pootle_app_translationproject', 'description_html')


        # Changing field 'TranslationProject.description'
        db.alter_column('pootle_app_translationproject', 'description', self.gf('pootle.core.markup.fields.MarkupField')())

    def backwards(self, orm):
        # Adding field 'TranslationProject.description_html'
        db.add_column('pootle_app_translationproject', 'description_html',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True),
                      keep_default=False)


        # Changing field 'TranslationProject.description'
        db.alter_column('pootle_app_translationproject', 'description', self.gf('django.db.models.fields.TextField')())

    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['pootle_translationproject']
########NEW FILE########
__FILENAME__ = 0003_add_m2ms
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models, connection


class Migration(SchemaMigration):

    def forwards(self, orm):
        cursor = connection.cursor()
        if "language_id" in [column[0] for column in connection.introspection.get_table_description(cursor, "pootle_app_translationproject")]:
            # skip the migration if it shouldnt be applied
            return

        # Adding field 'TranslationProject.language'
        db.add_column('pootle_app_translationproject', 'language',
                      self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['pootle_language.Language']),
                      keep_default=False)

        # Adding field 'TranslationProject.project'
        db.add_column('pootle_app_translationproject', 'project',
                      self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['pootle_project.Project']),
                      keep_default=False)

        # Adding field 'TranslationProject.directory'
        db.add_column('pootle_app_translationproject', 'directory',
                      self.gf('django.db.models.fields.related.OneToOneField')(null=True, to=orm['pootle_app.Directory'], unique=True),
                      keep_default=False)

        # Adding unique constraint on 'TranslationProject', fields ['language', 'project']
        db.create_unique('pootle_app_translationproject', ['language_id', 'project_id'])

    def backwards(self, orm):
        # Removing unique constraint on 'TranslationProject', fields ['language', 'project']
        db.delete_unique('pootle_app_translationproject', ['language_id', 'project_id'])

        # Deleting field 'TranslationProject.language'
        db.delete_column('pootle_app_translationproject', 'language')

        # Deleting field 'TranslationProject.project'
        db.delete_column('pootle_app_translationproject', 'project')

        # Deleting field 'TranslationProject.directory'
        db.delete_column('pootle_app_translationproject', 'directory')

    models = {
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_target': ('django.db.models.fields.CharField', [], {'max_length': '512', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['pootle_translationproject']

########NEW FILE########
__FILENAME__ = 0004_auto__add_field_translationproject_total_wordcount__add_field_translat
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'TranslationProject.total_wordcount'
        db.add_column('pootle_app_translationproject', 'total_wordcount',
                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
                      keep_default=False)

        # Adding field 'TranslationProject.translated_wordcount'
        db.add_column('pootle_app_translationproject', 'translated_wordcount',
                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
                      keep_default=False)

        # Adding field 'TranslationProject.fuzzy_wordcount'
        db.add_column('pootle_app_translationproject', 'fuzzy_wordcount',
                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
                      keep_default=False)

        # Adding field 'TranslationProject.suggestion_count'
        db.add_column('pootle_app_translationproject', 'suggestion_count',
                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'TranslationProject.total_wordcount'
        db.delete_column('pootle_app_translationproject', 'total_wordcount')

        # Deleting field 'TranslationProject.translated_wordcount'
        db.delete_column('pootle_app_translationproject', 'translated_wordcount')

        # Deleting field 'TranslationProject.fuzzy_wordcount'
        db.delete_column('pootle_app_translationproject', 'fuzzy_wordcount')

        # Deleting field 'TranslationProject.suggestion_count'
        db.delete_column('pootle_app_translationproject', 'suggestion_count')


    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        u'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': u"orm['pootle_tagging.Goal']"})
        },
        u'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fuzzy_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'}),
            'suggestion_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'total_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'})
        },
        u'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': u"orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_translationproject']
########NEW FILE########
__FILENAME__ = 0005_auto__add_field_translationproject_disabled
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'TranslationProject.disabled'
        db.add_column('pootle_app_translationproject', 'disabled',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'TranslationProject.disabled'
        db.delete_column('pootle_app_translationproject', 'disabled')


    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        u'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': u"orm['pootle_tagging.Goal']"})
        },
        u'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'fuzzy_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'}),
            'suggestion_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'total_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'})
        },
        u'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': u"orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_translationproject']
########NEW FILE########
__FILENAME__ = 0006_auto__add_field_translationproject_failing_critical_count
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'TranslationProject.failing_critical_count'
        db.add_column('pootle_app_translationproject', 'failing_critical_count',
                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'TranslationProject.failing_critical_count'
        db.delete_column('pootle_app_translationproject', 'failing_critical_count')


    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'pootle_app.directory': {
            'Meta': {'ordering': "['name']", 'object_name': 'Directory'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'child_dirs'", 'null': 'True', 'to': "orm['pootle_app.Directory']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
        },
        u'pootle_language.language': {
            'Meta': {'ordering': "['code']", 'object_name': 'Language', 'db_table': "'pootle_app_language'"},
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nplurals': ('django.db.models.fields.SmallIntegerField', [], {'default': '0'}),
            'pluralequation': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'specialchars': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'pootle_project.project': {
            'Meta': {'ordering': "['code']", 'object_name': 'Project', 'db_table': "'pootle_app_project'"},
            'checkstyle': ('django.db.models.fields.CharField', [], {'default': "'standard'", 'max_length': '50'}),
            'code': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'fullname': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ignoredfiles': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'localfiletype': ('django.db.models.fields.CharField', [], {'default': "'po'", 'max_length': '50'}),
            'report_email': ('django.db.models.fields.EmailField', [], {'max_length': '254', 'blank': 'True'}),
            'source_language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'treestyle': ('django.db.models.fields.CharField', [], {'default': "'auto'", 'max_length': '20'})
        },
        u'pootle_tagging.goal': {
            'Meta': {'ordering': "['priority']", 'object_name': 'Goal'},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '10'}),
            'project_goal': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'pootle_tagging.itemwithgoal': {
            'Meta': {'object_name': 'ItemWithGoal'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'pootle_tagging_itemwithgoal_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'items_with_goal'", 'to': u"orm['pootle_tagging.Goal']"})
        },
        u'pootle_translationproject.translationproject': {
            'Meta': {'unique_together': "(('language', 'project'),)", 'object_name': 'TranslationProject', 'db_table': "'pootle_app_translationproject'"},
            'description': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'directory': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['pootle_app.Directory']", 'unique': 'True'}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'failing_critical_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'fuzzy_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_language.Language']"}),
            'pootle_path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['pootle_project.Project']"}),
            'real_path': ('django.db.models.fields.FilePathField', [], {'max_length': '100'}),
            'suggestion_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'total_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'translated_wordcount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'})
        },
        u'taggit.tag': {
            'Meta': {'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '100'})
        },
        u'taggit.taggeditem': {
            'Meta': {'object_name': 'TaggedItem'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_tagged_items'", 'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'}),
            'tag': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "u'taggit_taggeditem_items'", 'to': u"orm['taggit.Tag']"})
        }
    }

    complete_apps = ['pootle_translationproject']
########NEW FILE########
__FILENAME__ = models
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import gettext
import logging
import os
from itertools import chain

from translate.misc.lru import LRUCachingDict
from translate.storage.base import ParseError

from django.conf import settings
from django.contrib import messages
from django.core.urlresolvers import reverse
from django.db import models, IntegrityError
from django.db.models import Q
from django.db.models.signals import post_save
from django.utils.encoding import force_unicode
from django.utils.functional import cached_property
from django.utils.translation import ugettext_lazy as _

from taggit.managers import TaggableManager

from pootle.core.managers import RelatedManager
from pootle.core.markup import get_markup_filter_name, MarkupField
from pootle.core.mixins import TreeItem
from pootle.core.url_helpers import get_editor_filter, split_pootle_path
from pootle_app.models.directory import Directory
from pootle_app.models.pootle_site import get_site_title
from pootle_language.models import Language
from pootle_misc.checks import excluded_filters
from pootle_misc.stats import stats_message_raw
from pootle_project.models import Project
from pootle_statistics.models import Submission
from pootle_store.models import (Store, Unit, PARSED)
from pootle_store.util import (absolute_real_path, relative_real_path,
                               OBSOLETE)
from pootle_tagging.models import ItemWithGoal


class TranslationProjectNonDBState(object):

    def __init__(self, parent):
        self.parent = parent

        # Terminology matcher
        self.termmatcher = None
        self.termmatchermtime = None

        self._indexing_enabled = True
        self._index_initialized = False
        self.indexer = None

def create_or_enable_translation_project(language, project):
    tp = create_translation_project(language, project)
    if tp is not None:
        if tp.disabled:
            tp.disabled = False
            tp.save()
            logging.info(u"Enabled %s", tp)
        else:
            logging.info(u"Created %s", tp)

def create_translation_project(language, project):
    from pootle_app import project_tree
    if project_tree.translation_project_should_exist(language, project):
        try:
            translation_project, created = TranslationProject.objects.all() \
                    .get_or_create(language=language, project=project)
            return translation_project
        except OSError:
            return None
        except IndexError:
            return None


def scan_translation_projects():
    for language in Language.objects.iterator():
        for project in Project.objects.iterator():
            create_translation_project(language, project)


class VersionControlError(Exception):
    pass


class TranslationProjectManager(RelatedManager):
    # disabled objects are hidden for related objects too
    use_for_related_fields = True

    def enabled(self):
        return self.filter(disabled=False)

    def disabled(self):
        return self.filter(Q(disabled=True) | Q(project__disabled=True))


class TranslationProject(models.Model, TreeItem):
    description = MarkupField(
        blank=True,
        help_text=_('A description of this translation project. This is '
                    'useful to give more information or instructions. Allowed '
                    'markup: %s', get_markup_filter_name()),
    )
    language = models.ForeignKey(Language, db_index=True)
    project = models.ForeignKey(Project, db_index=True)
    real_path = models.FilePathField(editable=False)
    directory = models.OneToOneField(Directory, db_index=True, editable=False)
    pootle_path = models.CharField(max_length=255, null=False, unique=True,
            db_index=True, editable=False)
    disabled = models.BooleanField(default=False)

    tags = TaggableManager(
        blank=True,
        verbose_name=_("Tags"),
        help_text=_("A comma-separated list of tags."),
    )
    goals = TaggableManager(
        blank=True,
        verbose_name=_("Goals"),
        through=ItemWithGoal,
        help_text=_("A comma-separated list of goals."),
    )

    # Cached Unit values
    total_wordcount = models.PositiveIntegerField(
        default=0,
        null=True,
        editable=False,
    )
    translated_wordcount = models.PositiveIntegerField(
        default=0,
        null=True,
        editable=False,
    )
    fuzzy_wordcount = models.PositiveIntegerField(
        default=0,
        null=True,
        editable=False,
    )
    suggestion_count = models.PositiveIntegerField(
        default=0,
        null=True,
        editable=False,
    )
    failing_critical_count = models.PositiveIntegerField(
        default=0,
        null=True,
        editable=False,
    )

    _non_db_state_cache = LRUCachingDict(settings.PARSE_POOL_SIZE,
                                         settings.PARSE_POOL_CULL_FREQUENCY)

    index_directory = ".translation_index"

    objects = TranslationProjectManager()

    class Meta:
        unique_together = ('language', 'project')
        db_table = 'pootle_app_translationproject'

    ############################ Properties ###################################

    @property
    def tag_like_objects(self):
        """Return the tag like objects applied to this translation project.

        Tag like objects can be either tags or goals.
        """
        return list(chain(self.tags.all().order_by("name"),
                          self.goals.all().order_by("name")))

    @property
    def name(self):
        # TODO: See if `self.fullname` can be removed
        return self.fullname

    @property
    def fullname(self):
        return "%s [%s]" % (self.project.fullname, self.language.name)

    @property
    def abs_real_path(self):
        return absolute_real_path(self.real_path)

    @abs_real_path.setter
    def abs_real_path(self, value):
        self.real_path = relative_real_path(value)

    @property
    def file_style(self):
        return self.project.get_treestyle()

    @property
    def checker(self):
        from translate.filters import checks
        checkerclasses = [checks.projectcheckers.get(self.project.checkstyle,
                                                     checks.StandardChecker),
                          checks.StandardUnitChecker]

        return checks.TeeChecker(checkerclasses=checkerclasses,
                                 excludefilters=excluded_filters,
                                 errorhandler=self.filtererrorhandler,
                                 languagecode=self.language.code)

    @property
    def non_db_state(self):
        if not hasattr(self, "_non_db_state"):
            try:
                self._non_db_state = self._non_db_state_cache[self.id]
            except KeyError:
                self._non_db_state = TranslationProjectNonDBState(self)
                self._non_db_state_cache[self.id] = \
                        TranslationProjectNonDBState(self)

        return self._non_db_state

    @property
    def units(self):
        self.require_units()
        # FIXME: we rely on implicit ordering defined in the model. We might
        # want to consider pootle_path as well
        return Unit.objects.filter(store__translation_project=self,
                                   state__gt=OBSOLETE).select_related('store')

    @property
    def is_terminology_project(self):
        return self.pootle_path.endswith('/terminology/')

    @property
    def is_template_project(self):
        return self == self.project.get_template_translationproject()

    @property
    def indexer(self):
        if (self.non_db_state.indexer is None and
            self.non_db_state._indexing_enabled):
            try:
                indexer = self.make_indexer()

                if not self.non_db_state._index_initialized:
                    self.init_index(indexer)
                    self.non_db_state._index_initialized = True

                self.non_db_state.indexer = indexer
            except Exception as e:
                logging.warning(u"Could not initialize indexer for %s in %s: "
                                u"%s", self.project.code, self.language.code,
                                str(e))
                self.non_db_state._indexing_enabled = False

        return self.non_db_state.indexer

    @property
    def has_index(self):
        return (self.non_db_state._indexing_enabled and
                (self.non_db_state._index_initialized or
                 self.indexer is not None))

    ############################ Cached properties ############################

    @cached_property
    def code(self):
        return u'-'.join([self.language.code, self.project.code])

    @cached_property
    def all_goals(self):
        # Putting the next import at the top of the file causes circular
        # import issues.
        from pootle_tagging.models import Goal

        return Goal.get_goals_for_path(self.pootle_path)

    ############################ Methods ######################################

    def __unicode__(self):
        return self.pootle_path

    def __init__(self, *args, **kwargs):
        super(TranslationProject, self).__init__(*args, **kwargs)

    def save(self, *args, **kwargs):
        created = self.id is None
        project_dir = self.project.get_real_path()

        if not self.disabled:
            from pootle_app.project_tree import get_translation_project_dir
            self.abs_real_path = get_translation_project_dir(self.language,
                    project_dir, self.file_style, make_dirs=True)
            self.directory = self.language.directory \
                                        .get_or_make_subdir(self.project.code)
            self.pootle_path = self.directory.pootle_path

        super(TranslationProject, self).save(*args, **kwargs)

        if created:
            self.scan_files()

    def delete(self, *args, **kwargs):
        directory = self.directory
        super(TranslationProject, self).delete(*args, **kwargs)
        #TODO: avoid an access to directory while flushing the cache
        directory.flush_cache()
        directory.delete()

    def get_absolute_url(self):
        lang, proj, dir, fn = split_pootle_path(self.pootle_path)
        return reverse('pootle-tp-overview', args=[lang, proj, dir, fn])

    def get_translate_url(self, **kwargs):
        lang, proj, dir, fn = split_pootle_path(self.pootle_path)
        return u''.join([
            reverse('pootle-tp-translate', args=[lang, proj, dir, fn]),
            get_editor_filter(**kwargs),
        ])

    def filtererrorhandler(self, functionname, str1, str2, e):
        logging.error(u"Error in filter %s: %r, %r, %s", functionname, str1,
                      str2, e)
        return False

    def is_accessible_by(self, user):
        """Returns `True` if the current translation project is accessible
        by `user`.
        """
        if user.is_superuser:
            return True

        return self.project.code in Project.accessible_by_user(user)

    def update(self):
        """Update all stores to reflect state on disk."""
        stores = self.stores.exclude(file='').filter(state__gte=PARSED)
        for store in stores.iterator():
            store.update(update_translation=True, update_structure=True)

    def sync(self, conservative=True, skip_missing=False, modified_since=0):
        """Sync unsaved work on all stores to disk."""
        stores = self.stores.exclude(file='').filter(state__gte=PARSED)
        for store in stores.iterator():
            store.sync(update_translation=True,
                       update_structure=not conservative,
                       conservative=conservative, create=False,
                       skip_missing=skip_missing,
                       modified_since=modified_since)

    def get_mtime(self):
        return self.directory.get_mtime()

    def require_units(self):
        """Makes sure all stores are parsed"""
        errors = 0
        for store in self.stores.filter(state__lt=PARSED).iterator():
            try:
                store.require_units()
            except IntegrityError:
                logging.info(u"Duplicate IDs in %s", store.abs_real_path)
                errors += 1
            except ParseError as e:
                logging.info(u"Failed to parse %s\n%s", store.abs_real_path, e)
                errors += 1
            except (IOError, OSError) as e:
                logging.info(u"Can't access %s\n%s", store.abs_real_path, e)
                errors += 1

        return errors

    ### TreeItem

    def get_children(self):
        return self.directory.get_children()

    def get_total_wordcount(self):
        return self.total_wordcount

    def get_translated_wordcount(self):
        return self.translated_wordcount

    def get_fuzzy_wordcount(self):
        return self.fuzzy_wordcount

    def get_suggestion_count(self):
        return self.suggestion_count

    def get_critical_error_unit_count(self):
        return self.failing_critical_count

    def _get_next_goal_count(self):
        # Putting the next import at the top of the file causes circular
        # import issues.
        from pootle_tagging.models import Goal

        goal = Goal.get_most_important_incomplete_for_path(self.directory)

        if goal is not None:
            return goal.get_incomplete_words_in_path(self.directory)

        return 0

    def get_next_goal_url(self):
        # Putting the next import at the top of the file causes circular
        # import issues.
        from pootle_tagging.models import Goal

        goal = Goal.get_most_important_incomplete_for_path(self.directory)

        if goal is not None:
            return goal.get_translate_url_for_path(self.directory.pootle_path,
                                                   state='incomplete')

        return ''

    def get_cachekey(self):
        return self.directory.pootle_path

    def get_parents(self):
        return [self.language, self.project]

    ### /TreeItem

    def update_against_templates(self, pootle_path=None):
        """Update translation project from templates."""

        if self.is_template_project:
            return

        template_translation_project = self.project \
                                           .get_template_translationproject()

        if (template_translation_project is None or
            template_translation_project == self):
            return

        monolingual = self.project.is_monolingual

        if not monolingual:
            self.sync()

        from pootle_app.project_tree import (convert_template,
                                             get_translated_name,
                                             get_translated_name_gnu)

        for store in template_translation_project.stores.iterator():
            if self.file_style == 'gnu':
                new_pootle_path, new_path = get_translated_name_gnu(self, store)
            else:
                new_pootle_path, new_path = get_translated_name(self, store)

            if pootle_path is not None and new_pootle_path != pootle_path:
                continue

            try:
                from pootle.scripts import hooks
                relative_po_path = os.path.relpath(new_path,
                                                   settings.PODIRECTORY)
                if not hooks.hook(self.project.code, "pretemplateupdate",
                                  relative_po_path):
                    continue
            except:
                # Assume hook is not present.
                pass

            convert_template(self, store, new_pootle_path, new_path,
                             monolingual)

        all_files, new_files = self.scan_files(vcs_sync=False)

        from pootle_misc import versioncontrol
        project_path = self.project.get_real_path()

        if new_files and versioncontrol.hasversioning(project_path):
            from pootle.scripts import hooks

            message = ("New files added from %s based on templates" %
                       get_site_title())

            filestocommit = []
            for new_file in new_files:
                try:
                    hook_files = hooks.hook(self.project.code, "precommit",
                                            new_file.file.name, author=None,
                                            message=message)
                    filestocommit.extend(hook_files)
                except ImportError:
                    # Failed to import the hook - we're going to assume there
                    # just isn't a hook to import. That means we'll commit the
                    # original file.
                    filestocommit.append(new_file.file.name)

            success = True
            try:
                output = versioncontrol.add_files(project_path, filestocommit,
                                                  message)
            except Exception:
                logging.exception(u"Failed to add files")
                success = False

            for new_file in new_files:
                try:
                    hooks.hook(self.project.code, "postcommit",
                               new_file.file.name, success=success)
                except:
                    #FIXME: We should not hide the exception - makes
                    # development impossible
                    pass

        if pootle_path is None:
            from pootle_app.models.signals import post_template_update
            post_template_update.send(sender=self)

    def scan_files(self, vcs_sync=True):
        """Scan the file system and return a list of translation files.

        :param vcs_sync: boolean on whether or not to synchronise the PO
                         directory with the VCS checkout.
        """
        proj_ignore = [p.strip() for p in self.project.ignoredfiles.split(',')]
        ignored_files = set(proj_ignore)
        ext = os.extsep + self.project.localfiletype

        # Scan for pots if template project
        if self.is_template_project:
            ext = os.extsep + self.project.get_template_filetype()

        from pootle_app.project_tree import (add_files,
                                             match_template_filename,
                                             direct_language_match_filename,
                                             sync_from_vcs)

        all_files = []
        new_files = []

        if self.file_style == 'gnu':
            if self.pootle_path.startswith('/templates/'):
                file_filter = lambda filename: match_template_filename(
                                    self.project, filename,
                              )
            else:
                file_filter = lambda filename: direct_language_match_filename(
                                    self.language.code, filename,
                              )
        else:
            file_filter = lambda filename: True

        if vcs_sync:
            sync_from_vcs(ignored_files, ext, self.real_path, file_filter)

        all_files, new_files = add_files(
                self,
                ignored_files,
                ext,
                self.real_path,
                self.directory,
                file_filter,
        )

        return all_files, new_files

    def update_file_from_version_control(self, store):
        from pootle.scripts import hooks
        store.sync(update_translation=True)

        filetoupdate = store.file.name
        try:
            filetoupdate = hooks.hook(self.project.code, "preupdate",
                                      store.file.name)
        except:
            pass

        # Keep a copy of working files in memory before updating
        working_copy = store.file.store

        try:
            logging.debug(u"Updating %s from version control", store.file.name)
            from pootle_misc import versioncontrol
            versioncontrol.update_file(filetoupdate)
            store.file._delete_store_cache()
            store.file._update_store_cache()
        except Exception:
            # Something wrong, file potentially modified, bail out
            # and replace with working copy
            logging.exception(u"Near fatal catastrophe, while updating %s "
                              u"from version control", store.file.name)
            working_copy.save()

            raise VersionControlError

        try:
            hooks.hook(self.project.code, "postupdate", store.file.name)
        except:
            pass

        try:
            logging.debug(u"Parsing version control copy of %s into db",
                          store.file.name)
            store.update(update_structure=True, update_translation=True)

            #FIXME: try to avoid merging if file was not updated
            logging.debug(u"Merging %s with version control update",
                          store.file.name)
            store.mergefile(working_copy, None, allownewstrings=False,
                            suggestions=True, notranslate=False,
                            obsoletemissing=False)
        except Exception:
            logging.exception(u"Near fatal catastrophe, while merging %s with "
                              u"version control copy", store.file.name)
            working_copy.save()
            store.update(update_structure=True, update_translation=True)
            raise

    def update_dir(self, request=None, directory=None):
        """Updates translation project's files from version control, retaining
        uncommitted translations.
        """
        remote_stats = {}

        from pootle_misc import versioncontrol
        try:
            versioncontrol.update_dir(self.real_path)
        except IOError as e:
            logging.exception(u"Error during update of %s", self.real_path)
            if request:
                msg = _("Failed to update from version control: %(error)s",
                        {"error": e})
                messages.error(request, msg)
            return

        all_files, new_files = self.scan_files()
        new_file_set = set(new_files)

        from pootle.scripts import hooks

        # Go through all stores except any pootle-terminology.* ones
        if directory.is_translationproject():
            stores = self.stores.exclude(file="")
        else:
            stores = directory.stores.exclude(file="")

        for store in stores.iterator():
            if store in new_file_set:
                continue

            store.sync(update_translation=True)
            filetoupdate = store.file.name
            try:
                filetoupdate = hooks.hook(self.project.code, "preupdate",
                                          store.file.name)
            except:
                pass

            # keep a copy of working files in memory before updating
            working_copy = store.file.store

            versioncontrol.copy_to_podir(filetoupdate)
            store.file._delete_store_cache()
            store.file._update_store_cache()

            try:
                hooks.hook(self.project.code, "postupdate",
                           store.file.name)
            except:
                pass

            try:
                logging.debug(u"Parsing version control copy of %s into db",
                              store.file.name)
                store.update(update_structure=True, update_translation=True)

                #FIXME: Try to avoid merging if file was not updated
                logging.debug(u"Merging %s with version control update",
                              store.file.name)
                store.mergefile(working_copy, None, allownewstrings=False,
                                suggestions=True, notranslate=False,
                                obsoletemissing=False)
            except Exception:
                logging.exception(u"Near fatal catastrophe, while merging %s "
                                  "with version control copy", store.file.name)
                working_copy.save()
                store.update(update_structure=True, update_translation=True)
                raise

        if request:
            msg = \
                _(u'Updated project <em>%(project)s</em> from version control',
                  {'project': self.fullname})
            messages.info(request, msg)

        from pootle_app.models.signals import post_vc_update
        post_vc_update.send(sender=self)

    def update_file(self, request, store):
        """Updates file from version control, retaining uncommitted
        translations"""
        try:
            self.update_file_from_version_control(store)

            # FIXME: This belongs to views
            msg = _(u'Updated file <em>%(filename)s</em> from version control',
                    {'filename': store.file.name})
            messages.info(request, msg)

            from pootle_app.models.signals import post_vc_update
            post_vc_update.send(sender=self)
        except VersionControlError as e:
            # FIXME: This belongs to views
            msg = _(u"Failed to update <em>%(filename)s</em> from "
                    u"version control: %(error)s",
                    {
                        'filename': store.file.name,
                        'error': e,
                    }
            )
            messages.error(request, msg)

        self.scan_files()

    def commit_dir(self, user, directory, request=None):
        """Commits files under a directory to version control.

        This does not do permission checking.
        """
        self.sync()
        total = directory.get_total_wordcount()
        translated = directory.get_translated_wordcount()
        fuzzy = directory.get_fuzzy_wordcount()
        author = user.username

        message = stats_message_raw("Commit from %s by user %s." %
                                    (get_site_title(), author),
                                    total, translated, fuzzy)

        # Try to append email as well, since some VCS does not allow omitting
        # it (ie. Git).
        if user.is_authenticated() and len(user.email):
            author += " <%s>" % user.email

        if directory.is_translationproject():
            stores = list(self.stores.exclude(file=""))
        else:
            stores = list(directory.stores.exclude(file=""))

        filestocommit = []

        from pootle.scripts import hooks
        for store in stores:
            try:
                filestocommit.extend(hooks.hook(self.project.code, "precommit",
                                                store.file.name, author=author,
                                                message=message)
                                    )
            except ImportError:
                # Failed to import the hook - we're going to assume there just
                # isn't a hook to import. That means we'll commit the original
                # file.
                filestocommit.append(store.file.name)

        success = True
        try:
            from pootle_misc import versioncontrol
            project_path = self.project.get_real_path()
            versioncontrol.add_files(project_path, filestocommit, message,
                                     author)
            # FIXME: This belongs to views
            if request is not None:
                msg = _("Committed all files under <em>%(path)s</em> to "
                        "version control", {'path': directory.pootle_path})
                messages.success(request, msg)
        except Exception as e:
            logging.exception(u"Failed to commit directory")

            # FIXME: This belongs to views
            if request is not None:
                msg = _("Failed to commit to version control: %(error)s",
                        {'error': e})
                messages.error(request, msg)

            success = False

        for store in stores:
            try:
                hooks.hook(self.project.code, "postcommit", store.file.name,
                           success=success)
            except:
                #FIXME: We should not hide the exception - makes development
                # impossible
                pass

        from pootle_app.models.signals import post_vc_commit
        post_vc_commit.send(sender=self, path_obj=directory,
                            user=user, success=success)

        return success

    def commit_file(self, user, store, request=None):
        """Commits an individual file to version control.

        This does not do permission checking.
        """
        store.sync(update_structure=False, update_translation=True,
                   conservative=True)
        total = store.get_total_wordcount()
        translated = store.get_translated_wordcount()
        fuzzy = store.get_fuzzy_wordcount()
        author = user.username

        message = stats_message_raw("Commit from %s by user %s." % \
                (get_site_title(), author), total, translated, fuzzy)

        # Try to append email as well, since some VCS does not allow omitting
        # it (ie. Git).
        if user.is_authenticated() and len(user.email):
            author += " <%s>" % user.email

        from pootle.scripts import hooks
        try:
            filestocommit = hooks.hook(self.project.code, "precommit",
                                       store.file.name, author=author,
                                       message=message)
        except ImportError:
            # Failed to import the hook - we're going to assume there just
            # isn't a hook to import. That means we'll commit the original
            # file.
            filestocommit = [store.file.name]

        success = True
        try:
            from pootle_misc import versioncontrol
            for file in filestocommit:
                versioncontrol.commit_file(file, message=message,
                                           author=author)

                # FIXME: This belongs to views
                if request is not None:
                    msg = _("Committed file <em>%(filename)s</em> to version "
                            "control", {'filename': file})
                    messages.success(request, msg)
        except Exception as e:
            logging.exception(u"Failed to commit file")

            # FIXME: This belongs to views
            if request is not None:
                msg_params = {
                    'filename': filename,
                    'error': e,
                }
                msg = _("Failed to commit <em>%(filename)s</em> to version "
                        "control: %(error)s", msg_params)
                messages.error(request, msg)

            success = False

        try:
            hooks.hook(self.project.code, "postcommit", store.file.name,
                       success=success)
        except:
            #FIXME: We should not hide the exception - makes development
            # impossible
            pass

        from pootle_app.models.signals import post_vc_commit
        post_vc_commit.send(sender=self, path_obj=store,
                            user=user, success=success)

        return success

    def initialize(self):
        try:
            from pootle.scripts import hooks
            hooks.hook(self.project.code, "initialize", self.real_path,
                    self.language.code)
        except Exception:
            logging.exception(u"Failed to initialize (%s)", self.language.code)

    ###########################################################################

    def get_archive(self, stores, path=None):
        """Returns an archive of the given files."""
        import shutil
        import subprocess
        from pootle_misc import ptempfile as tempfile

        tempzipfile = None
        archivecontents = None

        try:
            # Using zip command line is fast
            # The temporary file below is opened and immediately closed for
            # security reasons
            fd, tempzipfile = tempfile.mkstemp(prefix='pootle', suffix='.zip')
            os.close(fd)
            archivecontents = open(tempzipfile, "wb")

            file_list = u" ".join(
                store.abs_real_path[len(self.abs_real_path)+1:] \
                for store in stores.iterator()
            )
            process = subprocess.Popen(['zip', '-r', '-', file_list],
                                       cwd=self.abs_real_path,
                                       stdout=archivecontents)
            result = process.wait()

            if result == 0:
                if path is not None:
                    shutil.move(tempzipfile, path)
                    return
                else:
                    filedata = open(tempzipfile, "r").read()
                    if filedata:
                        return filedata
                    else:
                        raise Exception("failed to read temporary zip file")
            else:
                raise Exception("zip command returned error code: %d" % result)
        except Exception as e:
            # But if it doesn't work, we can do it from Python.
            logging.debug(e)
            logging.debug("falling back to zipfile module")
            if path is not None:
                if tempzipfile is None:
                    fd, tempzipfile = tempfile.mkstemp(prefix='pootle',
                                                       suffix='.zip')
                    os.close(fd)
                    archivecontents = open(tempzipfile, "wb")
            else:
                import cStringIO
                archivecontents = cStringIO.StringIO()

            import zipfile
            archive = zipfile.ZipFile(archivecontents, 'w',
                                      zipfile.ZIP_DEFLATED)
            for store in stores.iterator():
                archive.write(store.abs_real_path.encode('utf-8'),
                              store.abs_real_path[len(self.abs_real_path)+1:]
                                   .encode('utf-8'))
            archive.close()

            if path is not None:
                shutil.move(tempzipfile, path)
            else:
                return archivecontents.getvalue()
        finally:
            if tempzipfile is not None and os.path.exists(tempzipfile):
                os.remove(tempzipfile)
            try:
                archivecontents.close()
            except:
                pass

    ###########################################################################

    def make_indexer(self):
        """Get an indexing object for this project.

        Since we do not want to keep the indexing databases open for the
        lifetime of the TranslationProject (it is cached!), it may NOT be
        part of the Project object, but should be used via a short living
        local variable.
        """
        logging.debug(u"Loading indexer for %s", self.pootle_path)
        indexdir = os.path.join(self.abs_real_path, self.index_directory)
        from translate.search import indexing
        indexer = indexing.get_indexer(indexdir)
        indexer.set_field_analyzers({
            "pofilename": indexer.ANALYZER_EXACT,
            "pomtime": indexer.ANALYZER_EXACT,
            "dbid": indexer.ANALYZER_EXACT,
        })

        return indexer

    def init_index(self, indexer):
        """Initializes the search index."""
        #FIXME: stop relying on pomtime so virtual files can be searchable?
        try:
            indexer.begin_transaction()
            for store in self.stores.iterator():
                try:
                    self.update_index(indexer, store)
                except OSError:
                    # Broken link or permission problem?
                    logging.exception("Error indexing %s", store)
            indexer.commit_transaction()
            indexer.flush(optimize=True)
        except Exception:
            logging.exception(u"Error opening indexer for %s", self)
            try:
                indexer.cancel_transaction()
            except:
                pass

    def update_index(self, indexer, store, unitid=None):
        """Updates the index with the contents of store (limit to
        ``unitid`` if given).

        There are two reasons for calling this function:

            1. Creating a new instance of :cls:`TranslationProject`
               (see :meth:`TranslationProject.init_index`)
               -> Check if the index is up-to-date / rebuild the index if
               necessary
            2. Translating a unit via the web interface
               -> (re)index only the specified unit(s)

        The argument ``unitid`` should be None for 1.

        Known problems:

            1. This function should get called, when the po file changes
               externally.

               WARNING: You have to stop the pootle server before manually
               changing po files, if you want to keep the index database in
               sync.
        """
        #FIXME: leverage file updated signal to check if index needs updating
        if indexer is None:
            return False

        # Check if the pomtime in the index == the latest pomtime
        pomtime = str(hash(store.get_mtime()) ** 2)
        pofilenamequery = indexer.make_query([("pofilename",
                                               store.pootle_path)], True)
        pomtimequery = indexer.make_query([("pomtime", pomtime)], True)
        gooditemsquery = indexer.make_query([pofilenamequery, pomtimequery],
                                            True)
        gooditemsnum = indexer.get_query_result(gooditemsquery) \
                              .get_matches_count()

        # If there is at least one up-to-date indexing item, then the po file
        # was not changed externally -> no need to update the database
        units = None
        if (gooditemsnum > 0) and (not unitid):
            # Nothing to be done
            return
        elif unitid is not None:
            # Update only specific item - usually translation via the web
            # interface. All other items should still be up-to-date (even with
            # an older pomtime).
            # Delete the relevant item from the database
            units = store.units.filter(id=unitid)
            itemsquery = indexer.make_query([("dbid", str(unitid))], False)
            indexer.delete_doc([pofilenamequery, itemsquery])
        else:
            # (item is None)
            # The po file is not indexed - or it was changed externally
            # delete all items of this file
            logging.debug(u"Updating %s indexer for file %s", self.pootle_path,
                    store.pootle_path)
            indexer.delete_doc({"pofilename": store.pootle_path})
            units = store.units

        addlist = []
        for unit in units.iterator():
            doc = {
                "pofilename": store.pootle_path,
                "pomtime": pomtime,
                "dbid": str(unit.id),
            }

            if unit.hasplural():
                orig = "\n".join(unit.source.strings)
                trans = "\n".join(unit.target.strings)
            else:
                orig = unit.source
                trans = unit.target

            doc.update({
                "source": orig,
                "target": trans,
                "notes": unit.getnotes(),
                "locations": unit.getlocations(),
            })
            addlist.append(doc)

        if addlist:
            for add_item in addlist:
                indexer.index_document(add_item)

    ###########################################################################

    def gettermmatcher(self):
        """Returns the terminology matcher."""
        terminology_stores = Store.objects.none()
        mtime = None

        if self.is_terminology_project:
            terminology_stores = self.stores.all()
            mtime = self.get_mtime()
        else:
            # Get global terminology first
            try:
                termproject = TranslationProject.objects.get(
                        language=self.language_id,
                        project__code='terminology',
                )
                mtime = termproject.get_mtime()
                terminology_stores = termproject.stores.all()
            except TranslationProject.DoesNotExist:
                pass

            local_terminology = self.stores.filter(
                    name__startswith='pootle-terminology')
            for store in local_terminology.iterator():
                if mtime is None:
                    mtime = store.get_mtime()
                else:
                    mtime = max(mtime, store.get_mtime())

            terminology_stores = terminology_stores | local_terminology

        if mtime is None:
            return

        if mtime != self.non_db_state.termmatchermtime:
            from translate.search import match
            self.non_db_state.termmatcher = match.terminologymatcher(
                    terminology_stores.iterator(),
            )
            self.non_db_state.termmatchermtime = mtime

        return self.non_db_state.termmatcher


###############################################################################
# Signal handlers                                                             #
###############################################################################

def scan_languages(sender, instance, created=False, raw=False, **kwargs):
    if not created or raw:
        return

    for language in Language.objects.iterator():
        create_translation_project(language, instance)

post_save.connect(scan_languages, sender=Project)


def scan_projects(sender, instance, created=False, raw=False, **kwargs):
    if not created or raw:
        return

    for project in Project.objects.iterator():
        create_translation_project(instance, project)

post_save.connect(scan_projects, sender=Language)

########NEW FILE########
__FILENAME__ = translation_project_tags
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2010-2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

from django import template
from django.utils.safestring import mark_safe


register = template.Library()


@register.filter
def trail(path_obj, separator='/'):
    """Outputs an HTML-formatted directory/store trail.

    :param path_obj: A :cls:`pootle_app.models.Directory` or
                     :cls:`pootle_store.models.Store` object.
                     In case `path_obj` is a store, it will be built based
                     on its parent directory.
    :param separator: A string that will be used to join the trail.
    """
    trail_list = []
    is_store = not path_obj.is_dir
    directory = is_store and path_obj.parent or path_obj
    dir_trail = directory.trail()
    sep = u' %s ' % separator

    for i, trail_dir in enumerate(dir_trail):
        if is_store or i != (len(dir_trail) - 1):
            tr = u'<span><a href="%(url)s">%(dir_name)s</a></span>' % {
                'url': trail_dir.get_absolute_url(),
                'dir_name': trail_dir.name,
            }
        else:
            tr = u'<span>%(dir_name)s</span>' % {
                'dir_name': trail_dir.name,
            }
        trail_list.append(tr)

    if is_store:
        tr = u'<span>%(file_name)s</span>' % {
            'file_name': path_obj.name,
        }
        trail_list.append(tr)

    return mark_safe(sep.join(trail_list))

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2012 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pootle is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pootle; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from django.conf.urls import patterns, url


urlpatterns = patterns('pootle_translationproject.views',
    # Admin views
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)'
        r'/admin/permissions/',
        'admin_permissions',
        name='pootle-tp-admin-permissions'),
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)'
        r'/admin/settings/$',
        'edit_settings',
        name='pootle-tp-admin-settings'),

    # Management actions
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/rescan/?$',
        'rescan_files',
        name='pootle-tp-rescan'),
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/update/?$',
        'update_against_templates',
        name='pootle-tp-update-against-templates'),
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/delete/'
        r'(?P<dir_path>(.*/)*)(?P<filename>.*\.*)?$',
        'delete_path_obj',
        name='pootle-tp-delete-path-obj'),

    # VCS
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/'
        r'vcs-commit/(?P<dir_path>(.*/)*)(?P<filename>.*\.*)?$',
        'vcs_commit',
        name='pootle-vcs-commit'),
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/'
        r'vcs-update/(?P<dir_path>(.*/)*)(?P<filename>.*\.*)?$',
        'vcs_update',
        name='pootle-vcs-update'),

    # XHR views
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/ajax-add-tag/$',
        'ajax_add_tag_to_tp',
        name='pootle-xhr-tag-tp'),
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/ajax-remove-tag/'
        r'(?P<tag_name>.*\.*)?$',
        'ajax_remove_tag_from_tp',
        name='pootle-xhr-untag-tp'),

    # Exporting files
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/'
        r'(?P<file_path>.*)export/zip/$',
        'export_zip',
        name='pootle-tp-export-zip'),

    # Translation
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/'
        r'translate/(?P<dir_path>(.*/)*)(?P<filename>.*\.*)?$',
        'translate',
        name='pootle-tp-translate'),

    # Export view for proofreading
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/'
        r'export-view/(?P<dir_path>(.*/)*)(?P<filename>.*\.*)?$',
        'export_view',
        name='pootle-tp-export-view'),

    # Goals
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/'
        r'goals/(?P<goal_slug>[a-z0-9-]+)/real-path/'
        r'(?P<dir_path>(.*/)*)(?P<filename>.*\.*)?$',
        'overview',
        name='pootle-tp-goal-drill-down'),

    # Overview
    url(r'^(?P<language_code>[^/]*)/(?P<project_code>[^/]*)/'
        r'(?P<dir_path>(.*/)*)(?P<filename>.*\.*)?$',
        'overview',
        name='pootle-tp-overview'),

)

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging
import os
import StringIO
import json
from urllib import quote, unquote

from django import forms
from django.conf import settings
from django.contrib import messages
from django.core.urlresolvers import reverse
from django.http import HttpResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.template import loader, RequestContext
from django.utils.translation import ugettext as _
from django.views.decorators.http import require_POST

from taggit.models import Tag

from pootle.core.browser import (get_children, get_goal_children,
                                 get_goal_parent, get_parent,
                                 get_table_headings)
from pootle.core.decorators import (get_path_obj, get_resource,
                                    permission_required)
from pootle.core.helpers import (get_export_view_context, get_overview_context,
                                 get_translation_context)
from pootle_app.models.permissions import check_permission
from pootle_app.models import Directory
from pootle_app.project_tree import (ensure_target_dir_exists,
                                     direct_language_match_filename)
from pootle_app.views.admin.permissions import admin_permissions as admin_perms
from pootle_misc.util import jsonify, ajax_required
from pootle_profile.models import get_profile
from pootle_statistics.models import Submission, SubmissionTypes
from pootle_store.models import Store
from pootle_store.util import (absolute_real_path, relative_real_path,
                               add_trailing_slash)
from pootle_tagging.decorators import get_goal
from pootle_tagging.forms import GoalForm, TagForm
from pootle_tagging.models import Goal

from .forms import DescriptionForm, upload_form_factory


ANN_COOKIE_NAME = 'project-announcements'


@get_path_obj
@permission_required('administrate')
def admin_permissions(request, translation_project):
    ctx = {
        'page': 'admin-permissions',

        'translation_project': translation_project,
        'project': translation_project.project,
        'language': translation_project.language,
        'directory': translation_project.directory,
        'feed_path': translation_project.pootle_path[1:],
    }
    return admin_perms(request, translation_project.directory,
                       'translation_projects/admin/permissions.html', ctx)


@get_path_obj
@permission_required('administrate')
def rescan_files(request, translation_project):
    try:
        translation_project.scan_files()

        for store in translation_project.stores.exclude(file='').iterator():
            store.sync(update_translation=True)
            store.update(update_structure=True, update_translation=True)

        messages.success(request, _("Translation project files have been "
                                    "rescanned."))
    except Exception:
        logging.exception(u"Error while rescanning translation project files")
        messages.error(request, _("Error while rescanning translation project "
                                  "files."))

    language = translation_project.language.code
    project = translation_project.project.code
    overview_url = reverse('pootle-tp-overview', args=[language, project, ''])

    return redirect(overview_url)


@get_path_obj
@permission_required('administrate')
def update_against_templates(request, translation_project):
    try:
        translation_project.update_against_templates()
        messages.success(request, _("Translation project has been updated "
                                    "against latest templates."))
    except Exception:
        logging.exception(u"Error while updating translation project against "
                          u"latest templates")
        messages.error(request, _("Error while updating translation project "
                                  "against latest templates."))

    language = translation_project.language.code
    project = translation_project.project.code
    overview_url = reverse('pootle-tp-overview', args=[language, project, ''])

    return redirect(overview_url)


@get_path_obj
@permission_required('administrate')
def delete_path_obj(request, translation_project, dir_path, filename=None):
    """Deletes the path objects under `dir_path` (+ `filename`) from the
    filesystem, including `dir_path` in case it's not a translation project.
    """
    current_path = translation_project.directory.pootle_path + dir_path

    try:
        if filename:
            current_path = current_path + filename
            store = get_object_or_404(Store, pootle_path=current_path)
            stores_to_delete = [store]
            directory = None
        else:
            directory = get_object_or_404(Directory, pootle_path=current_path)
            stores_to_delete = directory.stores

        # Delete stores in the current context from the DB and the filesystem.
        for store in stores_to_delete:
            # First from the FS.
            if store.file:
                store.file.storage.delete(store.file.name)

            # From the DB after.
            store.delete()

        if directory:
            directory_is_tp = directory.is_translationproject()

            # First remove children directories from the DB.
            for child_dir in directory.child_dirs.iterator():
                child_dir.delete()

            # Then the current directory (only if we are not in the root of the
            # translation project).
            if not directory_is_tp:
                directory.delete()

            # And finally all the directory tree from the filesystem (excluding
            # the root of the translation project).
            try:
                import shutil
                po_dir = unicode(settings.PODIRECTORY)
                root_dir = os.path.join(po_dir, directory.get_real_path())

                if directory_is_tp:
                    children = [os.path.join(root_dir, child) \
                                for child in os.listdir(root_dir)]
                    child_dirs = filter(os.path.isdir, children)
                    for child_dir in child_dirs:
                        shutil.rmtree(child_dir)
                else:
                    shutil.rmtree(root_dir)
            except OSError:
                messages.warning(request, _("Symbolic link hasn't been "
                                            "removed from the filesystem."))

        if directory:
            messages.success(request, _("Directory and its containing files "
                                        "have been deleted."))
        else:
            messages.success(request, _("File has been deleted."))
    except Exception:
        logging.exception(u"Error while trying to delete %s", current_path)
        messages.error(request, _("Error while trying to delete path."))

    language = translation_project.language.code
    project = translation_project.project.code
    overview_url = reverse('pootle-tp-overview', args=[language, project, ''])

    return redirect(overview_url)


@get_path_obj
@permission_required('commit')
def vcs_commit(request, translation_project, dir_path, filename):
    current_path = translation_project.directory.pootle_path + dir_path

    if filename:
        current_path = current_path + filename
        obj = get_object_or_404(Store, pootle_path=current_path)
        result = translation_project.commit_file(request.user, obj, request)
    else:
        obj = get_object_or_404(Directory, pootle_path=current_path)
        result = translation_project.commit_dir(request.user, obj, request)

    return redirect(obj.get_absolute_url())


@get_path_obj
@permission_required('commit')
def vcs_update(request, translation_project, dir_path, filename):
    current_path = translation_project.directory.pootle_path + dir_path

    if filename:
        current_path = current_path + filename
        obj = get_object_or_404(Store, pootle_path=current_path)
        result = translation_project.update_file(request, obj)
    else:
        obj = get_object_or_404(Directory, pootle_path=current_path)
        result = translation_project.update_dir(request, obj)

    return redirect(obj.get_absolute_url())


def _handle_upload_form(request, translation_project):
    """Process the upload form in TP overview."""
    from pootle_app.models.signals import post_file_upload

    upload_form_class = upload_form_factory(request)

    if request.method == 'POST' and 'file' in request.FILES:
        upload_form = upload_form_class(request.POST, request.FILES)

        if not upload_form.is_valid():
            return upload_form
        else:
            django_file = upload_form.cleaned_data['file']
            overwrite = upload_form.cleaned_data['overwrite']
            upload_to = upload_form.cleaned_data['upload_to']
            upload_to_dir = upload_form.cleaned_data['upload_to_dir']

            # XXX Why do we scan here?
            translation_project.scan_files(vcs_sync=False)
            oldstats = translation_project.get_stats()

            # The URL relative to the URL of the translation project. Thus, if
            # directory.pootle_path == /af/pootle/foo/bar, then
            # relative_root_dir == foo/bar.
            if django_file.name.endswith('.zip'):
                archive = True
                target_directory = upload_to_dir or request.directory
                upload_archive(request, target_directory, django_file,
                               overwrite)
            else:
                archive = False
                upload_file(request, request.directory, django_file, overwrite,
                            store=upload_to)

            translation_project.scan_files(vcs_sync=False)
            newstats = translation_project.get_stats()

            # Create a submission. Doesn't fix stats but at least shows up in
            # last activity column.
            from django.utils import timezone
            s = Submission(
                creation_time=timezone.now(),
                translation_project=translation_project,
                submitter=get_profile(request.user),
                type=SubmissionTypes.UPLOAD,
                # The other fields are only relevant to unit-based changes.
            )
            s.save()

            post_file_upload.send(sender=translation_project,
                                  user=request.user, oldstats=oldstats,
                                  newstats=newstats, archive=archive)

    # Always return a blank upload form unless the upload form is not valid.
    return upload_form_class()


@get_path_obj
@permission_required('view')
@get_resource
@get_goal
def overview(request, translation_project, dir_path, filename=None, goal=None):
    from django.utils import dateformat
    from staticpages.models import StaticPage
    from pootle.scripts.actions import EXTDIR, StoreAction, TranslationProjectAction
    from .actions import action_groups

    if filename:
        ctx = {
            'store_tags': request.store.tag_like_objects,
        }
        template_name = "translation_projects/store_overview.html"
    else:
        ctx = {
            'tp_tags': translation_project.tag_like_objects,
        }
        template_name = "browser/overview.html"

    if (check_permission('translate', request) or
        check_permission('suggest', request) or
        check_permission('overwrite', request)):

        ctx.update({
            'upload_form': _handle_upload_form(request, translation_project),
        })

    can_edit = check_permission('administrate', request)

    project = translation_project.project
    language = translation_project.language

    resource_obj = request.store or request.directory

    #TODO enable again some actions when drilling down a goal.
    if goal is None:
        actions = action_groups(request, resource_obj)
    else:
        actions = []

    action_output = ''
    running = request.GET.get(EXTDIR, '')

    #TODO enable the following again when drilling down a goal.
    if running and goal is None:
        if request.store:
            act = StoreAction
        else:
            act = TranslationProjectAction
        try:
            action = act.lookup(running)
        except KeyError:
            messages.error(request, _("Unable to find '%(action)s' in '%(extdir)s'") %
                                      {'action': act, 'extdir': running})
        else:
            if not getattr(action, 'nosync', False):
                (request.store or translation_project).sync()
            if action.is_active(request):
                vcs_dir = settings.VCS_DIRECTORY
                po_dir = settings.PODIRECTORY
                tp_dir = request.directory.get_real_path()
                store_fn = '*'
                if request.store:
                    tp_dir_slash = add_trailing_slash(tp_dir)
                    if request.store.file.name.startswith(tp_dir_slash):
                        # Note: store_f used below in reverse() call.
                        store_f = request.store.file.name[len(tp_dir_slash):]
                        store_fn = store_f.replace('/', os.sep)

                # Clear possibly stale output/error (even from other
                # resource_obj).
                action.set_output('')
                action.set_error('')
                try:
                    action.run(path=resource_obj, root=po_dir, tpdir=tp_dir,
                               project=project.code, language=language.code,
                               store=store_fn,
                               style=translation_project.file_style,
                               vc_root=vcs_dir)
                except StandardError:
                    err = (_("Error while running '%s' extension action") %
                           action.title)
                    logging.exception(err)
                    if (action.error):
                        messages.error(request, action.error)
                    else:
                        messages.error(request, err)
                else:
                    if (action.error):
                        messages.warning(request, action.error)

                action_output = action.output
                if getattr(action, 'get_download', None):
                    export_path = action.get_download(resource_obj)
                    if export_path:
                        import mimetypes
                        abs_path = absolute_real_path(export_path)
                        filename = os.path.basename(export_path)
                        mimetype, encoding = mimetypes.guess_type(filename)
                        mimetype = mimetype or 'application/octet-stream'
                        with open(abs_path, 'rb') as f:
                            response = HttpResponse(f.read(),
                                                    mimetype=mimetype)
                        response['Content-Disposition'] = (
                                'attachment; filename="%s"' % filename)
                        return response

                if not action_output:
                    if not request.store:
                        rev_args = [language.code, project.code, '']
                        overview_url = reverse('pootle-tp-overview',
                                               args=rev_args)
                    else:
                        slash = store_f.rfind('/')
                        store_d = ''
                        if slash > 0:
                            store_d = store_f[:slash]
                            store_f = store_f[slash + 1:]
                        elif slash == 0:
                            store_f = store_f[1:]
                        rev_args = [language.code, project.code, store_d,
                                    store_f]
                        overview_url = reverse('pootle-tp-overview',
                                               args=rev_args)
                    return redirect(overview_url)

    # TODO: cleanup and refactor, retrieve from cache
    try:
        ann_virtual_path = 'announcements/' + project.code
        announcement = StaticPage.objects.live(request.user).get(
            virtual_path=ann_virtual_path,
        )
    except StaticPage.DoesNotExist:
        announcement = None

    display_announcement = True
    stored_mtime = None
    new_mtime = None
    cookie_data = {}

    if ANN_COOKIE_NAME in request.COOKIES:
        json_str = unquote(request.COOKIES[ANN_COOKIE_NAME])
        cookie_data = json.loads(json_str)

        if 'isOpen' in cookie_data:
            display_announcement = cookie_data['isOpen']

        if project.code in cookie_data:
            stored_mtime = cookie_data[project.code]

    if announcement is not None:
        ann_mtime = dateformat.format(announcement.modified_on, 'U')
        if ann_mtime != stored_mtime:
            display_announcement = True
            new_mtime = ann_mtime

    tp_goals = translation_project.all_goals

    ctx.update(get_overview_context(request))
    ctx.update({
        'resource_obj': request.store or request.directory,  # Dirty hack.
        'translation_project': translation_project,
        'description': translation_project.description,
        'project': project,
        'language': language,
        'tp_goals': tp_goals,
        'goal': goal,
        'feed_path': request.directory.pootle_path[1:],
        'action_groups': actions,
        'action_output': action_output,
        'can_edit': can_edit,

        'browser_extends': 'translation_projects/base.html',

        'announcement': announcement,
        'announcement_displayed': display_announcement,
    })

    tp_pootle_path = translation_project.pootle_path

    if request.store is None:
        table_fields = ['name', 'progress', 'total', 'need-translation',
                        'suggestions', 'critical', 'last-updated', 'activity']

        if goal is not None:
            # Then show the drill down view for the specified goal.
            ctx.update({
                'table': {
                    'id': 'tp-goals',
                    'fields': table_fields,
                    'headings': get_table_headings(table_fields),
                    'parent': get_goal_parent(request.directory, goal),
                    'items': get_goal_children(request.directory, goal),
                },
            })
        else:
            # Then show the files tab.
            ctx.update({
                'table': {
                    'id': 'tp-files',
                    'fields': table_fields,
                    'headings': get_table_headings(table_fields),
                    'parent': get_parent(request.directory),
                    'items': get_children(request.directory),
                },
            })

    if can_edit:
        if request.store is None:
            add_tag_action_url = reverse('pootle-xhr-tag-tp',
                                         args=[language.code, project.code])
        else:
            add_tag_action_url = reverse('pootle-xhr-tag-store',
                                         args=[resource_obj.pk])

        ctx.update({
            'form': DescriptionForm(instance=translation_project),
            'form_action': reverse('pootle-tp-admin-settings',
                                   args=[language.code, project.code]),
            'add_tag_form': TagForm(),
            'add_tag_action_url': add_tag_action_url,
        })

        if goal is not None:
            ctx.update({
                'goal_form': GoalForm(instance=goal),
                'goal_form_action': reverse('pootle-xhr-edit-goal',
                                            args=[goal.slug]),
            })

    response = render(request, template_name, ctx)

    if new_mtime is not None:
        cookie_data[project.code] = new_mtime
        cookie_data = quote(json.dumps(cookie_data))
        response.set_cookie(ANN_COOKIE_NAME, cookie_data)

    return response


@require_POST
@ajax_required
@get_path_obj
@permission_required('administrate')
def ajax_remove_tag_from_tp(request, translation_project, tag_name):

    if tag_name.startswith("goal:"):
        translation_project.goals.remove(tag_name)
    else:
        translation_project.tags.remove(tag_name)

    return HttpResponse(status=201)


def _add_tag(request, translation_project, tag_like_object):
    if isinstance(tag_like_object, Tag):
        translation_project.tags.add(tag_like_object)
    else:
        translation_project.goals.add(tag_like_object)
    context = {
        'tp_tags': translation_project.tag_like_objects,
        'language': translation_project.language,
        'project': translation_project.project,
        'can_edit': check_permission('administrate', request),
    }
    response = render(request, "translation_projects/xhr_tags_list.html", context)
    response.status_code = 201
    return response


@require_POST
@ajax_required
@get_path_obj
@permission_required('administrate')
def ajax_add_tag_to_tp(request, translation_project):
    """Return an HTML snippet with the failed form or blank if valid."""

    add_tag_form = TagForm(request.POST)

    if add_tag_form.is_valid():
        new_tag_like_object = add_tag_form.save()
        return _add_tag(request, translation_project, new_tag_like_object)
    else:
        # If the form is invalid, perhaps it is because the tag (or goal)
        # already exists, so check if the tag (or goal) exists.
        try:
            criteria = {
                'name': add_tag_form.data['name'],
                'slug': add_tag_form.data['slug'],
            }
            if len(translation_project.tags.filter(**criteria)) == 1:
                # If the tag is already applied to the translation project then
                # avoid reloading the page.
                return HttpResponse(status=204)
            elif len(translation_project.goals.filter(**criteria)) == 1:
                # If the goal is already applied to the translation project
                # then avoid reloading the page.
                return HttpResponse(status=204)
            else:
                # Else add the tag (or goal) to the translation project.
                if criteria['name'].startswith("goal:"):
                    tag_like_object = Goal.objects.get(**criteria)
                else:
                    tag_like_object = Tag.objects.get(**criteria)
                return _add_tag(request, translation_project, tag_like_object)
        except Exception:
            # If the form is invalid and the tag (or goal) doesn't exist yet
            # then display the form with the error messages.
            url_kwargs = {
                'language_code': translation_project.language.code,
                'project_code': translation_project.project.code,
            }
            context = {
                'add_tag_form': add_tag_form,
                'add_tag_action_url': reverse('pootle-xhr-tag-tp',
                                              kwargs=url_kwargs)
            }
            return render(request, "core/xhr_add_tag_form.html", context)


@get_path_obj
@permission_required('view')
@get_resource
def translate(request, translation_project, dir_path, filename):
    language = translation_project.language
    project = translation_project.project

    is_terminology = (project.is_terminology or request.store and
                                                request.store.is_terminology)
    context = get_translation_context(request, is_terminology=is_terminology)

    context.update({
        'language': language,
        'project': project,
        'translation_project': translation_project,

        'editor_extends': 'translation_projects/base.html',
    })

    return render(request, "editor/main.html", context)


@get_path_obj
@permission_required('view')
@get_resource
def export_view(request, translation_project, dir_path, filename=None):
    """Displays a list of units with filters applied."""
    ctx = get_export_view_context(request)
    ctx.update({
        'source_language': translation_project.project.source_language,
        'language': translation_project.language,
        'project': translation_project.project,
        'goal': request.GET.get('goal', ''),
    })

    return render(request, "editor/export_view.html", ctx)


@require_POST
@ajax_required
@get_path_obj
@permission_required('administrate')
def edit_settings(request, translation_project):
    from pootle.core.url_helpers import split_pootle_path

    form = DescriptionForm(request.POST, instance=translation_project)
    response = {}
    rcode = 400

    if form.is_valid():
        form.save()
        rcode = 200

        if translation_project.description:
            response["description"] = translation_project.description
        else:
            response["description"] = (u'<p class="placeholder muted">%s</p>' %
                                       _(u"No description yet."))

    path_args = split_pootle_path(translation_project.pootle_path)[:2]
    context = {
        "form": form,
        "form_action": reverse('pootle-tp-admin-settings', args=path_args),
    }
    t = loader.get_template('admin/_settings_form.html')
    c = RequestContext(request, context)
    response['form'] = t.render(c)

    return HttpResponse(jsonify(response), status=rcode,
                        mimetype="application/json")


@get_path_obj
@permission_required('archive')
def export_zip(request, translation_project, file_path):
    from django.core.cache import cache
    from django.utils.encoding import iri_to_uri
    from django.utils.timezone import utc

    translation_project.sync()
    pootle_path = translation_project.pootle_path + (file_path or '')

    archivename = '%s-%s' % (translation_project.project.code,
                             translation_project.language.code)

    if file_path.endswith('/'):
        file_path = file_path[:-1]

    if file_path:
        archivename += '-' + file_path.replace('/', '-')

    archivename += '.zip'
    export_path = os.path.join('POOTLE_EXPORT', translation_project.real_path,
                               archivename)
    abs_export_path = absolute_real_path(export_path)

    key = iri_to_uri("%s:export_zip" % pootle_path)
    last_export = cache.get(key)

    tp_time = translation_project.get_mtime().replace(tzinfo=utc)
    up_to_date = False
    if last_export:
        # Make both datetimes tz-aware to avoid a crash here
        last_export = last_export.replace(tzinfo=utc)
        up_to_date = last_export == tp_time

    if (not (up_to_date and os.path.isfile(abs_export_path))):
        ensure_target_dir_exists(abs_export_path)
        stores = Store.objects.filter(pootle_path__startswith=pootle_path) \
                              .exclude(file='')
        translation_project.get_archive(stores, abs_export_path)
        cache.set(key, tp_time, settings.OBJECT_CACHE_TIMEOUT)

    return redirect('/export/' + export_path)


def unix_to_host_path(p):
    return os.sep.join(p.split('/'))


def host_to_unix_path(p):
    return '/'.join(p.split(os.sep))


def get_upload_path(translation_project, relative_root_dir, local_filename):
    """Gets the path of a translation file being uploaded securely, creating
    directories as necessary.
    """
    dir_path = os.path.join(translation_project.real_path,
                            unix_to_host_path(relative_root_dir))
    return relative_real_path(os.path.join(dir_path, local_filename))


def get_local_filename(translation_project, upload_filename):
    base, ext = os.path.splitext(upload_filename)
    new_ext = translation_project.project.localfiletype

    if new_ext == 'po' and translation_project.is_template_project:
        new_ext = 'pot'

    local_filename =  '%s.%s' % (base, new_ext)

    # Check if name is valid.
    if (os.path.basename(local_filename) != local_filename or
        local_filename.startswith(".")):
        raise ValueError(_("Invalid/insecure file name: %s", local_filename))

    # XXX: Leakage of the project layout information outside of
    # project_tree.py! The rest of Pootle shouldn't have to care
    # whether something is GNU-style or not.
    if (translation_project.file_style == "gnu" and
        not translation_project.is_template_project):

        language_code = translation_project.language.code
        if not direct_language_match_filename(language_code, local_filename):
            invalid_dict = {
                'local_filename': local_filename,
                'langcode': translation_project.language.code,
                'filetype': translation_project.project.localfiletype,
            }
            raise ValueError(_("Invalid GNU-style file name: "
                               "%(local_filename)s. It must match "
                               "'%(langcode)s.%(filetype)s'.", invalid_dict))
    return local_filename


def unzip_external(request, directory, django_file, overwrite):
    # Make a temporary directory to hold a zip file and its unzipped contents.
    from pootle_misc import ptempfile as tempfile
    tempdir = tempfile.mkdtemp(prefix='pootle')

    # Make a temporary file to hold the zip file.
    tempzipfd, tempzipname = tempfile.mkstemp(prefix='pootle', suffix='.zip')
    try:
        # Dump the uploaded file to the temporary file.
        try:
            os.write(tempzipfd, django_file.read())
        finally:
            os.close(tempzipfd)
        # Unzip the temporary zip file.
        import subprocess
        if subprocess.call(["unzip", tempzipname, "-d", tempdir]):
            import zipfile
            raise zipfile.BadZipfile(_("Error while extracting archive"))
        # Enumerate the temporary directory.
        maybe_skip = True
        prefix = tempdir
        for basedir, dirs, files in os.walk(tempdir):
            if maybe_skip and not files and len(dirs) == 1:
                try:
                    directory.child_dirs.get(name=dirs[0])
                    maybe_skip = False
                except Directory.DoesNotExist:
                    prefix = os.path.join(basedir, dirs[0])
                    continue
            else:
                maybe_skip = False

            for fname in files:
                # Read the contents of a file.
                fcontents = open(os.path.join(basedir, fname), 'rb').read()
                newfile = StringIO.StringIO(fcontents)
                newfile.name = os.path.basename(fname)
                # Get the filesystem path relative to the temporary directory.
                subdir = host_to_unix_path(basedir[len(prefix)+len(os.sep):])
                if subdir:
                    target_dir = directory.get_or_make_subdir(subdir)
                else:
                    target_dir = directory
                # Construct a full UNIX path relative to the current
                # translation project URL by attaching a UNIXified
                # 'relative_host_dir' to the root relative path, i.e. the path
                # from which the user is uploading the ZIP file.
                try:
                    upload_file(request, target_dir, newfile, overwrite)
                except ValueError:
                    logging.exception(u"Error adding file %s", fname)
    finally:
        # Clean up temporary file and directory used in try-block.
        import shutil
        os.unlink(tempzipname)
        shutil.rmtree(tempdir)


def unzip_python(request, directory, django_file, overwrite):
    import zipfile
    django_file.seek(0)
    archive = zipfile.ZipFile(django_file, 'r')
    # TODO: find a better way to return errors...
    try:
        prefix = ''
        maybe_skip = True
        for filename in archive.namelist():
            try:
                if filename[-1] == '/':
                    if maybe_skip:
                        try:
                            directory.child_dirs.get(name=filename[:-1])
                            maybe_skip = False
                        except Directory.DoesNotExist:
                            prefix = filename
                else:
                    maybe_skip = False
                    subdir = host_to_unix_path(os.path.dirname(filename[len(prefix):]))
                    if subdir:
                        target_dir = directory.get_or_make_subdir(subdir)
                    else:
                        target_dir = directory
                    newfile = StringIO.StringIO(archive.read(filename))
                    newfile.name = os.path.basename(filename)
                    upload_file(request, target_dir, newfile, overwrite)
            except ValueError:
                logging.exception(u"Error adding file %s", filename)
    finally:
        archive.close()


def upload_archive(request, directory, django_file, overwrite):
    # First we try to use "unzip" from the system, otherwise fall back to using
    # the slower zipfile module.
    try:
        unzip_external(request, directory, django_file, overwrite)
    except:
        unzip_python(request, directory, django_file, overwrite)


def overwrite_file(request, relative_root_dir, django_file, upload_path):
    """Overwrite with uploaded file."""
    upload_dir = os.path.dirname(absolute_real_path(upload_path))
    # Ensure that there is a directory into which we can dump the uploaded
    # file.
    if not os.path.exists(upload_dir):
        os.makedirs(upload_dir)

    # Get the file extensions of the uploaded filename and the current
    # translation project.
    _upload_base, upload_ext = os.path.splitext(django_file.name)
    _local_base, local_ext = os.path.splitext(upload_path)
    # If the extension of the uploaded file matches the extension used in this
    # translation project, then we simply write the file to the disk.
    if upload_ext == local_ext:
        outfile = open(absolute_real_path(upload_path), "wb")
        try:
            outfile.write(django_file.read())
        finally:
            outfile.close()
            try:
                #FIXME: we need a way to delay reparsing
                store = Store.objects.get(file=upload_path)
                store.update(update_structure=True, update_translation=True)
            except Store.DoesNotExist:
                # newfile, delay parsing
                pass
    else:
        from translate.storage import factory
        from pootle_store.filetypes import factory_classes
        newstore = factory.getobject(django_file, classes=factory_classes)
        if not newstore.units:
            return

        # If the extension of the uploaded file does not match the extension of
        # the current translation project, we create an empty file (with the
        # right extension).
        empty_store = factory.getobject(absolute_real_path(upload_path),
                                        classes=factory_classes)
        # And save it.
        empty_store.save()
        request.translation_project.scan_files(vcs_sync=False)
        # Then we open this newly created file and merge the uploaded file into
        # it.
        store = Store.objects.get(file=upload_path)
        #FIXME: maybe there is a faster way to do this?
        store.update(update_structure=True, update_translation=True,
                     store=newstore)
        store.sync(update_structure=True, update_translation=True,
                   conservative=False)


def upload_file(request, directory, django_file, overwrite, store=None):
    from django.core.exceptions import PermissionDenied
    from translate.storage import factory
    from pootle_store.filetypes import factory_classes

    translation_project = request.translation_project
    tp_pootle_path_length = len(translation_project.pootle_path)
    relative_root_dir = directory.pootle_path[tp_pootle_path_length:]

    # for some reason factory checks explicitly for file existance and
    # if file is open, which makes it difficult to work with Django's
    # in memory uploads.
    #
    # setting _closed to False should work around this
    #FIXME: hackish, does this have any undesirable side effect?
    if getattr(django_file, '_closed', None) is None:
        try:
            django_file._closed = False
        except AttributeError:
            pass
    # factory also checks for _mode
    if getattr(django_file, '_mode', None) is None:
        try:
            django_file._mode = 1
        except AttributeError:
            pass
    # mode is an attribute not a property in Django 1.1
    if getattr(django_file, 'mode', None) is None:
        django_file.mode = 1

    if store and store.file:
        # Uploading to an existing file.
        pootle_path = store.pootle_path
        upload_path = store.real_path
    elif store:
        # Uploading to a virtual store.
        pootle_path = store.pootle_path
        upload_path = get_upload_path(translation_project, relative_root_dir,
                                      store.name)
    else:
        local_filename = get_local_filename(translation_project,
                                            django_file.name)
        pootle_path = directory.pootle_path + local_filename
        # The full filesystem path to 'local_filename'.
        upload_path = get_upload_path(translation_project, relative_root_dir,
                                      local_filename)
        try:
            store = translation_project.stores.get(pootle_path=pootle_path)
        except Store.DoesNotExist:
            store = None

    if (store is not None and overwrite == 'overwrite' and
        not check_permission('overwrite', request)):
        raise PermissionDenied(_("You do not have rights to overwrite files "
                                 "here."))

    if store is None and not check_permission('administrate', request):
        raise PermissionDenied(_("You do not have rights to upload new files "
                                 "here."))

    if overwrite == 'merge' and not check_permission('translate', request):
        raise PermissionDenied(_("You do not have rights to upload files "
                                 "here."))

    if overwrite == 'suggest' and not check_permission('suggest', request):
        raise PermissionDenied(_("You do not have rights to upload files "
                                 "here."))

    if store is None or (overwrite == 'overwrite' and store.file != ""):
        overwrite_file(request, relative_root_dir, django_file, upload_path)
        return

    if store.file and store.file.read() == django_file.read():
        logging.debug(u"identical file uploaded to %s, not merging",
                      store.pootle_path)
        return

    django_file.seek(0)
    newstore = factory.getobject(django_file, classes=factory_classes)

    #FIXME: are we sure this is what we want to do? shouldn't we
    # differentiate between structure changing uploads and mere
    # pretranslate uploads?
    suggestions = overwrite == 'merge'
    notranslate = overwrite == 'suggest'
    allownewstrings = overwrite == 'overwrite' and store.file == ''

    store.mergefile(newstore, get_profile(request.user),
                    suggestions=suggestions, notranslate=notranslate,
                    allownewstrings=allownewstrings,
                    obsoletemissing=allownewstrings)

########NEW FILE########
__FILENAME__ = urls
"""
URLConf for Django user profile management.

Recommended usage is to use a call to ``include()`` in your project's
root URLConf to include this URLConf for any URL beginning with
'/profiles/'.

If the default behavior of the profile views is acceptable to you,
simply use a line like this in your root URLConf to set up the default
URLs for profiles::

    (r'^profiles/', include('profiles.urls')),

But if you'd like to customize the behavior (e.g., by passing extra
arguments to the various views) or split up the URLs, feel free to set
up your own URL patterns for these views instead. If you do, it's a
good idea to keep the name ``profiles_profile_detail`` for the pattern
which points to the ``profile_detail`` view, since several views use
``reverse()`` with that name to generate a default post-submission
redirect. If you don't use that name, remember to explicitly pass
``success_url`` to those views.

"""

from django.conf.urls import patterns, url

from profiles import views


urlpatterns = patterns('',
                       url(r'^create/?$',
                           views.create_profile,
                           name='profiles_create_profile'),
                       url(r'^edit/$',
                           views.edit_profile,
                           name='profiles_edit_profile'),
                       url(r'^(?P<username>[^/]+)/?$',
                           views.profile_detail,
                           name='profiles_profile_detail'),
                       url(r'^$',
                           views.ProfileListView.as_view(),
                           name='profiles_profile_list'),
                       )

########NEW FILE########
__FILENAME__ = utils
"""
Utility functions for retrieving and generating forms for the
site-specific user profile model specified in the
``AUTH_PROFILE_MODULE`` setting.

"""

from django import forms
from django.conf import settings
from django.contrib.auth.models import SiteProfileNotAvailable
from django.db.models import get_model


def get_profile_model():
    """
    Return the model class for the currently-active user profile
    model, as defined by the ``AUTH_PROFILE_MODULE`` setting. If that
    setting is missing, raise
    ``django.contrib.auth.models.SiteProfileNotAvailable``.
    
    """
    if (not hasattr(settings, 'AUTH_PROFILE_MODULE')) or \
           (not settings.AUTH_PROFILE_MODULE):
        raise SiteProfileNotAvailable
    profile_mod = get_model(*settings.AUTH_PROFILE_MODULE.split('.'))
    if profile_mod is None:
        raise SiteProfileNotAvailable
    return profile_mod


def get_profile_form():
    """
    Return a form class (a subclass of the default ``ModelForm``)
    suitable for creating/editing instances of the site-specific user
    profile model, as defined by the ``AUTH_PROFILE_MODULE``
    setting. If that setting is missing, raise
    ``django.contrib.auth.models.SiteProfileNotAvailable``.
    
    """
    profile_mod = get_profile_model()
    class _ProfileForm(forms.ModelForm):
        class Meta:
            model = profile_mod
            exclude = ('user',) # User will be filled in by the view.
    return _ProfileForm

########NEW FILE########
__FILENAME__ = views
"""
Views for creating, editing and viewing site-specific user profiles.

"""

from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.core.exceptions import ObjectDoesNotExist
from django.core.urlresolvers import reverse
from django.http import Http404
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.views.generic.list import ListView

from profiles import utils


def create_profile(request, form_class=None, success_url=None,
                   template_name='profiles/create_profile.html',
                   extra_context=None):
    """
    Create a profile for the current user, if one doesn't already
    exist.
    
    If the user already has a profile, as determined by
    ``request.user.get_profile()``, a redirect will be issued to the
    :view:`profiles.views.edit_profile` view. If no profile model has
    been specified in the ``AUTH_PROFILE_MODULE`` setting,
    ``django.contrib.auth.models.SiteProfileNotAvailable`` will be
    raised.
    
    **Optional arguments:**
    
    ``extra_context``
        A dictionary of variables to add to the template context. Any
        callable object in this dictionary will be called to produce
        the end result which appears in the context.

    ``form_class``
        The form class to use for validating and creating the user
        profile. This form class must define a method named
        ``save()``, implementing the same argument signature as the
        ``save()`` method of a standard Django ``ModelForm`` (this
        view will call ``save(commit=False)`` to obtain the profile
        object, and fill in the user before the final save). If the
        profile object includes many-to-many relations, the convention
        established by ``ModelForm`` of using a method named
        ``save_m2m()`` will be used, and so your form class should
        also define this method.
        
        If this argument is not supplied, this view will use a
        ``ModelForm`` automatically generated from the model specified
        by ``AUTH_PROFILE_MODULE``.
    
    ``success_url``
        The URL to redirect to after successful profile creation. If
        this argument is not supplied, this will default to the URL of
        :view:`profiles.views.profile_detail` for the newly-created
        profile object.
    
    ``template_name``
        The template to use when displaying the profile-creation
        form. If not supplied, this will default to
        :template:`profiles/create_profile.html`.
    
    **Context:**
    
    ``form``
        The profile-creation form.
    
    **Template:**
    
    ``template_name`` keyword argument, or
    :template:`profiles/create_profile.html`.
    
    """
    try:
        profile_obj = request.user.get_profile()
        return HttpResponseRedirect(reverse('profiles_edit_profile'))
    except ObjectDoesNotExist:
        pass
    
    #
    # We set up success_url here, rather than as the default value for
    # the argument. Trying to do it as the argument's default would
    # mean evaluating the call to reverse() at the time this module is
    # first imported, which introduces a circular dependency: to
    # perform the reverse lookup we need access to profiles/urls.py,
    # but profiles/urls.py in turn imports this module.
    #
    
    if success_url is None:
        success_url = reverse('profiles_profile_detail',
                              kwargs={ 'username': request.user.username })
    if form_class is None:
        form_class = utils.get_profile_form()
    if request.method == 'POST':
        form = form_class(data=request.POST, files=request.FILES)
        if form.is_valid():
            profile_obj = form.save(commit=False)
            profile_obj.user = request.user
            profile_obj.save()
            if hasattr(form, 'save_m2m'):
                form.save_m2m()
            return HttpResponseRedirect(success_url)
    else:
        form = form_class()
    
    if extra_context is None:
        extra_context = {}
    context = RequestContext(request)
    for key, value in extra_context.items():
        context[key] = callable(value) and value() or value
    
    return render_to_response(template_name,
                              { 'form': form },
                              context_instance=context)
create_profile = login_required(create_profile)

def edit_profile(request, form_class=None, success_url=None,
                 template_name='profiles/edit_profile.html',
                 extra_context=None):
    """
    Edit the current user's profile.
    
    If the user does not already have a profile (as determined by
    ``User.get_profile()``), a redirect will be issued to the
    :view:`profiles.views.create_profile` view; if no profile model
    has been specified in the ``AUTH_PROFILE_MODULE`` setting,
    ``django.contrib.auth.models.SiteProfileNotAvailable`` will be
    raised.
    
    **Optional arguments:**
    
    ``extra_context``
        A dictionary of variables to add to the template context. Any
        callable object in this dictionary will be called to produce
        the end result which appears in the context.

    ``form_class``
        The form class to use for validating and editing the user
        profile. This form class must operate similarly to a standard
        Django ``ModelForm`` in that it must accept an instance of the
        object to be edited as the keyword argument ``instance`` to
        its constructor, and it must implement a method named
        ``save()`` which will save the updates to the object. If this
        argument is not specified, this view will use a ``ModelForm``
        generated from the model specified in the
        ``AUTH_PROFILE_MODULE`` setting.
    
    ``success_url``
        The URL to redirect to following a successful edit. If not
        specified, this will default to the URL of
        :view:`profiles.views.profile_detail` for the profile object
        being edited.
    
    ``template_name``
        The template to use when displaying the profile-editing
        form. If not specified, this will default to
        :template:`profiles/edit_profile.html`.
    
    **Context:**
    
    ``form``
        The form for editing the profile.
        
    ``profile``
         The user's current profile.
    
    **Template:**
    
    ``template_name`` keyword argument or
    :template:`profiles/edit_profile.html`.
    
    """
    try:
        profile_obj = request.user.get_profile()
    except ObjectDoesNotExist:
        return HttpResponseRedirect(reverse('profiles_create_profile'))
    
    #
    # See the comment in create_profile() for discussion of why
    # success_url is set up here, rather than as a default value for
    # the argument.
    #
    
    if success_url is None:
        success_url = reverse('profiles_profile_detail',
                              kwargs={ 'username': request.user.username })
    if form_class is None:
        form_class = utils.get_profile_form()
    if request.method == 'POST':
        form = form_class(data=request.POST, files=request.FILES, instance=profile_obj)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(success_url)
    else:
        form = form_class(instance=profile_obj)
    
    if extra_context is None:
        extra_context = {}
    context = RequestContext(request)
    for key, value in extra_context.items():
        context[key] = callable(value) and value() or value
    
    return render_to_response(template_name,
                              { 'form': form,
                                'profile': profile_obj, },
                              context_instance=context)
edit_profile = login_required(edit_profile)

def profile_detail(request, username, public_profile_field=None,
                   template_name='profiles/profile_detail.html',
                   extra_context=None):
    """
    Detail view of a user's profile.
    
    If no profile model has been specified in the
    ``AUTH_PROFILE_MODULE`` setting,
    ``django.contrib.auth.models.SiteProfileNotAvailable`` will be
    raised.
    
    If the user has not yet created a profile, ``Http404`` will be
    raised.
    
    **Required arguments:**
    
    ``username``
        The username of the user whose profile is being displayed.
    
    **Optional arguments:**

    ``extra_context``
        A dictionary of variables to add to the template context. Any
        callable object in this dictionary will be called to produce
        the end result which appears in the context.

    ``public_profile_field``
        The name of a ``BooleanField`` on the profile model; if the
        value of that field on the user's profile is ``False``, the
        ``profile`` variable in the template will be ``None``. Use
        this feature to allow users to mark their profiles as not
        being publicly viewable.
        
        If this argument is not specified, it will be assumed that all
        users' profiles are publicly viewable.
    
    ``template_name``
        The name of the template to use for displaying the profile. If
        not specified, this will default to
        :template:`profiles/profile_detail.html`.
    
    **Context:**
    
    ``profile``
        The user's profile, or ``None`` if the user's profile is not
        publicly viewable (see the description of
        ``public_profile_field`` above).
    
    **Template:**
    
    ``template_name`` keyword argument or
    :template:`profiles/profile_detail.html`.
    
    """
    user = get_object_or_404(User, username=username)
    try:
        profile_obj = user.get_profile()
    except ObjectDoesNotExist:
        raise Http404
    if public_profile_field is not None and \
       not getattr(profile_obj, public_profile_field):
        profile_obj = None
    
    if extra_context is None:
        extra_context = {}
    context = RequestContext(request)
    for key, value in extra_context.items():
        context[key] = callable(value) and value() or value
    
    return render_to_response(template_name,
                              { 'profile': profile_obj },
                              context_instance=context)

class ProfileListView(ListView):
    """
    A list of user profiles.
    
    If no profile model has been specified in the
    ``AUTH_PROFILE_MODULE`` setting,
    ``django.contrib.auth.models.SiteProfileNotAvailable`` will be
    raised.

    **Optional arguments:**

    ``public_profile_field``
        The name of a ``BooleanField`` on the profile model; if the
        value of that field on a user's profile is ``False``, that
        profile will be excluded from the list. Use this feature to
        allow users to mark their profiles as not being publicly
        viewable.
        
        If this argument is not specified, it will be assumed that all
        users' profiles are publicly viewable.
    
    ``template_name``
        The name of the template to use for displaying the profiles. If
        not specified, this will default to
        :template:`profiles/profile_list.html`.

    Additionally, all arguments accepted by the
    :view:`django.views.generic.list_detail.object_list` generic view
    will be accepted here, and applied in the same fashion, with one
    exception: ``queryset`` will always be the ``QuerySet`` of the
    model specified by the ``AUTH_PROFILE_MODULE`` setting, optionally
    filtered to remove non-publicly-viewable proiles.
    
    **Context:**
    
    Same as the :view:`django.views.generic.list_detail.object_list`
    generic view.
    
    **Template:**
    
    ``template_name`` keyword argument or
    :template:`profiles/profile_list.html`.
    
    """
    public_profile_field = None
    template_name = 'profiles/profile_list.html'

    def get_model(self):
        return utils.get_profile_model()

    def get_queryset(self):
        queryset = self.get_model()._default_manager.all()
        if self.public_profile_field is not None:
            queryset = queryset.filter(**{self.public_profile_field: True})
        return queryset

########NEW FILE########
__FILENAME__ = forms
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import forms
from django.core.urlresolvers import reverse
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _

from .models import Agreement


def agreement_form_factory(pages, user, anchor_class=''):
    """Factory that builds an agreement form.

    :param pages: Legal pages that need to be accepted by users.
    :param user: User bound to the agreement form.
    :param anchor_class: Extra class(es) added to page links.
    :return: An `AgreementForm` class with `pages` as required checkboxes.
    """
    class AgreementForm(forms.Form):

        def __init__(self, *args, **kwargs):
            super(AgreementForm, self).__init__(*args, **kwargs)

            self._pages = pages
            self._user = user

            for page in self._pages:
                self.add_page_field(page)

        def save(self):
            """Save user agreements."""
            for page in self._pages:
                agreement, created = Agreement.objects.get_or_create(
                    user=self._user, document=page,
                )
                agreement.save()

        def legal_fields(self):
            """Return any fields added by legal pages."""
            return [field for field in self
                    if field.name.startswith('legal_')]

        def add_page_field(self, page):
            """Add `page` as a required field to this form."""
            url = page.url and page.url or reverse('pootle-staticpages-display',
                                                   args=[page.virtual_path])
            label_params = {
                'url': url,
                'classes': u''.join(['js-agreement-popup', ' ', anchor_class]),
                'title': page.title,
            }
            label = mark_safe(_('I have read and accept: <a href="%(url)s" '
                                'class="%(classes)s">%(title)s</a>',
                                label_params))

            field_name = 'legal_%d' % page.pk
            self.fields[field_name] = forms.BooleanField(label=label,
                                                         required=True)
            self.fields[field_name].widget.attrs['class'] = 'js-legalfield'

    return AgreementForm

########NEW FILE########
__FILENAME__ = managers
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.db.models import F, Manager, Q


class PageManager(Manager):

    def live(self, user=None, **kwargs):
        """Filters active (live) pages.

        :param user: Current active user. If omitted or the user doesn't
            have administration privileges, only active pages will be
            returned.
        """
        if user and user.is_superuser:
            return self.get_query_set()
        else:
            return self.get_query_set().filter(active=True)

    def pending_user_agreement(self, user, **kwargs):
        """Filters active pages where the given `user` has pending
        agreements.
        """
        # FIXME: This should be a method exclusive to a LegalPage manager
        return self.live().filter(
            Q(agreement__user=user,
              modified_on__gt=F('agreement__agreed_on')) |
            ~Q(agreement__user=user)
        )

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'LegalPage'
        db.create_table('staticpages_legalpage', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('active', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('display_on_register', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, blank=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(max_length=50)),
            ('body', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('body_html', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('staticpages', ['LegalPage'])


    def backwards(self, orm):
        # Deleting model 'LegalPage'
        db.delete_table('staticpages_legalpage')


    models = {
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'body_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display_on_register': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['staticpages']

########NEW FILE########
__FILENAME__ = 0002_rename_app
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import connection, models

class Migration(SchemaMigration):

    def forwards(self, orm):
        if 'legalpages_legalpage' in connection.introspection.table_names():
            if 'staticpages_legalpage' in connection.introspection.table_names():
                # Deleting model 'LegalPage' from 'legalpages' app.
                db.delete_table('legalpages_legalpage')

                if not db.dry_run:
                    content_types = orm['contenttypes.ContentType'].objects \
                    .filter(app_label='legalpages')
                    content_types.delete()
            else:
                # Migrate to the new app name, including content types
                db.rename_table('legalpages_legalpage', 'staticpages_legalpage')

                if not db.dry_run:
                    content_types = orm['contenttypes.ContentType'].objects \
                    .filter(app_label='legalpages')
                    content_types.update(app_label='staticpages')

    def backwards(self, orm):
        pass

    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'body_html': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display_on_register': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['contenttypes', 'staticpages']
    symmetrical = True

########NEW FILE########
__FILENAME__ = 0003_auto__del_field_legalpage_body_html__chg_field_legalpage_body
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'LegalPage.body_html'
        db.delete_column('staticpages_legalpage', 'body_html')


        # Changing field 'LegalPage.body'
        db.alter_column('staticpages_legalpage', 'body', self.gf('pootle.core.markup.fields.MarkupField')())

    def backwards(self, orm):
        # Adding field 'LegalPage.body_html'
        db.add_column('staticpages_legalpage', 'body_html',
                      self.gf('django.db.models.fields.TextField')(default='', blank=True),
                      keep_default=False)


        # Changing field 'LegalPage.body'
        db.alter_column('staticpages_legalpage', 'body', self.gf('django.db.models.fields.TextField')())

    models = {
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'display_on_register': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'default': "''", 'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['staticpages']
########NEW FILE########
__FILENAME__ = 0004_auto__add_field_legalpage_virtual_path
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'LegalPage.virtual_path'
        db.add_column('staticpages_legalpage', 'virtual_path',
                      self.gf('django.db.models.fields.CharField')(default='', max_length=100, null=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'LegalPage.virtual_path'
        db.delete_column('staticpages_legalpage', 'virtual_path')


    models = {
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'display_on_register': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'default': "''", 'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'})
        }
    }

    complete_apps = ['staticpages']
########NEW FILE########
__FILENAME__ = 0005_data__slug_to_virtual_path
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        """Copy slug field contents to virtual_path."""
        for page in orm.LegalPage.objects.all():
            page.virtual_path = page.slug
            page.save()

    def backwards(self, orm):
        """Convert virtual_path back to slug."""
        from django.template.defaultfilters import slugify
        for page in orm.LegalPage.objects.all():
            page.slug = slugify(page.virtual_path)
            page.save()

    models = {
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'display_on_register': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'default': "''", 'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100', 'null': 'True'})
        }
    }

    complete_apps = ['staticpages']
    symmetrical = True

########NEW FILE########
__FILENAME__ = 0006_auto__del_field_legalpage_slug__chg_field_legalpage_virtual_path
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'LegalPage.slug'
        db.delete_column('staticpages_legalpage', 'slug')


        # Changing field 'LegalPage.virtual_path'
        db.alter_column('staticpages_legalpage', 'virtual_path', self.gf('django.db.models.fields.CharField')(max_length=100))

    def backwards(self, orm):
        # Adding field 'LegalPage.slug'
        db.add_column('staticpages_legalpage', 'slug',
                      self.gf('django.db.models.fields.SlugField')(default='', max_length=50),
                      keep_default=False)


        # Changing field 'LegalPage.virtual_path'
        db.alter_column('staticpages_legalpage', 'virtual_path', self.gf('django.db.models.fields.CharField')(max_length=100, null=True))

    models = {
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'display_on_register': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '100'})
        }
    }

    complete_apps = ['staticpages']
########NEW FILE########
__FILENAME__ = 0007_auto__add_unique_legalpage_virtual_path
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding unique constraint on 'LegalPage', fields ['virtual_path']
        db.create_unique('staticpages_legalpage', ['virtual_path'])


    def backwards(self, orm):
        # Removing unique constraint on 'LegalPage', fields ['virtual_path']
        db.delete_unique('staticpages_legalpage', ['virtual_path'])


    models = {
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'display_on_register': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '100'})
        }
    }

    complete_apps = ['staticpages']
########NEW FILE########
__FILENAME__ = 0008_auto__del_field_legalpage_display_on_register
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'LegalPage.display_on_register'
        db.delete_column('staticpages_legalpage', 'display_on_register')


    def backwards(self, orm):
        # Adding field 'LegalPage.display_on_register'
        db.add_column('staticpages_legalpage', 'display_on_register',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


    models = {
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '100'})
        }
    }

    complete_apps = ['staticpages']
########NEW FILE########
__FILENAME__ = 0009_auto__add_staticpage
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'StaticPage'
        db.create_table('staticpages_staticpage', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('active', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('virtual_path', self.gf('django.db.models.fields.CharField')(default='', unique=True, max_length=100)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('body', self.gf('pootle.core.markup.fields.MarkupField')(blank=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, blank=True)),
        ))
        db.send_create_signal('staticpages', ['StaticPage'])


    def backwards(self, orm):
        # Deleting model 'StaticPage'
        db.delete_table('staticpages_staticpage')


    models = {
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '100'})
        },
        'staticpages.staticpage': {
            'Meta': {'object_name': 'StaticPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '100'})
        }
    }

    complete_apps = ['staticpages']
########NEW FILE########
__FILENAME__ = 0010_auto__add_agreement__add_unique_agreement_user_document__add_field_sta
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Agreement'
        db.create_table('staticpages_agreement', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('document', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['staticpages.LegalPage'])),
            ('agreed_on', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, auto_now=True, auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('staticpages', ['Agreement'])

        # Adding unique constraint on 'Agreement', fields ['user', 'document']
        db.create_unique('staticpages_agreement', ['user_id', 'document_id'])

        # Adding field 'StaticPage.modified_on'
        db.add_column('staticpages_staticpage', 'modified_on',
                      self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, auto_now=True, auto_now_add=True, blank=True),
                      keep_default=False)

        # Adding field 'LegalPage.modified_on'
        db.add_column('staticpages_legalpage', 'modified_on',
                      self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, auto_now=True, auto_now_add=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Removing unique constraint on 'Agreement', fields ['user', 'document']
        db.delete_unique('staticpages_agreement', ['user_id', 'document_id'])

        # Deleting model 'Agreement'
        db.delete_table('staticpages_agreement')

        # Deleting field 'StaticPage.modified_on'
        db.delete_column('staticpages_staticpage', 'modified_on')

        # Deleting field 'LegalPage.modified_on'
        db.delete_column('staticpages_legalpage', 'modified_on')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'staticpages.agreement': {
            'Meta': {'unique_together': "(('user', 'document'),)", 'object_name': 'Agreement'},
            'agreed_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['staticpages.LegalPage']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '100'})
        },
        'staticpages.staticpage': {
            'Meta': {'object_name': 'StaticPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '100'})
        }
    }

    complete_apps = ['staticpages']
########NEW FILE########
__FILENAME__ = 0011_auto__chg_field_legalpage_modified_on__chg_field_staticpage_modified_o
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'LegalPage.modified_on'
        db.alter_column('staticpages_legalpage', 'modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True))

        # Changing field 'StaticPage.modified_on'
        db.alter_column('staticpages_staticpage', 'modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True))

    def backwards(self, orm):

        # Changing field 'LegalPage.modified_on'
        db.alter_column('staticpages_legalpage', 'modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True))

        # Changing field 'StaticPage.modified_on'
        db.alter_column('staticpages_staticpage', 'modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'staticpages.agreement': {
            'Meta': {'unique_together': "(('user', 'document'),)", 'object_name': 'Agreement'},
            'agreed_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['staticpages.LegalPage']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'staticpages.legalpage': {
            'Meta': {'object_name': 'LegalPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '100'})
        },
        'staticpages.staticpage': {
            'Meta': {'object_name': 'StaticPage'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'body': ('pootle.core.markup.fields.MarkupField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'auto_now_add': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'}),
            'virtual_path': ('django.db.models.fields.CharField', [], {'default': "''", 'unique': 'True', 'max_length': '100'})
        }
    }

    complete_apps = ['staticpages']
########NEW FILE########
__FILENAME__ = models
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.db import models
from django.db.models import Q
from django.db.models.aggregates import Max
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from django.core.urlresolvers import reverse
from django.utils.timezone import now
from django.utils.translation import ugettext_lazy as _

from pootle.core.markup import get_markup_filter_name, MarkupField
from pootle.core.mixins import DirtyFieldsMixin

from .managers import PageManager


class AbstractPage(DirtyFieldsMixin, models.Model):

    active = models.BooleanField(
        _('Active'),
        help_text=_('Whether this page is active or not.'),
    )
    virtual_path = models.CharField(
        _("Virtual Path"),
        max_length=100,
        default='',
        unique=True,
        help_text='/pages/',
    )
    # TODO: make title and body localizable fields
    title = models.CharField(_("Title"), max_length=100)
    body = MarkupField(
        # Translators: Content that will be used to display this static page
        _("Display Content"),
        blank=True,
        help_text=_('Allowed markup: %s', get_markup_filter_name()),
    )
    url = models.URLField(
        _("Redirect to URL"),
        blank=True,
        help_text=_('If set, any references to this page will redirect to this'
                    ' URL'),
    )
    # This will go away with bug 2830, but works fine for now.
    modified_on = models.DateTimeField(
        default=now,
        editable=False,
        auto_now_add=True,
    )

    objects = PageManager()

    class Meta:
        abstract = True

    def __unicode__(self):
        return self.virtual_path

    def save(self):
        # Update the `modified_on` timestamp only when specific fields change.
        dirty_fields = self.get_dirty_fields()
        if any(field in dirty_fields for field in ('title', 'body', 'url')):
            self.modified_on = now()

        super(AbstractPage, self).save()

    def get_absolute_url(self):
        if self.url:
            return self.url

        return reverse('pootle-staticpages-display', args=[self.virtual_path])

    @staticmethod
    def max_pk():
        """Returns the sum of all the highest PKs for each submodel."""
        return reduce(
            lambda x, y: x + y,
            [int(p.objects.aggregate(Max('pk')).values()[0] or 0)
             for p in AbstractPage.__subclasses__()],
        )

    def clean(self):
        """Fail validation if:

        - URL and body are blank
        - Current virtual path exists in other page models
        """
        if not self.url and not self.body:
            # Translators: 'URL' and 'content' refer to form fields.
            raise ValidationError(_('URL or content must be provided.'))

        pages = [p.objects.filter(
                     Q(virtual_path=self.virtual_path),
                     ~Q(pk=self.pk),
                 ).exists()
                 for p in AbstractPage.__subclasses__()]
        if True in pages:
            raise ValidationError(_(u'Virtual path already in use.'))


class LegalPage(AbstractPage):

    display_name = _('Legal Page')

    def localized_title(self):
        return _(self.title)

    def get_edit_url(self):
        return reverse('pootle-staticpages-edit', args=['legal', self.pk])


class StaticPage(AbstractPage):

    display_name = _('Regular Page')

    def get_edit_url(self):
        page_type = 'static'
        if self.virtual_path.startswith('announcements/'):
            page_type = 'announcements'
        return reverse('pootle-staticpages-edit', args=[page_type, self.pk])


class Agreement(models.Model):
    """Tracks who agreed a specific legal document and when."""

    user = models.ForeignKey(User)
    document = models.ForeignKey(LegalPage)
    agreed_on = models.DateTimeField(
        default=now,
        editable=False,
        auto_now_add=True,
        auto_now=True,
    )

    class Meta:
        unique_together = ('user', 'document',)

########NEW FILE########
__FILENAME__ = staticpages
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import template
from django.core.urlresolvers import reverse

from ..models import LegalPage


register = template.Library()


class LegalPageNode(template.Node):

    def __init__(self, context_name):
        self.context_name = context_name

    def render(self, context):
        lps = LegalPage.objects.live().all()

        context[self.context_name] = lps
        return ''


@register.tag
def get_legalpages(parser, token):
    """
    Retrieves all active LegalPage objects.
    Populates the template context with them in a variable
    whose name is defined by the ``as`` clause.

    Syntax::

        {% get_legalpages as context_name %}
    """

    bits = token.split_contents()
    syntax_message = ("%(tag_name)s expects a syntax of %(tag_name)s "
                       "as context_name" %
                       dict(tag_name=bits[0]))

    if len(bits) == 3:

        if bits[1] != 'as':
            raise template.TemplateSyntaxError(syntax_message)
        context_name = bits[2]

        return LegalPageNode(context_name)
    else:
        raise template.TemplateSyntaxError(syntax_message)


@register.tag
def staticpage_url(parser, token):
    """Returns the internal URL for a static page based on its virtual path.

    Syntax::

        {% staticpage_url 'virtual/path' %}
    """
    bits = token.split_contents()
    syntax_message = ("%(tag_name)s expects a syntax of %(tag_name)s "
                      "'virtual/path'" %
                      dict(tag_name=bits[0]))
    quote_message = "%s tag's argument should be in quotes" % bits[0]

    if len(bits) == 2:
        virtual_path = bits[1]

        if (not (virtual_path[0] == virtual_path[-1] and
                 virtual_path[0] in ('"', "'"))):
            raise template.TemplateSyntaxError(quote_message)

        return StaticPageURLNode(virtual_path[1:-1])

    raise template.TemplateSyntaxError(syntax_message)


class StaticPageURLNode(template.Node):

    def __init__(self, virtual_path):
        self.virtual_path = virtual_path

    def render(self, context):
        return reverse('pootle-staticpages-display', args=[self.virtual_path])

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url

from .views import (AdminTemplateView, PageCreateView, PageDeleteView,
                    PageUpdateView)


urlpatterns = patterns('',
    url(r'^legal/agreement/$',
        'staticpages.views.legal_agreement',
        name='pootle-staticpages-legal-agreement'),
    url(r'^(?P<virtual_path>.+)/$',
        'staticpages.views.display_page',
        name='pootle-staticpages-display'),
)

admin_patterns = patterns('',
    url(r'^$',
        AdminTemplateView.as_view(),
        name='pootle-staticpages'),

    url(r'^(?P<page_type>[^/]+)/add/?$',
        PageCreateView.as_view(),
        name='pootle-staticpages-create'),
    url(r'^(?P<page_type>[^/]+)/(?P<pk>\d+)/?$',
        PageUpdateView.as_view(),
        name='pootle-staticpages-edit'),
    url(r'^(?P<page_type>[^/]+)/(?P<pk>\d+)/delete/?$',
        PageDeleteView.as_view(),
        name='pootle-staticpages-delete'),
)

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.contrib import messages
from django.core.exceptions import ObjectDoesNotExist
from django.core.urlresolvers import reverse_lazy
from django.http import Http404, HttpResponse
from django.shortcuts import redirect, render
from django.template import loader, RequestContext
from django.utils.translation import ugettext_lazy as _
from django.views.generic import (CreateView, DeleteView, TemplateView,
                                  UpdateView)

from pootle.core.views import SuperuserRequiredMixin
from pootle_misc.util import ajax_required, jsonify

from .forms import agreement_form_factory
from .models import AbstractPage, LegalPage, StaticPage


ANN_TYPE = u'announcements'
ANN_VPATH = ANN_TYPE + u'/'


class PageModelMixin(object):
    """Mixin used to set the view's page model according to the
    `page_type` argument caught in a url pattern.
    """

    def dispatch(self, request, *args, **kwargs):
        self.page_type = kwargs.get('page_type', None)
        self.model = {
            'legal': LegalPage,
            'static': StaticPage,
            ANN_TYPE: StaticPage,
        }.get(self.page_type)

        if self.model is None:
            raise Http404

        return super(PageModelMixin, self).dispatch(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        ctx = super(PageModelMixin, self).get_context_data(**kwargs)
        ctx.update({
            'has_page_model': True,
        })
        return ctx

    def get_form(self, form_class):
        form = super(PageModelMixin, self).get_form(form_class)

        if self.page_type == ANN_TYPE:
            form.fields['virtual_path'].help_text = u'/pages/' + ANN_VPATH

        return form

    def form_valid(self, form):
        if (self.page_type == ANN_TYPE and not
            form.cleaned_data['virtual_path'].startswith(ANN_VPATH)):
            orig_vpath = form.cleaned_data['virtual_path']
            form.instance.virtual_path = ANN_VPATH + orig_vpath

        return super(PageModelMixin, self).form_valid(form)


class AdminTemplateView(SuperuserRequiredMixin, TemplateView):

    template_name = 'admin/staticpages/page_list.html'

    def get_context_data(self, **kwargs):
        legal_pages = LegalPage.objects.all()
        static_pages = StaticPage.objects.exclude(
            virtual_path__startswith=ANN_VPATH,
        )
        announcements = StaticPage.objects.filter(
            virtual_path__startswith=ANN_VPATH,
        )

        ctx = super(AdminTemplateView, self).get_context_data(**kwargs)
        ctx.update({
            'legalpages': legal_pages,
            'staticpages': static_pages,
            ANN_TYPE: announcements,
        })
        return ctx


class PageCreateView(SuperuserRequiredMixin, PageModelMixin, CreateView):

    success_url = reverse_lazy('pootle-staticpages')
    template_name = 'admin/staticpages/page_create.html'

    def get_initial(self):
        initial = super(PageModelMixin, self).get_initial()

        initial_args = {
            'title': _('Page Title'),
        }

        if self.page_type != ANN_TYPE:
            next_page_number = AbstractPage.max_pk() + 1
            initial_args['virtual_path'] = _('page-%d', next_page_number)

        initial.update(initial_args)

        return initial

    def get_form(self, form_class):
        form = super(PageCreateView, self).get_form(form_class)

        if self.page_type == ANN_TYPE:
            del form.fields['url']
            form.fields['virtual_path'] \
                .widget.attrs['placeholder'] = u'<project_code>'

        return form


class PageUpdateView(SuperuserRequiredMixin, PageModelMixin, UpdateView):

    success_url = reverse_lazy('pootle-staticpages')
    template_name = 'admin/staticpages/page_update.html'

    def get_context_data(self, **kwargs):
        ctx = super(PageUpdateView, self).get_context_data(**kwargs)
        ctx.update({
            'show_delete': True,
            'page_type': self.page_type,
        })
        return ctx

    def get_form_kwargs(self):
        kwargs = super(PageUpdateView, self).get_form_kwargs()

        if self.page_type == ANN_TYPE:
            orig_vpath = self.object.virtual_path
            self.object.virtual_path = orig_vpath.replace(ANN_VPATH, '')
            kwargs.update({'instance': self.object})

        return kwargs


class PageDeleteView(SuperuserRequiredMixin, PageModelMixin, DeleteView):

    success_url = reverse_lazy('pootle-staticpages')


def display_page(request, virtual_path):
    """Displays an active page defined in `virtual_path`."""
    page = None
    for page_model in AbstractPage.__subclasses__():
        try:
            page = page_model.objects.live(request.user).get(
                    virtual_path=virtual_path,
                )
        except ObjectDoesNotExist:
            pass

    if page is None:
        raise Http404

    if page.url:
        return redirect(page.url)

    if request.user.is_superuser and not page.active:
        msg = _('This page is inactive and visible to administrators '
                'only. You can activate it by <a href="%s">editing its '
                'properties</a>', page.get_edit_url())
        messages.warning(request, msg)

    template_name = 'staticpages/page_display.html'
    if request.is_ajax():
        template_name = 'staticpages/_body.html'

    ctx = {
        'page': page,
    }
    return render(request, template_name, ctx)


@ajax_required
def legal_agreement(request):
    """Displays the pending documents to be agreed by the current user."""
    pending_pages = LegalPage.objects.pending_user_agreement(request.user)
    form_class = agreement_form_factory(pending_pages, request.user)

    rcode = 200
    agreed = False

    if request.method == 'POST':
        form = form_class(request.POST)

        if form.is_valid():
            # The user agreed, let's record the specific agreements
            agreed = True
            form.save()
        else:
            rcode = 400
    else:
        form = form_class()

    response = {'agreed': agreed}
    if not agreed:
        ctx = {
            'form': form,
        }
        template = loader.get_template('staticpages/agreement.html')
        response['form'] = template.render(RequestContext(request, ctx))

    return HttpResponse(jsonify(response), status=rcode,
                        mimetype='application/json')

########NEW FILE########
__FILENAME__ = api
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import url

from tastypie.resources import ModelResource
from tastypie.utils import trailing_slash


class StatisticsModelResource(ModelResource):
    """A ModelResource that provides support for /resource/pk/statistics/ URLs.

    In order to use this class you must redefine the method
    ``StatisticsModelResource.retrieve_statistics`` and provide the attribute
    ``statistics_allowed_methods`` on its Meta class.
    """
    def prepend_urls(self):
        """Return a list of urlpatterns to be prepend to the default one."""
        return [
            url(r"^(?P<resource_name>%s)/(?P<%s>\w[\w/-]*)/statistics%s$" %
                (self._meta.resource_name, self._meta.detail_uri_name,
                trailing_slash()), self.wrap_view('dispatch_statistics'),
                name="api_dispatch_statistics"),
        ]

    def dispatch_statistics(self, request, **kwargs):
        """Handle the HTTP methods on a single resource statistics.

        Relies on ``Resource.dispatch`` for the heavy-lifting.
        """
        return self.dispatch('statistics', request, **kwargs)

    def get_statistics(self, request, **kwargs):
        """Just call ``Resource.get_detail``.

        This gets called in ``Resource.dispatch``
        """
        return self.get_detail(request, **kwargs)

    def retrieve_statistics(self, bundle):
        """Retrieve the statistics for the current resource object.

        This must be implemented in the subclass.
        """
        raise NotImplementedError()

    def dehydrate(self, bundle):
        """A hook to allow final manipulation of data.

        It is run after all fields/methods have built out the dehydrated data.

        Useful if you need to access more than one dehydrated field or want to
        annotate on additional data.

        Must return the modified bundle.
        """
        if bundle.request.path.endswith("/statistics/"):
            bundle.data['statistics'] = self.retrieve_statistics(bundle)
        return bundle

########NEW FILE########
__FILENAME__ = ldap_backend
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009 Mozilla Corporation
# Copyright 2009, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging

import ldap
import ldap.filter  # It is necessary to explicitly import ldap.filter.

from django.conf import settings
from django.contrib.auth.models import User


class LdapBackend(object):
    """Django authentication module which implements LDAP authentication.

    To use this module, simply add it to the tuple AUTHENTICATION_BACKENDS in
    settings.py.
    """
    def authenticate(self, username=None, password=None):

        logger = logging.getLogger('pootle.auth.ldap')

        ldo = ldap.initialize(settings.AUTH_LDAP_SERVER)
        ldo.set_option(ldap.OPT_PROTOCOL_VERSION, 3)

        try:
            ldo.simple_bind_s(settings.AUTH_LDAP_ANON_DN,
                              settings.AUTH_LDAP_ANON_PASS)

            result = ldo.search_s(
                settings.AUTH_LDAP_BASE_DN,
                ldap.SCOPE_SUBTREE,
                (settings.AUTH_LDAP_FILTER %
                 ldap.filter.escape_filter_chars(username)),
                settings.AUTH_LDAP_FIELDS.values()
            )

            if len(result) != 1:
                logger.debug("More or less than 1 matching account for (%s).  "
                             "Failing LDAP auth." % username)
                return None

        except ldap.INVALID_CREDENTIALS:
            logger.exception('Anonymous bind to LDAP server failed. Please '
                             'check the username and password.')
            return None
        except Exception as e:
            logger.exception('Unknown LDAP error: ' + str(e))
            return None

        try:
            ldo.simple_bind_s(result[0][0], password)
            logger.debug("Successful LDAP login for user (%s)" % (username))

            try:
                user = User.objects.get(username=username)
                return user
            except User.DoesNotExist:
                logger.info("First login for LDAP user (%s). Creating new "
                            "account." % username)
                user = User(username=username, is_active=True)
                user.set_unusable_password()
                for i in settings.AUTH_LDAP_FIELDS:
                    if i != 'dn' and len(settings.AUTH_LDAP_FIELDS[i]) > 0:
                        setattr(user, i,
                                result[0][1][settings.AUTH_LDAP_FIELDS[i]][0])
                user.save()
                return user

        # Bad e-mail or password.
        except (ldap.INVALID_CREDENTIALS, ldap.UNWILLING_TO_PERFORM):
            logger.debug("No account or bad credentials for (%s). Failing "
                         "LDAP auth." % username)
            return None
        except Exception as e:  # No other exceptions are normal.
            logger.exception('Unknown LDAP error: ' + str(e))
            raise

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None

########NEW FILE########
__FILENAME__ = browser
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse
from django.utils.translation import ugettext_lazy as _


HEADING_CHOICES = [
    {
        'id': 'name',
        'class': 'stats',
        'display_name': _("Name"),
    },
    {
        'id': 'project',
        'class': 'stats',
        'display_name': _("Project"),
    },
    {
        'id': 'language',
        'class': 'stats',
        'display_name': _("Language"),
    },
    {
        'id': 'priority',
        'class': 'stats-number sorttable_numeric',
        # Translators: Heading representing the priority for a goal
        'display_name': _("Priority"),
    },
    {
        'id': 'progress',
        'class': 'stats',
        # Translators: noun. The graphical representation of translation status
        'display_name': _("Progress"),
    },
    {
        'id': 'total',
        'class': 'stats-number sorttable_numeric when-loaded',
        # Translators: Heading representing the total number of words of a file
        # or directory
        'display_name': _("Total"),
    },
    {
        'id': 'need-translation',
        'class': 'stats-number sorttable_numeric when-loaded',
        'display_name': _("Need Translation"),
    },
    {
        'id': 'suggestions',
        'class': 'stats-number sorttable_numeric when-loaded',
        # Translators: The number of suggestions pending review
        'display_name': _("Suggestions"),
    },
    {
        'id': 'critical',
        'class': 'stats-number sorttable_numeric when-loaded',
        'display_name': _("Critical"),
    },
    {
        'id': 'last-updated',
        'class': 'stats sorttable_numeric when-loaded',
        'display_name': _("Last updated"),
    },
    {
        'id': 'activity',
        'class': 'stats sorttable_numeric when-loaded',
        'display_name': _("Last Activity"),
    },
    # NOTE: 'tags' heading is not included here on purpose to avoid the
    # creation of such column in the table. Tags are instead shown in a new row
    # that keeps the same color scheme.
]


def get_table_headings(choices):
    """Filter the list of available table headings to the given `choices`."""
    return filter(lambda x: x['id'] in choices, HEADING_CHOICES)


def make_generic_item(path_obj):
    """Template variables for each row in the table."""
    return {
        'href': path_obj.get_absolute_url(),
        'href_all': path_obj.get_translate_url(),
        'href_todo': path_obj.get_translate_url(state='incomplete'),
        'href_sugg': path_obj.get_translate_url(state='suggestions'),
        'href_critical': path_obj.get_critical_url(),
        'title': path_obj.name,
        'code': path_obj.code
    }


def make_directory_item(directory):
    item = make_generic_item(directory)
    item.update({
        'icon': 'folder',
    })
    return item


def make_store_item(store):
    item = make_generic_item(store)
    item.update({
        'icon': 'file',
    })
    return item


def get_parent(directory):
    parent_dir = directory.parent

    if not (parent_dir.is_language() or parent_dir.is_project()):
        return {
            'icon': 'folder-parent',
            'title': _("Back to parent folder"),
            'href': parent_dir.get_absolute_url()
        }
    else:
        return None


def make_project_item(translation_project):
    item = make_generic_item(translation_project)
    item.update({
        'icon': 'project',
        'title': translation_project.project.name,
    })
    return item


def make_language_item(translation_project):
    item = make_generic_item(translation_project)
    item.update({
        'icon': 'language',
        'title': translation_project.language.name,
    })
    return item


def make_xlanguage_item(resource_obj):
    translation_project = resource_obj.translation_project
    item = make_generic_item(resource_obj)
    item.update({
        'icon': 'language',
        'code': translation_project.language.code,
        'title': translation_project.language.name,
    })
    return item


def make_project_list_item(project):
    item = make_generic_item(project)
    item.update({
        'icon': 'project',
        'title': project.fullname,
    })
    return item


def get_children(directory):
    """Return a list of children directories and stores for this ``directory``.

    The elements of the list are dictionaries which keys are populated after in
    the templates.
    """
    directories = [make_directory_item(child_dir)
                   for child_dir in directory.child_dirs.iterator()]

    stores = [make_store_item(child_store)
              for child_store in directory.child_stores.iterator()]

    return directories + stores


################################ Goal specific ################################

def make_goal_dir_item(directory, goal):
    return {
        'href': goal.get_drill_down_url_for_path(directory.pootle_path),
        'href_all': goal.get_translate_url_for_path(directory.pootle_path),
        'href_todo': goal.get_translate_url_for_path(directory.pootle_path,
                                                     state='incomplete'),
        'href_sugg': goal.get_translate_url_for_path(directory.pootle_path,
                                                     state='suggestions'),
        'href_critical': goal.get_critical_url_for_path(directory.pootle_path),
        'title': directory.name,
        'code': directory.code,
        'icon': 'folder',
    }


def make_goal_store_item(store, goal):
    item = make_store_item(store)
    item.update({
        'href': goal.get_drill_down_url_for_path(store.pootle_path),
    })
    return item


def get_goal_parent(directory, goal):
    """Return the parent directory in a drill down view.

    If the parent directory is the directory for a language or a project then
    return an item pointing at the goals tab.
    """
    parent_dir = directory.parent

    if not (parent_dir.is_language() or parent_dir.is_project()):
        parent_path = directory.parent.pootle_path
        return {
            'icon': 'folder-parent',
            'title': _("Back to parent folder"),
            'href': goal.get_drill_down_url_for_path(parent_path),
        }
    else:
        return None


def get_goal_children(directory, goal):
    """Return a list of children directories and stores for this ``directory``
    that in the provided stores,
    and also the parent directory.

    The elements of the list are dictionaries which keys are populated after
    in the templates.
    """
    # Get the stores and subdirectories for this goal in the current directory.
    dir_stores, dir_subdirs = goal.get_children_for_path(directory.pootle_path)

    # Now get and return the items for those stores and subdirectories.
    directories = [make_goal_dir_item(child_dir, goal)
                   for child_dir in dir_subdirs]

    stores = [make_goal_store_item(child_store, goal)
              for child_store in dir_stores]

    return directories + stores

########NEW FILE########
__FILENAME__ = cache
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.


def make_method_key(model, method, key):
    """Creates a cache key for model's `method` method.

    :param model: A model instance
    :param method: Method name to cache
    :param key: a unique key to identify the object to be cached
    """
    prefix = 'method-cache'
    name = (model.__name__ if hasattr(model, '__name__')
                           else model.__class__.__name__)
    return u':'.join([prefix, name, method, key])

########NEW FILE########
__FILENAME__ = decorators
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from functools import wraps

from django.core.exceptions import PermissionDenied
from django.core.urlresolvers import reverse
from django.http import Http404
from django.shortcuts import get_object_or_404, redirect
from django.utils.translation import ugettext as _

from pootle_app.models.directory import Directory
from pootle_app.models.permissions import (check_permission,
                                           get_matching_permissions)
from pootle_language.models import Language
from pootle_profile.models import get_profile
from pootle_project.models import Project, ProjectResource
from pootle_project.models import Project, ProjectResource, ProjectSet
from pootle_store.models import Store
from pootle_translationproject.models import TranslationProject

from .exceptions import Http400
from .url_helpers import split_pootle_path


CLS2ATTR = {
    'TranslationProject': 'translation_project',
    'Project': 'project',
    'Language': 'language',
}


def get_path_obj(func):
    @wraps(func)
    def wrapped(request, *args, **kwargs):
        language_code = kwargs.pop('language_code', None)
        project_code = kwargs.pop('project_code', None)
        if request.is_ajax():
            pootle_path = request.GET.get('path', None)
            if pootle_path is not None:
                language_code, project_code, dir_path, filename = \
                    split_pootle_path(pootle_path)
                kwargs['dir_path'] = dir_path
                kwargs['filename'] = filename

        if language_code and project_code:
            try:
                path_obj = TranslationProject.objects.enabled().get(
                    language__code=language_code,
                    project__code=project_code,
                    project__disabled=False
                )
            except TranslationProject.DoesNotExist:
                path_obj = None

            if path_obj is None and not request.is_ajax():
                # Explicit selection via the UI: redirect either to
                # ``/language_code/`` or ``/projects/project_code/``.
                user_choice = request.COOKIES.get('user-choice', None)
                if user_choice and user_choice in ('language', 'project',):
                    url = {
                        'language': reverse('pootle-language-overview',
                                            args=[language_code]),
                        'project': reverse('pootle-project-overview',
                                           args=[project_code, '', '']),
                    }
                    response = redirect(url[user_choice])
                    response.delete_cookie('user-choice')

                    return response

                raise Http404
        elif language_code:
            path_obj = get_object_or_404(Language, code=language_code)
        elif project_code:
            path_obj = get_object_or_404(Project, code=project_code,
                                         disabled=False)
        else:  # No arguments: all user-accessible projects
            user_projects = Project.accessible_by_user(request.user)
            user_projects = Project.objects.filter(code__in=user_projects)
            path_obj = ProjectSet(user_projects, '/projects/')

            # HACKISH: inject directory so that permissions can be
            # queried
            directory = Directory.objects.get(pootle_path='/projects/')
            setattr(path_obj, 'directory', directory)

        request.ctx_obj = path_obj
        request.ctx_path = path_obj.pootle_path
        request.resource_obj = path_obj
        request.pootle_path = path_obj.pootle_path

        return func(request, path_obj, *args, **kwargs)

    return wrapped


def set_resource(request, path_obj, dir_path, filename):
    """Load :cls:`pootle_app.models.Directory` and
    :cls:`pootle_store.models.Store` models and populate the request
    object.

    :param path_obj: A path-like object object.
    :param dir_path: Path relative to the root of `path_obj`.
    :param filename: Optional filename.
    """
    obj_directory = getattr(path_obj, 'directory', path_obj)
    ctx_path = obj_directory.pootle_path
    resource_path = dir_path
    pootle_path = ctx_path + dir_path

    directory = None
    store = None

    if filename:
        pootle_path = pootle_path + filename
        resource_path = resource_path + filename

        try:
            store = Store.objects.select_related(
                'translation_project',
                'parent',
            ).get(pootle_path=pootle_path)
            directory = store.parent
        except Store.DoesNotExist:
            raise Http404

    if directory is None:
        if dir_path:
            directory = get_object_or_404(Directory,
                                          pootle_path=pootle_path)
        else:
            directory = obj_directory

    request.store = store
    request.directory = directory
    request.pootle_path = pootle_path

    request.resource_obj = store or (directory if dir_path else path_obj)
    request.resource_path = resource_path
    request.ctx_obj = path_obj or request.resource_obj
    request.ctx_path = ctx_path


def set_project_resource(request, path_obj, dir_path, filename):
    """Loads :cls:`pootle_app.models.Directory` and
    :cls:`pootle_store.models.Store` models and populates the
    request object.

    This is the same as `set_resource` but operates at the project level
    across all languages.

    :param path_obj: A :cls:`pootle_project.models.Project` object.
    :param dir_path: Path relative to the root of `path_obj`.
    :param filename: Optional filename.
    """
    query_ctx_path = ''.join(['/%/', path_obj.code, '/'])
    query_pootle_path = query_ctx_path + dir_path

    obj_directory = getattr(path_obj, 'directory', path_obj)
    ctx_path = obj_directory.pootle_path
    resource_path = dir_path
    pootle_path = ctx_path + dir_path

    if filename:
        query_pootle_path = query_pootle_path + filename
        pootle_path = pootle_path + filename
        resource_path = resource_path + filename

        resources = Store.objects.extra(
            where=[
                'pootle_store_store.pootle_path LIKE %s',
                'pootle_store_store.pootle_path NOT LIKE %s',
            ], params=[query_pootle_path, '/templates/%']
        ).select_related('translation_project__language')
    else:
        resources = Directory.objects.extra(
            where=[
                'pootle_app_directory.pootle_path LIKE %s',
                'pootle_app_directory.pootle_path NOT LIKE %s',
            ], params=[query_pootle_path, '/templates/%']
        ).select_related('parent')

    if not resources.exists():
        raise Http404

    request.store = None
    request.directory = None
    request.pootle_path = pootle_path

    request.resource_obj = ProjectResource(resources, pootle_path)
    request.resource_path = resource_path
    request.ctx_obj = path_obj or request.resource_obj
    request.ctx_path = ctx_path


def get_resource(func):
    @wraps(func)
    def wrapped(request, path_obj, dir_path, *args, **kwargs):
        """Get resources associated to the current context."""
        filename = kwargs.pop('filename', '')

        try:
            directory = getattr(path_obj, 'directory', path_obj)
            if directory.is_project() and (dir_path or filename):
                set_project_resource(request, path_obj, dir_path, filename)
            else:
                set_resource(request, path_obj, dir_path, filename)
        except Http404:
            if not request.is_ajax():
                user_choice = request.COOKIES.get('user-choice', None)
                if user_choice and user_choice in ('language', 'resource',):
                    project = (path_obj if isinstance(path_obj, Project)
                                        else path_obj.project)
                    url = reverse('pootle-project-overview',
                                  args=[project.code, dir_path, filename])
                    response = redirect(url)
                    response.delete_cookie('user-choice')

                    return response

            raise Http404

        return func(request, path_obj, dir_path=dir_path, filename=filename, *args, **kwargs)

    return wrapped


def permission_required(permission_code):
    """Check for `permission_code` in the current context.

    To retrieve the proper context, the `get_path_obj` decorator must be
    used along with this decorator.
    """
    def wrapped(func):
        @wraps(func)
        def _wrapped(request, *args, **kwargs):
            path_obj = args[0]
            directory = getattr(path_obj, 'directory', path_obj)

            # HACKISH: some old code relies on  `request.translation_project`,
            # `request.language` etc. being set, so we need to set that too.
            attr_name = CLS2ATTR.get(path_obj.__class__.__name__,
                                     'path_obj')
            setattr(request, attr_name, path_obj)

            request.profile = get_profile(request.user)
            request.permissions = get_matching_permissions(request.profile,
                                                           directory)

            if not permission_code:
                return func(request, *args, **kwargs)

            if not check_permission(permission_code, request):
                raise PermissionDenied(
                    _("Insufficient rights to access this page."),
                )

            return func(request, *args, **kwargs)
        return _wrapped
    return wrapped


def admin_required(func):
    @wraps(func)
    def wrapped(request, *args, **kwargs):
        if not request.user.is_superuser:
            raise PermissionDenied(
                _("You do not have rights to administer Pootle.")
            )
        return func(request, *args, **kwargs)

    return wrapped

########NEW FILE########
__FILENAME__ = exceptions
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.


class Http400(Exception):
    pass

########NEW FILE########
__FILENAME__ = forms
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2010-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import base64
import json
import logging
import re
import time
from hashlib import sha1
from random import randint

from django import forms
from django.conf import settings
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext as _

from pootle_misc.util import jsonify


# MathCaptchaForm Copyright (c) 2007, Dima Dogadaylo (www.mysoftparade.com)
# Copied from http://djangosnippets.org/snippets/506/
# GPL compatible According to djangosnippets terms and conditions
class MathCaptchaForm(forms.Form):
    """Lightweight mathematical captcha where human is asked to solve
    a simple mathematical calculation like 3+5=?. It don't use database
    and don't require external libraries.

    From concatenation of time, question, answer, settings.SITE_URL and
    settings.SECRET_KEY is built hash that is validated on each form
    submission. It makes impossible to "record" valid captcha form
    submission and "replay" it later - form will not be validated
    because captcha will be expired.

    For more info see:
    http://www.mysoftparade.com/blog/improved-mathematical-captcha/
    """
    captcha_answer = forms.CharField(
        max_length=2,
        required=True,
        widget=forms.TextInput(attrs={'size': '2'}),
        label='',
    )
    captcha_token = forms.CharField(
        max_length=200,
        required=True,
        widget=forms.HiddenInput(),
    )

    A_RE = re.compile("^(\d+)$")

    def __init__(self, *args, **kwargs):
        """Initialize captcha_question and captcha_token for the form."""
        super(MathCaptchaForm, self).__init__(*args, **kwargs)

        # Reset captcha for unbound forms.
        if not self.data:
            self.reset_captcha()

    def reset_captcha(self):
        """Generate new question and valid token for it, reset previous answer
        if any.
        """
        q, a = self._generate_captcha()
        expires = time.time() + getattr(settings, 'CAPTCHA_EXPIRES_SECONDS',
                                        60*60)
        token = self._make_token(q, a, expires)
        self.initial['captcha_token'] = token
        self._plain_question = q
        # Reset captcha fields for bound form.
        if self.data:
            def _reset():
                self.data['captcha_token'] = token
                self.data['captcha_answer'] = ''
            if hasattr(self.data, '_mutable') and not self.data._mutable:
                self.data._mutable = True
                _reset()
                self.data._mutable = False
            else:
                _reset()

        self.fields['captcha_answer'].label = mark_safe(self.knotty_question)

    def _generate_captcha(self):
        """Generate question and return it along with correct answer."""
        a, b = randint(1, 9), randint(1, 9)
        return ("%s+%s" % (a, b), a+b)

    def _make_token(self, q, a, expires):
        data = base64.urlsafe_b64encode(jsonify({'q': q, 'expires': expires}))
        return self._sign(q, a, expires) + data

    def _sign(self, q, a, expires):
        plain = [getattr(settings, 'SITE_URL', ''), settings.SECRET_KEY,
                 q, a, expires]
        plain = "".join([str(p) for p in plain])
        return sha1(plain).hexdigest()

    @property
    def plain_question(self):
        return self._plain_question

    @property
    def knotty_question(self):
        """Wrap plain_question in some invisibe for humans markup with random
        nonexisted classes, that makes life of spambots a bit harder because
        form of question is vary from request to request.
        """
        digits = self._plain_question.split('+')
        return "+".join(['<span class="captcha-random-%s">%s</span>' %
                         (randint(1, 9), d) for d in digits])

    def clean_captcha_token(self):
        t = self._parse_token(self.cleaned_data['captcha_token'])
        if time.time() > t['expires']:
            raise forms.ValidationError(_("Time to answer has expired"))
        self._plain_question = t['q']
        return t

    def _parse_token(self, t):
        try:
            sign, data = t[:40], t[40:]
            data = json.loads(base64.urlsafe_b64decode(str(data)))
            return {
                'q': data['q'],
                'expires': float(data['expires']),
                'sign': sign,
            }
        except Exception as e:
            logging.info("Captcha error: %r" % e)
            # l10n for bots? Rather not.
            raise forms.ValidationError("Invalid captcha!")

    def clean_captcha_answer(self):
        a = self.A_RE.match(self.cleaned_data.get('captcha_answer'))
        if not a:
            raise forms.ValidationError(_("Enter a number"))
        return int(a.group(0))

    def clean(self):
        """Check captcha answer."""
        cd = self.cleaned_data
        # Don't check captcha if no answer.
        if 'captcha_answer' not in cd:
            return cd

        t = cd.get('captcha_token')
        if t:
            form_sign = self._sign(t['q'], cd['captcha_answer'],
                                   t['expires'])
            if form_sign != t['sign']:
                self._errors['captcha_answer'] = [_("Incorrect")]
        else:
            self.reset_captcha()
        return super(MathCaptchaForm, self).clean()

########NEW FILE########
__FILENAME__ = helpers
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from itertools import groupby

from django.conf import settings
from django.utils.translation import ugettext as _

from pootle_app.models.permissions import check_permission
from pootle_misc.checks import check_names, get_qualitycheck_schema
from pootle_misc.forms import make_search_form
from pootle_misc.stats import get_translation_states
from pootle_store.models import Unit
from pootle_store.views import get_step_query

from .url_helpers import get_path_parts, get_previous_url


def get_filter_name(GET):
    """Get current filter's human-readable name.

    :param GET: A copy of ``request.GET``.
    :return: Two-tuple with the filter name, and a list of extra arguments
        passed to the current filter.
    """
    filter = extra = None

    if 'filter' in GET:
        filter = GET['filter']

        if filter.startswith('user-'):
            extra = [GET.get('user', _('User missing'))]
        elif filter == 'checks' and 'checks' in GET:
            extra = map(lambda check: check_names.get(check, check),
                        GET['checks'].split(','))
    elif 'search' in GET:
        filter = 'search'

        extra = [GET['search']]
        if 'sfields' in GET:
            extra.extend(GET['sfields'].split(','))

    filter_name = {
        'all': _('All'),
        'translated': _('Translated'),
        'untranslated': _('Untranslated'),
        'fuzzy': _('Needs work'),
        'incomplete': _('Incomplete'),
        # Translators: This is the name of a filter
        'search': _('Search'),
        'checks': _('Checks'),
        'my-submissions': _('My submissions'),
        'user-submissions': _('Submissions'),
        'my-submissions-overwritten': _('My overwritten submissions'),
        'user-submissions-overwritten': _('Overwritten submissions'),
    }.get(filter)

    return (filter_name, extra)


def get_translation_context(request, is_terminology=False):
    """Return a common context for translation views.

    :param request: a :cls:`django.http.HttpRequest` object.
    :param is_terminology: boolean indicating if the translation context
        is relevant to a terminology project.
    """
    resource_path = getattr(request, 'resource_path', '')

    return {
        'page': 'translate',

        'cantranslate': check_permission("translate", request),
        'cansuggest': check_permission("suggest", request),
        'canreview': check_permission("review", request),
        'is_admin': check_permission('administrate', request),
        'profile': request.profile,

        'pootle_path': request.pootle_path,
        'ctx_path': request.ctx_path,
        'resource_path': resource_path,
        'resource_path_parts': get_path_parts(resource_path),

        'check_categories': get_qualitycheck_schema(),

        'search_form': make_search_form(request=request,
                                        terminology=is_terminology),

        'previous_url': get_previous_url(request),

        'MT_BACKENDS': settings.MT_BACKENDS,
        'LOOKUP_BACKENDS': settings.LOOKUP_BACKENDS,
        'AMAGAMA_URL': settings.AMAGAMA_URL,
    }


def get_export_view_context(request):
    """Returns a common context for export views.

    :param request: a :cls:`django.http.HttpRequest` object.
    """
    filter_name, filter_extra = get_filter_name(request.GET)

    units_qs = Unit.objects.get_for_path(request.pootle_path,
                                         request.profile)
    units = get_step_query(request, units_qs)
    unit_groups = [(path, list(units)) for path, units in
                   groupby(units, lambda x: x.store.pootle_path)]
    return {
        'unit_groups': unit_groups,

        'filter_name': filter_name,
        'filter_extra': filter_extra
    }


def get_overview_context(request):
    """Return a common context for overview browser pages.

    :param request: a :cls:`django.http.HttpRequest` object.
    """
    resource_obj = request.resource_obj
    resource_path = getattr(request, 'resource_path', '')

    url_action_continue = resource_obj.get_translate_url(state='incomplete')
    url_action_fixcritical = resource_obj.get_critical_url()
    url_action_review = resource_obj.get_translate_url(state='suggestions')
    url_action_view_all = resource_obj.get_translate_url(state='all')
    url_action_next_goal = resource_obj.get_next_goal_url()

    return {
        'page': 'overview',

        'pootle_path': request.pootle_path,
        'resource_obj': resource_obj,
        'resource_path': resource_path,
        'resource_path_parts': get_path_parts(resource_path),

        'translation_states': get_translation_states(resource_obj),
        'check_categories': get_qualitycheck_schema(resource_obj),

        'url_action_continue': url_action_continue,
        'url_action_fixcritical': url_action_fixcritical,
        'url_action_review': url_action_review,
        'url_action_view_all': url_action_view_all,
        'url_action_next_goal': url_action_next_goal,
    }

########NEW FILE########
__FILENAME__ = initdb
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging

from translate.__version__ import build as CODE_TTK_BUILD_VERSION
from translate.lang import data, factory

from django.conf import settings
from django.contrib.auth.models import User, Permission
from django.contrib.contenttypes.models import ContentType
from django.contrib.sites.models import Site
from django.core.management import call_command
from django.db import transaction
from django.utils.translation import ugettext_noop as _

from pootle.__version__ import build as CODE_PTL_BUILD_VERSION
from pootle_app.models import Directory, PootleConfig
from pootle_app.models.permissions import PermissionSet, get_pootle_permission
from pootle_app.models import PootleSite
from pootle_language.models import Language
from pootle_profile.models import PootleProfile
from pootle_project.models import Project
from pootle_store.models import TMUnit, Unit
from pootle_store.util import TRANSLATED


def initdb():
    """Populate the database with default initial data.

    This creates the default database to get a working Pootle installation.
    """
    create_essential_users()
    create_root_directories()
    create_template_languages()
    create_terminology_project()
    create_pootle_permissions()
    create_pootle_permission_sets()

    create_default_projects()
    create_default_languages()
    create_default_admin()

    create_default_pootle_site(settings.TITLE, settings.DESCRIPTION)

    create_local_tm()

    save_build_versions()


def create_essential_users():
    """Create the 'default', 'nobody' and 'system' User instances.

    The 'default' and 'nobody' users are required for Pootle's permission
    system.

    The 'system' user is required for logging the actions performed by the
    management commands.
    """
    # The nobody user is used to represent an anonymous user in cases where
    # we need to associate model information with such a user. An example is
    # in the permission system: we need a way to store rights for anonymous
    # users; thus we use the nobody user.
    criteria = {
        'username': u"nobody",
        'first_name': u"any anonymous user",
        'is_active': True,
    }
    nobody, created = User.objects.get_or_create(**criteria)
    if created:
        nobody.set_unusable_password()
        nobody.save()

    # The 'default' user represents any valid, non-anonymous user and is used
    # to associate information any such user. An example is in the permission
    # system: we need a way to store default rights for users. We use the
    # 'default' user for this.
    #
    # In a future version of Pootle we should think about using Django's
    # groups to do better permissions handling.
    criteria = {
        'username': u"default",
        'first_name': u"any authenticated user",
        'is_active': True,
    }
    default, created = User.objects.get_or_create(**criteria)
    if created:
        default.set_unusable_password()
        default.save()

    # Now create the 'system' user.
    create_system_user()


def create_system_user():
    """Create the 'system' User instance.

    The 'system' user represents a system, and is used to associate updates
    done by bulk commands as update_stores.
    """
    criteria = {
        'username': u"system",
        'first_name': u"system user",
        'is_active': True,
    }
    system, created = User.objects.get_or_create(**criteria)
    if created:
        system.set_unusable_password()
        system.save()


def create_pootle_permissions():
    """Create Pootle's directory level permissions."""

    args = {
        'app_label': "pootle_app",
        'model': "directory",
    }
    pootle_content_type, created = ContentType.objects.get_or_create(**args)
    pootle_content_type.name = 'pootle'
    pootle_content_type.save()

    # Create the permissions.
    permissions = [
        {
            'name': _("Can view a project"),
            'codename': "view",
        },
        {
            'name': _("Can make a suggestion for a translation"),
            'codename': "suggest",
        },
        {
            'name': _("Can submit a translation"),
            'codename': "translate",
        },
        {
            'name': _("Can overwrite translations on uploading files"),
            'codename': "overwrite",
        },
        {
            'name': _("Can review translations"),
            'codename': "review",
        },
        {
            'name': _("Can download archives of translation projects"),
            'codename': "archive",
        },
        {
            'name': _("Can administrate a translation project"),
            'codename': "administrate",
        },
        {
            'name': _("Can commit to version control"),
            'codename': "commit",
        },
    ]

    criteria = {
        'content_type': pootle_content_type,
    }

    for permission in permissions:
        criteria.update(permission)
        obj, created = Permission.objects.get_or_create(**criteria)


def create_pootle_permission_sets():
    """Create the default permission set for the 'nobody' and 'default' users.

    'nobody' is the anonymous (non-logged in) user, and 'default' is the logged
    in user.
    """
    nobody = PootleProfile.objects.get(user__username='nobody')
    default = PootleProfile.objects.get(user__username='default')

    view = get_pootle_permission('view')
    suggest = get_pootle_permission('suggest')
    translate = get_pootle_permission('translate')
    archive = get_pootle_permission('archive')

    # Default permissions for tree root.
    criteria = {
        'profile': nobody,
        'directory': Directory.objects.root,
    }
    permission_set, created = PermissionSet.objects.get_or_create(**criteria)
    if created:
        permission_set.positive_permissions = [view, suggest]
        permission_set.save()

    criteria['profile'] = default
    permission_set, created = PermissionSet.objects.get_or_create(**criteria)
    if created:
        permission_set.positive_permissions = [view, suggest, translate,
                                               archive]
        permission_set.save()

    # Default permissions for templates language.
    # Override with no permissions for templates language.
    criteria = {
        'profile': nobody,
        'directory': Directory.objects.get(pootle_path="/templates/"),
    }
    permission_set, created = PermissionSet.objects.get_or_create(**criteria)
    if created:
        permission_set.positive_permissions = []
        permission_set.save()

    criteria['profile'] = default
    permission_set, created = PermissionSet.objects.get_or_create(**criteria)
    if created:
        permission_set.positive_permissions = []
        permission_set.save()


def require_english():
    """Create the English Language item."""
    criteria = {
        'code': "en",
        'fullname': u"English",
        'nplurals': 2,
        'pluralequation': "(n != 1)",
    }
    en, created = Language.objects.get_or_create(**criteria)
    return en


def create_root_directories():
    """Create the root Directory items."""
    root, created = Directory.objects.get_or_create(name='')
    projects, created = Directory.objects.get_or_create(name='projects',
                                                        parent=root)
    goals, created = Directory.objects.get_or_create(name='goals', parent=root)


def create_template_languages():
    """Create the 'templates' and English languages.

    The 'templates' language is used to give users access to the untranslated
    template files.
    """
    templates, created = Language.objects.get_or_create(code="templates",
                                                        fullname=u'Templates')
    require_english()


def create_terminology_project():
    """Create the terminology project.

    The terminology project is used to display terminology suggestions while
    translating.
    """
    criteria = {
        'code': "terminology",
        'fullname': u"Terminology",
        'source_language': require_english(),
        'checkstyle': "terminology",
    }
    terminology, created = Project.objects.get_or_create(**criteria)


def create_default_projects():
    """Create the default projects that we host.

    You might want to add your projects here, although you can also add things
    through the web interface later.
    """
    en = require_english()

    #criteria = {
    #    'code': u"pootle",
    #    'source_language': en,
    #    'fullname': u"Pootle",
    #    'description': ('<div dir="ltr" lang="en">Interface translations for '
    #                    'Pootle.<br />See the <a href="http://'
    #                    'pootle.locamotion.org">official Pootle server</a> '
    #                    'for the translations of Pootle.</div>')
    #    'checkstyle': "standard",
    #    'localfiletype': "po",
    #    'treestyle': "auto",
    #}
    #pootle = Project(**criteria)
    #pootle.save()

    criteria = {
        'code': u"tutorial",
        'source_language': en,
        'fullname': u"Tutorial",
        'description': ('<div dir="ltr" lang="en">Tutorial project where '
                        'users can play with Pootle and learn more about '
                        'translation and localisation.<br />For more help on '
                        'localisation, visit the <a href="http://'
                        'docs.translatehouse.org/projects/localization-guide/'
                        'en/latest/guide/start.html">localisation guide</a>.'
                        '</div>'),
        'checkstyle': "standard",
        'localfiletype': "po",
        'treestyle': "auto",
    }
    tutorial = Project(**criteria)
    tutorial.save()


def create_default_languages():
    """Create the default languages."""

    # Import languages from toolkit.
    for code in data.languages.keys():
        try:
            tk_lang = factory.getlanguage(code)
            criteria = {
                'code': code,
                'fullname': tk_lang.fullname,
                'nplurals': tk_lang.nplurals,
                'pluralequation': tk_lang.pluralequation,
            }
            try:
                criteria['specialchars'] = tk_lang.specialchars
            except AttributeError:
                pass
            lang, created = Language.objects.get_or_create(**criteria)
        except:
            pass


def create_default_admin():
    """Create the default admin user for Pootle.

    You definitely want to change the admin account so that your default
    install is not accessible with the default credentials. The users 'noboby'
    and 'default' should be left as is.
    """
    criteria = {
        'username': u"admin",
        'first_name': u"Administrator",
        'is_active': True,
        'is_superuser': True,
        'is_staff': True,
    }
    admin = User(**criteria)
    admin.set_password("admin")
    admin.save()


def create_default_pootle_site(site_title, site_description):
    """Create a PootleSite object to store the site title and description."""
    # Get or create a Site object.
    site, created = Site.objects.get_or_create(pk=settings.SITE_ID)
    if created:
        # FIXME: If possible try to retrieve the domain and name from settings.
        site.domain = u"example.com"
        site.name = u"example.com"
        site.save()

    # Create the PootleSite object.
    pootle_site = PootleSite(
        site=site,
        title=site_title,
        description=site_description,
    )
    pootle_site.save()


def create_local_tm():
    """Create the local TM using translations from existing projects.

    Iterates over all the translation units and creates the corresponding local
    TM units.
    """
    logging.info('About to create local TM using existing translations')

    with transaction.commit_on_success():
        for unit in Unit.objects.filter(state__gte=TRANSLATED).iterator():
            tmunit = TMUnit().create(unit)
            tmunit.save()

        logging.info('Successfully created local TM from existing translations')


def save_build_versions():
    """Save the Pootle and Translate Toolkit build versions on the database.

    The build versions are used to upgrade only what has to be upgraded.
    """
    pootle_config = PootleConfig(
        ptl_build=CODE_PTL_BUILD_VERSION,
        ttk_build=CODE_TTK_BUILD_VERSION
    )
    pootle_config.save()

########NEW FILE########
__FILENAME__ = log
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import logging


# Log actions
TRANSLATION_ADDED = 'A'
TRANSLATION_CHANGED = 'C'
TRANSLATION_DELETED = 'D'
UNIT_ADDED = 'UA'
UNIT_DELETED = 'UD'
UNIT_OBSOLETE = 'UO'
STORE_ADDED = 'SA'
STORE_DELETED = 'SD'
CMD_EXECUTED = 'X'
MUTE_QUALITYCHECK = "QM"
UNMUTE_QUALITYCHECK = "QU"


def action_log(*args, **kwargs):
    logger = logging.getLogger('action')
    d = {}
    for p in ['user', 'lang', 'action', 'unit', 'path']:
        d[p] = kwargs.pop(p, '')

    tr = kwargs.pop('translation', '')
    tr = tr.replace("\\", "\\\\")
    tr = tr.replace("\n", "\\\n")
    d['translation'] = tr

    message = "%(user)s\t%(action)s\t%(lang)s\t%(unit)s\t%(path)s\t%(translation)s" % d

    logger.info(message)


def cmd_log(*args, **kwargs):
    import os
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "pootle.settings")
    from datetime import datetime
    from django.conf import settings
    from pootle_app.project_tree import ensure_target_dir_exists

    _log = settings.LOGGING
    filename = _log.get("handlers", {}).get("log_action", {}).get("filename")
    if not filename:
        return
    ensure_target_dir_exists(filename)

    logfile = open(filename, "a")
    datefmt = _log.get("formatters", {}).get("action", {}).get("datefmt", "%Y-%m-%dT%H:%M:%S")

    message = "%(user)s\t%(action)s\t%(cmd)s" % {
        'user': 'system',
        'action': CMD_EXECUTED,
        'cmd': " ".join(args)
    }
    d = {
         'message': message,
         'datefmt': datetime.now().strftime(datefmt)
    }
    logfile.write("[%(datefmt)s]\t%(message)s\n" % d)
    logfile.close()


def store_log(*args, **kwargs):
    logger = logging.getLogger('action')
    d = {}
    for p in ['user', 'path', 'action', 'store']:
        d[p] = kwargs.pop(p, '')

    message = "%(user)s\t%(action)s\t%(path)s\t%(store)s" % d

    logger.info(message)

########NEW FILE########
__FILENAME__ = managers
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.db import models


class RelatedManager(models.Manager):
    """Model manager that always does full joins on relations.

    This saves us lots of database queries later.
    """
    def get_query_set(self):
        return super(RelatedManager, self).get_query_set() \
                                          .select_related(depth=1)

########NEW FILE########
__FILENAME__ = fields
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging

from django.conf import settings
from django.core.cache import cache
from django.db import models
from django.utils.safestring import mark_safe
from south.modelsinspector import add_introspection_rules

from .filters import apply_markup_filter
from .widgets import MarkupTextarea


__all__ = ('Markup', 'MarkupField',)


logger = logging.getLogger('pootle.markup')


_rendered_cache_key = lambda obj, pk, field: '_%s_%s_%s_rendered' % \
        (obj, pk, field)


class Markup(object):

    def __init__(self, instance, field_name, rendered_cache_key):
        self.instance = instance
        self.field_name = field_name
        self.cache_key = rendered_cache_key

    @property
    def raw(self):
        return self.instance.__dict__[self.field_name]

    @raw.setter
    def raw(self, value):
        setattr(self.instance, self.field_name, value)

    @property
    def rendered(self):
        rendered = cache.get(self.cache_key)

        if not rendered:
            logger.debug(u'Caching rendered output of %r', self.cache_key)
            rendered = apply_markup_filter(self.raw)
            cache.set(self.cache_key, rendered,
                      settings.OBJECT_CACHE_TIMEOUT)

        return rendered

    def __unicode__(self):
        return mark_safe(self.rendered)

    def __nonzero__(self):
        return self.raw.strip() != '' and self.raw is not None


class MarkupDescriptor(object):

    def __init__(self, field):
        self.field = field

    def __get__(self, obj, owner):
        if obj is None:
            raise AttributeError('Can only be accessed via an instance.')

        markup = obj.__dict__[self.field.name]
        if markup is None:
            return None

        cache_key = _rendered_cache_key(obj.__class__.__name__,
                                        obj.pk,
                                        self.field.name)
        return Markup(obj, self.field.name, cache_key)

    def __set__(self, obj, value):
        if isinstance(value, Markup):
            obj.__dict__[self.field.name] = value.raw
        else:
            obj.__dict__[self.field.name] = value


class MarkupField(models.TextField):

    description = 'Text field supporting different markup formats.'

    def contribute_to_class(self, cls, name):
        super(MarkupField, self).contribute_to_class(cls, name)
        setattr(cls, self.name, MarkupDescriptor(self))

    def pre_save(self, model_instance, add):
        value = super(MarkupField, self).pre_save(model_instance, add)

        if not add:
            # Invalidate cache to force rendering upon next retrieval.
            cache_key = _rendered_cache_key(model_instance.__class__.__name__,
                                            model_instance.pk,
                                            self.name)
            logger.debug('Invalidating cache for %r', cache_key)
            cache.delete(cache_key)

        return value.raw

    def get_prep_value(self, value):
        if isinstance(value, Markup):
            return value.raw

        return value

    def value_to_string(self, obj):
        value = self._get_val_from_obj(obj)
        return self.get_prep_value(value)

    def formfield(self, **kwargs):
        defaults = {'widget': MarkupTextarea}
        defaults.update(kwargs)
        return super(MarkupField, self).formfield(**defaults)


add_introspection_rules(
        [],
        ["^pootle\.core\.markup\.fields\.MarkupField"],
    )

########NEW FILE########
__FILENAME__ = filters
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import logging

from lxml.html import rewrite_links

from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist


__all__ = (
    'get_markup_filter_name', 'get_markup_filter', 'apply_markup_filter',
)


logger = logging.getLogger('pootle.markup')


def rewrite_internal_link(link):
    """Convert `link` into an internal link.

    Any active static pages defined for a site can be linked by pointing
    to its virtual path by starting the anchors with the `#/` sequence
    (e.g. `#/the/virtual/path`).

    Links pointing to non-existent pages will return `#`.
    Links not starting with `#/` will be omitted.
    """
    if not link.startswith('#/'):
        return link

    from staticpages.models import AbstractPage

    virtual_path = link[2:]
    url = u'#'

    for page_model in AbstractPage.__subclasses__():
        try:
            page = page_model.objects.live().get(
                    virtual_path=virtual_path,
                )
            url = page.get_absolute_url()
        except ObjectDoesNotExist:
            pass

    return url


def get_markup_filter_name():
    """Return a nice version for the current markup filter's name."""
    name, args = get_markup_filter()
    return {
        'textile': u'Textile',
        'markdown': u'Markdown',
        'restructuredtext': u'reStructuredText',
    }.get(name, u'HTML')


def get_markup_filter():
    """Return the configured filter as a tuple with name and args.

    In the following case this function returns (None, message) instead,
    where message tells the reason why not a markup filter is returned:

        * There is no markup filter set.

        * The MARKUP_FILTER option is improperly set.

        * The markup filter name set can't be used because the required
          package isn't installed.

        * The markup filter name set is not one of the acceptable markup
          filter names.
    """
    try:
        markup_filter, markup_kwargs = settings.MARKUP_FILTER
        if markup_filter is None:
            return (None, "unset")
        elif markup_filter == 'textile':
            import textile
        elif markup_filter == 'markdown':
            import markdown
        elif markup_filter == 'restructuredtext':
            import docutils
        else:
            raise ValueError()
    except AttributeError:
        logger.error("MARKUP_FILTER is missing. Falling back to HTML.")
        return (None, "missing")
    except IndexError:
        logger.error("MARKUP_FILTER is misconfigured. Falling back to HTML.")
        return (None, "misconfigured")
    except ImportError:
        logger.warning("Can't find the package which provides '%s' markup "
                        "support. Falling back to HTML.", markup_filter)
        return (None, "uninstalled")
    except ValueError:
        logger.error("Invalid value '%s' in MARKUP_FILTER. Falling back to "
                      "HTML." % markup_filter)
        return (None, "invalid")

    return (markup_filter, markup_kwargs)


def apply_markup_filter(text):
    """Apply a text-to-HTML conversion function to a piece of text and
    return the generated HTML.

    The function to use is derived from the value of the setting
    ``MARKUP_FILTER``, which should be a 2-tuple:

        * The first element should be the name of a markup filter --
          e.g., "markdown" -- to apply. If no markup filter is desired,
          set this to None.

        * The second element should be a dictionary of keyword
          arguments which will be passed to the markup function. If no
          extra arguments are desired, set this to an empty
          dictionary; some arguments may still be inferred as needed,
          however.

    So, for example, to use Markdown with safe mode turned on (safe
    mode removes raw HTML), put this in your settings file::

        MARKUP_FILTER = ('markdown', { 'safe_mode': 'escape' })

    Currently supports Textile, Markdown and reStructuredText, using
    names identical to the template filters found in
    ``django.contrib.markup``.

    Borrowed from http://djangosnippets.org/snippets/104/
    """
    markup_filter_name, markup_kwargs = get_markup_filter()

    if not text.strip():
        return text

    html = text

    if markup_filter_name is not None:
        if markup_filter_name == 'textile':
            import textile
            if 'encoding' not in markup_kwargs:
                markup_kwargs.update(encoding=settings.DEFAULT_CHARSET)
            if 'output' not in markup_kwargs:
                markup_kwargs.update(output=settings.DEFAULT_CHARSET)

            html = textile.textile(text, **markup_kwargs)

        elif markup_filter_name == 'markdown':
            import markdown
            html = markdown.markdown(text, **markup_kwargs)

        elif markup_filter_name == 'restructuredtext':
            from docutils import core
            if 'settings_overrides' not in markup_kwargs:
                arg = getattr(settings, "RESTRUCTUREDTEXT_FILTER_SETTINGS", {})
                markup_kwargs.update(settings_overrides=arg)
            if 'writer_name' not in markup_kwargs:
                markup_kwargs.update(writer_name='html4css1')

            parts = core.publish_parts(source=text, **markup_kwargs)
            html = parts['html_body']

    return rewrite_links(html, rewrite_internal_link)

########NEW FILE########
__FILENAME__ = widgets
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django import forms


__all__ = ('MarkupTextarea',)


class MarkupTextarea(forms.widgets.Textarea):

    def render(self, name, value, attrs=None):
        if value is not None and not isinstance(value, unicode):
            value = value.raw

        return super(MarkupTextarea, self).render(name, value, attrs)

########NEW FILE########
__FILENAME__ = dirtyfields
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

__all__ = ('DirtyFieldsMixin',)

from django.db.models.signals import post_save


class DirtyFieldsMixin(object):
    """Track dirty fields in a model.

    Initial code borrowed from django-dirtyfields, which is
    Copyright (c) Praekelt Foundation and individual contributors
    """
    def __init__(self, *args, **kwargs):
        super(DirtyFieldsMixin, self).__init__(*args, **kwargs)
        post_save.connect(
            reset_state, sender=self.__class__,
            dispatch_uid='%s-DirtyFieldsMixin-sweeper' %
                self.__class__.__name__,
        )
        reset_state(sender=self.__class__, instance=self)

    def _as_dict(self):
        return dict([(f.name, self.__dict__[f.name])
                     for f in self._meta.local_fields if not f.rel])

    def get_dirty_fields(self):
        new_state = self._as_dict()
        return dict([(key, value)
                     for key, value in self._original_state.iteritems()
                     if value != new_state[key]])

    def is_dirty(self):
        # In order to be dirty we need to have been saved at least once,
        # so we check for a primary key and we need our dirty fields to
        # not be empty.
        if not self.pk:
            return True

        return {} != self.get_dirty_fields()


def reset_state(sender, instance, **kwargs):
    instance._original_state = instance._as_dict()

########NEW FILE########
__FILENAME__ = treeitem
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2014 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# translate is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with translate; if not, write to the Free Software
# Foundation, Inc., 59

__all__ = ('TreeItem', 'CachedMethods',)

from translate.filters.decorators import Category

from django.core.cache import cache
from django.utils.encoding import iri_to_uri

from pootle_misc.util import (getfromcache, getfromcachebyname, dictsum,
                              get_cached_value, set_cached_value, datetime_min)
from pootle_misc.checks import get_qualitychecks_by_category


class CachedMethods(object):
    """Cached method names."""
    CHECKS = 'get_checks'
    TOTAL = 'get_total_wordcount'
    TRANSLATED = 'get_translated_wordcount'
    FUZZY = 'get_fuzzy_wordcount'
    LAST_ACTION = 'get_last_action'
    SUGGESTIONS = 'get_suggestion_count'
    MTIME = 'get_mtime'
    LAST_UPDATED = 'get_last_updated'

    @classmethod
    def get_all(self):
        return [getattr(self, x) for x in
                filter(lambda x: x[:2] != '__' and x != 'get_all', dir(self))]


class TreeItem(object):
    def __init__(self, *args, **kwargs):
        self.children = None
        self.initialized = False
        self._flagged_for_deletion = set()
        super(TreeItem, self).__init__()

    def get_children(self):
        """This method will be overridden in descendants"""
        return []

    def get_parents(self):
        """This method will be overridden in descendants"""
        return []

    def get_cachekey(self):
        """This method will be overridden in descendants"""
        raise NotImplementedError('`get_cachekey()` not implemented')

    def _get_total_wordcount(self):
        """This method will be overridden in descendants"""
        return 0

    def _get_translated_wordcount(self):
        """This method will be overridden in descendants"""
        return 0

    def _get_fuzzy_wordcount(self):
        """This method will be overridden in descendants"""
        return 0

    def _get_suggestion_count(self):
        """This method will be overridden in descendants"""
        return 0

    def _get_critical_error_unit_count(self):
        """This method will be overridden in descendants"""
        return 0

    def _get_next_goal_count(self):
        """This method will be overridden in descendants"""
        return 0

    def _get_checks(self):
        """This method will be overridden in descendants"""
        return {'unit_count': 0, 'checks': {}}

    def _get_last_action(self):
        """This method will be overridden in descendants"""
        return {'id': 0, 'mtime': 0, 'snippet': ''}

    def _get_mtime(self):
        """This method will be overridden in descendants"""
        return datetime_min

    def _get_last_updated(self):
        """This method will be overridden in descendants"""
        return {'id': 0, 'creation_time': 0, 'snippet': ''}

    def initialize_children(self):
        if not self.initialized:
            self.children = self.get_children()
            self.initialized = True

    def get_total_wordcount(self):
        """calculate total wordcount statistics"""
        self.initialize_children()
        return (self._get_total_wordcount() +
                self._sum('get_total_wordcount'))

    def get_translated_wordcount(self):
        """calculate translated units statistics"""
        self.initialize_children()
        return (self._get_translated_wordcount() +
                self._sum('get_translated_wordcount'))

    def get_fuzzy_wordcount(self):
        """calculate untranslated units statistics"""
        self.initialize_children()
        return (self._get_fuzzy_wordcount() +
                self._sum('get_fuzzy_wordcount'))

    def get_suggestion_count(self):
        """check if any child store has suggestions"""
        self.initialize_children()
        return (self._get_suggestion_count() +
                self._sum('get_suggestion_count'))

    def get_critical_error_unit_count(self):
        """Calculate number of units with critical errors."""
        self.initialize_children()
        return (self._get_critical_error_unit_count() +
                self._sum('get_critical_error_unit_count'))

    def get_next_goal_count(self):
        """Calculate next goal untranslated statistics."""
        return self._get_next_goal_count()

    @getfromcache
    def get_last_action(self):
        """get last action HTML snippet"""
        self.initialize_children()

        return max(
            [self._get_last_action()] +
            [item.get_last_action() for item in self.children],
            key=lambda x: x['mtime'] if 'mtime' in x else 0
        )

    @getfromcache
    def get_mtime(self):
        """get latest modification time"""
        self.initialize_children()
        return max(
            [self._get_mtime()] +
            [item.get_mtime() for item in self.children]
        )

    @getfromcache
    def get_last_updated(self):
        """get last updated"""
        self.initialize_children()
        return max(
            [self._get_last_updated()] +
            [item.get_last_updated() for item in self.children],
            key=lambda x: x['creation_time'] if 'creation_time' in x else 0
        )

    def _sum(self, name):
        return sum([
            getattr(item, name)() for item in self.children
        ])

    def get_stats(self, include_children=True):
        """get stats for self and - optionally - for children"""
        self.initialize_children()

        result = {
            'total': self.get_total_wordcount(),
            'translated': self.get_translated_wordcount(),
            'fuzzy': self.get_fuzzy_wordcount(),
            'suggestions': self.get_suggestion_count(),
            'nextGoal': self.get_next_goal_count(),
            'lastaction': self.get_last_action(),
            'critical': self.get_critical_error_unit_count(),
            'lastupdated': self.get_last_updated(),
        }

        if include_children:
            result['children'] = {}
            for item in self.children:
                code = (self._get_code(item) if hasattr(self, '_get_code')
                                             else item.code)
                result['children'][code] = item.get_stats(False)

        return result

    @getfromcache
    def get_checks(self):
        result = self._get_checks()
        self.initialize_children()
        for item in self.children:
            item_res = item.get_checks()
            result['checks'] = dictsum(result['checks'], item_res['checks'])
            result['unit_count'] += item_res['unit_count']

        return result

    def get_critical_url(self):
        critical = ','.join(get_qualitychecks_by_category(Category.CRITICAL))
        return self.get_translate_url(check=critical)

    def get_next_goal_url(self):
        return ''

    def _delete_from_cache(self, keys):
        itemkey = self.get_cachekey()
        for key in keys:
            cachekey = iri_to_uri(itemkey + ":" + key)
            cache.delete(cachekey)

        parents = self.get_parents()
        for p in parents:
            p._delete_from_cache(keys)

    def update_cache(self):
        self._delete_from_cache(self._flagged_for_deletion)
        self._flagged_for_deletion = set()

    def flag_for_deletion(self, *args):
        for key in args:
            self._flagged_for_deletion.add(key)

    def flush_cache(self, children=True):
        for name in CachedMethods.get_all():
            cachekey = iri_to_uri(self.get_cachekey() + ":" + name)
            cache.delete(cachekey)

        if children:
            self.initialize_children()
            for item in self.children:
                item.flush_cache()

    def set_last_action(self, last_action):
        set_cached_value(self, 'get_last_action', last_action)
        parents = self.get_parents()
        for p in parents:
            pla = get_cached_value(p, 'get_last_action')
            if pla and pla['mtime'] < last_action['mtime']:
                p.set_last_action(last_action)

########NEW FILE########
__FILENAME__ = models
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with translate; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


from .mixins import TreeItem


class VirtualResource(TreeItem):
    """An object representing a virtual resource.

    A virtual resource doesn't live in the DB and has a unique
    `pootle_path` of its own. It's a simple collection of actual
    resources.

    For instance, this can be used in projects to have cross-language
    references.

    Don't use this object as-is, rather subclass it and adapt the
    implementation details for each context.
    """
    def __init__(self, resources, pootle_path, *args, **kwargs):
        self.resources = resources  #: Collection of underlying resources
        self.pootle_path = pootle_path

        super(VirtualResource, self).__init__(*args, **kwargs)

    def __unicode__(self):
        return self.pootle_path

    ### TreeItem

    def get_children(self):
        return self.resources

    def get_cachekey(self):
        return self.pootle_path

    ### /TreeItem

########NEW FILE########
__FILENAME__ = paginator
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Evernote Corporation
# Copyright 2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.core.paginator import Paginator


def paginate(request, queryset, items=30, page=None):
    paginator = Paginator(queryset, items)

    if page is None:
        try:
            page = int(request.GET.get('page', 1))
        except ValueError:
            # It wasn't an int, so use 1.
            page = 1
    # If page value is too large.
    page = min(page, paginator.num_pages)

    return paginator.page(page)

########NEW FILE########
__FILENAME__ = url_helpers
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import os
import urlparse

from django.core.urlresolvers import reverse


def split_pootle_path(pootle_path):
    """Split an internal `pootle_path` into proper parts.

    :return: A tuple containing each part of a pootle_path`::
        (language code, project code, directory path, filename)
    """
    slash_count = pootle_path.count(u'/')
    parts = pootle_path.split(u'/', 3)[1:]

    language_code = None
    project_code = None
    ctx = ''

    if slash_count != 0 and pootle_path != '/projects/':
        # /<lang_code>/
        if slash_count == 2:
            language_code = parts[0]
        # /projects/<project_code>/
        elif pootle_path.startswith('/projects/'):
            project_code = parts[1]
            ctx = parts[2]
        # /<lang_code>/<project_code>/*
        elif slash_count != 1:
            language_code = parts[0]
            project_code = parts[1]
            ctx = parts[2]

    dir_path, filename = os.path.split(ctx)
    if dir_path:
        dir_path = u'/'.join([dir_path, ''])  # Add trailing slash

    return (language_code, project_code, dir_path, filename)


def get_path_sortkey(path):
    """Returns the sortkey to use for a `path`."""
    if path == '' or path.endswith('/'):
        return path

    (head, tail) = os.path.split(path)
    return u'~'.join([head, path])


def get_path_parts(path):
    """Returns a list of `path`'s parent paths plus `path`."""
    if not path:
        return []

    (parent, filename) = os.path.split(path)
    parent_parts = parent.split(u'/')

    if len(parent_parts) == 1 and parent_parts[0] == u'':
        parts = []
    else:
        parts = [u'/'.join(parent_parts[:parent_parts.index(part) + 1] + [''])
                 for part in parent_parts]

    # If present, don't forget to include the filename
    if path not in parts:
        parts.append(path)

    # Everything has a root
    parts.insert(0, u'')

    return parts


def get_editor_filter(state=None, check=None, user=None, goal=None):
    """Return a filter string to be appended to a translation URL."""
    filter_string = ''

    if state is not None:
        filter_string = '#filter=%s' % state
        if user is not None:
            filter_string += '&user=%s' % user
    elif check is not None:
        filter_string = '#filter=checks&checks=%s' % check

    if goal is not None:
        if not filter_string:
            filter_string = '#goal=%s' % goal
        else:
            filter_string += '&goal=%s' % goal

    return filter_string


def get_previous_url(request):
    """Returns the current domain's referer URL.

    It also discards any URLs that might come from translation editor
    pages, assuming that any URL path containing `/translate/` refers to
    an editor instance.

    If none of the conditions are met, the URL of the app's home is
    returned.

    :param request: Django's request object.
    """
    referer_url = request.META.get('HTTP_REFERER', '')

    if referer_url:
        parsed_referer = urlparse.urlparse(referer_url)
        referer_host = parsed_referer.netloc
        referer_path = parsed_referer.path
        server_host = request.get_host()

        if referer_host == server_host and '/translate/' not in referer_path:
            # Remove query string if present
            if '?' in referer_url:
                referer_url = referer_url[:referer_url.index('?')]

            return referer_url

    return reverse('pootle-home')

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.core.exceptions import PermissionDenied
from django.http import HttpResponse
from django.utils.decorators import method_decorator
from django.utils.translation import ugettext as _

from pootle_misc.util import ajax_required, jsonify


class SuperuserRequiredMixin(object):
    """Require users to have the `is_superuser` bit set."""

    def dispatch(self, request, *args, **kwargs):
        if not request.user.is_superuser:
            msg = _('You do not have rights to administer Pootle.')
            raise PermissionDenied(msg)

        return super(SuperuserRequiredMixin, self) \
                .dispatch(request, *args, **kwargs)


class AjaxResponseMixin(object):
    """Mixin to add AJAX support to a form."""
    @method_decorator(ajax_required)
    def dispatch(self, *args, **kwargs):
        return super(AjaxResponseMixin, self).dispatch(*args, **kwargs)

    def render_to_json_response(self, context, **response_kwargs):
        data = jsonify(context)
        response_kwargs['content_type'] = 'application/json'
        return HttpResponse(data, **response_kwargs)

    def form_invalid(self, form):
        response = super(AjaxResponseMixin, self).form_invalid(form)
        return self.render_to_json_response(form.errors, status=400)

    def form_valid(self, form):
        response = super(AjaxResponseMixin, self).form_valid(form)
        return self.render_to_json_response({})

########NEW FILE########
__FILENAME__ = depcheck
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009-2014 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import os
import subprocess
import sys

from django.conf import settings


# Minimum Translate Toolkit version required for Pootle to run.
TTK_MINIMUM_REQUIRED_VERSION = (1, 11, 0)

# Minimum Django version required for Pootle to run.
DJANGO_MINIMUM_REQUIRED_VERSION = (1, 5, 6)

# Minimum lxml version required for Pootle to run.
LXML_MINIMUM_REQUIRED_VERSION = (2, 1, 4, 0)


##########################
# Test core dependencies #
##########################

def test_translate():
    try:
        from translate.__version__ import ver, sver
        if ver >= TTK_MINIMUM_REQUIRED_VERSION:
            return True, sver
        else:
            return False, sver
    except ImportError:
        return None, None


def test_sqlite():
    try:
        from sqlite3 import dbapi2
        return True
    except ImportError:
        return False


def test_django():
    from django import VERSION, get_version
    if VERSION >= DJANGO_MINIMUM_REQUIRED_VERSION:
        return True, get_version()
    else:
        return False, get_version()


def test_lxml():
    try:
        from lxml.etree import LXML_VERSION, __version__
        if LXML_VERSION >= LXML_MINIMUM_REQUIRED_VERSION:
            return True, __version__
        else:
            return False, __version__
    except ImportError:
        return None, None


##############################
# Test optional dependencies #
##############################

def test_unzip():
    """Test for unzip command."""
    try:
        subprocess.call('unzip', stdout=file(os.devnull),
                        stderr=file(os.devnull))
        return True
    except:
        return False


def test_iso_codes():
    import gettext
    languages = (lang[0] for lang in settings.LANGUAGES)
    if not languages:
        # There are no UI languages, which is a problem, but we won't complain
        # about that here.
        languages = ['af', 'ar', 'fr']
    return len(gettext.find('iso_639', languages=languages, all=True)) > 0


def test_levenshtein():
    try:
        import Levenshtein
        return True
    except ImportError:
        return False


def test_indexer():
    from translate.search.indexing import _get_available_indexers
    return [indexer.__module__.split('.')[-1]
            for indexer in _get_available_indexers()]


def test_gaupol():
    try:
        import aeidon
        return True
    except ImportError:
        try:
            import gaupol
            return True
        except ImportError:
            return False


######################
# Test optimal setup #
######################

def test_mysqldb():
    try:
        import MySQLdb
        return True
    except ImportError:
        return False


def test_db():
    """Test that we are not using sqlite3 as the django database."""
    if getattr(settings, "DATABASES", None):
        return "sqlite" not in settings.DATABASES['default']['ENGINE']
    else:
        return getattr(settings, "DATABASE_ENGINE", None) != 'sqlite3'


def test_cache():
    """Test if cache backend is memcached."""
    #FIXME: maybe we shouldn't complain if cache is set to db or file?
    if getattr(settings, "CACHES", None):
        return "memcache" in settings.CACHES['default']['BACKEND']
    else:
        return settings.CACHE_BACKEND.startswith('memcached')


def test_memcache():
    try:
        import memcache
        return True
    except ImportError:
        try:
            import pylibmc
            return True
        except ImportError:
            return False


def test_memcached():
    """Test if we can connect to memcache server."""
    from django.core.cache import cache
    return cache._cache.servers[0].connect()


def test_session():
    """Test that session backend is set to memcache."""
    return settings.SESSION_ENGINE.split('.')[-1] in ('cache', 'cached_db')


def test_debug():
    return not settings.DEBUG


def test_webserver():
    """Test that webserver is apache."""
    return ('apache' in sys.modules or
            '_apache' in sys.modules or
            'mod_wsgi' in sys.modules)


def test_from_email():
    return bool(settings.DEFAULT_FROM_EMAIL)


def test_contact_email():
    return bool(settings.CONTACT_EMAIL)

########NEW FILE########
__FILENAME__ = bidi
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from unicodedata import bidirectional

from django.utils.encoding import force_unicode


_strong_types = ("L", "R", "AL")
_rtl_types = ("R", "AL")


def get_base_direction(text):
    """Find the base direction of a text string according to the first
    character with strong bidi type.

    Returns ``0`` for LTR, ``1`` for RTL and ``-1`` for undefined (no strong
    characters found).
    """
    text = force_unicode(text)

    # Find first character with strong bidi type.
    first = None
    for c in text:
        bidi_type = bidirectional(c)
        if bidi_type in _strong_types:
            first = bidi_type
            break

    if first:
        if first in _rtl_types:
            return 1
        else:
            return 0
    else:
        # Text composed of weak bidi characters.
        return -1


def insert_embeding(text):
    """Insert LRE (left-to-right embedding) or RLE (right-to-left
    embedding) marks around text according to its base direction, to ensure
    brackets and other weak bidi characters will be rendered correctly
    irrespective of the overall direction.

    Note: Unicode 6.3 will introduce FSI U+2068 (first strong isolate),
    which tells the bidi implementation to do all the magic we are doing
    here, so we should use it once it is widely available.
    """
    base = get_base_direction(text)
    if base == 0:
        return u"\u202a%s\u202c" % text
    elif base == 1:
        return u"\u202b%s\u202c" % text
    else:
        return text

########NEW FILE########
__FILENAME__ = gettext
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from translate.lang import data as langdata

from django.utils import translation
from django.utils.translation import _trans


def _format_translation(message, vars=None):
    """Override the gettext function, handling variable errors more gracefully.

    This is needed to avoid tracebacks on translation errors with live
    translation.
    """
    if vars is not None:
        try:
            return message % vars
        except:
            pass

    return message


def ugettext(message, vars=None):
    return _format_translation(_trans.ugettext(message), vars)


def gettext(message, vars=None):
    return _format_translation(_trans.gettext(message), vars)


def ungettext(singular, plural, number, vars=None):
    return _format_translation(_trans.ungettext(singular, plural, number),
                               vars)


def ngettext(singular, plural, number, vars=None):
    return _format_translation(_trans.ngettext(singular, plural, number), vars)


def tr_lang(language_name):
    """Translate language names."""
    language_code = translation.to_locale(translation.get_language())

    return langdata.tr_lang(language_code)(language_name)


def language_dir(language_code):
    """Return whether the language is right to left."""
    RTL_LANGS = [
        "ar", "arc", "dv", "fa", "he", "ks", "ps", "ug", "ur", "yi", "nqo"
    ]
    shortcode = language_code[:3]

    if not shortcode.isalpha():
        shortcode = language_code[:2]

    if shortcode in RTL_LANGS:
        return "rtl"

    return "ltr"

########NEW FILE########
__FILENAME__ = override
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

"""Overrides and support functions for arbitrary locale support."""

import locale
import os

from translate.lang import data

from django.utils import translation
from django.utils.functional import lazy
from django.utils.translation import trans_real

from pootle.i18n import bidi, gettext


def find_languages(locale_path):
    """Generate supported languages list from the :param:`locale_path`
    directory.
    """
    dirs = os.listdir(locale_path)
    langs = []
    for lang in dirs:
        if (data.langcode_re.match(lang) and
            os.path.isdir(os.path.join(locale_path, lang))):
            langs.append((trans_real.to_language(lang),
                          data.languages.get(lang, (lang,))[0]))
    return langs


def supported_langs():
    """Return a list of supported locales."""
    from django.conf import settings
    return settings.LANGUAGES


def lang_choices():
    """Generate locale choices for drop down lists in forms."""
    choices = []
    for code, name in supported_langs():
        name = data.tr_lang(translation.to_locale('en'))(name)
        tr_name = data.tr_lang(translation.to_locale(code))(name)
        # We have to use the bidi.insert_embeding() to ensure that brackets
        # in the English part of the name is rendered correctly in an RTL
        # layout like Arabic. We can't use markup because this is used
        # inside an option tag.
        if tr_name != name:
            name = u"%s | %s" % (bidi.insert_embeding(tr_name),
                                 bidi.insert_embeding(name))
        else:
            name = bidi.insert_embeding(name)
        choices.append((code, name))

    choices.sort(cmp=locale.strcoll, key=lambda choice: unicode(choice[1]))
    return choices


def get_lang_from_session(request, supported):
    if hasattr(request, 'session'):
        lang_code = request.session.get('django_language', None)
        if lang_code and lang_code in supported:
            return lang_code
    return None


def get_lang_from_cookie(request, supported):
    """See if the user's browser sent a cookie with a preferred language."""
    from django.conf import settings
    lang_code = request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME)

    if lang_code and lang_code in supported:
        return lang_code
    else:
        return None


def get_lang_from_http_header(request, supported):
    """If the user's browser sends a list of preferred languages in the
    HTTP_ACCEPT_LANGUAGE header, parse it into a list. Then walk through
    the list, and for each entry, we check whether we have a matching
    pootle translation project. If so, we return it.

    If nothing is found, return None.
    """
    accept = request.META.get('HTTP_ACCEPT_LANGUAGE', '')
    for accept_lang, unused in trans_real.parse_accept_lang_header(accept):
        if accept_lang == '*':
            return None
        normalized = data.normalize_code(data.simplify_to_common(accept_lang,
                                                                 supported))
        if normalized in ['en-us', 'en']:
            return None
        if normalized in supported:
            return normalized

        #FIXME: horribly slow way of dealing with languages with @ in them.
        for lang in supported.keys():
            if normalized == data.normalize_code(lang):
                return lang
    return None


def get_language_from_request(request, check_path=False):
    """Try to get the user's preferred language by first checking the
    cookie, then the user's preferences (stored in the PootleProfile
    model) and finally by checking the HTTP language headers.

    If all fails, try fall back to default language.
    """
    supported = dict(supported_langs())
    for lang_getter in (get_lang_from_session,
                        get_lang_from_cookie,
                        get_lang_from_http_header):
        lang = lang_getter(request, supported)
        if lang is not None:
            return lang
    from django.conf import settings
    return settings.LANGUAGE_CODE


def override_gettext(real_translation):
    """Replace Django's translation functions with safe versions."""
    translation.gettext = real_translation.gettext
    translation.ugettext = real_translation.ugettext
    translation.ngettext = real_translation.ngettext
    translation.ungettext = real_translation.ungettext
    translation.gettext_lazy = lazy(real_translation.gettext, str)
    translation.ugettext_lazy = lazy(real_translation.ugettext, unicode)
    translation.ngettext_lazy = lazy(real_translation.ngettext, str)
    translation.ungettext_lazy = lazy(real_translation.ungettext, unicode)


def get_language_bidi():
    """Override for Django's get_language_bidi that's aware of more
    RTL languages.
    """
    return gettext.language_dir(translation.get_language()) == 'rtl'


def hijack_translation():
    """Sabotage Django's fascist linguistical regime."""
    # Override functions that check if language is known to Django
    translation.check_for_language = lambda lang_code: True
    trans_real.check_for_language = lambda lang_code: True
    translation.get_language_from_request = get_language_from_request

    # Override django's inadequate bidi detection
    translation.get_language_bidi = get_language_bidi

    # We hijack gettext functions to install the safe variable formatting
    # override
    override_gettext(gettext)

########NEW FILE########
__FILENAME__ = baseurl
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2009, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf import settings


class BaseUrlMiddleware(object):

    def process_request(self, request):
        """Calculate settings.BASEURL based on HTTP headers."""
        domain = None

        if 'HTTP_HOST' in request.META:
            domain = request.get_host()

        if 'SCRIPT_NAME' in request.META:
            settings.SCRIPT_NAME = request.META['SCRIPT_NAME']
            if domain is not None:
                domain += request.META['SCRIPT_NAME']

        if domain is not None:
            if request.is_secure():
                settings.BASE_URL = 'https://' + domain
            else:
                settings.BASE_URL = 'http://' + domain

            #FIXME: DIRTY HACK ALERT: if this works then something is
            # wrong with the universe.
            #
            # Poison sites cache using detected domain.
            from django.contrib.sites import models as sites_models
            from pootle_app.models.pootle_site import get_site_title

            new_site = sites_models.Site(settings.SITE_ID, request.get_host(),
                                         get_site_title())
            sites_models.SITE_CACHE[settings.SITE_ID] = new_site

########NEW FILE########
__FILENAME__ = captcha
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2010-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import re

from django.conf import settings
from django.core.urlresolvers import resolve
from django.http import Http404
from django.shortcuts import render

from pootle.core.forms import MathCaptchaForm


URL_RE = re.compile("https?://", re.I)

CAPTCHA_EXEMPT_URLPATTERNS = (
    'account_login', 'pootle-contact',
)


class CaptchaMiddleware:
    """Middleware to display a captcha question to verify POST submissions
    are made by humans.
    """
    def process_request(self, request):
        if (not settings.USE_CAPTCHA or not request.POST or
            request.path.startswith('/api/') or
            request.session.get('ishuman', False)):
            return

        try:
            # No captcha for exempted pages.
            resolver_match = resolve(request.path_info)
            if resolver_match.url_name in CAPTCHA_EXEMPT_URLPATTERNS:
                return
        except Http404:
            pass

        if request.user.is_authenticated():

            if ('target_f_0' not in request.POST or
                'translator_comment' not in request.POST or
                ('submit' not in request.POST and
                 'suggest' not in request.POST)):
                return

            # We are in translate page. Users introducing new URLs in the
            # target or comment field are suspect even if authenticated.
            try:
                target_urls = len(URL_RE.findall(request.POST['target_f_0']))
            except KeyError:
                target_urls = 0

            try:
                comment_urls = len(URL_RE.findall(request.POST['translator_comment']))
            except KeyError:
                comment_urls = 0

            try:
                source_urls = len(URL_RE.findall(request.POST['source_f_0']))
            except KeyError:
                source_urls = 0

            if (comment_urls == 0 and
                (target_urls == 0 or target_urls == source_urls)):
                return

        if 'captcha_answer' in request.POST:
            form = MathCaptchaForm(request.POST)
            if form.is_valid():
                request.session['ishuman'] = True
                return
            else:
                # New question.
                form.reset_captcha()
        else:
            form = MathCaptchaForm()

        template_name = 'core/captcha.html'
        ctx = {
            'form': form,
            'url': request.path,
            'post_data': request.POST,
        }

        if (request.is_ajax() and ('sfn' in request.POST and
                                   'efn' in request.POST)):
            template_name = 'core/xhr_captcha.html'

        response = render(request, template_name, ctx)
        response.status_code = 402  # (Ab)using 402 for captcha purposes.
        return response

########NEW FILE########
__FILENAME__ = errorpages
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import sys
import traceback

from django.conf import settings
from django.core.exceptions import PermissionDenied
from django.core.mail import mail_admins
from django.core.urlresolvers import reverse
from django.http import (Http404, HttpResponse, HttpResponseForbidden,
                         HttpResponseServerError)
from django.template import RequestContext
from django.template.loader import render_to_string
from django.utils.encoding import force_unicode
from django.utils.translation import ugettext as _

try:
    from raven.contrib.django.models import sentry_exception_handler
except ImportError:
    sentry_exception_handler = None

from pootle.core.exceptions import Http400
from pootle_misc.baseurl import get_next
from pootle_misc.util import jsonify


class ErrorPagesMiddleware(object):
    """Friendlier error pages."""

    def _ajax_error(self, rcode, msg):
        error_body = {
            'msg': msg,
        }
        response = jsonify(error_body)
        return HttpResponse(response, status=rcode,
                            mimetype="application/json")

    def process_exception(self, request, exception):
        msg = force_unicode(exception)
        if isinstance(exception, Http404):
            if request.is_ajax():
                return self._ajax_error(404, msg)
        elif isinstance(exception, Http400):
            if request.is_ajax():
                return self._ajax_error(400, msg)
        elif isinstance(exception, PermissionDenied):
            if request.is_ajax():
                return self._ajax_error(403, msg)

            templatevars = {
                'permission_error': msg,
            }

            if not request.user.is_authenticated():
                msg_args = {
                    'login_link': "%s%s" % (reverse("account_login"),
                                            get_next(request)),
                }
                login_msg = _('You need to <a href="%(login_link)s">login</a> '
                              'to access this page.', msg_args)
                templatevars["login_message"] = login_msg

            return HttpResponseForbidden(
                    render_to_string('403.html', templatevars,
                                     RequestContext(request))
                )
        elif (exception.__class__.__name__ in
                ('OperationalError', 'ProgrammingError', 'DatabaseError')):
            # HACKISH: Since exceptions thrown by different databases do
            # not share the same class heirarchy (DBAPI2 sucks) we have to
            # check the class name instead. Since python uses duck typing
            # I will call this
            # poking-the-duck-until-it-quacks-like-a-duck-test.

            if request.is_ajax():
                return self._ajax_error(500, msg)

            return HttpResponseServerError(
                    render_to_string('db_error.html', {'exception': msg},
                                     RequestContext(request))
                )

        else:
            #FIXME: implement better 500.
            tb = traceback.format_exc()
            print >> sys.stderr, tb

            if not settings.DEBUG:
                try:
                    templatevars = {
                        'exception': msg,
                    }
                    if hasattr(exception, 'filename'):
                        msg_args = {
                            'filename': exception.filename,
                            'errormsg': exception.strerror,
                        }
                        msg = _('Error accessing %(filename)s, Filesystem '
                                'sent error: %(errormsg)s', msg_args)
                        templatevars['fserror'] = msg

                    if sentry_exception_handler is None:
                        # Send email to admins with details about exception.
                        ip_type = (request.META.get('REMOTE_ADDR') in
                                   settings.INTERNAL_IPS and 'internal' or
                                   'EXTERNAL')
                        msg_args = {
                            'ip_type': ip_type,
                            'path': request.path,
                        }
                        subject = 'Error (%(ip_type)s IP): %(path)s' % msg_args

                        try:
                            request_repr = repr(request)
                        except:
                            request_repr = "Request repr() unavailable"

                        msg_args = (unicode(exception.args[0]), tb,
                                    request_repr)
                        message = "%s\n\n%s\n\n%s" % msg_args
                        mail_admins(subject, message, fail_silently=True)
                    else:
                        sentry_exception_handler(request=request)

                    if request.is_ajax():
                        return self._ajax_error(500, msg)

                    return HttpResponseServerError(
                        render_to_string('500.html', templatevars,
                                         RequestContext(request)))
                except:
                    # Let's not confuse things by throwing an exception here.
                    pass

########NEW FILE########
__FILENAME__ = setlocale
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2010, 2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import locale
import logging
import os

from django.conf import settings
from django.utils import translation


class SetLocale(object):
    """Set python locale for each request."""

    def process_request(self, request):
        # Under Windows, locale names are different and setlocale()
        # with regular locale names will fail;
        # so just set the default locale and quit early
        if os.name == 'nt':
            locale.setlocale(locale.LC_ALL, '')
            return

        #FIXME: some languages like arabic don't have a language only
        # locale for no good reason. we need a function to pick default
        # locale for these.
        lang = translation.to_locale(translation.get_language())
        try:
            if lang == 'tr' or lang.startswith('tr_'):
                raise ValueError("Turkish locale broken due to changed "
                                 "meaning of lower()")
            locale.setlocale(locale.LC_ALL, (lang, 'UTF-8'))
        except:
            logging.debug('Failed to set locale to %s; using Pootle default',
                          lang)
            set_pootle_locale_from_settings()

    def process_response(self, request, response):
        set_pootle_locale_from_settings()
        return response

    def process_exception(self, request, exception):
        set_pootle_locale_from_settings()


def set_pootle_locale_from_settings():
    """Try to set Pootle locale based on the language specified in settings."""
    # Under Windows, locale names are different and setlocale()
    # with regular locale names will fail;
    # so just set the default locale and quit early
    if os.name == 'nt':
        locale.setlocale(locale.LC_ALL, '')
        return

    lang = translation.to_locale(settings.LANGUAGE_CODE)
    try:
        if lang == 'tr' or lang.startswith('tr_'):
            raise ValueError("Turkish locale broken due to changed meaning of "
                             "lower()")
        locale.setlocale(locale.LC_ALL, (lang, 'UTF-8'))
    except:
        logging.debug('Failed to set locale to Pootle default (%s); loading '
                      'system default', lang)
        locale.setlocale(locale.LC_ALL, '')

########NEW FILE########
__FILENAME__ = runner
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os
import sys
from argparse import ArgumentParser

from django.core import management

import syspath_override


#: Length for the generated :setting:`SECRET_KEY`
KEY_LENGTH = 50

#: Default path for the settings file
DEFAULT_SETTINGS_PATH = '~/.pootle/pootle.conf'

#: Template that will be used to initialize settings from
SETTINGS_TEMPLATE_FILENAME = 'settings/90-local.conf.sample'

# Python 2+3 support for input()
if sys.version_info[0] < 3:
    input = raw_input


def init_settings(settings_filepath, template_filename):
    """Initializes a sample settings file for new installations.

    :param settings_filepath: The target file path where the initial settings
        will be written to.
    :param template_filename: Template file used to initialize settings from.
    """
    dirname = os.path.dirname(settings_filepath)
    if dirname and not os.path.exists(dirname):
        os.makedirs(dirname)

    fp = open(settings_filepath, 'w')

    import base64
    output = open(template_filename).read()
    output = output % {
            'default_key': base64.b64encode(os.urandom(KEY_LENGTH)),
    }

    fp.write(output)
    fp.close()


def configure_app(project, config_path, django_settings_module, runner_name):
    """Determines which settings file to use and sets environment variables
    accordingly.

    :param project: Project's name. Will be used to generate the settings
        environment variable.
    :param config_path: The path to the user's configuration file.
    :param django_settings_module: The module that ``DJANGO_SETTINGS_MODULE``
        will be set to.
    :param runner_name: The name of the running script.
    """
    settings_envvar = project.upper() + '_SETTINGS'

    # Normalize path and expand ~ constructions
    config_path = os.path.normpath(os.path.abspath(
            os.path.expanduser(config_path),
        )
    )

    if not (os.path.exists(config_path) or
            os.environ.get(settings_envvar, None)):
        print(u"Configuration file does not exist at %r or "
              u"%r environment variable has not been set.\n"
              u"Use '%s init' to initialize the configuration file." %
                (config_path, settings_envvar, runner_name))
        sys.exit(2)

    os.environ.setdefault(settings_envvar, config_path)
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', django_settings_module)


def run_app(project, default_settings_path, settings_template,
            django_settings_module):
    """Wrapper around django-admin.py.

    :param project: Project's name.
    :param default_settings_path: Default filepath to search for custom
        settings. This will also be used as a default location for writing
        initial settings.
    :param settings_template: Template file for initializing settings from.
    :param django_settings_module: The module that ``DJANGO_SETTINGS_MODULE``
        will be set to.
    """
    runner_name = os.path.basename(sys.argv[0])

    parser = ArgumentParser()

    parser.add_argument("--config",
                        default=default_settings_path,
                        help=u"Use the specified configuration file.")
    parser.add_argument("-v", "--version", action="version", version=get_version())

    subparsers = parser.add_subparsers(dest="command")
    init_parser = subparsers.add_parser("init")
    init_parser.add_argument("--noinput", action="store_true", default=False,
                             help=u"Never prompt for input")

    start_parser = subparsers.add_parser("start")
    start_parser.add_argument("arguments", nargs="?", default=[])

    args = parser.parse_args(sys.argv[1:])

    if args.command == 'init':
        config_path = os.path.expanduser(args.config)

        if os.path.exists(config_path):
            resp = None
            if args.noinput:
                resp = 'n'
            while resp not in ('Y', 'n'):
                resp = input('File already exists at %r, overwrite? [nY] '
                             % config_path)
            if resp == 'n':
                print("File already exists, not overwriting.")
                return

        try:
            init_settings(config_path, settings_template)
        except (IOError, OSError) as e:
            raise e.__class__('Unable to write default settings file to %r'
                % config_path)

        print("Configuration file created at %r" % config_path)

        return

    if args.command == "start":
        configure_app(project=project, config_path=args.config,
                      django_settings_module=django_settings_module,
                      runner_name=runner_name)

        management.execute_from_command_line([runner_name, args.command] + args.arguments)

    sys.exit(0)


def get_version():
    from pootle import __version__
    from translate import __version__ as tt_version
    from django import get_version as django_version

    return ("Pootle %s (Django %s, Translate Toolkit %s)" %
            (__version__.sver, tt_version.sver, django_version()))


def main():
    src_dir = os.path.abspath(os.path.dirname(__file__))
    settings_template = os.path.join(src_dir, SETTINGS_TEMPLATE_FILENAME)

    run_app(project='pootle',
            default_settings_path=DEFAULT_SETTINGS_PATH,
            settings_template=settings_template,
            django_settings_module='pootle.settings')


if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = actions
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Support for user (administrator)-provided extension actions.

These are used by placing in an extension actions directory Python modules
that define subclasses of the base class ExtensionAction and create instances
of those subclasses.  Depending on their place in the inheritance hierarchy,
these instances will show up as user-visible links in the Actions sections of
various pages; when those links are followed, the run() method of the class
will be invoked to perform the action.

There can be multiple instances of a subclass, for example a download action
subclass might generate different archive formats (zip, tar, etc.) based on
the last part of the title for each instance.  Note that multiple instances
of a subclass will share the same tooltip (since it is the class docstring).

Besides multiple instances of a subclass, any extension action may be invoked
at several points in the Pootle page hierarchy, so that if there is need to
store data associated with those invocations using instance properties or
attributes, they should be structured as dictionaries keyed on the path in
the Pootle page hierarchy (pootle_path or path_obj).

Here's an ASCII art diagram of the class inheritance hierarchy:

                              +---------------+
                              |ExtensionAction|
                              +---------------+
                               ^ ^ ^ ^     ^ ^
    Tracked instance classes   | | | |     | |  Functional mixin classes
                               | | | |     | |
           +-------------+     | | | |     | |     +--------------+
           |ProjectAction|-----+ | | |     | +-----|DownloadAction|
           +-------------+       | | |     |       +--------------+
                                 | | |     |
          +--------------+       | | |     |       +-------------+
          |LanguageAction|-------+ | |     +-------|CommandAction|
          +--------------+         | |             +-------------+
                                   | |
+------------------------+         | |
|TranslationProjectAction|---------+ |
+------------------------+           |
          ^                          |
          |  +-----------+           |
          |  |StoreAction|-----------+
          |  +-----------+
          |     ^
          |     |
          |     |
       +-----------+
       |HelloAction|
       +-----------+

http://www.asciiflow.com/#6089174316691145678/854915636

"""

import logging
import os
import pkgutil
import shutil
import sys
from urllib import unquote_plus, urlencode

from django.conf import settings
from django.core.cache import cache
from django.core.urlresolvers import reverse
from django.utils.encoding import iri_to_uri
from django.utils.translation import ugettext as _

from pootle_app.models.permissions import check_permission
from pootle_app.project_tree import ensure_target_dir_exists
from pootle_misc.baseurl import l
from pootle_store.util import absolute_real_path, relative_real_path

logger = logging.getLogger(__name__)

#: Module separator (period); this constant used to improve code readability
DOT = '.'

#: Subdirectory to scan for extension actions
EXTDIR = 'ext_actions'

#: Full (possibly relative) path of directory to scan for extension actions
_EXTPATH = os.path.join(os.path.dirname(__file__), EXTDIR)


def _getmod():
    """Get module (package) name and directory path for extension actions

    Uses __name__ for module name if it is useful (not '__main__').  Otherwise,
    use __loader__ if defined, and if that fails, try path searching for
    __file__ to try to guess the module name.  Fallback is to use the directory
    name as the "module" with all '.' replaced with ',' to try to avoid
    RuntimeWarning about missing parent module.

    :returns: Extension package (module) name
    :rtype: str

    """

    if __name__ != '__main__':
        i = __name__.rfind(DOT)
        if i > 0:
            dirmod = __name__[:i + 1] + EXTDIR
        else:
            dirmod = EXTDIR
    else:
        try:
            dirmod = DOT.join([__loader__.fullname,  # pylint: disable=E0602
                              EXTDIR])
        except NameError:
            if not _EXTPATH.startswith(os.sep):
                dirmod = _EXTPATH.replace(os.sep, DOT)
            else:
                # Find where __file__ may be loaded from (longest prefix first)
                for path in sorted(sys.path, key=len, reverse=True):
                    if (_EXTPATH.find(path) == 0 and
                            path.rstrip(os.sep) != _EXTPATH.rstrip(os.sep)):
                        dirmod = DOT.join(_EXTPATH[len(path):]
                                          .split(os.sep)).lstrip(DOT)
                        break
                else:
                    # can't find module, return _EXTPATH without any dots
                    return _EXTPATH.replace(DOT, ',')

    # __import__(dirmod) may be needed to suppress "RuntimeWarning: Parent
    # module ... not found" if imp.load_module() given name containing dot
    if dirmod not in sys.modules:
        try:
            __import__(dirmod)
        except ImportError:
            # Fake it out so that we don't try again
            sys.modules[dirmod] = None

    return dirmod + DOT

_EXTMOD = _getmod()


class ExtensionAction(object):
    """User (administrator)-provided actions for execution in Pootle UI

    .. class:: ExtensionAction(category, title, **kwargs)

    This is an (abstract) base class for all extension actions; creating an
    instance of this class will not display any actions in the UI.  It exists
    to provide a place for common code shared by most subclasses, and to
    provide a common ancestor class that will always be the last one (before
    ``object``) in the linearized chain of superclasses (MRO = method
    resolution order).  Any class that inherits from ExtensionAction should
    *only* inherit from ExtensionAction or its subclasses, and not any other
    classes (this is necessary to ensure that ExtensionAction is immediately
    before object in the MRO).

    The initializer for any subclass of ExtensionAction must call __init__
    via ``super(MySubClass, self).__init__(**kwargs)`` to ensure that all other
    classes and mixins have their initializers called.  Do not use positional
    parameters for this, but always make calls using a keyword argument dict
    (**kwargs) or explicit keyword=value arguments.

    Any subclass that wishes to have its instances tracked should define a
    class attribute tracked and set it to True.

    The initializer requires two arguments that are used for the category
    (label on the left side of the "Actions" section) and title (link text).
    If the subclass has a docstring, it is used for the tooltip - unlike
    the category and title, the tooltip will be shared by all instances.

    Other arguments are presumed to be intended for subclasses and are ignored.

    :param category: Unlocalized category (label) text, e.g. "Manage"
    :type category: str
    :param title: Unlocalized text for display as link text
    :type title: str

    """

    #: Dictionary mapping ExtensionAction classes to lists of their instances
    _instances = {}

    @classmethod
    def instances(cls, rescan=False):
        """Return all instances of this class

        .. classmethod:: instances([rescan=False])

        This will attempt to load any classes the first time it is called
        (or any time that rescan=True).

        :param rescan: Whether to (re)try loading any extension action modules
        :type rescan: boolean
        :returns: All instances of the class
        :rtype: list(ExtensionAction)

        """
        if not ExtensionAction._instances or rescan:
            for importer, modname, _x in pkgutil.iter_modules([_EXTPATH]):
                full_modname = _EXTMOD + modname
                if full_modname not in sys.modules:
                    try:
                        importer.find_module(modname).load_module(full_modname)
                    except StandardError:
                        logger.exception("bad extension action module %s",
                                         modname)
                    else:
                        logger.info("loaded extension action module %s",
                                    full_modname)

        if cls not in ExtensionAction._instances:
            ExtensionAction._instances[cls] = []

        return cls._instances[cls]

    @classmethod
    def lookup(cls, title):
        """Find ExtensionAction (sub)class instance by title

        .. classmethod:: lookup(title)

        This will return the instance for the specified title or raise KeyError
        if it is not (any longer) in use.

        :param title: URL-encoded (quoted) title
        :type title: str
        :returns: The first instance matching the title
        :rtype: ExtensionAction
        :raises: KeyError if no instance with title is found

        """
        for ext in cls.instances():
            if ext.title == unquote_plus(title):
                return ext
        raise KeyError

    def __init__(self, category, title, **kwargs):  # pylint: disable=W0613
        """
        >>> setattr(ExtensionAction, 'tracked', True)
        >>> a = ExtensionAction('a', 'b')
        >>> tb = ExtensionAction(title='ta', category='tb')
        >>> assert a in a.instances()
        >>> assert tb in a.instances(rescan=True)
        """
        self._category = category
        self._title = title
        self._error = ''
        self._output = ''
        self.permission = 'view'
        logger.debug("%s.__init__ '%s'", type(self).__name__, title)
        for cls in type(self).__mro__:
            if getattr(cls, 'tracked', False):
                if cls not in self._instances:
                    ExtensionAction._instances[cls] = [self]
                else:
                    ExtensionAction._instances[cls].append(self)
                logger.debug("instances[%s] = %s",
                             cls.__name__, ExtensionAction._instances[cls])

    def __repr__(self):
        """
        >>> ExtensionAction('cat', 'dog')
        ExtensionAction(category="cat", title="dog")
        >>> ProjectAction(title="dog", category="cat")
        ProjectAction(category="cat", title="dog")
        >>> eval(repr(ProjectAction(category="cat", title="dog")))
        ProjectAction(category="cat", title="dog")
        >>> ExtensionAction('cat', 'dog').run(path="foo", root="/root", \
                                              language="foo")
        """
        return (type(self).__name__ + '(category="' + self.category +
                '", title="' + self.title + '")')

    def _query_url(self, pootle_path):
        """Return relative URL for this action

        This is the URL that will be used to perform the action (via GET) -
        it is the pootle_path for the language, project, translationproject,
        or store, with a query component like "?ext_actions=Say+hello" where
        the value is the form-encoded title of the extension action instance.

        >>> ExtensionAction(category='X', title='Do it')._query_url("foo/bar")
        'foo/bar?ext_actions=Do+it'
        """
        return ''.join([l(pootle_path), '?', urlencode({EXTDIR: self.title})])

    @property
    def category(self):
        """Heading for action grouping

        The (unlocalized) text of the category in which the action will be
        placed.  An example might be "Translate offline" if the action would
        be placed together with the "Download (.zip)" and "Upload" actions.

        """
        return self._category

    @property
    def title(self):
        """The (unlocalized) text for the action link."""
        return self._title

    @property
    def error(self):
        """Text from the last call to set_error()."""
        return self._error

    @property
    def output(self):
        """Text from the last call to set_output()."""
        return self._output

    def run(self, path, root,  # pylint: disable=R0913,W0613
            language='*', project='*', store='*', **kwargs):
        """Run an extension action: this class implementation just logs warning

        .. method:: run(path, root[,
                        language='*', project='*', store='*', kwargs])

        :param path: Pootle path from URL
        :type path: str
        :param root: Absolute path of translations root directory (PODIR)
        :type root: str
        :param language: Language code, e.g. 'af' (or '*')
        :type language: str
        :param project: Name of project, e.g. 'tutorial' (or '*')
        :type project: str
        :param store: Store name (filename) (or '*')
        :type store: str

        Always pass arguments as keyword arguments, ordering is not preserved
        for subclasses (and optional arguments may become required).
        """
        logger.warning("%s lacks run(): %s for lang %s proj %s store %s "
                       "(path %s)", type(self).__name__,
                       self.title, language, project, store, path)

    def set_error(self, text):
        """Set error output of action for display"""
        self._error = text

    def set_output(self, text):
        """Set output of action for display"""
        self._output = text

    def is_active(self, request):
        """Check if the action is active."""
        return check_permission(self.permission, request)


class ProjectAction(ExtensionAction):
    """Project-level action

    This is an extension action that operates on a project (across all
    languages).

    """

    tracked = True

    def __init__(self, **kwargs):
        """
        >>> ProjectAction(category="cat", title="dog")
        ProjectAction(category="cat", title="dog")
        """
        super(ProjectAction, self).__init__(**kwargs)


class LanguageAction(ExtensionAction):
    """Language global action

    This is an extension action that operates on a language (across all
    projects).

    """

    tracked = True

    def __init__(self, **kwargs):
        """
        >>> LanguageAction(category="cat", title="dog")
        LanguageAction(category="cat", title="dog")
        """
        super(LanguageAction, self).__init__(**kwargs)


class TranslationProjectAction(ExtensionAction):
    """Project + Language action

    This is an extension action that operates on a particular translation of
    a project for a particular language.

    """

    tracked = True

    def __init__(self, **kwargs):
        """
        >>> TranslationProjectAction(category="cat", title="dog")
        TranslationProjectAction(category="cat", title="dog")
        >>> TranslationProjectAction(category='cat', title='dog').run( \
                path="foo/bar", root="/root", tpdir="bar/foo", \
                language="foo", project="bar")
        """
        super(TranslationProjectAction, self).__init__(**kwargs)

    def run(self, path, root, tpdir,  # pylint: disable=R0913,W0613
            language, project, store='*', style='nongnu', **kwargs):
        """Run an extension action: this class implementation just logs warning

        .. method:: run(path, root, tpdir, language, project[,
                        store='*', style='nongnu', kwargs])

        :param path: Pootle path from URL
        :type path: str
        :param root: Absolute path of translations root directory (PODIR)
        :type root: str
        :param tpdir: Translation project directory path (relative to root)
        :type tpdir: str
        :param language: Language code, e.g. 'af'
        :type language: str
        :param project: Name of project, e.g. 'tutorial'
        :type project: str
        :param store: Store name (filename) (or '*') (relative to tpdir)
        :type store: str
        :param style: Project directory tree style, e.g. 'gnu' (or 'nongnu')
        :type style: str
        :param kwargs: Additional keyword arguments are allowed and ignored

        Always pass arguments as keyword arguments, ordering is not preserved
        for subclasses (and optional arguments may become required).
        """
        logger.warning("%s lacks run(): %s for lang %s proj %s store %s "
                       "(path %s, %s style)", type(self).__name__,
                       self.title, language, project, store, path, style)

    def get_link_func(self):
        """Return a link_func for use by pootle_translationproject.actions

        >>> s = TranslationProjectAction(category='a', title='boyo!')
        >>> setattr(s, 'pootle_path', '/pootle/')  # simulate path_obj
        >>> d = s.get_link_func()('GET', s)
        >>> assert d['text'] == u'boyo!'
        >>> assert s.lookup(d['href'][d['href'].find('=') + 1:]) == s
        >>> assert 'tooltip' in d
        >>> assert 'icon' in d
        """
        def link_func(_request, path_obj, **_kwargs):
            """Curried link function with self bound from instance method"""
            link = {'text': _(self.title),
                    'href': self._query_url(path_obj.pootle_path),
                    'icon': getattr(self, 'icon', 'icon-vote-inactive')}
            if type(self).__doc__:
                link['tooltip'] = ' '.join(type(self).__doc__.split())
            return link
        return link_func


class StoreAction(ExtensionAction):
    """Individual store (file) action

    This is an extension action that operates on a particular store
    (translation file) of a particular language for a particular project.

    """

    tracked = True

    def __init__(self, **kwargs):
        """
        >>> StoreAction(category="cat", title="dog")
        StoreAction(category="cat", title="dog")
        >>> StoreAction(category='cat', title='dog').run( \
                path="foo/bar/baz", root="/root", tpdir="bar/foo", \
                language="foo", project="bar", store="baz", style="gnu")
        """
        super(StoreAction, self).__init__(**kwargs)

    # These cannot be handled by making TranslationProjectAction a superclass,
    # as we need to allow user extension classes to have both StoreAction and
    # TranslationProjectAction (or just one of them) as superclasses to
    # indicate which contexts are appropriate for the action.

    # The __dict__ magic is not needed for Python 3.
    get_link_func = TranslationProjectAction.get_link_func
    run = TranslationProjectAction.run

    get_link_func = TranslationProjectAction.__dict__['get_link_func']
    run = TranslationProjectAction.__dict__['run']


class DownloadAction(ExtensionAction):
    """
    This is a class for extension actions that will return a file (stream)
    for downloading when the user clicks on the link.  It is intended to be
    used as a mixin for other extension actions, and *must* precede them in
    the superclass inheritance list.
    """

    def __init__(self, **kwargs):
        super(DownloadAction, self).__init__(**kwargs)
        self._dl_path = {}

    def set_download_file(self, path_obj, filepath):
        """Set file for download
        """
        filename = relative_real_path(filepath)
        export_path = os.path.join('POOTLE_EXPORT', filename)
        abs_export_path = absolute_real_path(export_path)
        try:
            ensure_target_dir_exists(abs_export_path)
            shutil.copyfile(filepath, abs_export_path)
        except (IOError, OSError, shutil.Error), e:
            msg = (_("Failed to copy download file to export directory %s") %
                   abs_export_path)
            logger.exception('%s', msg)
            return ''.join([msg, ": ", str(e)])
        cache.set(self._cache_key(path_obj), path_obj.get_mtime(),
                  settings.OBJECT_CACHE_TIMEOUT)
        self._dl_path[path_obj.pootle_path] = export_path
        return ''

    def _cache_key(self, path_obj):
        """Return cache key for download data"""
        return iri_to_uri("%s:export_action" %
                          self._query_url(path_obj.pootle_path))

    def get_download(self, path_obj):
        """Return export path of generated (cached) download"""
        return self._dl_path.get(path_obj.pootle_path, None)

    def get_link_func(self):
        """Return a link_func for use by pootle_translationproject.actions

        >>> setattr(DownloadAction, 'tracked', True)
        >>> s = DownloadAction(category='c', title='d')
        >>> setattr(s, 'pootle_path', '/pootle/')  # simulate path_obj
        >>> d = s.get_link_func()('GET', s)
        >>> assert d['text'] == u'd'
        >>> assert s.lookup(d['href'][d['href'].find('=') + 1:]) == s
        >>> assert 'tooltip' in d
        >>> assert 'icon' in d
        """
        def link_func(_request, path_obj, **_kwargs):
            """Curried link function with self bound from instance method"""
            link = {'text': _(self.title),
                    'icon': getattr(self, 'icon', 'icon-download')}
            export_path = self.get_download(path_obj)
            if export_path:
                abs_export_path = absolute_real_path(export_path)
                last_export = cache.get(self._cache_key(path_obj))
                if last_export and (last_export == path_obj.get_mtime() and
                                    os.path.isfile(abs_export_path)):
                    # valid and up-to-date cache file - link to that
                    link['href'] = reverse('pootle-export', args=[export_path])
            if 'href' not in link:
                # no usable cache file, link to action query to generate it
                link['href'] = self._query_url(path_obj.pootle_path)
            if type(self).__doc__:
                # return docstring with normalized whitespace as tooltip
                link['tooltip'] = ' '.join(type(self).__doc__.split())
            return link
        return link_func


class CommandAction(ExtensionAction):
    """Command-line action mixin

    This is a class for extension actions that can be invoked from the command
    line; it is intended to be used as a mixin for other extension actions;
    since you can always write an standalone script for a command action that
    is not available within the Pootle UI.

    """

    tracked = True

    def __init__(self, **kwargs):
        super(CommandAction, self).__init__(**kwargs)

    def parseargs(self, *args):
        """Parse command line arguments"""
        # argparse handling?

    def runcmd(self):
        """run management command"""
        # print usage?

if __name__ == "__main__":
    import doctest

    logger.setLevel(logging.ERROR)
    logger.propagate = False
    logger.addHandler(logging.StreamHandler())

    doctest.testmod()

########NEW FILE########
__FILENAME__ = hello
#!/usr/bin/env python
""" Example "hello, world" extension action """

import os

from pootle.scripts.actions import TranslationProjectAction, StoreAction


class HelloAction(TranslationProjectAction, StoreAction):
    """_
    Say hello to the user (in their own language)
    """

    def __init__(self, **kwargs):
        super(HelloAction, self).__init__(**kwargs)
        self.icon = 'icon-external-link'

    def run(self, path, root, tpdir,  # pylint: disable=R0913
            language, project, store='*', style='', **kwargs):
        """Say hello when the user clicks the link"""
        filepath = os.path.join(root, tpdir, store)
        self.set_output(''.join(["Hello, world! "
                                 "My name is '%s'. " % self.title,
                                 "My project code is '%s'. " % project,
                                 "My language code is '%s'. " % language,
                                 "My store is '%s'. " % store,
                                 "My URL path is '%s'. " % path,
                                 "My file path is '%s'. " % filepath,
                                 "My project style is '%s'. " % style,
                                 ]))
        self.set_error("'hello' extension action is not yet localized")

HelloAction.hello = HelloAction(category="Other actions", title="Say hello")

########NEW FILE########
__FILENAME__ = mozlangpack
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Extension action to generate Mozilla language packs (XPI)

This extension action uses the mozilla-l10n configuration files and repository
structure, but implements the necessary actions itself in Python, rather than
run the shell scripts that are provided in that Git repository.

"""

import fcntl
import os
import shutil
from subprocess import CalledProcessError

from django.conf import settings

from pootle.scripts.actions import DownloadAction
from pootle_store.util import absolute_real_path

from moztarball import (AURORA, MOZL10N, MozillaAction, getLogger, tempdir,
                        merge_po2moz)
from buildxpi import build_xpi


logger = getLogger(__name__)


class MozillaBuildLangpackAction(MozillaAction, DownloadAction):
    """Build Mozilla language pack for Firefox."""

    def __init__(self, **kwargs):
        super(MozillaBuildLangpackAction, self).__init__(**kwargs)
        self.icon = "icon-update-templates"
        self.permission = "administrate"

    def run(self, path, root, tpdir,  # pylint: disable=R0913,R0914
            language, project, vc_root, **kwargs):
        """Generate a Mozilla language pack XPI."""

        with tempdir() as l10ndir:
            try:
                merge_po2moz(vc_root, root, l10ndir, language, project)
            except EnvironmentError as e:
                logger.debug_exception(e)
                self.set_error(e)
                return

            aurora = os.path.join(vc_root, AURORA)
            mozl10n = os.path.join(vc_root, MOZL10N)

            def docopyfile(sourcefile, destfile):
                if os.path.exists(sourcefile):
                    destdir = os.path.join(l10ndir, language,
                                           os.path.dirname(destfile))
                    basename = os.path.basename(destfile)
                    if not os.path.isdir(destdir):
                        logger.debug("creating '%s' directory", destdir)
                        os.makedirs(destdir)
                    logger.debug("copying '%s' to '%s'", sourcefile,
                                 os.path.join(destdir, basename))
                    shutil.copy2(sourcefile, destdir)
                else:
                    logger.warning('unable to find %s', sourcefile)

            def copyaurorafile(filename):
                """Copy a file from VC source to L10n build directory"""
                split = filename.find(os.sep)
                sourcefile = os.path.join(aurora, filename[:split],
                                          'locales/en-US',
                                          filename[split + 1:])
                docopyfile(sourcefile, filename)

            def copyl10nfile(filename):
                """Copy a file from VC source to L10n build directory"""
                sourcefile = os.path.join(mozl10n, language, filename)
                if os.path.exists(sourcefile):
                    docopyfile(sourcefile, filename)
                else:
                    copyaurorafile(filename)


            def copyfileifmissing(filename):
                """Copy a file only if needed."""
                destfile = os.path.join(l10ndir, language, 'toolkit',
                                        filename)
                if not os.path.exists(destfile):
                    copyaurorafile(filename)

            try:
                # from mozilla-l10n/.ttk/default/build.sh
                copyfileifmissing('toolkit/chrome/mozapps/help/'
                                  'welcome.xhtml')
                copyfileifmissing('toolkit/chrome/mozapps/help/'
                                  'help-toc.rdf')
                copyaurorafile('browser/firefox-l10n.js')
                copyaurorafile('browser/profile/chrome/userChrome-example.css')
                copyaurorafile('browser/profile/chrome/userContent-example.css')
                copyl10nfile('browser/chrome/browser-region/region.properties')
                copyfileifmissing('toolkit/chrome/global/intl.css')
                # This one needs special approval but we need it
                # to pass and compile
                copyfileifmissing('browser/searchplugins/list.txt')

                with tempdir() as xpidir:

                    # Attempting to run build_xpi concurrently can fail,
                    # so lock it
                    lock_filename = os.path.join(aurora,
                                                 ".langpack_action_lock")
                    lock = open(lock_filename, "w")
                    fcntl.flock(lock.fileno(), fcntl.LOCK_EX)

                    xpifile = build_xpi(l10nbase=l10ndir, srcdir=aurora,
                                        outputdir=xpidir, langs=[language],
                                        product='browser')[0]

                    if xpifile:
                        xpiname = '%s-%s.xpi' % (project, language)
                        newname = os.path.join(root, project, language,
                                               xpiname)
                        logger.debug("copying '%s' to '%s'",
                                     xpifile, newname)
                        shutil.move(xpifile, newname)
                        self.set_error(self.set_download_file(path,
                                                              newname))
                        os.remove(newname)


                    self.set_output(_("Finished building the language "
                                      "pack, click on the download "
                                      "link to download it."))

                    fcntl.flock(lock.fileno(), fcntl.LOCK_UN)
                    lock.close()

            except (EnvironmentError, CalledProcessError) as e:
                logger.debug_exception(e)
                self.set_error(e)
                return


MozillaBuildLangpackAction.moztar = MozillaBuildLangpackAction(
                                            category="Mozilla",
                                            title="Build language pack")


class MozillaDownloadLangpackAction(DownloadAction, MozillaAction):
    """Download Mozilla language pack for Firefox."""

    def __init__(self, **kwargs):
        super(MozillaDownloadLangpackAction, self).__init__(**kwargs)
        self.permission = "archive"
        self.nosync = True

    def is_active(self, request):
        project = request.translation_project.project.code
        language = request.translation_project.language.code
        xpi_file = os.path.join('POOTLE_EXPORT',
                                project, language,
                                '%s-%s.xpi' % (project, language))
        abs_xpi_file = absolute_real_path(xpi_file)
        if not os.path.exists(abs_xpi_file):
            return False
        else:
            return super(MozillaDownloadLangpackAction, self).is_active(request)

    def run(self, path, root, tpdir,  # pylint: disable=R0913,R0914
            language, project, vc_root, **kwargs):
        """Download a Mozilla language pack XPI."""
        xpi_file = os.path.join('POOTLE_EXPORT',
                                project, language,
                                '%s-%s.xpi' % (project, language))
        self._dl_path[path.pootle_path] = xpi_file


MozillaDownloadLangpackAction.moztar = MozillaDownloadLangpackAction(
                                            category="Mozilla",
                                            title="Download language pack")

########NEW FILE########
__FILENAME__ = moztarball
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Extension action to generate Mozilla language tar archives

This extension action uses the mozilla-l10n configuration files and repository
structure, but implements the necessary actions itself in Python, rather than
run the shell scripts that are provided in that Git repository.

"""

import errno
import logging
import os
import shutil
import subprocess
from contextlib import contextmanager
from datetime import datetime
from tempfile import mkdtemp

from translate.convert import po2moz

from pootle.scripts.actions import DownloadAction, TranslationProjectAction
from pootle_app.models.permissions import check_permission


POL10N = "mozilla-l10n.git"
MOZL10N = "mozilla-l10n.hg"
AURORA = "mozilla-aurora"
PROJECTS = ("firefox", "mobile")


def getLogger(name):  # pylint: disable=C0103
    """Return a logger with a new method: debug_exception()

    :param name: logger name (typically __name__)
    :returns: logging.getLogger(name) with debug_exception method
    :rtype: logging.Logger
    """
    import types

    _logger = logging.getLogger(name)

    # Monkey-patch the instance with additional method rather than create a
    # subclass of Logger because the only way to create instances is via
    # logging module factory function getLogger(), which lacks any way to
    # create a subclass instead.  The Logger class itself could be monkey-
    # patched with the additional method, but that seems too far-reaching,
    # since it would apply to all Loggers everywhere.

    def debug_exception(self, *args, **kwargs):
        """Log ERROR, with exception traceback only if logging at DEBUG level.

        This is useful when exceptions are probably not caused by programming
        errors, but rather deployment ones (filesystem permissions or missing
        files) - in most cases the function traceback is just a lot of noise
        confusing the administrator who deployed the system, and you don't want
        to show it.  When you do need it, just set the logging level to DEBUG.

        """
        e = 'exc_info'
        if e not in kwargs:
            kwargs[e] = self.getEffectiveLevel() == logging.DEBUG
        self.error(*args, **kwargs)

    _logger.debug_exception = types.MethodType(debug_exception, _logger)
    return _logger


logger = getLogger(__name__)


@contextmanager
def tempdir():
    """Context manager for creating and deleting a temporary directory."""
    tmpdir = mkdtemp()
    try:
        yield tmpdir
    finally:
        shutil.rmtree(tmpdir)


def get_version(vc_root):
    """Get Mozilla version from browser (since mobile has no version.txt)

    :param vc_root:Pootle VCS_DIRECTORY setting
    :type vc_root:str
    :returns: Mozilla Firefox version string
    :rtype: str
    """
    vfile = os.path.join(vc_root, AURORA, 'browser', 'config', 'version.txt')
    try:
        with open(vfile) as vfh:
            version = vfh.readline()
    except IOError:
        logger.exception("Unable to get version from %s", vfile)
        return "aurora"

    return version.strip()


def merge_po2moz(templates, translations, output, language, project):
    """Run po2moz to merge templates and translations into output directory

    The templates directory should be compatible with mozilla-l10n layout,
    translation directory as well (i.e. post-phasefile gatherin) - the
    output directory will be appropriate for tarball generation.

    May raise IOError or OSError from po2moz operation.

    :param templates: Directory for en-US templates
    :type templates: str
    :param translations: Directory for translations
    :type translations: str
    :param output: Output directory for merged localization
    :type output: str
    :param language: Language code (e.g. xx_XX)
    :type language: str
    :param project: Project code (e.g. firefox or mobile)
    :type project: str
    :raises: IOError
    :raises: OSError

    """
    excludes = []
    if project == 'firefox':
        excludes.extend(["other-licenses/branding/firefox",
                         "extensions/reporter"])

    excludes.extend(['.git', '.hg', '.hgtags', 'obsolete', 'editor',
                     'mail', 'thunderbird', 'chat', '*~'])

    po2moz.main(['--progress=none', '-l', language,
                '-t', os.path.join(templates, POL10N, 'templates-en-US'),
                '-i', os.path.join(translations, project, language),
                '-o', os.path.join(output, language)] +
                # generate additional --exclude FOO arguments
                [opt or arg for arg in excludes for opt in ('--exclude', 0)])


class MozillaAction(TranslationProjectAction):
    """Base class for common functionality of Mozilla actions."""

    def is_active(self, request):
        project = request.translation_project.project.code
        if project not in PROJECTS:
            return False
        else:
            return super(MozillaAction, self).is_active(request)


class MozillaTarballAction(DownloadAction, MozillaAction):
    """Download Mozilla language properties tarball"""

    def __init__(self, **kwargs):
        super(MozillaTarballAction, self).__init__(**kwargs)
        self.permission = "administrate"

    def run(self, path, root, tpdir,  # pylint: disable=R0913
            language, project, vc_root, **kwargs):
        """Generate a Mozilla language properties tarball"""

        process = subprocess.Popen(["git", "rev-parse",
                                    "--short", "HEAD"],
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE,
                                   cwd=os.path.join(vc_root, POL10N))
        output = process.communicate()[0]
        if not process.returncode == 0 or not output:
            output = "0000000"

        with tempdir() as tardir:
            try:
                merge_po2moz(vc_root, root, tardir, language, project)
            except EnvironmentError as e:
                logger.debug_exception(e)
                self.set_error(e)
                return

            tarfile = '-'.join([language, get_version(vc_root),
                                datetime.utcnow().strftime("%Y%m%dT%H%M"),
                                output.strip()])
            tarfile = os.path.join(root, tpdir,
                                   '.'.join([tarfile, 'tar', 'bz2']))

            process = subprocess.Popen(['tar', '-cjf', tarfile, language],
                                       universal_newlines=True,
                                       close_fds=(os.name != 'nt'),
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.PIPE, cwd=tardir)
            (output, error) = process.communicate()
            if process.returncode > 0:
                error += (" [tar exited with status %d]\n" %
                          process.returncode)
            elif process.returncode < 0:
                error += (" [tar killed by signal %d]\n" %
                          -process.returncode)
            else:
                error += self.set_download_file(path, tarfile)
                os.remove(tarfile)

        self.set_output(output)
        self.set_error(error)


MozillaTarballAction.moztar = MozillaTarballAction(category="Mozilla",
                                                   title="Download tarball")

########NEW FILE########
__FILENAME__ = add-ons-help-hooks
import os
from django.conf import settings
from translate.convert import html2po, po2html

def initialize(projectdir, languagecode):
    print "*************** initialize: %s, %s" % (projectdir, languagecode)
    pass

def precommit(commitfile, author, message):
    print "*************** precommit %s, %s, %s" % (commitfile, author, message)
    if 'help.html' not in commitfile:
        print 'commit to %s' % commitfile
        return [commitfile]
    elif '.pot' in commitfile:
        print 'ignore file'
        return []
    elif 'de_DE' in commitfile:
        print 'ignore file'
        return []
    else:
        pofile = os.path.join(settings.PODIRECTORY, commitfile)
        htmlfile = os.path.join(settings.PODIRECTORY, os.path.dirname(commitfile), 'help.html')
        template = os.path.join(settings.VCS_DIRECTORY, commitfile.split('/')[0], 'de_DE/help.html')
        print 'Converting po to html: %s to %s' % (pofile, htmlfile)
        with open(pofile, 'r') as po:
            with open(htmlfile, 'w') as html:
                with open(template, 'r') as templ:
                    po2html.converthtml(po, html, templ)
        print 'commit to %s' % htmlfile
        return [htmlfile]

def postcommit(updatedfile, success):
    print "*************** postcommit %s, %s" % (updatedfile, success)

def preupdate(updatedfile):
    print "*************** preupdate %s" % updatedfile
    if 'help.html.pot' in updatedfile:
        htmlfile = os.path.join(updatedfile.split('/')[0], 'de_DE/help.html')
        print 'rewrite to %s' % htmlfile
        return htmlfile
    else:
        return updatedfile

def postupdate(updatedfile):
    print "*************** postupdate %s" % updatedfile
    if 'help.html.pot' in updatedfile:
        potfile = os.path.join(settings.PODIRECTORY, updatedfile)
        htmlfile = os.path.join(settings.VCS_DIRECTORY, updatedfile.split('/')[0], 'de_DE/help.html')
        print 'Converting de_DE html to pot: %s to %s' % (htmlfile, potfile)
        with open(htmlfile, 'r') as html:
            with open(potfile, 'w') as pot:
                html2po.converthtml(html, pot, None, pot=True)

def pretemplateupdate(updatedfile):
    print "*************** pretemplateupdate %s" % updatedfile
    if 'de_DE' in updatedfile and 'help.html' in updatedfile:
        return False
    return True

########NEW FILE########
__FILENAME__ = amo
#!/usr/bin/env python

# Verbatim script for managing the addons.mozilla.org project.  More
# information at https://wiki.mozilla.org/Verbatim
#
# Authors:
# Wil Clouser <clouserw@mozilla.com>
# Dan Schafer <dschafer@andrew.cmu.edu>
# Frederic Wenzel <fwenzel@mozilla.com>

import os
import logging
import re
import StringIO
try:
    import tidy
except:
    pass

from translate.convert import html2po

from django.conf import settings

from pootle.scripts.convert import monopo2po, po2monopo


def _getfiles(file):
    mainfile = os.path.join(os.path.split(file)[0], "messages.po")
    combinedfile = os.path.join(os.path.split(file)[0], "messages-combined.po")
    sourcefile = os.path.join(os.path.split(os.path.split(os.path.split(file)[0])[0])[0], "en_US", "LC_MESSAGES", "messages.po")
    return (combinedfile, mainfile, sourcefile)


def initialize(projectdir, languagecode):
    """The first parameter is the path to the project directory, including
    locale.  It's up to this script to know any internal structure of the
    directory"""

    logger = logging.getLogger('scripts.amo')
    logger.info("Initializing language %s of project %s" %
                (languagecode, os.path.basename(projectdir)))

    # extract project root from projectdir
    projectroot = os.path.join(settings.PODIRECTORY,
                               os.path.split(projectdir)[0])

    # Find the files we're working with
    mainfile = os.path.join(projectroot, languagecode,
                            'LC_MESSAGES', 'messages.po')
    combinedfile = os.path.join(projectroot, languagecode,
                                'LC_MESSAGES', 'messages-combined.po')
    sourcefile = os.path.join(projectroot, 'en_US',
                              'LC_MESSAGES', 'messages.po')

    # Build our combined file
    monopo2po.convertpo(open(sourcefile, "r"),
                        open(combinedfile, "w"),
                        open(mainfile, "r"))

    # build .po files from the .thtml files in /pages/
    _init_pages(projectroot, languagecode)


def _init_pages(projectroot, languagecode):
    """Initialize localizable pages Does not do any merging. Reads in the en-US
    templates and makes .po files from it."""
    logger = logging.getLogger('scripts.amo')

    # we need TidyLib to import pages
    if not tidy:
        logger.debug("Cannot import pages without utidylib "
                     "(http://utidylib.berlios.de/).")
        return

    enus_dir = os.path.join(projectroot, 'en_US', 'pages')
    this_dir = os.path.join(projectroot, languagecode, 'pages')

    # find all pages
    pages = os.listdir(enus_dir)
    thtml = re.compile("\.thtml$", re.IGNORECASE)
    pages = [f for f in pages if thtml.search(f)]

    for page in pages:
        # grab English template
        logger.debug('importing page %s', page)
        template = _tidy_page(os.path.join(enus_dir, page))

        converter = html2po.html2po()
        output = open(os.path.join(this_dir, page[:-6])+'.po', 'w')
        print >> output, converter.convertfile(template, page, False)

        template.close()
        output.close()


def _tidy_page(path):
    """Read a page, run it through tidy, and create a temporary output file.
    returns a temporary file object containing the results"""

    if not os.path.exists(path):
        raise IOError('file %s not found!' % path)

    # set up some tidy options
    tidy_options = {
        'char-encoding': 'utf8',
        'enclose-text': 'yes',     # wrap loose text nodes in <p>
        'show-body-only': 'auto',  # do not add <html> and <body> unless present in input
        'indent': 'no',            # don't prettily indent output to make parsing easier
        'tidy-mark': 'no',         # no creator meta-tag
        'force-output': 'yes',     # some output is better than none, I hope
    }

    # unicode files make utidylib cry :( so we need to be creative
    # http://developer.berlios.de/bugs/?func=detailbug&bug_id=14186&group_id=1810
    # http://muffinresearch.co.uk/archives/2008/07/29/working-around-utidylibs-unicode-handling/
    f = open(path, 'r')
    content = unicode(f.read(), 'utf-8').encode('utf8')
    f.close()
    try:
        parsed = tidy.parseString(content, **tidy_options)
    except tidy.error.OptionArgError:
        # show-body-only is new-ish, so emulate it
        del tidy_options['show-body-only']
        try:
            parsed = tidy.parseString(content, **tidy_options)
        except Exception as e:
            print e
        bodytag = re.compile("<body>(.*)</body>", re.IGNORECASE | re.DOTALL)
        if not bodytag.search(content):
            if path.find('validation') != -1:
                print parsed
            parsed = bodytag.search(str(parsed)).group(1)

    result = StringIO.StringIO(parsed)
    result.name = os.path.basename(path)
    return result


def precommit(committedfile, author, message):
    if os.path.basename(committedfile) == "messages-combined.po":
        logger = logging.getLogger('scripts.amo')

        # Get the files we'll be using
        (combinedfile, mainfile, sourcefile) = _getfiles(committedfile)

        # Update messages.po
        logger.debug("Converting po %s to %s" % (combinedfile, mainfile))
        po2monopo.convertpo(open(combinedfile, "r"), open(mainfile, "w"))

        # We want to commit messages.po
        return [mainfile]
    return []


def postcommit(committedfile, success):
    if os.path.basename(committedfile) == "messages.po":
        logger = logging.getLogger('scripts.amo')

        # Get the files we'll be using
        (combinedfile, mainfile, sourcefile) = _getfiles(committedfile)

        # Recreate messages-combined.po
        logger.debug("Converting amo %s to %s with template %s" %
                     (sourcefile, combinedfile, mainfile))
        monopo2po.convertpo(open(sourcefile, "r"),
                            open(combinedfile, "w"),
                            open(mainfile, "r"))


def preupdate(updatedfile):
    if os.path.basename(updatedfile) == "messages-combined.po":
        logger = logging.getLogger('scripts.amo')

        # Get the files we'll be using
        (combinedfile, mainfile, sourcefile) = _getfiles(updatedfile)

        # We want to update messages.po
        logger.debug("Updating %s", mainfile)
        return mainfile
    return ""


def postupdate(updatedfile):
    logger = logging.getLogger('scripts.amo')

    # Get the files we'll be using
    (combinedfile, mainfile, sourcefile) = _getfiles(updatedfile)

    # Create the new messages-combined.po file
    logger.debug("Converting amo %s to %s with template %s" %
                 (sourcefile, combinedfile, mainfile))
    monopo2po.convertpo(open(sourcefile, "r"),
                        open(combinedfile, "w"),
                        open(mainfile, "r"))

########NEW FILE########
__FILENAME__ = monopo2po
#!/usr/bin/env python

# amo2po.py
# Converts AMO .po files to .po files using standard translation-tookit methods

# Usage: ./amo2po english-file [-t foreign-file] [output-file]

# Author: Dan Schafer <dschafer@mozilla.com>
# Date: 11 Jun 2008

from translate.storage import po


class amo2po:

    def convertstore(self, engfile, forfile):
        """converts a file to .po format"""
        thetargetfile = po.pofile()

        # A dictionary mapping msgids to their foreign units
        key2for = {}
        # Populate the dictionary
        for unit in forfile.units:
            key2for[str(unit.msgid)] = unit
            if unit.isheader():
                forunit = unit

        for engunit in engfile.units:
            # This removes the deprecated strings:
            if engunit.msgid == []:
                continue

            newunit = engunit.copy()

            if engunit.isheader():
                try:
                    thetargetfile.addunit(forunit)
                except:  # If there's no foreign header, use english header
                    thetargetfile.addunit(newunit)
                continue

            # If there is a foreign unit corresponding, merge in its comments
            # and use its msgstr as the new msgstr
            try:
                forunit = key2for[str(engunit.msgid)]
                newunit.msgstr = forunit.msgstr
                newunit.merge(forunit)
            except:
                # If there's no foreign unit, then we simply use a blank string
                newunit.msgstr = []

            # We want to put the english translation as the id and the key as
            # the context
            newunit.msgctxt = engunit.msgid
            if type(engunit.msgstr) == dict:
                newunit.msgid = engunit.msgstr[0]
                newunit.msgid_plural = engunit.msgstr[1]
            else:
                newunit.msgid = engunit.msgstr

            thetargetfile.addunit(newunit)

        return thetargetfile


def convertpo(inputfile, outputfile, templatefile):
    """reads in stdin using fromfileclass, converts using convertorclass,
    writes to stdout"""
    engstore = po.pofile(inputfile)
    forstore = po.pofile(templatefile)
    convertor = amo2po()
    outputstore = convertor.convertstore(engstore, forstore)
    if outputstore.isempty():
        return 0
    outputfile.write(str(outputstore))
    return 1


def main(argv=None):
    from translate.convert import convert
    from translate.misc import stdiotell
    import sys
    sys.stdout = stdiotell.StdIOWrapper(sys.stdout)
    formats = {"*": ("po", convertpo)}
    parser = convert.ConvertOptionParser(formats, usetemplates=True,
                                         description=__doc__)
    parser.run(argv)


if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = po2monopo
#!/usr/bin/env python

# po2amo.py
# Converts .po files to AMO .po files using standard translation-tookit methods

# Usage: ./po2amo po-file amo-output

# Author: Dan Schafer <dschafer@mozilla.com>
# Date: 11 Jun 2008

from translate.storage import po


class po2amo:

    def convertstore(self, thepofile):
        """converts a file to .po format"""
        thetargetfile = po.pofile()

        for unit in thepofile.units:
            newunit = unit.copy()

            # The AMO id is stored in the context
            newunit.msgid = unit.msgctxt

            # If there's a plural in the po file, then there should be in the
            # amo file
            if unit.msgid_plural != []:
                newunit.msgid_plural = unit.msgctxt

            # No context in AMO
            newunit.msgctxt = []

            # No need to alter the msgstr; it is foreign in the original file,
            # and we started with that as a base

            thetargetfile.addunit(newunit)

        return thetargetfile


def convertpo(inputfile, outputfile, templates=None):
    """reads in stdin using fromfileclass, converts using convertorclass,
    writes to stdout"""
    inputstore = po.pofile(inputfile)
    convertor = po2amo()
    outputstore = convertor.convertstore(inputstore)
    if outputstore.isempty():
        return 0
    outputfile.write(str(outputstore))
    return 1


def main(argv=None):
    from translate.convert import convert
    from translate.misc import stdiotell
    import sys
    sys.stdout = stdiotell.StdIOWrapper(sys.stdout)
    formats = {"*": ("po", convertpo)}
    parser = convert.ConvertOptionParser(formats, description=__doc__)
    parser.run(argv)


if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = sumo
#!/usr/bin/env python

# Verbatim script for managing the SUMO (support.mozilla.com) project.  More information at
# https://wiki.mozilla.org/Verbatim
#
# [Note that this is a historical example only, as SUMO no longer uses tiki.]
#
# Author: Wil Clouser <clouserw@mozilla.com>

import os
import logging

from django.conf import settings

from translate.convert import tiki2po, po2tiki


def initialize(projectdir, languagecode):
    """The first parameter is the path to the project directory.  It's up to this
    script to know any internal structure of the directory"""

    # Temporary code - projectdirs come from pootle with sumo/ab_CD form; we need just the former part
    # extract project root from projectdir
    projectroot = os.path.join(settings.PODIRECTORY, os.path.split(projectdir)[0])

    # Temporary code.  Language codes come from pootle with underscores right now; they need to be dashes.
    languagecode = languagecode.replace("_", "-")

    # Find the files we're working with
    tikifile = os.path.join(projectroot, languagecode, 'language.php')
    pofile   = os.path.join(projectroot, languagecode, 'language.po')

    # Build our combined file
    logging.info(u"Initializing %s to %s", tikifile, pofile)
    tiki2po.converttiki(open(tikifile, "r"), open(pofile, "w"))

def precommit(committedfile, author, message):
    if os.path.basename(committedfile) == "language.po":

        # Get the files we'll be using
        tikifile = os.path.join(os.path.dirname(committedfile), 'language.php')

        # Update tikifile with new strings
        logging.info(u"Converting po to tiki: %s > %s", committedfile, tikifile)
        po2tiki.convertpo(open(committedfile, "r"), open(tikifile, "w"))

        # We want to commit language.php
        return [tikifile]
    return []

def postcommit(committedfile, success):
    if os.path.basename(committedfile) == "language.po":

        # Get the files we'll be using
        tikifile = os.path.join(os.path.dirname(committedfile), 'language.php')

        # Recreate .po with any new strings in tikifile
        logging.info(u"Converting tiki to po: %s > %s", tikifile, committedfile)
        tiki2po.converttiki(open(tikifile, "r"), open(committedfile, "w"))

def preupdate(updatedfile):
    if os.path.basename(updatedfile) == "language.po":

        # Get the files we'll be using
        tikifile = os.path.join(os.path.dirname(updatedfile), 'language.php')

        # We want to update language.php
        logging.info(u"Updating %s", tikifile)
        return tikifile
    return ""

def postupdate(updatedfile):
    if os.path.basename(updatedfile) == "language.po":

        # Get the files we'll be using
        tikifile = os.path.join(os.path.dirname(updatedfile), 'language.php')

        # Recreate .po with any new strings in tikifile
        logging.info(u"Converting tiki to po: %s > %s", tikifile, updatedfile)
        tiki2po.converttiki(open(tikifile, "r"), open(updatedfile, "w"))

########NEW FILE########
__FILENAME__ = hooks
#!/usr/bin/env python
"""

Dynamic loading of hooks for update and commit.

"""


import logging


def hook(project, hooktype, path, *args, **kwargs):
    """
    project should be the projectcode of any project.
    hooktype should be "initialize", "precommit", "postcommit",
    "pretemplateupdate", "preupdate", or "postupdate".
    path should be the absolute path of the file (project dir for initialize).

    Other arguments depend on the hooktype:
        initialize should have "languagecode" as an additional argument.
        precommit should have "author" and "message" as additional arguments.
        postcommit should have "success" as an additional argument.
        pretemplateupdate, preupdate, postupdate have no additional arguments.

    Return value depends on the hooktype:
        precommit returns an array of strings indicating what files to commit.
        preupdate returns the pathname of the file to update
        initialize, postcommit, and postupdate return is not used.
        pretemplateupdate returns a boolean indicating if the file should be
                          updated from template.

    """
    logger = logging.getLogger('pootle.scripts.hooks')
    try:
        activehook = __import__(project, globals(), locals(), [])
        if (hasattr(activehook, hooktype) and
                callable(getattr(activehook, hooktype))):
            logger.debug("Executing hook %s for project %s on file %s",
                         hooktype, project, path)
            return getattr(activehook, hooktype)(path, *args, **kwargs)
        else:
            logger.debug("Imported %s, but it is not a suitable %s hook",
                         activehook.__file__, hooktype)
            raise ImportError("Imported %s, but it is not a suitable %s hook" %
                              (activehook.__file__, hooktype))
    except ImportError as e:
        raise ImportError(e)
    except Exception:
        logger.exception("Exception in project (%s) hook (%s) for file (%s)",
                         project, hooktype, path)

########NEW FILE########
__FILENAME__ = settings
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2013 Zuza Software Foundation
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

import glob
import os

WORKING_DIR = os.path.abspath(os.path.dirname(__file__))


def working_path(filename):
    """Return an absolute path for :param:`filename` by joining it to
    ``WORKING_DIR``."""
    return os.path.join(WORKING_DIR, filename)


conf_files_path = os.path.join(WORKING_DIR, 'settings', '*.conf')
conf_files = glob.glob(conf_files_path)
conf_files.sort()

for f in conf_files:
    execfile(os.path.abspath(f))

########NEW FILE########
__FILENAME__ = strings
# These are some strings that we need for successful extraction. They come from
# Django and is not included in our POT file otherwise. This file itself is not
# used for a running Pootle.

# Don't change any of these strings unless they changed in Django. The adding
# of extra comments to help translators is fine.

_('Hold down "Control", or "Command" on a Mac, to select more than one.')
_("Enter a valid e-mail address.")
_("That e-mail address doesn't have an associated user account. Are you sure you've registered?")
_("This field is required.")
_("Ensure this value has at most %(max)d characters (it has %(length)d).")
_("Save and add another")
_("Save and continue editing")
_("Add")
_("Change")
_("Please enter a correct username and password. Note that both fields are case-sensitive.")
# from Django/django/contrib/auth/forms.py:
# Translators: Email subject line. The variable is the server name shown
# on the top of each page
_("Password reset on %s")

# Translators: This is a constructed string that might end up saying
# "Add language" or "Add project". If you need to translate that differently,
# you might want to try to translate it as "Add an entry to the %(name)s table"
# or "Add an object of type "%(name)s".
_("Add %(name)s")

# Translators: This link takes the user to the page where the currently
# configured option is displayed (such as a project or language)
_("View on site")

_("first name")
_("last name")
_("e-mail address")
_("active")

# Translators: Please translate this simply as "Administrator". This string is
# needed by Django, but 'superuser' is very technical and should be avoided.
_("superuser status")

# Translators: The language from which translation will happen
_("Source Language")

_("Android strings")


# Commonly used terms to refer to Terms of Services, Privacy Policies...

# Translators: Label that refers to the site's privacy policy
_("Privacy Policy")
# Translators: Label that refers to the site's legal requirements
_("Legal")
# Translators: Label that refers to the site's license requirements
_("License")
# Translators: Label that refers to the site's license requirements
_("Contributor License")
# Translators: Label that refers to the site's terms of use
_("Terms of Use")
# Translators: Label that refers to the site's terms of service
_("Terms of Service")

########NEW FILE########
__FILENAME__ = syspath_override
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008, 2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

"""Adds pootle directories to the python import path."""

#FIXME: is this useful on an installed codebase or only when running
# from source?

import os
import sys


ROOT_DIR = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
POOTLE_DIR = os.path.abspath(os.path.dirname(__file__))
POOTLE_APPS = os.path.join(POOTLE_DIR, 'apps')

sys.path.insert(0, ROOT_DIR)  # Top level directory.
sys.path.insert(0, POOTLE_DIR)  # Pootle directory.
sys.path.insert(0, POOTLE_APPS)  # Pootle applications.

########NEW FILE########
__FILENAME__ = urls
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.conf.urls import include, patterns, url
from django.contrib import admin


admin.autodiscover()

urlpatterns = patterns('',
    url(r'^django_admin/', include(admin.site.urls)),

    # JavaScript i18n.
    url(r'^jsi18n/$',
        'django.views.i18n.javascript_catalog',
        {'packages': ('pootle', ), }, ),

    # XXX: Do we really want to let Django serve these files in production?
    # Direct download of translation files.
    url(r'^export/(?P<path>.*)$',
        'django.views.static.serve',
        {'document_root': settings.PODIRECTORY},
        name='pootle-export'),

    # External apps.
    url(r'^contact/', include('pootle_contact.urls')),
    url(r'^accounts/', include('allauth.urls')),
    url(r'^profiles/', include('pootle_profile.urls')),
    url(r'^profiles/', include('profiles.urls')),
)

if settings.POOTLE_ENABLE_API:
    from api_factory import api_factory
    urlpatterns += patterns(
        '',
        # Pootle API URLs.
        url(r'^api/', include(api_factory().urls)),
    )

urlpatterns += patterns('',
    # Pootle URLs.
    url(r'^pages/', include('staticpages.urls')),
    url(r'', include('pootle_app.urls')),
    url(r'^projects/', include('pootle_project.urls')),
    url(r'^goals/', include('pootle_tagging.urls')),
    url(r'', include('pootle_notifications.urls')),
    url(r'', include('pootle_terminology.urls')),
    url(r'', include('pootle_store.urls')),
    url(r'', include('pootle_language.urls')),
    url(r'', include('pootle_translationproject.urls')),
)

########NEW FILE########
__FILENAME__ = __version__
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2008-2013 Zuza Software Foundation
# Copyright 2013 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pootle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Pootle; if not, see <http://www.gnu.org/licenses/>.

"""This file contains the version of Pootle."""


build = 25206
sver = "2.5.2-alpha1"
ver = (2, 5, 2)

########NEW FILE########
__FILENAME__ = conftest
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os
from pkgutil import iter_modules

os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'
WORKING_DIR = os.path.abspath(os.path.dirname(__file__))
os.environ['POOTLE_SETTINGS'] = os.path.join(WORKING_DIR, 'settings.py')

from pootle import syspath_override  # Needed for monkey-patching

from . import fixtures
from .fixtures import models as fixture_models


def _load_fixtures(*modules):
    for mod in modules:
        path = mod.__path__
        prefix = '%s.' % mod.__name__

        for loader, name, is_pkg in iter_modules(path, prefix):
            if not is_pkg:
                yield name


pytest_plugins = tuple(_load_fixtures(fixtures, fixture_models), )

########NEW FILE########
__FILENAME__ = decorators
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest

from django.http import Http404

from pootle.core.decorators import get_path_obj
from pootle_language.models import Language
from pootle_project.models import Project
from pootle_translationproject.models import TranslationProject


@pytest.mark.django_db
def test_get_path_obj(rf, default, afrikaans_tutorial,
                      arabic_tutorial_disabled, tutorial_disabled):
    """Ensure the correct path object is retrieved."""
    language_code = afrikaans_tutorial.language.code
    project_code = afrikaans_tutorial.project.code

    project_code_disabled = tutorial_disabled.code

    language_code_fake = 'faf'
    project_code_fake = 'fake-tutorial'

    request = rf.get('/')
    request.user = default

    # Fake decorated function
    func = get_path_obj(lambda x, y: (x, y))

    # Single project
    func(request, project_code=project_code)
    assert isinstance(request.ctx_obj, Project)

    # Missing/disabled project
    with pytest.raises(Http404):
        func(request, project_code=project_code_fake)

    with pytest.raises(Http404):
        func(request, project_code=project_code_disabled)

    # Single language
    func(request, language_code=language_code)
    assert isinstance(request.ctx_obj, Language)

    # Missing language
    with pytest.raises(Http404):
        func(request, language_code=language_code_fake)

    # Translation Project
    func(request, language_code=language_code, project_code=project_code)
    assert isinstance(request.ctx_obj, TranslationProject)

    # Missing/disabled Translation Project
    with pytest.raises(Http404):
        func(request, language_code=language_code_fake,
             project_code=project_code)

    with pytest.raises(Http404):
        func(request, language_code=language_code,
             project_code=project_code_disabled)

    with pytest.raises(Http404):
        func(request, language_code=arabic_tutorial_disabled.language.code,
             project_code=arabic_tutorial_disabled.project.code)

########NEW FILE########
__FILENAME__ = mock
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
"""Monkeypatching fixtures."""


# HACKISH: monkeypatching decorator here, should be cleaner to do it in a
# fixture, but pytest's `monkeypatch` decorator is function-scoped, and by
# the time it's run the decorators have already been applied to the
# functions, therefore the patching has no effect
from _pytest.monkeypatch import monkeypatch

mp = monkeypatch()
mp.setattr('django.utils.functional.cached_property', property)

########NEW FILE########
__FILENAME__ = directory
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest


@pytest.fixture
def root(db):
    """Require the root directory."""
    from pootle_app.models import Directory
    root, created = Directory.objects.get_or_create(name='')
    return root


@pytest.fixture
def projects(root):
    """Require the projects directory."""
    from pootle_app.models import Directory
    projects, created = Directory.objects.get_or_create(name='projects',
                                                        parent=root)
    return projects

########NEW FILE########
__FILENAME__ = language
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Language fixtures.

NOTE: when adding new language fixtures, it should require the
``english`` fixture first, otherwise the behavior can be unpredicted when
creating projects and translation projects later on.
"""

import pytest


def _require_language(code, fullname, plurals=2, plural_equation='(n != 1)'):
    """Helper to get/create a new language."""
    from pootle_language.models import Language

    criteria = {
        'code': code,
        'fullname': fullname,
        'nplurals': plurals,
        'pluralequation': plural_equation,
    }
    language, created = Language.objects.get_or_create(**criteria)

    return language


@pytest.fixture
def english(root):
    """Require the English language."""
    return _require_language('en', 'English')


@pytest.fixture
def templates(root):
    """Require the special Templates language."""
    return _require_language('templates', 'Templates')


@pytest.fixture
def afrikaans(english):
    """Require the Afrikaans language."""
    return _require_language('af', 'Afrikaans')


@pytest.fixture
def arabic(english):
    """Require the Arabic language."""
    return _require_language('ar', 'Arabic')


@pytest.fixture
def fish(english):
    """Require the Fish language ><(((º>"""
    return _require_language(code='fish', fullname='Fish')

########NEW FILE########
__FILENAME__ = permission
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest


@pytest.fixture
def pootle_content_type(db):
    """Require the pootle ContentType."""
    from django.contrib.contenttypes.models import ContentType

    args = {
        'app_label': 'pootle_app',
        'model': 'directory',
    }
    content_type, created = ContentType.objects.get_or_create(**args)
    content_type.name = 'pootle'
    content_type.save()

    return content_type


def _require_permission(code, name, content_type):
    """Helper to get/create a new permission."""
    from django.contrib.auth.models import Permission

    criteria = {
        'codename': code,
        'name': name,
        'content_type': content_type,
    }
    permission, created = Permission.objects.get_or_create(**criteria)

    return permission


@pytest.fixture
def view(pootle_content_type):
    """Require the `view` permission."""
    return _require_permission('view', 'Can view a project',
                               pootle_content_type)


@pytest.fixture
def suggest(pootle_content_type):
    """Require the `suggest` permission."""
    return _require_permission('suggest', 'Can make a suggestion',
                               pootle_content_type)


@pytest.fixture
def translate(pootle_content_type):
    """Require the `translate` permission."""
    return _require_permission('translate', 'Can submit translations',
                               pootle_content_type)


@pytest.fixture
def review(pootle_content_type):
    """Require the `suggest` permission."""
    return _require_permission('review', 'Can review translations',
                               pootle_content_type)


@pytest.fixture
def administrate(pootle_content_type):
    """Require the `suggest` permission."""
    return _require_permission('administrate', 'Can administrate a TP',
                               pootle_content_type)

########NEW FILE########
__FILENAME__ = permission_set
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest


def _require_permission_set(user, directory, permissions):
    """Helper to get/create a new PermissionSet."""
    from pootle_app.models.permissions import PermissionSet

    criteria = {
        'profile': user.pootleprofile,
        'directory': directory,
    }
    permission_set, created = PermissionSet.objects.get_or_create(**criteria)
    if created:
        permission_set.positive_permissions = permissions
        permission_set.save()

    return permission_set


@pytest.fixture
def nobody_ps(db, nobody, root, view, suggest):
    """Require permission sets at the root for the `nobody` user."""
    return _require_permission_set(nobody, root, [view, suggest])


@pytest.fixture
def default_ps(default, root, view, suggest, translate):
    """Require permission sets at the root for the `default` user."""
    return _require_permission_set(default, root, [view, suggest, translate])

########NEW FILE########
__FILENAME__ = project
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest


def _require_project(code, name, source_language, **kwargs):
    """Helper to get/create a new project."""
    from pootle_project.models import Project

    criteria = {
        'code': code,
        'fullname': name,
        'source_language': source_language,
        'checkstyle': 'standard',
        'localfiletype': 'po',
        'treestyle': 'auto',
    }
    criteria.update(kwargs)

    new_project, created = Project.objects.get_or_create(**criteria)
    return new_project


@pytest.fixture
def tutorial(projects, english):
    """Require `tutorial` test project."""
    return _require_project('tutorial', 'Tutorial', english)


@pytest.fixture
def tutorial_disabled(projects, english):
    """Require `tutorial-disabled` test project in a disabled state."""
    return _require_project('tutorial-disabled', 'Tutorial', english,
                            disabled=True)

########NEW FILE########
__FILENAME__ = store
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os
import shutil
import tempfile

import pytest


def _require_store(tp, po_dir, name):
    """Helper to get/create a new store."""
    from pootle_store.models import Store

    file_path = os.path.join(po_dir, tp.real_path, name)
    parent_dir = tp.directory
    pootle_path = tp.pootle_path + name

    try:
        store = Store.objects.get(
            pootle_path=pootle_path,
            translation_project=tp,
        )
    except Store.DoesNotExist:
        store = Store.objects.create(
            file=file_path,
            parent=parent_dir,
            name=name,
            translation_project=tp,
        )
        store.save()

    return store


@pytest.fixture(scope='session')
def po_directory(request):
    """Sets up a tmp directory with test PO files."""
    from django.conf import settings
    from pootle_store.models import fs

    test_base_dir = tempfile.mkdtemp()

    tutorial_dir = os.path.join(settings.PODIRECTORY, 'tutorial')
    tutorial_test_dir = os.path.join(test_base_dir, 'tutorial')

    # Copy files over the temporal dir
    shutil.copytree(tutorial_dir, tutorial_test_dir)

    # Adjust locations
    settings.PODIRECTORY = test_base_dir
    fs.location = test_base_dir

    def _cleanup():
        shutil.rmtree(test_base_dir)
    request.addfinalizer(_cleanup)

    return test_base_dir


@pytest.fixture
def af_tutorial_po(settings, afrikaans_tutorial):
    """Require the /af/tutorial/tutorial.po store."""
    po_directory = settings.PODIRECTORY
    return _require_store(afrikaans_tutorial, po_directory, 'tutorial.po')

########NEW FILE########
__FILENAME__ = translation_project
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest


def _require_tp(language, project):
    """Helper to get/create a new translation project."""
    from pootle_translationproject.models import create_translation_project

    return create_translation_project(language, project)


def _require_disabled_tp(language, project):
    """Helper to get/create a new translation project in disabled state."""
    from pootle_translationproject.models import create_translation_project

    tp = create_translation_project(language, project)
    tp.disabled = True
    tp.save()

    return tp


@pytest.fixture
def afrikaans_tutorial(afrikaans, tutorial):
    """Require Afrikaans Tutorial."""
    return _require_tp(afrikaans, tutorial)


@pytest.fixture
def arabic_tutorial_disabled(arabic, tutorial):
    """Require Arabic Tutorial in disabled state."""
    return _require_disabled_tp(arabic, tutorial)

########NEW FILE########
__FILENAME__ = user
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest


def _require_user(username, fullname, password=None,
                  is_superuser=False, is_staff=False):
    """Helper to get/create a new user."""
    from django.contrib.auth.models import User
    criteria = {
        'username': username,
        'first_name': fullname,
        'is_active': True,
        'is_superuser': is_superuser,
        'is_staff': is_staff,
    }
    user, created = User.objects.get_or_create(**criteria)
    if created:
        if password is None:
            user.set_unusable_password()
        else:
            user.set_password(password)
        user.save()

    return user


@pytest.fixture
def nobody(db):
    """Require the default anonymous user."""
    return _require_user('nobody', 'any anonymous user')


@pytest.fixture
def default(db):
    """Require the default authenticated user."""
    return _require_user('default', 'any authenticated user',
                         password='')


@pytest.fixture
def system(db):
    """Require the system user."""
    return _require_user('system', 'system user')


@pytest.fixture
def admin(db):
    """Require the admin user."""
    return _require_user('admin', 'Administrator', password='admin',
                         is_superuser=True, is_staff=True)

########NEW FILE########
__FILENAME__ = views
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest


@pytest.fixture
def admin_client(admin, client):
    """A Django test client logged in as an admin user."""
    client.login(username=admin.username, password='admin')
    return client

########NEW FILE########
__FILENAME__ = unit
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest

from pootle_app.models.permissions import get_matching_permissions
from pootle_profile.models import get_profile
from pootle_store.util import FUZZY, TRANSLATED, UNTRANSLATED
from pootle_store.forms import unit_form_factory, UnitStateField


def _create_post_request(rf, directory, user, url='/', data={}):
    """Convenience function to create and setup fake POST requests."""
    request = rf.post(url, data=data)
    request.user = user
    request.profile = get_profile(user)
    request.permissions = get_matching_permissions(request.profile,
                                                   directory)
    return request


def _create_unit_form(request, language, unit):
    """Convenience function to create unit forms."""
    form_class = unit_form_factory(language, request=request)
    return form_class(request.POST, instance=unit, request=request)


def test_submit_fuzzy(rf, admin, default, default_ps,
                      afrikaans, af_tutorial_po):
    """Tests that non-admin users can't set the fuzzy flag."""
    language = afrikaans
    unit = af_tutorial_po.getitem(0)
    directory = unit.store.parent
    post_dict = {
        'id': unit.id,
        'index': unit.index,
        'source_f_0': unit.source_f,
        'target_f_0': unit.target_f,
        'state': FUZZY,
    }

    request = _create_post_request(rf, directory, data=post_dict, user=admin)
    admin_form = _create_unit_form(request, language, unit)
    assert admin_form.is_valid()

    request = _create_post_request(rf, directory, data=post_dict, user=default)
    user_form = _create_unit_form(request, language, unit)
    assert not user_form.is_valid()
    assert 'state' in user_form.errors


def test_unit_state():
    """Tests how checkbox states (as strings) map to booleans."""
    field = UnitStateField(required=False)
    assert field.clean(str(FUZZY))
    assert field.clean(str(TRANSLATED))
    assert field.clean(str(UNTRANSLATED))
    assert field.clean(True)
    assert not field.clean('True')  # Unknown state value evaluates to False
    assert not field.clean(False)
    assert not field.clean('False')

########NEW FILE########
__FILENAME__ = suggestion
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2013 Zuza Software Foundation
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest


@pytest.mark.django_db
def test_hash(af_tutorial_po):
    """Tests that target hash changes when suggestion is modified"""
    unit = af_tutorial_po.getitem(0)

    orig_wordcount = unit.store.translated_wordcount
    assert unit.store.suggestion_count == 0
    suggestion = unit.add_suggestion("gras")
    assert unit.store.suggestion_count == 1

    first_hash = suggestion.target_hash
    suggestion.translator_comment = "my nice comment"
    second_hash = suggestion.target_hash
    assert first_hash != second_hash

    suggestion.target = "gras++"
    suggestion.user_id = 1
    assert first_hash != second_hash != suggestion.target_hash

    # FIXME: This breaks everything on MyISAM due to broken transaction expectations
    # unit.accept_suggestion(suggestion, unit.store.translation_project, None)
    # assert unit.store.suggestion_count == 0
    # assert unit.store.translated_wordcount == orig_wordcount + unit.source_wordcount

########NEW FILE########
__FILENAME__ = translation_project
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009 Zuza Software Foundation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os

import pytest

from django.test import TestCase

from pootle.core.initdb import require_english

from pootle_project.models import Project
from pootle_store.models import Store
from pootle_app.project_tree import get_translated_name, get_translated_name_gnu
from pootle_language.models import Language
from pootle_store.util import OBSOLETE


pytestmark = pytest.mark.xfail


class GnuTests(TestCase):
    """Tests for Gnu Style projects"""

    template_text = r'''msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Pootle Tests\n"

#: fish.c:1
msgid "Exact"
msgstr ""

#: test.c:1
msgid "Fuzzy"
msgstr ""

#: fish.c:2
msgid "%d new"
msgid_plural "%d news"
msgstr[0] ""
msgstr[1] ""
'''

    target_text = r'''msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Pootle Tests\n"

#: fish.c:1
msgid "Exact"
msgstr "Belzabt"

#: test.c:1
msgid "fuzzy"
msgstr "ta2riban"

#: fish.c:2
msgid "obsolete"
msgstr "2adim"
'''

    def _setup_test_files(self):
        gnu = os.path.join(self.testpodir, "testproj")
        os.mkdir(gnu)
        potfile = file(os.path.join(gnu, "test.pot"), 'w')
        potfile.write(self.template_text)
        potfile.close()
        pofile = file(os.path.join(gnu, "ar.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnu, "af.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnu, "zu.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnu, "pt_br.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        gnusub = os.path.join(gnu, "subdir")
        os.mkdir(gnusub)
        potfile = file(os.path.join(gnusub, "test.pot"), 'w')
        potfile.write(self.template_text)
        potfile.close()
        pofile = file(os.path.join(gnusub, "ar.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnusub, "af.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnusub, "zu.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnusub, "pt_br.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()

    def setUp(self):
        super(GnuTests, self).setUp()
        en = require_english()
        Project.objects.get_or_create(code="testproj", fullname=u"testproj",
                                      source_language=en)
        self.project = Project.objects.get(code='testproj')
        for tp in self.project.translationproject_set.iterator():
            tp.require_units()

    def test_treestyle(self):
        """test treestyle detection"""
        self.assertEqual(self.project.get_treestyle(), 'gnu')

    def test_realpath(self):
        """test that physical path is calculated correctly"""
        for tp in self.project.translationproject_set.iterator():
            self.assertEqual(tp.real_path, u'testproj')

    def test_file_detection(self):
        """test correct language detection when a project is added"""
        lang_count = self.project.translationproject_set.count()
        self.assertEqual(lang_count, 5)

        store_count = Store.objects.filter(translation_project__project=self.project).count()
        self.assertEqual(store_count, 10)

        lang_list = list(self.project.translationproject_set.values_list('language__code', flat=True).order_by('language__code'))
        self.assertEqual(lang_list, [u'af', u'ar', u'pt_BR', u'templates', u'zu'])

    def test_template_detection(self):
        """test that given a template the correct target file name is generated"""
        template_tp = self.project.get_template_translationproject()
        for template_store in template_tp.stores.iterator():
            for tp in self.project.translationproject_set.exclude(language__code='templates').iterator():
                new_pootle_path, new_path = get_translated_name_gnu(tp, template_store)
                store = tp.stores.get(pootle_path=new_pootle_path)
                self.assertEqual(new_pootle_path, store.pootle_path)
                self.assertEqual(new_path, store.abs_real_path)

    def test_new(self):
        """test initializing a new file from templates"""
        fr = Language.objects.get(code='fr')
        new_tp = self.project.translationproject_set.create(language=fr)
        new_tp.update_against_templates()
        store_count = new_tp.stores.count()
        self.assertEqual(store_count, 2)
        store = new_tp.stores.all()[0]
        dbunit_count = store.units.count()
        self.assertEqual(dbunit_count, 3)
        stunit_count = len(store.file.store.units)
        self.assertEqual(stunit_count, 4)

    def test_update(self):
        """test updating existing files to templates"""
        tp = self.project.translationproject_set.get(language__code='ar')
        tp.update_against_templates()

        store_count = tp.stores.count()
        self.assertEqual(store_count, 2)

        store = tp.stores.all()[0]
        dbunit_count = store.units.count()
        self.assertEqual(dbunit_count, 3)

        stunit_count = len(store.file.store.units)
        self.assertEqual(stunit_count, 6)

        unit = store.findid('Exact')
        self.assertEqual(unit.target, u'Belzabt')
        self.assertFalse(unit.isfuzzy())

        unit = store.findid('Fuzzy')
        self.assertEqual(unit.target, u'ta2riban')
        self.assertTrue(unit.isfuzzy())

        unit = store.findid('%d new')
        self.assertFalse(unit.istranslated())

        obsolete_count = store.unit_set.filter(state=OBSOLETE).count()
        self.assertEqual(obsolete_count, 1)
        unit = store.unit_set.get(state=OBSOLETE, unitid='obsolete')
        self.assertEqual(unit.source, u'obsolete')
        self.assertEqual(unit.target, u'2adim')
        #for unit in store.file.store.units:
        #    if unit.isobsolete():
        #        unit.resurrect()
        #        self.assertEqual(unit.source, u'obsolete')
        #        self.assertEqual(unit.target, u'2adim')

class PrefixGnuTests(GnuTests):
    """tests for Gnu style with prefix projects"""

    def _setup_test_files(self):
        gnu = os.path.join(self.testpodir, "testproj")
        os.mkdir(gnu)
        potfile = file(os.path.join(gnu, "test.pot"), 'w')
        potfile.write(self.template_text)
        potfile.close()
        pofile = file(os.path.join(gnu, "test_ar.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnu, "test_af.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnu, "test_zu.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnu, "test_pt_br.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        gnusub = os.path.join(gnu, "subdir")
        os.mkdir(gnusub)
        potfile = file(os.path.join(gnusub, "test.pot"), 'w')
        potfile.write(self.template_text)
        potfile.close()
        pofile = file(os.path.join(gnusub, "test_ar.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnusub, "test_af.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnusub, "test_zu.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnusub, "test_pt_br.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()


class NonGnuTests(GnuTests):
    """tests for Non-Gnu style projects"""

    def _setup_test_files(self):
        nongnu = os.path.join(self.testpodir, "testproj")
        os.mkdir(nongnu)
        nongnu_templates = os.path.join(nongnu, "templates")
        os.mkdir(nongnu_templates)
        nongnu_ar = os.path.join(nongnu, "ar")
        os.mkdir(nongnu_ar)
        nongnu_af = os.path.join(nongnu, "af")
        os.mkdir(nongnu_af)
        nongnu_zu = os.path.join(nongnu, "zu")
        os.mkdir(nongnu_zu)
        nongnu_pt_br = os.path.join(nongnu, "pt_BR")
        os.mkdir(nongnu_pt_br)

        potfile = file(os.path.join(nongnu_templates, "test.pot"), 'w')
        potfile.write(self.template_text)
        potfile.close()
        pofile = file(os.path.join(nongnu_ar, "test.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(nongnu_af, "test.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(nongnu_zu, "test.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(nongnu_pt_br, "test.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()

        nongnusub_templates = os.path.join(nongnu_templates, "subdir")
        os.mkdir(nongnusub_templates)
        nongnusub_ar = os.path.join(nongnu_ar, "subdir")
        os.mkdir(nongnusub_ar)
        nongnusub_af = os.path.join(nongnu_af, "subdir")
        os.mkdir(nongnusub_af)
        nongnusub_zu = os.path.join(nongnu_zu, "subdir")
        os.mkdir(nongnusub_zu)
        nongnusub_pt_br = os.path.join(nongnu_pt_br, "subdir")
        os.mkdir(nongnusub_pt_br)

        potfile = file(os.path.join(nongnusub_templates, "test.pot"), 'w')
        potfile.write(self.template_text)
        potfile.close()
        pofile = file(os.path.join(nongnusub_ar, "test.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(nongnusub_af, "test.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(nongnusub_zu, "test.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(nongnusub_pt_br, "test.po"), 'w')
        pofile.write(self.target_text)
        pofile.close()

    def test_realpath(self):
        """test that physical path is calculated correctly"""
        for tp in self.project.translationproject_set.iterator():
            expected_path = u'testproj/%s' % tp.language.code
            self.assertEqual(tp.real_path, expected_path)

    def test_template_detection(self):
        """test that given a template the correct target file name is generated"""
        template_tp = self.project.get_template_translationproject()
        for template_store in template_tp.stores.iterator():
            for tp in self.project.translationproject_set.exclude(language__code='templates').iterator():
                new_pootle_path, new_path = get_translated_name(tp, template_store)
                store = tp.stores.get(pootle_path=new_pootle_path)
                self.assertEqual(new_pootle_path, store.pootle_path)
                self.assertEqual(new_path, store.abs_real_path)

    def test_treestyle(self):
        """test treestyle detection"""
        self.assertEqual(self.project.get_treestyle(), 'nongnu')


class XliffTests(TestCase):
    """tests for XLIFF projects"""

    template_text = r'''<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.1" xmlns="urn:oasis:names:tc:xliff:document:1.1">
    <file original="doc.txt" source-language="en-US">
        <body>
            <trans-unit xml:space="preserve" id="header" approved="no" restype="x-gettext-domain-header">
                <source>Project-Id-Version: PACKAGE VERSION
Report-Msgid-Bugs-To:
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Generator: Pootle Tests
</source>
                <target state="translated">Project-Id-Version: PACKAGE VERSION
Report-Msgid-Bugs-To:
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Generator: Pootle Tests
</target>
            </trans-unit>
            <trans-unit id="Exact"><source>Exact</source><target></target></trans-unit>
            <trans-unit id="Fuzzy"><source>Fuzzy</source><target></target></trans-unit>
            <group id="1" restype="x-gettext-plurals">
                <trans-unit id="1[0]"><source>%d new</source><target></target></trans-unit>
                <trans-unit id="1[1]"><source>%d news</source><target></target></trans-unit>
            </group>
        </body>
    </file>
</xliff>
'''
    target_text = r'''<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.1" xmlns="urn:oasis:names:tc:xliff:document:1.1">
    <file original="doc.txt" source-language="en-US">
        <body>
            <trans-unit xml:space="preserve" id="header" approved="no" restype="x-gettext-domain-header">
                <source>Project-Id-Version: PACKAGE VERSION
Report-Msgid-Bugs-To:
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Generator: Pootle Tests
</source>
                <target state="translated">Project-Id-Version: PACKAGE VERSION
Report-Msgid-Bugs-To:
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Generator: Pootle Tests
</target>
            </trans-unit>
            <trans-unit id="Exact" approved="yes"><source>Exact</source><target>Belzabt</target></trans-unit>
            <trans-unit id="fuzzy" approved="yes"><source>fuzzy</source><target>ta2riban</target></trans-unit>
            <trans-unit id="obsolete" approved="yes"><source>obsolete</source><target>2adim</target></trans-unit>
        </body>
    </file>
</xliff>
'''
    ext = 'xlf'
    unit_count = 3
    nontrans_count = 1

    def _setup_test_files(self):
        gnu = os.path.join(self.testpodir, "testproj")
        os.mkdir(gnu)
        potfile = file(os.path.join(gnu, "test_en."+self.ext), 'w')
        potfile.write(self.template_text)
        potfile.close()
        pofile = file(os.path.join(gnu, "test_ar."+self.ext), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnu, "test_af."+self.ext), 'w')
        pofile.write(self.target_text)
        pofile.close()
        pofile = file(os.path.join(gnu, "test_zu."+self.ext), 'w')
        pofile.write(self.target_text)
        pofile.close()

    def setUp(self):
        super(XliffTests, self).setUp()
        en = require_english()
        Project.objects.get_or_create(code="testproj", fullname=u"testproj",
                                      localfiletype=self.ext, source_language=en)
        self.project = Project.objects.get(code='testproj')
        for tp in self.project.translationproject_set.iterator():
            tp.require_units()

    def test_new(self):
        """test initializing a new file from templates"""
        fr = Language.objects.get(code='fr')
        new_tp = self.project.translationproject_set.create(language=fr)
        new_tp.update_against_templates()
        store_count = new_tp.stores.count()
        self.assertEqual(store_count, 1)
        store = new_tp.stores.all()[0]
        dbunit_count = store.units.count()
        self.assertEqual(dbunit_count, self.unit_count)
        stunit_count = len(store.file.store.units)
        self.assertEqual(stunit_count, self.unit_count + self.nontrans_count)

        unit = store.findunit('%d new')
        self.assertTrue(unit)

    def test_plural(self):
        store = Store.objects.get(pootle_path='/en/testproj/test_en.'+self.ext)
        unit = store.findunit('%d new')
        self.assertTrue(unit.hasplural())

    def test_update(self):
        """test updating existing files to templates"""
        tp = self.project.translationproject_set.get(language__code='ar')
        tp.update_against_templates()

        store_count = tp.stores.count()
        self.assertEqual(store_count, 1)

        store = tp.stores.all()[0]
        dbunit_count = store.units.count()
        self.assertEqual(dbunit_count, self.unit_count)

        stunit_count = len(store.file.store.units)
        self.assertEqual(stunit_count, self.unit_count + self.nontrans_count)

        unit = store.findunit('Exact')
        self.assertEqual(unit.target, u'Belzabt')
        self.assertFalse(unit.isfuzzy())

        unit = store.findunit('Fuzzy')
        #sugg_count = unit.get_suggestions().count()
        #self.assertEqual(sugg_count, 1)
        #sugg = unit.get_suggestions()[0]
        #self.assertEqual(sugg.target, u'ta2riban')
        self.assertEqual(unit.target, u'ta2riban')
        self.assertTrue(unit.isfuzzy())

        unit = store.findunit('%d new')
        self.assertFalse(unit.istranslated())

        obsolete_count = store.unit_set.filter(state=OBSOLETE).count()
        self.assertEqual(obsolete_count, 1)
        unit = store.unit_set.filter(state=OBSOLETE)[0]
        self.assertEqual(unit.source, u'obsolete')
        self.assertEqual(unit.target, u'2adim')

        pofile = open(store.abs_real_path, 'w')
        pofile.write(self.target_text)
        pofile.close()

        store.update(update_structure=True, update_translation=True)
        unit = store.findunit('obsolete')
        self.assertEqual(unit.target, u'2adim')
        self.assertFalse(unit.isobsolete())

class CsvTests(XliffTests):
    """Tests for CSV projects"""
    template_text = r'''id, source, target, location, fuzzy
"Exact", "Exact", "", "fish.c:1", "False"
"Fuzzy", "Fuzzy", "", "test.c:1", "False"
"%d new", "%d new", "", "fish.c:2", "False"
'''
    target_text = r'''id, source, target, location, fuzzy
"Exact", "Exact", "Belzabt", "fish.c:1", "False"
"fuzzy", "fuzzy", "ta2riban", "test.c:1", "False"
"obsolete", "obsolete", "2adim", "fish.c:2", "False"
'''
    ext = 'csv'
    nontrans_count = 0

    def test_plural(self):
        # csv files don't do plurals, suppress
        pass

class TsTests(XliffTests):
    """Tests for Qt ts projects"""
    template_text = r'''<!DOCTYPE TS>
<TS version="2.0">
    <context>
        <name>header</name>
        <message><source></source><translatorcomment>some headers</translatorcomment></message>
    </context>
    <context>
        <name>fish.c</name>
        <message><source>Exact</source><translation></translation></message>
        <message><source>Fuzzy</source><translation></translation></message>
        <message numerus="yes"><source>%d new</source>
        <translation><numerusform></numerusform><numerusform></numerusform></translation></message>
    </context>
</TS>
'''
    target_text = r'''<!DOCTYPE TS>
<TS version="2.0">
    <context>
        <name>header</name>
        <message><source></source><translation>some headers</translation></message>
    </context>
    <context>
        <name>fish.c</name>
        <message><source>Exact</source><translation>Belzabt</translation></message>
        <message><source>fuzzy</source><translation>ta2riban</translation></message>
        <message><source>obsolete</source><translation>2adim</translation></message>
    </context>
</TS>
'''
    ext = 'ts'

class PropTests(XliffTests):
    """tests for java properties projects"""

    template_text = r'''# old template

Exact=Exact
fuzzy=fuzzy
obsolete=obsolete
'''
    target_text = r'''# target

Exact=Belzabt
fuzzy=ta2riban
obsolete=2adim
'''

    new_template_text = r'''# new template

Exact=Exact
Fuzzy=Fuzzy
new=%d new
'''
    ext = 'properties'

    def setUp(self):
        super(PropTests, self).setUp()
        potfile = file(os.path.join(self.testpodir, "testproj", "test_en."+self.ext), 'w')
        potfile.write(self.new_template_text)
        potfile.close()
        template_tp = self.project.translationproject_set.get(language__code='en')
        template_tp.update()

    def test_plural(self):
        # monolingual files don't do plurals, suppress
        pass

class SrtTests(PropTests):
    """Tests for subtitles projects"""

    template_text = r'''1
00:00:00,000 --> 00:00:05,000
Exact

2
00:00:06,000 --> 00:00:11,000
fuzzy

3
00:00:11,000 --> 00:00:14,000
obsolete

'''
    target_text = r'''1
00:00:00,000 --> 00:00:05,000
Belzabt

2
00:00:06,000 --> 00:00:11,000
ta2riban

3
00:00:11,000 --> 00:00:14,000
2adim
'''
    new_template_text = r'''1
00:00:00,000 --> 00:00:05,000
Exact

2
00:00:05,000 --> 00:00:11,000
Fuzzy

3
00:00:10,000 --> 00:00:14,000
%d new
'''
    ext = 'srt'
    nontrans_count = 0

########NEW FILE########
__FILENAME__ = unit
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2009, 2013 Zuza Software Foundation
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest

from translate.storage import factory


def _update_translation(store, item, new_values):
    unit = store.getitem(item)

    if 'target' in new_values:
        unit.target = new_values['target']
        if "fuzzy" not in new_values:
            unit.state = 200

    if 'fuzzy' in new_values:
        unit.markfuzzy(new_values['fuzzy'])

    if 'translator_comment' in new_values:
        unit.translator_comment = new_values['translator_comment']

    if new_values.get("refresh_stats"):
        unit._target_updated = True
        # Will be updated on save()

    unit.save()
    store.sync()

    return store.getitem(item)


def test_getorig(af_tutorial_po):
    """Tests that the in-DB Store and on-disk Store match by checking that
    units match in order.
    """
    for db_unit in af_tutorial_po.units.iterator():
        store_unit = db_unit.getorig()
        assert db_unit.getid() == store_unit.getid()


def test_convert(af_tutorial_po):
    """Tests that in-DB and on-disk units match after format conversion."""
    for db_unit in af_tutorial_po.units.iterator():
        if db_unit.hasplural() and not db_unit.istranslated():
            # Skip untranslated plural units, they will always look
            # different
            continue

        store_unit = db_unit.getorig()
        newunit = db_unit.convert(af_tutorial_po.file.store.UnitClass)

        assert str(newunit) == str(store_unit)


@pytest.mark.xfail
@pytest.mark.django_db
def test_update_target(af_tutorial_po):
    """Tests that target changes are properly sync'ed to disk."""
    db_unit = _update_translation(af_tutorial_po, 0, {'target': u'samaka'})
    store_unit = db_unit.getorig()

    assert db_unit.target == u'samaka'
    assert db_unit.target == store_unit.target

    po_file = factory.getobject(af_tutorial_po.file.path)
    assert db_unit.target == po_file.units[db_unit.index].target


@pytest.mark.django_db
def test_empty_plural_target(af_tutorial_po):
    """Tests empty plural targets are not deleted."""
    db_unit = _update_translation(af_tutorial_po, 2, {'target': [u'samaka']})
    store_unit = db_unit.getorig()
    assert len(store_unit.target.strings) == 2

    db_unit = _update_translation(af_tutorial_po, 2, {'target': u''})
    assert len(store_unit.target.strings) == 2


@pytest.mark.xfail
@pytest.mark.django_db
def test_update_plural_target(af_tutorial_po):
    """Tests plural translations are stored and sync'ed."""
    db_unit = _update_translation(af_tutorial_po, 2,
                                 {'target': [u'samaka', u'samak']})
    store_unit = db_unit.getorig()

    assert db_unit.target.strings == [u'samaka', u'samak']
    assert db_unit.target.strings == store_unit.target.strings

    po_file = factory.getobject(af_tutorial_po.file.path)
    assert db_unit.target.strings == po_file.units[db_unit.index].target.strings

    assert db_unit.target == u'samaka'
    assert db_unit.target == store_unit.target
    assert db_unit.target == po_file.units[db_unit.index].target


@pytest.mark.xfail
@pytest.mark.django_db
def test_update_plural_target_dict(af_tutorial_po):
    """Tests plural translations are stored and sync'ed (dict version)."""
    db_unit = _update_translation(af_tutorial_po, 2,
                                 {'target': {0: u'samaka', 1: u'samak'}})
    store_unit = db_unit.getorig()

    assert db_unit.target.strings == [u'samaka', u'samak']
    assert db_unit.target.strings == store_unit.target.strings

    po_file = factory.getobject(af_tutorial_po.file.path)
    assert db_unit.target.strings == po_file.units[db_unit.index].target.strings

    assert db_unit.target == u'samaka'
    assert db_unit.target == store_unit.target
    assert db_unit.target == po_file.units[db_unit.index].target


@pytest.mark.xfail
@pytest.mark.django_db
def test_update_fuzzy(af_tutorial_po):
    """Tests fuzzy state changes are stored and sync'ed."""
    db_unit = _update_translation(af_tutorial_po, 0,
                                 {'target': u'samaka', 'fuzzy': True})
    store_unit = db_unit.getorig()

    assert db_unit.isfuzzy() == True
    assert db_unit.isfuzzy() == store_unit.isfuzzy()

    po_file = factory.getobject(af_tutorial_po.file.path)
    assert db_unit.isfuzzy() == po_file.units[db_unit.index].isfuzzy()

    db_unit = _update_translation(af_tutorial_po, 0, {'fuzzy': False})
    store_unit = db_unit.getorig()

    assert db_unit.isfuzzy() == False
    assert db_unit.isfuzzy() == store_unit.isfuzzy()

    po_file = factory.getobject(af_tutorial_po.file.path)
    assert db_unit.isfuzzy() == po_file.units[db_unit.index].isfuzzy()


@pytest.mark.xfail
@pytest.mark.django_db
def test_update_comment(af_tutorial_po):
    """Tests translator comments are stored and sync'ed."""
    db_unit = _update_translation(af_tutorial_po, 0,
                                 {'translator_comment': u'7amada'})
    store_unit = db_unit.getorig()

    assert db_unit.getnotes(origin='translator') == u'7amada'
    assert db_unit.getnotes(origin='translator') == \
            store_unit.getnotes(origin='translator')

    po_file = factory.getobject(af_tutorial_po.file.path)
    assert db_unit.getnotes(origin='translator') == \
            po_file.units[db_unit.index].getnotes(origin='translator')


@pytest.mark.django_db
def test_stats_counting(af_tutorial_po):
    unit = _update_translation(af_tutorial_po, 0, {"refresh_stats": True})
    initial_translated = af_tutorial_po.translated_wordcount
    initial_wordcount = af_tutorial_po.total_wordcount
    db_unit = _update_translation(af_tutorial_po, 0, {'target': u'samaka'})
    # assert af_tutorial_po.translated_wordcount == initial_translated + 1  # Flaky
    assert af_tutorial_po.total_wordcount == initial_wordcount

########NEW FILE########
__FILENAME__ = settings
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Test settings."""

import os

SECRET_KEY = "test_secret_key"


ROOT_DIR = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
PODIRECTORY = os.path.join(ROOT_DIR, 'tests', 'data', 'po')


# In-memory caching
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'pootle-tests'
    }
}


# Mail server settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Faster password hasher
PASSWORD_HASHERS = (
    'django.contrib.auth.hashers.MD5PasswordHasher',
)

########NEW FILE########
__FILENAME__ = utils
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

"""Random utilities for tests."""


def formset_dict(data):
    """Convert human readable POST dictionary into brain dead django
    formset dictionary.
    """
    new_data = {
        'form-TOTAL_FORMS': len(data),
        'form-INITIAL_FORMS': 0,
    }

    for i in range(len(data)):
        for key, value in data[i].iteritems():
            new_data["form-%d-%s" % (i, key)] = value

    return new_data

########NEW FILE########
__FILENAME__ = admin
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest

from django.core.urlresolvers import reverse_lazy


ADMIN_URL = reverse_lazy('pootle-admin')


@pytest.mark.django_db
def test_admin_not_logged_in(client):
    """Checks logged-out users cannot access the admin site."""
    response = client.get(ADMIN_URL)
    assert response.status_code == 403


@pytest.mark.django_db
def test_admin_regular_user(client, default):
    """Checks regular users cannot access the admin site."""
    client.login(username=default.username, password='')
    response = client.get(ADMIN_URL)
    assert response.status_code == 403


@pytest.mark.django_db
def test_admin_access(admin_client):
    """Tests that admin users can access the admin site."""
    response = admin_client.get(ADMIN_URL)
    assert response.status_code == 200

########NEW FILE########
__FILENAME__ = project
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest

from django.core.urlresolvers import reverse, reverse_lazy

from pootle_language.models import Language
from pootle_project.models import Project

from ..utils import formset_dict


PROJECTS_ADMIN_URL = reverse_lazy('pootle-admin-projects')


@pytest.mark.xfail
def test_add_project(admin_client, english, tutorial):
    """Tests that we can add a project successfully."""
    new_project_code = 'test-project'
    new_project_name = 'Test Project'
    add_dict = {
        'code': new_project_code,
        'localfiletype': 'xlf',
        'fullname': new_project_name,
        'checkstyle': 'standard',
        'source_language': english.id,
        'treestyle': 'gnu',
    }

    response = admin_client.post(PROJECTS_ADMIN_URL, formset_dict([add_dict]))

    project_admin_url = reverse('pootle-project-admin-languages',
                                args=[new_project_code])
    project_admin_link = ''.join([
        '<a href="', project_admin_url, '">', new_project_code, '</a>'
    ])
    assert project_admin_link in response.content

    # Check for the actual model
    test_project = Project.objects.get(code=new_project_code)

    assert bool(test_project)
    assert test_project.fullname == add_dict['fullname']
    assert test_project.checkstyle == add_dict['checkstyle']
    assert test_project.localfiletype == add_dict['localfiletype']
    assert test_project.treestyle == add_dict['treestyle']


def test_project_list(admin_client, tutorial):
    """Tests that the admin project list contains the DB projects."""
    response = admin_client.get(PROJECTS_ADMIN_URL)

    project_admin_url = reverse('pootle-project-admin-languages',
                                args=[tutorial.code])
    project_admin_link = ''.join([
        '<a href="', project_admin_url, '">tutorial</a>'
    ])

    assert project_admin_link in response.content


@pytest.mark.xfail
@pytest.mark.django_db
def test_add_language(admin_client, fish, tutorial):
    """Tests a new language can be added to a project."""
    project_admin_url = reverse('pootle-project-admin-languages',
                                args=[tutorial.code])

    add_dict = {
        'language': fish.id,
        'project': tutorial.id,
    }
    response = admin_client.post(project_admin_url, formset_dict([add_dict]))
    tp_admin_permissions_url = reverse('pootle-tp-admin-permissions',
                                       args=[fish.code, tutorial.code])
    # If the link to the TP admin exists, the language was added
    # successfully
    assert tp_admin_permissions_url in response.content

    language_url = reverse('pootle-language-overview', args=[fish.code])
    response = admin_client.get(language_url)

    tp_url = reverse('pootle-tp-overview',
                     args=[fish.code, tutorial.code, '', ''])
    # The language page should contain a link to the new TP
    assert ''.join(['<a href="', tp_url, '">']) in response.content

########NEW FILE########
__FILENAME__ = translation_project
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014 Evernote Corporation
#
# This file is part of Pootle.
#
# Pootle is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import pytest

from translate.misc import wStringIO

from pootle_store.models import Store


@pytest.mark.xfail
def test_upload_new_file(admin_client):
    """Tests that we can upload a new file into a translation project."""
    pocontent = wStringIO.StringIO('#: test.c\nmsgid "test"\nmsgstr "rest"\n')
    pocontent.name = "test_new_upload.po"

    post_dict = {
        'file': pocontent,
        'overwrite': 'merge',
        'do_upload': 'upload',
    }
    response = admin_client.post("/ar/tutorial/", post_dict)

    assert 'href="/ar/tutorial/test_new_upload.po' in response
    store = Store.objects.get(pootle_path="/ar/tutorial/test_new_upload.po")
    assert os.path.isfile(store.file.path)
    assert store.file.read() == pocontent.getvalue()


@pytest.mark.xfail
def test_upload_overwrite(admin_client):
    """Tests that we can overwrite a file in a project."""
    pocontent = wStringIO.StringIO('#: test.c\nmsgid "fish"\nmsgstr ""\n#: test.c\nmsgid "test"\nmsgstr "barf"\n\n')
    pocontent.name = "pootle.po"

    post_dict = {
        'file': pocontent,
        'overwrite': 'overwrite',
        'do_upload': 'upload',
    }
    admin_client.post("/af/tutorial/", post_dict)

    # Now we only test with 'in' since the header is added
    store = Store.objects.get(pootle_path="/af/tutorial/pootle.po")
    assert store.file.read() == pocontent.getvalue()


@pytest.mark.xfail
def test_upload_new_archive(admin_client):
    """Tests that we can upload a new archive of files into a project."""
    import zipfile
    po_content_1 = '#: test.c\nmsgid "test"\nmsgstr "rest"\n'
    po_content_2 = '#: frog.c\nmsgid "tadpole"\nmsgstr "fish"\n'

    archivefile = wStringIO.StringIO()
    archivefile.name = "fish.zip"
    archive = zipfile.ZipFile(archivefile, "w", zipfile.ZIP_DEFLATED)
    archive.writestr("test_archive_1.po", po_content_1)
    archive.writestr("test_archive_2.po", po_content_2)
    archive.close()

    archivefile.seek(0)
    post_dict = {
        'file': archivefile,
        'overwrite': 'merge',
        'do_upload': 'upload',
    }
    response = admin_client.post("/ar/tutorial/", post_dict)

    assert 'href="/ar/tutorial/test_archive_1.po' in response
    assert 'href="/ar/tutorial/test_archive_2.po' in response

    store = Store.objects.get(pootle_path="/ar/tutorial/test_archive_1.po")
    assert os.path.isfile(store.file.path)
    assert store.file.read() == po_content_1

    store = Store.objects.get(pootle_path="/ar/tutorial/test_archive_2.po")
    assert os.path.isfile(store.file.path)
    assert store.file.read() == po_content_2


@pytest.mark.xfail
def test_upload_over_file(admin_client):
    """Tests that we can upload a new version of a file into a project."""
    pocontent = wStringIO.StringIO('''#: fish.c
msgid "fish"
msgstr ""

#: test.c
msgid "test"
msgstr "resto"

''')
    pocontent.name = "pootle.po"
    post_dict = {
        'file': pocontent,
        'overwrite': 'overwrite',
        'do_upload': 'upload',
        }
    admin_client.post("/af/tutorial/", post_dict)
    pootle_path = "/af/tutorial/pootle.po"
    admin_client.get(pootle_path + "/translate")
    pocontent = wStringIO.StringIO('#: test.c\nmsgid "test"\nmsgstr "blo3"\n\n#: fish.c\nmsgid "fish"\nmsgstr "stink"\n')
    pocontent.name = "pootle.po"

    post_dict = {
        'file': pocontent,
        'overwrite': 'merge',
        'do_upload': 'upload',
    }
    admin_client.post("/af/tutorial/", post_dict)

    # NOTE: this is what we do currently: any altered strings become suggestions.
    # It may be a good idea to change this
    mergedcontent = '#: fish.c\nmsgid "fish"\nmsgstr "stink"\n'
    admin_client.get(pootle_path + "/download")
    store = Store.objects.get(pootle_path=pootle_path)
    assert store.file.read().find(mergedcontent) >= 0
    suggestions = [str(sug) for sug in store.findunit('test').get_suggestions()]
    assert "blo3" in suggestions


@pytest.mark.xfail
def test_upload_new_xliff_file(admin_client):
    """Tests that we can upload a new XLIFF file into a project."""
    xliffcontent = wStringIO.StringIO('''<?xml version='1.0' encoding='utf-8'?>
    <xliff xmlns="urn:oasis:names:tc:xliff:document:1.1" version="1.1">
    <file original="" source-language="en-US" datatype="po">
    <body>
    <trans-unit id="1" xml:space="preserve">
        <source>test</source>
        <target state="needs-review-translation">rest</target>
        <context-group name="po-reference" purpose="location">
        <context context-type="sourcefile">test.c</context>
        </context-group>
    </trans-unit>
    </body>
    </file>
    </xliff>
''')
    xliffcontent.name = 'test_new_xliff_upload.xlf'

    post_dict = {
        'file': xliffcontent,
        'overwrite': 'overwrite',
        'do_upload': 'upload',
    }

    response = admin_client.post("/ar/tutorial/", post_dict)
    assert ' href="/ar/tutorial/test_new_xliff_upload.po' in response


@pytest.mark.xfail
def test_upload_xliff_over_file(admin_client):
    """Tests that we can upload a new version of a XLIFF file into a project."""
    pocontent = wStringIO.StringIO('#: test.c\nmsgid "test"\nmsgstr "rest"\n\n#: frog.c\nmsgid "tadpole"\nmsgstr "fish"\n')
    pocontent.name = "test_upload_xliff.po"
    post_dict = {
        'file': pocontent,
        'overwrite': 'overwrite',
        'do_upload': 'upload',
    }
    admin_client.post("/ar/tutorial/", post_dict)

    xlfcontent = wStringIO.StringIO('''<?xml version="1.0" encoding="utf-8"?>
    <xliff version="1.1" xmlns="urn:oasis:names:tc:xliff:document:1.1">
    <file datatype="po" original="test_upload_xliff.po" source-language="en-US">
    <body>
        <trans-unit id="test" xml:space="preserve" approved="yes">
            <source>test</source>
            <target state="translated">rested</target>
            <context-group name="po-reference" purpose="location">
                <context context-type="sourcefile">test.c</context>
            </context-group>
        </trans-unit>
        <trans-unit id="slink" xml:space="preserve" approved="yes">
            <source>slink</source>
            <target state="translated">stink</target>
            <context-group name="po-reference" purpose="location">
                <context context-type="sourcefile">toad.c</context>
            </context-group>
        </trans-unit>
    </body>
    </file>
    </xliff>''')
    xlfcontent.name = "test_upload_xliff.xlf"

    post_dict = {
        'file': xlfcontent,
        'overwrite': 'merge',
        'do_upload': 'upload',
    }
    admin_client.post("/ar/tutorial/", post_dict)

    # NOTE: this is what we do currently: any altered strings become suggestions.
    # It may be a good idea to change this
    mergedcontent = '#: test.c\nmsgid "test"\nmsgstr "rest"\n\n#: frog.c\nmsgid "tadpole"\nmsgstr "fish"\n'
    store = Store.objects.get(pootle_path="/ar/tutorial/test_upload_xliff.po")
    assert os.path.isfile(store.file.path)
    assert store.file.read().find(mergedcontent) >= 0

    suggestions = [str(sug) for sug in store.findunit('test').get_suggestions()]
    assert "rested" in suggestions


@pytest.mark.xfail
def test_upload_suggestions(admin_client):
    """Tests that we can upload when we only have suggest rights."""
    pocontent = wStringIO.StringIO('#: test.c\nmsgid "test"\nmsgstr "samaka"\n')
    pocontent.name = "pootle.po"

    post_dict = {
        'file': pocontent,
        'overwrite': 'merge',
        'do_upload': 'upload',
    }
    admin_client.post("/af/tutorial/", post_dict)

    # Check that the orignal file didn't take the new suggestion.
    # We test with 'in' since the header is added
    store = Store.objects.get(pootle_path="/af/tutorial/pootle.po")
    assert 'msgstr "samaka"' not in store.file.read()

    suggestions = [str(sug) for sug in store.findunit('test').get_suggestions()]
    assert 'samaka' in suggestions

########NEW FILE########
