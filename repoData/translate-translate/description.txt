.. This is the text from translate/__init__.py
   It is used in:
   1. http://sourceforge.net/projects/translate/files/Translate%20Toolkit/README.rst
   2. https://pypi.python.org/pypi/translate-toolkit/

Tools and API for translation and localization engineering
==========================================================

The `Translate Toolkit <http://toolkit.translatehouse.org/>`_ is created by
localizers for localizers. It contains several utilities, as well as an API for
building localization tools.

Some of the **tools** include:

- File format `converters
  <http://docs.translatehouse.org/projects/translate-toolkit/en/latest/commands/index.html#converters>`_
- `Quality checking
  <http://docs.translatehouse.org/projects/translate-toolkit/en/latest/commands/index.html#quality-assurance>`_
  tools
- Tools for counting, grepping, terminology extraction, and pseudo-localization

Apart from the code for the tools above, some features of the **API** include:

- Support for multiple `file formats
  <http://docs.translatehouse.org/projects/translate-toolkit/en/latest/formats/index.html>`_
- Language information and language support code (including language detection)
- Code for translation memory, terminology matching and indexed search
- Several helper classes and functions for tools built on the Translate
  Toolkit.

In this directory go static files, for example images.

Translate Toolkit
-----------------

.. image:: https://travis-ci.org/translate/translate.png
    :alt: Build Status
    :target: https://travis-ci.org/translate/translate
.. image:: https://coveralls.io/repos/translate/translate/badge.png?branch=master
    :alt: Coverage Status
    :target: https://coveralls.io/r/translate/translate?branch=master

The Translate Toolkit is a set of software and documentation designed to help
make the lives of localizers both more productive and less frustrating.
The Toolkit is part of the translate.sourceforge.net project,
hosted at <http://translate.sourceforge.net/>.

The software includes programs to covert localization formats to the common
PO, and emerging XLIFF format.  There are also programs to check and manage PO
and XLIFF files.  Online documentation includes guides on using the tools,
running a localization project and how to localize various projects from
OpenOffice.org to Mozilla.

At its core the software contains a set of classes for handling various
localization storage formats: DTD, properties, OpenOffice.org GSI/SDF,
CSV, MO, Qt .ts, TMX, TBX, WordFast txt, Gettext .mo, Windows RC, and
of course PO and XLIFF.  It also provides scripts to convert between
these formats.

Also part of the Toolkit are Python programs to create word counts, merge
translations and perform various checks on translation files.


Download
--------
The latest version of the Translate Toolkit can be downloaded from:
<http://sourceforge.net/projects/translate/files/Translate%20Toolkit/>.

The latest documentation is always available at
http://docs.translatehouse.org/projects/translate-toolkit/en/latest/
(Documentation is also included in the doc directory).


Copying
-------
The Translate Toolkit is developed and Copyright::

	Zuza Software Foundation (Translate.org.za), and
	St James Software

and is released under the GPL license.

The Translate Toolkit Documentation is Copyright::

	Dwayne Bailey
	Javier SOLA
	David Fraser
	Friedel Wolff
	and others

and is released under the GPL.

Where useful emails have been quoted we have attempted to preserve the authors
name and assume that their work may be republished.

Joining the Translate Project
-----------------------------
If you would like to join the translate project mailing list then visit:
<http://lists.sourceforge.net/lists/listinfo/translate-devel>.

The vision of the Translate Project is to be a meta project for localizers
built on the premise that your language deserves to be a project on its own
right not a poor cousin of the main project.

Most projects are inattentive to the needs and difficulties experienced by
localizers. To that end the aim is to work towards creating tools and
documentation that allows localizers to focus on what they do best: translating
software.

Requirements
------------

.. note:: Please check ``requirements/*.txt``::

       pip install -r requirements/recommended.txt

   Will install all recommended requirements, while ``optional.txt`` will also
   install support for all other formats.

Python 2.6 or later is required.

Python 2.5 is no longer supported by the Python Software Foundation, while the
Toolkit may work in versions before Python 2.6 this is not supported.

The package lxml is needed for XML file processing. Version 1.3.4 and upwards
should work, but lxml 2.1.0 or later is strongly recommended. <http://lxml.de/>
Depending on your platform, the easiest way to install might be through your
system's package management. Alternatively you can try ::

    easy_install lxml

which should install the newest version from the web. See the easy_install
documentation for more details on how to force installation of a certain
version, or to specify upgrade options, etc.

For Mac OSX, the following pages might be of help:
<http://lxml.de/build.html#building-lxml-on-macos-x>
<http://lxml.de/installation.html#macos-x>

The package lxml has dependencies on libxml2 and libxslt. Please check the lxml
site for the recommended versions of these libraries if you need to install
them separately at all. Most packaged versions of lxml will already contain
these dependencies.

When the environment variable USECPO is set to 1, the toolkit will attempt to
use libgettextpo from the gettext-tools package (it might have a slightly
different name on your distribution). This can greatly speed up access to PO
files, but has not yet been tested as extensively. Feedback is most welcome.

The package iniparse is necessary for ini2po and po2ini.
http://code.google.com/p/iniparse/

The python-Levenshtein package will improve performance for fuzzy matching if
it is available. This can improve the performance of pot2po, for example.  It
is optional and no functionality is lost if it is not installed, only speed.
<http://sourceforge.net/projects/translate/files/python-Levenshtein/>

Functions in the lang.data module can supply functions to translate language
names using the iso-codes package. It can even translate names in the format
``Language (Country)``
such as
``English (South Africa)``
This is used by Pootle and Virtaal. If the package is not installed, the
language names will simply appear in English. It is therefore recommended you
install the iso-codes package for your distribution, but it is optional.
Alternatively, it is also available from
http://packages.debian.org/unstable/source/iso-codes

The package vobject is needed for ical2po and po2ical.  Versions from
0.6.0 have been tested, 0.6.5 is required to fix an issue related to
Lotus Notes calendars. <http://vobject.skyhouseconsulting.com/>

The aeidon package (or gaupol if aeidon is not available) is needed for sub2po
and po2sub. Some Unicode encoded files (including most files from
<http://dotsub.com/>) require version 0.14 or later.
<http://home.gna.org/gaupol/>
Gaupol might need the 'Universal Encoding Detector'
<http://pypi.python.org/pypi/chardet>

Trados TXT TM support requires the BeautifulSoup parser
<http://www.crummy.com/software/BeautifulSoup/>

The programs have been tested on Linux and Windows.


Installation
------------

To install the Translate Toolkit

*   Windows

    Double click on translate-toolkit-N.N-setup.exe (the larger download file).
    This installer contains all dependencies you will need, including Python. To
    use any of the command line tools, just type their name in a command window.
    For example::

        moz2po --version

    Alternatively you can install the smaller translate-toolkit-N.N.N.win32.exe
    This needs an existing Python installation, and assumes you will install all
    the dependencies yourself. You will probably need to edit your PATH
    environment variable to be able to use the tools in any command window.

*   Linux ::

        tar xzf translate-N.N.tar.gz
        cd translate-N.N
        su -c ./setup.py install

    If you get an error along the lines of ::

        Unable to open /usr/lib/python2.N/config/Makefile (no such file or directory)

    while running setup.py, you need to install python-dev or libpython2.N-devel
    package. Try to install python2.N-dev or libpython2.N-devel or something
    similar with your distribution's package manager.


Bugs
----
We think there might be some :)

Please send your bug reports to:
translate-devel at lists.sourceforge.net
or report them at our bugzilla server at
<http://bugs.locamotion.org/>

Some help in writing useful bug reports are mentioned here:
<http://translate.sourceforge.net/wiki/developers/reporting_bugs>

Documentation
-------------
Please read our documentation online at
http://docs.translatehouse.org/projects/translate-toolkit/en/latest/.
There they are constantly being updated. Please feel free to contribute new
sections and suggest corrections.

Most tools support the options ``--help`` and ``--manpage`` of which the output
is automatically generated. The output of ``--manpage`` produces output suitable
for formatting as a standard manpage. This can be viewed on UNIX platforms with
::

    nroff -Tutf8 -mandoc

With pot2po as example::

    pot2po --manpage | nroff -Tutf8 -mandoc | less

This is probably most useful for packagers to help them generate manual pages
for the packaged versions.

Program overview
----------------

Use ``--help`` to find the syntax and options for all programs.

* Converters::

        oo2po    - convert between OpenOffice.org GSI files and PO
        oo2xliff - convert between OpenOffice.org GSI files and XLIFF
        moz2po   - convert between Mozilla files and PO
        csv2po   - convert PO format to CSV for editing in a spreadsheet program
        php2po   - PHP localisable string arrays converter.
        ts2po    - convert Qt Linguist (.ts) files to PO
        txt2po   - convert simple text files to PO
        html2po  - convert HTML to PO (beta)
        xliff2po - XLIFF (XML Localisation Interchange File Format) converter
        prop2po  - convert Java .properties files to PO
        po2wordfast - Wordfast Translation Memory converter
        po2tmx   - TMX (Translation Memory Exchange) converter
        pot2po   - PO file initialiser
        csv2tbx  - Create TBX (TermBase eXchange) files from Comma Separated
                   Value (CSV) files
        ini2po   - convert .ini files to to PO
        ical2po  - Convert iCalendar files (*.ics) to PO
        sub2po   - Convert many subtitle files to PO

* Tools (Quality Assurance)::

        pofilter - run any of the 40+ checks on your PO files
        pomerge  - merge corrected translations from pofilter back into
                   your existing PO files.
        poconflicts - identify conflicting use of terms
        porestructure - restructures po files according to poconflict directives
        pogrep   - find words in PO files

* Tools (Other)::

        pocompile - create a Gettext MO files from PO or XLIFF files
        pocount   - count translatable file formats (PO, XLIFF)
        podebug   - Create comment in your PO files' msgstr which can
                    then be used to quickly track down mistranslations
                    as the comments appear in the application.
        posegment - Break a PO or XLIFF files into sentence segments,
                    useful for creating a segmented translation memory.
        poswap    - uses a translation of another language that you
                    would rather use than English as source language
        poterminology - analyse PO or POT files to build a list of
                        frequently occurring words and phrases

This directory contains data files that serve as language models for language
recognition. They are in the format used by libtextcat and obtained from the
current openoffice.org-common Ubuntu package. You might find them in your
installation in a place like
    basis3.1/share/fingerprint/

Note that several files were removed due to incorrect encodings or other
problems. Here is a summary of some issues encountered:

Arabic (ar): No frequencies
Belarus (be): No frequencies
Chinese (zh): No frequencies
Croatian (hr): Possibly broken
Esperanto (eo): Possibly broken
Japanese (jp): No frequencies
Latvian (lv): Possible orthography issues
Lithuanian (lt): Division signs
Middle Frisian (??): Applicable?
Mingo (??): What is this?
Polish (pl): Incorrect encoding?
Romanian (ro): Missing non-ASCII characters. Incorrect encoding?
Serbian@latin: Language code needs Cyrillic model as well
Turkish (tr): Missing non-ASCII characters.
Ukrainian (uk): No frequencies
Vietnamese (vi): Encoding issues in model


Classified incorrectly:
* Norwegian (no): Classified as Danish

================
Firefox Building
================  

The following are instructions for setting up a build environment
to use the Translate Toolkit and Pootle hosted at pootle.locamotion.org
to build Firefox and Firefox Mobile.

There are bound to be issues as we progress but generally the scripts
and tools are widely tested managing over 15 languages.


Setting up your environment
===========================

We use vagrant to manage VirtualBox VMs easily

1. Install VirtualBox
   Downloads https://www.virtualbox.org/wiki/Downloads
   Vagrant installation instructions http://vagrantup.com/v1/docs/getting-started/index.html
2. Install Vagrant
   Downloads http://downloads.vagrantup.com/
3. Create a directory for your Firefox work.  We use ~/dev/mozilla
   # mkdir -p ~/dev/mozilla
   # cd ~/dev/mozilla
4. # wget https://raw.github.com/translate/translate/master/tools/mozilla/Vagrantfile
5. # vagrant up
6. # vagrant ssh
7. # sudo ./postinstall.sh
8. # exit
9. # vagrant halt
10. # vagrant up
11. # vagrant ssh
12. # ./setup_mozilla.sh

You now have a VM that we will use exclusively for Firefox localisation.


Configuring your development setup
==================================

We need to setup some things so that you can work with
version control and have access to the servers.

1. Setup SSH for access to Mozilla mercurial
   Your SSH setup is copied from your computer into vagrant so if
   this already works on your computer then it is already setup.
2. Copy ~/.hgrc and ~/.gitconfig into $HOME on vagrant
3. Send your public key for access to the Pootle server (usually ~/.ssh/id_dsa.pub)
4. Request commit access to the SourceForge ZAF project to store your PO files

Now you should be able to commit changes in PO and Mozilla files. You should
also be able to get and push translations to the Pootle server.


Building Firefox
================

The previous steps are once off.  You have a build setup and access to version control.
The following are steps that you will repeat for every build.
In the following examples we are working with the fictitious language zz.  Replace zz
with your language code.

1. Get ready.
   # vagrant ssh
   # cd firefox
2. Get the new PO translations from Pootle.
   # cd po
   # svn up zz
   # ./get-from-pootle.sh zz
3. Review and commit translations.
   # svndiff zz
   Review the diff and check for any glaring errors.  If you 
   are happy then commit.  We commit before we work on the files so that we
   have something to go back to. Please use a good message as this is used by
   others to track the changes.  E.g. could be.  "Update to 100% in user1 for Zedzed",
   "Update translations following Zedzed sprint"
   # svn ci zz
   Files are now committed and we can get ready to process.
4. Begin updateing. You might want to tell your team that you are doing this
   as any changes they make on Pootle will be lost at a later step.
   # cd ~/firefox
   # ./build_firefox.sh zz
   A lot of processing will happen and it will take some time.  Check for any errors in the process.
5. Now check the updated PO files
   # cd po-updated
   # svndiff zz
   Review for any glaring errors.  You probably only care about such updates after
   a large migration e.g. Aurora 12 to Aurora 13.  If you are still in the same Aurora cycle then
   you don't really care about po-updated output.  Happy? Then commit as you did in po/
   Find any errors?  Fix them on Pootle or in the files in po/zz and run build_firefox.sh
   again.
6. Now we push our work to Mozilla
   # cd ~/firefox/l10n
   Check that Axel's compare locales pass
   # ./compare-locales.sh zz
   Check for any errors and correct.  Removed files should be fixed here. Errors in 
   translations should be fixed on Pootle or in po/
   # cd zz
   # hg status
   Check for any new or removed files. ? means a file not in version control.  ! means a files
   that was in version control and now isn't which usually means we don't need it anymore.
   # hg addremove path/to/files.dtd
   Add the files and please carefully check what you are adding.  You shouldn't be adding anything
   ending in .orig
   # hg diff
   Review the changes and check that you haven't broken anything. Happy?
   # hg commit
   # hg push
   If your push fails with remote: 'ssl required' then you need to do the following.  Edit
   l10/zz/.hg/hgrc, duplicate the line 'default = http:....' and replace default with default-push,
   replace http:// with ssh://
   Now try push again.
7. Wait for Mozilla to build your stuff
   Go to https://l10n-stage-sj.mozilla.org/teams/zz (Change zz of course) and check
   that you have been built.
   Get your nightly test build from
   http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-mozilla-aurora/
   Once you have tested.  Signoff your build at the URL above.
8. Push changes back to Pootle
   If you made committed changes in po-updated/zz then:
   # cd ~/firefox/po
   # cd zz
   # svn up
   Or commit any changes you made in po/zz
   # svn ci
   Please please tell us what the commit is about
   Now you need to push the files to Pootle
   # ./push-to-pootle.sh zz
   You will be asked if you want to proceed.  This is just a check that first syncs files on
   Pootle to check that nobody has made any changes.  Remember your files will overwrite
   anything done in your language on Pootle.
   Happy? Press y<enter>
   You are now synced and can tell your team to continue translating.


Handling types of errors
========================

* The best place to fix anything is on Pootle.  So try to do it there if possible.
* If you need to do it on the PO files, make sure you get-from-pootle.sh before you work
  and push-to-pootle.sh after your changes.  When pushing check that nobody has done any
  work while you were busy, do that by checking the last activity column at
  http://mozilla.locamotion.org/projects/firefox/
* compare-locale fixes are best done with the files in po/zz for speed.  Fix them all before
  doing another build
* If you see Mozilla bugs against your language:  Fix them in Pootle, then close the bug.  Your fix
  will come through in your next update.  If it is urgent you probably want to fix it in PO and
  make sure you push it through to Mozilla.
* If you see your translators making a common error please share it on the firefox-l10n
  list and try to educate them.


build_firefox.sh options
------------------------

--no-vc - No version control.  Won't update anything from Mozilla.  This is helpful if you are working on
          e.g. Aurora 12 and we haven't moved to Aurora 13.  Nothing should change in the source 
          text.  This options will shave off a lot of time.  If uncertain leave this off.
--xpi - Build a language pack.  If you aren't in Mozilla this is the only way to build one.  If your
        language is in Mozilla Mercurial, best to let Mozilla build your langpack.


Notes
=====
As long as you commit before major work you will be able to rollback any major issue.
So be brave and careful.

